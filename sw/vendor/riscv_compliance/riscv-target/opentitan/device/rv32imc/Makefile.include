# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

OPENTITAN     = $(ROOTDIR)/riscv-target/$(RISCV_TARGET)/device/rv32imc
OT_ROOT      ?= $(ROOTDIR)/../../../
OT_SW         = $(OT_ROOT)/sw/device
OT_BIN       ?= $(OT_ROOT)/build-bin
OT_TOOLS     ?= /tools/riscv/bin
OT_FPGA_UART ?=
OT_TARGET    ?= fpga_nexysvideo
LDSCRIPT      = $(OT_ROOT)/sw/device/exts/common/flash_link.ld
DEFINES       = $(CARG) -DPRIV_MISA_S=0 -DPRIV_MISA_U=0 -DRVTEST_ENTRY=_rvc_start -DTRAPALIGN=8
TARGET_SIM   ?= $(OT_ROOT)/build/lowrisc_systems_top_earlgrey_verilator_0.1/sim-verilator/Vtop_earlgrey_verilator

COMPLIANCE_LIB_EXPORT = sw/device/riscv_compliance_support/riscv_compliance_support_export_$(OT_TARGET)
COMPLIANCE_LIB = ot_riscv_compliance_support_$(OT_TARGET)

# The run target recipe does the following things:
# Invoke pytest to run the test
# Parse the resulting log for the output signatures
# Convert all signatures to lower case since the reference is in all lower case
ifeq ($(OT_TARGET),sim_verilator)
    MAKEARG = SIM=1
    CARG = -DSIMULATION=1
    RUN_TARGET = \
        $(TARGET_SIM) \
            --meminit="otp,$(OT_BIN)/sw/device/otp_img/otp_img_sim_verilator.vmem" \
            --meminit="rom,$(OT_BIN)/sw/device/boot_rom/boot_rom_sim_verilator.elf" \
            --meminit="flash,$(<)" \
            +UARTDPI_LOG_uart0="$(*).uart.log" > $@ 2>&1 \
        && sed -e 's/^/[UART $(shell basename $(*))] /' "$(*).uart.log" $(REDIR) \
        && grep -o 'SIG: [a-zA-Z0-9_]*' "$(*).uart.log" \
            | sed 's/SIG: //' > $(*).signature.output
else ifeq ($(OT_TARGET),fpga_nexysvideo)
    MAKEARG =
    CARG =
    RUN_TARGET = \
        ( test -e "$(OT_FPGA_UART)" || ( echo "UART device '$(OT_FPGA_UART)' not available. Set OT_FPGA_UART." >&2 && exit 1 ) ) \
        && echo "Writing '$(<).bin' to device." \
        && $(OT_BIN)/sw/host/spiflash/spiflash --input="$(<).bin" \
        && stty -F "$(OT_FPGA_UART)" speed 115200 cs8 -cstopb -parenb \
        && grep -o 'SIG: [a-zA-Z0-9_]*' "$(OT_FPGA_UART)" \
            | sed 's/SIG: //' > $(*).signature.output
else
    $(error Unsupported target $(OT_TARGET))
endif

RISCV_PREFIX   ?= ${OT_TOOLS}/riscv32-unknown-elf-
RISCV_GCC      ?= ${OT_TOOLS}/riscv32-unknown-elf-gcc
RISCV_OBJDUMP  ?= ${OT_TOOLS}/riscv32-unknown-elf-objdump
RISCV_OBJCOPY  ?= ${OT_TOOLS}/riscv32-unknown-elf-objcopy
RISCV_NM       ?= ${OT_TOOLS}/riscv32-unknown-elf-nm
RISCV_READELF  ?= ${OT_TOOLS}/riscv32-unknown-elf-readelf
RISCV_GCC_OPTS ?= -static -mcmodel=medany -fvisibility=hidden -nostdlib -nostartfiles -fno-builtin -g -Wl,--no-relax

COMPILE_TARGET += \
	$$(RISCV_GCC) $(1) $$(RISCV_GCC_OPTS) \
		-I$(ROOTDIR)/riscv-test-env/ \
		-I$(ROOTDIR)/riscv-test-env/p/ \
		-I$(OT_ROOT) \
		-I$(TARGETDIR)/$(RISCV_TARGET)/ \
		-I$(TARGETDIR)/$(RISCV_TARGET)/ \
		$(DEFINES) \
		-L$(OT_ROOT) -T$(LDSCRIPT) $$< \
		$(OPENTITAN)/main.c \
		$(OPENTITAN)/run_rvc_test.S \
		$(OT_ROOT)/sw/device/exts/common/ibex_interrupt_vectors.S \
		$(OT_ROOT)/sw/device/exts/common/flash_crt.S \
		-L$(OT_BIN)/sw/device/riscv_compliance_support \
		-l$(COMPLIANCE_LIB) \
		-o $$(@); \
	$$(RISCV_OBJDUMP) -SD $$(@) > $$(@).objdump; \
	$$(RISCV_READELF) -a $$(@) > $$(@).readelf; \
	$$(RISCV_NM) $$(@) > $$(@).nm; \
	$$(RISCV_OBJCOPY) -O binary $$(@) $$(@).bin;
