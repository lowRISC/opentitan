# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

OPENTITAN     = $(ROOTDIR)/riscv-target/$(RISCV_TARGET)/device/rv32imc
OT_SW         = $(ROOTDIR)/../../device
OT_ROOT       = $(OT_SW)/../../
OT_BIN			 ?= $(OT_ROOT)/build-bin
OT_BUILD			= $(OT_ROOT)/build-out
OT_TOOLS     ?= /tools/riscv/bin
OT_FPGA_UART ?=
OT_TARGET    ?= fpga
LDSCRIPT      = $(OT_ROOT)/sw/device/exts/common/flash_link.ld
DEFINES       = $(CARG) -DPRIV_MISA_S=0 -DPRIV_MISA_U=0 -DRVTEST_ENTRY=_rvc_start -DTRAPALIGN=8
TARGET_SIM   ?= $(OT_ROOT)/build/lowrisc_systems_top_earlgrey_verilator_0.1/sim-verilator/Vtop_earlgrey_verilator

ifeq ($(OT_TARGET),fpga)
	CARG =
	MAKEARG =
	PYTEST_OPT = --fpga_uart $(OT_FPGA_UART) --spiflash $(OT_BIN)/sw/host/spiflash/spiflash \
		--test_bin $(<).bin
	OT_SW_TARGET = fpga_nexysvideo
else
	CARG = -DSIMULATION=1
	MAKEARG = SIM=1
	# Verilator can be run in parallel mode so alter log output to prepend with
	# test name, also increase uart_timeout as with parallel runs on CI individual
	# test execution can take greater than 60 seconds.
	PYTEST_OPT = --verilator_model $(TARGET_SIM) --test_bin $(<).32.vmem \
		--rom_bin $(OT_BIN)/sw/device/boot_rom/boot_rom_sim_verilator.32.vmem \
		--log-cli-format "$(notdir $(basename $(<))): %(message)s" --log-cli-level DEBUG \
		--uart_timeout 240
	OT_SW_TARGET = sim_verilator
endif

COMPLIANCE_LIB_EXPORT = sw/device/riscv_compliance_support/riscv_compliance_support_export_$(OT_SW_TARGET)
COMPLIANCE_LIB = ot_riscv_compliance_support_$(OT_SW_TARGET)

# The run target recipe does the following things:
# Invoke pytest to run the test
# Parse the resulting log for the output signatures
# Convert all signatures to lower case since the reference is in all lower case
RUN_TARGET=\
        pytest -s -v $(OT_ROOT)/test/systemtest/functional_$(OT_TARGET)_test.py \
        $(PYTEST_OPT) \
        --log $(<).uart.log; \
        grep -o 'SIG: [a-zA-Z0-9_]*' $(<).uart.log | sed 's/SIG: //' \
        > $(*).signature.temp.output; \
        tr '[:upper:]' '[:lower:]' < $(*).signature.temp.output > $(*).signature.output;


RISCV_PREFIX   ?= ${OT_TOOLS}/riscv32-unknown-elf-
RISCV_GCC      ?= ${OT_TOOLS}/riscv32-unknown-elf-gcc
RISCV_OBJDUMP  ?= ${OT_TOOLS}/riscv32-unknown-elf-objdump
RISCV_OBJCOPY  ?= ${OT_TOOLS}/riscv32-unknown-elf-objcopy
RISCV_NM       ?= ${OT_TOOLS}/riscv32-unknown-elf-nm
RISCV_READELF  ?= ${OT_TOOLS}/riscv32-unknown-elf-readelf
RISCV_GCC_OPTS ?= -static -mcmodel=medany -fvisibility=hidden -nostdlib -nostartfiles -fno-builtin -g -Wl,--no-relax

COMPILE_TARGET += \
	$$(RISCV_GCC) $(1) $$(RISCV_GCC_OPTS) \
		-I$(ROOTDIR)/riscv-test-env/ \
		-I$(ROOTDIR)/riscv-test-env/p/ \
                -I$(OT_ROOT) \
		-I$(TARGETDIR)/$(RISCV_TARGET)/ \
		-I$(TARGETDIR)/$(RISCV_TARGET)/ \
		$(DEFINES) -T$(LDSCRIPT) $$< \
                $(OPENTITAN)/main.c \
                $(OPENTITAN)/run_rvc_test.S \
							  $(OT_ROOT)/sw/device/lib/irq_vectors.S \
								$(OT_ROOT)/sw/device/exts/common/flash_crt.S \
                -L$(OT_BIN)/sw/device/riscv_compliance_support \
								-l$(COMPLIANCE_LIB) \
		-o $$(@); \
        $$(RISCV_OBJDUMP) -SD $$(@) > $$(@).objdump; \
        $$(RISCV_READELF) -a $$(@) > $$(@).readelf; \
        $$(RISCV_NM) $$(@) > $$(@).nm; \
        $$(RISCV_OBJCOPY) -O binary $$(@) $$(@).bin; \
        srec_cat $$(@).bin -binary -offset 0x0000 -byte-swap 4 -o $$(@).32.vmem -vmem
