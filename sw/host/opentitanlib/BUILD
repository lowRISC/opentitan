# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

load("@rules_rust//rust:defs.bzl", "rust_doc", "rust_library", "rust_test")
load("//hw/top:defs.bzl", "opentitan_if_ip", "opentitan_select_top")
load("//rules:ujson.bzl", "ujson_rust")

package(default_visibility = ["//visibility:public"])

ujson_rust(
    name = "e2e_command",
    srcs = ["//sw/device/lib/testing/json:command"],
    defines = ["opentitanlib=crate"],
)

ujson_rust(
    name = "gpio",
    srcs = ["//sw/device/lib/testing/json:gpio"],
    defines = ["opentitanlib=crate"],
)

ujson_rust(
    name = "i2c_target",
    srcs = ["//sw/device/lib/testing/json:i2c_target"],
    defines = ["opentitanlib=crate"],
)

ujson_rust(
    name = "mem",
    srcs = ["//sw/device/lib/testing/json:mem"],
    defines = ["opentitanlib=crate"],
)

ujson_rust(
    name = "pinmux_config",
    srcs = ["//sw/device/lib/testing/json:pinmux_config"],
    defines = ["opentitanlib=crate"],
)

ujson_rust(
    name = "spi_passthru",
    srcs = ["//sw/device/lib/testing/json:spi_passthru"],
    defines = ["opentitanlib=crate"],
)

ujson_rust(
    name = "ottf",
    srcs = ["//sw/device/lib/testing/json:ottf"],
    defines = ["opentitanlib=crate"],
)

# This is the catch-all "everything" crate.
# Before adding things here, consider if it can be made a separate crate instead.
# This should eventually be break down into multiple smaller crates.
rust_library(
    name = "opentitanlib_base",
    srcs = [
        "src/app/command.rs",
        "src/app/config/mod.rs",
        "src/app/config/structs.rs",
        "src/app/gpio.rs",
        "src/app/i2c.rs",
        "src/app/mod.rs",
        "src/app/spi.rs",
        "src/backend/mod.rs",
        "src/bootstrap/eeprom.rs",
        "src/bootstrap/legacy.rs",
        "src/bootstrap/legacy_rescue.rs",
        "src/bootstrap/mod.rs",
        "src/bootstrap/primitive.rs",
        "src/chip/boolean.rs",
        "src/chip/boot_log.rs",
        "src/chip/boot_svc.rs",
        "src/chip/device_id.rs",
        "src/chip/helper.rs",
        "src/chip/mod.rs",
        "src/chip/rom_error.rs",
        "src/console/mod.rs",
        "src/console/spi.rs",
        "src/crypto/ecdsa.rs",
        "src/crypto/mod.rs",
        "src/crypto/rsa.rs",
        "src/crypto/sha256.rs",
        "src/crypto/spx.rs",
        "src/debug/dmi.rs",
        "src/debug/elf_debugger.rs",
        "src/debug/mod.rs",
        "src/debug/openocd.rs",
        "src/image/image.rs",
        "src/image/manifest.rs",
        "src/image/manifest_def.rs",
        "src/image/manifest_ext.rs",
        "src/image/mod.rs",
        "src/io/console.rs",
        "src/io/eeprom.rs",
        "src/io/emu.rs",
        "src/io/gpio.rs",
        "src/io/i2c.rs",
        "src/io/ioexpander.rs",
        "src/io/jtag.rs",
        "src/io/mod.rs",
        "src/io/spi.rs",
        "src/io/uart.rs",
        "src/lib.rs",
        "src/otp/alert_handler.rs",
        "src/otp/alert_handler_regs.rs",
        "src/otp/lc_state.rs",
        "src/otp/mod.rs",
        "src/otp/otp_img.rs",
        "src/ownership/application_key.rs",
        "src/ownership/flash.rs",
        "src/ownership/flash_info.rs",
        "src/ownership/misc.rs",
        "src/ownership/mod.rs",
        "src/ownership/owner.rs",
        "src/ownership/rescue.rs",
        "src/rescue/mod.rs",
        "src/rescue/serial.rs",
        "src/rescue/xmodem.rs",
        "src/spiflash/flash.rs",
        "src/spiflash/mod.rs",
        "src/spiflash/sfdp.rs",
        "src/test_utils/bitbanging/i2c.rs",
        "src/test_utils/bitbanging/mod.rs",
        "src/test_utils/bitbanging/pwm.rs",
        "src/test_utils/bitbanging/spi.rs",
        "src/test_utils/bitbanging/uart.rs",
        "src/test_utils/bitbanging/uart_rx_sampling.rs",
        "src/test_utils/bootstrap.rs",
        "src/test_utils/crashdump.rs",
        "src/test_utils/e2e_command.rs",
        "src/test_utils/epmp.rs",
        "src/test_utils/gpio.rs",
        "src/test_utils/gpio_monitor.rs",
        "src/test_utils/i2c_target.rs",
        "src/test_utils/init.rs",
        "src/test_utils/lc.rs",
        "src/test_utils/lc_transition.rs",
        "src/test_utils/load_bitstream.rs",
        "src/test_utils/load_sram_program.rs",
        "src/test_utils/mem.rs",
        "src/test_utils/mod.rs",
        "src/test_utils/object.rs",
        "src/test_utils/otp_ctrl.rs",
        "src/test_utils/poll.rs",
        "src/test_utils/rpc.rs",
        "src/test_utils/spi_passthru.rs",
        "src/test_utils/status.rs",
        "src/test_utils/test_status.rs",
        "src/tpm/access.rs",
        "src/tpm/driver.rs",
        "src/tpm/mod.rs",
        "src/tpm/status.rs",
        "src/transport/common/fpga.rs",
        "src/transport/common/mod.rs",
        "src/transport/common/uart.rs",
        "src/transport/errors.rs",
        "src/transport/ioexpander/mod.rs",
        "src/transport/ioexpander/sx1503.rs",
        "src/transport/mod.rs",
        "src/uart/console.rs",
        "src/uart/mod.rs",
        "src/util/bigint.rs",
        "src/util/bitbang.rs",
        "src/util/file.rs",
        "src/util/fs.rs",
        "src/util/hexdump.rs",
        "src/util/mod.rs",
        "src/util/num_de.rs",
        "src/util/parse_int.rs",
        "src/util/present.rs",
        "src/util/printer.rs",
        "src/util/raw_tty.rs",
        "src/util/rom_detect.rs",
        "src/util/runtime.rs",
        "src/util/serde.rs",
        "src/util/serializable_error.rs",
        "src/util/status.rs",
        "src/util/testing.rs",
        "src/util/usb.rs",
        "src/util/usr_access.rs",
        "src/util/vcd.rs",
        "src/util/vmem/mod.rs",
        "src/util/vmem/parser.rs",
        "src/util/voltage.rs",
    ] + opentitan_select_top({
        "englishbreakfast": [],
        },
        [
            "src/test_utils/extclk.rs",
            "src/test_utils/pinmux_config.rs",
        ],
    ),
    compile_data = [
        ":gpio",
        ":i2c_target",
        ":mem",
        ":e2e_command",
        ":pinmux_config",
        ":spi_passthru",
        ":ottf",
        "//util/openocd/target:lowrisc-earlgrey.cfg",
        "//util/openocd/target:lowrisc-earlgrey-lc.cfg",
        "//sw/host/opentitanlib/bindgen:rom_error_enum",
    ],
    crate_features = opentitan_select_top({
        "englishbreakfast": ["english_breakfast"],
        }, [],
    ),
    crate_name = "opentitanlib",
    proc_macro_deps = [
        "//sw/host/opentitanlib/opentitantool_derive",
    ],
    rustc_env = {
        "e2e_command": "$(location :e2e_command)",
        "gpio": "$(location :gpio)",
        "i2c_target": "$(location :i2c_target)",
        "mem": "$(location :mem)",
        "pinmux_config": "$(location :pinmux_config)",
        "rom_error_enum": "$(location //sw/host/opentitanlib/bindgen:rom_error_enum)",
        "spi_passthru": "$(location :spi_passthru)",
        "ottf": "$(location :ottf)",
        "openocd_riscv_target_cfg": "$(location //util/openocd/target:lowrisc-earlgrey.cfg)",
        "openocd_lc_target_cfg": "$(location //util/openocd/target:lowrisc-earlgrey-lc.cfg)",
    },
    deps = [
        "//sw/host/opentitanlib/bindgen",
        "//sw/host/ot_hal",
        "//sw/host/ot_hal/bindgen",
        "//sw/host/sphincsplus",
        "@crate_index//:anyhow",
        "@crate_index//:arrayvec",
        "@crate_index//:bitflags",
        "@crate_index//:byteorder",
        "@crate_index//:chrono",
        "@crate_index//:clap",
        "@crate_index//:crc",
        "@crate_index//:deser-hjson",
        "@crate_index//:directories",
        "@crate_index//:ecdsa",
        "@crate_index//:env_logger",
        "@crate_index//:erased-serde",
        "@crate_index//:hex",
        "@crate_index//:humantime",
        "@crate_index//:humantime-serde",
        "@crate_index//:indicatif",
        "@crate_index//:inventory",
        "@crate_index//:log",
        "@crate_index//:num-bigint-dig",
        "@crate_index//:num-traits",
        "@crate_index//:object",
        "@crate_index//:p256",
        "@crate_index//:pem-rfc7468",
        "@crate_index//:rand",
        "@crate_index//:regex",
        "@crate_index//:rsa",
        "@crate_index//:rusb",
        "@crate_index//:rustix",
        "@crate_index//:scopeguard",
        "@crate_index//:serde",
        "@crate_index//:serde_bytes",
        "@crate_index//:serde_json",
        "@crate_index//:serialport",
        "@crate_index//:sha2",
        "@crate_index//:shellwords",
        "@crate_index//:strum",
        "@crate_index//:thiserror",
        "@crate_index//:tokio",
        "@crate_index//:typetag",
        "@crate_index//:zerocopy",
        "@lowrisc_serde_annotate//serde_annotate",
    ],
)

# To avoid having all existing `opentitanlib` to carry dependency of individual splitted crates,
# re-export everything under the original `opentitanlib` name.
rust_library(
    name = "opentitanlib",
    srcs = [
        "reexport.rs",
    ],
    aliases = {
        # The `:opentitanlib_base` has crate name of `opentitanlib`.
        # Rename it before re-exporting to avoid conflicts.
        ":opentitanlib_base": "opentitanlib_base",
    },
    deps = [
        ":opentitanlib_base",
        "//sw/host/ot_transports/chipwhisperer",
        "//sw/host/ot_transports/dediprog",
        "//sw/host/ot_transports/ftdi",
        "//sw/host/ot_transports/hyperdebug",
        "//sw/host/ot_transports/proxy",
        "//sw/host/ot_transports/ti50emulator",
        "//sw/host/ot_transports/verilator",
    ],
)

rust_test(
    name = "opentitanlib_test",
    compile_data = [
        ":e2e_command",
        ":gpio",
        ":pinmux_config",
        "src/bootstrap/simple.bin",
        "src/spiflash/SFDP_MX66L1G.bin",
    ],
    crate = ":opentitanlib_base",
    data = glob(["testdata/**"]) + [
        ":e2e_command",
        ":gpio",
        ":pinmux_config",
    ],
    env = {
        "RUST_MIN_STACK": "4194304",
        "TESTDATA": "$(rootpath testdata/otp/lc_ctrl_state.hjson)",
    },
    rustc_env = {
        "e2e_command": "$(location :e2e_command)",
        "gpio": "$(location :gpio)",
        "pinmux_config": "$(location :pinmux_config)",
    },
)

rust_doc(
    name = "opentitanlib_doc",
    crate = ":opentitanlib_base",
)

filegroup(
    name = "doc_files",
    srcs = glob(["**/*.md"]),
)
