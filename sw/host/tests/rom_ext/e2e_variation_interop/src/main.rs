// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

//! ROM_EXT E2E Variation Interoperability test.
//!
//! This test harness checks that an CWT ROM_EXT can be booted on a chip before and after an X.509
//! ROM_EXT can be booted, and vice versa. In both cases, CDI_* should be regenerated by the
//! ROM_EXT seamlessly.

use std::path::PathBuf;
use std::time::Duration;

use anyhow::{anyhow, Context};
use clap::Parser;
use regex::Regex;

use opentitanlib::test_utils::init::InitializeTest;
use opentitanlib::uart::console::{ExitStatus, UartConsole};

/// CLI args for this test.
#[derive(Debug, Parser)]
struct Opts {
    #[command(flatten)]
    init: InitializeTest,

    /// Second image (ROM_EXT + Owner FW bundle) to bootstrap.
    #[arg(long)]
    second_bootstrap: PathBuf,

    /// Console receive timeout.
    #[arg(long, value_parser = humantime::parse_duration, default_value = "30s")]
    timeout: Duration,
}

fn main() -> anyhow::Result<()> {
    let opts = Opts::parse();
    opts.init.init_logging();

    // Bootstrap first ROM_EXT + Owner FW.
    let transport = opts.init.init_target()?;
    let uart = transport.uart("console").context("failed to get UART")?;

    // Wait for CDI_* update messags.
    for i in 0..2 {
        let _ = UartConsole::wait_for(
            &*uart,
            format!(r"warning: CDI_{:?} certificate not valid; updating", i).as_str(),
            opts.timeout,
        )?;
    }

    // Wait for pass message from first owner firmware stage.
    let _ = UartConsole::wait_for(&*uart, r"PASS!", opts.timeout)?;

    // Bootstrap second ROM_EXT + Owner FW.
    opts.init
        .bootstrap
        .load(&transport, &opts.second_bootstrap)?;

    // Wait for pass message from owner firmware stage.
    let mut console = UartConsole {
        timeout: Some(opts.timeout),
        exit_success: Some(Regex::new(r"PASS.*\n")?),
        exit_failure: Some(Regex::new(r"BFV.*\n")?),
        newline: true,
        ..Default::default()
    };
    let mut stdout = std::io::stdout();
    let result = console.interact(&*uart, None, Some(&mut stdout))?;
    match result {
        ExitStatus::None | ExitStatus::CtrlC => Ok(()),
        ExitStatus::Timeout => {
            if console.exit_success.is_some() {
                Err(anyhow!("Console timeout exceeded"))
            } else {
                Ok(())
            }
        }
        ExitStatus::ExitSuccess => {
            log::info!(
                "ExitSuccess({:?})",
                console.captures(result).unwrap().get(0).unwrap().as_str()
            );
            Ok(())
        }
        ExitStatus::ExitFailure => {
            log::info!(
                "ExitFailure({:?})",
                console.captures(result).unwrap().get(0).unwrap().as_str()
            );
            Err(anyhow!("Matched exit_failure expression"))
        }
    }
}
