#!/usr/bin/python3
# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0
import argparse
import struct

import sqlite3

from util import parse_hexstring_to_int


def unpack_device_id(device_id):
    """Parse a 256-bit device ID into individual components

    Based on make_device_id() from orchestrator.py.

    Expects a 256-bit integer.

    Returns a tuple of the following items. Each item is returned as an integer
    that fits within the specified size:
    si_creator_id (2 bytes): Silicon Creator identifier.
    product_id (2 bytes): Product identifier.
    chip_revision (2 bytes): [Device UID] ASCII chip revision identifier
    package_id (2 bytes): [Device UID] ASCII package identifier
    serial_num (2 bytes): [Device UID] uint16_t serial number
    """

    device_id_bytes = device_id.to_bytes(32, byteorder="little")

    # Drops sku_specific_info.
    full_hw_origin, _ = struct.unpack("<16s16s", device_id_bytes)

    # Drops CRC.
    hw_origin, _ = struct.unpack("<12sI", full_hw_origin)

    si_creator_id, product_id, device_uid = struct.unpack("<HH8s", hw_origin)

    # Skipped item is hardcoded to zero.
    serial_num, package_id, _, chip_revision = struct.unpack("<HHHH", device_uid)

    return (si_creator_id, product_id, chip_revision, package_id, serial_num)


def print_row(header, row):
    for col_name, val in zip(header, row):
        print(f"{col_name:>25}  {val}")
    print("\n")


def print_abbreviated_chip_num(row):
    device_id = parse_hexstring_to_int(row[0])
    _, _, _, package_id_int, serial_num = unpack_device_id(device_id)

    package_id_bytes = package_id_int.to_bytes(2, "little")
    package_id = package_id_bytes.decode("ascii")

    print(f"{package_id}{serial_num:0>3}")


def main():
    parser = argparse.ArgumentParser(
        prog="OT Device Registry viewer",
        description=
        "A utility for dumping the contents of the OT device registry",
    )
    parser.add_argument("db_path",
                        help="Path to .db file generated by orchestrator.py")
    parser.add_argument("--list-chips",
                        help="Print abbreviated list of chips with format [package ID][serial #]",
                        action="store_true")
    args = parser.parse_args()

    conn = sqlite3.connect(args.db_path)
    cursor = conn.cursor()

    res = cursor.execute("SELECT * FROM OT_EARLGREY_DEVICES")
    rows = res.fetchall()
    col_names = [desc[0] for desc in cursor.description]

    for i, row in enumerate(rows):
        if args.list_chips:
            print_abbreviated_chip_num(row)
        else:
            print(f"[Row {i}]")
            print_row(col_names, row)


if __name__ == "__main__":
    main()
