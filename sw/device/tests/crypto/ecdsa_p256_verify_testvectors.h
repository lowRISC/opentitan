// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// AUTOGENERATED. Do not edit this file by hand.
// See the tests/crypto README for details.

#ifndef OPENTITAN_SW_DEVICE_TESTS_CRYPTO_ECDSA_P256_VERIFY_TESTVECTORS_H_
#define OPENTITAN_SW_DEVICE_TESTS_CRYPTO_ECDSA_P256_VERIFY_TESTVECTORS_H_

#include "sw/device/lib/crypto/ecdsa_p256/ecdsa_p256.h"

#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

/**
 * A test vector for ECDSA-P256 verify.
 *
 * Assumes the message is to be hashed with SHA2-256. Note that these test
 * vectors contain only the public key and cannot be used to test the
 * corresponding sign operation.
 */
typedef const struct ecdsa_p256_verify_test_vector {
  // The public key.
  ecdsa_p256_public_key_t public_key;
  // The signature to verify.
  ecdsa_p256_signature_t signature;
  // Expected result (true iff signature is valid).
  bool valid;
  // Any notes about the test vector (a C string).
  char *comment;
  // Length (in bytes) of the message.
  size_t msg_len;
  // Message bytes.
  const uint8_t *msg;
} ecdsa_p256_verify_test_vector_t;

static const size_t kEcdsaP256VerifyNumTests = 2;

// Static message arrays.
static const uint8_t msg0[12] = {0x74, 0x65, 0x73, 0x74, 0x20, 0x6d,
                                 0x65, 0x73, 0x73, 0x61, 0x67, 0x65};
static const uint8_t msg1[12] = {0x74, 0x65, 0x73, 0x74, 0x20, 0x6d,
                                 0x65, 0x73, 0x73, 0x61, 0x67, 0x65};

static const ecdsa_p256_verify_test_vector_t ecdsa_p256_verify_tests[2] = {
    {
        .public_key =
            {
                .x =
                    {
                        0x558bb24e,
                        0x246288eb,
                        0x9e1bbff2,
                        0xa7094ad8,
                        0xcd926786,
                        0x075d07ca,
                        0xac2de782,
                        0x1f791431,
                    },
                .y =
                    {
                        0x23e49c27,
                        0xfaa21024,
                        0xf17353bd,
                        0x40f008a5,
                        0x2155c09e,
                        0x5954f0a4,
                        0x155f3e00,
                        0x874bc63c,
                    },
            },
        .signature =
            {
                .r =
                    {
                        0xe16b7244,
                        0xff400338,
                        0x4c80ddbe,
                        0xc92e02ac,
                        0xa2f17ef1,
                        0x3c87e555,
                        0xa72d41d9,
                        0xcab93c16,
                    },
                .s =
                    {
                        0xf8d5a302,
                        0xce6a7410,
                        0x5f175139,
                        0xac901acc,
                        0xd696bf9f,
                        0x88ca514f,
                        0x0f1caf41,
                        0xeaa34275,
                    },
            },
        .msg = msg0,
        .msg_len = 12,
        .valid = true,
        .comment = "Hardcoded test with valid signature",
    },
    {
        .public_key =
            {
                .x =
                    {
                        0x558bb24e,
                        0x246288eb,
                        0x9e1bbff2,
                        0xa7094ad8,
                        0xcd926786,
                        0x075d07ca,
                        0xac2de782,
                        0x1f791431,
                    },
                .y =
                    {
                        0x23e49c27,
                        0xfaa21024,
                        0xf17353bd,
                        0x40f008a5,
                        0x2155c09e,
                        0x5954f0a4,
                        0x155f3e00,
                        0x874bc63c,
                    },
            },
        .signature =
            {
                .r =
                    {
                        0xf8d5a302,
                        0xce6a7410,
                        0x5f175139,
                        0xac901acc,
                        0xd696bf9f,
                        0x88ca514f,
                        0x0f1caf41,
                        0xeaa34275,
                    },
                .s =
                    {
                        0xe16b7244,
                        0xff400338,
                        0x4c80ddbe,
                        0xc92e02ac,
                        0xa2f17ef1,
                        0x3c87e555,
                        0xa72d41d9,
                        0xcab93c16,
                    },
            },
        .msg = msg1,
        .msg_len = 12,
        .valid = false,
        .comment = "Hardcoded test with invalid signature (r and s switched)",
    },
};

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  // OPENTITAN_SW_DEVICE_TESTS_CRYPTO_ECDSA_P256_VERIFY_TESTVECTORS_H_
