// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

#ifndef OPENTITAN_SW_DEVICE_LIB_DIF_DIF_SPI_HOST_H_
#define OPENTITAN_SW_DEVICE_LIB_DIF_DIF_SPI_HOST_H_
/**
 * @file
 * @brief <a href="/hw/ip/spi_host/doc/">SPI Host</a> Device Interface Functions
 */

#include <stdint.h>

#include "sw/device/lib/dif/autogen/dif_spi_host_autogen.h"

#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

/**
 * Hardware instantiation parameters for SPI Host.
 *
 * This struct describes information about the underlying HARDWARE that is
 * not determined until the hardware IP is used as part of a top-level
 * design. This EXCLUDES the base address of the IP as this is defined the IP's
 * handle struct which is autogenerated using the
 * util/make_new_dif/dif_autogen.h.tpl template. This is typically only used
 * with templated (generic) IPs, such as the Alert Handler.
 */
typedef struct dif_spi_host_params {
  uint8_t padding;
  // Fields, if necessary.
  // DO NOT include the IP's base address as a field, see above.
} dif_spi_host_params_t;

/**
 * Runtime configuration for SPI Host.
 *
 * This struct describes (SOFTWARE) runtime information for one-time
 * configuration of the hardware.
 */
typedef struct dif_spi_host_config {
  uint32_t spi_clock;
  struct {
    uint8_t idle;
    uint8_t trail;
    uint8_t lead;
  } chip_select;
  bool full_cycle;
  bool cpha;
  bool cpol;
} dif_spi_host_config_t;

/**
 * Width of SPI operations.
 *
 * This describes whether the SPI host should operate in:
 * - Standard SPI mode (single lanes for send and recv).
 * - Dual SPI mode (use two lanes for send and recv).
 * - Quad SPI mode (use four lanes for send and recv).
 */
typedef enum dif_spi_host_width {
  kDifSpiHostWidthStandard = 0,
  kDifSpiHostWidthDual = 1,
  kDifSpiHostWidthQuad = 2,
} dif_spi_host_width_t;

/**
 * Direction of SPI operations.
 *
 * This describes which direction a given SPI operation will use.
 */
typedef enum dif_spi_host_direction {
  kDifSpiHostDirectionDummy = 0,
  kDifSpiHostDirectionRx = 1,
  kDifSpiHostDirectionTx = 2,
  kDifSpiHostDirectionBidirectional = 3,
} dif_spi_host_direction_t;

/**
 * Segment types for segments in a transaction.
 *
 */
typedef enum dif_spi_host_segment_type {
  kDifSpiHostSegmentTypeOpcode,
  kDifSpiHostSegmentTypeAddress,
  kDifSpiHostSegmentTypeDummy,
  kDifSpiHostSegmentTypeTx,
  kDifSpiHostSegmentTypeRx,
  kDifSpiHostSegmentTypeBidirectional,
} dif_spi_host_segment_type_t;

/**
 * Address mode for the address segment in a transaction.
 */
typedef enum dif_spi_host_addr_mode {
  kDifSpiHostAddrMode3b,
  kDifSpiHostAddrMode4b,
} dif_spi_host_addr_mode_t;

/**
 * Segment descriptor for each segment in a transaction.
 */
typedef struct dif_spi_host_segment {
  dif_spi_host_segment_type_t type;
  union {
    uint8_t opcode;
    struct {
      dif_spi_host_width_t width;
      dif_spi_host_addr_mode_t mode;
      uint32_t address;
    } address;
    struct {
      dif_spi_host_width_t width;
      size_t length;
    } dummy;
    struct {
      dif_spi_host_width_t width;
      const void *buf;
      size_t length;
    } tx;
    struct {
      dif_spi_host_width_t width;
      void *buf;
      size_t length;
    } rx;
    struct {
      dif_spi_host_width_t width;
      const void *txbuf;
      void *rxbuf;
      size_t length;
    } bidir;
  };
} dif_spi_host_segment_t;

/**
 * Parameters for a SPI Host transaction.
 */
typedef struct dif_spi_host_transaction {
  uint32_t csid;
  size_t length;
  dif_spi_host_segment_t *segments;
} dif_spi_host_transaction_t;

/**
 * An output location for a SPI Host transaction.
 */
typedef struct dif_spi_host_output {
  bool padding;
  // Your fields here.
} dif_spi_host_output_t;

/**
 * Calculates information needed to safely call a DIF. Functions like this
 * should be used instead of global variables or #defines.
 *
 * This function does not actuate the hardware.
 *
 * @param params Hardware instantiation parameters.
 * @return The information required.
 */
OT_WARN_UNUSED_RESULT
uint32_t dif_spi_host_get_size(dif_spi_host_params_t params);

/**
 * Creates a new handle for SPI Host.
 *
 * This function does not actuate the hardware.
 *
 * @param base_addr The MMIO base address of the IP.
 * @param params Hardware instantiation parameters. (optional, may remove)
 * @param[out] spi_host Out param for the initialized handle.
 * @return The result of the operation.
 */
OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_host_init(mmio_region_t base_addr,
                               dif_spi_host_t *spi_host);

/**
 * Configures SPI Host with runtime information.
 *
 * This function should only need to be called once for the lifetime of
 * `handle`.
 *
 * @param spi_host A SPI Host handle.
 * @param config Runtime configuration parameters.
 * @return The result of the operation.
 */
OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_host_configure(const dif_spi_host_t *spi_host,
                                    dif_spi_host_config_t config);

/**
 * Begins a SPI Host transaction.
 *
 * @param spi_host A SPI Host handle.
 * @param transaction Transaction configuration parameters.
 * @return The result of the operation.
 */
OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_host_start(const dif_spi_host_t *spi_host,
                                dif_spi_host_transaction_t *transaction);

/**
 * Locks out SPI Host functionality.
 *
 * This function is reentrant: calling it while functionality is locked will
 * have no effect and return `kDifSpiHostOk`.
 *
 * @param spi_host A SPI Host handle.
 * @return The result of the operation.
 */
OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_host_lock(const dif_spi_host_t *spi_host);

/**
 * Checks whether this SPI Host is locked.
 *
 * @param spi_host A SPI Host handle.
 * @param[out] is_locked Out-param for the locked state.
 * @return The result of the operation.
 */
OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_host_is_locked(const dif_spi_host_t *spi_host,
                                    bool *is_locked);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  // OPENTITAN_SW_DEVICE_LIB_DIF_DIF_SPI_HOST_H_
