// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
// DO NOT EDIT THIS FILE DIRECTLY.
// It has been generated with ./util/design/gen-otp-mmap.py

#include "sw/device/lib/dif/dif_rv_dm.h"

#include <cstring>
#include <limits>
#include <ostream>

#include "gtest/gtest.h"
#include "sw/device/lib/base/mmio.h"
#include "sw/device/lib/base/mock_mmio.h"
#include "sw/device/lib/dif/dif_test_base.h"

#include "rv_dm_regs.h"  // Generated.

namespace dif_rv_dm_unittest {
namespace {
using ::mock_mmio::LeInt;
using ::mock_mmio::MmioTest;
using ::mock_mmio::MockDevice;
using ::testing::Each;
using ::testing::ElementsAre;

class RvDmTest : public testing::Test, public MmioTest {
 protected:
  dif_rv_dm_t rv_dm_ = {.base_addr = dev().region()};
};

TEST_F(RvDmTest, LateDebugEnable) {
  EXPECT_READ32(
      RV_DM_LATE_DEBUG_ENABLE_REGWEN_REG_OFFSET,
      {{RV_DM_LATE_DEBUG_ENABLE_REGWEN_LATE_DEBUG_ENABLE_REGWEN_BIT, true}});
  EXPECT_WRITE32(RV_DM_LATE_DEBUG_ENABLE_REG_OFFSET, kMultiBitBool32True);
  EXPECT_DIF_OK(dif_rv_dm_late_debug_configure(&rv_dm_, kDifToggleEnabled));

  EXPECT_READ32(
      RV_DM_LATE_DEBUG_ENABLE_REGWEN_REG_OFFSET,
      {{RV_DM_LATE_DEBUG_ENABLE_REGWEN_LATE_DEBUG_ENABLE_REGWEN_BIT, true}});
  EXPECT_WRITE32(RV_DM_LATE_DEBUG_ENABLE_REG_OFFSET, kMultiBitBool32False);
  EXPECT_DIF_OK(dif_rv_dm_late_debug_configure(&rv_dm_, kDifToggleDisabled));
}

TEST_F(RvDmTest, LateDebugEnableErrorDifLocked) {
  EXPECT_READ32(
      RV_DM_LATE_DEBUG_ENABLE_REGWEN_REG_OFFSET,
      {{RV_DM_LATE_DEBUG_ENABLE_REGWEN_LATE_DEBUG_ENABLE_REGWEN_BIT, false}});
  EXPECT_DIF_LOCKED(dif_rv_dm_late_debug_configure(&rv_dm_, kDifToggleEnabled));
}

TEST_F(RvDmTest, LockLateDebug) {
  EXPECT_WRITE32(
      RV_DM_LATE_DEBUG_ENABLE_REGWEN_REG_OFFSET,
      {{RV_DM_LATE_DEBUG_ENABLE_REGWEN_LATE_DEBUG_ENABLE_REGWEN_BIT, false}});
  EXPECT_DIF_OK(dif_rv_dm_late_debug_lock(&rv_dm_));
}

TEST_F(RvDmTest, BadArgs) {
  EXPECT_DIF_BADARG(dif_rv_dm_late_debug_lock(nullptr));

  EXPECT_DIF_BADARG(dif_rv_dm_late_debug_configure(nullptr, kDifToggleEnabled));
  EXPECT_DIF_BADARG(dif_rv_dm_late_debug_configure(
      &rv_dm_, /*enable=*/(dif_toggle_t)UINT32_MAX));

  bool flag;
  EXPECT_DIF_BADARG(dif_rv_dm_late_debug_is_locked(nullptr, &flag));
  EXPECT_DIF_BADARG(dif_rv_dm_late_debug_is_locked(&rv_dm_, nullptr));
}

TEST_F(RvDmTest, IsLateDebugLocked) {
  EXPECT_READ32(
      RV_DM_LATE_DEBUG_ENABLE_REGWEN_REG_OFFSET,
      {{RV_DM_LATE_DEBUG_ENABLE_REGWEN_LATE_DEBUG_ENABLE_REGWEN_BIT, true}});

  bool flag;
  EXPECT_DIF_OK(dif_rv_dm_late_debug_is_locked(&rv_dm_, &flag));
  EXPECT_FALSE(flag);

  EXPECT_READ32(
      RV_DM_LATE_DEBUG_ENABLE_REGWEN_REG_OFFSET,
      {{RV_DM_LATE_DEBUG_ENABLE_REGWEN_LATE_DEBUG_ENABLE_REGWEN_BIT, false}});
  EXPECT_DIF_OK(dif_rv_dm_late_debug_is_locked(&rv_dm_, &flag));
  EXPECT_TRUE(flag);
}

}  // namespace
}  // namespace dif_rv_dm_unittest
