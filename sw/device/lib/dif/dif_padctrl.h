// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

#ifndef OPENTITAN_SW_DEVICE_LIB_DIF_PADCTRL_H_
#define OPENTITAN_SW_DEVICE_LIB_DIF_PADCTRL_H_

#include "sw/device/lib/base/mmio.h"

// TODO - Should be autogenerated.
// - Should padctrl/pinmux share some defines/constants (such as MIO_NUM) or do
// we just autogen the same number twice?
#define DIF_PADCTRL_DIO_NUM 32
#define DIF_PADCTRL_MIO_NUM 32
#define DIF_PADCTRL_ATTR_WIDTH 8
#define DIF_PADCTRL_ADDITIONAL_ATTR_WIDTH 2

/**
 * Pad attributes
 *
 * Some attributes have defined meanings, others are implementation defined
 * (|kDifPadCtrlAttrAdditionalFirst| and onwards). not all pads will support all
 * attributes.
 */
typedef enum dif_padctrl_attr {
  kDifPadctrlAttrIOInvert = 0,
  kDifPadctrlAttrOpenDrain,
  kDifPadctrlAttrPullDown,
  kDifPadctrlAttrPullUp,
  kDifPadctrlAttrKeeper,
  kDifPadctrlAttrWeakDrive
  kDifPadctrlAttrAdditionalFirst = 0,
  kDifPadctrlAttrAdditionalLast =
    DIF_PADCTRL_ADDITIONAL_ATTR_WIDTH == 0 ?
      kDifPadctrlAdditionalAttrFirst :
      kDifPadctrlAdditionalAttrFirst + DIF_PADCTRL_ADDITIONAL_ATTR_WIDTH - 1,
} dif_padctrl_attr_t;

/**
 * DIO pads
 */
typedef enum dif_padctrl_dio {
  kDifPadctrlDioFirst = 0,
  kDifPadctrlDioLast = DIF_PADCTRL_DIO_NUM - 1,
} dif_padctrl_dio_t;

/**
 * MIO Pads
 */
typedef enum dif_padctrl_mio {
  kDifPadctrlMioFirst = 0,
  kDifPadctrlMioLast = DIF_PADCTRL_MIO_NUM - 1,
} dif_padctrl_mio_t;

/**
 * Padctrl instance state.
 *
 * Padctrl persistent data that is required by the Padctrl API.
 */
typedef struct dif_padctrl {
  mmio_region_t base_addr; /**< Padctrl base address. */
  bool write_enabled;      /**< Configuration registers locked/unlocked. */
} dif_padctrl_t;

/**
 * Padctrl init routine error codes.
 */
typedef enum dif_padctrl_init_error {
  kDifPadctrlInitErrorNone = 0         /**< Success. */
  kDifPadctrlInitErrorInvalidArgument, /**< Input parameter is not valid. */
  kDifPadctrlInitErrorRegistersLocked, /**< Peripheral is locked and cannot be
                                          reset. */
} dif_padctrl_init_error_t;

/**
 * Initialises an instance of Padctrl
 *
 * Information that must be retained, and is required to program Padctrl, shall
 * be stored in @p padctrl.
 *
 * @param base_addr Base address of an isntance of the Padctrl IP block
 * @param padctrl Padctrl state data
 * @return dif_padctrl_init_error_t.
 */
dif_padctrl_init_error_t dif_padctrl_init(mmio_region_t base_addr,
                                          dif_padctrl_t *padctrl);

/**
 * Padctrl registers lock routine error codes.
 */
typedef enum dif_padctrl_registers_lock_error {
  kDifPadctrlRegistersLockErrorNone = 0,        /**< Success. */
  kDifPadctrlRegistersLockErrorInvalidArgument, /**< Input parameter is not
                                                   valid. */
} dif_padctrl_registers_lock_error_t;

/**
 * Locks the padctrl registers.
 *
 * After the registers have been locked, they can only be unlocked by the
 * system reset.
 *
 * @param padctrl Padctrl state data.
 * @return dif_padctrl_registers_lock_error_t.
 */
dif_pinmux_registers_lock_error_t dif_pinmux_registers_lock(
    dif_pinmux_t *pinmux);

/**
 * Padctrl attribute enable routines error codes.
 */
typedef enum dif_padctrl_enable_attr_error {
  kDifPadctrlEnableErrorNone = 0,     /**< Success. */
  kDifPadctrlEnableErrorNotSupported, /**< Attribute is not supported.  */
  kDifPadctrlEnableErrorConflict,     /**< Could not enable attribute because
                                         it conflicts with another already
                                         enabled attribute. */
  kDifPadctrlEnableInvalidArgument,   /**< Input paramter is not valid. */
  kDifPadctrlEnableRegistersLocked,   /**< Registers are locked and cannot be
                                         modified. */
} dif_padctrl_enable_error_t;

/**
 * Enables an attribute for an MIO pad
 *
 * Not all pads implement all attributes and some combinations of attributes
 * cannot be enabled together. |dif_padctrl_mio_enable_attr| will check for
 * this and return an appropriate error. Note that for additional attributes as
 * the meaning is implementation defined |dif_padctrl_mio_enable_attr| cannot
 * check for invalid combinations that involve them.
 *
 * @param padctrl Padctrl state data.
 * @param mio Which MIO pad to enable an attribute for.
 * @param attr Attribute to enable.
 * @return dif_padctrl_enable_error_t
 */
dif_padctrl_enable_error_t dif_padctrl_mio_enable_attr(
  const dif_padctrl_t *padctrl,
  dif_padctrl_mio_t mio,
  dif_padctrl_attr_t attr);

/**
 * Enables an attribute for a DIO pad
 *
 * Not all pads implement all attributes and some combinations of attributes
 * cannot be enabled together. |dif_padctrl_dio_enable_attr| will check for
 * this and return an appropriate error. Note that for additional attributes as
 * the meaning is implementation defined |dif_padctrl_dio_enable_attr| cannot
 * check for invalid combinations that involve them.
 *
 * @param padctrl Padctrl state data.
 * @param dio Which DIO pad to enable an attribute for.
 * @param attr Attribute to enable.
 * @return dif_padctrl_enable_error_t
 */
dif_padctrl_enable_error_t dif_padctrl_dio_enable_attr(
  const dif_padctrl_t *padctrl,
  dif_padctrl_dio_t dio,
  dif_padctrl_attr_t attr);

/**
 * Padctrl attribute disable routines error codes.
 */
typedef enum dif_padctrl_disable_attr_error {
  kDifPadctrlDisableErrorNone = 0,   /**< Success. */
  kDifPadctrlDisableInvalidArgument, /**< Input paramter is not valid. */
  kDifPadctrlDisableRegistersLocked, /**< Registers are locked and cannot be
                                        modified. */
} dif_padctrl_disable_attr_error_t;

/**
 * Disables an attribute for an MIO pad
 *
 * @param padctrl Padctrl state data.
 * @param mio Which MIO pad to disable an attribute for.
 * @param attr Attribute to disable
 * @return dif_padctrl_disable_attr_error_t
 */
dif_padctrl_disable_attr_error_t dif_padctrl_mio_disable_attr(
  const dif_padctrl_t *padctrl,
  dif_padctrl_mio_t mio,
  dif_padctrl_attr_t attr);

/**
 * Disables an attribute for an DIO pad
 *
 * @param padctrl Padctrl state data.
 * @param mio Which DIO pad to disable an attribute for.
 * @param attr Attribute to disable
 * @return dif_padctrl_disable_attr_error_t
 */
dif_padctrl_disable_attr_error_t dif_padctrl_dio_disable_attr(
  const dif_padctrl_t *padctrl,
  dif_padctrl_dio_t dio,
  dif_padctrl_attr_t attr);
#endif
