// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

#ifndef OPENTITAN_SW_DEVICE_LIB_TESTING_TEST_FRAMEWORK_OTTF_ISRS_H_
#define OPENTITAN_SW_DEVICE_LIB_TESTING_TEST_FRAMEWORK_OTTF_ISRS_H_

/**
 * An OTTF exception type.
 *
 * This enum is used to decode RISC-V exception causes generated by Ibex.
 */
typedef enum ottf_exc_id {
  kInstrMisaligned = 0,
  kInstrAccessFault = 1,
  kIllegalInstrFault = 2,
  kBreakpoint = 3,
  kLoadAccessFault = 5,
  kStoreAccessFault = 7,
  kUserECall = 8,
  kMachineECall = 11,
  kIdMax = 31
} ottf_exc_id_t;

/**
 * OTTF exception handler.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_exception_handler(void);

/**
 * OTTF instruction misaligned fault handler.
 *
 * Called by default implementation of `ottf_exception_handler`. If that
 * function is overriden, this function may not be called.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_instr_misaligned_fault(void);

/**
 * OTTF instruction access fault handler.
 *
 * Called by default implementation of `ottf_exception_handler`. If that
 * function is overriden, this function may not be called.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_instr_access_fault(void);

/**
 * OTTF illegal instruction fault handler.
 *
 * Called by default implementation of `ottf_exception_handler`. If that
 * function is overriden, this function may not be called.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_illegal_instr_fault(void);

/**
 * OTTF breakpoint handler.
 *
 * Called by default implementation of `ottf_exception_handler`. If that
 * function is overriden, this function may not be called.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_breakpoint(void);

/**
 * OTTF load/store fault handler.
 *
 * Called by default implementation of `ottf_exception_handler`. If that
 * function is overriden, this function may not be called.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_load_store_fault(void);

/**
 * OTTF machine-mode evironment call handler.
 *
 * Called by default implementation of `ottf_exception_handler`. If that
 * function is overriden, this function may not be called.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_machine_ecall(void);

/**
 * OTTF user-mode evironment call handler.
 *
 * Called by default implementation of `ottf_exception_handler`. If that
 * function is overriden, this function may not be called.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_user_ecall(void);

/**
 * OTTF software IRQ handler.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_software_isr(void);

/**
 * OTTF timer IRQ handler.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_timer_isr(void);

/**
 * OTTF external IRQ handler.
 *
 * `ottf_isrs.c` provides a weak definition of this symbol, which can be
 * overriden at link-time by providing an additional non-weak definition.
 */
void ottf_external_isr(void);

#endif  // OPENTITAN_SW_DEVICE_LIB_TESTING_TEST_FRAMEWORK_OTTF_ISRS_H_
