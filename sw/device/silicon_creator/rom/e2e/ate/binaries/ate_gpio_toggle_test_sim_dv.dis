
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test_sim_dv.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test_sim_dv.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20000480

Program Header:
    LOAD off    0x000000d4 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00001000 vaddr 0x20000000 paddr 0x20000000 align 2**12
         filesz 0x000065b0 memsz 0x000065b0 flags rwx
    LOAD off    0x00007fe8 vaddr 0x10001fe8 paddr 0x200065b0 align 2**12
         filesz 0x00000084 memsz 0x00000330 flags rw-
    LOAD off    0x00000318 vaddr 0x10002318 paddr 0x20006634 align 2**12
         filesz 0x00000000 memsz 0x00008000 flags rw-
    LOAD off    0x00000000 vaddr 0x20079000 paddr 0x20079000 align 2**12
         filesz 0x00000000 memsz 0x00000800 flags rw-

Sections:
Idx Name                     Size      VMA       LMA       File off  Algn  Flags
  0 .static_critical         00001fe8  10000000  10000000  00000000  2**2  ALLOC
  1 .manifest                00000400  20000000  20000000  00001000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .rom_ext_immutable       00000000  20000400  20000400  0000806c  2**2  CONTENTS
  3 .vectors                 00000080  20000400  20000400  00001400  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .crt                     000000c6  20000480  20000480  00001480  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .init_array              00000000  20000548  20000548  0000806c  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .text                    00003e48  20000548  20000548  00001548  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .shutdown                00000000  20004390  20004390  0000806c  2**2  CONTENTS
  8 .rodata                  00002220  20004390  20004390  00005390  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data                    00000084  10001fe8  200065b0  00007fe8  2**2  CONTENTS, ALLOC, LOAD, DATA
 10 .bss                     000002ac  1000206c  20006634  0000806c  2**2  ALLOC
 11 .freertos.heap           00008000  10002318  20006634  00008318  2**2  ALLOC
 12 .non_volatile_counter_3  00000800  20079000  20079000  00009000  2**11  ALLOC
 13 .non_volatile_counter_2  00000800  20079800  20079800  00000000  2**11  ALLOC
 14 .non_volatile_counter_1  00000800  2007a000  2007a000  00000000  2**11  ALLOC
 15 .non_volatile_counter_0  00000800  2007a800  2007a800  00000000  2**11  ALLOC
 16 .non_volatile_scratch    00005000  2007b000  2007b000  00000000  2**11  ALLOC
 17 .logs.fields             00000518  00000000  00000000  0000806c  2**2  CONTENTS, READONLY
 18 .riscv.attributes        00000042  00000000  00000000  00008584  2**0  CONTENTS, READONLY
 19 .debug_info              0001a284  00000000  00000000  000085c6  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev            00004337  00000000  00000000  0002284a  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges           00000088  00000000  00000000  00026b81  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line              0000ff45  00000000  00000000  00026c09  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc               0000f23c  00000000  00000000  00036b4e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges            000017a0  00000000  00000000  00045d8a  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str               0000adb4  00000000  00000000  0004752a  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame             00001ddc  00000000  00000000  000522e0  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .ot.status_create_record 00000780  00000000  00000000  000540bc  2**2  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .static_critical       00000000 .static_critical
20000000 l    d  .manifest      00000000 .manifest
20000400 l    d  .rom_ext_immutable     00000000 .rom_ext_immutable
20000400 l    d  .vectors       00000000 .vectors
20000480 l    d  .crt   00000000 .crt
20000548 l    d  .init_array    00000000 .init_array
20000548 l    d  .text  00000000 .text
20004390 l    d  .shutdown      00000000 .shutdown
20004390 l    d  .rodata        00000000 .rodata
10001fe8 l    d  .data  00000000 .data
1000206c l    d  .bss   00000000 .bss
10002318 l    d  .freertos.heap 00000000 .freertos.heap
20079000 l    d  .non_volatile_counter_3        00000000 .non_volatile_counter_3
20079800 l    d  .non_volatile_counter_2        00000000 .non_volatile_counter_2
2007a000 l    d  .non_volatile_counter_1        00000000 .non_volatile_counter_1
2007a800 l    d  .non_volatile_counter_0        00000000 .non_volatile_counter_0
2007b000 l    d  .non_volatile_scratch  00000000 .non_volatile_scratch
00000000 l    d  .logs.fields   00000000 .logs.fields
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .ot.status_create_record       00000000 .ot.status_create_record
00000000 l    df *ABS*  00000000 manifest_def.c
20000000 l     O .manifest      00000400 kManifest_
00000000 l       .debug_str     00000000 
00009f1b l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00009f48 l       .debug_str     00000000 
0000a22a l       .debug_str     00000000 
0000a221 l       .debug_str     00000000 
00009f53 l       .debug_str     00000000 
00009f8d l       .debug_str     00000000 
0000a041 l       .debug_str     00000000 
0000a070 l       .debug_str     00000000 
0000a07c l       .debug_str     00000000 
0000a0bb l       .debug_str     00000000 
0000a0cf l       .debug_str     00000000 
0000a0da l       .debug_str     00000000 
0000a0fe l       .debug_str     00000000 
000078c7 l       .debug_str     00000000 
0000a110 l       .debug_str     00000000 
0000a11e l       .debug_str     00000000 
0000a12c l       .debug_str     00000000 
0000a163 l       .debug_str     00000000 
00007629 l       .debug_str     00000000 
0000a182 l       .debug_str     00000000 
0000a192 l       .debug_str     00000000 
0000a19d l       .debug_str     00000000 
0000a1a6 l       .debug_str     00000000 
0000a1b2 l       .debug_str     00000000 
00009f76 l       .debug_str     00000000 
00009f61 l       .debug_str     00000000 
00008de7 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00009fb2 l       .debug_str     00000000 
00009f9d l       .debug_str     00000000 
0000647c l       .debug_str     00000000 
000062f2 l       .debug_str     00000000 
0000a053 l       .debug_str     00000000 
0000a038 l       .debug_str     00000000 
00009fc9 l       .debug_str     00000000 
00009fe1 l       .debug_str     00000000 
0000a001 l       .debug_str     00000000 
0000a015 l       .debug_str     00000000 
0000a027 l       .debug_str     00000000 
00009feb l       .debug_str     00000000 
00009fd7 l       .debug_str     00000000 
0000a0a3 l       .debug_str     00000000 
0000a08d l       .debug_str     00000000 
0000920e l       .debug_str     00000000 
00009ade l       .debug_str     00000000 
0000a0eb l       .debug_str     00000000 
0000a126 l       .debug_str     00000000 
0000a118 l       .debug_str     00000000 
00002293 l       .debug_str     00000000 
00002284 l       .debug_str     00000000 
0000a16d l       .debug_str     00000000 
0000a15a l       .debug_str     00000000 
0000a13d l       .debug_str     00000000 
0000a14b l       .debug_str     00000000 
00007637 l       .debug_str     00000000 
00007622 l       .debug_str     00000000 
0000a20c l       .debug_str     00000000 
0000a1f9 l       .debug_str     00000000 
0000a1bd l       .debug_str     00000000 
0000a1de l       .debug_str     00000000 
0000a1c5 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
0000a235 l       .debug_str     00000000 
00001b1c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_start.o
20000400 l       .vectors       00000000 
20000400 l       .vectors       00000000 
20000404 l       .vectors       00000000 
20000408 l       .vectors       00000000 
2000040c l       .vectors       00000000 
20000410 l       .vectors       00000000 
20000414 l       .vectors       00000000 
20000418 l       .vectors       00000000 
2000041c l       .vectors       00000000 
20000420 l       .vectors       00000000 
20000424 l       .vectors       00000000 
20000428 l       .vectors       00000000 
2000042c l       .vectors       00000000 
20000430 l       .vectors       00000000 
20000434 l       .vectors       00000000 
20000438 l       .vectors       00000000 
2000043c l       .vectors       00000000 
20000440 l       .vectors       00000000 
20000444 l       .vectors       00000000 
20000448 l       .vectors       00000000 
2000044c l       .vectors       00000000 
20000450 l       .vectors       00000000 
20000454 l       .vectors       00000000 
20000458 l       .vectors       00000000 
2000045c l       .vectors       00000000 
20000460 l       .vectors       00000000 
20000464 l       .vectors       00000000 
20000468 l       .vectors       00000000 
2000046c l       .vectors       00000000 
20000470 l       .vectors       00000000 
20000474 l       .vectors       00000000 
20000478 l       .vectors       00000000 
2000047c l       .vectors       00000000 
20000480 l       .crt   00000000 
20000480 l       .crt   00000000 
20000488 l       .crt   00000000 
20000490 l       .crt   00000000 
20000498 l       .crt   00000000 
2000049c l       .crt   00000000 
200004a4 l       .crt   00000000 
200004a8 l       .crt   00000000 
200004b0 l       .crt   00000000 
200004b2 l       .crt   00000000 
200004ba l       .crt   00000000 
200004c2 l       .crt   00000000 
200004c4 l       .crt   00000000 
200004cc l       .crt   00000000 
200004e4 l       .crt   00000000 init_array_loop_end
200004d4 l       .crt   00000000 
200004d8 l       .crt   00000000 init_array_loop
200004d8 l       .crt   00000000 
200004d8 l       .crt   00000000 
200004dc l       .crt   00000000 
200004de l       .crt   00000000 
200004e0 l       .crt   00000000 
200004e4 l       .crt   00000000 
200004e4 l       .crt   00000000 
00009634 l       .debug_info    00000000 
00001458 l       .debug_abbrev  00000000 
20000480 l       .vectors       00000000 
200004e8 l       .crt   00000000 
00000768 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 crt.o
200004e8 l       .crt   00000000 
200004e8 l       .crt   00000000 
200004ec l       .crt   00000000 
200004f0 l       .crt   00000000 
200004f4 l       .crt   00000000 
200004f8 l       .crt   00000000 
200004fc l       .crt   00000000 
200004fe l       .crt   00000000 
20000502 l       .crt   00000000 
20000504 l       .crt   00000000 
20000508 l       .crt   00000000 
2000050a l       .crt   00000000 
2000050c l       .crt   00000000 
2000050c l       .crt   00000000 
20000510 l       .crt   00000000 
20000514 l       .crt   00000000 
20000518 l       .crt   00000000 
2000051c l       .crt   00000000 
20000520 l       .crt   00000000 
20000524 l       .crt   00000000 
20000528 l       .crt   00000000 
2000052c l       .crt   00000000 
20000530 l       .crt   00000000 
20000532 l       .crt   00000000 
20000536 l       .crt   00000000 
20000538 l       .crt   00000000 
2000053c l       .crt   00000000 
2000053e l       .crt   00000000 
20000542 l       .crt   00000000 
20000544 l       .crt   00000000 
0000a643 l       .debug_info    00000000 
000016da l       .debug_abbrev  00000000 
20000546 l       .crt   00000000 
00000000 l    df *ABS*  00000000 freertos_port.o
20000548 l       .text  00000000 
20000548 l       .text  00000000 
20000550 l       .text  00000000 
20000552 l       .text  00000000 
20000554 l       .text  00000000 
20000556 l       .text  00000000 
20000558 l       .text  00000000 
2000055a l       .text  00000000 
2000055c l       .text  00000000 
2000055e l       .text  00000000 
20000560 l       .text  00000000 
20000562 l       .text  00000000 
20000564 l       .text  00000000 
20000566 l       .text  00000000 
20000568 l       .text  00000000 
2000056a l       .text  00000000 
2000056c l       .text  00000000 
2000056e l       .text  00000000 
20000570 l       .text  00000000 
20000572 l       .text  00000000 
20000574 l       .text  00000000 
20000576 l       .text  00000000 
20000578 l       .text  00000000 
2000057a l       .text  00000000 
2000057c l       .text  00000000 
2000057e l       .text  00000000 
20000580 l       .text  00000000 
20000582 l       .text  00000000 
20000584 l       .text  00000000 
20000586 l       .text  00000000 
20000588 l       .text  00000000 
2000058a l       .text  00000000 
2000058e l       .text  00000000 
20000592 l       .text  00000000 
20000594 l       .text  00000000 
20000598 l       .text  00000000 
2000059c l       .text  00000000 
2000059c l       .text  00000000 
200005a0 l       .text  00000000 
200005a4 l       .text  00000000 
200005aa l       .text  00000000 
200005ae l       .text  00000000 
200005b2 l       .text  00000000 
200005b6 l       .text  00000000 
200005b8 l       .text  00000000 
200005bc l       .text  00000000 
200005be l       .text  00000000 
000034ac l       .debug_info    00000000 
000008f8 l       .debug_abbrev  00000000 
200005c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.o
200005c0 l     F .text  00000026 compute_mepc_on_synchronous_irq
200005c0 l       .text  00000000 
200005c0 l       .text  00000000 
200005c4 l       .text  00000000 
200005c8 l       .text  00000000 
200005ca l       .text  00000000 
200005ce l       .text  00000000 
200005d0 l       .text  00000000 
200005d4 l       .text  00000000 
200005d6 l       .text  00000000 
200005da l       .text  00000000 
200005de l       .text  00000000 
200005e0 l       .text  00000000 
200005e2 l       .text  00000000 
200005e4 l       .text  00000000 
200005e8 l     F .text  0000001e save_current_sp_to_tcb
200005e8 l       .text  00000000 
200005e8 l       .text  00000000 
200005f0 l       .text  00000000 
200005f4 l       .text  00000000 
200005f8 l       .text  00000000 
20000600 l       .text  00000000 
20000604 l       .text  00000000 
20000608 l       .text  00000000 
20000608 l       .text  00000000 
2000060c l       .text  00000000 
2000060e l       .text  00000000 
20000610 l       .text  00000000 
20000612 l       .text  00000000 
20000614 l       .text  00000000 
20000616 l       .text  00000000 
20000618 l       .text  00000000 
2000061a l       .text  00000000 
2000061c l       .text  00000000 
2000061e l       .text  00000000 
20000620 l       .text  00000000 
20000622 l       .text  00000000 
20000624 l       .text  00000000 
20000626 l       .text  00000000 
20000628 l       .text  00000000 
2000062a l       .text  00000000 
2000062c l       .text  00000000 
2000062e l       .text  00000000 
20000630 l       .text  00000000 
20000632 l       .text  00000000 
20000634 l       .text  00000000 
20000636 l       .text  00000000 
20000638 l       .text  00000000 
2000063a l       .text  00000000 
2000063c l       .text  00000000 
2000063e l       .text  00000000 
20000640 l       .text  00000000 
20000642 l       .text  00000000 
20000644 l       .text  00000000 
20000648 l       .text  00000000 
2000064a l       .text  00000000 
2000064c l       .text  00000000 
2000064e l       .text  00000000 
20000650 l       .text  00000000 
20000652 l       .text  00000000 
20000656 l       .text  00000000 
2000065c l       .text  00000000 
2000065c l       .text  00000000 
20000660 l       .text  00000000 
20000662 l       .text  00000000 
20000664 l       .text  00000000 
20000666 l       .text  00000000 
20000668 l       .text  00000000 
2000066a l       .text  00000000 
2000066c l       .text  00000000 
2000066e l       .text  00000000 
20000670 l       .text  00000000 
20000672 l       .text  00000000 
20000674 l       .text  00000000 
20000676 l       .text  00000000 
20000678 l       .text  00000000 
2000067a l       .text  00000000 
2000067c l       .text  00000000 
2000067e l       .text  00000000 
20000680 l       .text  00000000 
20000682 l       .text  00000000 
20000684 l       .text  00000000 
20000686 l       .text  00000000 
20000688 l       .text  00000000 
2000068a l       .text  00000000 
2000068c l       .text  00000000 
2000068e l       .text  00000000 
20000690 l       .text  00000000 
20000692 l       .text  00000000 
20000694 l       .text  00000000 
20000696 l       .text  00000000 
20000698 l       .text  00000000 
2000069c l       .text  00000000 
2000069e l       .text  00000000 
200006a2 l       .text  00000000 
200006a4 l       .text  00000000 
200006a6 l       .text  00000000 
200006a8 l       .text  00000000 
200006ac l       .text  00000000 
200006b0 l       .text  00000000 
200006b0 l       .text  00000000 
200006b4 l       .text  00000000 
200006b6 l       .text  00000000 
200006b8 l       .text  00000000 
200006ba l       .text  00000000 
200006bc l       .text  00000000 
200006be l       .text  00000000 
200006c0 l       .text  00000000 
200006c2 l       .text  00000000 
200006c4 l       .text  00000000 
200006c6 l       .text  00000000 
200006c8 l       .text  00000000 
200006ca l       .text  00000000 
200006cc l       .text  00000000 
200006ce l       .text  00000000 
200006d0 l       .text  00000000 
200006d2 l       .text  00000000 
200006d4 l       .text  00000000 
200006d6 l       .text  00000000 
200006d8 l       .text  00000000 
200006da l       .text  00000000 
200006dc l       .text  00000000 
200006de l       .text  00000000 
200006e0 l       .text  00000000 
200006e2 l       .text  00000000 
200006e4 l       .text  00000000 
200006e6 l       .text  00000000 
200006e8 l       .text  00000000 
200006ea l       .text  00000000 
200006ec l       .text  00000000 
200006f0 l       .text  00000000 
200006f2 l       .text  00000000 
200006f6 l       .text  00000000 
200006f8 l       .text  00000000 
200006fa l       .text  00000000 
200006fc l       .text  00000000 
20000700 l       .text  00000000 
20000704 l       .text  00000000 
20000704 l       .text  00000000 
20000708 l       .text  00000000 
2000070a l       .text  00000000 
2000070c l       .text  00000000 
2000070e l       .text  00000000 
20000710 l       .text  00000000 
20000712 l       .text  00000000 
20000714 l       .text  00000000 
20000716 l       .text  00000000 
20000718 l       .text  00000000 
2000071a l       .text  00000000 
2000071c l       .text  00000000 
2000071e l       .text  00000000 
20000720 l       .text  00000000 
20000722 l       .text  00000000 
20000724 l       .text  00000000 
20000726 l       .text  00000000 
20000728 l       .text  00000000 
2000072a l       .text  00000000 
2000072c l       .text  00000000 
2000072e l       .text  00000000 
20000730 l       .text  00000000 
20000732 l       .text  00000000 
20000734 l       .text  00000000 
20000736 l       .text  00000000 
20000738 l       .text  00000000 
2000073a l       .text  00000000 
2000073c l       .text  00000000 
2000073e l       .text  00000000 
20000740 l       .text  00000000 
20000744 l       .text  00000000 
20000746 l       .text  00000000 
2000074a l       .text  00000000 
2000074c l       .text  00000000 
2000074e l       .text  00000000 
20000750 l       .text  00000000 
20000754 l       .text  00000000 
20000758 l       .text  00000000 
20000758 l       .text  00000000 
2000075c l       .text  00000000 
2000075e l       .text  00000000 
20000760 l       .text  00000000 
20000762 l       .text  00000000 
20000764 l       .text  00000000 
20000766 l       .text  00000000 
20000768 l       .text  00000000 
2000076a l       .text  00000000 
2000076c l       .text  00000000 
2000076e l       .text  00000000 
20000770 l       .text  00000000 
20000772 l       .text  00000000 
20000774 l       .text  00000000 
20000776 l       .text  00000000 
20000778 l       .text  00000000 
2000077a l       .text  00000000 
2000077c l       .text  00000000 
2000077e l       .text  00000000 
20000780 l       .text  00000000 
20000782 l       .text  00000000 
20000784 l       .text  00000000 
20000786 l       .text  00000000 
20000788 l       .text  00000000 
2000078a l       .text  00000000 
2000078c l       .text  00000000 
2000078e l       .text  00000000 
20000790 l       .text  00000000 
20000792 l       .text  00000000 
20000794 l       .text  00000000 
20000798 l       .text  00000000 
2000079a l       .text  00000000 
2000079e l       .text  00000000 
200007a0 l       .text  00000000 
200007a2 l       .text  00000000 
200007a4 l       .text  00000000 
200007a8 l       .text  00000000 
200007ac l       .text  00000000 
200007ac l       .text  00000000 
200007b4 l       .text  00000000 
200007b8 l       .text  00000000 
200007bc l       .text  00000000 
200007c4 l       .text  00000000 
200007c8 l       .text  00000000 
200007ca l       .text  00000000 
200007ce l       .text  00000000 
200007d0 l       .text  00000000 
200007d4 l       .text  00000000 
200007d6 l       .text  00000000 
200007d8 l       .text  00000000 
200007da l       .text  00000000 
200007dc l       .text  00000000 
200007de l       .text  00000000 
200007e0 l       .text  00000000 
200007e2 l       .text  00000000 
200007e4 l       .text  00000000 
200007e6 l       .text  00000000 
200007e8 l       .text  00000000 
200007ea l       .text  00000000 
200007ec l       .text  00000000 
200007ee l       .text  00000000 
200007f0 l       .text  00000000 
200007f2 l       .text  00000000 
200007f4 l       .text  00000000 
200007f6 l       .text  00000000 
200007f8 l       .text  00000000 
200007fa l       .text  00000000 
200007fc l       .text  00000000 
200007fe l       .text  00000000 
20000800 l       .text  00000000 
20000802 l       .text  00000000 
20000804 l       .text  00000000 
20000806 l       .text  00000000 
20000808 l       .text  00000000 
2000080a l       .text  00000000 
2000080c l       .text  00000000 
20000810 l       .text  00000000 
00009779 l       .debug_info    00000000 
00001477 l       .debug_abbrev  00000000 
20000814 l       .text  00000000 
00000000 l    df *ABS*  00000000 ate_gpio_toggle_test.c
20000814 l       .text  00000000 
20000814 l       .text  00000000 
20000814 l       .text  00000000 
20000816 l       .text  00000000 
20000816 l       .text  00000000 
20000816 l       .text  00000000 
2000081a l       .text  00000000 
1000206c l     O .bss   00000004 gpio
20000828 l       .text  00000000 
20000828 l       .text  00000000 
2000082c l       .text  00000000 
20000830 l       .text  00000000 
20000830 l       .text  00000000 
20000834 l       .text  00000000 
20000836 l       .text  00000000 
00000004 l     O .logs.fields   00000014 test_main.kLogFields
2000084a l       .text  00000000 
2000084a l       .text  00000000 
2000084c l       .text  00000000 
20004618 l     O .rodata        00000014 test_main.log_fields
2000084c l       .text  00000000 
2000085a l       .text  00000000 
2000085a l       .text  00000000 
20000860 l       .text  00000000 
20000864 l       .text  00000000 
10002070 l     O .bss   00000004 pinmux
20000864 l       .text  00000000 
20000874 l       .text  00000000 
20000878 l       .text  00000000 
20000878 l       .text  00000000 
2000087c l       .text  00000000 
2000087e l       .text  00000000 
00000018 l     O .logs.fields   00000014 test_main.kLogFields.2
20000892 l       .text  00000000 
20000892 l       .text  00000000 
20000894 l       .text  00000000 
2000462c l     O .rodata        00000014 test_main.log_fields.4
20000894 l       .text  00000000 
200008a2 l       .text  00000000 
200008a2 l       .text  00000000 
200008a8 l       .text  00000000 
200008ac l       .text  00000000 
200008ac l       .text  00000000 
200008bc l       .text  00000000 
200008c0 l       .text  00000000 
200008c0 l       .text  00000000 
200008c4 l       .text  00000000 
200008c6 l       .text  00000000 
0000002c l     O .logs.fields   00000014 test_main.kLogFields.5
200008da l       .text  00000000 
200008da l       .text  00000000 
200008dc l       .text  00000000 
20004640 l     O .rodata        00000014 test_main.log_fields.7
200008dc l       .text  00000000 
200008ea l       .text  00000000 
200008ea l       .text  00000000 
200008f0 l       .text  00000000 
200008f4 l       .text  00000000 
200008f4 l       .text  00000000 
20000900 l       .text  00000000 
20000904 l       .text  00000000 
20000904 l       .text  00000000 
20000908 l       .text  00000000 
2000090a l       .text  00000000 
00000040 l     O .logs.fields   00000014 test_main.kLogFields.8
2000091e l       .text  00000000 
2000091e l       .text  00000000 
20000920 l       .text  00000000 
20004654 l     O .rodata        00000014 test_main.log_fields.10
20000920 l       .text  00000000 
2000092e l       .text  00000000 
2000092e l       .text  00000000 
20000934 l       .text  00000000 
20000938 l       .text  00000000 
20000938 l       .text  00000000 
20000944 l       .text  00000000 
20000948 l       .text  00000000 
20000948 l       .text  00000000 
2000094c l       .text  00000000 
2000094e l       .text  00000000 
00000054 l     O .logs.fields   00000014 test_main.kLogFields.11
20000962 l       .text  00000000 
20000962 l       .text  00000000 
20000964 l       .text  00000000 
20004668 l     O .rodata        00000014 test_main.log_fields.13
20000964 l       .text  00000000 
20000972 l       .text  00000000 
20000972 l       .text  00000000 
20000978 l       .text  00000000 
2000097c l       .text  00000000 
2000097c l       .text  00000000 
2000098a l       .text  00000000 
2000098e l       .text  00000000 
2000098e l       .text  00000000 
20000992 l       .text  00000000 
20000994 l       .text  00000000 
00000068 l     O .logs.fields   00000014 test_main.kLogFields.14
200009a8 l       .text  00000000 
200009a8 l       .text  00000000 
200009aa l       .text  00000000 
2000467c l     O .rodata        00000014 test_main.log_fields.16
200009aa l       .text  00000000 
200009b8 l       .text  00000000 
200009b8 l       .text  00000000 
200009be l       .text  00000000 
200009c2 l       .text  00000000 
200009c2 l       .text  00000000 
200009ca l       .text  00000000 
200009ca l       .text  00000000 
200009d8 l       .text  00000000 
200009dc l       .text  00000000 
200009dc l       .text  00000000 
200009e0 l       .text  00000000 
200009e2 l       .text  00000000 
0000007c l     O .logs.fields   00000014 test_main.kLogFields.17
200009f6 l       .text  00000000 
200009f6 l       .text  00000000 
200009f8 l       .text  00000000 
20004690 l     O .rodata        00000014 test_main.log_fields.19
200009f8 l       .text  00000000 
20000a06 l       .text  00000000 
20000a06 l       .text  00000000 
20000a0c l       .text  00000000 
20000a10 l       .text  00000000 
20000a10 l       .text  00000000 
20000a18 l       .text  00000000 
20000a18 l       .text  00000000 
20000a26 l       .text  00000000 
20000a2a l       .text  00000000 
20000a2a l       .text  00000000 
20000a2e l       .text  00000000 
20000a30 l       .text  00000000 
00000090 l     O .logs.fields   00000014 test_main.kLogFields.20
20000a44 l       .text  00000000 
20000a44 l       .text  00000000 
20000a46 l       .text  00000000 
200046a4 l     O .rodata        00000014 test_main.log_fields.21
20000a46 l       .text  00000000 
20000a54 l       .text  00000000 
20000a54 l       .text  00000000 
20000a5a l       .text  00000000 
20000a5e l       .text  00000000 
20000a5e l       .text  00000000 
20000a64 l       .text  00000000 
20000a68 l       .text  00000000 
20000a68 l       .text  00000000 
00000000 l       .debug_loc     00000000 
00000029 l       .debug_loc     00000000 
00000052 l       .debug_loc     00000000 
0000007b l       .debug_loc     00000000 
000000a4 l       .debug_loc     00000000 
000000cd l       .debug_loc     00000000 
000000f6 l       .debug_loc     00000000 
0000011f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
000000d4 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
000001e0 l       .debug_str     00000000 
000000e4 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000198 l       .debug_str     00000000 
000001b1 l       .debug_str     00000000 
000001c4 l       .debug_str     00000000 
000001db l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00000189 l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00006550 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
0000016b l       .debug_str     00000000 
00000143 l       .debug_str     00000000 
00000131 l       .debug_str     00000000 
0000010a l       .debug_str     00000000 
0000011b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
00001626 l       .debug_str     00000000 
00000204 l       .debug_str     00000000 
00000291 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00007ebb l       .debug_str     00000000 
00000284 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000255 l       .debug_str     00000000 
0000020f l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000002a9 l       .debug_str     00000000 
000002b6 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
000002df l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
000002fe l       .debug_str     00000000 
000002f3 l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000023d3 l       .debug_str     00000000 
00000379 l       .debug_str     00000000 
0000038e l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b9 l       .debug_str     00000000 
000003ca l       .debug_str     00000000 
000003dc l       .debug_str     00000000 
00000968 l       .debug_str     00000000 
000003ee l       .debug_str     00000000 
0000040b l       .debug_str     00000000 
00000428 l       .debug_str     00000000 
00000445 l       .debug_str     00000000 
00000462 l       .debug_str     00000000 
0000047f l       .debug_str     00000000 
0000049c l       .debug_str     00000000 
000004b9 l       .debug_str     00000000 
000004d6 l       .debug_str     00000000 
000004f3 l       .debug_str     00000000 
00000510 l       .debug_str     00000000 
0000052d l       .debug_str     00000000 
0000054a l       .debug_str     00000000 
00000567 l       .debug_str     00000000 
00000584 l       .debug_str     00000000 
000005a1 l       .debug_str     00000000 
000005be l       .debug_str     00000000 
000005db l       .debug_str     00000000 
000005f8 l       .debug_str     00000000 
00000615 l       .debug_str     00000000 
00000633 l       .debug_str     00000000 
00000651 l       .debug_str     00000000 
0000066f l       .debug_str     00000000 
0000068c l       .debug_str     00000000 
000006a9 l       .debug_str     00000000 
000006c6 l       .debug_str     00000000 
000006e3 l       .debug_str     00000000 
00000700 l       .debug_str     00000000 
0000071d l       .debug_str     00000000 
0000073a l       .debug_str     00000000 
00000757 l       .debug_str     00000000 
00000774 l       .debug_str     00000000 
00000791 l       .debug_str     00000000 
000007af l       .debug_str     00000000 
000007cd l       .debug_str     00000000 
000007eb l       .debug_str     00000000 
00000808 l       .debug_str     00000000 
00000825 l       .debug_str     00000000 
00000842 l       .debug_str     00000000 
0000085f l       .debug_str     00000000 
0000087c l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000008b6 l       .debug_str     00000000 
000008d3 l       .debug_str     00000000 
000008f1 l       .debug_str     00000000 
0000090f l       .debug_str     00000000 
0000092d l       .debug_str     00000000 
0000094b l       .debug_str     00000000 
00001506 l       .debug_str     00000000 
00000984 l       .debug_str     00000000 
000009a9 l       .debug_str     00000000 
000009cd l       .debug_str     00000000 
000009f3 l       .debug_str     00000000 
00000a15 l       .debug_str     00000000 
00000a37 l       .debug_str     00000000 
00000a59 l       .debug_str     00000000 
00000a7b l       .debug_str     00000000 
00000a9d l       .debug_str     00000000 
00000abf l       .debug_str     00000000 
00000ae1 l       .debug_str     00000000 
00000b03 l       .debug_str     00000000 
00000b25 l       .debug_str     00000000 
00000b47 l       .debug_str     00000000 
00000b6a l       .debug_str     00000000 
00000b8d l       .debug_str     00000000 
00000bb0 l       .debug_str     00000000 
00000bd3 l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
00000c19 l       .debug_str     00000000 
00000c3c l       .debug_str     00000000 
00000c5f l       .debug_str     00000000 
00000c82 l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000cc8 l       .debug_str     00000000 
00000ceb l       .debug_str     00000000 
00000d0e l       .debug_str     00000000 
00000d31 l       .debug_str     00000000 
00000d54 l       .debug_str     00000000 
00000d77 l       .debug_str     00000000 
00000d9a l       .debug_str     00000000 
00000dbd l       .debug_str     00000000 
00000de0 l       .debug_str     00000000 
00000e03 l       .debug_str     00000000 
00000e26 l       .debug_str     00000000 
00000e49 l       .debug_str     00000000 
00000e69 l       .debug_str     00000000 
00000e89 l       .debug_str     00000000 
00000ea9 l       .debug_str     00000000 
00000ec9 l       .debug_str     00000000 
00000ee9 l       .debug_str     00000000 
00000f09 l       .debug_str     00000000 
00000f2d l       .debug_str     00000000 
00000f51 l       .debug_str     00000000 
00000f75 l       .debug_str     00000000 
00000f99 l       .debug_str     00000000 
00000fb9 l       .debug_str     00000000 
00000fd9 l       .debug_str     00000000 
00000ff9 l       .debug_str     00000000 
00001019 l       .debug_str     00000000 
0000103f l       .debug_str     00000000 
00001065 l       .debug_str     00000000 
0000108b l       .debug_str     00000000 
000010b1 l       .debug_str     00000000 
000010d5 l       .debug_str     00000000 
000010f9 l       .debug_str     00000000 
0000111e l       .debug_str     00000000 
00001150 l       .debug_str     00000000 
00001182 l       .debug_str     00000000 
000011b4 l       .debug_str     00000000 
000011e6 l       .debug_str     00000000 
00001218 l       .debug_str     00000000 
0000124a l       .debug_str     00000000 
0000127c l       .debug_str     00000000 
000012ae l       .debug_str     00000000 
000012e0 l       .debug_str     00000000 
00001303 l       .debug_str     00000000 
00001326 l       .debug_str     00000000 
00001349 l       .debug_str     00000000 
0000136c l       .debug_str     00000000 
0000138f l       .debug_str     00000000 
000013b2 l       .debug_str     00000000 
000013d7 l       .debug_str     00000000 
00001407 l       .debug_str     00000000 
00001434 l       .debug_str     00000000 
00001461 l       .debug_str     00000000 
0000148e l       .debug_str     00000000 
000014bb l       .debug_str     00000000 
000014e9 l       .debug_str     00000000 
00001521 l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
0000153c l       .debug_str     00000000 
00001551 l       .debug_str     00000000 
00001568 l       .debug_str     00000000 
00001578 l       .debug_str     00000000 
00001586 l       .debug_str     00000000 
00001596 l       .debug_str     00000000 
000015af l       .debug_str     00000000 
000015c2 l       .debug_str     00000000 
000015e2 l       .debug_str     00000000 
000015f3 l       .debug_str     00000000 
00001606 l       .debug_str     00000000 
00001615 l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_gpio_autogen.c
20000a68 l       .text  00000000 
20000a68 l       .text  00000000 
20000a68 l       .text  00000000 
20000a68 l       .text  00000000 
20000a6a l       .text  00000000 
20000a6c l       .text  00000000 
20000a70 l       .text  00000000 
20000a72 l       .text  00000000 
20000a74 l       .text  00000000 
20000a76 l       .text  00000000 
20000a76 l       .text  00000000 
00000148 l       .debug_loc     00000000 
00000163 l       .debug_loc     00000000 
0000017e l       .debug_loc     00000000 
00000199 l       .debug_loc     00000000 
000001b5 l       .debug_loc     00000000 
000001d1 l       .debug_loc     00000000 
000001ec l       .debug_loc     00000000 
00000207 l       .debug_loc     00000000 
00000222 l       .debug_loc     00000000 
0000023d l       .debug_loc     00000000 
00000263 l       .debug_loc     00000000 
00000289 l       .debug_loc     00000000 
000002af l       .debug_loc     00000000 
000002d5 l       .debug_loc     00000000 
000002fc l       .debug_loc     00000000 
00000317 l       .debug_loc     00000000 
00000332 l       .debug_loc     00000000 
00000358 l       .debug_loc     00000000 
00000389 l       .debug_loc     00000000 
000003ba l       .debug_loc     00000000 
000003e1 l       .debug_loc     00000000 
00000410 l       .debug_loc     00000000 
0000042b l       .debug_loc     00000000 
0000045c l       .debug_loc     00000000 
0000048d l       .debug_loc     00000000 
000004cd l       .debug_loc     00000000 
000004f4 l       .debug_loc     00000000 
0000051b l       .debug_loc     00000000 
0000054a l       .debug_loc     00000000 
00000565 l       .debug_loc     00000000 
0000058b l       .debug_loc     00000000 
000005b1 l       .debug_loc     00000000 
000005d7 l       .debug_loc     00000000 
000005fe l       .debug_loc     00000000 
00000619 l       .debug_loc     00000000 
0000064a l       .debug_loc     00000000 
0000067b l       .debug_loc     00000000 
000006ac l       .debug_loc     00000000 
000006d3 l       .debug_loc     00000000 
000006f9 l       .debug_loc     00000000 
00000714 l       .debug_loc     00000000 
00000734 l       .debug_loc     00000000 
00000763 l       .debug_loc     00000000 
0000077e l       .debug_loc     00000000 
000007a4 l       .debug_loc     00000000 
000007ca l       .debug_loc     00000000 
000007e5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001630 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
0000165d l       .debug_str     00000000 
00001697 l       .debug_str     00000000 
0000168a l       .debug_str     00000000 
00001667 l       .debug_str     00000000 
00001678 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000016be l       .debug_str     00000000 
000016a6 l       .debug_str     00000000 
00001903 l       .debug_str     00000000 
000016cd l       .debug_str     00000000 
000016de l       .debug_str     00000000 
000016ef l       .debug_str     00000000 
00001700 l       .debug_str     00000000 
00001711 l       .debug_str     00000000 
00001722 l       .debug_str     00000000 
00001733 l       .debug_str     00000000 
00001744 l       .debug_str     00000000 
00001755 l       .debug_str     00000000 
00001766 l       .debug_str     00000000 
00001777 l       .debug_str     00000000 
00001789 l       .debug_str     00000000 
0000179b l       .debug_str     00000000 
000017ad l       .debug_str     00000000 
000017bf l       .debug_str     00000000 
000017d1 l       .debug_str     00000000 
000017e3 l       .debug_str     00000000 
000017f5 l       .debug_str     00000000 
00001807 l       .debug_str     00000000 
00001819 l       .debug_str     00000000 
0000182b l       .debug_str     00000000 
0000183d l       .debug_str     00000000 
0000184f l       .debug_str     00000000 
00001861 l       .debug_str     00000000 
00001873 l       .debug_str     00000000 
00001885 l       .debug_str     00000000 
00001897 l       .debug_str     00000000 
000018a9 l       .debug_str     00000000 
000018bb l       .debug_str     00000000 
000018cd l       .debug_str     00000000 
000018df l       .debug_str     00000000 
000018f1 l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00001521 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000019f5 l       .debug_str     00000000 
000073ab l       .debug_str     00000000 
00001b43 l       .debug_str     00000000 
00001b4d l       .debug_str     00000000 
00001a0a l       .debug_str     00000000 
00005a4b l       .debug_str     00000000 
00006550 l       .debug_str     00000000 
0000195e l       .debug_str     00000000 
00001a20 l       .debug_str     00000000 
00001b6b l       .debug_str     00000000 
00001a37 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00001a56 l       .debug_str     00000000 
000074f0 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
00001b92 l       .debug_str     00000000 
00001a6e l       .debug_str     00000000 
00001ba1 l       .debug_str     00000000 
00001a85 l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
000019e0 l       .debug_str     00000000 
00001aa2 l       .debug_str     00000000 
00001abb l       .debug_str     00000000 
000087be l       .debug_str     00000000 
00001bab l       .debug_str     00000000 
00001ace l       .debug_str     00000000 
000084a7 l       .debug_str     00000000 
00001bc6 l       .debug_str     00000000 
00001bd6 l       .debug_str     00000000 
00001ae7 l       .debug_str     00000000 
00001be1 l       .debug_str     00000000 
00001b00 l       .debug_str     00000000 
00001b19 l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
000002df l       .debug_str     00000000 
00001b32 l       .debug_str     00000000 
00001b5c l       .debug_str     00000000 
00001b74 l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
00001bec l       .debug_str     00000000 
0000002c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_gpio.c
20000a76 l       .text  00000000 
20000a76 l       .text  00000000 
20000a76 l       .text  00000000 
20000a76 l       .text  00000000 
20000a78 l       .text  00000000 
20000a7c l       .text  00000000 
20000a7c l       .text  00000000 
20000a7e l       .text  00000000 
20000a7e l       .text  00000000 
20000a80 l       .text  00000000 
20000a80 l       .text  00000000 
20000a82 l       .text  00000000 
20000a82 l       .text  00000000 
20000a84 l       .text  00000000 
20000a84 l       .text  00000000 
20000a84 l       .text  00000000 
20000a84 l       .text  00000000 
20000a84 l       .text  00000000 
20000a84 l       .text  00000000 
20000a8c l       .text  00000000 
20000a92 l       .text  00000000 
20000a96 l       .text  00000000 
20000a9a l       .text  00000000 
20000a9e l       .text  00000000 
20000aa0 l       .text  00000000 
20000aa0 l       .text  00000000 
20000aa4 l       .text  00000000 
20000aa4 l       .text  00000000 
20000aa6 l       .text  00000000 
20000aa6 l       .text  00000000 
20000aaa l       .text  00000000 
20000aac l       .text  00000000 
20000aac l       .text  00000000 
20000ab0 l       .text  00000000 
20000ab2 l       .text  00000000 
20000ab4 l       .text  00000000 
20000ab4 l       .text  00000000 
20000ab6 l       .text  00000000 
20000ab6 l       .text  00000000 
20000ab8 l       .text  00000000 
20000ab8 l       .text  00000000 
20000abc l       .text  00000000 
20000abc l       .text  00000000 
20000abc l       .text  00000000 
20000abc l       .text  00000000 
20000abc l       .text  00000000 
20000abc l       .text  00000000 
20000abe l       .text  00000000 
20000ac2 l       .text  00000000 
20000ac2 l       .text  00000000 
20000ac4 l       .text  00000000 
20000ac4 l       .text  00000000 
20000ac6 l       .text  00000000 
20000ac6 l       .text  00000000 
20000ac8 l       .text  00000000 
20000ac8 l       .text  00000000 
20000aca l       .text  00000000 
20000aca l       .text  00000000 
00000800 l       .debug_loc     00000000 
00000826 l       .debug_loc     00000000 
00000857 l       .debug_loc     00000000 
00000872 l       .debug_loc     00000000 
00000898 l       .debug_loc     00000000 
000008b9 l       .debug_loc     00000000 
000008d4 l       .debug_loc     00000000 
000008f5 l       .debug_loc     00000000 
00000910 l       .debug_loc     00000000 
00000931 l       .debug_loc     00000000 
0000094c l       .debug_loc     00000000 
0000096d l       .debug_loc     00000000 
00000988 l       .debug_loc     00000000 
000009a9 l       .debug_loc     00000000 
000009c4 l       .debug_loc     00000000 
000009e5 l       .debug_loc     00000000 
00000a00 l       .debug_loc     00000000 
00000a21 l       .debug_loc     00000000 
00000a3c l       .debug_loc     00000000 
00000a57 l       .debug_loc     00000000 
00000a72 l       .debug_loc     00000000 
00000a8d l       .debug_loc     00000000 
00000aa8 l       .debug_loc     00000000 
00000ac3 l       .debug_loc     00000000 
00000ae9 l       .debug_loc     00000000 
00000b04 l       .debug_loc     00000000 
00000b1f l       .debug_loc     00000000 
00000b3f l       .debug_loc     00000000 
00000b5a l       .debug_loc     00000000 
00000b75 l       .debug_loc     00000000 
00000b95 l       .debug_loc     00000000 
00000bb0 l       .debug_loc     00000000 
00000bcb l       .debug_loc     00000000 
00000bfc l       .debug_loc     00000000 
00000c22 l       .debug_loc     00000000 
00000c48 l       .debug_loc     00000000 
00000c63 l       .debug_loc     00000000 
00000c7e l       .debug_loc     00000000 
00000c99 l       .debug_loc     00000000 
00000cbb l       .debug_loc     00000000 
00000cd6 l       .debug_loc     00000000 
00000cfc l       .debug_loc     00000000 
00000d17 l       .debug_loc     00000000 
00000d32 l       .debug_loc     00000000 
00000d4d l       .debug_loc     00000000 
00000d68 l       .debug_loc     00000000 
00000d83 l       .debug_loc     00000000 
00000da3 l       .debug_loc     00000000 
00000dbe l       .debug_loc     00000000 
00000dd9 l       .debug_loc     00000000 
00000e0a l       .debug_loc     00000000 
00000e30 l       .debug_loc     00000000 
00000e56 l       .debug_loc     00000000 
00000e71 l       .debug_loc     00000000 
00000e8c l       .debug_loc     00000000 
00000ea7 l       .debug_loc     00000000 
00000ec9 l       .debug_loc     00000000 
00000ee4 l       .debug_loc     00000000 
00000f15 l       .debug_loc     00000000 
00000f3b l       .debug_loc     00000000 
00000f61 l       .debug_loc     00000000 
00000f7c l       .debug_loc     00000000 
00000fa2 l       .debug_loc     00000000 
00000fd3 l       .debug_loc     00000000 
00001001 l       .debug_loc     00000000 
0000101c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001c0b l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000090 l       .debug_ranges  00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00001d0a l       .debug_str     00000000 
00001c28 l       .debug_str     00000000 
00001c45 l       .debug_str     00000000 
00001c63 l       .debug_str     00000000 
00001c7e l       .debug_str     00000000 
00001c9a l       .debug_str     00000000 
00001cbe l       .debug_str     00000000 
00001ce3 l       .debug_str     00000000 
00001d1f l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
00001e1b l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
0000195e l       .debug_str     00000000 
00001d2f l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
00001d52 l       .debug_str     00000000 
00001d5d l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
00001d6c l       .debug_str     00000000 
00001e2a l       .debug_str     00000000 
00001d17 l       .debug_str     00000000 
00001e43 l       .debug_str     00000000 
000084a7 l       .debug_str     00000000 
00001d8d l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00001e55 l       .debug_str     00000000 
00001f07 l       .debug_str     00000000 
000015f3 l       .debug_str     00000000 
00001da3 l       .debug_str     00000000 
00001db9 l       .debug_str     00000000 
00001dca l       .debug_str     00000000 
000087be l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
000002df l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
00001ddb l       .debug_str     00000000 
00001606 l       .debug_str     00000000 
00001de9 l       .debug_str     00000000 
00001dfb l       .debug_str     00000000 
00001e0b l       .debug_str     00000000 
00001e63 l       .debug_str     00000000 
000015c2 l       .debug_str     00000000 
00001e79 l       .debug_str     00000000 
00000078 l       .debug_ranges  00000000 
00001e95 l       .debug_str     00000000 
00001eb8 l       .debug_str     00000000 
00001ee0 l       .debug_str     00000000 
00001ef0 l       .debug_str     00000000 
000015e2 l       .debug_str     00000000 
000002b6 l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
00000158 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_main.c
20000aca l       .text  00000000 
20000aca l       .text  00000000 
20000aca l       .text  00000000 
20000aca l       .text  00000000 
20000ace l       .text  00000000 
20000ad2 l       .text  00000000 
20000ad4 l       .text  00000000 
20000ad8 l       .text  00000000 
20000ad8 l       .text  00000000 
20000ae0 l       .text  00000000 
20000ae2 l       .text  00000000 
000000a4 l     O .logs.fields   00000014 ottf_machine_ecall_handler.kLogFields
20000af6 l       .text  00000000 
200048f4 l     O .rodata        00000014 ottf_machine_ecall_handler.log_fields
20000af6 l       .text  00000000 
20000b02 l       .text  00000000 
20000b02 l       .text  00000000 
20000b02 l       .text  00000000 
20000b02 l       .text  00000000 
20000b02 l       .text  00000000 
20000b02 l       .text  00000000 
10002074 l     O .bss   00000004 status_report_list_cnt
20000b02 l       .text  00000000 
20000b0a l       .text  00000000 
20000b12 l       .text  00000000 
20000b16 l       .text  00000000 
20000b22 l       .text  00000000 
20000b24 l       .text  00000000 
20000b2a l       .text  00000000 
20000b2c l       .text  00000000 
20000b2c l       .text  00000000 
20000b2c l       .text  00000000 
20000b2c l       .text  00000000 
20000b2c l       .text  00000000 
20000b2e l       .text  00000000 
20000b34 l       .text  00000000 
20000b3a l       .text  00000000 
20000b3e l       .text  00000000 
20000b3e l       .text  00000000 
20000b48 l       .text  00000000 
20000b48 l       .text  00000000 
20000b4c l       .text  00000000 
20000b50 l       .text  00000000 
20000b50 l       .text  00000000 
20000b54 l       .text  00000000 
20000b56 l       .text  00000000 
000000b8 l     O .logs.fields   00000014 _ottf_main.kLogFields
20000b6a l       .text  00000000 
20000b6a l       .text  00000000 
20000b6c l       .text  00000000 
2000490c l     O .rodata        00000014 _ottf_main.log_fields
20000b6c l       .text  00000000 
20000b7a l       .text  00000000 
20000b7a l       .text  00000000 
20000b80 l       .text  00000000 
20000b84 l       .text  00000000 
20000b84 l       .text  00000000 
20000b90 l       .text  00000000 
20000b92 l       .text  00000000 
20000b92 l       .text  00000000 
20000b98 l       .text  00000000 
20000b9c l       .text  00000000 
20000b9c l       .text  00000000 
20000ba0 l       .text  00000000 
20000ba2 l       .text  00000000 
000000cc l     O .logs.fields   00000014 _ottf_main.kLogFields.3
20000bb6 l       .text  00000000 
20000bb6 l       .text  00000000 
20000bb8 l       .text  00000000 
20004920 l     O .rodata        00000014 _ottf_main.log_fields.5
20000bb8 l       .text  00000000 
20000bc6 l       .text  00000000 
20000bc6 l       .text  00000000 
20000bcc l       .text  00000000 
20000bd0 l       .text  00000000 
20000bd0 l       .text  00000000 
20000bd8 l       .text  00000000 
20000bda l       .text  00000000 
20000bdc l       .text  00000000 
20000bdc l       .text  00000000 
20000be0 l       .text  00000000 
20000be2 l       .text  00000000 
20000be8 l       .text  00000000 
20000bea l       .text  00000000 
000000e0 l     O .logs.fields   00000014 _ottf_main.kLogFields.6
20000bfe l       .text  00000000 
20000bfe l       .text  00000000 
20004934 l     O .rodata        00000014 _ottf_main.log_fields.8
20000c00 l       .text  00000000 
20000c0e l       .text  00000000 
20000c0e l       .text  00000000 
20000c18 l       .text  00000000 
20000c1c l       .text  00000000 
20000c1c l       .text  00000000 
20000c20 l       .text  00000000 
20000c22 l       .text  00000000 
000000f4 l     O .logs.fields   00000014 _ottf_main.kLogFields.9
20000c36 l       .text  00000000 
20000c36 l       .text  00000000 
20000c38 l       .text  00000000 
20004948 l     O .rodata        00000014 _ottf_main.log_fields.11
20000c38 l       .text  00000000 
20000c46 l       .text  00000000 
20000c46 l       .text  00000000 
20000c4c l       .text  00000000 
20000c50 l       .text  00000000 
20000c50 l       .text  00000000 
20000c58 l       .text  00000000 
20000c68 l       .text  00000000 
20000c6c l       .text  00000000 
20000c6e l       .text  00000000 
20000d12 l     F .text  0000016a test_wrapper
20000c6e l       .text  00000000 
20000c76 l       .text  00000000 
20000c7e l       .text  00000000 
20000c8c l       .text  00000000 
20000c8c l       .text  00000000 
20000c90 l       .text  00000000 
20000c90 l       .text  00000000 
20000c92 l       .text  00000000 
20000c94 l       .text  00000000 
20000c94 l       .text  00000000 
20000ca8 l       .text  00000000 
20000ca8 l       .text  00000000 
20000cac l       .text  00000000 
20000cb0 l       .text  00000000 
20000cb0 l       .text  00000000 
20000cb2 l       .text  00000000 
20000cb6 l       .text  00000000 
20000cb6 l       .text  00000000 
20000cb8 l       .text  00000000 
00000108 l     O .logs.fields   00000014 _ottf_main.kLogFields.13
20000ccc l       .text  00000000 
20000ccc l       .text  00000000 
2000495c l     O .rodata        00000014 _ottf_main.log_fields.15
20000cce l       .text  00000000 
20000cda l       .text  00000000 
20000cda l       .text  00000000 
20000cf0 l       .text  00000000 
20000cf0 l       .text  00000000 
20000cf6 l       .text  00000000 
20000cf6 l       .text  00000000 
20000cfc l       .text  00000000 
20000cfe l       .text  00000000 
20000d04 l       .text  00000000 
20000d08 l       .text  00000000 
20000d08 l       .text  00000000 
20000d0e l       .text  00000000 
20000d12 l       .text  00000000 
20000d12 l       .text  00000000 
20000d12 l       .text  00000000 
20000d12 l       .text  00000000 
20000d12 l       .text  00000000 
20000d14 l       .text  00000000 
20000d14 l       .text  00000000 
20000d28 l       .text  00000000 
20000d2c l       .text  00000000 
20000d2c l       .text  00000000 
20000d2e l       .text  00000000 
20000d30 l       .text  00000000 
20000d30 l       .text  00000000 
20000d32 l       .text  00000000 
20000d36 l       .text  00000000 
20000d3a l       .text  00000000 
20000d3c l       .text  00000000 
20000d3c l       .text  00000000 
20000d44 l       .text  00000000 
20000d46 l       .text  00000000 
20000d52 l       .text  00000000 
20000d54 l       .text  00000000 
20000d56 l       .text  00000000 
20000d56 l       .text  00000000 
20000d5a l       .text  00000000 
20000d5c l       .text  00000000 
20000d66 l       .text  00000000 
20000d68 l       .text  00000000 
0000011c l     O .logs.fields   00000014 report_test_status.kLogFields
20000d7c l       .text  00000000 
20000d7c l       .text  00000000 
20000d7e l       .text  00000000 
20000d80 l       .text  00000000 
20000d84 l       .text  00000000 
20004970 l     O .rodata        00000014 report_test_status.log_fields
20000d84 l       .text  00000000 
20000d92 l       .text  00000000 
20000d92 l       .text  00000000 
20000d94 l       .text  00000000 
20000d94 l       .text  00000000 
20000d9c l       .text  00000000 
20000da0 l       .text  00000000 
00000130 l     O .logs.fields   00000014 report_test_status.kLogFields.18
20000db4 l       .text  00000000 
20000db4 l       .text  00000000 
20004984 l     O .rodata        00000014 report_test_status.log_fields.20
20000db6 l       .text  00000000 
20000dc2 l       .text  00000000 
20000dc2 l       .text  00000000 
20000dca l       .text  00000000 
20000dca l       .text  00000000 
20000dd2 l       .text  00000000 
20000dd6 l       .text  00000000 
20000dd6 l       .text  00000000 
20000dda l       .text  00000000 
20000ddc l       .text  00000000 
20004998 l     O .rodata        00000014 report_test_status.log_fields.23
00000144 l     O .logs.fields   00000014 report_test_status.kLogFields.21
20000dfc l       .text  00000000 
20000dfc l       .text  00000000 
20000e00 l       .text  00000000 
20000e06 l       .text  00000000 
20000e06 l       .text  00000000 
20000e0a l       .text  00000000 
20000e10 l       .text  00000000 
20000e18 l       .text  00000000 
20000e18 l       .text  00000000 
20000e1a l       .text  00000000 
20000e22 l       .text  00000000 
20000e22 l       .text  00000000 
20000e24 l       .text  00000000 
20000e26 l       .text  00000000 
20000e2a l       .text  00000000 
20000e2a l       .text  00000000 
20000e2e l       .text  00000000 
20000e32 l       .text  00000000 
20000e36 l       .text  00000000 
00000158 l     O .logs.fields   00000014 report_test_status.kLogFields.24
20000e4a l       .text  00000000 
20000e4a l       .text  00000000 
200049ac l     O .rodata        00000014 report_test_status.log_fields.26
20000e4c l       .text  00000000 
20000e58 l       .text  00000000 
20000e58 l       .text  00000000 
20000e5e l       .text  00000000 
20000e60 l       .text  00000000 
20000e60 l       .text  00000000 
20000e76 l       .text  00000000 
20000e7c l       .text  00000000 
20000e7c l       .text  00000000 
20000e7c l       .text  00000000 
00000000 l     O .ot.status_create_record       00000080 _ottf_main.kOtStatusRecord
0000103d l       .debug_loc     00000000 
00001058 l       .debug_loc     00000000 
00001073 l       .debug_loc     00000000 
0000108e l       .debug_loc     00000000 
000010a9 l       .debug_loc     00000000 
000010c4 l       .debug_loc     00000000 
000010f5 l       .debug_loc     00000000 
00001126 l       .debug_loc     00000000 
00001157 l       .debug_loc     00000000 
00001172 l       .debug_loc     00000000 
0000118d l       .debug_loc     00000000 
000011a8 l       .debug_loc     00000000 
000011d8 l       .debug_loc     00000000 
00001208 l       .debug_loc     00000000 
0000122e l       .debug_loc     00000000 
00001255 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001f0b l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000000f0 l       .debug_ranges  00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00002435 l       .debug_str     00000000 
00000204 l       .debug_str     00000000 
00000291 l       .debug_str     00000000 
000024b4 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00007ebb l       .debug_str     00000000 
00000284 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000255 l       .debug_str     00000000 
0000020f l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
0000249c l       .debug_str     00000000 
00001f3c l       .debug_str     00000000 
0000233e l       .debug_str     00000000 
00001fcb l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
000024bd l       .debug_str     00000000 
000024c2 l       .debug_str     00000000 
00001f77 l       .debug_str     00000000 
00001f5f l       .debug_str     00000000 
00001f4c l       .debug_str     00000000 
00001f56 l       .debug_str     00000000 
00001f91 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00001fa7 l       .debug_str     00000000 
00001fb0 l       .debug_str     00000000 
0000204d l       .debug_str     00000000 
0000203a l       .debug_str     00000000 
00001feb l       .debug_str     00000000 
00007833 l       .debug_str     00000000 
00002006 l       .debug_str     00000000 
0000201e l       .debug_str     00000000 
0000202f l       .debug_str     00000000 
00001fd8 l       .debug_str     00000000 
00001fc7 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00002062 l       .debug_str     00000000 
0000891b l       .debug_str     00000000 
000088fc l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
00002075 l       .debug_str     00000000 
000023d3 l       .debug_str     00000000 
00000379 l       .debug_str     00000000 
0000038e l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b9 l       .debug_str     00000000 
000003ca l       .debug_str     00000000 
000003dc l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000020fe l       .debug_str     00000000 
0000208c l       .debug_str     00000000 
00002099 l       .debug_str     00000000 
000020ad l       .debug_str     00000000 
000020be l       .debug_str     00000000 
000020cf l       .debug_str     00000000 
000020e0 l       .debug_str     00000000 
000020ef l       .debug_str     00000000 
0000222b l       .debug_str     00000000 
0000210a l       .debug_str     00000000 
0000210e l       .debug_str     00000000 
00002119 l       .debug_str     00000000 
00002122 l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00002145 l       .debug_str     00000000 
0000214f l       .debug_str     00000000 
0000215e l       .debug_str     00000000 
00002170 l       .debug_str     00000000 
00002183 l       .debug_str     00000000 
00002197 l       .debug_str     00000000 
000021a0 l       .debug_str     00000000 
000021ac l       .debug_str     00000000 
000021bb l       .debug_str     00000000 
000021c5 l       .debug_str     00000000 
000021d2 l       .debug_str     00000000 
000021dc l       .debug_str     00000000 
000021ed l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
0000223c l       .debug_str     00000000 
0000223d l       .debug_str     00000000 
00002248 l       .debug_str     00000000 
00002256 l       .debug_str     00000000 
0000153c l       .debug_str     00000000 
00001551 l       .debug_str     00000000 
00002269 l       .debug_str     00000000 
00002275 l       .debug_str     00000000 
00002293 l       .debug_str     00000000 
00002284 l       .debug_str     00000000 
000022b0 l       .debug_str     00000000 
0000229c l       .debug_str     00000000 
00002450 l       .debug_str     00000000 
00002460 l       .debug_str     00000000 
000022bd l       .debug_str     00000000 
00002476 l       .debug_str     00000000 
000022c9 l       .debug_str     00000000 
0000248e l       .debug_str     00000000 
000022d7 l       .debug_str     00000000 
000022e8 l       .debug_str     00000000 
000022f6 l       .debug_str     00000000 
00002300 l       .debug_str     00000000 
00002311 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000231f l       .debug_str     00000000 
000062f2 l       .debug_str     00000000 
00001568 l       .debug_str     00000000 
00001578 l       .debug_str     00000000 
0000232a l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00002345 l       .debug_str     00000000 
0000233a l       .debug_str     00000000 
00002352 l       .debug_str     00000000 
0000236e l       .debug_str     00000000 
00002380 l       .debug_str     00000000 
00002396 l       .debug_str     00000000 
000023aa l       .debug_str     00000000 
000024a7 l       .debug_str     00000000 
000024c7 l       .debug_str     00000000 
00000372 l       .debug_str     00000000 
000023be l       .debug_str     00000000 
000023cc l       .debug_str     00000000 
000023df l       .debug_str     00000000 
000003c8 l       .debug_str     00000000 
00001b49 l       .debug_str     00000000 
000023e9 l       .debug_str     00000000 
00001626 l       .debug_str     00000000 
00002404 l       .debug_str     00000000 
00002420 l       .debug_str     00000000 
0000021c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 coverage_none.c
20000e7c l       .text  00000000 
20000e7c l       .text  00000000 
20000e7c l       .text  00000000 
20000e7c l       .text  00000000 
20000e7e l       .text  00000000 
20000e7e l       .text  00000000 
00000000 l       .debug_str     00000000 
000024d7 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00002420 l       .debug_str     00000000 
000002dc l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 freertos_hooks.c
20000e7e l       .text  00000000 
20000e7e l       .text  00000000 
20000e7e l       .text  00000000 
20000e80 l       .text  00000000 
20000e80 l       .text  00000000 
20000e82 l       .text  00000000 
20000e8a l       .text  00000000 
20004a70 l     O .rodata        00000014 vApplicationMallocFailedHook.log_fields
20000e8c l       .text  00000000 
20000ea0 l       .text  00000000 
20000ea0 l       .text  00000000 
20000ea2 l       .text  00000000 
0000016c l     O .logs.fields   00000014 vApplicationMallocFailedHook.kLogFields
20000ebe l       .text  00000000 
20000ebe l       .text  00000000 
20000ec4 l       .text  00000000 
20000ec4 l       .text  00000000 
20000ec8 l       .text  00000000 
20000ec8 l       .text  00000000 
20000ec8 l       .text  00000000 
20000ec8 l       .text  00000000 
20000ec8 l       .text  00000000 
20000ec8 l       .text  00000000 
20000eca l       .text  00000000 
20000eca l       .text  00000000 
20000ecc l       .text  00000000 
20000ed0 l       .text  00000000 
20000ed6 l       .text  00000000 
20000ed6 l       .text  00000000 
20004a84 l     O .rodata        00000014 vApplicationStackOverflowHook.log_fields
20000ed8 l       .text  00000000 
20000ee6 l       .text  00000000 
20000ee6 l       .text  00000000 
20000ee8 l       .text  00000000 
20000ee8 l       .text  00000000 
00000180 l     O .logs.fields   00000014 vApplicationStackOverflowHook.kLogFields
20000efc l       .text  00000000 
20000efc l       .text  00000000 
20000f02 l       .text  00000000 
20000f02 l       .text  00000000 
20000f06 l       .text  00000000 
20000f06 l       .text  00000000 
20000f06 l       .text  00000000 
00001270 l       .debug_loc     00000000 
0000128b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000250c l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000138 l       .debug_ranges  00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00002558 l       .debug_str     00000000 
00000204 l       .debug_str     00000000 
00000291 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00007ebb l       .debug_str     00000000 
00000284 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000255 l       .debug_str     00000000 
0000020f l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00002575 l       .debug_str     00000000 
00002593 l       .debug_str     00000000 
00002599 l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
00001551 l       .debug_str     00000000 
0000153c l       .debug_str     00000000 
00002542 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00002552 l       .debug_str     00000000 
000022b0 l       .debug_str     00000000 
0000229c l       .debug_str     00000000 
00000300 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 freertos_port.c
20000f06 l       .text  00000000 
20000f06 l       .text  00000000 
20000f06 l       .text  00000000 
20000f08 l       .text  00000000 
20000f08 l       .text  00000000 
20000f0a l       .text  00000000 
20000f10 l       .text  00000000 
20000f10 l       .text  00000000 
20000f16 l       .text  00000000 
20000f16 l       .text  00000000 
20000f1c l       .text  00000000 
20000f1c l       .text  00000000 
20000f20 l       .text  00000000 
20000f20 l       .text  00000000 
20000f24 l       .text  00000000 
20000f28 l       .text  00000000 
20000f28 l       .text  00000000 
00000000 l       .debug_str     00000000 
000025a4 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000025d9 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
0000223d l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000263d l       .debug_str     00000000 
000025f6 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00002605 l       .debug_str     00000000 
00002617 l       .debug_str     00000000 
00002629 l       .debug_str     00000000 
00000344 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_console.c
10002078 l     O .bss   00000004 ottf_console_uart
10002130 l     O .bss   00000010 ottf_console_spi_device
20000f28 l       .text  00000000 
20000f28 l       .text  00000000 
20000f28 l       .text  00000000 
20000f2a l       .text  00000000 
20000f2a l       .text  00000000 
20000f2e l       .text  00000000 
20000f36 l       .text  00000000 
20000f38 l       .text  00000000 
20000f3a l       .text  00000000 
20000f3a l       .text  00000000 
20000f3c l       .text  00000000 
20000f42 l       .text  00000000 
20000f46 l       .text  00000000 
20000f46 l       .text  00000000 
20000f5a l       .text  00000000 
20000f5a l       .text  00000000 
20000f5c l       .text  00000000 
20000f60 l       .text  00000000 
20000f64 l       .text  00000000 
20000f64 l       .text  00000000 
20000f68 l       .text  00000000 
20000f6c l       .text  00000000 
20000f70 l       .text  00000000 
20000f72 l       .text  00000000 
00000194 l     O .logs.fields   00000014 ottf_console_init.kLogFields
20000f86 l       .text  00000000 
20000f86 l       .text  00000000 
20000f88 l       .text  00000000 
20000f88 l       .text  00000000 
20000f8c l       .text  00000000 
20000f8c l       .text  00000000 
20000f90 l       .text  00000000 
1000207c l     O .bss   00000004 sink
20000f90 l       .text  00000000 
10002080 l     O .bss   00000004 getc
20000f98 l       .text  00000000 
2000161a l     F .text  00000130 spi_device_getc
20000faa l       .text  00000000 
20000faa l       .text  00000000 
20000fbe l       .text  00000000 
20000fbe l       .text  00000000 
20000fc2 l       .text  00000000 
20000fc6 l       .text  00000000 
20000fc6 l       .text  00000000 
20000fc8 l       .text  00000000 
20000fcc l       .text  00000000 
20000fd0 l       .text  00000000 
20000fd2 l       .text  00000000 
000001a8 l     O .logs.fields   00000014 ottf_console_init.kLogFields.2
20000fe6 l       .text  00000000 
20000fe6 l       .text  00000000 
2000563c l     O .rodata        00000014 ottf_console_init.log_fields.4
20000fe8 l       .text  00000000 
20000ff4 l       .text  00000000 
20000ff4 l       .text  00000000 
2000100a l       .text  00000000 
2000100a l       .text  00000000 
20001010 l       .text  00000000 
20001010 l       .text  00000000 
20001016 l       .text  00000000 
20001018 l       .text  00000000 
2000101e l       .text  00000000 
20001022 l       .text  00000000 
20001022 l       .text  00000000 
20001028 l       .text  00000000 
20005628 l     O .rodata        00000014 ottf_console_init.log_fields
20001028 l       .text  00000000 
20001034 l       .text  00000000 
20001034 l       .text  00000000 
2000104a l       .text  00000000 
2000104a l       .text  00000000 
20001050 l       .text  00000000 
20001050 l       .text  00000000 
2000105a l       .text  00000000 
2000105a l       .text  00000000 
2000105c l       .text  00000000 
20001062 l       .text  00000000 
20001066 l       .text  00000000 
20001066 l       .text  00000000 
2000106a l       .text  00000000 
2000106a l       .text  00000000 
2000106e l       .text  00000000 
2000106e l       .text  00000000 
20001076 l       .text  00000000 
20001262 l     F .text  000000a2 uart_getc
20001086 l       .text  00000000 
2000108a l       .text  00000000 
2000108a l       .text  00000000 
2000108e l       .text  00000000 
2000108e l       .text  00000000 
2000108e l       .text  00000000 
2000108e l       .text  00000000 
2000108e l       .text  00000000 
20001090 l       .text  00000000 
20001090 l       .text  00000000 
20001090 l       .text  00000000 
20001098 l       .text  00000000 
200010a4 l       .text  00000000 
200010a4 l       .text  00000000 
200010a8 l       .text  00000000 
200010ac l       .text  00000000 
200010ac l       .text  00000000 
200010b0 l       .text  00000000 
200010b2 l       .text  00000000 
000001bc l     O .logs.fields   00000014 ottf_console_configure_uart.kLogFields
200010c6 l       .text  00000000 
200010c6 l       .text  00000000 
200010c8 l       .text  00000000 
20005650 l     O .rodata        00000014 ottf_console_configure_uart.log_fields
200010c8 l       .text  00000000 
200010d6 l       .text  00000000 
200010d6 l       .text  00000000 
200010dc l       .text  00000000 
200010e0 l       .text  00000000 
200010e0 l       .text  00000000 
200010f4 l       .text  00000000 
200010f4 l       .text  00000000 
20001106 l       .text  00000000 
2000110a l       .text  00000000 
2000110a l       .text  00000000 
2000110c l       .text  00000000 
20001110 l       .text  00000000 
20001110 l       .text  00000000 
20001112 l       .text  00000000 
000001d0 l     O .logs.fields   00000014 ottf_console_configure_uart.kLogFields.7
20001126 l       .text  00000000 
20001126 l       .text  00000000 
20005664 l     O .rodata        00000014 ottf_console_configure_uart.log_fields.9
20001128 l       .text  00000000 
20001134 l       .text  00000000 
20001134 l       .text  00000000 
2000114a l       .text  00000000 
2000114a l       .text  00000000 
20001150 l       .text  00000000 
20001150 l       .text  00000000 
20001156 l       .text  00000000 
20001158 l       .text  00000000 
2000115e l       .text  00000000 
20001162 l       .text  00000000 
20001162 l       .text  00000000 
20001176 l       .text  00000000 
20001176 l       .text  00000000 
20001188 l       .text  00000000 
2000118c l       .text  00000000 
2000118c l       .text  00000000 
2000118e l       .text  00000000 
20001192 l       .text  00000000 
20001192 l       .text  00000000 
20001194 l       .text  00000000 
000001e4 l     O .logs.fields   00000014 ottf_console_configure_uart.kLogFields.10
200011a8 l       .text  00000000 
200011a8 l       .text  00000000 
20005678 l     O .rodata        00000014 ottf_console_configure_uart.log_fields.12
200011aa l       .text  00000000 
200011b6 l       .text  00000000 
200011b6 l       .text  00000000 
200011cc l       .text  00000000 
200011cc l       .text  00000000 
200011ce l       .text  00000000 
200011d0 l       .text  00000000 
200011d0 l       .text  00000000 
200011d6 l       .text  00000000 
200011d6 l       .text  00000000 
200011dc l       .text  00000000 
200011de l       .text  00000000 
200011e4 l       .text  00000000 
200011e8 l       .text  00000000 
200011e8 l       .text  00000000 
20001206 l       .text  00000000 
2000120a l       .text  00000000 
2000120a l       .text  00000000 
2000120e l       .text  00000000 
20001210 l       .text  00000000 
000001f8 l     O .logs.fields   00000014 ottf_console_configure_uart.kLogFields.14
20001224 l       .text  00000000 
20001224 l       .text  00000000 
20001226 l       .text  00000000 
2000568c l     O .rodata        00000014 ottf_console_configure_uart.log_fields.16
20001226 l       .text  00000000 
20001234 l       .text  00000000 
20001234 l       .text  00000000 
2000123a l       .text  00000000 
2000123e l       .text  00000000 
2000123e l       .text  00000000 
2000124a l       .text  00000000 
2000124a l       .text  00000000 
20001252 l       .text  00000000 
20001254 l       .text  00000000 
20001256 l       .text  00000000 
20001256 l       .text  00000000 
2000125e l       .text  00000000 
20001262 l       .text  00000000 
20001262 l       .text  00000000 
20001262 l       .text  00000000 
20001262 l       .text  00000000 
20001262 l       .text  00000000 
20001264 l       .text  00000000 
2000126a l       .text  00000000 
2000126c l       .text  00000000 
2000126c l       .text  00000000 
20001274 l       .text  00000000 
20001276 l       .text  00000000 
20001280 l       .text  00000000 
20001282 l       .text  00000000 
2000129c l       .text  00000000 
2000129c l       .text  00000000 
200012a0 l       .text  00000000 
200012a0 l       .text  00000000 
200012a4 l       .text  00000000 
200012a8 l       .text  00000000 
200012ac l       .text  00000000 
200012ac l       .text  00000000 
200012b0 l       .text  00000000 
200012c2 l       .text  00000000 
200012c6 l       .text  00000000 
200012c6 l       .text  00000000 
200012c8 l       .text  00000000 
200012ca l       .text  00000000 
200012ca l       .text  00000000 
200012dc l       .text  00000000 
200012dc l       .text  00000000 
200012de l       .text  00000000 
200012e0 l       .text  00000000 
200012e0 l       .text  00000000 
200012f0 l       .text  00000000 
200012f0 l       .text  00000000 
200012f4 l       .text  00000000 
200012f8 l       .text  00000000 
200012f8 l       .text  00000000 
20001300 l       .text  00000000 
20001300 l       .text  00000000 
20001304 l       .text  00000000 
20001304 l       .text  00000000 
20001304 l       .text  00000000 
20001304 l       .text  00000000 
20001304 l       .text  00000000 
20001306 l       .text  00000000 
20001306 l       .text  00000000 
20001306 l       .text  00000000 
2000132e l       .text  00000000 
2000133a l       .text  00000000 
2000133c l       .text  00000000 
2000133c l       .text  00000000 
20001348 l       .text  00000000 
2000134a l       .text  00000000 
2000134e l       .text  00000000 
0000020c l     O .logs.fields   00000014 ottf_console_configure_spi_device.kLogFields
20001350 l       .text  00000000 
2000135c l       .text  00000000 
2000135c l       .text  00000000 
2000135e l       .text  00000000 
200056a0 l     O .rodata        00000014 ottf_console_configure_spi_device.log_fields
2000135e l       .text  00000000 
2000136c l       .text  00000000 
2000136c l       .text  00000000 
20001372 l       .text  00000000 
20001376 l       .text  00000000 
20001376 l       .text  00000000 
2000138c l       .text  00000000 
2000138c l       .text  00000000 
20001390 l       .text  00000000 
20001390 l       .text  00000000 
20001394 l       .text  00000000 
20001394 l       .text  00000000 
00000220 l     O .logs.fields   00000014 ottf_console_configure_spi_device.kLogFields.18
20001398 l       .text  00000000 
200013a4 l       .text  00000000 
200013a4 l       .text  00000000 
200013a6 l       .text  00000000 
200056b4 l     O .rodata        00000014 ottf_console_configure_spi_device.log_fields.20
200013a6 l       .text  00000000 
200013b4 l       .text  00000000 
200013b4 l       .text  00000000 
200013ba l       .text  00000000 
200013be l       .text  00000000 
200013be l       .text  00000000 
20005770 l     O .rodata        00000014 ottf_console_configure_spi_device.log_fields.23
00000234 l     O .logs.fields   00000014 ottf_console_configure_spi_device.kLogFields.21
200013e6 l       .text  00000000 
200013e6 l       .text  00000000 
200013f4 l       .text  00000000 
200013fe l       .text  00000000 
20001402 l       .text  00000000 
20001402 l       .text  00000000 
20001406 l       .text  00000000 
2000140e l       .text  00000000 
2000140e l       .text  00000000 
20001410 l       .text  00000000 
20001410 l       .text  00000000 
20001418 l       .text  00000000 
20001418 l       .text  00000000 
2000141e l       .text  00000000 
2000141e l       .text  00000000 
20001420 l       .text  00000000 
20001422 l       .text  00000000 
20001426 l       .text  00000000 
20001426 l       .text  00000000 
20001448 l       .text  00000000 
2000144c l       .text  00000000 
2000144c l       .text  00000000 
00000248 l     O .logs.fields   00000014 ottf_console_configure_spi_device.kLogFields.24
20001450 l       .text  00000000 
2000145c l       .text  00000000 
2000145c l       .text  00000000 
2000145e l       .text  00000000 
200057a0 l     O .rodata        00000014 ottf_console_configure_spi_device.log_fields.26
2000145e l       .text  00000000 
2000146c l       .text  00000000 
2000146c l       .text  00000000 
20001472 l       .text  00000000 
20001476 l       .text  00000000 
20001476 l       .text  00000000 
2000147e l       .text  00000000 
2000147e l       .text  00000000 
20001482 l       .text  00000000 
20001486 l       .text  00000000 
200058a4 l     O .rodata        00000014 spi_device_wait_for_sync.log_fields
0000039c l     O .logs.fields   00000014 spi_device_wait_for_sync.kLogFields
200014a6 l       .text  00000000 
200014a6 l       .text  00000000 
200014b4 l       .text  00000000 
200014b4 l       .text  00000000 
200014b6 l       .text  00000000 
200014b8 l       .text  00000000 
200014b8 l       .text  00000000 
200014bc l       .text  00000000 
200014c4 l       .text  00000000 
200014c4 l       .text  00000000 
200014c6 l       .text  00000000 
200014c6 l       .text  00000000 
200014ce l       .text  00000000 
200014ce l       .text  00000000 
200014d4 l       .text  00000000 
200014d4 l       .text  00000000 
200014d6 l       .text  00000000 
200014d6 l       .text  00000000 
200014da l       .text  00000000 
200014da l       .text  00000000 
200014e6 l       .text  00000000 
200014e6 l       .text  00000000 
200014f4 l       .text  00000000 
200014f8 l       .text  00000000 
200014fc l       .text  00000000 
200014fc l       .text  00000000 
20001504 l       .text  00000000 
20001504 l       .text  00000000 
2000150e l       .text  00000000 
2000150e l       .text  00000000 
20001510 l       .text  00000000 
2000151e l       .text  00000000 
20001520 l       .text  00000000 
000003b0 l     O .logs.fields   00000014 spi_device_wait_for_sync.kLogFields.69
2000152c l       .text  00000000 
2000152c l       .text  00000000 
2000152e l       .text  00000000 
2000152e l       .text  00000000 
20001530 l       .text  00000000 
200058b8 l     O .rodata        00000014 spi_device_wait_for_sync.log_fields.74
20001530 l       .text  00000000 
2000153c l       .text  00000000 
2000153c l       .text  00000000 
2000153e l       .text  00000000 
000003c4 l     O .logs.fields   00000014 spi_device_wait_for_sync.kLogFields.71
2000153e l       .text  00000000 
2000154a l       .text  00000000 
2000154a l       .text  00000000 
20001550 l       .text  00000000 
20001554 l       .text  00000000 
20001554 l       .text  00000000 
200058cc l     O .rodata        00000014 spi_device_wait_for_sync.log_fields.77
000003d8 l     O .logs.fields   00000014 spi_device_wait_for_sync.kLogFields.75
20001572 l       .text  00000000 
20001572 l       .text  00000000 
20001580 l       .text  00000000 
20001580 l       .text  00000000 
20001582 l       .text  00000000 
20001584 l       .text  00000000 
20001584 l       .text  00000000 
20001588 l       .text  00000000 
20001590 l       .text  00000000 
20001590 l       .text  00000000 
20001592 l       .text  00000000 
20001592 l       .text  00000000 
2000159a l       .text  00000000 
2000159a l       .text  00000000 
200015a0 l       .text  00000000 
200015a0 l       .text  00000000 
200015a2 l       .text  00000000 
200015a2 l       .text  00000000 
200015a6 l       .text  00000000 
200015a6 l       .text  00000000 
200015b4 l       .text  00000000 
200015b8 l       .text  00000000 
200015b8 l       .text  00000000 
000003ec l     O .logs.fields   00000014 spi_device_wait_for_sync.kLogFields.78
200015bc l       .text  00000000 
200015c8 l       .text  00000000 
200015c8 l       .text  00000000 
200015ca l       .text  00000000 
200058e0 l     O .rodata        00000014 spi_device_wait_for_sync.log_fields.79
200015ca l       .text  00000000 
200015d8 l       .text  00000000 
200015d8 l       .text  00000000 
200015de l       .text  00000000 
200015e2 l       .text  00000000 
200015e2 l       .text  00000000 
200015ee l       .text  00000000 
200015ee l       .text  00000000 
20001616 l       .text  00000000 
2000161a l       .text  00000000 
2000161a l       .text  00000000 
2000161a l       .text  00000000 
2000161a l       .text  00000000 
2000161a l       .text  00000000 
2000161c l       .text  00000000 
2000161c l       .text  00000000 
20001626 l       .text  00000000 
1000208c l     O .bss   00000004 spi_device_getc.index
10002140 l     O .bss   00000110 spi_device_getc.info
2000162e l       .text  00000000 
2000163a l       .text  00000000 
2000163e l       .text  00000000 
20001640 l       .text  00000000 
20001640 l       .text  00000000 
20001654 l       .text  00000000 
20001654 l       .text  00000000 
2000165c l       .text  00000000 
20001662 l       .text  00000000 
20001662 l       .text  00000000 
2000166a l       .text  00000000 
2000166c l       .text  00000000 
2000166c l       .text  00000000 
20001674 l       .text  00000000 
20001674 l       .text  00000000 
20001676 l       .text  00000000 
2000167e l       .text  00000000 
2000167e l       .text  00000000 
20001680 l       .text  00000000 
2000168e l       .text  00000000 
20001690 l       .text  00000000 
00000360 l     O .logs.fields   00000014 spi_device_getc.kLogFields
200016a4 l       .text  00000000 
200016a4 l       .text  00000000 
200016a6 l       .text  00000000 
2000587c l     O .rodata        00000014 spi_device_getc.log_fields.64
200016a6 l       .text  00000000 
200016b2 l       .text  00000000 
200016b2 l       .text  00000000 
200016b4 l       .text  00000000 
200016b4 l       .text  00000000 
00000374 l     O .logs.fields   00000014 spi_device_getc.kLogFields.61
200016c8 l       .text  00000000 
200016c8 l       .text  00000000 
200016ce l       .text  00000000 
200016d2 l       .text  00000000 
200016d2 l       .text  00000000 
200016d6 l       .text  00000000 
200016d6 l       .text  00000000 
200016de l       .text  00000000 
200016e2 l       .text  00000000 
200016e2 l       .text  00000000 
200016ea l       .text  00000000 
200016ec l       .text  00000000 
00000388 l     O .logs.fields   00000014 spi_device_getc.kLogFields.65
20001700 l       .text  00000000 
20001700 l       .text  00000000 
20001702 l       .text  00000000 
20005890 l     O .rodata        00000014 spi_device_getc.log_fields.67
20001702 l       .text  00000000 
20001710 l       .text  00000000 
20001710 l       .text  00000000 
20001716 l       .text  00000000 
2000171a l       .text  00000000 
2000171a l       .text  00000000 
2000173c l       .text  00000000 
2000173c l       .text  00000000 
20001746 l       .text  00000000 
2000174a l       .text  00000000 
2000174a l       .text  00000000 
2000174a l       .text  00000000 
2000174a l       .text  00000000 
2000174a l       .text  00000000 
2000174c l       .text  00000000 
2000174c l       .text  00000000 
2000174c l       .text  00000000 
20001756 l       .text  00000000 
20001766 l       .text  00000000 
20001766 l       .text  00000000 
2000176a l       .text  00000000 
2000176e l       .text  00000000 
2000176e l       .text  00000000 
20001772 l       .text  00000000 
20001774 l       .text  00000000 
0000025c l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields
20001788 l       .text  00000000 
20001788 l       .text  00000000 
2000178a l       .text  00000000 
200057b4 l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields
2000178a l       .text  00000000 
20001798 l       .text  00000000 
20001798 l       .text  00000000 
2000179e l       .text  00000000 
200017a2 l       .text  00000000 
200017a2 l       .text  00000000 
200017ae l       .text  00000000 
200017b2 l       .text  00000000 
200017c4 l       .text  00000000 
200017c4 l       .text  00000000 
200017cc l       .text  00000000 
200017d0 l       .text  00000000 
200017d0 l       .text  00000000 
200017d4 l       .text  00000000 
200017d6 l       .text  00000000 
00000270 l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields.28
200017ea l       .text  00000000 
200017ea l       .text  00000000 
200017ec l       .text  00000000 
200057c8 l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields.30
200017ec l       .text  00000000 
200017fa l       .text  00000000 
200017fa l       .text  00000000 
20001800 l       .text  00000000 
20001804 l       .text  00000000 
20001804 l       .text  00000000 
2000180e l       .text  00000000 
20001812 l       .text  00000000 
20001812 l       .text  00000000 
20001816 l       .text  00000000 
20001818 l       .text  00000000 
00000284 l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields.31
2000182c l       .text  00000000 
2000182c l       .text  00000000 
2000182e l       .text  00000000 
200057dc l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields.33
2000182e l       .text  00000000 
2000183c l       .text  00000000 
2000183c l       .text  00000000 
20001842 l       .text  00000000 
20001846 l       .text  00000000 
20001846 l       .text  00000000 
2000184c l       .text  00000000 
20001862 l       .text  00000000 
20001862 l       .text  00000000 
2000186a l       .text  00000000 
2000187e l       .text  00000000 
20001882 l       .text  00000000 
20001882 l       .text  00000000 
20001886 l       .text  00000000 
20001888 l       .text  00000000 
00000298 l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields.34
2000189c l       .text  00000000 
2000189c l       .text  00000000 
2000189e l       .text  00000000 
200057f0 l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields.36
2000189e l       .text  00000000 
200018ac l       .text  00000000 
200018ac l       .text  00000000 
200018b2 l       .text  00000000 
200018b6 l       .text  00000000 
200018b6 l       .text  00000000 
200018cc l       .text  00000000 
200018d0 l       .text  00000000 
200018d0 l       .text  00000000 
200018d4 l       .text  00000000 
200018d6 l       .text  00000000 
000002ac l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields.37
200018ea l       .text  00000000 
200018ea l       .text  00000000 
200018ec l       .text  00000000 
20005804 l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields.39
200018ec l       .text  00000000 
200018fa l       .text  00000000 
200018fa l       .text  00000000 
20001900 l       .text  00000000 
20001904 l       .text  00000000 
20001904 l       .text  00000000 
20001906 l       .text  00000000 
20001906 l       .text  00000000 
2000190a l       .text  00000000 
2000190a l       .text  00000000 
20001912 l       .text  00000000 
20001924 l       .text  00000000 
20001928 l       .text  00000000 
20001928 l       .text  00000000 
2000192c l       .text  00000000 
2000192e l       .text  00000000 
000002c0 l     O .logs.fields   00000014 ottf_console_flow_control_enable.kLogFields.40
20001942 l       .text  00000000 
20001942 l       .text  00000000 
20001944 l       .text  00000000 
20005818 l     O .rodata        00000014 ottf_console_flow_control_enable.log_fields.42
20001944 l       .text  00000000 
20001952 l       .text  00000000 
20001952 l       .text  00000000 
20001958 l       .text  00000000 
2000195c l       .text  00000000 
10002084 l     O .bss   00000004 flow_control_state
2000195c l       .text  00000000 
20001964 l       .text  00000000 
20001968 l       .text  00000000 
20001968 l       .text  00000000 
2000196c l       .text  00000000 
2000196c l       .text  00000000 
20001978 l       .text  00000000 
2000197a l       .text  00000000 
2000197e l       .text  00000000 
2000197e l       .text  00000000 
2000197e l       .text  00000000 
2000197e l       .text  00000000 
2000197e l       .text  00000000 
2000197e l       .text  00000000 
20001980 l       .text  00000000 
20001988 l       .text  00000000 
2000198a l       .text  00000000 
2000198c l       .text  00000000 
2000198c l       .text  00000000 
20001992 l       .text  00000000 
20001992 l       .text  00000000 
20001996 l       .text  00000000 
2000199a l       .text  00000000 
2000199a l       .text  00000000 
2000199e l       .text  00000000 
200019a0 l       .text  00000000 
000002fc l     O .logs.fields   00000014 ottf_console_flow_control.kLogFields
200019b4 l       .text  00000000 
200019b4 l       .text  00000000 
200019b6 l       .text  00000000 
20005854 l     O .rodata        00000014 ottf_console_flow_control.log_fields
200019b6 l       .text  00000000 
200019c4 l       .text  00000000 
200019c4 l       .text  00000000 
200019ca l       .text  00000000 
200019ce l       .text  00000000 
200019ce l       .text  00000000 
20001b00 l     F .text  000001c2 manage_flow_control
200019d4 l       .text  00000000 
200019d6 l       .text  00000000 
200019d6 l       .text  00000000 
200019de l       .text  00000000 
200019e2 l       .text  00000000 
200019e2 l       .text  00000000 
200019e6 l       .text  00000000 
200019e8 l       .text  00000000 
00000310 l     O .logs.fields   00000014 ottf_console_flow_control.kLogFields.48
200019fc l       .text  00000000 
200019fc l       .text  00000000 
200019fe l       .text  00000000 
20005868 l     O .rodata        00000014 ottf_console_flow_control.log_fields.50
200019fe l       .text  00000000 
20001a0c l       .text  00000000 
20001a0c l       .text  00000000 
20001a12 l       .text  00000000 
20001a16 l       .text  00000000 
20001a16 l       .text  00000000 
20001a1c l       .text  00000000 
20001a1e l       .text  00000000 
20001a20 l       .text  00000000 
20001a24 l       .text  00000000 
20001a24 l       .text  00000000 
20001a24 l       .text  00000000 
20001a24 l       .text  00000000 
20001a24 l       .text  00000000 
20001a26 l       .text  00000000 
20001a26 l       .text  00000000 
20001a26 l       .text  00000000 
20001a2e l       .text  00000000 
20001a32 l       .text  00000000 
20001a38 l       .text  00000000 
20001a3c l       .text  00000000 
20001a4e l       .text  00000000 
10002088 l     O .bss   00000004 flow_control_irqs
20001a4e l       .text  00000000 
20001a5c l       .text  00000000 
20001a5c l       .text  00000000 
20001a68 l       .text  00000000 
20001a68 l       .text  00000000 
20001a6c l       .text  00000000 
20001a70 l       .text  00000000 
20001a70 l       .text  00000000 
20001a74 l       .text  00000000 
20001a76 l       .text  00000000 
000002d4 l     O .logs.fields   00000014 ottf_console_flow_control_isr.kLogFields
20001a8a l       .text  00000000 
20001a8a l       .text  00000000 
20001a8c l       .text  00000000 
2000582c l     O .rodata        00000014 ottf_console_flow_control_isr.log_fields
20001a8c l       .text  00000000 
20001a9a l       .text  00000000 
20001a9a l       .text  00000000 
20001aa0 l       .text  00000000 
20001aa4 l       .text  00000000 
20001aa4 l       .text  00000000 
20001aa8 l       .text  00000000 
20001aa8 l       .text  00000000 
20001aaa l       .text  00000000 
20001ab0 l       .text  00000000 
20001ab0 l       .text  00000000 
20001ab8 l       .text  00000000 
20001abc l       .text  00000000 
20001abc l       .text  00000000 
20001ac0 l       .text  00000000 
20001ac2 l       .text  00000000 
000002e8 l     O .logs.fields   00000014 ottf_console_flow_control_isr.kLogFields.44
20001ad6 l       .text  00000000 
20001ad6 l       .text  00000000 
20001ad8 l       .text  00000000 
20005840 l     O .rodata        00000014 ottf_console_flow_control_isr.log_fields.46
20001ad8 l       .text  00000000 
20001ae6 l       .text  00000000 
20001ae6 l       .text  00000000 
20001aec l       .text  00000000 
20001af0 l       .text  00000000 
20001af0 l       .text  00000000 
20001af4 l       .text  00000000 
20001af8 l       .text  00000000 
20001afc l       .text  00000000 
20001b00 l       .text  00000000 
20001b00 l       .text  00000000 
20001b00 l       .text  00000000 
20001b00 l       .text  00000000 
20001b00 l       .text  00000000 
20001b02 l       .text  00000000 
20001b02 l       .text  00000000 
20001b0a l       .text  00000000 
20001b12 l       .text  00000000 
20001b14 l       .text  00000000 
20001b16 l       .text  00000000 
20001b18 l       .text  00000000 
20001b1a l       .text  00000000 
20001b1e l       .text  00000000 
20001b1e l       .text  00000000 
20001b26 l       .text  00000000 
20001b28 l       .text  00000000 
20001b32 l       .text  00000000 
20001b34 l       .text  00000000 
20001b4e l       .text  00000000 
20001b4e l       .text  00000000 
20001b52 l       .text  00000000 
20001b52 l       .text  00000000 
20001b54 l       .text  00000000 
20001b54 l       .text  00000000 
20001b56 l       .text  00000000 
20001b5a l       .text  00000000 
20001b5e l       .text  00000000 
20001b5e l       .text  00000000 
20001b60 l       .text  00000000 
20001b60 l       .text  00000000 
20001b64 l       .text  00000000 
20001b64 l       .text  00000000 
20001b6e l       .text  00000000 
20001b74 l       .text  00000000 
20001b74 l       .text  00000000 
20001b7c l       .text  00000000 
20001b7e l       .text  00000000 
00000400 l     O .logs.fields   00000014 manage_flow_control.kLogFields
20001b92 l       .text  00000000 
20001b92 l       .text  00000000 
20001b94 l       .text  00000000 
20001b94 l       .text  00000000 
20001b9c l       .text  00000000 
20001ba4 l       .text  00000000 
20001bae l       .text  00000000 
20001bb4 l       .text  00000000 
20001bb4 l       .text  00000000 
20001bb6 l       .text  00000000 
20001bb8 l       .text  00000000 
20001bb8 l       .text  00000000 
20001bcc l       .text  00000000 
20001bd0 l       .text  00000000 
20001bd0 l       .text  00000000 
20001bd2 l       .text  00000000 
20001bd4 l       .text  00000000 
20001bd8 l       .text  00000000 
20001bdc l       .text  00000000 
20001bdc l       .text  00000000 
20001bde l       .text  00000000 
20001bde l       .text  00000000 
20001be2 l       .text  00000000 
20001bf0 l       .text  00000000 
20001bf0 l       .text  00000000 
20001bfa l       .text  00000000 
20001bfe l       .text  00000000 
20001bfe l       .text  00000000 
20001c06 l       .text  00000000 
20001c08 l       .text  00000000 
00000414 l     O .logs.fields   00000014 manage_flow_control.kLogFields.80
20001c1c l       .text  00000000 
20001c1c l       .text  00000000 
20001c1e l       .text  00000000 
200058f4 l     O .rodata        00000014 manage_flow_control.log_fields
20001c1e l       .text  00000000 
20001c2c l       .text  00000000 
20001c2c l       .text  00000000 
20001c30 l       .text  00000000 
20005908 l     O .rodata        00000014 manage_flow_control.log_fields.82
20001c30 l       .text  00000000 
20001c3e l       .text  00000000 
20001c3e l       .text  00000000 
20001c40 l       .text  00000000 
20001c4a l       .text  00000000 
20001c4a l       .text  00000000 
20001c4e l       .text  00000000 
20001c4e l       .text  00000000 
20001c5c l       .text  00000000 
20001c60 l       .text  00000000 
20001c60 l       .text  00000000 
20001c68 l       .text  00000000 
20001c6a l       .text  00000000 
00000428 l     O .logs.fields   00000014 manage_flow_control.kLogFields.83
20001c7e l       .text  00000000 
20001c7e l       .text  00000000 
20001c80 l       .text  00000000 
2000591c l     O .rodata        00000014 manage_flow_control.log_fields.85
20001c80 l       .text  00000000 
20001c8e l       .text  00000000 
20001c8e l       .text  00000000 
20001c94 l       .text  00000000 
20001c98 l       .text  00000000 
20001c98 l       .text  00000000 
20001c9c l       .text  00000000 
20001ca8 l       .text  00000000 
20001ca8 l       .text  00000000 
20001cb2 l       .text  00000000 
20001cb4 l       .text  00000000 
20001cbe l       .text  00000000 
20001cbe l       .text  00000000 
20001cc2 l       .text  00000000 
20001cc2 l       .text  00000000 
0000034c l     O .logs.fields   00000014 ottf_console_spi_device_read.kLogFields.58
00000324 l     O .logs.fields   00000014 ottf_console_spi_device_read.kLogFields
00000338 l     O .logs.fields   00000014 ottf_console_spi_device_read.kLogFields.52
00000080 l     O .ot.status_create_record       00000080 ottf_console_init.kOtStatusRecord
00000100 l     O .ot.status_create_record       00000080 ottf_console_init.kOtStatusRecord.5
00000180 l     O .ot.status_create_record       00000080 ottf_console_configure_uart.kOtStatusRecord
00000200 l     O .ot.status_create_record       00000080 ottf_console_configure_uart.kOtStatusRecord.13
00000280 l     O .ot.status_create_record       00000080 ottf_console_putbuf.kOtStatusRecord
000012bc l       .debug_loc     00000000 
000012ed l       .debug_loc     00000000 
00001308 l       .debug_loc     00000000 
00001323 l       .debug_loc     00000000 
0000133e l       .debug_loc     00000000 
0000136f l       .debug_loc     00000000 
0000138a l       .debug_loc     00000000 
000013b0 l       .debug_loc     00000000 
000013e1 l       .debug_loc     00000000 
00001407 l       .debug_loc     00000000 
0000142f l       .debug_loc     00000000 
0000144a l       .debug_loc     00000000 
00001471 l       .debug_loc     00000000 
00001498 l       .debug_loc     00000000 
000014c9 l       .debug_loc     00000000 
000014ef l       .debug_loc     00000000 
0000150a l       .debug_loc     00000000 
00001530 l       .debug_loc     00000000 
00001561 l       .debug_loc     00000000 
0000157c l       .debug_loc     00000000 
000015ad l       .debug_loc     00000000 
000015de l       .debug_loc     00000000 
00001611 l       .debug_loc     00000000 
00001642 l       .debug_loc     00000000 
00001673 l       .debug_loc     00000000 
000016a6 l       .debug_loc     00000000 
000016d9 l       .debug_loc     00000000 
0000170c l       .debug_loc     00000000 
0000173d l       .debug_loc     00000000 
0000176e l       .debug_loc     00000000 
00001794 l       .debug_loc     00000000 
000017c5 l       .debug_loc     00000000 
000017f8 l       .debug_loc     00000000 
0000182b l       .debug_loc     00000000 
0000185c l       .debug_loc     00000000 
0000188d l       .debug_loc     00000000 
000018a8 l       .debug_loc     00000000 
000018d9 l       .debug_loc     00000000 
0000190a l       .debug_loc     00000000 
0000193b l       .debug_loc     00000000 
0000196c l       .debug_loc     00000000 
0000199d l       .debug_loc     00000000 
000019c3 l       .debug_loc     00000000 
000019e9 l       .debug_loc     00000000 
00001a1a l       .debug_loc     00000000 
00001a35 l       .debug_loc     00000000 
00001a66 l       .debug_loc     00000000 
00001a81 l       .debug_loc     00000000 
00001a9c l       .debug_loc     00000000 
00001ab8 l       .debug_loc     00000000 
00001ae9 l       .debug_loc     00000000 
00001b1a l       .debug_loc     00000000 
00001b56 l       .debug_loc     00000000 
00001bcc l       .debug_loc     00000000 
00001c0a l       .debug_loc     00000000 
00001c31 l       .debug_loc     00000000 
00001c58 l       .debug_loc     00000000 
00001c7e l       .debug_loc     00000000 
00001caf l       .debug_loc     00000000 
00001cca l       .debug_loc     00000000 
00001ce5 l       .debug_loc     00000000 
00001d16 l       .debug_loc     00000000 
00001d32 l       .debug_loc     00000000 
00001d63 l       .debug_loc     00000000 
00001d94 l       .debug_loc     00000000 
00001dc5 l       .debug_loc     00000000 
00001e0e l       .debug_loc     00000000 
00001e2b l       .debug_loc     00000000 
00001e67 l       .debug_loc     00000000 
00001e82 l       .debug_loc     00000000 
00001e9d l       .debug_loc     00000000 
00001ece l       .debug_loc     00000000 
00001f01 l       .debug_loc     00000000 
00001f34 l       .debug_loc     00000000 
00001f4f l       .debug_loc     00000000 
00001f6a l       .debug_loc     00000000 
00001f90 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002651 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000002a8 l       .debug_ranges  00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
0000236e l       .debug_str     00000000 
00000204 l       .debug_str     00000000 
00000291 l       .debug_str     00000000 
00001f3c l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
00000150 l       .debug_ranges  00000000 
000024bd l       .debug_str     00000000 
000024c2 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00007ebb l       .debug_str     00000000 
00000284 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000255 l       .debug_str     00000000 
0000020f l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00001f77 l       .debug_str     00000000 
00001f5f l       .debug_str     00000000 
00001f4c l       .debug_str     00000000 
00001f56 l       .debug_str     00000000 
00004fcc l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
00000168 l       .debug_ranges  00000000 
00004ff2 l       .debug_str     00000000 
000050dd l       .debug_str     00000000 
00005eef l       .debug_str     00000000 
000003c8 l       .debug_str     00000000 
00002c7a l       .debug_str     00000000 
000001b0 l       .debug_ranges  00000000 
00005024 l       .debug_str     00000000 
00002829 l       .debug_str     00000000 
00005045 l       .debug_str     00000000 
000024b4 l       .debug_str     00000000 
000050eb l       .debug_str     00000000 
000028d6 l       .debug_str     00000000 
00002624 l       .debug_str     00000000 
00001b6b l       .debug_str     00000000 
000062f2 l       .debug_str     00000000 
0000509a l       .debug_str     00000000 
00005110 l       .debug_str     00000000 
000050c7 l       .debug_str     00000000 
000024b8 l       .debug_str     00000000 
000050f4 l       .debug_str     00000000 
00000240 l       .debug_ranges  00000000 
00000258 l       .debug_ranges  00000000 
00004b8d l       .debug_str     00000000 
00000278 l       .debug_ranges  00000000 
00004b95 l       .debug_str     00000000 
00004b9c l       .debug_str     00000000 
00005106 l       .debug_str     00000000 
00005119 l       .debug_str     00000000 
00000290 l       .debug_ranges  00000000 
000050b7 l       .debug_str     00000000 
000058ff l       .debug_str     00000000 
00008060 l       .debug_str     00000000 
00005127 l       .debug_str     00000000 
00002685 l       .debug_str     00000000 
00002804 l       .debug_str     00000000 
000027ee l       .debug_str     00000000 
000069c1 l       .debug_str     00000000 
000027cf l       .debug_str     00000000 
000026ac l       .debug_str     00000000 
0000269d l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
000027d6 l       .debug_str     00000000 
000027c0 l       .debug_str     00000000 
000026bd l       .debug_str     00000000 
00002736 l       .debug_str     00000000 
0000279e l       .debug_str     00000000 
0000271b l       .debug_str     00000000 
00002702 l       .debug_str     00000000 
000026c6 l       .debug_str     00000000 
000026e4 l       .debug_str     00000000 
000027aa l       .debug_str     00000000 
00002796 l       .debug_str     00000000 
0000273f l       .debug_str     00000000 
00002759 l       .debug_str     00000000 
00002779 l       .debug_str     00000000 
0000281c l       .debug_str     00000000 
00002837 l       .debug_str     00000000 
0000282e l       .debug_str     00000000 
00004a66 l       .debug_str     00000000 
00002842 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00001fa7 l       .debug_str     00000000 
0000501f l       .debug_str     00000000 
0000891b l       .debug_str     00000000 
000088fc l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
00002850 l       .debug_str     00000000 
000028f0 l       .debug_str     00000000 
00002863 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
0000289b l       .debug_str     00000000 
000028b9 l       .debug_str     00000000 
00005088 l       .debug_str     00000000 
00005014 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
00002692 l       .debug_str     00000000 
000001c8 l       .debug_ranges  00000000 
00002938 l       .debug_str     00000000 
0000292d l       .debug_str     00000000 
000057c3 l       .debug_str     00000000 
0000290c l       .debug_str     00000000 
00002918 l       .debug_str     00000000 
0000805b l       .debug_str     00000000 
00002920 l       .debug_str     00000000 
00008077 l       .debug_str     00000000 
00008de7 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00002293 l       .debug_str     00000000 
00002284 l       .debug_str     00000000 
00005063 l       .debug_str     00000000 
0000a42e l       .debug_str     00000000 
000001e0 l       .debug_ranges  00000000 
000050ee l       .debug_str     00000000 
000001f8 l       .debug_ranges  00000000 
000087bd l       .debug_str     00000000 
00008e4c l       .debug_str     00000000 
00002326 l       .debug_str     00000000 
00002495 l       .debug_str     00000000 
00000210 l       .debug_ranges  00000000 
00000228 l       .debug_ranges  00000000 
00002946 l       .debug_str     00000000 
00000131 l       .debug_str     00000000 
0000010a l       .debug_str     00000000 
0000011b l       .debug_str     00000000 
0000222b l       .debug_str     00000000 
0000210a l       .debug_str     00000000 
0000210e l       .debug_str     00000000 
00002119 l       .debug_str     00000000 
00002122 l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00002145 l       .debug_str     00000000 
0000214f l       .debug_str     00000000 
0000215e l       .debug_str     00000000 
00002170 l       .debug_str     00000000 
00002183 l       .debug_str     00000000 
00002197 l       .debug_str     00000000 
000021a0 l       .debug_str     00000000 
000021ac l       .debug_str     00000000 
000021bb l       .debug_str     00000000 
000021c5 l       .debug_str     00000000 
000021d2 l       .debug_str     00000000 
000021dc l       .debug_str     00000000 
000021ed l       .debug_str     00000000 
000023d3 l       .debug_str     00000000 
00000379 l       .debug_str     00000000 
0000038e l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b9 l       .debug_str     00000000 
000003ca l       .debug_str     00000000 
000003dc l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
00002987 l       .debug_str     00000000 
00002962 l       .debug_str     00000000 
00002974 l       .debug_str     00000000 
000029f0 l       .debug_str     00000000 
00002997 l       .debug_str     00000000 
000029ad l       .debug_str     00000000 
000029c3 l       .debug_str     00000000 
000029d9 l       .debug_str     00000000 
00002a95 l       .debug_str     00000000 
00002a08 l       .debug_str     00000000 
00002a27 l       .debug_str     00000000 
00002a41 l       .debug_str     00000000 
00002a5d l       .debug_str     00000000 
00002a79 l       .debug_str     00000000 
00002b43 l       .debug_str     00000000 
00002ab7 l       .debug_str     00000000 
00002ad2 l       .debug_str     00000000 
00002aef l       .debug_str     00000000 
00002b0a l       .debug_str     00000000 
00002b25 l       .debug_str     00000000 
00002c08 l       .debug_str     00000000 
00002b5d l       .debug_str     00000000 
00002b85 l       .debug_str     00000000 
00002bb5 l       .debug_str     00000000 
00002be5 l       .debug_str     00000000 
00002c67 l       .debug_str     00000000 
00002c2a l       .debug_str     00000000 
00002c48 l       .debug_str     00000000 
00002c7f l       .debug_str     00000000 
00002c96 l       .debug_str     00000000 
00002caf l       .debug_str     00000000 
00002cc9 l       .debug_str     00000000 
00002ce1 l       .debug_str     00000000 
00002d91 l       .debug_str     00000000 
00002ced l       .debug_str     00000000 
00002d04 l       .debug_str     00000000 
00002d1b l       .debug_str     00000000 
00002d32 l       .debug_str     00000000 
00002d49 l       .debug_str     00000000 
00002d61 l       .debug_str     00000000 
00002d79 l       .debug_str     00000000 
00002e65 l       .debug_str     00000000 
00002da4 l       .debug_str     00000000 
00002dbb l       .debug_str     00000000 
00002dd2 l       .debug_str     00000000 
00002de4 l       .debug_str     00000000 
00002dfa l       .debug_str     00000000 
00002e10 l       .debug_str     00000000 
00002e26 l       .debug_str     00000000 
00002e3b l       .debug_str     00000000 
00002e52 l       .debug_str     00000000 
00002ef8 l       .debug_str     00000000 
00002e72 l       .debug_str     00000000 
00002e95 l       .debug_str     00000000 
00002eb9 l       .debug_str     00000000 
00002eda l       .debug_str     00000000 
00004a3e l       .debug_str     00000000 
00002f19 l       .debug_str     00000000 
00002f33 l       .debug_str     00000000 
00002f59 l       .debug_str     00000000 
00002f7f l       .debug_str     00000000 
00002fa0 l       .debug_str     00000000 
00002fc5 l       .debug_str     00000000 
00002fea l       .debug_str     00000000 
0000300f l       .debug_str     00000000 
00003033 l       .debug_str     00000000 
00003059 l       .debug_str     00000000 
0000307b l       .debug_str     00000000 
000030a1 l       .debug_str     00000000 
000030c7 l       .debug_str     00000000 
000030e8 l       .debug_str     00000000 
0000310d l       .debug_str     00000000 
00003132 l       .debug_str     00000000 
00003157 l       .debug_str     00000000 
0000317b l       .debug_str     00000000 
000031a1 l       .debug_str     00000000 
000031c3 l       .debug_str     00000000 
000031e9 l       .debug_str     00000000 
0000320f l       .debug_str     00000000 
00003230 l       .debug_str     00000000 
00003255 l       .debug_str     00000000 
0000327a l       .debug_str     00000000 
0000329f l       .debug_str     00000000 
000032c3 l       .debug_str     00000000 
000032e9 l       .debug_str     00000000 
0000330b l       .debug_str     00000000 
00003331 l       .debug_str     00000000 
00003357 l       .debug_str     00000000 
00003378 l       .debug_str     00000000 
0000339d l       .debug_str     00000000 
000033c2 l       .debug_str     00000000 
000033e7 l       .debug_str     00000000 
0000340b l       .debug_str     00000000 
00003431 l       .debug_str     00000000 
00003453 l       .debug_str     00000000 
00003472 l       .debug_str     00000000 
00003491 l       .debug_str     00000000 
000034b0 l       .debug_str     00000000 
000034cf l       .debug_str     00000000 
000034ee l       .debug_str     00000000 
0000350d l       .debug_str     00000000 
0000352c l       .debug_str     00000000 
0000354b l       .debug_str     00000000 
0000356a l       .debug_str     00000000 
00003589 l       .debug_str     00000000 
000035a9 l       .debug_str     00000000 
000035c9 l       .debug_str     00000000 
000035e9 l       .debug_str     00000000 
00003609 l       .debug_str     00000000 
00003629 l       .debug_str     00000000 
00003649 l       .debug_str     00000000 
00003669 l       .debug_str     00000000 
00003689 l       .debug_str     00000000 
000036a9 l       .debug_str     00000000 
000036c9 l       .debug_str     00000000 
000036e9 l       .debug_str     00000000 
00003709 l       .debug_str     00000000 
00003729 l       .debug_str     00000000 
00003749 l       .debug_str     00000000 
00003769 l       .debug_str     00000000 
00003789 l       .debug_str     00000000 
000037a9 l       .debug_str     00000000 
000037c9 l       .debug_str     00000000 
000037e9 l       .debug_str     00000000 
00003809 l       .debug_str     00000000 
00003829 l       .debug_str     00000000 
00003849 l       .debug_str     00000000 
0000387d l       .debug_str     00000000 
000038b1 l       .debug_str     00000000 
000038e5 l       .debug_str     00000000 
00003914 l       .debug_str     00000000 
0000393e l       .debug_str     00000000 
0000396e l       .debug_str     00000000 
0000399c l       .debug_str     00000000 
000039c8 l       .debug_str     00000000 
000039ee l       .debug_str     00000000 
00003a13 l       .debug_str     00000000 
00003a39 l       .debug_str     00000000 
00003a5d l       .debug_str     00000000 
00003a85 l       .debug_str     00000000 
00003aae l       .debug_str     00000000 
00003ad7 l       .debug_str     00000000 
00003aff l       .debug_str     00000000 
00003b24 l       .debug_str     00000000 
00003b49 l       .debug_str     00000000 
00003b6c l       .debug_str     00000000 
00003b91 l       .debug_str     00000000 
00003bb5 l       .debug_str     00000000 
00003bd8 l       .debug_str     00000000 
00003bfd l       .debug_str     00000000 
00003c23 l       .debug_str     00000000 
00003c48 l       .debug_str     00000000 
00003c6e l       .debug_str     00000000 
00003c92 l       .debug_str     00000000 
00003cba l       .debug_str     00000000 
00003ce3 l       .debug_str     00000000 
00003d0c l       .debug_str     00000000 
00003d34 l       .debug_str     00000000 
00003d59 l       .debug_str     00000000 
00003d7e l       .debug_str     00000000 
00003da1 l       .debug_str     00000000 
00003dc6 l       .debug_str     00000000 
00003dea l       .debug_str     00000000 
00003e0d l       .debug_str     00000000 
00003e32 l       .debug_str     00000000 
00003e58 l       .debug_str     00000000 
00003e7d l       .debug_str     00000000 
00003ea3 l       .debug_str     00000000 
00003ec7 l       .debug_str     00000000 
00003eef l       .debug_str     00000000 
00003f18 l       .debug_str     00000000 
00003f41 l       .debug_str     00000000 
00003f69 l       .debug_str     00000000 
00003f8e l       .debug_str     00000000 
00003fb3 l       .debug_str     00000000 
00003fd6 l       .debug_str     00000000 
00003ffb l       .debug_str     00000000 
0000401f l       .debug_str     00000000 
00004042 l       .debug_str     00000000 
00004067 l       .debug_str     00000000 
0000408b l       .debug_str     00000000 
000040af l       .debug_str     00000000 
000040e3 l       .debug_str     00000000 
00004110 l       .debug_str     00000000 
00004135 l       .debug_str     00000000 
0000415d l       .debug_str     00000000 
00004185 l       .debug_str     00000000 
000041ad l       .debug_str     00000000 
000041d5 l       .debug_str     00000000 
000041f8 l       .debug_str     00000000 
0000421e l       .debug_str     00000000 
00004241 l       .debug_str     00000000 
00004267 l       .debug_str     00000000 
0000428e l       .debug_str     00000000 
000042b1 l       .debug_str     00000000 
000042d9 l       .debug_str     00000000 
000042fd l       .debug_str     00000000 
00004322 l       .debug_str     00000000 
00004349 l       .debug_str     00000000 
0000436f l       .debug_str     00000000 
00004395 l       .debug_str     00000000 
000043b7 l       .debug_str     00000000 
000043dd l       .debug_str     00000000 
00004402 l       .debug_str     00000000 
00004426 l       .debug_str     00000000 
0000444a l       .debug_str     00000000 
00004473 l       .debug_str     00000000 
00004494 l       .debug_str     00000000 
000044b7 l       .debug_str     00000000 
000044dd l       .debug_str     00000000 
00004505 l       .debug_str     00000000 
0000452a l       .debug_str     00000000 
0000455a l       .debug_str     00000000 
00004586 l       .debug_str     00000000 
000045b7 l       .debug_str     00000000 
000045e5 l       .debug_str     00000000 
00004616 l       .debug_str     00000000 
00004649 l       .debug_str     00000000 
00004671 l       .debug_str     00000000 
00004697 l       .debug_str     00000000 
000046bc l       .debug_str     00000000 
000046e0 l       .debug_str     00000000 
00004705 l       .debug_str     00000000 
0000472b l       .debug_str     00000000 
0000474d l       .debug_str     00000000 
00004770 l       .debug_str     00000000 
00004791 l       .debug_str     00000000 
000047b3 l       .debug_str     00000000 
000047d6 l       .debug_str     00000000 
000047f7 l       .debug_str     00000000 
00004815 l       .debug_str     00000000 
00004837 l       .debug_str     00000000 
0000485e l       .debug_str     00000000 
00004885 l       .debug_str     00000000 
000048ab l       .debug_str     00000000 
000048d0 l       .debug_str     00000000 
000048fe l       .debug_str     00000000 
00004930 l       .debug_str     00000000 
00004962 l       .debug_str     00000000 
0000498c l       .debug_str     00000000 
000049b3 l       .debug_str     00000000 
000049d8 l       .debug_str     00000000 
000049ff l       .debug_str     00000000 
00004a24 l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
00002248 l       .debug_str     00000000 
0000231f l       .debug_str     00000000 
000023be l       .debug_str     00000000 
0000153c l       .debug_str     00000000 
00004a57 l       .debug_str     00000000 
00001551 l       .debug_str     00000000 
00001568 l       .debug_str     00000000 
00001578 l       .debug_str     00000000 
00004a6b l       .debug_str     00000000 
00004a79 l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00004a87 l       .debug_str     00000000 
00004b0d l       .debug_str     00000000 
00004afd l       .debug_str     00000000 
00004a9a l       .debug_str     00000000 
00004aa3 l       .debug_str     00000000 
00004aaf l       .debug_str     00000000 
00002990 l       .debug_str     00000000 
00004acf l       .debug_str     00000000 
00004ad9 l       .debug_str     00000000 
000029f9 l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
00004abd l       .debug_str     00000000 
00004ae3 l       .debug_str     00000000 
00004b1f l       .debug_str     00000000 
00004fe8 l       .debug_str     00000000 
00000180 l       .debug_ranges  00000000 
00000198 l       .debug_ranges  00000000 
00004b30 l       .debug_str     00000000 
00004b4d l       .debug_str     00000000 
0000248e l       .debug_str     00000000 
00004b54 l       .debug_str     00000000 
00004b6d l       .debug_str     00000000 
00004b7f l       .debug_str     00000000 
00004ba0 l       .debug_str     00000000 
00004bbb l       .debug_str     00000000 
00004bd4 l       .debug_str     00000000 
00004ce9 l       .debug_str     00000000 
00004ccc l       .debug_str     00000000 
00002aaa l       .debug_str     00000000 
00004c1e l       .debug_str     00000000 
00004c2b l       .debug_str     00000000 
00004c57 l       .debug_str     00000000 
00004c70 l       .debug_str     00000000 
00004c84 l       .debug_str     00000000 
00002c17 l       .debug_str     00000000 
00004d6b l       .debug_str     00000000 
00004cbc l       .debug_str     00000000 
00004bfa l       .debug_str     00000000 
00004c3b l       .debug_str     00000000 
00004c98 l       .debug_str     00000000 
00004d08 l       .debug_str     00000000 
00004d2a l       .debug_str     00000000 
00004d4d l       .debug_str     00000000 
00004d72 l       .debug_str     00000000 
00004d81 l       .debug_str     00000000 
00004dab l       .debug_str     00000000 
00004dc2 l       .debug_str     00000000 
00004dc9 l       .debug_str     00000000 
00004dda l       .debug_str     00000000 
00004dfd l       .debug_str     00000000 
00004e1a l       .debug_str     00000000 
00004e0e l       .debug_str     00000000 
00004e28 l       .debug_str     00000000 
00004e42 l       .debug_str     00000000 
00004e57 l       .debug_str     00000000 
00004e70 l       .debug_str     00000000 
00004e7f l       .debug_str     00000000 
00004e9c l       .debug_str     00000000 
00004eb1 l       .debug_str     00000000 
00004ed2 l       .debug_str     00000000 
00004ee7 l       .debug_str     00000000 
00002542 l       .debug_str     00000000 
00002605 l       .debug_str     00000000 
00004f03 l       .debug_str     00000000 
00004f1c l       .debug_str     00000000 
00004f3b l       .debug_str     00000000 
00004f54 l       .debug_str     00000000 
00004f6c l       .debug_str     00000000 
00004f85 l       .debug_str     00000000 
00004fa1 l       .debug_str     00000000 
00005077 l       .debug_str     00000000 
00004fb5 l       .debug_str     00000000 
000050cb l       .debug_str     00000000 
00000370 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 irq.c
20001cc2 l       .text  00000000 
20001cc2 l       .text  00000000 
20001cc2 l       .text  00000000 
20001cc2 l       .text  00000000 
20001cc4 l       .text  00000000 
20001cc6 l       .text  00000000 
20001cc6 l       .text  00000000 
20001cca l       .text  00000000 
20001ccc l       .text  00000000 
20001ccc l       .text  00000000 
20001cce l       .text  00000000 
20001cce l       .text  00000000 
20001cd2 l       .text  00000000 
20001cd4 l       .text  00000000 
20001cd4 l       .text  00000000 
20001cd4 l       .text  00000000 
20001cd4 l       .text  00000000 
20001cd4 l       .text  00000000 
20001cd4 l       .text  00000000 
20001cd6 l       .text  00000000 
20001cda l       .text  00000000 
20001cda l       .text  00000000 
20001cde l       .text  00000000 
20001ce0 l       .text  00000000 
20001ce0 l       .text  00000000 
20001ce4 l       .text  00000000 
20001ce4 l       .text  00000000 
20001ce8 l       .text  00000000 
20001cea l       .text  00000000 
20001cea l       .text  00000000 
20001cea l       .text  00000000 
20001cea l       .text  00000000 
20001cea l       .text  00000000 
20001cea l       .text  00000000 
20001cec l       .text  00000000 
20001cf0 l       .text  00000000 
20001cf0 l       .text  00000000 
20001cf4 l       .text  00000000 
20001cf6 l       .text  00000000 
20001cf6 l       .text  00000000 
20001cfa l       .text  00000000 
20001cfa l       .text  00000000 
20001cfe l       .text  00000000 
20001d00 l       .text  00000000 
20001d00 l       .text  00000000 
20001d00 l       .text  00000000 
20001d00 l       .text  00000000 
20001d00 l       .text  00000000 
20001d00 l       .text  00000000 
20001d02 l       .text  00000000 
20001d04 l       .text  00000000 
20001d04 l       .text  00000000 
20001d08 l       .text  00000000 
20001d0a l       .text  00000000 
20001d0a l       .text  00000000 
20001d0c l       .text  00000000 
20001d0c l       .text  00000000 
20001d10 l       .text  00000000 
20001d12 l       .text  00000000 
20001d12 l       .text  00000000 
00001fb6 l       .debug_loc     00000000 
00001fe6 l       .debug_loc     00000000 
00002016 l       .debug_loc     00000000 
00002046 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005133 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000320 l       .debug_ranges  00000000 
0000514f l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00005165 l       .debug_str     00000000 
0000517d l       .debug_str     00000000 
00005192 l       .debug_str     00000000 
00008077 l       .debug_str     00000000 
00002542 l       .debug_str     00000000 
000086b8 l       .debug_str     00000000 
00002605 l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
000025f6 l       .debug_str     00000000 
00002617 l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000050c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 spi_device_testutils.c
20001d12 l       .text  00000000 
20001d12 l       .text  00000000 
20001d12 l       .text  00000000 
20001d14 l       .text  00000000 
20001d20 l       .text  00000000 
20001d22 l       .text  00000000 
20001d24 l       .text  00000000 
20001d2c l       .text  00000000 
20001d2c l       .text  00000000 
20001d38 l       .text  00000000 
20001d3a l       .text  00000000 
20001d44 l       .text  00000000 
20001d46 l       .text  00000000 
20001d5a l       .text  00000000 
20001d5a l       .text  00000000 
20001d5e l       .text  00000000 
20001d5e l       .text  00000000 
20001d62 l       .text  00000000 
20001d62 l       .text  00000000 
20001d64 l       .text  00000000 
20001d64 l       .text  00000000 
20001d6a l       .text  00000000 
20001d6e l       .text  00000000 
20001d70 l       .text  00000000 
20001d7a l       .text  00000000 
20001d7c l       .text  00000000 
20001d96 l       .text  00000000 
20001d96 l       .text  00000000 
20001d9a l       .text  00000000 
20001d9a l       .text  00000000 
20001d9e l       .text  00000000 
20001d9e l       .text  00000000 
20001da0 l       .text  00000000 
20001da4 l       .text  00000000 
20001da4 l       .text  00000000 
20001da6 l       .text  00000000 
20001dac l       .text  00000000 
20001dae l       .text  00000000 
20001db8 l       .text  00000000 
20001dba l       .text  00000000 
20001dd4 l       .text  00000000 
20001dd4 l       .text  00000000 
20001dd8 l       .text  00000000 
20001dd8 l       .text  00000000 
20001dde l       .text  00000000 
20001de2 l       .text  00000000 
20001de4 l       .text  00000000 
20001dee l       .text  00000000 
20001df0 l       .text  00000000 
20001e0a l       .text  00000000 
20001e0a l       .text  00000000 
20001e0e l       .text  00000000 
20001e0e l       .text  00000000 
20001e14 l       .text  00000000 
20001e18 l       .text  00000000 
20001e1a l       .text  00000000 
20001e24 l       .text  00000000 
20001e26 l       .text  00000000 
20001e40 l       .text  00000000 
20001e40 l       .text  00000000 
20001e44 l       .text  00000000 
20001e44 l       .text  00000000 
20001e48 l       .text  00000000 
20001e48 l       .text  00000000 
20001e4a l       .text  00000000 
20001e4a l       .text  00000000 
20001e4e l       .text  00000000 
20001e52 l       .text  00000000 
20001e54 l       .text  00000000 
20001e5e l       .text  00000000 
20001e60 l       .text  00000000 
20001e7a l       .text  00000000 
20001e7a l       .text  00000000 
20001e7e l       .text  00000000 
20001e7e l       .text  00000000 
20001e80 l       .text  00000000 
20001e84 l       .text  00000000 
20001e84 l       .text  00000000 
20001e88 l       .text  00000000 
20001e88 l       .text  00000000 
20001e92 l       .text  00000000 
20001e94 l       .text  00000000 
20001e9e l       .text  00000000 
20001ea0 l       .text  00000000 
20001eba l       .text  00000000 
20001eba l       .text  00000000 
20001ebe l       .text  00000000 
20001ebe l       .text  00000000 
20001ec0 l       .text  00000000 
20001ec4 l       .text  00000000 
20001ec4 l       .text  00000000 
20001ec8 l       .text  00000000 
20001ed2 l       .text  00000000 
20001ed4 l       .text  00000000 
20001ede l       .text  00000000 
20001ee0 l       .text  00000000 
20001efa l       .text  00000000 
20001efa l       .text  00000000 
20001efe l       .text  00000000 
20001efe l       .text  00000000 
20001f02 l       .text  00000000 
20001f06 l       .text  00000000 
20001f0a l       .text  00000000 
20001f0e l       .text  00000000 
20001f22 l       .text  00000000 
20001f22 l       .text  00000000 
20001f24 l       .text  00000000 
20001f26 l       .text  00000000 
20001f26 l       .text  00000000 
20001f38 l       .text  00000000 
20001f38 l       .text  00000000 
20001f3a l       .text  00000000 
20001f3c l       .text  00000000 
20001f3c l       .text  00000000 
20001f4e l       .text  00000000 
20001f4e l       .text  00000000 
20001f52 l       .text  00000000 
20001f60 l       .text  00000000 
20001f64 l       .text  00000000 
20001f6a l       .text  00000000 
20001f6c l       .text  00000000 
20001f6c l       .text  00000000 
20001f7e l       .text  00000000 
20001f7e l       .text  00000000 
20001f80 l       .text  00000000 
20001f82 l       .text  00000000 
20001f82 l       .text  00000000 
20001f94 l       .text  00000000 
20001f94 l       .text  00000000 
20001f96 l       .text  00000000 
20001f98 l       .text  00000000 
20001f98 l       .text  00000000 
20001faa l       .text  00000000 
20001faa l       .text  00000000 
20001fb2 l       .text  00000000 
20001fb4 l       .text  00000000 
20001fb6 l       .text  00000000 
20001fb6 l       .text  00000000 
20001fc8 l       .text  00000000 
20001fc8 l       .text  00000000 
20001fd2 l       .text  00000000 
20001fde l       .text  00000000 
20001fe2 l       .text  00000000 
20001fe6 l       .text  00000000 
20001fe6 l       .text  00000000 
20001ff0 l       .text  00000000 
20001ff4 l       .text  00000000 
20001ff4 l       .text  00000000 
20001ff8 l       .text  00000000 
20001ff8 l       .text  00000000 
20001ffa l       .text  00000000 
20002004 l       .text  00000000 
20002006 l       .text  00000000 
20002010 l       .text  00000000 
20002012 l       .text  00000000 
2000202c l       .text  00000000 
2000202c l       .text  00000000 
20002030 l       .text  00000000 
20002030 l       .text  00000000 
20002038 l       .text  00000000 
2000203a l       .text  00000000 
20002044 l       .text  00000000 
20002046 l       .text  00000000 
20002060 l       .text  00000000 
20002060 l       .text  00000000 
20002064 l       .text  00000000 
20002064 l       .text  00000000 
20002076 l       .text  00000000 
20002078 l       .text  00000000 
2000207a l       .text  00000000 
2000207a l       .text  00000000 
2000208c l       .text  00000000 
2000208c l       .text  00000000 
2000208e l       .text  00000000 
20002090 l       .text  00000000 
20002090 l       .text  00000000 
200020a2 l       .text  00000000 
200020a2 l       .text  00000000 
200020a2 l       .text  00000000 
00000300 l     O .ot.status_create_record       00000080 spi_device_testutils_configure_read_pipeline.kOtStatusRecord
00000380 l     O .ot.status_create_record       00000080 spi_device_testutils_wait_for_upload.kOtStatusRecord
00000400 l     O .ot.status_create_record       00000080 spi_device_testutils_wait_for_upload.kOtStatusRecord.5
00002076 l       .debug_loc     00000000 
0000209c l       .debug_loc     00000000 
000020c2 l       .debug_loc     00000000 
000020e9 l       .debug_loc     00000000 
00002110 l       .debug_loc     00000000 
00002141 l       .debug_loc     00000000 
00002172 l       .debug_loc     00000000 
000021a3 l       .debug_loc     00000000 
000021d4 l       .debug_loc     00000000 
000021fa l       .debug_loc     00000000 
0000222b l       .debug_loc     00000000 
0000225c l       .debug_loc     00000000 
0000228d l       .debug_loc     00000000 
000022b3 l       .debug_loc     00000000 
000022d9 l       .debug_loc     00000000 
000022ff l       .debug_loc     00000000 
00002330 l       .debug_loc     00000000 
00002361 l       .debug_loc     00000000 
00002387 l       .debug_loc     00000000 
000023c9 l       .debug_loc     00000000 
000023f0 l       .debug_loc     00000000 
00002417 l       .debug_loc     00000000 
0000243e l       .debug_loc     00000000 
00002465 l       .debug_loc     00000000 
000024a5 l       .debug_loc     00000000 
000024cb l       .debug_loc     00000000 
000024f2 l       .debug_loc     00000000 
00002519 l       .debug_loc     00000000 
00002540 l       .debug_loc     00000000 
00002567 l       .debug_loc     00000000 
000025a7 l       .debug_loc     00000000 
000025d1 l       .debug_loc     00000000 
000025f8 l       .debug_loc     00000000 
0000261f l       .debug_loc     00000000 
00002646 l       .debug_loc     00000000 
0000266d l       .debug_loc     00000000 
00002694 l       .debug_loc     00000000 
000026bb l       .debug_loc     00000000 
000026e2 l       .debug_loc     00000000 
00002709 l       .debug_loc     00000000 
00002730 l       .debug_loc     00000000 
00002757 l       .debug_loc     00000000 
0000277e l       .debug_loc     00000000 
000027a5 l       .debug_loc     00000000 
000027cc l       .debug_loc     00000000 
000027f3 l       .debug_loc     00000000 
0000281a l       .debug_loc     00000000 
00002841 l       .debug_loc     00000000 
00002868 l       .debug_loc     00000000 
0000288f l       .debug_loc     00000000 
000028b6 l       .debug_loc     00000000 
000028dd l       .debug_loc     00000000 
00002904 l       .debug_loc     00000000 
0000292b l       .debug_loc     00000000 
0000295c l       .debug_loc     00000000 
00002982 l       .debug_loc     00000000 
000029b3 l       .debug_loc     00000000 
00002a30 l       .debug_loc     00000000 
00002aad l       .debug_loc     00000000 
00002ad4 l       .debug_loc     00000000 
00002afb l       .debug_loc     00000000 
00002b21 l       .debug_loc     00000000 
00002b47 l       .debug_loc     00000000 
00002b6e l       .debug_loc     00000000 
00002b95 l       .debug_loc     00000000 
00002bbb l       .debug_loc     00000000 
00002be1 l       .debug_loc     00000000 
00002c2d l       .debug_loc     00000000 
00002cc9 l       .debug_loc     00000000 
00002ce4 l       .debug_loc     00000000 
00002d0b l       .debug_loc     00000000 
00002d32 l       .debug_loc     00000000 
00002d4d l       .debug_loc     00000000 
00002d68 l       .debug_loc     00000000 
00002d99 l       .debug_loc     00000000 
00002dca l       .debug_loc     00000000 
00002dfd l       .debug_loc     00000000 
00002e24 l       .debug_loc     00000000 
00002e4b l       .debug_loc     00000000 
00002e71 l       .debug_loc     00000000 
00002e97 l       .debug_loc     00000000 
00002ebd l       .debug_loc     00000000 
00002ed8 l       .debug_loc     00000000 
00002ef3 l       .debug_loc     00000000 
00002f24 l       .debug_loc     00000000 
00002f55 l       .debug_loc     00000000 
00002f7b l       .debug_loc     00000000 
00002fa1 l       .debug_loc     00000000 
00002fc7 l       .debug_loc     00000000 
00003028 l       .debug_loc     00000000 
0000304f l       .debug_loc     00000000 
00003076 l       .debug_loc     00000000 
0000309d l       .debug_loc     00000000 
000030c4 l       .debug_loc     00000000 
000030eb l       .debug_loc     00000000 
00003112 l       .debug_loc     00000000 
00003139 l       .debug_loc     00000000 
00003160 l       .debug_loc     00000000 
00003187 l       .debug_loc     00000000 
000031ae l       .debug_loc     00000000 
000031d5 l       .debug_loc     00000000 
000031fc l       .debug_loc     00000000 
00003223 l       .debug_loc     00000000 
00003262 l       .debug_loc     00000000 
00003289 l       .debug_loc     00000000 
000032b0 l       .debug_loc     00000000 
000032d7 l       .debug_loc     00000000 
000032fe l       .debug_loc     00000000 
00003325 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000051a8 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000668 l       .debug_ranges  00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00005e92 l       .debug_str     00000000 
00001f3c l       .debug_str     00000000 
00002692 l       .debug_str     00000000 
00005efe l       .debug_str     00000000 
00005f08 l       .debug_str     00000000 
00005f12 l       .debug_str     00000000 
00005f20 l       .debug_str     00000000 
00000530 l       .debug_ranges  00000000 
00004b8d l       .debug_str     00000000 
000087bd l       .debug_str     00000000 
00008e4c l       .debug_str     00000000 
00002326 l       .debug_str     00000000 
00002495 l       .debug_str     00000000 
00000548 l       .debug_ranges  00000000 
00001f77 l       .debug_str     00000000 
00001f5f l       .debug_str     00000000 
00001f4c l       .debug_str     00000000 
00001f56 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00005ebf l       .debug_str     00000000 
00000204 l       .debug_str     00000000 
00000291 l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
00005f2e l       .debug_str     00000000 
00005f37 l       .debug_str     00000000 
000082c1 l       .debug_str     00000000 
00000560 l       .debug_ranges  00000000 
000003c8 l       .debug_str     00000000 
00000578 l       .debug_ranges  00000000 
0000029c l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00007ebb l       .debug_str     00000000 
00000284 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000255 l       .debug_str     00000000 
0000020f l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
00004d4d l       .debug_str     00000000 
00005f3f l       .debug_str     00000000 
000024b8 l       .debug_str     00000000 
00005f44 l       .debug_str     00000000 
00005e15 l       .debug_str     00000000 
0000a197 l       .debug_str     00000000 
00000590 l       .debug_ranges  00000000 
000005a8 l       .debug_ranges  00000000 
000005c0 l       .debug_ranges  00000000 
000005d8 l       .debug_ranges  00000000 
000005f0 l       .debug_ranges  00000000 
00000608 l       .debug_ranges  00000000 
00002918 l       .debug_str     00000000 
00000620 l       .debug_ranges  00000000 
00000638 l       .debug_ranges  00000000 
00000650 l       .debug_ranges  00000000 
000051d5 l       .debug_str     00000000 
00005458 l       .debug_str     00000000 
0000543f l       .debug_str     00000000 
000051ec l       .debug_str     00000000 
0000520e l       .debug_str     00000000 
00005230 l       .debug_str     00000000 
00005252 l       .debug_str     00000000 
00005274 l       .debug_str     00000000 
00005296 l       .debug_str     00000000 
000052b8 l       .debug_str     00000000 
000052db l       .debug_str     00000000 
000052fe l       .debug_str     00000000 
00005321 l       .debug_str     00000000 
00005344 l       .debug_str     00000000 
0000536e l       .debug_str     00000000 
0000539a l       .debug_str     00000000 
000053bd l       .debug_str     00000000 
000053e0 l       .debug_str     00000000 
00005402 l       .debug_str     00000000 
00005424 l       .debug_str     00000000 
00002702 l       .debug_str     00000000 
000026c6 l       .debug_str     00000000 
000026e4 l       .debug_str     00000000 
00002796 l       .debug_str     00000000 
0000273f l       .debug_str     00000000 
00002759 l       .debug_str     00000000 
00002779 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
0000222b l       .debug_str     00000000 
0000210a l       .debug_str     00000000 
0000210e l       .debug_str     00000000 
00002119 l       .debug_str     00000000 
00002122 l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00002145 l       .debug_str     00000000 
0000214f l       .debug_str     00000000 
0000215e l       .debug_str     00000000 
00002170 l       .debug_str     00000000 
00002183 l       .debug_str     00000000 
00002197 l       .debug_str     00000000 
000021a0 l       .debug_str     00000000 
000021ac l       .debug_str     00000000 
000021bb l       .debug_str     00000000 
000021c5 l       .debug_str     00000000 
000021d2 l       .debug_str     00000000 
000021dc l       .debug_str     00000000 
000021ed l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
00002a95 l       .debug_str     00000000 
00002a08 l       .debug_str     00000000 
00002a27 l       .debug_str     00000000 
00002a41 l       .debug_str     00000000 
00002a5d l       .debug_str     00000000 
00002a79 l       .debug_str     00000000 
00002b43 l       .debug_str     00000000 
00002ab7 l       .debug_str     00000000 
00002ad2 l       .debug_str     00000000 
00002aef l       .debug_str     00000000 
00002b0a l       .debug_str     00000000 
00002b25 l       .debug_str     00000000 
00002c08 l       .debug_str     00000000 
00002b5d l       .debug_str     00000000 
00002b85 l       .debug_str     00000000 
00002bb5 l       .debug_str     00000000 
00002be5 l       .debug_str     00000000 
00002c67 l       .debug_str     00000000 
00002c2a l       .debug_str     00000000 
00002c48 l       .debug_str     00000000 
000057b2 l       .debug_str     00000000 
00005473 l       .debug_str     00000000 
0000548e l       .debug_str     00000000 
000054a8 l       .debug_str     00000000 
000054c4 l       .debug_str     00000000 
000054dc l       .debug_str     00000000 
000054f6 l       .debug_str     00000000 
00005512 l       .debug_str     00000000 
0000552c l       .debug_str     00000000 
00005546 l       .debug_str     00000000 
00005563 l       .debug_str     00000000 
00005581 l       .debug_str     00000000 
0000559e l       .debug_str     00000000 
000055bb l       .debug_str     00000000 
000055d8 l       .debug_str     00000000 
000055f6 l       .debug_str     00000000 
00005614 l       .debug_str     00000000 
00005632 l       .debug_str     00000000 
0000564d l       .debug_str     00000000 
0000566a l       .debug_str     00000000 
00005689 l       .debug_str     00000000 
000056a8 l       .debug_str     00000000 
000056c5 l       .debug_str     00000000 
000056e2 l       .debug_str     00000000 
000056fe l       .debug_str     00000000 
0000571b l       .debug_str     00000000 
00005732 l       .debug_str     00000000 
00005751 l       .debug_str     00000000 
00005772 l       .debug_str     00000000 
00005793 l       .debug_str     00000000 
000058be l       .debug_str     00000000 
000057ca l       .debug_str     00000000 
000057e7 l       .debug_str     00000000 
00005809 l       .debug_str     00000000 
0000582d l       .debug_str     00000000 
0000584d l       .debug_str     00000000 
00005865 l       .debug_str     00000000 
00005885 l       .debug_str     00000000 
000058a0 l       .debug_str     00000000 
00005919 l       .debug_str     00000000 
000058d8 l       .debug_str     00000000 
000058ed l       .debug_str     00000000 
00005902 l       .debug_str     00000000 
00005a3c l       .debug_str     00000000 
0000592d l       .debug_str     00000000 
00005953 l       .debug_str     00000000 
00005979 l       .debug_str     00000000 
0000599f l       .debug_str     00000000 
000059c0 l       .debug_str     00000000 
000059dc l       .debug_str     00000000 
000059fe l       .debug_str     00000000 
00005a1e l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
00002248 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00005e67 l       .debug_str     00000000 
00005b12 l       .debug_str     00000000 
00005ee8 l       .debug_str     00000000 
00005eef l       .debug_str     00000000 
00005aa8 l       .debug_str     00000000 
000027c4 l       .debug_str     00000000 
000050dd l       .debug_str     00000000 
00000350 l       .debug_ranges  00000000 
00000368 l       .debug_ranges  00000000 
00000380 l       .debug_ranges  00000000 
00000398 l       .debug_ranges  00000000 
000003b0 l       .debug_ranges  00000000 
00002c7a l       .debug_str     00000000 
000003c8 l       .debug_ranges  00000000 
000003e0 l       .debug_ranges  00000000 
000003f8 l       .debug_ranges  00000000 
00000410 l       .debug_ranges  00000000 
00000428 l       .debug_ranges  00000000 
00000440 l       .debug_ranges  00000000 
00000458 l       .debug_ranges  00000000 
00000470 l       .debug_ranges  00000000 
00000488 l       .debug_ranges  00000000 
000004a0 l       .debug_ranges  00000000 
000004b8 l       .debug_ranges  00000000 
000004d0 l       .debug_ranges  00000000 
000004e8 l       .debug_ranges  00000000 
00000500 l       .debug_ranges  00000000 
00000518 l       .debug_ranges  00000000 
00004bbb l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00002804 l       .debug_str     00000000 
000027ee l       .debug_str     00000000 
000069c1 l       .debug_str     00000000 
000027cf l       .debug_str     00000000 
000026ac l       .debug_str     00000000 
0000269d l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
000027d6 l       .debug_str     00000000 
000027c0 l       .debug_str     00000000 
000026bd l       .debug_str     00000000 
00002736 l       .debug_str     00000000 
0000279e l       .debug_str     00000000 
0000271b l       .debug_str     00000000 
000027aa l       .debug_str     00000000 
00004b4d l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00001fa7 l       .debug_str     00000000 
000023be l       .debug_str     00000000 
0000891b l       .debug_str     00000000 
000088fc l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
00005a4f l       .debug_str     00000000 
00005ab9 l       .debug_str     00000000 
00005a8d l       .debug_str     00000000 
00005a7f l       .debug_str     00000000 
00005a88 l       .debug_str     00000000 
0000897c l       .debug_str     00000000 
00005ae7 l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
00005b1a l       .debug_str     00000000 
00004bd4 l       .debug_str     00000000 
00004ce9 l       .debug_str     00000000 
00004ccc l       .debug_str     00000000 
000057c3 l       .debug_str     00000000 
00002aaa l       .debug_str     00000000 
00004c1e l       .debug_str     00000000 
00004c2b l       .debug_str     00000000 
00004c57 l       .debug_str     00000000 
00004c70 l       .debug_str     00000000 
00004c84 l       .debug_str     00000000 
00002c17 l       .debug_str     00000000 
00004d6b l       .debug_str     00000000 
00004cbc l       .debug_str     00000000 
00004bfa l       .debug_str     00000000 
00004c3b l       .debug_str     00000000 
00004c98 l       .debug_str     00000000 
00005b48 l       .debug_str     00000000 
00005b74 l       .debug_str     00000000 
00005ba0 l       .debug_str     00000000 
00005bcc l       .debug_str     00000000 
0000248e l       .debug_str     00000000 
00005bf8 l       .debug_str     00000000 
000002fe l       .debug_str     00000000 
000002f3 l       .debug_str     00000000 
000015af l       .debug_str     00000000 
00005c13 l       .debug_str     00000000 
00005cad l       .debug_str     00000000 
00005c99 l       .debug_str     00000000 
00005c29 l       .debug_str     00000000 
00005c4e l       .debug_str     00000000 
000058d2 l       .debug_str     00000000 
00005c33 l       .debug_str     00000000 
00005c5d l       .debug_str     00000000 
00005c7d l       .debug_str     00000000 
0000153c l       .debug_str     00000000 
00001551 l       .debug_str     00000000 
00005cc3 l       .debug_str     00000000 
00005ce1 l       .debug_str     00000000 
00005cf6 l       .debug_str     00000000 
00005d26 l       .debug_str     00000000 
00005d4c l       .debug_str     00000000 
00005d76 l       .debug_str     00000000 
00005da6 l       .debug_str     00000000 
00005dc9 l       .debug_str     00000000 
00005def l       .debug_str     00000000 
00002293 l       .debug_str     00000000 
00002284 l       .debug_str     00000000 
00005e1f l       .debug_str     00000000 
00005e48 l       .debug_str     00000000 
00002938 l       .debug_str     00000000 
0000292d l       .debug_str     00000000 
0000290c l       .debug_str     00000000 
0000805b l       .debug_str     00000000 
00002920 l       .debug_str     00000000 
00008077 l       .debug_str     00000000 
00008de7 l       .debug_str     00000000 
00000570 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_pinmux_autogen.c
200020a2 l       .text  00000000 
200020a2 l       .text  00000000 
200020a2 l       .text  00000000 
200020a2 l       .text  00000000 
200020a4 l       .text  00000000 
200020a6 l       .text  00000000 
200020aa l       .text  00000000 
200020ac l       .text  00000000 
200020ae l       .text  00000000 
200020b0 l       .text  00000000 
200020b0 l       .text  00000000 
0000334c l       .debug_loc     00000000 
00003367 l       .debug_loc     00000000 
00003382 l       .debug_loc     00000000 
0000339d l       .debug_loc     00000000 
000033b9 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005f53 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000690 l       .debug_ranges  00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00005f9c l       .debug_str     00000000 
00005f82 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00001586 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00005fad l       .debug_str     00000000 
000073ab l       .debug_str     00000000 
00001b43 l       .debug_str     00000000 
00001b4d l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
000002fe l       .debug_str     00000000 
000002f3 l       .debug_str     00000000 
00005fc4 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00000620 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_pinmux.c
200020b0 l       .text  00000000 
200020b0 l       .text  00000000 
200020b0 l       .text  00000000 
200020b0 l       .text  00000000 
200020bc l       .text  00000000 
200020cc l       .text  00000000 
200020cc l       .text  00000000 
200020ce l       .text  00000000 
200020ce l       .text  00000000 
200020d2 l       .text  00000000 
200020d6 l       .text  00000000 
200020d6 l       .text  00000000 
200020d8 l       .text  00000000 
200020d8 l       .text  00000000 
200020da l       .text  00000000 
200020da l       .text  00000000 
200020dc l       .text  00000000 
200020dc l       .text  00000000 
200020de l       .text  00000000 
200020de l       .text  00000000 
200020e2 l       .text  00000000 
200020e2 l       .text  00000000 
200020e6 l       .text  00000000 
200020e6 l       .text  00000000 
000033d5 l       .debug_loc     00000000 
000033f0 l       .debug_loc     00000000 
0000340b l       .debug_loc     00000000 
00003426 l       .debug_loc     00000000 
00003441 l       .debug_loc     00000000 
0000345c l       .debug_loc     00000000 
00003477 l       .debug_loc     00000000 
00003492 l       .debug_loc     00000000 
000034ad l       .debug_loc     00000000 
000034c8 l       .debug_loc     00000000 
000034e3 l       .debug_loc     00000000 
000034fe l       .debug_loc     00000000 
00003519 l       .debug_loc     00000000 
00003534 l       .debug_loc     00000000 
0000354f l       .debug_loc     00000000 
0000356a l       .debug_loc     00000000 
00003585 l       .debug_loc     00000000 
000035a0 l       .debug_loc     00000000 
000035bb l       .debug_loc     00000000 
000035dc l       .debug_loc     00000000 
000035f7 l       .debug_loc     00000000 
00003612 l       .debug_loc     00000000 
0000362d l       .debug_loc     00000000 
00003649 l       .debug_loc     00000000 
00003664 l       .debug_loc     00000000 
0000367f l       .debug_loc     00000000 
0000369a l       .debug_loc     00000000 
000036b5 l       .debug_loc     00000000 
000036d0 l       .debug_loc     00000000 
000036f2 l       .debug_loc     00000000 
0000370d l       .debug_loc     00000000 
00003728 l       .debug_loc     00000000 
00003743 l       .debug_loc     00000000 
0000375f l       .debug_loc     00000000 
0000377a l       .debug_loc     00000000 
000037ab l       .debug_loc     00000000 
000037dc l       .debug_loc     00000000 
00003802 l       .debug_loc     00000000 
00003833 l       .debug_loc     00000000 
000038c1 l       .debug_loc     00000000 
000038e7 l       .debug_loc     00000000 
0000390d l       .debug_loc     00000000 
00003934 l       .debug_loc     00000000 
0000394f l       .debug_loc     00000000 
0000396a l       .debug_loc     00000000 
0000398c l       .debug_loc     00000000 
000039ae l       .debug_loc     00000000 
000039c9 l       .debug_loc     00000000 
000039f0 l       .debug_loc     00000000 
00003a12 l       .debug_loc     00000000 
00003a2d l       .debug_loc     00000000 
00003a50 l       .debug_loc     00000000 
00003a72 l       .debug_loc     00000000 
00003a8d l       .debug_loc     00000000 
00003ab3 l       .debug_loc     00000000 
00003ace l       .debug_loc     00000000 
00003af0 l       .debug_loc     00000000 
00003b0b l       .debug_loc     00000000 
00003b2d l       .debug_loc     00000000 
00003bc9 l       .debug_loc     00000000 
00003be4 l       .debug_loc     00000000 
00003c0a l       .debug_loc     00000000 
00003c25 l       .debug_loc     00000000 
00003c4b l       .debug_loc     00000000 
00003c71 l       .debug_loc     00000000 
00003c97 l       .debug_loc     00000000 
00003cbd l       .debug_loc     00000000 
00003cdf l       .debug_loc     00000000 
00003d01 l       .debug_loc     00000000 
00003d1c l       .debug_loc     00000000 
00003d37 l       .debug_loc     00000000 
00003d9d l       .debug_loc     00000000 
00003db8 l       .debug_loc     00000000 
00003dda l       .debug_loc     00000000 
00003e00 l       .debug_loc     00000000 
00003e26 l       .debug_loc     00000000 
00003e41 l       .debug_loc     00000000 
00003e67 l       .debug_loc     00000000 
00003e8d l       .debug_loc     00000000 
00003eb3 l       .debug_loc     00000000 
00003ed9 l       .debug_loc     00000000 
00003eff l       .debug_loc     00000000 
00003f26 l       .debug_loc     00000000 
00003f41 l       .debug_loc     00000000 
00003f5c l       .debug_loc     00000000 
00003f83 l       .debug_loc     00000000 
00003fa5 l       .debug_loc     00000000 
00003fc7 l       .debug_loc     00000000 
00003fe2 l       .debug_loc     00000000 
00004004 l       .debug_loc     00000000 
00004026 l       .debug_loc     00000000 
00004041 l       .debug_loc     00000000 
00004067 l       .debug_loc     00000000 
0000408d l       .debug_loc     00000000 
000040a8 l       .debug_loc     00000000 
000040ce l       .debug_loc     00000000 
000040f4 l       .debug_loc     00000000 
0000411b l       .debug_loc     00000000 
00004136 l       .debug_loc     00000000 
00004151 l       .debug_loc     00000000 
00004173 l       .debug_loc     00000000 
00004195 l       .debug_loc     00000000 
000041b0 l       .debug_loc     00000000 
000041d6 l       .debug_loc     00000000 
000041f1 l       .debug_loc     00000000 
00004217 l       .debug_loc     00000000 
0000423d l       .debug_loc     00000000 
00004263 l       .debug_loc     00000000 
00004289 l       .debug_loc     00000000 
000042a4 l       .debug_loc     00000000 
000042bf l       .debug_loc     00000000 
000042da l       .debug_loc     00000000 
00004300 l       .debug_loc     00000000 
0000431b l       .debug_loc     00000000 
00004341 l       .debug_loc     00000000 
00004367 l       .debug_loc     00000000 
0000438d l       .debug_loc     00000000 
000043b3 l       .debug_loc     00000000 
000043ce l       .debug_loc     00000000 
000043e9 l       .debug_loc     00000000 
0000440f l       .debug_loc     00000000 
0000443e l       .debug_loc     00000000 
00004464 l       .debug_loc     00000000 
0000448a l       .debug_loc     00000000 
000044b0 l       .debug_loc     00000000 
000044d8 l       .debug_loc     00000000 
00004509 l       .debug_loc     00000000 
0000453a l       .debug_loc     00000000 
00004555 l       .debug_loc     00000000 
0000457d l       .debug_loc     00000000 
0000459f l       .debug_loc     00000000 
000045bb l       .debug_loc     00000000 
000045d7 l       .debug_loc     00000000 
000045f2 l       .debug_loc     00000000 
0000460d l       .debug_loc     00000000 
00004638 l       .debug_loc     00000000 
0000465a l       .debug_loc     00000000 
000046b2 l       .debug_loc     00000000 
000046cd l       .debug_loc     00000000 
000046ef l       .debug_loc     00000000 
0000470f l       .debug_loc     00000000 
0000472f l       .debug_loc     00000000 
00004756 l       .debug_loc     00000000 
00004779 l       .debug_loc     00000000 
00004794 l       .debug_loc     00000000 
000047ba l       .debug_loc     00000000 
000047d5 l       .debug_loc     00000000 
000047f0 l       .debug_loc     00000000 
0000480b l       .debug_loc     00000000 
00004827 l       .debug_loc     00000000 
00004849 l       .debug_loc     00000000 
0000486b l       .debug_loc     00000000 
00004891 l       .debug_loc     00000000 
000048ac l       .debug_loc     00000000 
000048d2 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005fd7 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000006f0 l       .debug_ranges  00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000060c6 l       .debug_str     00000000 
00005ff6 l       .debug_str     00000000 
00006010 l       .debug_str     00000000 
0000602b l       .debug_str     00000000 
00006048 l       .debug_str     00000000 
00006065 l       .debug_str     00000000 
00006084 l       .debug_str     00000000 
000060a3 l       .debug_str     00000000 
00005919 l       .debug_str     00000000 
000058d8 l       .debug_str     00000000 
000058ed l       .debug_str     00000000 
00005902 l       .debug_str     00000000 
000058be l       .debug_str     00000000 
000057ca l       .debug_str     00000000 
000057e7 l       .debug_str     00000000 
00005809 l       .debug_str     00000000 
0000582d l       .debug_str     00000000 
0000584d l       .debug_str     00000000 
00005865 l       .debug_str     00000000 
00005885 l       .debug_str     00000000 
000058a0 l       .debug_str     00000000 
000060dd l       .debug_str     00000000 
00006176 l       .debug_str     00000000 
000060fd l       .debug_str     00000000 
00006114 l       .debug_str     00000000 
0000612c l       .debug_str     00000000 
00006145 l       .debug_str     00000000 
0000615d l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
0000623f l       .debug_str     00000000 
0000618c l       .debug_str     00000000 
000061ad l       .debug_str     00000000 
000061ce l       .debug_str     00000000 
000061ea l       .debug_str     00000000 
00006208 l       .debug_str     00000000 
00006225 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00005c33 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
00005c5d l       .debug_str     00000000 
00006256 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
00006788 l       .debug_str     00000000 
00006517 l       .debug_str     00000000 
0000628e l       .debug_str     00000000 
000062e2 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
000015af l       .debug_str     00000000 
00006275 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00006384 l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
0000195e l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00006298 l       .debug_str     00000000 
00007079 l       .debug_str     00000000 
000062ad l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
000002fe l       .debug_str     00000000 
000002f3 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
00006394 l       .debug_str     00000000 
0000649a l       .debug_str     00000000 
000064ab l       .debug_str     00000000 
00000372 l       .debug_str     00000000 
00001596 l       .debug_str     00000000 
000064b1 l       .debug_str     00000000 
0000151a l       .debug_str     00000000 
000062b7 l       .debug_str     00000000 
00005928 l       .debug_str     00000000 
000062d1 l       .debug_str     00000000 
000062de l       .debug_str     00000000 
000062eb l       .debug_str     00000000 
00005c13 l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
000019e0 l       .debug_str     00000000 
000062f4 l       .debug_str     00000000 
0000630a l       .debug_str     00000000 
00005ede l       .debug_str     00000000 
00005cad l       .debug_str     00000000 
00005c99 l       .debug_str     00000000 
00005c29 l       .debug_str     00000000 
00005c4e l       .debug_str     00000000 
000058d2 l       .debug_str     00000000 
00005c7d l       .debug_str     00000000 
00005bf8 l       .debug_str     00000000 
000064c0 l       .debug_str     00000000 
00006550 l       .debug_str     00000000 
000064ce l       .debug_str     00000000 
000064c4 l       .debug_str     00000000 
000060d1 l       .debug_str     00000000 
000064d7 l       .debug_str     00000000 
000064e2 l       .debug_str     00000000 
000064ed l       .debug_str     00000000 
00001615 l       .debug_str     00000000 
000063ac l       .debug_str     00000000 
00005ee2 l       .debug_str     00000000 
000063c5 l       .debug_str     00000000 
00005f0d l       .debug_str     00000000 
00006512 l       .debug_str     00000000 
00006522 l       .debug_str     00000000 
000063e1 l       .debug_str     00000000 
00006325 l       .debug_str     00000000 
00001be8 l       .debug_str     00000000 
000063fe l       .debug_str     00000000 
00006530 l       .debug_str     00000000 
000006a8 l       .debug_ranges  00000000 
0000641d l       .debug_str     00000000 
000006c0 l       .debug_ranges  00000000 
00006345 l       .debug_str     00000000 
00006368 l       .debug_str     00000000 
00006371 l       .debug_str     00000000 
000087be l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
0000643e l       .debug_str     00000000 
000027cf l       .debug_str     00000000 
000065bf l       .debug_str     00000000 
000065c9 l       .debug_str     00000000 
000065d8 l       .debug_str     00000000 
000065e9 l       .debug_str     00000000 
000006d8 l       .debug_ranges  00000000 
00006460 l       .debug_str     00000000 
0000647e l       .debug_str     00000000 
000065fa l       .debug_str     00000000 
000064fa l       .debug_str     00000000 
000065a4 l       .debug_str     00000000 
0000658b l       .debug_str     00000000 
0000653e l       .debug_str     00000000 
0000654c l       .debug_str     00000000 
00006555 l       .debug_str     00000000 
00006579 l       .debug_str     00000000 
00006560 l       .debug_str     00000000 
00000654 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.c
200020e6 l       .text  00000000 
200020e6 l       .text  00000000 
200020e6 l       .text  00000000 
200020e8 l       .text  00000000 
20002100 l       .text  00000000 
20002102 l       .text  00000000 
20002104 l       .text  00000000 
20002106 l       .text  00000000 
20002106 l       .text  00000000 
20002108 l       .text  00000000 
2000210a l       .text  00000000 
2000210a l       .text  00000000 
2000210c l       .text  00000000 
2000210e l       .text  00000000 
2000210e l       .text  00000000 
20002112 l       .text  00000000 
20002112 l       .text  00000000 
20002120 l       .text  00000000 
20002120 l       .text  00000000 
20005d34 l     O .rodata        00000078 exc_frame
2000213e l       .text  00000000 
2000213e l       .text  00000000 
20002144 l       .text  00000000 
2000214a l       .text  00000000 
2000214a l       .text  00000000 
2000214e l       .text  00000000 
2000214e l       .text  00000000 
20002150 l       .text  00000000 
20002156 l       .text  00000000 
20002156 l       .text  00000000 
20002158 l       .text  00000000 
2000215c l       .text  00000000 
20002160 l       .text  00000000 
20002160 l       .text  00000000 
20002164 l       .text  00000000 
20002164 l       .text  00000000 
20002170 l       .text  00000000 
20002170 l       .text  00000000 
2000217c l       .text  00000000 
2000217c l       .text  00000000 
2000218c l       .text  00000000 
20002190 l       .text  00000000 
200021a8 l       .text  00000000 
200021a8 l       .text  00000000 
200021b0 l       .text  00000000 
200021b0 l       .text  00000000 
200021b4 l       .text  00000000 
200021b4 l       .text  00000000 
200021c0 l       .text  00000000 
200021c4 l       .text  00000000 
200021ca l       .text  00000000 
200021ca l       .text  00000000 
200021d2 l       .text  00000000 
200021d8 l       .text  00000000 
200021da l       .text  00000000 
200021dc l       .text  00000000 
200021dc l       .text  00000000 
200021e4 l       .text  00000000 
200021e6 l       .text  00000000 
0000043c l     O .logs.fields   00000014 ottf_generic_fault_print.kLogFields
20002206 l       .text  00000000 
20002208 l       .text  00000000 
2000220a l       .text  00000000 
2000220c l       .text  00000000 
20002216 l       .text  00000000 
2000221a l       .text  00000000 
20005dac l     O .rodata        00000014 ottf_generic_fault_print.log_fields
2000221a l       .text  00000000 
20002232 l       .text  00000000 
20002234 l       .text  00000000 
20002236 l       .text  00000000 
20002238 l       .text  00000000 
20002242 l       .text  00000000 
20002246 l       .text  00000000 
20002246 l       .text  00000000 
20002246 l       .text  00000000 
20002246 l       .text  00000000 
20002246 l       .text  00000000 
20002246 l       .text  00000000 
20002248 l       .text  00000000 
2000224c l       .text  00000000 
2000224e l       .text  00000000 
2000224e l       .text  00000000 
20002250 l       .text  00000000 
20002250 l       .text  00000000 
20002252 l       .text  00000000 
20002252 l       .text  00000000 
20002254 l       .text  00000000 
20002258 l       .text  00000000 
2000226e l       .text  00000000 
20002272 l       .text  00000000 
20002272 l       .text  00000000 
20002278 l       .text  00000000 
20002278 l       .text  00000000 
2000227c l       .text  00000000 
2000227c l       .text  00000000 
20002282 l       .text  00000000 
20002282 l       .text  00000000 
20002286 l       .text  00000000 
20002286 l       .text  00000000 
2000228c l       .text  00000000 
2000228c l       .text  00000000 
20002290 l       .text  00000000 
20002290 l       .text  00000000 
20002296 l       .text  00000000 
20002296 l       .text  00000000 
2000229a l       .text  00000000 
2000229a l       .text  00000000 
200022a0 l       .text  00000000 
200022a0 l       .text  00000000 
200022a4 l       .text  00000000 
200022a4 l       .text  00000000 
200022aa l       .text  00000000 
200022aa l       .text  00000000 
200022b0 l       .text  00000000 
200022b0 l       .text  00000000 
200022b4 l     F .text  00000022 generic_fault_handler
200022b4 l       .text  00000000 
200022b4 l       .text  00000000 
200022b4 l       .text  00000000 
200022b4 l       .text  00000000 
200022b4 l       .text  00000000 
200022b4 l       .text  00000000 
200022b6 l       .text  00000000 
200022ba l       .text  00000000 
200022bc l       .text  00000000 
200022bc l       .text  00000000 
200022be l       .text  00000000 
200022c0 l       .text  00000000 
200022c0 l       .text  00000000 
20005de8 l     O .rodata        00000080 exception_reason
200022c2 l       .text  00000000 
200022d0 l       .text  00000000 
200022d2 l       .text  00000000 
200022d4 l       .text  00000000 
200022d4 l       .text  00000000 
200022d6 l       .text  00000000 
200022d6 l       .text  00000000 
200022d6 l       .text  00000000 
200022d6 l       .text  00000000 
200022d6 l       .text  00000000 
200022d6 l       .text  00000000 
200022d8 l       .text  00000000 
200022dc l       .text  00000000 
200022de l       .text  00000000 
200022de l       .text  00000000 
200022e0 l       .text  00000000 
200022e2 l       .text  00000000 
200022ec l       .text  00000000 
200022ee l       .text  00000000 
200022ee l       .text  00000000 
200022f0 l       .text  00000000 
200022f0 l       .text  00000000 
200022f0 l       .text  00000000 
200022f0 l       .text  00000000 
200022f0 l       .text  00000000 
200022f0 l       .text  00000000 
200022f2 l       .text  00000000 
200022f6 l       .text  00000000 
200022f8 l       .text  00000000 
200022f8 l       .text  00000000 
200022fa l       .text  00000000 
200022fc l       .text  00000000 
20002306 l       .text  00000000 
20002308 l       .text  00000000 
20002308 l       .text  00000000 
2000230a l       .text  00000000 
2000230a l       .text  00000000 
2000230a l       .text  00000000 
2000230a l       .text  00000000 
2000230a l       .text  00000000 
2000230a l       .text  00000000 
2000230c l       .text  00000000 
20002312 l       .text  00000000 
20002314 l       .text  00000000 
20002314 l       .text  00000000 
20002322 l       .text  00000000 
20002322 l       .text  00000000 
20002326 l       .text  00000000 
2000232a l       .text  00000000 
2000232a l       .text  00000000 
2000232e l       .text  00000000 
20002330 l       .text  00000000 
00000450 l     O .logs.fields   00000014 ottf_external_isr.kLogFields
20002342 l       .text  00000000 
20002342 l       .text  00000000 
20002344 l       .text  00000000 
20005dc0 l     O .rodata        00000014 ottf_external_isr.log_fields
20002344 l       .text  00000000 
20002350 l       .text  00000000 
20002350 l       .text  00000000 
20002356 l       .text  00000000 
20002358 l       .text  00000000 
20002358 l       .text  00000000 
2000235a l       .text  00000000 
2000235a l       .text  00000000 
20002366 l       .text  00000000 
20002368 l       .text  00000000 
20002368 l       .text  00000000 
2000236a l       .text  00000000 
2000236e l       .text  00000000 
20002370 l       .text  00000000 
20002374 l       .text  00000000 
20002374 l       .text  00000000 
20002376 l       .text  00000000 
20002376 l       .text  00000000 
20002378 l       .text  00000000 
20002384 l       .text  00000000 
20002388 l       .text  00000000 
20002388 l       .text  00000000 
2000238c l       .text  00000000 
2000238e l       .text  00000000 
00000464 l     O .logs.fields   00000014 ottf_external_isr.kLogFields.10
200023a0 l       .text  00000000 
200023a0 l       .text  00000000 
200023a2 l       .text  00000000 
20005dd4 l     O .rodata        00000014 ottf_external_isr.log_fields.12
200023a2 l       .text  00000000 
200023ae l       .text  00000000 
200023ae l       .text  00000000 
200023b4 l       .text  00000000 
200023b6 l       .text  00000000 
200023b6 l       .text  00000000 
200023ba l       .text  00000000 
200023bc l       .text  00000000 
200023c0 l       .text  00000000 
200023c0 l       .text  00000000 
200023c2 l       .text  00000000 
200023c4 l       .text  00000000 
200023d2 l       .text  00000000 
200023d2 l       .text  00000000 
200023d4 l       .text  00000000 
200023d4 l       .text  00000000 
200023d4 l       .text  00000000 
200023d4 l     F .text  0000001c generic_internal_irq_handler
200023d4 l       .text  00000000 
200023d4 l       .text  00000000 
200023d4 l       .text  00000000 
200023d6 l       .text  00000000 
200023da l       .text  00000000 
200023dc l       .text  00000000 
200023dc l       .text  00000000 
200023de l       .text  00000000 
200023e0 l       .text  00000000 
200023ea l       .text  00000000 
200023ee l       .text  00000000 
200023ee l       .text  00000000 
200023f0 l       .text  00000000 
200023f0 l       .text  00000000 
200023f0 l       .text  00000000 
200023f0 l       .text  00000000 
200023f0 l       .text  00000000 
200023f0 l       .text  00000000 
200023f2 l       .text  00000000 
200023f6 l       .text  00000000 
200023f8 l       .text  00000000 
200023f8 l       .text  00000000 
200023fa l       .text  00000000 
200023fa l       .text  00000000 
20002400 l       .text  00000000 
20002400 l       .text  00000000 
20002404 l       .text  00000000 
20002406 l       .text  00000000 
2000240a l       .text  00000000 
2000240c l       .text  00000000 
20002410 l       .text  00000000 
20002410 l       .text  00000000 
20002414 l       .text  00000000 
20002414 l       .text  00000000 
20002416 l       .text  00000000 
2000241a l       .text  00000000 
2000241a l       .text  00000000 
2000241e l       .text  00000000 
2000241e l       .text  00000000 
20002420 l       .text  00000000 
20002422 l       .text  00000000 
20002430 l       .text  00000000 
20002430 l       .text  00000000 
20002432 l       .text  00000000 
20002432 l       .text  00000000 
20002432 l       .text  00000000 
000048ed l       .debug_loc     00000000 
00004913 l       .debug_loc     00000000 
00004944 l       .debug_loc     00000000 
00004975 l       .debug_loc     00000000 
0000499b l       .debug_loc     00000000 
000049c1 l       .debug_loc     00000000 
000049dc l       .debug_loc     00000000 
00004a0f l       .debug_loc     00000000 
00004a30 l       .debug_loc     00000000 
00004a51 l       .debug_loc     00000000 
00004a6c l       .debug_loc     00000000 
00004adf l       .debug_loc     00000000 
00004afa l       .debug_loc     00000000 
00004b2b l       .debug_loc     00000000 
00004b46 l       .debug_loc     00000000 
00004b77 l       .debug_loc     00000000 
00004ba8 l       .debug_loc     00000000 
00004bc3 l       .debug_loc     00000000 
00004bf4 l       .debug_loc     00000000 
00004c26 l       .debug_loc     00000000 
00004c57 l       .debug_loc     00000000 
00004c72 l       .debug_loc     00000000 
00004ca3 l       .debug_loc     00000000 
00004cd4 l       .debug_loc     00000000 
00004d10 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006607 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000790 l       .debug_ranges  00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00006ceb l       .debug_str     00000000 
00000204 l       .debug_str     00000000 
00000291 l       .debug_str     00000000 
0000666a l       .debug_str     00000000 
000024b4 l       .debug_str     00000000 
00006663 l       .debug_str     00000000 
00006d76 l       .debug_str     00000000 
00006d7d l       .debug_str     00000000 
00006d82 l       .debug_str     00000000 
00006d88 l       .debug_str     00000000 
00006d8b l       .debug_str     00000000 
00006d93 l       .debug_str     00000000 
00006d9d l       .debug_str     00000000 
00006da8 l       .debug_str     00000000 
000003c8 l       .debug_str     00000000 
00000276 l       .debug_str     00000000 
000087be l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00007ebb l       .debug_str     00000000 
00000284 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000255 l       .debug_str     00000000 
0000020f l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00006638 l       .debug_str     00000000 
00006d52 l       .debug_str     00000000 
00004a4b l       .debug_str     00000000 
00002ce1 l       .debug_str     00000000 
00006bda l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
00006645 l       .debug_str     00000000 
00004e1a l       .debug_str     00000000 
00004e0e l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
0000664f l       .debug_str     00000000 
00006659 l       .debug_str     00000000 
00006736 l       .debug_str     00000000 
00006674 l       .debug_str     00000000 
0000668c l       .debug_str     00000000 
000066a5 l       .debug_str     00000000 
000066bf l       .debug_str     00000000 
000066d2 l       .debug_str     00000000 
000066ea l       .debug_str     00000000 
00006703 l       .debug_str     00000000 
00006715 l       .debug_str     00000000 
0000672a l       .debug_str     00000000 
00006776 l       .debug_str     00000000 
0000673f l       .debug_str     00000000 
0000675b l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000023d3 l       .debug_str     00000000 
00000379 l       .debug_str     00000000 
0000038e l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b9 l       .debug_str     00000000 
000003ca l       .debug_str     00000000 
000003dc l       .debug_str     00000000 
00006bc8 l       .debug_str     00000000 
0000678f l       .debug_str     00000000 
000067b1 l       .debug_str     00000000 
000067d1 l       .debug_str     00000000 
000067f1 l       .debug_str     00000000 
00006811 l       .debug_str     00000000 
00006831 l       .debug_str     00000000 
00006850 l       .debug_str     00000000 
00006874 l       .debug_str     00000000 
00006893 l       .debug_str     00000000 
000068b2 l       .debug_str     00000000 
000068d1 l       .debug_str     00000000 
000068f3 l       .debug_str     00000000 
00006915 l       .debug_str     00000000 
00006937 l       .debug_str     00000000 
0000695e l       .debug_str     00000000 
00006981 l       .debug_str     00000000 
000069a4 l       .debug_str     00000000 
000069c5 l       .debug_str     00000000 
000069e9 l       .debug_str     00000000 
00006a11 l       .debug_str     00000000 
00006a36 l       .debug_str     00000000 
00006a5c l       .debug_str     00000000 
00006a84 l       .debug_str     00000000 
00006aa8 l       .debug_str     00000000 
00006ac7 l       .debug_str     00000000 
00006ae6 l       .debug_str     00000000 
00006b05 l       .debug_str     00000000 
00006b26 l       .debug_str     00000000 
00006b46 l       .debug_str     00000000 
00006b6b l       .debug_str     00000000 
00006b8a l       .debug_str     00000000 
00006ba9 l       .debug_str     00000000 
00006c13 l       .debug_str     00000000 
00006be5 l       .debug_str     00000000 
00006bff l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
00006c25 l       .debug_str     00000000 
00006c30 l       .debug_str     00000000 
00006c4f l       .debug_str     00000000 
00006c63 l       .debug_str     00000000 
00006c72 l       .debug_str     00000000 
00006c82 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
0000153c l       .debug_str     00000000 
00001551 l       .debug_str     00000000 
00006d04 l       .debug_str     00000000 
00006c8e l       .debug_str     00000000 
00006d1b l       .debug_str     00000000 
00002552 l       .debug_str     00000000 
00006d31 l       .debug_str     00000000 
00006d43 l       .debug_str     00000000 
00005045 l       .debug_str     00000000 
00006c9f l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00004ed2 l       .debug_str     00000000 
00004e9c l       .debug_str     00000000 
00001568 l       .debug_str     00000000 
00001578 l       .debug_str     00000000 
00006cb5 l       .debug_str     00000000 
00006cce l       .debug_str     00000000 
00006d64 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00001fa7 l       .debug_str     00000000 
00000778 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_rstmgr_autogen.c
20002432 l       .text  00000000 
20002432 l       .text  00000000 
20002432 l       .text  00000000 
20002432 l       .text  00000000 
20002434 l       .text  00000000 
20002436 l       .text  00000000 
2000243a l       .text  00000000 
2000243c l       .text  00000000 
2000243e l       .text  00000000 
20002440 l       .text  00000000 
20002440 l       .text  00000000 
00004d41 l       .debug_loc     00000000 
00004d5c l       .debug_loc     00000000 
00004d77 l       .debug_loc     00000000 
00004d92 l       .debug_loc     00000000 
00004dad l       .debug_loc     00000000 
00004ddc l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006db1 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000007e0 l       .debug_ranges  00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00006e19 l       .debug_str     00000000 
00006de0 l       .debug_str     00000000 
00006dfa l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
0000232a l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
0000233e l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
000019e0 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00006e2a l       .debug_str     00000000 
000073ab l       .debug_str     00000000 
00001b43 l       .debug_str     00000000 
00001b4d l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00002345 l       .debug_str     00000000 
0000233a l       .debug_str     00000000 
00006e41 l       .debug_str     00000000 
00000874 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_rstmgr.c
20002440 l       .text  00000000 
20002440 l       .text  00000000 
20002440 l       .text  00000000 
20002440 l       .text  00000000 
20002442 l       .text  00000000 
20002444 l       .text  00000000 
20002444 l       .text  00000000 
20002446 l       .text  00000000 
20002448 l       .text  00000000 
20002448 l       .text  00000000 
2000244a l       .text  00000000 
2000244a l       .text  00000000 
2000244c l       .text  00000000 
2000244c l       .text  00000000 
2000244e l       .text  00000000 
2000244e l       .text  00000000 
20002450 l       .text  00000000 
20002450 l       .text  00000000 
00004df7 l       .debug_loc     00000000 
00004e1d l       .debug_loc     00000000 
00004e38 l       .debug_loc     00000000 
00004e7d l       .debug_loc     00000000 
00004e98 l       .debug_loc     00000000 
00004eb3 l       .debug_loc     00000000 
00004ece l       .debug_loc     00000000 
00004ee9 l       .debug_loc     00000000 
00004f04 l       .debug_loc     00000000 
00004f1f l       .debug_loc     00000000 
00004f3a l       .debug_loc     00000000 
00004f55 l       .debug_loc     00000000 
00004f70 l       .debug_loc     00000000 
00004f8b l       .debug_loc     00000000 
00004fb1 l       .debug_loc     00000000 
00004fcc l       .debug_loc     00000000 
00004ff2 l       .debug_loc     00000000 
00005018 l       .debug_loc     00000000 
00005033 l       .debug_loc     00000000 
0000504e l       .debug_loc     00000000 
00005069 l       .debug_loc     00000000 
00005084 l       .debug_loc     00000000 
0000509f l       .debug_loc     00000000 
000050ba l       .debug_loc     00000000 
000050d5 l       .debug_loc     00000000 
000050f0 l       .debug_loc     00000000 
0000510b l       .debug_loc     00000000 
00005126 l       .debug_loc     00000000 
0000514c l       .debug_loc     00000000 
00005167 l       .debug_loc     00000000 
00005182 l       .debug_loc     00000000 
0000519d l       .debug_loc     00000000 
000051b8 l       .debug_loc     00000000 
000051fd l       .debug_loc     00000000 
00005218 l       .debug_loc     00000000 
0000523a l       .debug_loc     00000000 
00005260 l       .debug_loc     00000000 
00005286 l       .debug_loc     00000000 
000052ac l       .debug_loc     00000000 
000052c7 l       .debug_loc     00000000 
000052e2 l       .debug_loc     00000000 
000052fd l       .debug_loc     00000000 
00005318 l       .debug_loc     00000000 
00005333 l       .debug_loc     00000000 
0000534e l       .debug_loc     00000000 
00005369 l       .debug_loc     00000000 
00005384 l       .debug_loc     00000000 
0000539f l       .debug_loc     00000000 
000053ba l       .debug_loc     00000000 
000053e0 l       .debug_loc     00000000 
000053fb l       .debug_loc     00000000 
00005416 l       .debug_loc     00000000 
00005431 l       .debug_loc     00000000 
0000544c l       .debug_loc     00000000 
00005491 l       .debug_loc     00000000 
000054ac l       .debug_loc     00000000 
000054ce l       .debug_loc     00000000 
000054f4 l       .debug_loc     00000000 
0000551a l       .debug_loc     00000000 
00005535 l       .debug_loc     00000000 
0000555b l       .debug_loc     00000000 
0000557c l       .debug_loc     00000000 
00005597 l       .debug_loc     00000000 
000055b2 l       .debug_loc     00000000 
000055cd l       .debug_loc     00000000 
000055e8 l       .debug_loc     00000000 
0000560e l       .debug_loc     00000000 
00005629 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00006e54 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000007f8 l       .debug_ranges  00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
00006ec6 l       .debug_str     00000000 
00006e73 l       .debug_str     00000000 
00006e8b l       .debug_str     00000000 
00006ea7 l       .debug_str     00000000 
00007024 l       .debug_str     00000000 
00006ee0 l       .debug_str     00000000 
00006ef3 l       .debug_str     00000000 
00006f07 l       .debug_str     00000000 
00006f1a l       .debug_str     00000000 
00006f2e l       .debug_str     00000000 
00006f42 l       .debug_str     00000000 
00006f57 l       .debug_str     00000000 
00006f6b l       .debug_str     00000000 
00006f80 l       .debug_str     00000000 
00006f94 l       .debug_str     00000000 
00006fa9 l       .debug_str     00000000 
00006fbd l       .debug_str     00000000 
00006fd2 l       .debug_str     00000000 
00006fe6 l       .debug_str     00000000 
00006ffb l       .debug_str     00000000 
0000700f l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00002356 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000070b4 l       .debug_str     00000000 
000027fd l       .debug_str     00000000 
000003c8 l       .debug_str     00000000 
000070c5 l       .debug_str     00000000 
00006bda l       .debug_str     00000000 
0000195e l       .debug_str     00000000 
00007033 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00007053 l       .debug_str     00000000 
000070db l       .debug_str     00000000 
00007079 l       .debug_str     00000000 
000070f6 l       .debug_str     00000000 
000024b8 l       .debug_str     00000000 
00002352 l       .debug_str     00000000 
0000706b l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00007110 l       .debug_str     00000000 
000084a7 l       .debug_str     00000000 
00001bd9 l       .debug_str     00000000 
00007132 l       .debug_str     00000000 
00008e86 l       .debug_str     00000000 
00007154 l       .debug_str     00000000 
00008f54 l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
00007173 l       .debug_str     00000000 
00008270 l       .debug_str     00000000 
000072bb l       .debug_str     00000000 
000072c5 l       .debug_str     00000000 
000072d3 l       .debug_str     00000000 
000072e4 l       .debug_str     00000000 
00007083 l       .debug_str     00000000 
00007193 l       .debug_str     00000000 
000071b3 l       .debug_str     00000000 
000071d3 l       .debug_str     00000000 
000071f0 l       .debug_str     00000000 
00007099 l       .debug_str     00000000 
000070af l       .debug_str     00000000 
000074be l       .debug_str     00000000 
0000720e l       .debug_str     00000000 
0000732f l       .debug_str     00000000 
00007230 l       .debug_str     00000000 
00007251 l       .debug_str     00000000 
0000233e l       .debug_str     00000000 
000083a2 l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00002345 l       .debug_str     00000000 
0000233a l       .debug_str     00000000 
00007275 l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00007296 l       .debug_str     00000000 
000072f0 l       .debug_str     00000000 
00007313 l       .debug_str     00000000 
00007338 l       .debug_str     00000000 
000008a8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic_autogen.c
20002450 l       .text  00000000 
20002450 l       .text  00000000 
20002450 l       .text  00000000 
20002450 l       .text  00000000 
20002452 l       .text  00000000 
20002454 l       .text  00000000 
20002458 l       .text  00000000 
2000245a l       .text  00000000 
2000245c l       .text  00000000 
2000245e l       .text  00000000 
2000245e l       .text  00000000 
00005644 l       .debug_loc     00000000 
0000565f l       .debug_loc     00000000 
0000567a l       .debug_loc     00000000 
00005695 l       .debug_loc     00000000 
000056b1 l       .debug_loc     00000000 
000056cd l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00007355 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000888 l       .debug_ranges  00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000739f l       .debug_str     00000000 
00007385 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00004dfd l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
00004e12 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000073b1 l       .debug_str     00000000 
000073ab l       .debug_str     00000000 
00001b43 l       .debug_str     00000000 
00001b4d l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00004e1a l       .debug_str     00000000 
00004e0e l       .debug_str     00000000 
000073c9 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
000009cc l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic.c
2000245e l       .text  00000000 
2000245e l       .text  00000000 
2000245e l       .text  00000000 
2000245e l       .text  00000000 
2000246e l       .text  00000000 
2000246e l       .text  00000000 
20002480 l       .text  00000000 
20002482 l       .text  00000000 
20002482 l       .text  00000000 
2000248a l       .text  00000000 
2000248a l       .text  00000000 
2000248e l       .text  00000000 
20002490 l       .text  00000000 
20002490 l       .text  00000000 
20002492 l       .text  00000000 
20002492 l       .text  00000000 
20002496 l       .text  00000000 
20002496 l       .text  00000000 
2000249a l       .text  00000000 
2000249a l       .text  00000000 
2000249e l       .text  00000000 
2000249e l       .text  00000000 
200024a0 l       .text  00000000 
200024a0 l       .text  00000000 
200024a2 l       .text  00000000 
200024a2 l       .text  00000000 
200024a6 l       .text  00000000 
200024a6 l       .text  00000000 
200024a6 l       .text  00000000 
200024a6 l       .text  00000000 
200024a6 l       .text  00000000 
200024a6 l       .text  00000000 
200024b2 l       .text  00000000 
200024c2 l       .text  00000000 
200024c2 l       .text  00000000 
200024c4 l       .text  00000000 
200024c4 l       .text  00000000 
200024c6 l       .text  00000000 
200024c6 l       .text  00000000 
200024ca l       .text  00000000 
200024ca l       .text  00000000 
200024cc l       .text  00000000 
200024cc l       .text  00000000 
200024d0 l       .text  00000000 
200024d0 l       .text  00000000 
200024d0 l       .text  00000000 
200024d0 l       .text  00000000 
200024d0 l       .text  00000000 
200024d0 l       .text  00000000 
200024d8 l       .text  00000000 
200024d8 l       .text  00000000 
200024e8 l       .text  00000000 
200024e8 l       .text  00000000 
200024ea l       .text  00000000 
200024ea l       .text  00000000 
200024ec l       .text  00000000 
200024ec l       .text  00000000 
200024f2 l       .text  00000000 
200024f2 l       .text  00000000 
200024f4 l       .text  00000000 
200024f4 l       .text  00000000 
200024f8 l       .text  00000000 
200024f8 l       .text  00000000 
200024f8 l       .text  00000000 
200024f8 l       .text  00000000 
200024f8 l       .text  00000000 
200024f8 l       .text  00000000 
20002500 l       .text  00000000 
20002500 l       .text  00000000 
2000250c l       .text  00000000 
2000250c l       .text  00000000 
2000250e l       .text  00000000 
2000250e l       .text  00000000 
20002514 l       .text  00000000 
20002518 l       .text  00000000 
20002518 l       .text  00000000 
2000251a l       .text  00000000 
2000251a l       .text  00000000 
2000251e l       .text  00000000 
2000251e l       .text  00000000 
2000251e l       .text  00000000 
2000251e l       .text  00000000 
2000251e l       .text  00000000 
2000251e l       .text  00000000 
20002526 l       .text  00000000 
20002526 l       .text  00000000 
2000252c l       .text  00000000 
2000252c l       .text  00000000 
2000252e l       .text  00000000 
2000252e l       .text  00000000 
20002530 l       .text  00000000 
20002530 l       .text  00000000 
20002536 l       .text  00000000 
20002536 l       .text  00000000 
20002538 l       .text  00000000 
20002538 l       .text  00000000 
2000253c l       .text  00000000 
2000253c l       .text  00000000 
000056e8 l       .debug_loc     00000000 
0000570e l       .debug_loc     00000000 
00005741 l       .debug_loc     00000000 
00005760 l       .debug_loc     00000000 
0000577f l       .debug_loc     00000000 
0000579a l       .debug_loc     00000000 
000057d3 l       .debug_loc     00000000 
000057ee l       .debug_loc     00000000 
0000581e l       .debug_loc     00000000 
00005839 l       .debug_loc     00000000 
00005854 l       .debug_loc     00000000 
0000586f l       .debug_loc     00000000 
0000588a l       .debug_loc     00000000 
000058a5 l       .debug_loc     00000000 
000058c0 l       .debug_loc     00000000 
000058db l       .debug_loc     00000000 
000058f6 l       .debug_loc     00000000 
00005911 l       .debug_loc     00000000 
0000592c l       .debug_loc     00000000 
0000594a l       .debug_loc     00000000 
00005970 l       .debug_loc     00000000 
0000598f l       .debug_loc     00000000 
000059b5 l       .debug_loc     00000000 
000059d0 l       .debug_loc     00000000 
000059eb l       .debug_loc     00000000 
00005a0a l       .debug_loc     00000000 
00005a25 l       .debug_loc     00000000 
00005a40 l       .debug_loc     00000000 
00005a5b l       .debug_loc     00000000 
00005a7b l       .debug_loc     00000000 
00005a96 l       .debug_loc     00000000 
00005ab1 l       .debug_loc     00000000 
00005acc l       .debug_loc     00000000 
00005ae9 l       .debug_loc     00000000 
00005b04 l       .debug_loc     00000000 
00005b1f l       .debug_loc     00000000 
00005b3a l       .debug_loc     00000000 
00005b55 l       .debug_loc     00000000 
00005b75 l       .debug_loc     00000000 
00005b90 l       .debug_loc     00000000 
00005bab l       .debug_loc     00000000 
00005bc6 l       .debug_loc     00000000 
00005be6 l       .debug_loc     00000000 
00005c01 l       .debug_loc     00000000 
00005c1c l       .debug_loc     00000000 
00005c37 l       .debug_loc     00000000 
00005c57 l       .debug_loc     00000000 
00005c72 l       .debug_loc     00000000 
00005c8d l       .debug_loc     00000000 
00005ca8 l       .debug_loc     00000000 
00005cc8 l       .debug_loc     00000000 
00005ce3 l       .debug_loc     00000000 
00005cfe l       .debug_loc     00000000 
00005d19 l       .debug_loc     00000000 
00005d39 l       .debug_loc     00000000 
00005d54 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000073dd l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000008e8 l       .debug_ranges  00000000 
000073fd l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00007413 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000074b2 l       .debug_str     00000000 
0000664a l       .debug_str     00000000 
000003c8 l       .debug_str     00000000 
000008a0 l       .debug_ranges  00000000 
000008b8 l       .debug_ranges  00000000 
00006788 l       .debug_str     00000000 
00007563 l       .debug_str     00000000 
00007429 l       .debug_str     00000000 
00005a4b l       .debug_str     00000000 
00007450 l       .debug_str     00000000 
00007442 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00004e9c l       .debug_str     00000000 
00004ed2 l       .debug_str     00000000 
0000195e l       .debug_str     00000000 
000074c4 l       .debug_str     00000000 
000084a7 l       .debug_str     00000000 
00008e86 l       .debug_str     00000000 
00007447 l       .debug_str     00000000 
00001bd6 l       .debug_str     00000000 
00007460 l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
000019e0 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00004ee7 l       .debug_str     00000000 
00007573 l       .debug_str     00000000 
000008d0 l       .debug_ranges  00000000 
00004e7f l       .debug_str     00000000 
00002316 l       .debug_str     00000000 
00004eb1 l       .debug_str     00000000 
00008a70 l       .debug_str     00000000 
00007578 l       .debug_str     00000000 
00007473 l       .debug_str     00000000 
00007489 l       .debug_str     00000000 
00007498 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
000074e0 l       .debug_str     00000000 
000074f0 l       .debug_str     00000000 
00006c9f l       .debug_str     00000000 
00007589 l       .debug_str     00000000 
00007594 l       .debug_str     00000000 
00006cb5 l       .debug_str     00000000 
000075a7 l       .debug_str     00000000 
000074fb l       .debug_str     00000000 
000075b5 l       .debug_str     00000000 
0000751a l       .debug_str     00000000 
0000753f l       .debug_str     00000000 
00001d5d l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00004e1a l       .debug_str     00000000 
00004e0e l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
00000a00 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 rand_testutils.c
2000253c l       .text  00000000 
2000253c l       .text  00000000 
2000253c l       .text  00000000 
2000253e l       .text  00000000 
2000253e l       .text  00000000 
2000253e l       .text  00000000 
20002546 l       .text  00000000 
20002550 l       .text  00000000 
20002550 l       .text  00000000 
20002552 l       .text  00000000 
20002564 l       .text  00000000 
20002564 l       .text  00000000 
2000256c l       .text  00000000 
20002570 l       .text  00000000 
20002570 l       .text  00000000 
20002572 l       .text  00000000 
20002576 l       .text  00000000 
2000257a l       .text  00000000 
2000257c l       .text  00000000 
00000478 l     O .logs.fields   00000014 rand_testutils_init.kLogFields
2000258e l       .text  00000000 
2000258e l       .text  00000000 
20005f00 l     O .rodata        00000014 rand_testutils_init.log_fields
20002590 l       .text  00000000 
2000259a l       .text  00000000 
2000259a l       .text  00000000 
200025ae l       .text  00000000 
200025ae l       .text  00000000 
200025b4 l       .text  00000000 
200025b4 l       .text  00000000 
200025ba l       .text  00000000 
200025bc l       .text  00000000 
200025c2 l       .text  00000000 
200025c4 l       .text  00000000 
200025c4 l       .text  00000000 
200025e8 l       .text  00000000 
200025f0 l       .text  00000000 
200025f8 l       .text  00000000 
200025fc l       .text  00000000 
20002600 l       .text  00000000 
20002608 l       .text  00000000 
20002608 l       .text  00000000 
2000260c l       .text  00000000 
2000260c l       .text  00000000 
000004b4 l     O .logs.fields   00000014 reseed_lfsr.kLogFields
000004c8 l     O .logs.fields   00000014 reseed_lfsr.kLogFields.8
0000048c l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields
000004a0 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields.3
00000480 l     O .ot.status_create_record       00000080 rand_testutils_init.kOtStatusRecord
00000500 l     O .ot.status_create_record       00000080 rand_testutils_gen32_range.kOtStatusRecord
00000580 l     O .ot.status_create_record       00000080 rand_testutils_gen32_range.kOtStatusRecord.6
00005d6f l       .debug_loc     00000000 
00005d95 l       .debug_loc     00000000 
00005db0 l       .debug_loc     00000000 
00005de1 l       .debug_loc     00000000 
00005e14 l       .debug_loc     00000000 
00005e47 l       .debug_loc     00000000 
00005e6d l       .debug_loc     00000000 
00005ea9 l       .debug_loc     00000000 
00005ec4 l       .debug_loc     00000000 
00005ee4 l       .debug_loc     00000000 
00005eff l       .debug_loc     00000000 
00005f1a l       .debug_loc     00000000 
00005f40 l       .debug_loc     00000000 
00005f66 l       .debug_loc     00000000 
00005f81 l       .debug_loc     00000000 
00005f9d l       .debug_loc     00000000 
00005fb8 l       .debug_loc     00000000 
00005fd3 l       .debug_loc     00000000 
00005fee l       .debug_loc     00000000 
00006023 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000077bd l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000978 l       .debug_ranges  00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00002396 l       .debug_str     00000000 
00000204 l       .debug_str     00000000 
00000291 l       .debug_str     00000000 
00001f3c l       .debug_str     00000000 
00001fcb l       .debug_str     00000000 
00001fc3 l       .debug_str     00000000 
000024bd l       .debug_str     00000000 
000024c2 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00007ebb l       .debug_str     00000000 
00000284 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000255 l       .debug_str     00000000 
0000020f l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00001f77 l       .debug_str     00000000 
00001f5f l       .debug_str     00000000 
00001f4c l       .debug_str     00000000 
00001f56 l       .debug_str     00000000 
000077e4 l       .debug_str     00000000 
000077ff l       .debug_str     00000000 
00007887 l       .debug_str     00000000 
000078b9 l       .debug_str     00000000 
000078bd l       .debug_str     00000000 
0000789c l       .debug_str     00000000 
00000372 l       .debug_str     00000000 
0000222b l       .debug_str     00000000 
0000210a l       .debug_str     00000000 
0000210e l       .debug_str     00000000 
00002119 l       .debug_str     00000000 
00002122 l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00002145 l       .debug_str     00000000 
0000214f l       .debug_str     00000000 
0000215e l       .debug_str     00000000 
00002170 l       .debug_str     00000000 
00002183 l       .debug_str     00000000 
00002197 l       .debug_str     00000000 
000021a0 l       .debug_str     00000000 
000021ac l       .debug_str     00000000 
000021bb l       .debug_str     00000000 
000021c5 l       .debug_str     00000000 
000021d2 l       .debug_str     00000000 
000021dc l       .debug_str     00000000 
000021ed l       .debug_str     00000000 
000023d3 l       .debug_str     00000000 
00000379 l       .debug_str     00000000 
0000038e l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b9 l       .debug_str     00000000 
000003ca l       .debug_str     00000000 
000003dc l       .debug_str     00000000 
000020fe l       .debug_str     00000000 
0000208c l       .debug_str     00000000 
00002099 l       .debug_str     00000000 
000020ad l       .debug_str     00000000 
000020be l       .debug_str     00000000 
000020cf l       .debug_str     00000000 
000020e0 l       .debug_str     00000000 
000020ef l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
00002248 l       .debug_str     00000000 
0000231f l       .debug_str     00000000 
000062f2 l       .debug_str     00000000 
0000891b l       .debug_str     00000000 
000088fc l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
000023be l       .debug_str     00000000 
0000153c l       .debug_str     00000000 
00001551 l       .debug_str     00000000 
00001568 l       .debug_str     00000000 
00001578 l       .debug_str     00000000 
0000785c l       .debug_str     00000000 
0000781b l       .debug_str     00000000 
00007828 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000782c l       .debug_str     00000000 
00004b8d l       .debug_str     00000000 
00004b95 l       .debug_str     00000000 
00004b9c l       .debug_str     00000000 
00007872 l       .debug_str     00000000 
00000948 l       .debug_ranges  00000000 
00007838 l       .debug_str     00000000 
00001fd8 l       .debug_str     00000000 
00001fc7 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00004d72 l       .debug_str     00000000 
000078a2 l       .debug_str     00000000 
000078c1 l       .debug_str     00000000 
00008f54 l       .debug_str     00000000 
000078c7 l       .debug_str     00000000 
000078da l       .debug_str     00000000 
000078ce l       .debug_str     00000000 
000078d3 l       .debug_str     00000000 
0000201e l       .debug_str     00000000 
00000960 l       .debug_ranges  00000000 
000003c8 l       .debug_str     00000000 
000078e6 l       .debug_str     00000000 
00004b4d l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00001fa7 l       .debug_str     00000000 
0000204d l       .debug_str     00000000 
0000203a l       .debug_str     00000000 
00001feb l       .debug_str     00000000 
00007833 l       .debug_str     00000000 
00002006 l       .debug_str     00000000 
0000202f l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
00000ac4 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_rv_core_ibex_autogen.c
2000260c l       .text  00000000 
2000260c l       .text  00000000 
2000260c l       .text  00000000 
2000260c l       .text  00000000 
2000260e l       .text  00000000 
20002610 l       .text  00000000 
20002614 l       .text  00000000 
20002616 l       .text  00000000 
20002618 l       .text  00000000 
2000261a l       .text  00000000 
2000261a l       .text  00000000 
00006370 l       .debug_loc     00000000 
0000638b l       .debug_loc     00000000 
000063a6 l       .debug_loc     00000000 
000063c1 l       .debug_loc     00000000 
000063dc l       .debug_loc     00000000 
0000640b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00007aa5 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000a48 l       .debug_ranges  00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00007b52 l       .debug_str     00000000 
00007ada l       .debug_str     00000000 
00007af8 l       .debug_str     00000000 
00007b16 l       .debug_str     00000000 
00007b34 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00002380 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
00001fcb l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
000019e0 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00007b69 l       .debug_str     00000000 
000073ab l       .debug_str     00000000 
00001b43 l       .debug_str     00000000 
00001b4d l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00001fd8 l       .debug_str     00000000 
00001fc7 l       .debug_str     00000000 
00007b86 l       .debug_str     00000000 
00000bc0 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 status.c
2000261a l       .text  00000000 
2000261a l       .text  00000000 
2000261a l       .text  00000000 
2000261c l       .text  00000000 
20002620 l       .text  00000000 
20002626 l       .text  00000000 
2000262a l       .text  00000000 
2000262c l       .text  00000000 
20002630 l       .text  00000000 
20002634 l       .text  00000000 
2000263c l       .text  00000000 
2000263e l       .text  00000000 
00000504 l     O .logs.fields   00000014 test_status_set.kLogFields.5
20002652 l       .text  00000000 
20002652 l       .text  00000000 
20005f90 l     O .rodata        00000014 test_status_set.log_fields.7
20002654 l       .text  00000000 
20002660 l       .text  00000000 
20002660 l       .text  00000000 
20002668 l       .text  00000000 
2000266a l       .text  00000000 
2000266a l       .text  00000000 
2000266c l       .text  00000000 
2000266c l       .text  00000000 
20002670 l       .text  00000000 
20002670 l       .text  00000000 
20002674 l       .text  00000000 
20002674 l       .text  00000000 
20002678 l       .text  00000000 
2000267c l       .text  00000000 
20005f7c l     O .rodata        00000014 test_status_set.log_fields.4
2000267e l       .text  00000000 
20002688 l       .text  00000000 
20002688 l       .text  00000000 
2000268a l       .text  00000000 
2000268a l       .text  00000000 
20002692 l       .text  00000000 
20005f68 l     O .rodata        00000014 test_status_set.log_fields
20002694 l       .text  00000000 
2000269e l       .text  00000000 
2000269e l       .text  00000000 
200026a0 l       .text  00000000 
200026a0 l       .text  00000000 
000004f0 l     O .logs.fields   00000014 test_status_set.kLogFields.2
200026b2 l       .text  00000000 
200026b2 l       .text  00000000 
200026ba l       .text  00000000 
200026bc l       .text  00000000 
200026bc l       .text  00000000 
200026c4 l       .text  00000000 
200026c4 l       .text  00000000 
000004dc l     O .logs.fields   00000014 test_status_set.kLogFields
200026d6 l       .text  00000000 
200026d6 l       .text  00000000 
200026de l       .text  00000000 
200026e0 l       .text  00000000 
200026e0 l       .text  00000000 
200026e4 l       .text  00000000 
200026e8 l       .text  00000000 
200026e8 l       .text  00000000 
200026e8 l       .text  00000000 
00006426 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00007b9f l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00001568 l       .debug_str     00000000 
00000204 l       .debug_str     00000000 
00000291 l       .debug_str     00000000 
000023d3 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00007ebb l       .debug_str     00000000 
00000284 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000255 l       .debug_str     00000000 
0000020f l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00000379 l       .debug_str     00000000 
0000038e l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b9 l       .debug_str     00000000 
000003ca l       .debug_str     00000000 
000003dc l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
00007bcd l       .debug_str     00000000 
00007be6 l       .debug_str     00000000 
00001578 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000153c l       .debug_str     00000000 
00001551 l       .debug_str     00000000 
00002552 l       .debug_str     00000000 
00000bf4 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 hart.c
200026e8 l       .text  00000000 
200026e8 l       .text  00000000 
200026e8 l       .text  00000000 
200026ea l       .text  00000000 
200026ea l       .text  00000000 
200026ea l       .text  00000000 
200026f0 l       .text  00000000 
200026f0 l       .text  00000000 
200026f0 l       .text  00000000 
20002700 l       .text  00000000 
20002700 l       .text  00000000 
20002706 l       .text  00000000 
20002706 l       .text  00000000 
2000270a l       .text  00000000 
20002716 l       .text  00000000 
20002716 l       .text  00000000 
20002726 l       .text  00000000 
20002726 l       .text  00000000 
20002728 l       .text  00000000 
2000272e l       .text  00000000 
2000272e l       .text  00000000 
20002730 l       .text  00000000 
20002734 l       .text  00000000 
20002738 l       .text  00000000 
2000273c l       .text  00000000 
20002740 l       .text  00000000 
20002742 l       .text  00000000 
20002748 l       .text  00000000 
2000274c l       .text  00000000 
2000274c l       .text  00000000 
2000274c l       .text  00000000 
2000274c l       .text  00000000 
2000274c l       .text  00000000 
2000274c l       .text  00000000 
20002750 l       .text  00000000 
20002750 l       .text  00000000 
20002752 l       .text  00000000 
20002752 l       .text  00000000 
00006465 l       .debug_loc     00000000 
00006480 l       .debug_loc     00000000 
000064a7 l       .debug_loc     00000000 
000064ce l       .debug_loc     00000000 
000064ea l       .debug_loc     00000000 
00006517 l       .debug_loc     00000000 
0000653e l       .debug_loc     00000000 
00006565 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00007bfe l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000a60 l       .debug_ranges  00000000 
0000798d l       .debug_str     00000000 
0000797a l       .debug_str     00000000 
00007a02 l       .debug_str     00000000 
00007a2b l       .debug_str     00000000 
00007a20 l       .debug_str     00000000 
00007a13 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00001615 l       .debug_str     00000000 
00002001 l       .debug_str     00000000 
0000a197 l       .debug_str     00000000 
00007c22 l       .debug_str     00000000 
00007c1b l       .debug_str     00000000 
00007c29 l       .debug_str     00000000 
00002552 l       .debug_str     00000000 
00007c3c l       .debug_str     00000000 
00000c20 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ibex.c
20002752 l       .text  00000000 
20002752 l       .text  00000000 
20002752 l       .text  00000000 
20002752 l       .text  00000000 
20002756 l       .text  00000000 
20002756 l       .text  00000000 
20002758 l       .text  00000000 
20002758 l       .text  00000000 
20002758 l       .text  00000000 
20002758 l       .text  00000000 
20002758 l       .text  00000000 
20002758 l       .text  00000000 
2000275c l       .text  00000000 
2000275c l       .text  00000000 
2000275e l       .text  00000000 
2000275e l       .text  00000000 
2000275e l       .text  00000000 
2000275e l       .text  00000000 
2000275e l       .text  00000000 
2000275e l       .text  00000000 
20002762 l       .text  00000000 
20002762 l       .text  00000000 
20002764 l       .text  00000000 
20002764 l       .text  00000000 
00006581 l       .debug_loc     00000000 
0000659c l       .debug_loc     00000000 
000065b7 l       .debug_loc     00000000 
000065d2 l       .debug_loc     00000000 
000065f9 l       .debug_loc     00000000 
00006620 l       .debug_loc     00000000 
0000663c l       .debug_loc     00000000 
00006657 l       .debug_loc     00000000 
00006673 l       .debug_loc     00000000 
0000669a l       .debug_loc     00000000 
000066c1 l       .debug_loc     00000000 
000066e7 l       .debug_loc     00000000 
0000670e l       .debug_loc     00000000 
00006735 l       .debug_loc     00000000 
00006751 l       .debug_loc     00000000 
0000676c l       .debug_loc     00000000 
00006793 l       .debug_loc     00000000 
000067ba l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00007c4e l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000ab8 l       .debug_ranges  00000000 
0000798d l       .debug_str     00000000 
0000797a l       .debug_str     00000000 
00006c8e l       .debug_str     00000000 
00006d82 l       .debug_str     00000000 
00006c72 l       .debug_str     00000000 
00006c63 l       .debug_str     00000000 
00006d7d l       .debug_str     00000000 
00007c6b l       .debug_str     00000000 
00007a02 l       .debug_str     00000000 
00007a13 l       .debug_str     00000000 
00007a20 l       .debug_str     00000000 
00007a2b l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000079d4 l       .debug_str     00000000 
00001ff9 l       .debug_str     00000000 
00007a71 l       .debug_str     00000000 
00007a5e l       .debug_str     00000000 
000079eb l       .debug_str     00000000 
00000a88 l       .debug_ranges  00000000 
00007c7b l       .debug_str     00000000 
00000aa0 l       .debug_ranges  00000000 
000079f3 l       .debug_str     00000000 
000079e6 l       .debug_str     00000000 
00007c22 l       .debug_str     00000000 
0000a197 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00000c80 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 log.c
20002764 l       .text  00000000 
20002764 l       .text  00000000 
20002764 l       .text  00000000 
20002766 l       .text  00000000 
2000276c l       .text  00000000 
2000276e l       .text  00000000 
2000277c l       .text  00000000 
20002784 l       .text  00000000 
2000278a l       .text  00000000 
2000278a l       .text  00000000 
2000278c l       .text  00000000 
20002790 l       .text  00000000 
20002790 l       .text  00000000 
2000279a l       .text  00000000 
2000279a l       .text  00000000 
2000279c l       .text  00000000 
200027a0 l       .text  00000000 
200027a0 l       .text  00000000 
200027a2 l       .text  00000000 
200027a2 l       .text  00000000 
200027a4 l       .text  00000000 
200027a4 l       .text  00000000 
200027a8 l       .text  00000000 
200027a8 l       .text  00000000 
200027b8 l       .text  00000000 
200027bc l       .text  00000000 
200027bc l       .text  00000000 
10002098 l     O .bss   00000002 base_log_internal_core.global_log_counter
200027c4 l       .text  00000000 
200027cc l       .text  00000000 
200027ce l       .text  00000000 
200027d8 l       .text  00000000 
200027d8 l       .text  00000000 
200027e4 l       .text  00000000 
200027e4 l       .text  00000000 
200027e6 l       .text  00000000 
200027e8 l       .text  00000000 
200027ec l       .text  00000000 
200027ec l       .text  00000000 
200027f6 l       .text  00000000 
200027f6 l       .text  00000000 
200027fa l       .text  00000000 
200027fc l       .text  00000000 
20002800 l       .text  00000000 
20002800 l       .text  00000000 
20002800 l       .text  00000000 
20002800 l       .text  00000000 
20002800 l       .text  00000000 
20002802 l       .text  00000000 
20002808 l       .text  00000000 
20002810 l       .text  00000000 
20002810 l       .text  00000000 
20002816 l       .text  00000000 
20002816 l       .text  00000000 
2000281a l       .text  00000000 
2000281a l       .text  00000000 
2000281c l       .text  00000000 
2000281c l       .text  00000000 
2000281e l       .text  00000000 
2000281e l       .text  00000000 
20002820 l       .text  00000000 
20002824 l       .text  00000000 
20002828 l       .text  00000000 
2000282a l       .text  00000000 
2000282a l       .text  00000000 
2000282c l       .text  00000000 
2000282c l       .text  00000000 
2000282e l       .text  00000000 
2000282e l       .text  00000000 
20002832 l       .text  00000000 
20002832 l       .text  00000000 
000067d6 l       .debug_loc     00000000 
000067fc l       .debug_loc     00000000 
00006817 l       .debug_loc     00000000 
00006853 l       .debug_loc     00000000 
0000686e l       .debug_loc     00000000 
0000688a l       .debug_loc     00000000 
000068a5 l       .debug_loc     00000000 
000068c0 l       .debug_loc     00000000 
000068db l       .debug_loc     00000000 
00006919 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00007c90 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000b00 l       .debug_ranges  00000000 
00001551 l       .debug_str     00000000 
00007cac l       .debug_str     00000000 
00007d00 l       .debug_str     00000000 
00007d04 l       .debug_str     00000000 
00007d12 l       .debug_str     00000000 
00000285 l       .debug_str     00000000 
00002293 l       .debug_str     00000000 
00002284 l       .debug_str     00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00000255 l       .debug_str     00000000 
0000020f l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00007cbf l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00007cd2 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
00007cd9 l       .debug_str     00000000 
00006c82 l       .debug_str     00000000 
00007ce1 l       .debug_str     00000000 
00007cf8 l       .debug_str     00000000 
00007cee l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
0000153c l       .debug_str     00000000 
00000284 l       .debug_str     00000000 
00007d1c l       .debug_str     00000000 
000003c8 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00000291 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00007ebb l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000d1c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 print.c
20002832 l     F .text  00000004 base_dev_null
1000209c l     O .bss   00000008 base_stdout
20002832 l       .text  00000000 
20002832 l       .text  00000000 
20002832 l       .text  00000000 
20002834 l       .text  00000000 
20002834 l       .text  00000000 
20002836 l       .text  00000000 
20002836 l       .text  00000000 
20002836 l       .text  00000000 
20002836 l       .text  00000000 
20002836 l       .text  00000000 
20002840 l     F .text  00000192 base_dev_spi_device
20002836 l       .text  00000000 
20002840 l       .text  00000000 
20002840 l       .text  00000000 
20002840 l       .text  00000000 
20002840 l       .text  00000000 
20002840 l       .text  00000000 
20002842 l       .text  00000000 
2000285c l       .text  00000000 
2000285e l       .text  00000000 
2000285e l       .text  00000000 
20002862 l       .text  00000000 
20002864 l       .text  00000000 
20002866 l       .text  00000000 
100020a4 l     O .bss   00000004 spi_device_frame_num
100020a8 l     O .bss   00000004 spi_device_send_frame.next_write_address
20002882 l       .text  00000000 
20002884 l       .text  00000000 
20002884 l       .text  00000000 
20002888 l       .text  00000000 
20002888 l       .text  00000000 
20002890 l       .text  00000000 
20002890 l       .text  00000000 
20002894 l       .text  00000000 
20002896 l       .text  00000000 
20002896 l       .text  00000000 
20002898 l       .text  00000000 
20002898 l       .text  00000000 
2000289c l       .text  00000000 
200028a0 l       .text  00000000 
200028a0 l       .text  00000000 
200028a2 l       .text  00000000 
200028a4 l       .text  00000000 
200028a8 l       .text  00000000 
200028a8 l       .text  00000000 
200028b0 l       .text  00000000 
200028b6 l       .text  00000000 
200028b6 l       .text  00000000 
200028ba l       .text  00000000 
200028be l       .text  00000000 
200028be l       .text  00000000 
200028c0 l       .text  00000000 
200028c2 l       .text  00000000 
200028c6 l       .text  00000000 
200028c6 l       .text  00000000 
200028ca l       .text  00000000 
200028ca l       .text  00000000 
200028ce l       .text  00000000 
200028d2 l       .text  00000000 
200028d2 l       .text  00000000 
200028d4 l       .text  00000000 
200028d6 l       .text  00000000 
200028da l       .text  00000000 
200028da l       .text  00000000 
200028de l       .text  00000000 
200028de l       .text  00000000 
200028e2 l       .text  00000000 
200028e2 l       .text  00000000 
200028e4 l       .text  00000000 
200028e4 l       .text  00000000 
200028ec l       .text  00000000 
200028ec l       .text  00000000 
200028ee l       .text  00000000 
200028f0 l       .text  00000000 
200028f0 l       .text  00000000 
200028f4 l       .text  00000000 
200028f8 l       .text  00000000 
200028f8 l       .text  00000000 
200028fc l       .text  00000000 
200028fc l       .text  00000000 
20002900 l       .text  00000000 
2000290a l       .text  00000000 
2000290c l       .text  00000000 
2000290c l       .text  00000000 
20002910 l       .text  00000000 
20002910 l       .text  00000000 
20002912 l       .text  00000000 
20002912 l       .text  00000000 
20002914 l       .text  00000000 
20002918 l       .text  00000000 
20002918 l       .text  00000000 
2000291c l       .text  00000000 
2000291c l       .text  00000000 
2000291e l       .text  00000000 
20003082 l     F .text  0000011a spi_device_send_data
20002924 l       .text  00000000 
20002924 l       .text  00000000 
20002928 l       .text  00000000 
2000292c l       .text  00000000 
2000292c l       .text  00000000 
20002930 l       .text  00000000 
20002930 l       .text  00000000 
20002942 l       .text  00000000 
20002942 l       .text  00000000 
20002946 l       .text  00000000 
2000294a l       .text  00000000 
20002950 l       .text  00000000 
20002952 l       .text  00000000 
20002952 l       .text  00000000 
20002954 l       .text  00000000 
20002958 l       .text  00000000 
20002958 l       .text  00000000 
20002960 l       .text  00000000 
20002960 l       .text  00000000 
20002964 l       .text  00000000 
20002964 l       .text  00000000 
20002968 l       .text  00000000 
20002970 l       .text  00000000 
20002970 l       .text  00000000 
20002974 l       .text  00000000 
2000297a l       .text  00000000 
2000297e l       .text  00000000 
20002980 l       .text  00000000 
20002984 l       .text  00000000 
20002988 l       .text  00000000 
20002992 l       .text  00000000 
20002992 l       .text  00000000 
20002996 l       .text  00000000 
2000299a l       .text  00000000 
2000299a l       .text  00000000 
200029a2 l       .text  00000000 
200029aa l       .text  00000000 
200029aa l       .text  00000000 
200029b0 l       .text  00000000 
200029b0 l       .text  00000000 
200029b2 l       .text  00000000 
200029b2 l       .text  00000000 
200029ce l       .text  00000000 
200029d2 l       .text  00000000 
200029d2 l       .text  00000000 
200029d2 l       .text  00000000 
200029d2 l       .text  00000000 
200029d2 l       .text  00000000 
200029dc l     F .text  00000044 base_dev_uart
200029d2 l       .text  00000000 
200029dc l       .text  00000000 
200029dc l       .text  00000000 
200029dc l       .text  00000000 
200029dc l       .text  00000000 
200029dc l       .text  00000000 
200029de l       .text  00000000 
200029de l       .text  00000000 
200029e8 l       .text  00000000 
200029e8 l       .text  00000000 
200029ea l       .text  00000000 
200029ea l       .text  00000000 
200029ec l       .text  00000000 
200029ee l       .text  00000000 
200029f0 l       .text  00000000 
200029f2 l       .text  00000000 
200029f2 l       .text  00000000 
200029fa l       .text  00000000 
20002a00 l       .text  00000000 
20002a00 l       .text  00000000 
20002a02 l       .text  00000000 
20002a04 l       .text  00000000 
20002a08 l       .text  00000000 
20002a08 l       .text  00000000 
20002a0c l       .text  00000000 
20002a0e l       .text  00000000 
20002a12 l       .text  00000000 
20002a1a l       .text  00000000 
20002a1c l       .text  00000000 
20002a20 l       .text  00000000 
20002a20 l       .text  00000000 
20002a20 l       .text  00000000 
20002a20 l       .text  00000000 
20002a20 l       .text  00000000 
20002a20 l       .text  00000000 
20002a28 l       .text  00000000 
20002a28 l       .text  00000000 
20002a36 l       .text  00000000 
20002a3a l       .text  00000000 
20002a3c l       .text  00000000 
20002a3c l       .text  00000000 
20002a3e l       .text  00000000 
20002a3e l       .text  00000000 
20002a3e l       .text  00000000 
20002a3e l       .text  00000000 
20002a3e l       .text  00000000 
20002a3e l       .text  00000000 
20002a4c l       .text  00000000 
20002a50 l       .text  00000000 
20002a52 l       .text  00000000 
20002a52 l       .text  00000000 
20002a54 l       .text  00000000 
20002a54 l       .text  00000000 
20002a54 l       .text  00000000 
20002a54 l       .text  00000000 
20002a54 l       .text  00000000 
20002a56 l       .text  00000000 
20002a58 l       .text  00000000 
20002a66 l       .text  00000000 
20002a66 l       .text  00000000 
20002a74 l       .text  00000000 
20002a74 l       .text  00000000 
20002a76 l       .text  00000000 
20002a76 l       .text  00000000 
20002a78 l       .text  00000000 
20002a78 l       .text  00000000 
20002a7c l       .text  00000000 
20002a7e l       .text  00000000 
20002a80 l       .text  00000000 
20002a80 l       .text  00000000 
20002a82 l       .text  00000000 
20002a86 l       .text  00000000 
20002a86 l       .text  00000000 
20002a86 l       .text  00000000 
20002a86 l       .text  00000000 
20002a86 l       .text  00000000 
20002a86 l       .text  00000000 
20002a94 l       .text  00000000 
20002a94 l       .text  00000000 
20002a96 l       .text  00000000 
20002a96 l       .text  00000000 
20002a9c l       .text  00000000 
20002a9e l       .text  00000000 
20002aa0 l       .text  00000000 
20002aa0 l       .text  00000000 
20002aa0 l       .text  00000000 
20002aa0 l       .text  00000000 
20002aa0 l       .text  00000000 
20002aa0 l       .text  00000000 
20002aa2 l       .text  00000000 
20002abc l       .text  00000000 
20002abe l       .text  00000000 
20002ac0 l       .text  00000000 
20002ac2 l       .text  00000000 
20002ac2 l       .text  00000000 
20002ac6 l       .text  00000000 
20002ac6 l       .text  00000000 
20002aca l       .text  00000000 
20002ace l       .text  00000000 
20002ace l       .text  00000000 
20002ad0 l       .text  00000000 
20002ad8 l       .text  00000000 
20002af0 l       .text  00000000 
20002af0 l       .text  00000000 
20002af8 l       .text  00000000 
20002afe l       .text  00000000 
20002b02 l       .text  00000000 
20002b0a l       .text  00000000 
20002b0a l       .text  00000000 
20002b0c l       .text  00000000 
20002b0e l       .text  00000000 
20002b18 l       .text  00000000 
20002b1a l       .text  00000000 
20002b1e l       .text  00000000 
20002b20 l       .text  00000000 
20002b28 l       .text  00000000 
20002b28 l       .text  00000000 
20002b2c l       .text  00000000 
20002b30 l       .text  00000000 
20002b30 l       .text  00000000 
20002b34 l       .text  00000000 
20002b34 l       .text  00000000 
20002b3a l       .text  00000000 
20002b3a l       .text  00000000 
20002b40 l       .text  00000000 
20002b40 l       .text  00000000 
20002b44 l       .text  00000000 
20002b4a l       .text  00000000 
20002b4c l       .text  00000000 
20002b54 l       .text  00000000 
20002b58 l       .text  00000000 
20002b5c l       .text  00000000 
20002b60 l       .text  00000000 
20002b62 l       .text  00000000 
20002b66 l       .text  00000000 
20002b6e l       .text  00000000 
20002b72 l       .text  00000000 
20002b7a l       .text  00000000 
20002b7a l       .text  00000000 
20002b82 l       .text  00000000 
20002b86 l       .text  00000000 
20002b86 l       .text  00000000 
20002b8a l       .text  00000000 
20002b90 l       .text  00000000 
20002b90 l       .text  00000000 
20002b92 l       .text  00000000 
20002b98 l       .text  00000000 
20002b9c l       .text  00000000 
20002ba0 l       .text  00000000 
20002ba0 l       .text  00000000 
20002ba8 l       .text  00000000 
20002bc0 l       .text  00000000 
20002bc0 l       .text  00000000 
20002bc4 l       .text  00000000 
20002bd0 l       .text  00000000 
20002bd0 l       .text  00000000 
20002bd4 l       .text  00000000 
20002be2 l       .text  00000000 
20002be2 l       .text  00000000 
20002be4 l       .text  00000000 
20002be8 l       .text  00000000 
200060a1 l     O .rodata        00000010 kDigitsLow
20002bfe l       .text  00000000 
20002bfe l       .text  00000000 
20002c02 l       .text  00000000 
20002c14 l       .text  00000000 
20002c18 l       .text  00000000 
20002c18 l       .text  00000000 
20002c22 l       .text  00000000 
20002c22 l       .text  00000000 
20002c2a l       .text  00000000 
20002c2a l       .text  00000000 
200060ce l     O .rodata        00000010 kDigitsHigh
20002c38 l       .text  00000000 
20002c38 l       .text  00000000 
20002c42 l       .text  00000000 
20002c42 l       .text  00000000 
20002c50 l       .text  00000000 
20002c50 l       .text  00000000 
20002c54 l       .text  00000000 
20002c5e l       .text  00000000 
20002c5e l       .text  00000000 
20002c66 l       .text  00000000 
20002c66 l       .text  00000000 
20002c74 l       .text  00000000 
20002c74 l       .text  00000000 
20002c7e l       .text  00000000 
20002c82 l       .text  00000000 
20002c86 l       .text  00000000 
20002c92 l       .text  00000000 
20002c92 l       .text  00000000 
20002c96 l       .text  00000000 
20002ca0 l       .text  00000000 
20002ca4 l       .text  00000000 
20002ca4 l       .text  00000000 
20002ca8 l       .text  00000000 
20002ca8 l       .text  00000000 
20002cac l       .text  00000000 
20002cb6 l       .text  00000000 
20002cb6 l       .text  00000000 
20002cc6 l       .text  00000000 
20002cc6 l       .text  00000000 
20002cca l       .text  00000000 
20002cd8 l       .text  00000000 
20002cd8 l       .text  00000000 
20002ce2 l       .text  00000000 
20002ce2 l       .text  00000000 
20002ce4 l       .text  00000000 
2000319c l     F .text  00000080 write_digits
20002cfa l       .text  00000000 
20002cfa l       .text  00000000 
20002cfe l       .text  00000000 
20002cfe l       .text  00000000 
20002d08 l       .text  00000000 
20002d08 l       .text  00000000 
20002d0a l       .text  00000000 
20002d14 l       .text  00000000 
20002d14 l       .text  00000000 
20002d1e l       .text  00000000 
20002d1e l       .text  00000000 
20002d20 l       .text  00000000 
20002d20 l       .text  00000000 
20002d22 l       .text  00000000 
20002d26 l       .text  00000000 
20002d26 l       .text  00000000 
20002d2a l       .text  00000000 
20002d2c l       .text  00000000 
20002d30 l       .text  00000000 
20002d30 l       .text  00000000 
20002d38 l       .text  00000000 
20002d38 l       .text  00000000 
20002d3a l       .text  00000000 
20002d42 l       .text  00000000 
20002d46 l       .text  00000000 
20002d46 l       .text  00000000 
20002d48 l       .text  00000000 
20002d48 l       .text  00000000 
20002d4a l       .text  00000000 
20002d4a l       .text  00000000 
20002d52 l       .text  00000000 
20002d54 l       .text  00000000 
20002d54 l       .text  00000000 
20002d62 l       .text  00000000 
20002d62 l       .text  00000000 
20002d64 l       .text  00000000 
20002d72 l       .text  00000000 
20002d72 l       .text  00000000 
20002d74 l       .text  00000000 
20002d76 l       .text  00000000 
20002d76 l       .text  00000000 
20002d7c l       .text  00000000 
20002d8a l       .text  00000000 
20002d8c l       .text  00000000 
20002d8c l       .text  00000000 
20002d94 l       .text  00000000 
20002d94 l       .text  00000000 
20002d96 l       .text  00000000 
20002d96 l       .text  00000000 
20002d98 l       .text  00000000 
20002dac l       .text  00000000 
20002dac l       .text  00000000 
20002dae l       .text  00000000 
20002dbc l       .text  00000000 
20002dbc l       .text  00000000 
20002dc0 l       .text  00000000 
20002dc0 l       .text  00000000 
20002dc8 l       .text  00000000 
20002dcc l       .text  00000000 
20002dce l       .text  00000000 
20002dce l       .text  00000000 
20002dd6 l       .text  00000000 
20002dd6 l       .text  00000000 
20002dd8 l       .text  00000000 
20002dd8 l       .text  00000000 
20002ddc l       .text  00000000 
20002de6 l       .text  00000000 
20002de6 l       .text  00000000 
20002df6 l       .text  00000000 
20002df6 l       .text  00000000 
20002dfa l       .text  00000000 
20002dfa l       .text  00000000 
20002e04 l       .text  00000000 
20002e04 l       .text  00000000 
20002e0c l       .text  00000000 
20002e0c l       .text  00000000 
20002e18 l       .text  00000000 
20002e18 l       .text  00000000 
20002e22 l       .text  00000000 
20002e22 l       .text  00000000 
20002e2c l       .text  00000000 
20002e2c l       .text  00000000 
20002e38 l       .text  00000000 
20002e38 l       .text  00000000 
20002e42 l       .text  00000000 
20002e44 l       .text  00000000 
20002e44 l       .text  00000000 
20002e48 l       .text  00000000 
20002e52 l       .text  00000000 
20002e52 l       .text  00000000 
20002e5a l       .text  00000000 
20002e5a l       .text  00000000 
20002e66 l       .text  00000000 
20002e66 l       .text  00000000 
20002f9e l     F .text  000000e4 hex_dump
20002e70 l       .text  00000000 
20002e72 l       .text  00000000 
200060de l     O .rodata        0000000f kUnknownSpec
20002e76 l       .text  00000000 
20002e80 l       .text  00000000 
20002e84 l       .text  00000000 
20002e86 l       .text  00000000 
20002e86 l       .text  00000000 
20002e8c l       .text  00000000 
20002e92 l       .text  00000000 
20002e92 l       .text  00000000 
20002e9c l       .text  00000000 
20002e9c l       .text  00000000 
20002e9e l       .text  00000000 
20002e9e l       .text  00000000 
20002ea2 l       .text  00000000 
20002ea6 l       .text  00000000 
20002eb2 l       .text  00000000 
20002ec0 l       .text  00000000 
20002ec0 l       .text  00000000 
20002ec4 l       .text  00000000 
20002ec4 l       .text  00000000 
20002ec8 l       .text  00000000 
20002ec8 l       .text  00000000 
20002ed2 l       .text  00000000 
20002ed8 l       .text  00000000 
20002ed8 l       .text  00000000 
20002edc l       .text  00000000 
20002ede l       .text  00000000 
20002ee0 l       .text  00000000 
20002ee2 l       .text  00000000 
20002ee8 l       .text  00000000 
20002eea l       .text  00000000 
20002eea l       .text  00000000 
20002eec l       .text  00000000 
20002eec l       .text  00000000 
20002eee l       .text  00000000 
20002ef4 l       .text  00000000 
20002ef4 l       .text  00000000 
20002f04 l       .text  00000000 
20002f04 l       .text  00000000 
20002f06 l       .text  00000000 
20002f06 l       .text  00000000 
20002f1a l       .text  00000000 
20002f1a l       .text  00000000 
20002f1c l       .text  00000000 
20002f1c l       .text  00000000 
20002f2a l       .text  00000000 
20002f2a l       .text  00000000 
20002f2c l       .text  00000000 
20002f2c l       .text  00000000 
20002f32 l       .text  00000000 
20002f32 l       .text  00000000 
20002f34 l       .text  00000000 
20002f34 l       .text  00000000 
20002f36 l       .text  00000000 
20002f36 l       .text  00000000 
20002f3e l       .text  00000000 
20002f40 l       .text  00000000 
20002f42 l       .text  00000000 
20002f44 l       .text  00000000 
20002f44 l       .text  00000000 
20002f46 l       .text  00000000 
20002f46 l       .text  00000000 
20002f4e l       .text  00000000 
20002f52 l       .text  00000000 
20002f52 l       .text  00000000 
20002f5e l       .text  00000000 
200060b1 l     O .rodata        00000011 kErrorNul
20002f5e l       .text  00000000 
20002f68 l       .text  00000000 
20002f68 l       .text  00000000 
20002f6c l       .text  00000000 
20002f6e l       .text  00000000 
20002f70 l       .text  00000000 
20002f72 l       .text  00000000 
20002f72 l       .text  00000000 
20002f82 l       .text  00000000 
20002f8e l       .text  00000000 
20002f92 l       .text  00000000 
200060c2 l     O .rodata        0000000c kErrorTooWide
20002f92 l       .text  00000000 
20002f9e l       .text  00000000 
20002f9e l       .text  00000000 
20002f9e l       .text  00000000 
20002f9e l       .text  00000000 
20002f9e l       .text  00000000 
20002f9e l       .text  00000000 
20002fa0 l       .text  00000000 
20002fba l       .text  00000000 
20002fbc l       .text  00000000 
20002fbe l       .text  00000000 
20002fc0 l       .text  00000000 
20002fc2 l       .text  00000000 
20002fc6 l       .text  00000000 
20002fc6 l       .text  00000000 
20002fca l       .text  00000000 
20002fce l       .text  00000000 
20002fce l       .text  00000000 
20002fde l       .text  00000000 
20002fde l       .text  00000000 
20002fe0 l       .text  00000000 
20002fe2 l       .text  00000000 
20002fe2 l       .text  00000000 
20002fe6 l       .text  00000000 
20002fe6 l       .text  00000000 
20002fee l       .text  00000000 
20002fee l       .text  00000000 
20002ff0 l       .text  00000000 
20002ff2 l       .text  00000000 
20002ff2 l       .text  00000000 
20002ff4 l       .text  00000000 
20002ff4 l       .text  00000000 
20002ffa l       .text  00000000 
20002ffa l       .text  00000000 
20002ffc l       .text  00000000 
20002ffc l       .text  00000000 
20003000 l       .text  00000000 
20003004 l       .text  00000000 
20003006 l       .text  00000000 
20003006 l       .text  00000000 
20003010 l       .text  00000000 
20003018 l       .text  00000000 
20003018 l       .text  00000000 
2000301a l       .text  00000000 
20003022 l       .text  00000000 
20003028 l       .text  00000000 
2000302c l       .text  00000000 
20003030 l       .text  00000000 
20003032 l       .text  00000000 
20003038 l       .text  00000000 
2000303a l       .text  00000000 
20003042 l       .text  00000000 
20003048 l       .text  00000000 
2000304c l       .text  00000000 
2000304c l       .text  00000000 
2000304e l       .text  00000000 
20003050 l       .text  00000000 
20003050 l       .text  00000000 
20003052 l       .text  00000000 
20003054 l       .text  00000000 
20003058 l       .text  00000000 
20003058 l       .text  00000000 
2000305a l       .text  00000000 
20003060 l       .text  00000000 
20003060 l       .text  00000000 
20003062 l       .text  00000000 
2000306c l       .text  00000000 
2000306e l       .text  00000000 
20003070 l       .text  00000000 
20003072 l       .text  00000000 
20003076 l       .text  00000000 
2000307e l       .text  00000000 
2000307e l       .text  00000000 
20003082 l       .text  00000000 
20003082 l       .text  00000000 
20003082 l       .text  00000000 
20003082 l       .text  00000000 
20003082 l       .text  00000000 
20003084 l       .text  00000000 
20003084 l       .text  00000000 
20003094 l       .text  00000000 
20003096 l       .text  00000000 
20003098 l       .text  00000000 
2000309a l       .text  00000000 
2000309c l       .text  00000000 
200030a0 l       .text  00000000 
200030a4 l       .text  00000000 
200030a4 l       .text  00000000 
200030a8 l       .text  00000000 
200030a8 l       .text  00000000 
200030b0 l       .text  00000000 
200030b4 l       .text  00000000 
200030b6 l       .text  00000000 
200030c0 l       .text  00000000 
200030c2 l       .text  00000000 
200030e0 l       .text  00000000 
200030e0 l       .text  00000000 
200030e4 l       .text  00000000 
200030e4 l       .text  00000000 
200030e8 l       .text  00000000 
200030e8 l       .text  00000000 
200030ec l       .text  00000000 
200030ec l       .text  00000000 
200030f8 l       .text  00000000 
200030fa l       .text  00000000 
20003104 l       .text  00000000 
20003106 l       .text  00000000 
2000311c l       .text  00000000 
2000311c l       .text  00000000 
20003120 l       .text  00000000 
20003120 l       .text  00000000 
20003130 l       .text  00000000 
20003134 l       .text  00000000 
20003134 l       .text  00000000 
20003138 l       .text  00000000 
2000313c l       .text  00000000 
20003144 l       .text  00000000 
20003148 l       .text  00000000 
20003158 l       .text  00000000 
2000315c l       .text  00000000 
2000315c l       .text  00000000 
2000315e l       .text  00000000 
20003160 l       .text  00000000 
20003160 l       .text  00000000 
2000316e l       .text  00000000 
2000316e l       .text  00000000 
20003170 l       .text  00000000 
20003172 l       .text  00000000 
20003172 l       .text  00000000 
2000317e l       .text  00000000 
2000317e l       .text  00000000 
20003182 l       .text  00000000 
20003186 l       .text  00000000 
20003186 l       .text  00000000 
2000318e l       .text  00000000 
20003192 l       .text  00000000 
20003194 l       .text  00000000 
20003196 l       .text  00000000 
20003198 l       .text  00000000 
20003198 l       .text  00000000 
2000319c l       .text  00000000 
2000319c l       .text  00000000 
2000319c l       .text  00000000 
2000319c l       .text  00000000 
2000319c l       .text  00000000 
2000319e l       .text  00000000 
200031a0 l       .text  00000000 
200031a2 l       .text  00000000 
200031a2 l       .text  00000000 
200031a4 l       .text  00000000 
200031a6 l       .text  00000000 
200031aa l       .text  00000000 
200031aa l       .text  00000000 
200031ac l       .text  00000000 
200031ac l       .text  00000000 
200031b4 l       .text  00000000 
200031b4 l       .text  00000000 
200031b8 l       .text  00000000 
200031c0 l       .text  00000000 
200031c8 l       .text  00000000 
200031c8 l       .text  00000000 
200031ca l       .text  00000000 
200031ce l       .text  00000000 
200031d2 l       .text  00000000 
200031d2 l       .text  00000000 
200031d4 l       .text  00000000 
200031d6 l       .text  00000000 
200031d6 l       .text  00000000 
200031dc l       .text  00000000 
200031dc l       .text  00000000 
200031e0 l       .text  00000000 
200031e6 l       .text  00000000 
200031e6 l       .text  00000000 
200031e8 l       .text  00000000 
200031e8 l       .text  00000000 
200031f0 l       .text  00000000 
200031f0 l       .text  00000000 
200031fa l       .text  00000000 
200031fe l       .text  00000000 
20003200 l       .text  00000000 
20003204 l       .text  00000000 
20003208 l       .text  00000000 
2000320a l       .text  00000000 
2000320c l       .text  00000000 
2000320e l       .text  00000000 
2000320e l       .text  00000000 
20003214 l       .text  00000000 
20003216 l       .text  00000000 
20003216 l       .text  00000000 
20003218 l       .text  00000000 
2000321c l       .text  00000000 
2000321c l       .text  00000000 
00006936 l       .debug_loc     00000000 
00006965 l       .debug_loc     00000000 
0000698b l       .debug_loc     00000000 
000069bc l       .debug_loc     00000000 
000069e3 l       .debug_loc     00000000 
00006a40 l       .debug_loc     00000000 
00006a73 l       .debug_loc     00000000 
00006a99 l       .debug_loc     00000000 
00006ab4 l       .debug_loc     00000000 
00006acf l       .debug_loc     00000000 
00006aea l       .debug_loc     00000000 
00006b05 l       .debug_loc     00000000 
00006b38 l       .debug_loc     00000000 
00006b53 l       .debug_loc     00000000 
00006b86 l       .debug_loc     00000000 
00006bb9 l       .debug_loc     00000000 
00006bd4 l       .debug_loc     00000000 
00006bef l       .debug_loc     00000000 
00006c22 l       .debug_loc     00000000 
00006c44 l       .debug_loc     00000000 
00006c5f l       .debug_loc     00000000 
00006c80 l       .debug_loc     00000000 
00006c9b l       .debug_loc     00000000 
00006cb7 l       .debug_loc     00000000 
00006cd2 l       .debug_loc     00000000 
00006d03 l       .debug_loc     00000000 
00006d34 l       .debug_loc     00000000 
00006d5a l       .debug_loc     00000000 
00006d8b l       .debug_loc     00000000 
00006db2 l       .debug_loc     00000000 
00006dcd l       .debug_loc     00000000 
00006df9 l       .debug_loc     00000000 
00006e14 l       .debug_loc     00000000 
00006e40 l       .debug_loc     00000000 
00006e71 l       .debug_loc     00000000 
00006e8c l       .debug_loc     00000000 
00006ea8 l       .debug_loc     00000000 
00006ec3 l       .debug_loc     00000000 
00006ef4 l       .debug_loc     00000000 
00006f25 l       .debug_loc     00000000 
00006f56 l       .debug_loc     00000000 
00006f7d l       .debug_loc     00000000 
00006f9c l       .debug_loc     00000000 
00006fcf l       .debug_loc     00000000 
00006feb l       .debug_loc     00000000 
0000702b l       .debug_loc     00000000 
000071ab l       .debug_loc     00000000 
000071c7 l       .debug_loc     00000000 
000071e2 l       .debug_loc     00000000 
0000726a l       .debug_loc     00000000 
0000729a l       .debug_loc     00000000 
000072c4 l       .debug_loc     00000000 
000072df l       .debug_loc     00000000 
000072fa l       .debug_loc     00000000 
00007315 l       .debug_loc     00000000 
00007330 l       .debug_loc     00000000 
0000734b l       .debug_loc     00000000 
00007366 l       .debug_loc     00000000 
00007382 l       .debug_loc     00000000 
0000739d l       .debug_loc     00000000 
000073b8 l       .debug_loc     00000000 
000073d3 l       .debug_loc     00000000 
00007403 l       .debug_loc     00000000 
0000741e l       .debug_loc     00000000 
00007450 l       .debug_loc     00000000 
0000748e l       .debug_loc     00000000 
000074a9 l       .debug_loc     00000000 
000074f1 l       .debug_loc     00000000 
0000752f l       .debug_loc     00000000 
00007555 l       .debug_loc     00000000 
00007570 l       .debug_loc     00000000 
0000758b l       .debug_loc     00000000 
000075a6 l       .debug_loc     00000000 
000075c1 l       .debug_loc     00000000 
000075dc l       .debug_loc     00000000 
000075f7 l       .debug_loc     00000000 
00007612 l       .debug_loc     00000000 
0000764b l       .debug_loc     00000000 
00007666 l       .debug_loc     00000000 
00007681 l       .debug_loc     00000000 
0000769c l       .debug_loc     00000000 
000076b7 l       .debug_loc     00000000 
000076d2 l       .debug_loc     00000000 
00007712 l       .debug_loc     00000000 
0000772d l       .debug_loc     00000000 
0000775e l       .debug_loc     00000000 
00007784 l       .debug_loc     00000000 
000077b5 l       .debug_loc     00000000 
000077e6 l       .debug_loc     00000000 
00007801 l       .debug_loc     00000000 
0000781c l       .debug_loc     00000000 
00007842 l       .debug_loc     00000000 
00007873 l       .debug_loc     00000000 
00007899 l       .debug_loc     00000000 
000078ca l       .debug_loc     00000000 
000078e6 l       .debug_loc     00000000 
0000790c l       .debug_loc     00000000 
0000793d l       .debug_loc     00000000 
00007958 l       .debug_loc     00000000 
00007973 l       .debug_loc     00000000 
00007999 l       .debug_loc     00000000 
000079bf l       .debug_loc     00000000 
000079da l       .debug_loc     00000000 
000079f5 l       .debug_loc     00000000 
00007a2f l       .debug_loc     00000000 
00007a4a l       .debug_loc     00000000 
00007a65 l       .debug_loc     00000000 
00007a81 l       .debug_loc     00000000 
00007a9c l       .debug_loc     00000000 
00007ab7 l       .debug_loc     00000000 
00007af7 l       .debug_loc     00000000 
00007b1d l       .debug_loc     00000000 
00007b4e l       .debug_loc     00000000 
00007b82 l       .debug_loc     00000000 
00007bb3 l       .debug_loc     00000000 
00007be4 l       .debug_loc     00000000 
00007c03 l       .debug_loc     00000000 
00007c2a l       .debug_loc     00000000 
00007c45 l       .debug_loc     00000000 
00007cde l       .debug_loc     00000000 
00007d10 l       .debug_loc     00000000 
00007d59 l       .debug_loc     00000000 
00007d8a l       .debug_loc     00000000 
00007db0 l       .debug_loc     00000000 
00007e10 l       .debug_loc     00000000 
00007e36 l       .debug_loc     00000000 
00007e5c l       .debug_loc     00000000 
00007e82 l       .debug_loc     00000000 
00007ea8 l       .debug_loc     00000000 
00007ec3 l       .debug_loc     00000000 
00007ef3 l       .debug_loc     00000000 
00007f19 l       .debug_loc     00000000 
00007f4b l       .debug_loc     00000000 
00007f89 l       .debug_loc     00000000 
00007fb6 l       .debug_loc     00000000 
00007fd1 l       .debug_loc     00000000 
00008004 l       .debug_loc     00000000 
0000801f l       .debug_loc     00000000 
0000805b l       .debug_loc     00000000 
00008097 l       .debug_loc     00000000 
000080d3 l       .debug_loc     00000000 
000080f9 l       .debug_loc     00000000 
0000811f l       .debug_loc     00000000 
00008145 l       .debug_loc     00000000 
0000816c l       .debug_loc     00000000 
00008193 l       .debug_loc     00000000 
000081b9 l       .debug_loc     00000000 
000081df l       .debug_loc     00000000 
000081fa l       .debug_loc     00000000 
00008221 l       .debug_loc     00000000 
00008248 l       .debug_loc     00000000 
00008284 l       .debug_loc     00000000 
000082c0 l       .debug_loc     00000000 
000082db l       .debug_loc     00000000 
000082f6 l       .debug_loc     00000000 
00008311 l       .debug_loc     00000000 
0000837e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00007d27 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000d00 l       .debug_ranges  00000000 
00007d45 l       .debug_str     00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00007d64 l       .debug_str     00000000 
00007d7c l       .debug_str     00000000 
00007d70 l       .debug_str     00000000 
00008de7 l       .debug_str     00000000 
00004a66 l       .debug_str     00000000 
00002842 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00007d8a l       .debug_str     00000000 
00001fa7 l       .debug_str     00000000 
00007dad l       .debug_str     00000000 
00007dcc l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00007ddf l       .debug_str     00000000 
00007dfd l       .debug_str     00000000 
00007e18 l       .debug_str     00000000 
00007e3b l       .debug_str     00000000 
00007e50 l       .debug_str     00000000 
00007e5a l       .debug_str     00000000 
0000828a l       .debug_str     00000000 
00007e68 l       .debug_str     00000000 
0000a597 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
0000940a l       .debug_str     00000000 
00008134 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00008327 l       .debug_str     00000000 
00009f6f l       .debug_str     00000000 
00008060 l       .debug_str     00000000 
0000836f l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
00007e72 l       .debug_str     00000000 
00007e7e l       .debug_str     00000000 
00007e8b l       .debug_str     00000000 
00007eda l       .debug_str     00000000 
00007ec9 l       .debug_str     00000000 
00007ea2 l       .debug_str     00000000 
00007eb1 l       .debug_str     00000000 
00007ec0 l       .debug_str     00000000 
00007eed l       .debug_str     00000000 
00002702 l       .debug_str     00000000 
000026c6 l       .debug_str     00000000 
000026e4 l       .debug_str     00000000 
00002796 l       .debug_str     00000000 
0000273f l       .debug_str     00000000 
00002759 l       .debug_str     00000000 
00002779 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
0000222b l       .debug_str     00000000 
0000210a l       .debug_str     00000000 
0000210e l       .debug_str     00000000 
00002119 l       .debug_str     00000000 
00002122 l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00002145 l       .debug_str     00000000 
0000214f l       .debug_str     00000000 
0000215e l       .debug_str     00000000 
00002170 l       .debug_str     00000000 
00002183 l       .debug_str     00000000 
00002197 l       .debug_str     00000000 
000021a0 l       .debug_str     00000000 
000021ac l       .debug_str     00000000 
000021bb l       .debug_str     00000000 
000021c5 l       .debug_str     00000000 
000021d2 l       .debug_str     00000000 
000021dc l       .debug_str     00000000 
000021ed l       .debug_str     00000000 
00002ef8 l       .debug_str     00000000 
00002e72 l       .debug_str     00000000 
00002e95 l       .debug_str     00000000 
00002eb9 l       .debug_str     00000000 
00002eda l       .debug_str     00000000 
00007ef8 l       .debug_str     00000000 
00007f01 l       .debug_str     00000000 
00007f0c l       .debug_str     00000000 
00007f14 l       .debug_str     00000000 
00007f20 l       .debug_str     00000000 
00007f2c l       .debug_str     00000000 
00007f39 l       .debug_str     00000000 
00007f49 l       .debug_str     00000000 
00007f5a l       .debug_str     00000000 
00007f67 l       .debug_str     00000000 
00007f70 l       .debug_str     00000000 
00007f7a l       .debug_str     00000000 
00007f84 l       .debug_str     00000000 
00007f8f l       .debug_str     00000000 
00007f99 l       .debug_str     00000000 
00007fa4 l       .debug_str     00000000 
00007fb2 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
00002804 l       .debug_str     00000000 
000027ee l       .debug_str     00000000 
000069c1 l       .debug_str     00000000 
000027cf l       .debug_str     00000000 
000026ac l       .debug_str     00000000 
0000269d l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000027d6 l       .debug_str     00000000 
000027c0 l       .debug_str     00000000 
000026bd l       .debug_str     00000000 
00002736 l       .debug_str     00000000 
0000279e l       .debug_str     00000000 
0000271b l       .debug_str     00000000 
000027aa l       .debug_str     00000000 
00002248 l       .debug_str     00000000 
00002837 l       .debug_str     00000000 
0000282e l       .debug_str     00000000 
00007fc5 l       .debug_str     00000000 
000050c7 l       .debug_str     00000000 
00007fba l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
000081c8 l       .debug_str     00000000 
00004a57 l       .debug_str     00000000 
00007fd9 l       .debug_str     00000000 
00007fef l       .debug_str     00000000 
00002692 l       .debug_str     00000000 
00008002 l       .debug_str     00000000 
00008019 l       .debug_str     00000000 
0000802a l       .debug_str     00000000 
00008040 l       .debug_str     00000000 
00008053 l       .debug_str     00000000 
000003c8 l       .debug_str     00000000 
0000806d l       .debug_str     00000000 
00008064 l       .debug_str     00000000 
0000807f l       .debug_str     00000000 
00008091 l       .debug_str     00000000 
0000809b l       .debug_str     00000000 
000081d6 l       .debug_str     00000000 
00008297 l       .debug_str     00000000 
000082a6 l       .debug_str     00000000 
00000b18 l       .debug_ranges  00000000 
000080ad l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00008275 l       .debug_str     00000000 
00008077 l       .debug_str     00000000 
00008337 l       .debug_str     00000000 
0000834e l       .debug_str     00000000 
00000cb8 l       .debug_ranges  00000000 
00004b8d l       .debug_str     00000000 
000087bd l       .debug_str     00000000 
00008e4c l       .debug_str     00000000 
00002326 l       .debug_str     00000000 
00002495 l       .debug_str     00000000 
00000cd0 l       .debug_ranges  00000000 
0000835e l       .debug_str     00000000 
00000ce8 l       .debug_ranges  00000000 
00004a6b l       .debug_str     00000000 
000081ea l       .debug_str     00000000 
00002829 l       .debug_str     00000000 
000080d2 l       .debug_str     00000000 
000080ec l       .debug_str     00000000 
00004dab l       .debug_str     00000000 
00004b1f l       .debug_str     00000000 
00007ce1 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000285 l       .debug_str     00000000 
00007cf8 l       .debug_str     00000000 
00007cee l       .debug_str     00000000 
00006c82 l       .debug_str     00000000 
00000b30 l       .debug_ranges  00000000 
000081f8 l       .debug_str     00000000 
000082ed l       .debug_str     00000000 
000082b2 l       .debug_str     00000000 
00000b48 l       .debug_ranges  00000000 
00008178 l       .debug_str     00000000 
00000b68 l       .debug_ranges  00000000 
00000b90 l       .debug_ranges  00000000 
00000bb0 l       .debug_ranges  00000000 
00000bd0 l       .debug_ranges  00000000 
00000bf0 l       .debug_ranges  00000000 
00000c10 l       .debug_ranges  00000000 
00000c30 l       .debug_ranges  00000000 
000080fc l       .debug_str     00000000 
00008112 l       .debug_str     00000000 
00009e83 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000811b l       .debug_str     00000000 
00008159 l       .debug_str     00000000 
00008146 l       .debug_str     00000000 
00008123 l       .debug_str     00000000 
00006550 l       .debug_str     00000000 
0000813c l       .debug_str     00000000 
00008162 l       .debug_str     00000000 
00008174 l       .debug_str     00000000 
00003bb2 l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
0000891b l       .debug_str     00000000 
000088fc l       .debug_str     00000000 
0000817d l       .debug_str     00000000 
0000818a l       .debug_str     00000000 
00008192 l       .debug_str     00000000 
0000a197 l       .debug_str     00000000 
00008196 l       .debug_str     00000000 
0000a1a2 l       .debug_str     00000000 
00004d72 l       .debug_str     00000000 
0000826c l       .debug_str     00000000 
00008095 l       .debug_str     00000000 
0000831c l       .debug_str     00000000 
0000830a l       .debug_str     00000000 
0000832e l       .debug_str     00000000 
00001b49 l       .debug_str     00000000 
00008206 l       .debug_str     00000000 
00008214 l       .debug_str     00000000 
000082bc l       .debug_str     00000000 
00004b4d l       .debug_str     00000000 
00008222 l       .debug_str     00000000 
0000819a l       .debug_str     00000000 
00007ed6 l       .debug_str     00000000 
0000822f l       .debug_str     00000000 
00008259 l       .debug_str     00000000 
000082d9 l       .debug_str     00000000 
00000c48 l       .debug_ranges  00000000 
00007ebb l       .debug_str     00000000 
00000c60 l       .debug_ranges  00000000 
000082c5 l       .debug_str     00000000 
000082e8 l       .debug_str     00000000 
000082fb l       .debug_str     00000000 
00000c80 l       .debug_ranges  00000000 
00008787 l       .debug_str     00000000 
00000c98 l       .debug_ranges  00000000 
000082d2 l       .debug_str     00000000 
00008313 l       .debug_str     00000000 
0000a42e l       .debug_str     00000000 
000081ac l       .debug_str     00000000 
000081c0 l       .debug_str     00000000 
0000823c l       .debug_str     00000000 
0000824b l       .debug_str     00000000 
00004dc2 l       .debug_str     00000000 
00004d08 l       .debug_str     00000000 
00004d2a l       .debug_str     00000000 
000023be l       .debug_str     00000000 
0000248e l       .debug_str     00000000 
00000d60 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 status.c
2000321c l       .text  00000000 
2000321c l       .text  00000000 
2000321c l       .text  00000000 
2000321e l       .text  00000000 
2000321e l       .text  00000000 
20003220 l       .text  00000000 
20003222 l       .text  00000000 
20003224 l       .text  00000000 
20003224 l       .text  00000000 
20003228 l       .text  00000000 
2000322a l       .text  00000000 
2000322c l       .text  00000000 
20003234 l       .text  00000000 
20003236 l       .text  00000000 
20003238 l       .text  00000000 
2000323c l       .text  00000000 
20003240 l       .text  00000000 
20003248 l       .text  00000000 
20003248 l       .text  00000000 
2000324c l       .text  00000000 
2000325e l       .text  00000000 
2000325e l       .text  00000000 
20003262 l       .text  00000000 
2000326a l       .text  00000000 
2000326a l       .text  00000000 
20003278 l       .text  00000000 
2000327a l       .text  00000000 
200032a0 l       .text  00000000 
200032a2 l       .text  00000000 
200032cc l       .text  00000000 
200032ce l       .text  00000000 
200032d2 l       .text  00000000 
200032d2 l       .text  00000000 
200032d4 l       .text  00000000 
200032d4 l       .text  00000000 
200032d6 l       .text  00000000 
200032da l       .text  00000000 
200032da l       .text  00000000 
200032dc l       .text  00000000 
200032e2 l       .text  00000000 
200032e2 l       .text  00000000 
200032e6 l       .text  00000000 
200032e6 l       .text  00000000 
200032e6 l       .text  00000000 
200032e6 l       .text  00000000 
200032e6 l       .text  00000000 
200032e6 l       .text  00000000 
200032f2 l       .text  00000000 
200032fe l       .text  00000000 
200032fe l       .text  00000000 
20003302 l       .text  00000000 
20003304 l       .text  00000000 
20003308 l       .text  00000000 
20003308 l       .text  00000000 
20003316 l       .text  00000000 
20003318 l       .text  00000000 
2000331a l       .text  00000000 
2000331a l       .text  00000000 
2000331e l       .text  00000000 
20003320 l       .text  00000000 
20003320 l       .text  00000000 
20003322 l       .text  00000000 
2000332c l       .text  00000000 
2000332c l       .text  00000000 
20003330 l       .text  00000000 
2000333a l       .text  00000000 
2000333a l       .text  00000000 
2000333e l       .text  00000000 
20003340 l       .text  00000000 
20003346 l       .text  00000000 
20003346 l       .text  00000000 
2000334c l       .text  00000000 
2000334c l       .text  00000000 
2000334e l       .text  00000000 
2000334e l       .text  00000000 
20003352 l       .text  00000000 
20003354 l       .text  00000000 
20003354 l       .text  00000000 
000083ad l       .debug_loc     00000000 
000083c8 l       .debug_loc     00000000 
000083f9 l       .debug_loc     00000000 
0000841f l       .debug_loc     00000000 
00008445 l       .debug_loc     00000000 
00008460 l       .debug_loc     00000000 
00008482 l       .debug_loc     00000000 
000084a9 l       .debug_loc     00000000 
000084c4 l       .debug_loc     00000000 
000084eb l       .debug_loc     00000000 
0000850f l       .debug_loc     00000000 
00008535 l       .debug_loc     00000000 
0000855b l       .debug_loc     00000000 
000085aa l       .debug_loc     00000000 
000085c5 l       .debug_loc     00000000 
000085e9 l       .debug_loc     00000000 
00008604 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00008375 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000dd8 l       .debug_ranges  00000000 
00008391 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
0000839b l       .debug_str     00000000 
0000222b l       .debug_str     00000000 
0000210a l       .debug_str     00000000 
0000210e l       .debug_str     00000000 
00002119 l       .debug_str     00000000 
00002122 l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00002145 l       .debug_str     00000000 
0000214f l       .debug_str     00000000 
0000215e l       .debug_str     00000000 
00002170 l       .debug_str     00000000 
00002183 l       .debug_str     00000000 
00002197 l       .debug_str     00000000 
000021a0 l       .debug_str     00000000 
000021ac l       .debug_str     00000000 
000021bb l       .debug_str     00000000 
000021c5 l       .debug_str     00000000 
000021d2 l       .debug_str     00000000 
000021dc l       .debug_str     00000000 
000021ed l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00001fa7 l       .debug_str     00000000 
00002248 l       .debug_str     00000000 
000083a8 l       .debug_str     00000000 
000001db l       .debug_str     00000000 
00001e19 l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
000023be l       .debug_str     00000000 
00008e4c l       .debug_str     00000000 
00001f4c l       .debug_str     00000000 
00008196 l       .debug_str     00000000 
00000dc0 l       .debug_ranges  00000000 
0000231f l       .debug_str     00000000 
000062f2 l       .debug_str     00000000 
0000891b l       .debug_str     00000000 
000088fc l       .debug_str     00000000 
000062f4 l       .debug_str     00000000 
00004d72 l       .debug_str     00000000 
00004b95 l       .debug_str     00000000 
00002326 l       .debug_str     00000000 
000083b1 l       .debug_str     00000000 
0000248e l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00000fcc l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_spi_device_autogen.c
20003354 l       .text  00000000 
20003354 l       .text  00000000 
20003354 l       .text  00000000 
20003354 l       .text  00000000 
20003356 l       .text  00000000 
20003358 l       .text  00000000 
2000335c l       .text  00000000 
2000335e l       .text  00000000 
20003360 l       .text  00000000 
20003362 l       .text  00000000 
20003362 l       .text  00000000 
20003362 l       .text  00000000 
20003362 l       .text  00000000 
20003362 l       .text  00000000 
20003362 l       .text  00000000 
2000336a l       .text  00000000 
2000337a l       .text  00000000 
2000337c l       .text  00000000 
2000337c l       .text  00000000 
2000337e l       .text  00000000 
2000337e l       .text  00000000 
20003380 l       .text  00000000 
20003380 l       .text  00000000 
20003384 l       .text  00000000 
20003384 l       .text  00000000 
20003388 l       .text  00000000 
20003388 l       .text  00000000 
2000338c l       .text  00000000 
2000338c l       .text  00000000 
2000338c l       .text  00000000 
2000338c l       .text  00000000 
2000338c l       .text  00000000 
2000338c l       .text  00000000 
20003394 l       .text  00000000 
2000339a l       .text  00000000 
2000339a l       .text  00000000 
2000339c l       .text  00000000 
2000339c l       .text  00000000 
2000339e l       .text  00000000 
2000339e l       .text  00000000 
200033a2 l       .text  00000000 
200033a2 l       .text  00000000 
200033a4 l       .text  00000000 
200033a4 l       .text  00000000 
200033a8 l       .text  00000000 
200033a8 l       .text  00000000 
0000861f l       .debug_loc     00000000 
0000863a l       .debug_loc     00000000 
00008655 l       .debug_loc     00000000 
00008670 l       .debug_loc     00000000 
0000868c l       .debug_loc     00000000 
000086a8 l       .debug_loc     00000000 
000086c3 l       .debug_loc     00000000 
000086de l       .debug_loc     00000000 
000086f9 l       .debug_loc     00000000 
00008714 l       .debug_loc     00000000 
0000873a l       .debug_loc     00000000 
00008755 l       .debug_loc     00000000 
00008770 l       .debug_loc     00000000 
0000878b l       .debug_loc     00000000 
000087a6 l       .debug_loc     00000000 
000087cc l       .debug_loc     00000000 
000087e7 l       .debug_loc     00000000 
00008802 l       .debug_loc     00000000 
0000881d l       .debug_loc     00000000 
00008844 l       .debug_loc     00000000 
00008873 l       .debug_loc     00000000 
0000888e l       .debug_loc     00000000 
000088a9 l       .debug_loc     00000000 
000088c4 l       .debug_loc     00000000 
000088df l       .debug_loc     00000000 
00008906 l       .debug_loc     00000000 
00008935 l       .debug_loc     00000000 
00008950 l       .debug_loc     00000000 
0000896b l       .debug_loc     00000000 
00008986 l       .debug_loc     00000000 
000089a1 l       .debug_loc     00000000 
000089bc l       .debug_loc     00000000 
000089d7 l       .debug_loc     00000000 
000089f2 l       .debug_loc     00000000 
00008a0d l       .debug_loc     00000000 
00008a33 l       .debug_loc     00000000 
00008a59 l       .debug_loc     00000000 
00008a88 l       .debug_loc     00000000 
00008aa3 l       .debug_loc     00000000 
00008abe l       .debug_loc     00000000 
00008ad9 l       .debug_loc     00000000 
00008af9 l       .debug_loc     00000000 
00008b1f l       .debug_loc     00000000 
00008b45 l       .debug_loc     00000000 
00008b60 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000083bb l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000e08 l       .debug_ranges  00000000 
0000165d l       .debug_str     00000000 
00001697 l       .debug_str     00000000 
0000168a l       .debug_str     00000000 
00001667 l       .debug_str     00000000 
00001678 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
0000840b l       .debug_str     00000000 
000083ee l       .debug_str     00000000 
00005a3c l       .debug_str     00000000 
0000592d l       .debug_str     00000000 
00005953 l       .debug_str     00000000 
00005979 l       .debug_str     00000000 
0000599f l       .debug_str     00000000 
000059c0 l       .debug_str     00000000 
000059dc l       .debug_str     00000000 
000059fe l       .debug_str     00000000 
00005a1e l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00008420 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
00002692 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
00008434 l       .debug_str     00000000 
000073ab l       .debug_str     00000000 
00001b43 l       .debug_str     00000000 
00001b4d l       .debug_str     00000000 
0000844f l       .debug_str     00000000 
00005a4b l       .debug_str     00000000 
00006550 l       .debug_str     00000000 
0000195e l       .debug_str     00000000 
0000846b l       .debug_str     00000000 
00001b6b l       .debug_str     00000000 
00008488 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00005cc3 l       .debug_str     00000000 
000074f0 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
00001b92 l       .debug_str     00000000 
000084ad l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
000019e0 l       .debug_str     00000000 
00005e48 l       .debug_str     00000000 
000084d0 l       .debug_str     00000000 
000087be l       .debug_str     00000000 
00001bab l       .debug_str     00000000 
000084e9 l       .debug_str     00000000 
000084a7 l       .debug_str     00000000 
00001bc6 l       .debug_str     00000000 
00001bd6 l       .debug_str     00000000 
00008508 l       .debug_str     00000000 
00001be1 l       .debug_str     00000000 
00008527 l       .debug_str     00000000 
00008546 l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
000026ac l       .debug_str     00000000 
0000269d l       .debug_str     00000000 
00008565 l       .debug_str     00000000 
00005ce1 l       .debug_str     00000000 
0000857c l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
000085a0 l       .debug_str     00000000 
00001030 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_spi_device.c
200033a8 l       .text  00000000 
200033a8 l       .text  00000000 
200033a8 l       .text  00000000 
200033a8 l       .text  00000000 
200033aa l       .text  00000000 
200033ac l       .text  00000000 
200033ac l       .text  00000000 
200033ae l       .text  00000000 
200033b0 l       .text  00000000 
200033b0 l       .text  00000000 
200033b0 l       .text  00000000 
200033b0 l       .text  00000000 
200033b0 l       .text  00000000 
200033b2 l       .text  00000000 
200033b4 l       .text  00000000 
200033b8 l       .text  00000000 
200033b8 l       .text  00000000 
200033bc l       .text  00000000 
200033bc l       .text  00000000 
200033c0 l       .text  00000000 
200033c0 l       .text  00000000 
200033c2 l       .text  00000000 
200033c6 l       .text  00000000 
200033c6 l       .text  00000000 
200033c8 l       .text  00000000 
200033c8 l       .text  00000000 
200033ca l       .text  00000000 
200033ca l       .text  00000000 
200033cc l       .text  00000000 
200033cc l       .text  00000000 
200033d0 l       .text  00000000 
200033d0 l       .text  00000000 
200033d2 l       .text  00000000 
200033d2 l       .text  00000000 
200033d4 l       .text  00000000 
200033d4 l       .text  00000000 
200033d6 l       .text  00000000 
200033d6 l       .text  00000000 
200033d8 l       .text  00000000 
200033d8 l       .text  00000000 
200033da l       .text  00000000 
200033da l       .text  00000000 
200033de l       .text  00000000 
200033de l       .text  00000000 
200033e0 l       .text  00000000 
200033e2 l       .text  00000000 
200033e4 l       .text  00000000 
200033e4 l       .text  00000000 
200033e6 l       .text  00000000 
200033e6 l       .text  00000000 
200033f0 l       .text  00000000 
200033f0 l       .text  00000000 
200033f2 l       .text  00000000 
200033f4 l       .text  00000000 
200033f4 l       .text  00000000 
200033f6 l       .text  00000000 
200033f8 l       .text  00000000 
200033f8 l       .text  00000000 
200033f8 l       .text  00000000 
200033f8 l       .text  00000000 
200033f8 l       .text  00000000 
200033f8 l       .text  00000000 
20003400 l       .text  00000000 
20003406 l       .text  00000000 
20003408 l       .text  00000000 
20003408 l       .text  00000000 
2000340a l       .text  00000000 
2000340a l       .text  00000000 
2000340c l       .text  00000000 
2000340c l       .text  00000000 
2000340e l       .text  00000000 
2000340e l       .text  00000000 
20003410 l       .text  00000000 
20003414 l       .text  00000000 
20003414 l       .text  00000000 
20003414 l       .text  00000000 
20003414 l       .text  00000000 
20003414 l       .text  00000000 
20003414 l       .text  00000000 
2000341c l       .text  00000000 
20003422 l       .text  00000000 
20003424 l       .text  00000000 
20003424 l       .text  00000000 
20003426 l       .text  00000000 
20003426 l       .text  00000000 
20003428 l       .text  00000000 
20003428 l       .text  00000000 
2000342a l       .text  00000000 
2000342e l       .text  00000000 
2000342e l       .text  00000000 
2000342e l       .text  00000000 
2000342e l       .text  00000000 
2000342e l       .text  00000000 
2000342e l       .text  00000000 
2000343a l       .text  00000000 
2000344a l       .text  00000000 
2000344a l       .text  00000000 
2000344c l       .text  00000000 
2000344c l       .text  00000000 
20003450 l       .text  00000000 
20003454 l       .text  00000000 
20003454 l       .text  00000000 
2000345a l       .text  00000000 
2000345a l       .text  00000000 
2000345e l       .text  00000000 
20003464 l       .text  00000000 
20003468 l       .text  00000000 
2000346a l       .text  00000000 
2000346e l       .text  00000000 
20003470 l       .text  00000000 
20003474 l       .text  00000000 
2000347c l       .text  00000000 
20003484 l       .text  00000000 
20003488 l       .text  00000000 
2000348a l       .text  00000000 
2000348e l       .text  00000000 
20003492 l       .text  00000000 
20003494 l       .text  00000000 
20003498 l       .text  00000000 
20003498 l       .text  00000000 
2000349e l       .text  00000000 
200034a2 l       .text  00000000 
200034a2 l       .text  00000000 
200034a6 l       .text  00000000 
200034aa l       .text  00000000 
200034b2 l       .text  00000000 
200034b8 l       .text  00000000 
200034c4 l       .text  00000000 
200034ca l       .text  00000000 
200034ce l       .text  00000000 
200034ce l       .text  00000000 
200034d0 l       .text  00000000 
200034d2 l       .text  00000000 
200034d2 l       .text  00000000 
200034d4 l       .text  00000000 
200034d4 l       .text  00000000 
200034d8 l       .text  00000000 
200034d8 l       .text  00000000 
200034da l       .text  00000000 
200034da l       .text  00000000 
200034de l       .text  00000000 
200034de l       .text  00000000 
200034e0 l       .text  00000000 
200034e4 l       .text  00000000 
200034e6 l       .text  00000000 
200034e8 l       .text  00000000 
200034e8 l       .text  00000000 
200034ec l       .text  00000000 
200034ec l       .text  00000000 
200034f0 l       .text  00000000 
200034f0 l       .text  00000000 
200034f4 l       .text  00000000 
200034f4 l       .text  00000000 
200034f6 l       .text  00000000 
200034f6 l       .text  00000000 
200034fa l       .text  00000000 
200034fa l       .text  00000000 
200034fc l       .text  00000000 
200034fc l       .text  00000000 
20003500 l       .text  00000000 
20003500 l       .text  00000000 
20003504 l       .text  00000000 
20003504 l       .text  00000000 
20003508 l       .text  00000000 
20003508 l       .text  00000000 
2000350a l       .text  00000000 
2000350e l       .text  00000000 
2000350e l       .text  00000000 
20003510 l       .text  00000000 
20003510 l       .text  00000000 
20003512 l       .text  00000000 
20003512 l       .text  00000000 
20003514 l       .text  00000000 
20003514 l       .text  00000000 
2000351a l       .text  00000000 
20003520 l       .text  00000000 
20003520 l       .text  00000000 
20003522 l       .text  00000000 
20003522 l       .text  00000000 
20003524 l       .text  00000000 
20003524 l       .text  00000000 
20003528 l       .text  00000000 
20003528 l       .text  00000000 
2000352a l       .text  00000000 
2000352a l       .text  00000000 
2000352e l       .text  00000000 
2000352e l       .text  00000000 
2000352e l       .text  00000000 
2000352e l       .text  00000000 
2000352e l       .text  00000000 
2000352e l       .text  00000000 
20003536 l       .text  00000000 
2000353c l       .text  00000000 
2000353e l       .text  00000000 
2000353e l       .text  00000000 
20003540 l       .text  00000000 
20003540 l       .text  00000000 
20003542 l       .text  00000000 
20003542 l       .text  00000000 
20003544 l       .text  00000000 
20003544 l       .text  00000000 
20003548 l       .text  00000000 
2000354c l       .text  00000000 
2000354c l       .text  00000000 
2000354c l       .text  00000000 
2000354c l       .text  00000000 
2000354c l       .text  00000000 
2000354c l       .text  00000000 
20003554 l       .text  00000000 
2000355a l       .text  00000000 
2000355c l       .text  00000000 
2000355c l       .text  00000000 
2000355e l       .text  00000000 
2000355e l       .text  00000000 
20003560 l       .text  00000000 
20003560 l       .text  00000000 
20003562 l       .text  00000000 
20003564 l       .text  00000000 
20003568 l       .text  00000000 
2000356c l       .text  00000000 
2000356c l       .text  00000000 
2000356c l       .text  00000000 
2000356c l       .text  00000000 
2000356c l       .text  00000000 
2000356c l       .text  00000000 
20003574 l       .text  00000000 
20003580 l       .text  00000000 
20003582 l       .text  00000000 
20003582 l       .text  00000000 
20003584 l       .text  00000000 
20003584 l       .text  00000000 
20003586 l       .text  00000000 
20003586 l       .text  00000000 
2000358a l       .text  00000000 
2000358e l       .text  00000000 
2000358e l       .text  00000000 
20003590 l       .text  00000000 
20003592 l       .text  00000000 
20003592 l       .text  00000000 
20003594 l       .text  00000000 
20003594 l       .text  00000000 
20003598 l       .text  00000000 
20003598 l       .text  00000000 
20003598 l       .text  00000000 
20003598 l       .text  00000000 
20003598 l       .text  00000000 
2000359a l       .text  00000000 
2000359a l       .text  00000000 
200035a2 l       .text  00000000 
200035a8 l       .text  00000000 
200035aa l       .text  00000000 
200035aa l       .text  00000000 
200035ac l       .text  00000000 
200035ac l       .text  00000000 
200035b2 l       .text  00000000 
200035b2 l       .text  00000000 
200035b4 l       .text  00000000 
200035b4 l       .text  00000000 
200035b6 l       .text  00000000 
200035b6 l       .text  00000000 
200035b8 l       .text  00000000 
200035b8 l       .text  00000000 
200035bc l       .text  00000000 
200035bc l       .text  00000000 
200035be l       .text  00000000 
200035be l       .text  00000000 
200035be l       .text  00000000 
200035be l       .text  00000000 
200035be l       .text  00000000 
200035c0 l       .text  00000000 
200035c0 l       .text  00000000 
200035c8 l       .text  00000000 
200035ce l       .text  00000000 
200035d0 l       .text  00000000 
200035d0 l       .text  00000000 
200035d2 l       .text  00000000 
200035d2 l       .text  00000000 
200035d8 l       .text  00000000 
200035dc l       .text  00000000 
200035dc l       .text  00000000 
200035de l       .text  00000000 
200035de l       .text  00000000 
200035e0 l       .text  00000000 
200035e0 l       .text  00000000 
200035e2 l       .text  00000000 
200035e4 l       .text  00000000 
200035e4 l       .text  00000000 
200035e4 l       .text  00000000 
200035e4 l       .text  00000000 
200035e4 l       .text  00000000 
200035e6 l       .text  00000000 
200035e6 l       .text  00000000 
200035ee l       .text  00000000 
200035f4 l       .text  00000000 
200035f4 l       .text  00000000 
20003606 l       .text  00000000 
2000360e l       .text  00000000 
2000360e l       .text  00000000 
20003610 l       .text  00000000 
20003612 l       .text  00000000 
20003612 l       .text  00000000 
2000361a l       .text  00000000 
2000361a l       .text  00000000 
2000361e l       .text  00000000 
20003622 l       .text  00000000 
20003622 l       .text  00000000 
20003628 l       .text  00000000 
20003628 l       .text  00000000 
2000362c l       .text  00000000 
2000362c l       .text  00000000 
2000362c l       .text  00000000 
2000362c l       .text  00000000 
2000362c l       .text  00000000 
2000362e l       .text  00000000 
2000362e l       .text  00000000 
20003630 l       .text  00000000 
20003638 l       .text  00000000 
2000364c l       .text  00000000 
2000364c l       .text  00000000 
20003668 l       .text  00000000 
2000366c l       .text  00000000 
2000366c l       .text  00000000 
2000366e l       .text  00000000 
2000366e l       .text  00000000 
2000367e l       .text  00000000 
20003682 l       .text  00000000 
20003684 l       .text  00000000 
20003684 l       .text  00000000 
2000368a l       .text  00000000 
2000368a l       .text  00000000 
2000368c l       .text  00000000 
2000368c l       .text  00000000 
20003692 l       .text  00000000 
20003692 l       .text  00000000 
20003694 l       .text  00000000 
20003694 l       .text  00000000 
20003698 l       .text  00000000 
2000369c l       .text  00000000 
2000369c l       .text  00000000 
2000369c l       .text  00000000 
2000369c l       .text  00000000 
2000369c l       .text  00000000 
2000369c l       .text  00000000 
2000369e l       .text  00000000 
200036a2 l       .text  00000000 
200036a2 l       .text  00000000 
200036a4 l       .text  00000000 
200036a4 l       .text  00000000 
200036a6 l       .text  00000000 
200036a6 l       .text  00000000 
200036a8 l       .text  00000000 
200036a8 l       .text  00000000 
200036aa l       .text  00000000 
200036aa l       .text  00000000 
200036aa l       .text  00000000 
200036aa l       .text  00000000 
200036aa l       .text  00000000 
200036aa l       .text  00000000 
200036b2 l       .text  00000000 
200036b8 l       .text  00000000 
200036ba l       .text  00000000 
200036ba l       .text  00000000 
200036bc l       .text  00000000 
200036bc l       .text  00000000 
200036be l       .text  00000000 
200036be l       .text  00000000 
200036c0 l       .text  00000000 
200036c4 l       .text  00000000 
200036c4 l       .text  00000000 
00008b7b l       .debug_loc     00000000 
00008b96 l       .debug_loc     00000000 
00008bb1 l       .debug_loc     00000000 
00008bcd l       .debug_loc     00000000 
00008be8 l       .debug_loc     00000000 
00008c0f l       .debug_loc     00000000 
00008c3e l       .debug_loc     00000000 
00008c65 l       .debug_loc     00000000 
00008c87 l       .debug_loc     00000000 
00008ca9 l       .debug_loc     00000000 
00008cc9 l       .debug_loc     00000000 
00008ce9 l       .debug_loc     00000000 
00008d04 l       .debug_loc     00000000 
00008d26 l       .debug_loc     00000000 
00008d4c l       .debug_loc     00000000 
00008d72 l       .debug_loc     00000000 
00008d98 l       .debug_loc     00000000 
00008dba l       .debug_loc     00000000 
00008de0 l       .debug_loc     00000000 
00008dfb l       .debug_loc     00000000 
00008e16 l       .debug_loc     00000000 
00008e31 l       .debug_loc     00000000 
00008e4c l       .debug_loc     00000000 
00008e72 l       .debug_loc     00000000 
00008e98 l       .debug_loc     00000000 
00008eb3 l       .debug_loc     00000000 
00008ed5 l       .debug_loc     00000000 
00008efb l       .debug_loc     00000000 
00008f16 l       .debug_loc     00000000 
00008f38 l       .debug_loc     00000000 
00008f53 l       .debug_loc     00000000 
00008f6e l       .debug_loc     00000000 
00008f89 l       .debug_loc     00000000 
00008fa4 l       .debug_loc     00000000 
00008fbf l       .debug_loc     00000000 
00008fe6 l       .debug_loc     00000000 
00009001 l       .debug_loc     00000000 
0000901c l       .debug_loc     00000000 
00009037 l       .debug_loc     00000000 
00009052 l       .debug_loc     00000000 
0000906d l       .debug_loc     00000000 
00009094 l       .debug_loc     00000000 
000090b6 l       .debug_loc     00000000 
000090d8 l       .debug_loc     00000000 
000090f3 l       .debug_loc     00000000 
0000910e l       .debug_loc     00000000 
00009129 l       .debug_loc     00000000 
0000914d l       .debug_loc     00000000 
00009168 l       .debug_loc     00000000 
0000918c l       .debug_loc     00000000 
000091b2 l       .debug_loc     00000000 
0000923e l       .debug_loc     00000000 
0000925f l       .debug_loc     00000000 
00009286 l       .debug_loc     00000000 
000092aa l       .debug_loc     00000000 
000092ce l       .debug_loc     00000000 
000092e9 l       .debug_loc     00000000 
00009317 l       .debug_loc     00000000 
00009339 l       .debug_loc     00000000 
0000935c l       .debug_loc     00000000 
00009381 l       .debug_loc     00000000 
000093d9 l       .debug_loc     00000000 
000093ff l       .debug_loc     00000000 
00009421 l       .debug_loc     00000000 
00009447 l       .debug_loc     00000000 
00009468 l       .debug_loc     00000000 
0000948a l       .debug_loc     00000000 
000094a5 l       .debug_loc     00000000 
000094c6 l       .debug_loc     00000000 
000094e8 l       .debug_loc     00000000 
00009503 l       .debug_loc     00000000 
0000951e l       .debug_loc     00000000 
00009539 l       .debug_loc     00000000 
00009554 l       .debug_loc     00000000 
0000956f l       .debug_loc     00000000 
0000958a l       .debug_loc     00000000 
000095b1 l       .debug_loc     00000000 
000095d3 l       .debug_loc     00000000 
000095f5 l       .debug_loc     00000000 
00009610 l       .debug_loc     00000000 
0000962b l       .debug_loc     00000000 
00009646 l       .debug_loc     00000000 
00009662 l       .debug_loc     00000000 
00009683 l       .debug_loc     00000000 
000096c0 l       .debug_loc     00000000 
000096db l       .debug_loc     00000000 
0000970e l       .debug_loc     00000000 
00009729 l       .debug_loc     00000000 
00009744 l       .debug_loc     00000000 
0000975f l       .debug_loc     00000000 
00009781 l       .debug_loc     00000000 
0000979c l       .debug_loc     00000000 
000097be l       .debug_loc     00000000 
000097d9 l       .debug_loc     00000000 
000097fb l       .debug_loc     00000000 
0000981e l       .debug_loc     00000000 
00009840 l       .debug_loc     00000000 
0000986c l       .debug_loc     00000000 
00009887 l       .debug_loc     00000000 
000098a9 l       .debug_loc     00000000 
000098c4 l       .debug_loc     00000000 
000098e6 l       .debug_loc     00000000 
00009901 l       .debug_loc     00000000 
00009923 l       .debug_loc     00000000 
0000993e l       .debug_loc     00000000 
00009960 l       .debug_loc     00000000 
0000997c l       .debug_loc     00000000 
0000999e l       .debug_loc     00000000 
000099ba l       .debug_loc     00000000 
000099dc l       .debug_loc     00000000 
000099fe l       .debug_loc     00000000 
00009a19 l       .debug_loc     00000000 
00009a34 l       .debug_loc     00000000 
00009a4f l       .debug_loc     00000000 
00009a70 l       .debug_loc     00000000 
00009a8b l       .debug_loc     00000000 
00009aad l       .debug_loc     00000000 
00009ac8 l       .debug_loc     00000000 
00009ae4 l       .debug_loc     00000000 
00009aff l       .debug_loc     00000000 
00009b1a l       .debug_loc     00000000 
00009b3c l       .debug_loc     00000000 
00009b6d l       .debug_loc     00000000 
00009b8a l       .debug_loc     00000000 
00009ba5 l       .debug_loc     00000000 
00009c4d l       .debug_loc     00000000 
00009c68 l       .debug_loc     00000000 
00009c83 l       .debug_loc     00000000 
00009c9e l       .debug_loc     00000000 
00009cb9 l       .debug_loc     00000000 
00009cd4 l       .debug_loc     00000000 
00009cf6 l       .debug_loc     00000000 
00009d1c l       .debug_loc     00000000 
00009d42 l       .debug_loc     00000000 
00009d62 l       .debug_loc     00000000 
00009d82 l       .debug_loc     00000000 
00009da2 l       .debug_loc     00000000 
00009dbd l       .debug_loc     00000000 
00009dd8 l       .debug_loc     00000000 
00009df3 l       .debug_loc     00000000 
00009e0e l       .debug_loc     00000000 
00009e29 l       .debug_loc     00000000 
00009e4b l       .debug_loc     00000000 
00009e71 l       .debug_loc     00000000 
00009e97 l       .debug_loc     00000000 
00009eb7 l       .debug_loc     00000000 
00009ed7 l       .debug_loc     00000000 
00009ef7 l       .debug_loc     00000000 
00009f12 l       .debug_loc     00000000 
00009f2d l       .debug_loc     00000000 
00009f48 l       .debug_loc     00000000 
00009f63 l       .debug_loc     00000000 
00009f7e l       .debug_loc     00000000 
00009fa0 l       .debug_loc     00000000 
00009fc6 l       .debug_loc     00000000 
00009fec l       .debug_loc     00000000 
0000a00c l       .debug_loc     00000000 
0000a02c l       .debug_loc     00000000 
0000a04c l       .debug_loc     00000000 
0000a067 l       .debug_loc     00000000 
0000a082 l       .debug_loc     00000000 
0000a09d l       .debug_loc     00000000 
0000a0b8 l       .debug_loc     00000000 
0000a0d3 l       .debug_loc     00000000 
0000a0f5 l       .debug_loc     00000000 
0000a11b l       .debug_loc     00000000 
0000a141 l       .debug_loc     00000000 
0000a161 l       .debug_loc     00000000 
0000a181 l       .debug_loc     00000000 
0000a1a1 l       .debug_loc     00000000 
0000a1c7 l       .debug_loc     00000000 
0000a1ed l       .debug_loc     00000000 
0000a213 l       .debug_loc     00000000 
0000a239 l       .debug_loc     00000000 
0000a254 l       .debug_loc     00000000 
0000a26f l       .debug_loc     00000000 
0000a28a l       .debug_loc     00000000 
0000a2a5 l       .debug_loc     00000000 
0000a2c0 l       .debug_loc     00000000 
0000a2db l       .debug_loc     00000000 
0000a2f6 l       .debug_loc     00000000 
0000a311 l       .debug_loc     00000000 
0000a32c l       .debug_loc     00000000 
0000a347 l       .debug_loc     00000000 
0000a36b l       .debug_loc     00000000 
0000a391 l       .debug_loc     00000000 
0000a3ac l       .debug_loc     00000000 
0000a3c7 l       .debug_loc     00000000 
0000a3e2 l       .debug_loc     00000000 
0000a408 l       .debug_loc     00000000 
0000a423 l       .debug_loc     00000000 
0000a43e l       .debug_loc     00000000 
0000a459 l       .debug_loc     00000000 
0000a474 l       .debug_loc     00000000 
0000a49a l       .debug_loc     00000000 
0000a4b5 l       .debug_loc     00000000 
0000a4d9 l       .debug_loc     00000000 
0000a4f4 l       .debug_loc     00000000 
0000a50f l       .debug_loc     00000000 
0000a52a l       .debug_loc     00000000 
0000a545 l       .debug_loc     00000000 
0000a560 l       .debug_loc     00000000 
0000a57b l       .debug_loc     00000000 
0000a596 l       .debug_loc     00000000 
0000a5b2 l       .debug_loc     00000000 
0000a5e1 l       .debug_loc     00000000 
0000a5fc l       .debug_loc     00000000 
0000a617 l       .debug_loc     00000000 
0000a632 l       .debug_loc     00000000 
0000a64d l       .debug_loc     00000000 
0000a668 l       .debug_loc     00000000 
0000a683 l       .debug_loc     00000000 
0000a69e l       .debug_loc     00000000 
0000a6b9 l       .debug_loc     00000000 
0000a6d7 l       .debug_loc     00000000 
0000a6fd l       .debug_loc     00000000 
0000a718 l       .debug_loc     00000000 
0000a738 l       .debug_loc     00000000 
0000a753 l       .debug_loc     00000000 
0000a779 l       .debug_loc     00000000 
0000a794 l       .debug_loc     00000000 
0000a7af l       .debug_loc     00000000 
0000a7ca l       .debug_loc     00000000 
0000a7e5 l       .debug_loc     00000000 
0000a800 l       .debug_loc     00000000 
0000a83b l       .debug_loc     00000000 
0000a85c l       .debug_loc     00000000 
0000a87d l       .debug_loc     00000000 
0000a898 l       .debug_loc     00000000 
0000a8be l       .debug_loc     00000000 
0000a8f2 l       .debug_loc     00000000 
0000a914 l       .debug_loc     00000000 
0000a93a l       .debug_loc     00000000 
0000a955 l       .debug_loc     00000000 
0000a970 l       .debug_loc     00000000 
0000a996 l       .debug_loc     00000000 
0000a9b1 l       .debug_loc     00000000 
0000a9cc l       .debug_loc     00000000 
0000a9e7 l       .debug_loc     00000000 
0000aa0d l       .debug_loc     00000000 
0000aa91 l       .debug_loc     00000000 
0000aab1 l       .debug_loc     00000000 
0000aaf2 l       .debug_loc     00000000 
0000ab1d l       .debug_loc     00000000 
0000ab3f l       .debug_loc     00000000 
0000ab61 l       .debug_loc     00000000 
0000ab81 l       .debug_loc     00000000 
0000aba1 l       .debug_loc     00000000 
0000abc1 l       .debug_loc     00000000 
0000abe3 l       .debug_loc     00000000 
0000ac04 l       .debug_loc     00000000 
0000ac26 l       .debug_loc     00000000 
0000ac41 l       .debug_loc     00000000 
0000ac5c l       .debug_loc     00000000 
0000ac77 l       .debug_loc     00000000 
0000ac92 l       .debug_loc     00000000 
0000acad l       .debug_loc     00000000 
0000acc8 l       .debug_loc     00000000 
0000ace3 l       .debug_loc     00000000 
0000ad14 l       .debug_loc     00000000 
0000ad32 l       .debug_loc     00000000 
0000ad4d l       .debug_loc     00000000 
0000ad89 l       .debug_loc     00000000 
0000adad l       .debug_loc     00000000 
0000add3 l       .debug_loc     00000000 
0000adf9 l       .debug_loc     00000000 
0000ae1d l       .debug_loc     00000000 
0000ae38 l       .debug_loc     00000000 
0000ae5e l       .debug_loc     00000000 
0000ae82 l       .debug_loc     00000000 
0000aea6 l       .debug_loc     00000000 
0000aecc l       .debug_loc     00000000 
0000aee7 l       .debug_loc     00000000 
0000af02 l       .debug_loc     00000000 
0000af20 l       .debug_loc     00000000 
0000af3b l       .debug_loc     00000000 
0000af6c l       .debug_loc     00000000 
0000af90 l       .debug_loc     00000000 
0000afab l       .debug_loc     00000000 
0000afcf l       .debug_loc     00000000 
0000afea l       .debug_loc     00000000 
0000b00e l       .debug_loc     00000000 
0000b034 l       .debug_loc     00000000 
0000b04f l       .debug_loc     00000000 
0000b06a l       .debug_loc     00000000 
0000b085 l       .debug_loc     00000000 
0000b0a0 l       .debug_loc     00000000 
0000b0bb l       .debug_loc     00000000 
0000b0e1 l       .debug_loc     00000000 
0000b0fc l       .debug_loc     00000000 
0000b117 l       .debug_loc     00000000 
0000b132 l       .debug_loc     00000000 
0000b14d l       .debug_loc     00000000 
0000b168 l       .debug_loc     00000000 
0000b18e l       .debug_loc     00000000 
0000b1a9 l       .debug_loc     00000000 
0000b1c4 l       .debug_loc     00000000 
0000b1df l       .debug_loc     00000000 
0000b1fa l       .debug_loc     00000000 
0000b215 l       .debug_loc     00000000 
0000b23b l       .debug_loc     00000000 
0000b256 l       .debug_loc     00000000 
0000b271 l       .debug_loc     00000000 
0000b28c l       .debug_loc     00000000 
0000b2a7 l       .debug_loc     00000000 
0000b2c2 l       .debug_loc     00000000 
0000b2e8 l       .debug_loc     00000000 
0000b303 l       .debug_loc     00000000 
0000b31e l       .debug_loc     00000000 
0000b339 l       .debug_loc     00000000 
0000b354 l       .debug_loc     00000000 
0000b36f l       .debug_loc     00000000 
0000b395 l       .debug_loc     00000000 
0000b3dd l       .debug_loc     00000000 
0000b3f8 l       .debug_loc     00000000 
0000b413 l       .debug_loc     00000000 
0000b42e l       .debug_loc     00000000 
0000b449 l       .debug_loc     00000000 
0000b464 l       .debug_loc     00000000 
0000b47f l       .debug_loc     00000000 
0000b4a4 l       .debug_loc     00000000 
0000b4bf l       .debug_loc     00000000 
0000b4da l       .debug_loc     00000000 
0000b4f5 l       .debug_loc     00000000 
0000b519 l       .debug_loc     00000000 
0000b534 l       .debug_loc     00000000 
0000b55a l       .debug_loc     00000000 
0000b575 l       .debug_loc     00000000 
0000b590 l       .debug_loc     00000000 
0000b5ac l       .debug_loc     00000000 
0000b5df l       .debug_loc     00000000 
0000b5fa l       .debug_loc     00000000 
0000b619 l       .debug_loc     00000000 
0000b662 l       .debug_loc     00000000 
0000b695 l       .debug_loc     00000000 
0000b6bb l       .debug_loc     00000000 
0000b6d6 l       .debug_loc     00000000 
0000b6f1 l       .debug_loc     00000000 
0000b717 l       .debug_loc     00000000 
0000b732 l       .debug_loc     00000000 
0000b757 l       .debug_loc     00000000 
0000b773 l       .debug_loc     00000000 
0000b791 l       .debug_loc     00000000 
0000b7b7 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000085c5 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001110 l       .debug_ranges  00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00002702 l       .debug_str     00000000 
000026c6 l       .debug_str     00000000 
000026e4 l       .debug_str     00000000 
00002796 l       .debug_str     00000000 
0000273f l       .debug_str     00000000 
00002759 l       .debug_str     00000000 
00002779 l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
00002a95 l       .debug_str     00000000 
00002a08 l       .debug_str     00000000 
00002a27 l       .debug_str     00000000 
00002a41 l       .debug_str     00000000 
00002a5d l       .debug_str     00000000 
00002a79 l       .debug_str     00000000 
00002b43 l       .debug_str     00000000 
00002ab7 l       .debug_str     00000000 
00002ad2 l       .debug_str     00000000 
00002aef l       .debug_str     00000000 
00002b0a l       .debug_str     00000000 
00002b25 l       .debug_str     00000000 
00002c08 l       .debug_str     00000000 
00002b5d l       .debug_str     00000000 
00002b85 l       .debug_str     00000000 
00002bb5 l       .debug_str     00000000 
00002be5 l       .debug_str     00000000 
00002ef8 l       .debug_str     00000000 
00002e72 l       .debug_str     00000000 
00002e95 l       .debug_str     00000000 
00002eb9 l       .debug_str     00000000 
00002eda l       .debug_str     00000000 
00008642 l       .debug_str     00000000 
000085e8 l       .debug_str     00000000 
00008606 l       .debug_str     00000000 
00008623 l       .debug_str     00000000 
0000865f l       .debug_str     00000000 
00008676 l       .debug_str     00000000 
0000868e l       .debug_str     00000000 
000086a3 l       .debug_str     00000000 
000086bb l       .debug_str     00000000 
000086d8 l       .debug_str     00000000 
000086f2 l       .debug_str     00000000 
0000870d l       .debug_str     00000000 
00008725 l       .debug_str     00000000 
00008740 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
00002293 l       .debug_str     00000000 
00002284 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00004ba0 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000087b6 l       .debug_str     00000000 
00008420 l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
000026ac l       .debug_str     00000000 
0000269d l       .debug_str     00000000 
00008760 l       .debug_str     00000000 
000027cf l       .debug_str     00000000 
000027d6 l       .debug_str     00000000 
000027c0 l       .debug_str     00000000 
000026bd l       .debug_str     00000000 
00002736 l       .debug_str     00000000 
0000279e l       .debug_str     00000000 
0000271b l       .debug_str     00000000 
000027aa l       .debug_str     00000000 
00008779 l       .debug_str     00000000 
000087be l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
000019e0 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
0000195e l       .debug_str     00000000 
00004bbb l       .debug_str     00000000 
000027c8 l       .debug_str     00000000 
0000506f l       .debug_str     00000000 
00000e78 l       .debug_ranges  00000000 
000062f4 l       .debug_str     00000000 
00008924 l       .debug_str     00000000 
0000503e l       .debug_str     00000000 
00005f0d l       .debug_str     00000000 
00008948 l       .debug_str     00000000 
00008e0f l       .debug_str     00000000 
000087ba l       .debug_str     00000000 
00008966 l       .debug_str     00000000 
00008077 l       .debug_str     00000000 
00008e13 l       .debug_str     00000000 
00008984 l       .debug_str     00000000 
0000878c l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
000089a3 l       .debug_str     00000000 
00001bd6 l       .debug_str     00000000 
00008e1b l       .debug_str     00000000 
000089cc l       .debug_str     00000000 
00002918 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
00005da6 l       .debug_str     00000000 
000089ef l       .debug_str     00000000 
00008a19 l       .debug_str     00000000 
00005a85 l       .debug_str     00000000 
00008e83 l       .debug_str     00000000 
00008e8a l       .debug_str     00000000 
00008a35 l       .debug_str     00000000 
00005a4f l       .debug_str     00000000 
00000e90 l       .debug_ranges  00000000 
00000ea8 l       .debug_ranges  00000000 
00000ec0 l       .debug_ranges  00000000 
00000ee0 l       .debug_ranges  00000000 
000080ad l       .debug_str     00000000 
00008a51 l       .debug_str     00000000 
00008a7a l       .debug_str     00000000 
00004bd4 l       .debug_str     00000000 
00002c7a l       .debug_str     00000000 
00008e91 l       .debug_str     00000000 
00006517 l       .debug_str     00000000 
00005dbc l       .debug_str     00000000 
00008e9e l       .debug_str     00000000 
00002c17 l       .debug_str     00000000 
00000f00 l       .debug_ranges  00000000 
00000f18 l       .debug_ranges  00000000 
00000f30 l       .debug_ranges  00000000 
00000f48 l       .debug_ranges  00000000 
00000f60 l       .debug_ranges  00000000 
00000f78 l       .debug_ranges  00000000 
00000f90 l       .debug_ranges  00000000 
00000fa8 l       .debug_ranges  00000000 
00000fc0 l       .debug_ranges  00000000 
00000fd8 l       .debug_ranges  00000000 
00008a9d l       .debug_str     00000000 
00001bd9 l       .debug_str     00000000 
00004c1e l       .debug_str     00000000 
00002aaa l       .debug_str     00000000 
00008ea9 l       .debug_str     00000000 
00004c70 l       .debug_str     00000000 
00004c2b l       .debug_str     00000000 
00005f2a l       .debug_str     00000000 
0000879f l       .debug_str     00000000 
000057c3 l       .debug_str     00000000 
00007a58 l       .debug_str     00000000 
00002804 l       .debug_str     00000000 
000027ee l       .debug_str     00000000 
000069c1 l       .debug_str     00000000 
00006371 l       .debug_str     00000000 
00005ba0 l       .debug_str     00000000 
00000ff0 l       .debug_ranges  00000000 
00005bcc l       .debug_str     00000000 
00001008 l       .debug_ranges  00000000 
00005b48 l       .debug_str     00000000 
00001020 l       .debug_ranges  00000000 
00005b74 l       .debug_str     00000000 
00001038 l       .debug_ranges  00000000 
00008ac3 l       .debug_str     00000000 
00008ebe l       .debug_str     00000000 
00008ae9 l       .debug_str     00000000 
00005cf6 l       .debug_str     00000000 
00005e15 l       .debug_str     00000000 
00005d76 l       .debug_str     00000000 
00005def l       .debug_str     00000000 
00008eca l       .debug_str     00000000 
00005d26 l       .debug_str     00000000 
00005bc4 l       .debug_str     00000000 
00008ed7 l       .debug_str     00000000 
00008ee5 l       .debug_str     00000000 
00005dc9 l       .debug_str     00000000 
00005e1f l       .debug_str     00000000 
000078c7 l       .debug_str     00000000 
000050c7 l       .debug_str     00000000 
000024b8 l       .debug_str     00000000 
00008eee l       .debug_str     00000000 
000087c2 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
000087e1 l       .debug_str     00000000 
00002f0d l       .debug_str     00000000 
00004d2a l       .debug_str     00000000 
0000883a l       .debug_str     00000000 
0000881f l       .debug_str     00000000 
00008806 l       .debug_str     00000000 
00008811 l       .debug_str     00000000 
00004d08 l       .debug_str     00000000 
000088fc l       .debug_str     00000000 
00008857 l       .debug_str     00000000 
00008b0f l       .debug_str     00000000 
000062ad l       .debug_str     00000000 
00008eff l       .debug_str     00000000 
00008f0d l       .debug_str     00000000 
00005b1a l       .debug_str     00000000 
00008f16 l       .debug_str     00000000 
00005ae7 l       .debug_str     00000000 
000003c8 l       .debug_str     00000000 
00001050 l       .debug_ranges  00000000 
00001068 l       .debug_ranges  00000000 
00008b3d l       .debug_str     00000000 
00004d81 l       .debug_str     00000000 
00005d4c l       .debug_str     00000000 
00008b61 l       .debug_str     00000000 
00008f6c l       .debug_str     00000000 
00008b85 l       .debug_str     00000000 
0000902f l       .debug_str     00000000 
00001080 l       .debug_ranges  00000000 
00009036 l       .debug_str     00000000 
00001098 l       .debug_ranges  00000000 
000010b0 l       .debug_ranges  00000000 
000010c8 l       .debug_ranges  00000000 
000010e0 l       .debug_ranges  00000000 
00008ba2 l       .debug_str     00000000 
00008f33 l       .debug_str     00000000 
00008bc4 l       .debug_str     00000000 
00008874 l       .debug_str     00000000 
00008be6 l       .debug_str     00000000 
00008884 l       .debug_str     00000000 
00008c05 l       .debug_str     00000000 
00008c24 l       .debug_str     00000000 
00008c4f l       .debug_str     00000000 
00008c7a l       .debug_str     00000000 
00008ca0 l       .debug_str     00000000 
00008cc6 l       .debug_str     00000000 
00008cec l       .debug_str     00000000 
00008d12 l       .debug_str     00000000 
00008d38 l       .debug_str     00000000 
00008d5e l       .debug_str     00000000 
00008d78 l       .debug_str     00000000 
00009076 l       .debug_str     00000000 
0000907e l       .debug_str     00000000 
00008d92 l       .debug_str     00000000 
00008893 l       .debug_str     00000000 
00008903 l       .debug_str     00000000 
000088e4 l       .debug_str     00000000 
000088b6 l       .debug_str     00000000 
000088c5 l       .debug_str     00000000 
000088d5 l       .debug_str     00000000 
00008db1 l       .debug_str     00000000 
00000372 l       .debug_str     00000000 
00009082 l       .debug_str     00000000 
000010f8 l       .debug_ranges  00000000 
000078e6 l       .debug_str     00000000 
00008dcf l       .debug_str     00000000 
0000908f l       .debug_str     00000000 
00009095 l       .debug_str     00000000 
00008dec l       .debug_str     00000000 
00008e69 l       .debug_str     00000000 
00008e51 l       .debug_str     00000000 
00009fe1 l       .debug_str     00000000 
00008e2b l       .debug_str     00000000 
00008e3f l       .debug_str     00000000 
00008e3b l       .debug_str     00000000 
00005ab9 l       .debug_str     00000000 
00005a8d l       .debug_str     00000000 
00005a7f l       .debug_str     00000000 
00005a88 l       .debug_str     00000000 
0000897c l       .debug_str     00000000 
00004ce9 l       .debug_str     00000000 
00004ccc l       .debug_str     00000000 
00004c57 l       .debug_str     00000000 
00004c84 l       .debug_str     00000000 
00004d6b l       .debug_str     00000000 
00004cbc l       .debug_str     00000000 
00004bfa l       .debug_str     00000000 
00004c3b l       .debug_str     00000000 
00004c98 l       .debug_str     00000000 
00008f71 l       .debug_str     00000000 
00008f59 l       .debug_str     00000000 
00008f24 l       .debug_str     00000000 
00008f2d l       .debug_str     00000000 
00008f3c l       .debug_str     00000000 
00008f4b l       .debug_str     00000000 
00009013 l       .debug_str     00000000 
00008ff9 l       .debug_str     00000000 
00008655 l       .debug_str     00000000 
00008faa l       .debug_str     00000000 
00008fc5 l       .debug_str     00000000 
00008fe2 l       .debug_str     00000000 
00008f8b l       .debug_str     00000000 
0000905e l       .debug_str     00000000 
00009048 l       .debug_str     00000000 
0000903e l       .debug_str     00000000 
00001114 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_uart_autogen.c
200036c4 l       .text  00000000 
200036c4 l       .text  00000000 
200036c4 l       .text  00000000 
200036c4 l       .text  00000000 
200036c6 l       .text  00000000 
200036c8 l       .text  00000000 
200036cc l       .text  00000000 
200036ce l       .text  00000000 
200036d0 l       .text  00000000 
200036d2 l       .text  00000000 
200036d2 l       .text  00000000 
200036d2 l       .text  00000000 
200036d2 l       .text  00000000 
200036d2 l       .text  00000000 
200036d2 l       .text  00000000 
200036da l       .text  00000000 
200036ea l       .text  00000000 
200036ec l       .text  00000000 
200036ec l       .text  00000000 
200036ee l       .text  00000000 
200036ee l       .text  00000000 
200036f0 l       .text  00000000 
200036f0 l       .text  00000000 
200036f4 l       .text  00000000 
200036f4 l       .text  00000000 
200036f8 l       .text  00000000 
200036f8 l       .text  00000000 
200036fc l       .text  00000000 
200036fc l       .text  00000000 
200036fc l       .text  00000000 
200036fc l       .text  00000000 
200036fc l       .text  00000000 
200036fc l       .text  00000000 
20003704 l       .text  00000000 
2000370a l       .text  00000000 
2000370a l       .text  00000000 
2000370c l       .text  00000000 
2000370c l       .text  00000000 
2000370e l       .text  00000000 
2000370e l       .text  00000000 
20003712 l       .text  00000000 
20003712 l       .text  00000000 
20003714 l       .text  00000000 
20003714 l       .text  00000000 
20003718 l       .text  00000000 
20003718 l       .text  00000000 
20003718 l       .text  00000000 
20003718 l       .text  00000000 
20003718 l       .text  00000000 
20003718 l       .text  00000000 
20003720 l       .text  00000000 
20003726 l       .text  00000000 
20003728 l       .text  00000000 
20003728 l       .text  00000000 
2000372a l       .text  00000000 
2000372a l       .text  00000000 
2000372c l       .text  00000000 
2000372c l       .text  00000000 
2000372e l       .text  00000000 
20003732 l       .text  00000000 
20003732 l       .text  00000000 
20003736 l       .text  00000000 
20003736 l       .text  00000000 
2000373a l       .text  00000000 
2000373a l       .text  00000000 
2000373c l       .text  00000000 
2000373c l       .text  00000000 
2000373e l       .text  00000000 
2000373e l       .text  00000000 
20003742 l       .text  00000000 
20003742 l       .text  00000000 
20003742 l       .text  00000000 
20003742 l       .text  00000000 
20003742 l       .text  00000000 
20003742 l       .text  00000000 
20003744 l       .text  00000000 
20003746 l       .text  00000000 
20003748 l       .text  00000000 
20003748 l       .text  00000000 
2000374a l       .text  00000000 
2000374a l       .text  00000000 
2000374c l       .text  00000000 
2000374e l       .text  00000000 
2000374e l       .text  00000000 
20003750 l       .text  00000000 
20003750 l       .text  00000000 
20003754 l       .text  00000000 
20003754 l       .text  00000000 
20003756 l       .text  00000000 
20003756 l       .text  00000000 
20003758 l       .text  00000000 
20003758 l       .text  00000000 
2000375a l       .text  00000000 
2000375a l       .text  00000000 
2000375a l       .text  00000000 
2000375a l       .text  00000000 
2000375a l       .text  00000000 
2000375a l       .text  00000000 
20003762 l       .text  00000000 
20003768 l       .text  00000000 
2000376a l       .text  00000000 
2000376a l       .text  00000000 
2000376c l       .text  00000000 
2000376c l       .text  00000000 
2000376e l       .text  00000000 
2000376e l       .text  00000000 
20003770 l       .text  00000000 
20003770 l       .text  00000000 
20003774 l       .text  00000000 
20003774 l       .text  00000000 
0000b7d2 l       .debug_loc     00000000 
0000b7ed l       .debug_loc     00000000 
0000b808 l       .debug_loc     00000000 
0000b823 l       .debug_loc     00000000 
0000b83f l       .debug_loc     00000000 
0000b85b l       .debug_loc     00000000 
0000b876 l       .debug_loc     00000000 
0000b891 l       .debug_loc     00000000 
0000b8ac l       .debug_loc     00000000 
0000b8c7 l       .debug_loc     00000000 
0000b8ed l       .debug_loc     00000000 
0000b908 l       .debug_loc     00000000 
0000b923 l       .debug_loc     00000000 
0000b93e l       .debug_loc     00000000 
0000b959 l       .debug_loc     00000000 
0000b97f l       .debug_loc     00000000 
0000b99a l       .debug_loc     00000000 
0000b9b5 l       .debug_loc     00000000 
0000b9d0 l       .debug_loc     00000000 
0000b9f7 l       .debug_loc     00000000 
0000ba26 l       .debug_loc     00000000 
0000ba41 l       .debug_loc     00000000 
0000ba5c l       .debug_loc     00000000 
0000ba77 l       .debug_loc     00000000 
0000ba92 l       .debug_loc     00000000 
0000bab9 l       .debug_loc     00000000 
0000bae8 l       .debug_loc     00000000 
0000bb03 l       .debug_loc     00000000 
0000bb1e l       .debug_loc     00000000 
0000bb39 l       .debug_loc     00000000 
0000bb54 l       .debug_loc     00000000 
0000bb6f l       .debug_loc     00000000 
0000bb8a l       .debug_loc     00000000 
0000bba5 l       .debug_loc     00000000 
0000bbc0 l       .debug_loc     00000000 
0000bbe6 l       .debug_loc     00000000 
0000bc0c l       .debug_loc     00000000 
0000bc3b l       .debug_loc     00000000 
0000bc56 l       .debug_loc     00000000 
0000bc71 l       .debug_loc     00000000 
0000bc8c l       .debug_loc     00000000 
0000bcac l       .debug_loc     00000000 
0000bcd2 l       .debug_loc     00000000 
0000bcf8 l       .debug_loc     00000000 
0000bd13 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000909d l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000012e8 l       .debug_ranges  00000000 
0000165d l       .debug_str     00000000 
00001697 l       .debug_str     00000000 
0000168a l       .debug_str     00000000 
00001667 l       .debug_str     00000000 
00001678 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
000090e2 l       .debug_str     00000000 
000090ca l       .debug_str     00000000 
00002e65 l       .debug_str     00000000 
00002da4 l       .debug_str     00000000 
00002dbb l       .debug_str     00000000 
00002dd2 l       .debug_str     00000000 
00002de4 l       .debug_str     00000000 
00002dfa l       .debug_str     00000000 
00002e10 l       .debug_str     00000000 
00002e26 l       .debug_str     00000000 
00002e3b l       .debug_str     00000000 
00002e52 l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00004a79 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
00002829 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000090f1 l       .debug_str     00000000 
000073ab l       .debug_str     00000000 
00001b43 l       .debug_str     00000000 
00001b4d l       .debug_str     00000000 
00009106 l       .debug_str     00000000 
00005a4b l       .debug_str     00000000 
00006550 l       .debug_str     00000000 
0000195e l       .debug_str     00000000 
0000911c l       .debug_str     00000000 
00001b6b l       .debug_str     00000000 
00009133 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00004f54 l       .debug_str     00000000 
000074f0 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
00001b92 l       .debug_str     00000000 
00009152 l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
000019e0 l       .debug_str     00000000 
00004f6c l       .debug_str     00000000 
0000916f l       .debug_str     00000000 
000087be l       .debug_str     00000000 
00001bab l       .debug_str     00000000 
00009182 l       .debug_str     00000000 
000084a7 l       .debug_str     00000000 
00001bc6 l       .debug_str     00000000 
00001bd6 l       .debug_str     00000000 
00004e57 l       .debug_str     00000000 
00001be1 l       .debug_str     00000000 
00004f03 l       .debug_str     00000000 
00004f3b l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00002837 l       .debug_str     00000000 
0000282e l       .debug_str     00000000 
0000919b l       .debug_str     00000000 
00004e70 l       .debug_str     00000000 
000091ac l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
00004f1c l       .debug_str     00000000 
000014e0 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 dif_uart.c
20003774 l       .text  00000000 
20003774 l       .text  00000000 
20003774 l       .text  00000000 
20003776 l       .text  00000000 
2000377e l       .text  00000000 
20003780 l       .text  00000000 
20003782 l       .text  00000000 
20003784 l       .text  00000000 
20003784 l       .text  00000000 
20003786 l       .text  00000000 
20003788 l       .text  00000000 
2000378a l       .text  00000000 
2000378c l       .text  00000000 
2000378e l       .text  00000000 
2000378e l       .text  00000000 
20003790 l       .text  00000000 
20003792 l       .text  00000000 
20003796 l       .text  00000000 
20003798 l       .text  00000000 
2000379c l       .text  00000000 
200037a4 l       .text  00000000 
200037b0 l       .text  00000000 
200037b4 l       .text  00000000 
200037ba l       .text  00000000 
200037c0 l       .text  00000000 
200037c8 l       .text  00000000 
200037c8 l       .text  00000000 
200037ce l       .text  00000000 
200037ce l       .text  00000000 
200037d0 l       .text  00000000 
200037d4 l       .text  00000000 
200037d4 l       .text  00000000 
200037d6 l       .text  00000000 
200037d6 l       .text  00000000 
200037d8 l       .text  00000000 
200037dc l       .text  00000000 
200037dc l       .text  00000000 
200037e0 l       .text  00000000 
200037e0 l       .text  00000000 
200037e4 l       .text  00000000 
200037e4 l       .text  00000000 
200037e8 l       .text  00000000 
200037ea l       .text  00000000 
200037ea l       .text  00000000 
200037ec l       .text  00000000 
200037ec l       .text  00000000 
200037f0 l       .text  00000000 
200037f0 l       .text  00000000 
200037f4 l       .text  00000000 
200037f4 l       .text  00000000 
200037f8 l       .text  00000000 
200037f8 l       .text  00000000 
200037fc l       .text  00000000 
200037fc l       .text  00000000 
20003800 l       .text  00000000 
20003800 l       .text  00000000 
20003804 l       .text  00000000 
20003804 l       .text  00000000 
20003808 l       .text  00000000 
2000380a l       .text  00000000 
2000380a l       .text  00000000 
2000380c l       .text  00000000 
2000380c l       .text  00000000 
2000380e l       .text  00000000 
2000380e l       .text  00000000 
20003810 l       .text  00000000 
20003810 l       .text  00000000 
20003812 l       .text  00000000 
20003814 l       .text  00000000 
20003816 l       .text  00000000 
20003816 l       .text  00000000 
20003818 l       .text  00000000 
20003818 l       .text  00000000 
2000381a l       .text  00000000 
2000381a l       .text  00000000 
2000381e l       .text  00000000 
2000381e l       .text  00000000 
20003820 l       .text  00000000 
20003822 l       .text  00000000 
20003822 l       .text  00000000 
20003824 l       .text  00000000 
20003828 l       .text  00000000 
20003828 l       .text  00000000 
2000382a l       .text  00000000 
2000382a l       .text  00000000 
20003830 l       .text  00000000 
20003832 l       .text  00000000 
20003834 l       .text  00000000 
20003836 l       .text  00000000 
20003838 l       .text  00000000 
20003838 l       .text  00000000 
2000383c l       .text  00000000 
20003840 l       .text  00000000 
20003844 l       .text  00000000 
20003844 l       .text  00000000 
20003846 l       .text  00000000 
20003846 l       .text  00000000 
2000384a l       .text  00000000 
2000384a l       .text  00000000 
2000384c l       .text  00000000 
2000384c l       .text  00000000 
20003850 l       .text  00000000 
20003850 l       .text  00000000 
2000385a l       .text  00000000 
2000385e l       .text  00000000 
2000385e l       .text  00000000 
2000385e l       .text  00000000 
2000385e l       .text  00000000 
2000385e l       .text  00000000 
2000385e l       .text  00000000 
20003860 l       .text  00000000 
20003862 l       .text  00000000 
20003866 l       .text  00000000 
2000386a l       .text  00000000 
2000386a l       .text  00000000 
2000386c l       .text  00000000 
2000386c l       .text  00000000 
2000386e l       .text  00000000 
2000386e l       .text  00000000 
20003870 l       .text  00000000 
20003870 l       .text  00000000 
20003872 l       .text  00000000 
20003872 l       .text  00000000 
20003874 l       .text  00000000 
20003876 l       .text  00000000 
20003878 l       .text  00000000 
20003878 l       .text  00000000 
2000387a l       .text  00000000 
2000387a l       .text  00000000 
2000387c l       .text  00000000 
2000387c l       .text  00000000 
2000387e l       .text  00000000 
2000387e l       .text  00000000 
20003880 l       .text  00000000 
20003880 l       .text  00000000 
20003880 l       .text  00000000 
20003880 l       .text  00000000 
20003880 l       .text  00000000 
20003880 l       .text  00000000 
20003888 l       .text  00000000 
2000388e l       .text  00000000 
2000388e l       .text  00000000 
20003890 l       .text  00000000 
20003890 l       .text  00000000 
20003892 l       .text  00000000 
20003892 l       .text  00000000 
20003896 l       .text  00000000 
20003896 l       .text  00000000 
2000389a l       .text  00000000 
2000389a l       .text  00000000 
2000389c l       .text  00000000 
2000389c l       .text  00000000 
2000389e l       .text  00000000 
200038a6 l       .text  00000000 
200038a8 l       .text  00000000 
200038a8 l       .text  00000000 
200038ac l       .text  00000000 
200038ac l       .text  00000000 
200038b0 l       .text  00000000 
200038b0 l       .text  00000000 
200038b2 l       .text  00000000 
200038b4 l       .text  00000000 
200038b6 l       .text  00000000 
200038b8 l       .text  00000000 
200038b8 l       .text  00000000 
200038ba l       .text  00000000 
200038bc l       .text  00000000 
200038bc l       .text  00000000 
200038bc l       .text  00000000 
200038bc l       .text  00000000 
200038bc l       .text  00000000 
200038bc l       .text  00000000 
200038be l       .text  00000000 
200038c0 l       .text  00000000 
200038c0 l       .text  00000000 
200038c2 l       .text  00000000 
200038c2 l       .text  00000000 
200038c4 l       .text  00000000 
200038c4 l       .text  00000000 
200038c6 l       .text  00000000 
200038c6 l       .text  00000000 
200038c8 l       .text  00000000 
200038c8 l       .text  00000000 
200038ca l       .text  00000000 
200038ca l       .text  00000000 
200038cc l       .text  00000000 
200038cc l       .text  00000000 
200038ce l       .text  00000000 
200038ce l       .text  00000000 
200038d0 l       .text  00000000 
200038d0 l       .text  00000000 
200038d2 l       .text  00000000 
200038d2 l       .text  00000000 
200038d4 l       .text  00000000 
200038d4 l       .text  00000000 
200038d6 l       .text  00000000 
200038d8 l       .text  00000000 
200038da l       .text  00000000 
200038da l       .text  00000000 
200038dc l       .text  00000000 
200038dc l       .text  00000000 
200038de l       .text  00000000 
200038de l       .text  00000000 
200038de l       .text  00000000 
200038de l       .text  00000000 
200038de l       .text  00000000 
200038de l       .text  00000000 
200038e6 l       .text  00000000 
200038ec l       .text  00000000 
200038ee l       .text  00000000 
200038ee l       .text  00000000 
200038f0 l       .text  00000000 
200038f0 l       .text  00000000 
200038f4 l       .text  00000000 
200038f4 l       .text  00000000 
200038f6 l       .text  00000000 
200038f6 l       .text  00000000 
200038f8 l       .text  00000000 
200038f8 l       .text  00000000 
200038fc l       .text  00000000 
200038fc l       .text  00000000 
200038fe l       .text  00000000 
200038fe l       .text  00000000 
20003900 l       .text  00000000 
20003900 l       .text  00000000 
20003904 l       .text  00000000 
20003904 l       .text  00000000 
20003906 l       .text  00000000 
20003908 l       .text  00000000 
2000390c l       .text  00000000 
2000390c l       .text  00000000 
2000390c l       .text  00000000 
2000390c l       .text  00000000 
2000390c l       .text  00000000 
2000390c l       .text  00000000 
20003914 l       .text  00000000 
2000391a l       .text  00000000 
2000391c l       .text  00000000 
2000391c l       .text  00000000 
2000391e l       .text  00000000 
2000391e l       .text  00000000 
20003920 l       .text  00000000 
20003920 l       .text  00000000 
20003922 l       .text  00000000 
20003924 l       .text  00000000 
20003924 l       .text  00000000 
20003926 l       .text  00000000 
20003926 l       .text  00000000 
2000392a l       .text  00000000 
2000392a l       .text  00000000 
0000bd2e l       .debug_loc     00000000 
0000bd54 l       .debug_loc     00000000 
0000bd7c l       .debug_loc     00000000 
0000bda9 l       .debug_loc     00000000 
0000bdc4 l       .debug_loc     00000000 
0000bde0 l       .debug_loc     00000000 
0000be07 l       .debug_loc     00000000 
0000be2c l       .debug_loc     00000000 
0000be5e l       .debug_loc     00000000 
0000be79 l       .debug_loc     00000000 
0000be9b l       .debug_loc     00000000 
0000beb6 l       .debug_loc     00000000 
0000bed1 l       .debug_loc     00000000 
0000bef7 l       .debug_loc     00000000 
0000bf1d l       .debug_loc     00000000 
0000bf43 l       .debug_loc     00000000 
0000bf5e l       .debug_loc     00000000 
0000bf80 l       .debug_loc     00000000 
0000bfa6 l       .debug_loc     00000000 
0000bfd7 l       .debug_loc     00000000 
0000bffd l       .debug_loc     00000000 
0000c018 l       .debug_loc     00000000 
0000c03e l       .debug_loc     00000000 
0000c059 l       .debug_loc     00000000 
0000c07b l       .debug_loc     00000000 
0000c0a1 l       .debug_loc     00000000 
0000c0d2 l       .debug_loc     00000000 
0000c0f8 l       .debug_loc     00000000 
0000c113 l       .debug_loc     00000000 
0000c139 l       .debug_loc     00000000 
0000c154 l       .debug_loc     00000000 
0000c176 l       .debug_loc     00000000 
0000c19c l       .debug_loc     00000000 
0000c1c2 l       .debug_loc     00000000 
0000c1f3 l       .debug_loc     00000000 
0000c224 l       .debug_loc     00000000 
0000c286 l       .debug_loc     00000000 
0000c2a1 l       .debug_loc     00000000 
0000c2c7 l       .debug_loc     00000000 
0000c2e9 l       .debug_loc     00000000 
0000c304 l       .debug_loc     00000000 
0000c324 l       .debug_loc     00000000 
0000c344 l       .debug_loc     00000000 
0000c35f l       .debug_loc     00000000 
0000c381 l       .debug_loc     00000000 
0000c39c l       .debug_loc     00000000 
0000c3c7 l       .debug_loc     00000000 
0000c3e2 l       .debug_loc     00000000 
0000c402 l       .debug_loc     00000000 
0000c424 l       .debug_loc     00000000 
0000c43f l       .debug_loc     00000000 
0000c465 l       .debug_loc     00000000 
0000c487 l       .debug_loc     00000000 
0000c4a2 l       .debug_loc     00000000 
0000c4c9 l       .debug_loc     00000000 
0000c4e4 l       .debug_loc     00000000 
0000c4ff l       .debug_loc     00000000 
0000c51a l       .debug_loc     00000000 
0000c541 l       .debug_loc     00000000 
0000c55c l       .debug_loc     00000000 
0000c577 l       .debug_loc     00000000 
0000c59d l       .debug_loc     00000000 
0000c5b8 l       .debug_loc     00000000 
0000c5e0 l       .debug_loc     00000000 
0000c5fb l       .debug_loc     00000000 
0000c616 l       .debug_loc     00000000 
0000c631 l       .debug_loc     00000000 
0000c64c l       .debug_loc     00000000 
0000c674 l       .debug_loc     00000000 
0000c68f l       .debug_loc     00000000 
0000c6aa l       .debug_loc     00000000 
0000c6c5 l       .debug_loc     00000000 
0000c6e0 l       .debug_loc     00000000 
0000c704 l       .debug_loc     00000000 
0000c71f l       .debug_loc     00000000 
0000c73a l       .debug_loc     00000000 
0000c755 l       .debug_loc     00000000 
0000c770 l       .debug_loc     00000000 
0000c794 l       .debug_loc     00000000 
0000c7af l       .debug_loc     00000000 
0000c7ca l       .debug_loc     00000000 
0000c7f0 l       .debug_loc     00000000 
0000c80b l       .debug_loc     00000000 
0000c831 l       .debug_loc     00000000 
0000c857 l       .debug_loc     00000000 
0000c87d l       .debug_loc     00000000 
0000c8a3 l       .debug_loc     00000000 
0000c8c9 l       .debug_loc     00000000 
0000c8e4 l       .debug_loc     00000000 
0000c913 l       .debug_loc     00000000 
0000c939 l       .debug_loc     00000000 
0000c954 l       .debug_loc     00000000 
0000c96f l       .debug_loc     00000000 
0000c98a l       .debug_loc     00000000 
0000c9a5 l       .debug_loc     00000000 
0000c9d6 l       .debug_loc     00000000 
0000ca07 l       .debug_loc     00000000 
0000ca2d l       .debug_loc     00000000 
0000ca53 l       .debug_loc     00000000 
0000ca6f l       .debug_loc     00000000 
0000ca8a l       .debug_loc     00000000 
0000caa5 l       .debug_loc     00000000 
0000cac0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000091ca l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001370 l       .debug_ranges  00000000 
000091e7 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
00001935 l       .debug_str     00000000 
00001910 l       .debug_str     00000000 
00001923 l       .debug_str     00000000 
00002987 l       .debug_str     00000000 
00002962 l       .debug_str     00000000 
00002974 l       .debug_str     00000000 
000029f0 l       .debug_str     00000000 
00002997 l       .debug_str     00000000 
000029ad l       .debug_str     00000000 
000029c3 l       .debug_str     00000000 
000029d9 l       .debug_str     00000000 
00002d91 l       .debug_str     00000000 
00002ced l       .debug_str     00000000 
00002d04 l       .debug_str     00000000 
00002d1b l       .debug_str     00000000 
00002d32 l       .debug_str     00000000 
00002d49 l       .debug_str     00000000 
00002d61 l       .debug_str     00000000 
00002d79 l       .debug_str     00000000 
00009237 l       .debug_str     00000000 
000091fd l       .debug_str     00000000 
00009210 l       .debug_str     00000000 
00009223 l       .debug_str     00000000 
00009275 l       .debug_str     00000000 
00009249 l       .debug_str     00000000 
00009260 l       .debug_str     00000000 
0000798d l       .debug_str     00000000 
0000797a l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
00009287 l       .debug_str     00000000 
00002829 l       .debug_str     00000000 
00008e86 l       .debug_str     00000000 
00002837 l       .debug_str     00000000 
0000282e l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
00006371 l       .debug_str     00000000 
000087be l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00001bb9 l       .debug_str     00000000 
00004a87 l       .debug_str     00000000 
000027cf l       .debug_str     00000000 
000093f0 l       .debug_str     00000000 
000093fb l       .debug_str     00000000 
000093ff l       .debug_str     00000000 
00009406 l       .debug_str     00000000 
00001358 l       .debug_ranges  00000000 
00007a71 l       .debug_str     00000000 
0000195e l       .debug_str     00000000 
000092fa l       .debug_str     00000000 
000029f9 l       .debug_str     00000000 
00004e28 l       .debug_str     00000000 
00002d9a l       .debug_str     00000000 
00009316 l       .debug_str     00000000 
000019e0 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00009330 l       .debug_str     00000000 
00009240 l       .debug_str     00000000 
00001bd9 l       .debug_str     00000000 
00004fa5 l       .debug_str     00000000 
00008de7 l       .debug_str     00000000 
00009292 l       .debug_str     00000000 
000082ed l       .debug_str     00000000 
000092a2 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
000092af l       .debug_str     00000000 
0000a42e l       .debug_str     00000000 
00004fa1 l       .debug_str     00000000 
000082c1 l       .debug_str     00000000 
00009348 l       .debug_str     00000000 
000092c2 l       .debug_str     00000000 
000092cd l       .debug_str     00000000 
000092db l       .debug_str     00000000 
00009344 l       .debug_str     00000000 
000092ed l       .debug_str     00000000 
000080d2 l       .debug_str     00000000 
00004b30 l       .debug_str     00000000 
000062f4 l       .debug_str     00000000 
00004f85 l       .debug_str     00000000 
00009424 l       .debug_str     00000000 
0000935b l       .debug_str     00000000 
0000942e l       .debug_str     00000000 
00009377 l       .debug_str     00000000 
00005d47 l       .debug_str     00000000 
0000938b l       .debug_str     00000000 
0000927e l       .debug_str     00000000 
0000503e l       .debug_str     00000000 
000093a1 l       .debug_str     00000000 
0000944d l       .debug_str     00000000 
000093bc l       .debug_str     00000000 
000093d8 l       .debug_str     00000000 
000088fc l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00004b0d l       .debug_str     00000000 
00004afd l       .debug_str     00000000 
00004a9a l       .debug_str     00000000 
00004aa3 l       .debug_str     00000000 
00004aaf l       .debug_str     00000000 
00002990 l       .debug_str     00000000 
00004acf l       .debug_str     00000000 
00004ad9 l       .debug_str     00000000 
00004abd l       .debug_str     00000000 
00004ae3 l       .debug_str     00000000 
00004e42 l       .debug_str     00000000 
00009410 l       .debug_str     00000000 
00009439 l       .debug_str     00000000 
000015c4 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 tasks.c
2000392a l       .text  00000000 
2000392a l       .text  00000000 
2000392a l       .text  00000000 
2000392c l       .text  00000000 
20003940 l       .text  00000000 
20003942 l       .text  00000000 
20003944 l       .text  00000000 
20003946 l       .text  00000000 
20003948 l       .text  00000000 
2000394a l       .text  00000000 
2000394c l       .text  00000000 
2000394c l       .text  00000000 
20003950 l       .text  00000000 
20003952 l       .text  00000000 
20003952 l       .text  00000000 
20003954 l       .text  00000000 
20003958 l       .text  00000000 
2000395a l       .text  00000000 
2000395a l       .text  00000000 
20003960 l       .text  00000000 
20003960 l       .text  00000000 
20003962 l       .text  00000000 
20003964 l       .text  00000000 
20003964 l       .text  00000000 
20003966 l       .text  00000000 
20003966 l       .text  00000000 
2000396c l       .text  00000000 
2000396c l       .text  00000000 
20003970 l       .text  00000000 
20003970 l       .text  00000000 
20003972 l       .text  00000000 
20003972 l       .text  00000000 
20003978 l       .text  00000000 
20003978 l       .text  00000000 
2000397c l       .text  00000000 
20003980 l       .text  00000000 
20003984 l       .text  00000000 
20003988 l       .text  00000000 
20003988 l       .text  00000000 
2000398c l       .text  00000000 
20003990 l       .text  00000000 
20003996 l       .text  00000000 
2000399c l       .text  00000000 
2000399c l       .text  00000000 
2000399e l       .text  00000000 
200039a0 l       .text  00000000 
200039a0 l       .text  00000000 
200039a2 l       .text  00000000 
200039a2 l       .text  00000000 
200039a6 l       .text  00000000 
200039a6 l       .text  00000000 
200039a8 l       .text  00000000 
200039ac l       .text  00000000 
200039ac l       .text  00000000 
200039b0 l       .text  00000000 
200039b4 l       .text  00000000 
200039b4 l       .text  00000000 
200039b8 l       .text  00000000 
200039b8 l       .text  00000000 
200039bc l       .text  00000000 
200039be l       .text  00000000 
200039be l       .text  00000000 
200039c4 l       .text  00000000 
200039ca l       .text  00000000 
200039ce l       .text  00000000 
200039d2 l       .text  00000000 
200039d6 l       .text  00000000 
200039e0 l       .text  00000000 
200039e0 l       .text  00000000 
200039e4 l       .text  00000000 
200039e8 l       .text  00000000 
200039ec l       .text  00000000 
200039ec l       .text  00000000 
100020c0 l     O .bss   00000004 xSchedulerRunning
200039f0 l       .text  00000000 
200039f4 l       .text  00000000 
200039fc l       .text  00000000 
200039fc l       .text  00000000 
200039fe l       .text  00000000 
20003a02 l       .text  00000000 
20003a08 l       .text  00000000 
20003a0c l       .text  00000000 
100020bc l     O .bss   00000004 uxCurrentNumberOfTasks
20003a0c l       .text  00000000 
20003a1a l       .text  00000000 
10002250 l     O .bss   00000064 pxReadyTasksLists
20003a26 l       .text  00000000 
20003a26 l       .text  00000000 
20003a28 l       .text  00000000 
20003a2c l       .text  00000000 
20003a2e l       .text  00000000 
20003a32 l       .text  00000000 
20003a34 l       .text  00000000 
20003a38 l       .text  00000000 
20003a3c l       .text  00000000 
20003a42 l       .text  00000000 
20003a46 l       .text  00000000 
20003a4c l       .text  00000000 
20003a50 l       .text  00000000 
20003a54 l       .text  00000000 
20003a54 l       .text  00000000 
20003a58 l       .text  00000000 
20003a58 l       .text  00000000 
20003a5a l       .text  00000000 
20003a5c l       .text  00000000 
100022f0 l     O .bss   00000014 xDelayedTaskList1
20003a5e l       .text  00000000 
20003a66 l       .text  00000000 
20003a6a l       .text  00000000 
10002304 l     O .bss   00000014 xDelayedTaskList2
20003a6a l       .text  00000000 
20003a76 l       .text  00000000 
100022dc l     O .bss   00000014 xPendingReadyList
20003a76 l       .text  00000000 
20003a80 l       .text  00000000 
100022b4 l     O .bss   00000014 xTasksWaitingTermination
20003a80 l       .text  00000000 
20003a8a l       .text  00000000 
100022c8 l     O .bss   00000014 xSuspendedTaskList
20003a8a l       .text  00000000 
20003a94 l       .text  00000000 
100020c4 l     O .bss   00000004 pxDelayedTaskList
20003a94 l       .text  00000000 
100020c8 l     O .bss   00000004 pxOverflowDelayedTaskList
20003a9c l       .text  00000000 
20003aa4 l       .text  00000000 
100020b4 l     O .bss   00000004 uxTaskNumber
20003aa4 l       .text  00000000 
20003ab2 l       .text  00000000 
100020b0 l     O .bss   00000004 uxTopReadyPriority
20003ac6 l       .text  00000000 
20003ac6 l       .text  00000000 
20003ad0 l       .text  00000000 
20003aea l       .text  00000000 
20003aee l       .text  00000000 
20003aee l       .text  00000000 
20003af0 l       .text  00000000 
20003af0 l       .text  00000000 
20003af6 l       .text  00000000 
20003af8 l       .text  00000000 
20003afc l       .text  00000000 
20003afc l       .text  00000000 
20003b0e l       .text  00000000 
20003b12 l       .text  00000000 
20003b16 l       .text  00000000 
20003b16 l       .text  00000000 
100020b8 l     O .bss   00000004 uxDeletedTasksWaitingCleanUp
100020d8 l     O .bss   00000004 xNextTaskUnblockTime
20003b16 l       .text  00000000 
20003b16 l       .text  00000000 
20003b16 l       .text  00000000 
20003b16 l       .text  00000000 
20003b1e l       .text  00000000 
20003b20 l       .text  00000000 
20003b28 l       .text  00000000 
20003b2a l       .text  00000000 
20003b2c l       .text  00000000 
20003b30 l       .text  00000000 
20003b36 l       .text  00000000 
20003b3a l       .text  00000000 
20003b3c l       .text  00000000 
20003b3e l       .text  00000000 
20003b40 l       .text  00000000 
20003b44 l       .text  00000000 
20003b46 l       .text  00000000 
20003b46 l       .text  00000000 
20003b46 l       .text  00000000 
20003b46 l       .text  00000000 
20003b46 l       .text  00000000 
20003b48 l       .text  00000000 
20003b48 l       .text  00000000 
20003b4c l       .text  00000000 
100020cc l     O .bss   00000004 uxSchedulerSuspended
20003b54 l       .text  00000000 
100020d0 l     O .bss   00000004 xYieldPending
20003b56 l       .text  00000000 
20003b62 l       .text  00000000 
20003b6a l       .text  00000000 
20003b7a l       .text  00000000 
20003b7e l       .text  00000000 
20003b8e l       .text  00000000 
20003b8e l       .text  00000000 
20003b9e l       .text  00000000 
20003b9e l       .text  00000000 
20003ba2 l       .text  00000000 
20003bb2 l       .text  00000000 
20003bb6 l       .text  00000000 
20003bbc l       .text  00000000 
20003bbe l       .text  00000000 
20003bc0 l       .text  00000000 
20003bc2 l       .text  00000000 
20003bc8 l       .text  00000000 
20003bc8 l       .text  00000000 
20003bcc l       .text  00000000 
20003bd0 l       .text  00000000 
20003bd0 l       .text  00000000 
20003bd0 l       .text  00000000 
20003bd0 l       .text  00000000 
20003bd0 l       .text  00000000 
20003bd2 l       .text  00000000 
20003bd2 l       .text  00000000 
20003bd4 l       .text  00000000 
20003c2e l     F .text  00000076 prvIdleTask
100020d4 l     O .bss   00000004 xIdleTaskHandle
20003bf8 l       .text  00000000 
20003bf8 l       .text  00000000 
20003bfa l       .text  00000000 
20003bfa l       .text  00000000 
20003bfe l       .text  00000000 
20003c02 l       .text  00000000 
20003c06 l       .text  00000000 
20003c06 l       .text  00000000 
20003c08 l       .text  00000000 
20003c0c l       .text  00000000 
100020dc l     O .bss   00000004 xTickCount
20003c14 l       .text  00000000 
20003c1c l       .text  00000000 
20003c20 l       .text  00000000 
20003c20 l       .text  00000000 
20003c28 l       .text  00000000 
20003c2a l       .text  00000000 
20003c2e l       .text  00000000 
20003c2e l       .text  00000000 
20003c2e l       .text  00000000 
20003c2e l       .text  00000000 
20003c2e l       .text  00000000 
20003c30 l       .text  00000000 
20003c3e l       .text  00000000 
20003c52 l       .text  00000000 
20003c52 l       .text  00000000 
20003c56 l       .text  00000000 
20003c58 l       .text  00000000 
20003c58 l       .text  00000000 
20003c5c l       .text  00000000 
20003c60 l       .text  00000000 
20003c62 l       .text  00000000 
20003c66 l       .text  00000000 
20003c6c l       .text  00000000 
20003c70 l       .text  00000000 
20003c70 l       .text  00000000 
20003c76 l       .text  00000000 
20003c76 l       .text  00000000 
20003c7a l       .text  00000000 
20003c7c l       .text  00000000 
20003c7c l       .text  00000000 
20003c86 l       .text  00000000 
20003c90 l       .text  00000000 
20003c94 l       .text  00000000 
20003c94 l       .text  00000000 
20003c96 l       .text  00000000 
20003c98 l       .text  00000000 
20003c98 l       .text  00000000 
20003c9c l       .text  00000000 
20003c9c l       .text  00000000 
20003c9e l       .text  00000000 
20003c9e l       .text  00000000 
20003ca4 l       .text  00000000 
20003ca4 l       .text  00000000 
20003ca4 l       .text  00000000 
20003ca4 l       .text  00000000 
20003ca4 l       .text  00000000 
20003ca4 l       .text  00000000 
20003cb2 l       .text  00000000 
20003cb2 l       .text  00000000 
20003cb4 l       .text  00000000 
20003cb4 l       .text  00000000 
20003cb4 l       .text  00000000 
20003cb4 l       .text  00000000 
20003cb4 l       .text  00000000 
20003cb6 l       .text  00000000 
20003cb6 l       .text  00000000 
20003cc0 l       .text  00000000 
20003cc0 l       .text  00000000 
20003cc0 l       .text  00000000 
20003cc4 l       .text  00000000 
20003ccc l       .text  00000000 
20003cce l       .text  00000000 
20003cd6 l       .text  00000000 
20003cdc l       .text  00000000 
20003ce0 l       .text  00000000 
20003ce0 l       .text  00000000 
20003cee l       .text  00000000 
20003cf2 l       .text  00000000 
20003cf4 l       .text  00000000 
20003cfc l       .text  00000000 
20003cfe l       .text  00000000 
20003d0c l       .text  00000000 
20003d0e l       .text  00000000 
20003d20 l       .text  00000000 
20003d20 l       .text  00000000 
20003d24 l       .text  00000000 
20003d24 l       .text  00000000 
20003d2a l       .text  00000000 
20003d30 l       .text  00000000 
20003d32 l       .text  00000000 
20003d3a l       .text  00000000 
20003d3c l       .text  00000000 
20003d46 l       .text  00000000 
20003d46 l       .text  00000000 
20003d46 l       .text  00000000 
20003d46 l       .text  00000000 
20003d48 l       .text  00000000 
20003d4c l       .text  00000000 
20003d52 l       .text  00000000 
20003d54 l       .text  00000000 
20003d5c l       .text  00000000 
20003d5e l       .text  00000000 
20003d64 l       .text  00000000 
20003d64 l       .text  00000000 
20003d6a l       .text  00000000 
20003d72 l       .text  00000000 
20003d72 l       .text  00000000 
20003d7c l       .text  00000000 
20003d90 l       .text  00000000 
20003d90 l       .text  00000000 
20003d94 l       .text  00000000 
20003d96 l       .text  00000000 
20003d9a l       .text  00000000 
20003d9a l       .text  00000000 
20003d9e l       .text  00000000 
20003d9e l       .text  00000000 
20003da0 l       .text  00000000 
20003da2 l       .text  00000000 
20003da2 l       .text  00000000 
20003dac l       .text  00000000 
20003dae l       .text  00000000 
20003db8 l       .text  00000000 
20003dc2 l       .text  00000000 
100020e0 l     O .bss   00000004 xPendedTicks
20003dc2 l       .text  00000000 
20003dca l       .text  00000000 
20003dca l       .text  00000000 
20003dcc l       .text  00000000 
20003dce l       .text  00000000 
20003dce l       .text  00000000 
20003dd0 l       .text  00000000 
20003dd2 l       .text  00000000 
20003dd6 l       .text  00000000 
20003dd6 l       .text  00000000 
20003dda l       .text  00000000 
20003dde l       .text  00000000 
20003dde l       .text  00000000 
20003dea l       .text  00000000 
20003dee l       .text  00000000 
20003dee l       .text  00000000 
20003dee l       .text  00000000 
20003dee l       .text  00000000 
20003dee l       .text  00000000 
20003dee l       .text  00000000 
20003df6 l       .text  00000000 
20003df8 l       .text  00000000 
20003e08 l       .text  00000000 
20003e08 l       .text  00000000 
20003e10 l       .text  00000000 
20003e12 l       .text  00000000 
20003e12 l       .text  00000000 
20003e1e l       .text  00000000 
20003e22 l       .text  00000000 
20003e22 l       .text  00000000 
20003e26 l       .text  00000000 
100020e4 l     O .bss   00000004 xNumOfOverflows
20003e3a l       .text  00000000 
20003e44 l       .text  00000000 
20003e44 l       .text  00000000 
20003e4a l       .text  00000000 
20003e4c l       .text  00000000 
20003e56 l       .text  00000000 
20003e5c l       .text  00000000 
20003e5c l       .text  00000000 
20003e60 l       .text  00000000 
20003e64 l       .text  00000000 
20003e6a l       .text  00000000 
20003e6c l       .text  00000000 
20003e78 l       .text  00000000 
20003e80 l       .text  00000000 
20003e80 l       .text  00000000 
20003e82 l       .text  00000000 
20003e82 l       .text  00000000 
20003e86 l       .text  00000000 
20003e86 l       .text  00000000 
20003e88 l       .text  00000000 
20003e8c l       .text  00000000 
20003e92 l       .text  00000000 
20003e94 l       .text  00000000 
20003e94 l       .text  00000000 
20003e98 l       .text  00000000 
20003e98 l       .text  00000000 
20003e9c l       .text  00000000 
20003e9e l       .text  00000000 
20003ea4 l       .text  00000000 
20003ea4 l       .text  00000000 
20003ea6 l       .text  00000000 
20003ea6 l       .text  00000000 
20003ea8 l       .text  00000000 
20003ea8 l       .text  00000000 
20003eb2 l       .text  00000000 
20003eb4 l       .text  00000000 
20003eb4 l       .text  00000000 
20003eb8 l       .text  00000000 
20003eb8 l       .text  00000000 
20003ebc l       .text  00000000 
20003ebe l       .text  00000000 
20003ec8 l       .text  00000000 
20003ec8 l       .text  00000000 
20003ed6 l       .text  00000000 
20003ed6 l       .text  00000000 
20003ee0 l       .text  00000000 
20003ef0 l       .text  00000000 
20003ef4 l       .text  00000000 
20003ef4 l       .text  00000000 
20003efa l       .text  00000000 
20003efc l       .text  00000000 
20003efc l       .text  00000000 
20003efe l       .text  00000000 
20003f04 l       .text  00000000 
20003f04 l       .text  00000000 
20003f08 l       .text  00000000 
20003f08 l       .text  00000000 
20003f0c l       .text  00000000 
20003f0c l       .text  00000000 
0000cae6 l       .debug_loc     00000000 
0000cb0c l       .debug_loc     00000000 
0000cb3d l       .debug_loc     00000000 
0000cb63 l       .debug_loc     00000000 
0000cb89 l       .debug_loc     00000000 
0000cbaf l       .debug_loc     00000000 
0000cbd5 l       .debug_loc     00000000 
0000cc06 l       .debug_loc     00000000 
0000cc42 l       .debug_loc     00000000 
0000cc6a l       .debug_loc     00000000 
0000cc90 l       .debug_loc     00000000 
0000ccb6 l       .debug_loc     00000000 
0000cce7 l       .debug_loc     00000000 
0000cd0d l       .debug_loc     00000000 
0000cd33 l       .debug_loc     00000000 
0000cd59 l       .debug_loc     00000000 
0000cd7f l       .debug_loc     00000000 
0000cdb0 l       .debug_loc     00000000 
0000cde0 l       .debug_loc     00000000 
0000ce19 l       .debug_loc     00000000 
0000ce34 l       .debug_loc     00000000 
0000ce4f l       .debug_loc     00000000 
0000ce75 l       .debug_loc     00000000 
0000ce90 l       .debug_loc     00000000 
0000cecc l       .debug_loc     00000000 
0000cf08 l       .debug_loc     00000000 
0000cf2e l       .debug_loc     00000000 
0000cf54 l       .debug_loc     00000000 
0000cf7a l       .debug_loc     00000000 
0000cf95 l       .debug_loc     00000000 
0000cfb0 l       .debug_loc     00000000 
0000cfcb l       .debug_loc     00000000 
0000cfe6 l       .debug_loc     00000000 
0000d001 l       .debug_loc     00000000 
0000d01c l       .debug_loc     00000000 
0000d037 l       .debug_loc     00000000 
0000d05d l       .debug_loc     00000000 
0000d083 l       .debug_loc     00000000 
0000d09f l       .debug_loc     00000000 
0000d0ba l       .debug_loc     00000000 
0000d0d5 l       .debug_loc     00000000 
0000d0f0 l       .debug_loc     00000000 
0000d10b l       .debug_loc     00000000 
0000d131 l       .debug_loc     00000000 
0000d157 l       .debug_loc     00000000 
0000d172 l       .debug_loc     00000000 
0000d1a3 l       .debug_loc     00000000 
0000d1d4 l       .debug_loc     00000000 
0000d1f0 l       .debug_loc     00000000 
0000d20b l       .debug_loc     00000000 
0000d23c l       .debug_loc     00000000 
0000d26d l       .debug_loc     00000000 
0000d289 l       .debug_loc     00000000 
0000d2d3 l       .debug_loc     00000000 
0000d2ee l       .debug_loc     00000000 
0000d309 l       .debug_loc     00000000 
0000d324 l       .debug_loc     00000000 
0000d34b l       .debug_loc     00000000 
0000d366 l       .debug_loc     00000000 
0000d381 l       .debug_loc     00000000 
0000d39c l       .debug_loc     00000000 
0000d3b7 l       .debug_loc     00000000 
0000d3d2 l       .debug_loc     00000000 
0000d3ed l       .debug_loc     00000000 
0000d413 l       .debug_loc     00000000 
0000d439 l       .debug_loc     00000000 
0000d454 l       .debug_loc     00000000 
0000d46f l       .debug_loc     00000000 
0000d48a l       .debug_loc     00000000 
0000d4a5 l       .debug_loc     00000000 
0000d4c0 l       .debug_loc     00000000 
0000d4db l       .debug_loc     00000000 
0000d4f6 l       .debug_loc     00000000 
0000d51c l       .debug_loc     00000000 
0000d552 l       .debug_loc     00000000 
0000d56d l       .debug_loc     00000000 
0000d588 l       .debug_loc     00000000 
0000d5d0 l       .debug_loc     00000000 
0000d5eb l       .debug_loc     00000000 
0000d612 l       .debug_loc     00000000 
0000d63a l       .debug_loc     00000000 
0000d655 l       .debug_loc     00000000 
0000d670 l       .debug_loc     00000000 
0000d68b l       .debug_loc     00000000 
0000d6a7 l       .debug_loc     00000000 
0000d6d8 l       .debug_loc     00000000 
0000d709 l       .debug_loc     00000000 
0000d730 l       .debug_loc     00000000 
0000d74b l       .debug_loc     00000000 
0000d766 l       .debug_loc     00000000 
0000d797 l       .debug_loc     00000000 
0000d7c8 l       .debug_loc     00000000 
0000d7ee l       .debug_loc     00000000 
0000d80a l       .debug_loc     00000000 
0000d830 l       .debug_loc     00000000 
0000d84b l       .debug_loc     00000000 
0000d866 l       .debug_loc     00000000 
0000d881 l       .debug_loc     00000000 
0000d8a7 l       .debug_loc     00000000 
0000d8c2 l       .debug_loc     00000000 
0000d8dd l       .debug_loc     00000000 
0000d8f8 l       .debug_loc     00000000 
0000d913 l       .debug_loc     00000000 
0000d92e l       .debug_loc     00000000 
0000d949 l       .debug_loc     00000000 
0000d964 l       .debug_loc     00000000 
0000d996 l       .debug_loc     00000000 
0000d9b1 l       .debug_loc     00000000 
0000d9cc l       .debug_loc     00000000 
0000d9e7 l       .debug_loc     00000000 
0000da02 l       .debug_loc     00000000 
0000da1d l       .debug_loc     00000000 
0000da38 l       .debug_loc     00000000 
0000da69 l       .debug_loc     00000000 
0000da9a l       .debug_loc     00000000 
0000dab5 l       .debug_loc     00000000 
0000dad0 l       .debug_loc     00000000 
0000daf7 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000945c l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001488 l       .debug_ranges  00000000 
00006638 l       .debug_str     00000000 
00009566 l       .debug_str     00000000 
0000955f l       .debug_str     00000000 
0000229c l       .debug_str     00000000 
00009476 l       .debug_str     00000000 
0000948f l       .debug_str     00000000 
00009dd5 l       .debug_str     00000000 
0000952b l       .debug_str     00000000 
00009536 l       .debug_str     00000000 
00002599 l       .debug_str     00000000 
0000953e l       .debug_str     00000000 
00009550 l       .debug_str     00000000 
00009483 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000950f l       .debug_str     00000000 
00009520 l       .debug_str     00000000 
0000949e l       .debug_str     00000000 
000094b4 l       .debug_str     00000000 
000094bb l       .debug_str     00000000 
000094c6 l       .debug_str     00000000 
000094ce l       .debug_str     00000000 
000094a9 l       .debug_str     00000000 
0000951a l       .debug_str     00000000 
000094da l       .debug_str     00000000 
000094ea l       .debug_str     00000000 
000094f2 l       .debug_str     00000000 
0000223c l       .debug_str     00000000 
0000950b l       .debug_str     00000000 
000094fb l       .debug_str     00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
0000956c l       .debug_str     00000000 
0000957e l       .debug_str     00000000 
00009590 l       .debug_str     00000000 
00009597 l       .debug_str     00000000 
000095a9 l       .debug_str     00000000 
000095c3 l       .debug_str     00000000 
000095d5 l       .debug_str     00000000 
000095ee l       .debug_str     00000000 
00009601 l       .debug_str     00000000 
00009613 l       .debug_str     00000000 
00009625 l       .debug_str     00000000 
00009638 l       .debug_str     00000000 
00009645 l       .debug_str     00000000 
00009662 l       .debug_str     00000000 
00009679 l       .debug_str     00000000 
0000223d l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
0000968b l       .debug_str     00000000 
000096a0 l       .debug_str     00000000 
000096ae l       .debug_str     00000000 
000022b0 l       .debug_str     00000000 
000096be l       .debug_str     00000000 
000096d3 l       .debug_str     00000000 
000096de l       .debug_str     00000000 
000096eb l       .debug_str     00000000 
000096fb l       .debug_str     00000000 
00009704 l       .debug_str     00000000 
0000970b l       .debug_str     00000000 
00009714 l       .debug_str     00000000 
0000971f l       .debug_str     00000000 
00009728 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00009731 l       .debug_str     00000000 
00009746 l       .debug_str     00000000 
00009751 l       .debug_str     00000000 
00009758 l       .debug_str     00000000 
00009765 l       .debug_str     00000000 
00009772 l       .debug_str     00000000 
00009780 l       .debug_str     00000000 
00009789 l       .debug_str     00000000 
0000920e l       .debug_str     00000000 
00002275 l       .debug_str     00000000 
000097cc l       .debug_str     00000000 
000097bd l       .debug_str     00000000 
00009792 l       .debug_str     00000000 
000097a0 l       .debug_str     00000000 
000097b0 l       .debug_str     00000000 
000097db l       .debug_str     00000000 
000097ee l       .debug_str     00000000 
00009807 l       .debug_str     00000000 
00002269 l       .debug_str     00000000 
00009bc4 l       .debug_str     00000000 
00009d46 l       .debug_str     00000000 
000013f8 l       .debug_ranges  00000000 
00001410 l       .debug_ranges  00000000 
0000981e l       .debug_str     00000000 
0000982b l       .debug_str     00000000 
00009835 l       .debug_str     00000000 
00009849 l       .debug_str     00000000 
0000985f l       .debug_str     00000000 
00009979 l       .debug_str     00000000 
0000986f l       .debug_str     00000000 
0000987c l       .debug_str     00000000 
00009882 l       .debug_str     00000000 
000022bd l       .debug_str     00000000 
00009bd1 l       .debug_str     00000000 
00001428 l       .debug_ranges  00000000 
0000989e l       .debug_str     00000000 
000098ab l       .debug_str     00000000 
0000998b l       .debug_str     00000000 
00002593 l       .debug_str     00000000 
00009bdf l       .debug_str     00000000 
00009beb l       .debug_str     00000000 
00009bf9 l       .debug_str     00000000 
00009c11 l       .debug_str     00000000 
000099a4 l       .debug_str     00000000 
00009c19 l       .debug_str     00000000 
000099b6 l       .debug_str     00000000 
00009c22 l       .debug_str     00000000 
000099cf l       .debug_str     00000000 
00009c38 l       .debug_str     00000000 
00009c46 l       .debug_str     00000000 
00009c55 l       .debug_str     00000000 
00009c6b l       .debug_str     00000000 
000099e0 l       .debug_str     00000000 
00009c81 l       .debug_str     00000000 
00002256 l       .debug_str     00000000 
00009c90 l       .debug_str     00000000 
00009c9e l       .debug_str     00000000 
00002575 l       .debug_str     00000000 
000098ba l       .debug_str     00000000 
000099ed l       .debug_str     00000000 
00009caa l       .debug_str     00000000 
000099f9 l       .debug_str     00000000 
00009cb8 l       .debug_str     00000000 
000023aa l       .debug_str     00000000 
0000263d l       .debug_str     00000000 
000098d1 l       .debug_str     00000000 
00009a0c l       .debug_str     00000000 
00009a18 l       .debug_str     00000000 
000098f1 l       .debug_str     00000000 
00009a2a l       .debug_str     00000000 
00009ccf l       .debug_str     00000000 
00009cdf l       .debug_str     00000000 
00009ce6 l       .debug_str     00000000 
00009a39 l       .debug_str     00000000 
00009cf4 l       .debug_str     00000000 
00009d04 l       .debug_str     00000000 
00009d14 l       .debug_str     00000000 
00001440 l       .debug_ranges  00000000 
00001458 l       .debug_ranges  00000000 
00009a4c l       .debug_str     00000000 
00009d1b l       .debug_str     00000000 
00009a5e l       .debug_str     00000000 
00009a77 l       .debug_str     00000000 
000022c9 l       .debug_str     00000000 
00009d22 l       .debug_str     00000000 
00009903 l       .debug_str     00000000 
00009a8e l       .debug_str     00000000 
00009d2f l       .debug_str     00000000 
00009d3d l       .debug_str     00000000 
00009a9d l       .debug_str     00000000 
00009d45 l       .debug_str     00000000 
00009d4e l       .debug_str     00000000 
00009d59 l       .debug_str     00000000 
00009d64 l       .debug_str     00000000 
00009d6e l       .debug_str     00000000 
00009abe l       .debug_str     00000000 
00009d78 l       .debug_str     00000000 
00009d88 l       .debug_str     00000000 
00009ad0 l       .debug_str     00000000 
00009ae0 l       .debug_str     00000000 
00009d97 l       .debug_str     00000000 
00009de5 l       .debug_str     00000000 
00009913 l       .debug_str     00000000 
00009af6 l       .debug_str     00000000 
00009da3 l       .debug_str     00000000 
00009db9 l       .debug_str     00000000 
00009b15 l       .debug_str     00000000 
00009b34 l       .debug_str     00000000 
00009dc5 l       .debug_str     00000000 
00009b4d l       .debug_str     00000000 
00009dd4 l       .debug_str     00000000 
00001470 l       .debug_ranges  00000000 
00009b6f l       .debug_str     00000000 
0000993c l       .debug_str     00000000 
0000991f l       .debug_str     00000000 
0000996f l       .debug_str     00000000 
00009965 l       .debug_str     00000000 
00009946 l       .debug_str     00000000 
00009955 l       .debug_str     00000000 
00009b84 l       .debug_str     00000000 
00009de4 l       .debug_str     00000000 
00009df2 l       .debug_str     00000000 
00009b99 l       .debug_str     00000000 
00009baa l       .debug_str     00000000 
00009999 l       .debug_str     00000000 
00002293 l       .debug_str     00000000 
00002284 l       .debug_str     00000000 
000016e4 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 list.c
20003f0c l       .text  00000000 
20003f0c l       .text  00000000 
20003f0c l       .text  00000000 
20003f0c l       .text  00000000 
20003f10 l       .text  00000000 
20003f14 l       .text  00000000 
20003f16 l       .text  00000000 
20003f18 l       .text  00000000 
20003f1a l       .text  00000000 
20003f1e l       .text  00000000 
20003f20 l       .text  00000000 
20003f20 l       .text  00000000 
20003f20 l       .text  00000000 
20003f20 l       .text  00000000 
20003f20 l       .text  00000000 
20003f20 l       .text  00000000 
20003f24 l       .text  00000000 
20003f26 l       .text  00000000 
20003f26 l       .text  00000000 
20003f26 l       .text  00000000 
20003f26 l       .text  00000000 
20003f26 l       .text  00000000 
20003f26 l       .text  00000000 
20003f28 l       .text  00000000 
20003f2a l       .text  00000000 
20003f2c l       .text  00000000 
20003f2c l       .text  00000000 
20003f2e l       .text  00000000 
20003f30 l       .text  00000000 
20003f32 l       .text  00000000 
20003f34 l       .text  00000000 
20003f38 l       .text  00000000 
20003f3a l       .text  00000000 
20003f3e l       .text  00000000 
20003f40 l       .text  00000000 
20003f44 l       .text  00000000 
20003f46 l       .text  00000000 
20003f48 l       .text  00000000 
20003f48 l       .text  00000000 
0000db12 l       .debug_loc     00000000 
0000db2d l       .debug_loc     00000000 
0000db48 l       .debug_loc     00000000 
0000db63 l       .debug_loc     00000000 
0000db7e l       .debug_loc     00000000 
0000dba4 l       .debug_loc     00000000 
0000dbbf l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00009dff l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000015b0 l       .debug_ranges  00000000 
0000950f l       .debug_str     00000000 
00009520 l       .debug_str     00000000 
0000949e l       .debug_str     00000000 
000094b4 l       .debug_str     00000000 
000094bb l       .debug_str     00000000 
000094c6 l       .debug_str     00000000 
000094ce l       .debug_str     00000000 
000094a9 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000951a l       .debug_str     00000000 
000094da l       .debug_str     00000000 
000094ea l       .debug_str     00000000 
000094f2 l       .debug_str     00000000 
0000223c l       .debug_str     00000000 
0000950b l       .debug_str     00000000 
000094fb l       .debug_str     00000000 
0000985f l       .debug_str     00000000 
00009cdf l       .debug_str     00000000 
00009835 l       .debug_str     00000000 
00009e18 l       .debug_str     00000000 
000098ab l       .debug_str     00000000 
00009e1f l       .debug_str     00000000 
00009913 l       .debug_str     00000000 
00009e2d l       .debug_str     00000000 
00009e3f l       .debug_str     00000000 
0000989e l       .debug_str     00000000 
00009e4a l       .debug_str     00000000 
00009590 l       .debug_str     00000000 
00001a24 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 heap_1.c
20003f48 l       .text  00000000 
20003f48 l       .text  00000000 
20003f48 l       .text  00000000 
20003f4a l       .text  00000000 
20003f52 l       .text  00000000 
20003f54 l       .text  00000000 
20003f54 l       .text  00000000 
20003f56 l       .text  00000000 
20003f58 l       .text  00000000 
20003f66 l       .text  00000000 
20003f68 l       .text  00000000 
20003f68 l       .text  00000000 
20003f6c l       .text  00000000 
100020e8 l     O .bss   00000004 pvPortMalloc.pucAlignedHeap
20003f6c l       .text  00000000 
20003f74 l       .text  00000000 
20003f76 l       .text  00000000 
20003f7a l       .text  00000000 
20003f88 l       .text  00000000 
100020ec l     O .bss   00000004 xNextFreeByte
20003f8a l       .text  00000000 
20003f92 l       .text  00000000 
20003f94 l       .text  00000000 
20003f94 l       .text  00000000 
20003fa0 l       .text  00000000 
20003fa4 l       .text  00000000 
20003fa4 l       .text  00000000 
20003fa8 l       .text  00000000 
20003fac l       .text  00000000 
20003fac l       .text  00000000 
20003fae l       .text  00000000 
20003fb2 l       .text  00000000 
20003fb4 l       .text  00000000 
20003fb4 l       .text  00000000 
20003fb8 l       .text  00000000 
20003fb8 l       .text  00000000 
20003fbc l       .text  00000000 
20003fbc l       .text  00000000 
20003fbe l       .text  00000000 
20003fc6 l       .text  00000000 
20003fca l       .text  00000000 
20003fca l       .text  00000000 
20003fca l       .text  00000000 
20003fca l       .text  00000000 
20003fca l       .text  00000000 
20003fca l       .text  00000000 
20003fcc l       .text  00000000 
20003fcc l       .text  00000000 
0000dbda l       .debug_loc     00000000 
0000dc0b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00009e59 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000015e0 l       .debug_ranges  00000000 
0000981e l       .debug_str     00000000 
00009e85 l       .debug_str     00000000 
00009ecd l       .debug_str     00000000 
00009ed9 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
00009e94 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
00009903 l       .debug_str     00000000 
00009a2a l       .debug_str     00000000 
0000223d l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
00002558 l       .debug_str     00000000 
0000982b l       .debug_str     00000000 
00009ee2 l       .debug_str     00000000 
00009ea2 l       .debug_str     00000000 
00009eb8 l       .debug_str     00000000 
00001a88 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 test_hooks_default.c
20003fcc l       .text  00000000 
20003fcc l       .text  00000000 
20003fcc l       .text  00000000 
20003fcc l       .text  00000000 
20003fd0 l       .text  00000000 
20003fd0 l       .text  00000000 
20003fd0 l       .text  00000000 
20003fd0 l       .text  00000000 
20003fd0 l       .text  00000000 
20003fd0 l       .text  00000000 
20003fd4 l       .text  00000000 
20003fd4 l       .text  00000000 
00000000 l       .debug_str     00000000 
00009ee5 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001608 l       .debug_ranges  00000000 
000023e9 l       .debug_str     00000000 
00002404 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00001ae8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 mmio.c
20003fd4 l       .text  00000000 
20003fd4 l       .text  00000000 
20003fd4 l       .text  00000000 
20003fd4 l       .text  00000000 
20003fd8 l     F .text  000000b4 mmio_region_memcpy32
20003fd8 l       .text  00000000 
20003fd8 l       .text  00000000 
20003fd8 l       .text  00000000 
20003fd8 l       .text  00000000 
20003fd8 l       .text  00000000 
20003fd8 l       .text  00000000 
20003fda l       .text  00000000 
20003fda l       .text  00000000 
20003fea l       .text  00000000 
20003fec l       .text  00000000 
20003fee l       .text  00000000 
20003ff0 l       .text  00000000 
20003ff2 l       .text  00000000 
20003ff4 l       .text  00000000 
20003ff6 l       .text  00000000 
20003ff6 l       .text  00000000 
20003ffa l       .text  00000000 
20003ffa l       .text  00000000 
20003ffc l       .text  00000000 
20003ffc l       .text  00000000 
20004004 l       .text  00000000 
20004004 l       .text  00000000 
20004006 l       .text  00000000 
20004006 l       .text  00000000 
20004008 l       .text  00000000 
20004008 l       .text  00000000 
2000400c l       .text  00000000 
2000400c l       .text  00000000 
20004010 l       .text  00000000 
20004010 l       .text  00000000 
20004012 l       .text  00000000 
20004012 l       .text  00000000 
20004016 l       .text  00000000 
20004018 l       .text  00000000 
2000401c l       .text  00000000 
2000401c l       .text  00000000 
2000401e l       .text  00000000 
2000401e l       .text  00000000 
20004020 l       .text  00000000 
20004022 l       .text  00000000 
20004026 l       .text  00000000 
20004026 l       .text  00000000 
20004028 l       .text  00000000 
20004028 l       .text  00000000 
2000402a l       .text  00000000 
2000402a l       .text  00000000 
2000402e l       .text  00000000 
2000402e l       .text  00000000 
20004030 l       .text  00000000 
20004030 l       .text  00000000 
20004032 l       .text  00000000 
20004034 l       .text  00000000 
20004036 l       .text  00000000 
20004036 l       .text  00000000 
2000403a l       .text  00000000 
2000403a l       .text  00000000 
2000403e l       .text  00000000 
20004040 l       .text  00000000 
20004042 l       .text  00000000 
20004042 l       .text  00000000 
2000404a l       .text  00000000 
2000404a l       .text  00000000 
2000404c l       .text  00000000 
2000404c l       .text  00000000 
20004050 l       .text  00000000 
20004050 l       .text  00000000 
20004054 l       .text  00000000 
2000405c l       .text  00000000 
2000405c l       .text  00000000 
2000405e l       .text  00000000 
20004066 l       .text  00000000 
20004066 l       .text  00000000 
20004068 l       .text  00000000 
20004068 l       .text  00000000 
2000406e l       .text  00000000 
20004070 l       .text  00000000 
20004070 l       .text  00000000 
20004072 l       .text  00000000 
20004074 l       .text  00000000 
20004076 l       .text  00000000 
20004076 l       .text  00000000 
20004078 l       .text  00000000 
20004078 l       .text  00000000 
20004088 l       .text  00000000 
2000408c l       .text  00000000 
2000408c l       .text  00000000 
2000408c l       .text  00000000 
2000408c l       .text  00000000 
2000408c l       .text  00000000 
2000408c l       .text  00000000 
20004090 l       .text  00000000 
20004090 l       .text  00000000 
20004090 l       .text  00000000 
0000dc3e l       .debug_loc     00000000 
0000dc64 l       .debug_loc     00000000 
0000dc95 l       .debug_loc     00000000 
0000dcc6 l       .debug_loc     00000000 
0000dcec l       .debug_loc     00000000 
0000dd1c l       .debug_loc     00000000 
0000dd42 l       .debug_loc     00000000 
0000dd68 l       .debug_loc     00000000 
0000dd8e l       .debug_loc     00000000 
0000ddb7 l       .debug_loc     00000000 
0000dddd l       .debug_loc     00000000 
0000de04 l       .debug_loc     00000000 
0000de42 l       .debug_loc     00000000 
0000de5d l       .debug_loc     00000000 
0000de78 l       .debug_loc     00000000 
0000de93 l       .debug_loc     00000000 
0000deae l       .debug_loc     00000000 
0000dec9 l       .debug_loc     00000000 
0000dee4 l       .debug_loc     00000000 
0000deff l       .debug_loc     00000000 
0000df1a l       .debug_loc     00000000 
0000df35 l       .debug_loc     00000000 
0000df50 l       .debug_loc     00000000 
0000df6b l       .debug_loc     00000000 
0000df86 l       .debug_loc     00000000 
0000dfa1 l       .debug_loc     00000000 
0000dfbc l       .debug_loc     00000000 
0000dfd7 l       .debug_loc     00000000 
0000dff2 l       .debug_loc     00000000 
0000e00d l       .debug_loc     00000000 
0000e028 l       .debug_loc     00000000 
0000e043 l       .debug_loc     00000000 
0000e05e l       .debug_loc     00000000 
0000e079 l       .debug_loc     00000000 
0000e094 l       .debug_loc     00000000 
0000e0af l       .debug_loc     00000000 
0000e0ca l       .debug_loc     00000000 
0000e0e5 l       .debug_loc     00000000 
0000e100 l       .debug_loc     00000000 
0000e11b l       .debug_loc     00000000 
0000e136 l       .debug_loc     00000000 
0000e151 l       .debug_loc     00000000 
0000e17f l       .debug_loc     00000000 
0000e19a l       .debug_loc     00000000 
0000e1b5 l       .debug_loc     00000000 
0000e1d0 l       .debug_loc     00000000 
0000e1eb l       .debug_loc     00000000 
0000e21a l       .debug_loc     00000000 
0000e241 l       .debug_loc     00000000 
0000e25c l       .debug_loc     00000000 
0000e277 l       .debug_loc     00000000 
0000e292 l       .debug_loc     00000000 
0000e2ad l       .debug_loc     00000000 
0000e2c8 l       .debug_loc     00000000 
0000e2e3 l       .debug_loc     00000000 
0000e309 l       .debug_loc     00000000 
0000e324 l       .debug_loc     00000000 
0000e33f l       .debug_loc     00000000 
0000e36e l       .debug_loc     00000000 
0000e395 l       .debug_loc     00000000 
0000e3bc l       .debug_loc     00000000 
0000e3d7 l       .debug_loc     00000000 
0000e3f2 l       .debug_loc     00000000 
0000e40d l       .debug_loc     00000000 
0000e428 l       .debug_loc     00000000 
0000e443 l       .debug_loc     00000000 
0000e45e l       .debug_loc     00000000 
0000e47c l       .debug_loc     00000000 
0000e497 l       .debug_loc     00000000 
0000e4b2 l       .debug_loc     00000000 
0000e4cd l       .debug_loc     00000000 
0000e4e8 l       .debug_loc     00000000 
0000e503 l       .debug_loc     00000000 
0000e521 l       .debug_loc     00000000 
0000e53c l       .debug_loc     00000000 
0000e557 l       .debug_loc     00000000 
0000e572 l       .debug_loc     00000000 
0000e58d l       .debug_loc     00000000 
0000e5a8 l       .debug_loc     00000000 
0000e5d7 l       .debug_loc     00000000 
0000e5fe l       .debug_loc     00000000 
0000e619 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000a246 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001620 l       .debug_ranges  00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
000087c2 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
00007582 l       .debug_str     00000000 
0000a3dd l       .debug_str     00000000 
00008060 l       .debug_str     00000000 
0000a272 l       .debug_str     00000000 
000050c7 l       .debug_str     00000000 
0000a3e2 l       .debug_str     00000000 
0000a3ec l       .debug_str     00000000 
0000a3f9 l       .debug_str     00000000 
0000a406 l       .debug_str     00000000 
0000a412 l       .debug_str     00000000 
0000a426 l       .debug_str     00000000 
00005119 l       .debug_str     00000000 
0000a260 l       .debug_str     00000000 
00007bf9 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
0000195e l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
0000194a l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
00004b4d l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00008857 l       .debug_str     00000000 
0000a433 l       .debug_str     00000000 
0000a287 l       .debug_str     00000000 
00008077 l       .debug_str     00000000 
0000a29d l       .debug_str     00000000 
0000a2af l       .debug_str     00000000 
0000a2c2 l       .debug_str     00000000 
0000a2de l       .debug_str     00000000 
000062f4 l       .debug_str     00000000 
00001985 l       .debug_str     00000000 
00001988 l       .debug_str     00000000 
000019cd l       .debug_str     00000000 
000019bc l       .debug_str     00000000 
00001de4 l       .debug_str     00000000 
00008f07 l       .debug_str     00000000 
0000a2fb l       .debug_str     00000000 
00001d52 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
00007469 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
0000198e l       .debug_str     00000000 
00001d8d l       .debug_str     00000000 
000019a5 l       .debug_str     00000000 
00001d2f l       .debug_str     00000000 
00001d5d l       .debug_str     00000000 
00001d6c l       .debug_str     00000000 
0000a313 l       .debug_str     00000000 
0000a335 l       .debug_str     00000000 
0000a357 l       .debug_str     00000000 
000019e0 l       .debug_str     00000000 
0000a37a l       .debug_str     00000000 
0000a39c l       .debug_str     00000000 
0000a3bc l       .debug_str     00000000 
00001b40 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 memory.c
20004090 l       .text  00000000 
20004090 l       .text  00000000 
20004090 l       .text  00000000 
20004090 l       .text  00000000 
20004098 l       .text  00000000 
2000409c l       .text  00000000 
2000409c l       .text  00000000 
200040a0 l       .text  00000000 
200040a0 l       .text  00000000 
200040a4 l       .text  00000000 
200040a4 l       .text  00000000 
200040b8 l       .text  00000000 
200040b8 l       .text  00000000 
200040bc l       .text  00000000 
200040be l       .text  00000000 
200040c2 l       .text  00000000 
200040c2 l       .text  00000000 
200040c6 l       .text  00000000 
200040c6 l       .text  00000000 
200040cc l       .text  00000000 
200040cc l       .text  00000000 
200040d0 l       .text  00000000 
200040d4 l       .text  00000000 
200040d4 l       .text  00000000 
200040d6 l       .text  00000000 
200040dc l       .text  00000000 
200040dc l       .text  00000000 
200040e0 l       .text  00000000 
200040e0 l       .text  00000000 
200040e4 l       .text  00000000 
200040e4 l       .text  00000000 
200040e6 l       .text  00000000 
200040e6 l       .text  00000000 
200040ea l       .text  00000000 
200040ea l       .text  00000000 
200040ec l       .text  00000000 
200040ec l       .text  00000000 
200040ee l       .text  00000000 
200040ee l       .text  00000000 
200040f2 l       .text  00000000 
200040f2 l       .text  00000000 
200040fa l       .text  00000000 
20004100 l       .text  00000000 
20004100 l       .text  00000000 
20004104 l       .text  00000000 
20004108 l       .text  00000000 
2000410e l       .text  00000000 
20004110 l       .text  00000000 
20004110 l       .text  00000000 
20004112 l       .text  00000000 
20004112 l       .text  00000000 
20004112 l       .text  00000000 
20004112 l       .text  00000000 
20004112 l       .text  00000000 
20004116 l       .text  00000000 
20004116 l       .text  00000000 
2000411a l       .text  00000000 
2000411a l       .text  00000000 
20004120 l       .text  00000000 
20004120 l       .text  00000000 
20004124 l       .text  00000000 
20004126 l       .text  00000000 
2000412a l       .text  00000000 
2000412a l       .text  00000000 
2000412c l       .text  00000000 
2000412c l       .text  00000000 
20004130 l       .text  00000000 
20004130 l       .text  00000000 
20004134 l       .text  00000000 
20004134 l       .text  00000000 
20004136 l       .text  00000000 
20004138 l       .text  00000000 
2000413a l       .text  00000000 
2000413a l       .text  00000000 
2000413e l       .text  00000000 
2000414e l       .text  00000000 
2000414e l       .text  00000000 
20004152 l       .text  00000000 
20004154 l       .text  00000000 
20004154 l       .text  00000000 
20004156 l       .text  00000000 
20004156 l       .text  00000000 
2000415a l       .text  00000000 
2000415a l       .text  00000000 
20004160 l       .text  00000000 
20004164 l       .text  00000000 
20004164 l       .text  00000000 
20004168 l       .text  00000000 
2000416c l       .text  00000000 
2000416e l       .text  00000000 
20004170 l       .text  00000000 
20004170 l       .text  00000000 
20004170 l       .text  00000000 
20004170 l       .text  00000000 
20004170 l       .text  00000000 
20004174 l       .text  00000000 
20004174 l       .text  00000000 
20004178 l       .text  00000000 
20004178 l       .text  00000000 
20004180 l       .text  00000000 
20004184 l       .text  00000000 
20004188 l       .text  00000000 
2000418a l       .text  00000000 
2000418c l       .text  00000000 
2000418c l       .text  00000000 
20004190 l       .text  00000000 
20004194 l       .text  00000000 
20004194 l       .text  00000000 
20004196 l       .text  00000000 
20004198 l       .text  00000000 
2000419a l       .text  00000000 
200041a4 l       .text  00000000 
200041a4 l       .text  00000000 
200041a8 l       .text  00000000 
200041b4 l       .text  00000000 
200041c2 l       .text  00000000 
200041c2 l       .text  00000000 
200041c6 l       .text  00000000 
200041c6 l       .text  00000000 
200041c8 l       .text  00000000 
200041c8 l       .text  00000000 
200041cc l       .text  00000000 
200041d0 l       .text  00000000 
200041d4 l       .text  00000000 
200041d8 l       .text  00000000 
200041d8 l       .text  00000000 
200041dc l       .text  00000000 
200041e0 l       .text  00000000 
200041e4 l       .text  00000000 
200041e4 l       .text  00000000 
200041e8 l       .text  00000000 
200041ea l       .text  00000000 
200041ec l       .text  00000000 
200041ec l       .text  00000000 
200041ee l       .text  00000000 
200041f2 l       .text  00000000 
200041f2 l       .text  00000000 
200041fa l       .text  00000000 
200041fe l       .text  00000000 
200041fe l       .text  00000000 
20004202 l       .text  00000000 
20004202 l       .text  00000000 
20004206 l       .text  00000000 
20004208 l       .text  00000000 
2000420a l       .text  00000000 
2000420c l       .text  00000000 
2000420e l       .text  00000000 
2000420e l       .text  00000000 
20004212 l       .text  00000000 
20004212 l       .text  00000000 
20004216 l       .text  00000000 
20004216 l       .text  00000000 
2000421a l       .text  00000000 
2000421e l       .text  00000000 
2000421e l       .text  00000000 
2000421e l       .text  00000000 
2000421e l       .text  00000000 
2000421e l       .text  00000000 
2000421e l       .text  00000000 
20004222 l       .text  00000000 
20004222 l       .text  00000000 
20004226 l       .text  00000000 
20004226 l       .text  00000000 
2000422e l       .text  00000000 
2000422e l       .text  00000000 
20004232 l       .text  00000000 
20004234 l       .text  00000000 
20004238 l       .text  00000000 
20004238 l       .text  00000000 
20004244 l       .text  00000000 
20004244 l       .text  00000000 
20004248 l       .text  00000000 
20004248 l       .text  00000000 
20004250 l       .text  00000000 
20004252 l       .text  00000000 
20004252 l       .text  00000000 
20004258 l       .text  00000000 
20004258 l       .text  00000000 
2000425c l       .text  00000000 
2000425c l       .text  00000000 
20004264 l       .text  00000000 
20004264 l       .text  00000000 
20004268 l       .text  00000000 
20004268 l       .text  00000000 
2000426e l       .text  00000000 
20004276 l       .text  00000000 
20004276 l       .text  00000000 
2000427a l       .text  00000000 
2000427a l       .text  00000000 
2000427e l       .text  00000000 
20004282 l       .text  00000000 
20004282 l       .text  00000000 
20004286 l       .text  00000000 
20004288 l       .text  00000000 
2000428a l       .text  00000000 
2000428e l       .text  00000000 
2000428e l       .text  00000000 
20004292 l       .text  00000000 
20004296 l       .text  00000000 
2000429a l       .text  00000000 
2000429e l       .text  00000000 
200042a2 l       .text  00000000 
200042a4 l       .text  00000000 
200042a4 l       .text  00000000 
200042a8 l       .text  00000000 
200042a8 l       .text  00000000 
200042ac l       .text  00000000 
200042ac l       .text  00000000 
200042ae l       .text  00000000 
200042b0 l       .text  00000000 
200042b4 l       .text  00000000 
200042b4 l       .text  00000000 
200042bc l       .text  00000000 
200042be l       .text  00000000 
200042be l       .text  00000000 
200042c6 l       .text  00000000 
200042c6 l       .text  00000000 
200042ca l       .text  00000000 
200042ca l       .text  00000000 
200042cc l       .text  00000000 
200042cc l       .text  00000000 
200042d0 l       .text  00000000 
200042d0 l       .text  00000000 
200042d2 l       .text  00000000 
200042d2 l       .text  00000000 
200042d6 l       .text  00000000 
200042d6 l       .text  00000000 
200042d8 l       .text  00000000 
200042dc l       .text  00000000 
200042dc l       .text  00000000 
0000e634 l       .debug_loc     00000000 
0000e64f l       .debug_loc     00000000 
0000e66a l       .debug_loc     00000000 
0000e685 l       .debug_loc     00000000 
0000e6a0 l       .debug_loc     00000000 
0000e6bb l       .debug_loc     00000000 
0000e6d6 l       .debug_loc     00000000 
0000e726 l       .debug_loc     00000000 
0000e741 l       .debug_loc     00000000 
0000e75c l       .debug_loc     00000000 
0000e777 l       .debug_loc     00000000 
0000e792 l       .debug_loc     00000000 
0000e7ad l       .debug_loc     00000000 
0000e7c8 l       .debug_loc     00000000 
0000e7e3 l       .debug_loc     00000000 
0000e833 l       .debug_loc     00000000 
0000e84e l       .debug_loc     00000000 
0000e869 l       .debug_loc     00000000 
0000e884 l       .debug_loc     00000000 
0000e89f l       .debug_loc     00000000 
0000e8ba l       .debug_loc     00000000 
0000e8d5 l       .debug_loc     00000000 
0000e8f0 l       .debug_loc     00000000 
0000e90f l       .debug_loc     00000000 
0000e92e l       .debug_loc     00000000 
0000e949 l       .debug_loc     00000000 
0000e964 l       .debug_loc     00000000 
0000e9c1 l       .debug_loc     00000000 
0000e9dc l       .debug_loc     00000000 
0000e9f7 l       .debug_loc     00000000 
0000ea12 l       .debug_loc     00000000 
0000ea2d l       .debug_loc     00000000 
0000ea48 l       .debug_loc     00000000 
0000ea63 l       .debug_loc     00000000 
0000ea7e l       .debug_loc     00000000 
0000ea99 l       .debug_loc     00000000 
0000eab8 l       .debug_loc     00000000 
0000ead7 l       .debug_loc     00000000 
0000eaf2 l       .debug_loc     00000000 
0000eb39 l       .debug_loc     00000000 
0000eb54 l       .debug_loc     00000000 
0000eb6f l       .debug_loc     00000000 
0000eb95 l       .debug_loc     00000000 
0000ebb0 l       .debug_loc     00000000 
0000ebcb l       .debug_loc     00000000 
0000ebe6 l       .debug_loc     00000000 
0000ec01 l       .debug_loc     00000000 
0000ec1c l       .debug_loc     00000000 
0000ec42 l       .debug_loc     00000000 
0000ec5d l       .debug_loc     00000000 
0000ec83 l       .debug_loc     00000000 
0000eca9 l       .debug_loc     00000000 
0000ecc6 l       .debug_loc     00000000 
0000ed2e l       .debug_loc     00000000 
0000ed49 l       .debug_loc     00000000 
0000ed6f l       .debug_loc     00000000 
0000ed95 l       .debug_loc     00000000 
0000edb0 l       .debug_loc     00000000 
0000edd6 l       .debug_loc     00000000 
0000ee07 l       .debug_loc     00000000 
0000ee22 l       .debug_loc     00000000 
0000ee3d l       .debug_loc     00000000 
0000ee6e l       .debug_loc     00000000 
0000ee8b l       .debug_loc     00000000 
0000eea6 l       .debug_loc     00000000 
0000eeed l       .debug_loc     00000000 
0000ef13 l       .debug_loc     00000000 
0000ef2e l       .debug_loc     00000000 
0000ef75 l       .debug_loc     00000000 
0000ef90 l       .debug_loc     00000000 
0000efb6 l       .debug_loc     00000000 
0000efdc l       .debug_loc     00000000 
0000eff7 l       .debug_loc     00000000 
0000f012 l       .debug_loc     00000000 
0000f02d l       .debug_loc     00000000 
0000f048 l       .debug_loc     00000000 
0000f075 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000a437 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001710 l       .debug_ranges  00000000 
0000a453 l       .debug_str     00000000 
0000a45d l       .debug_str     00000000 
0000a467 l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
000025e0 l       .debug_str     00000000 
000025ee l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
0000a471 l       .debug_str     00000000 
0000a553 l       .debug_str     00000000 
0000a55d l       .debug_str     00000000 
00008060 l       .debug_str     00000000 
0000a48b l       .debug_str     00000000 
0000a496 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00001fa7 l       .debug_str     00000000 
0000a4a2 l       .debug_str     00000000 
0000a4b4 l       .debug_str     00000000 
0000a4c4 l       .debug_str     00000000 
0000a479 l       .debug_str     00000000 
0000a4d4 l       .debug_str     00000000 
0000a4de l       .debug_str     00000000 
0000284c l       .debug_str     00000000 
000087be l       .debug_str     00000000 
0000a4e6 l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
00004b4d l       .debug_str     00000000 
0000a3dd l       .debug_str     00000000 
0000a433 l       .debug_str     00000000 
0000a522 l       .debug_str     00000000 
0000a528 l       .debug_str     00000000 
0000a4b8 l       .debug_str     00000000 
000003c8 l       .debug_str     00000000 
0000a4c8 l       .debug_str     00000000 
000016c8 l       .debug_ranges  00000000 
00008787 l       .debug_str     00000000 
00004dc2 l       .debug_str     00000000 
0000a52d l       .debug_str     00000000 
0000a534 l       .debug_str     00000000 
0000a502 l       .debug_str     00000000 
0000a53c l       .debug_str     00000000 
0000a540 l       .debug_str     00000000 
0000a544 l       .debug_str     00000000 
0000a549 l       .debug_str     00000000 
0000a54e l       .debug_str     00000000 
0000a558 l       .debug_str     00000000 
0000a509 l       .debug_str     00000000 
0000a1a2 l       .debug_str     00000000 
00007cd2 l       .debug_str     00000000 
0000a563 l       .debug_str     00000000 
000016e0 l       .debug_ranges  00000000 
0000a568 l       .debug_str     00000000 
0000a4ef l       .debug_str     00000000 
0000a42e l       .debug_str     00000000 
00007cd9 l       .debug_str     00000000 
000016f8 l       .debug_ranges  00000000 
0000a260 l       .debug_str     00000000 
00007bf9 l       .debug_str     00000000 
0000a511 l       .debug_str     00000000 
0000a519 l       .debug_str     00000000 
00001940 l       .debug_str     00000000 
0000798d l       .debug_str     00000000 
0000797a l       .debug_str     00000000 
00001ca8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 math.c
200042dc l       .text  00000000 
200042dc l       .text  00000000 
200042dc l       .text  00000000 
200042de l       .text  00000000 
200042e0 l       .text  00000000 
200042ec l       .text  00000000 
200042f2 l       .text  00000000 
200042f2 l       .text  00000000 
200042fa l       .text  00000000 
2000431a l       .text  00000000 
2000431c l       .text  00000000 
2000431c l       .text  00000000 
20004320 l       .text  00000000 
20004324 l       .text  00000000 
20004324 l       .text  00000000 
20004328 l       .text  00000000 
20004340 l       .text  00000000 
20004342 l       .text  00000000 
20004342 l       .text  00000000 
2000435c l       .text  00000000 
2000435e l       .text  00000000 
2000435e l       .text  00000000 
20004362 l       .text  00000000 
20004362 l       .text  00000000 
20004366 l       .text  00000000 
20004366 l       .text  00000000 
20004368 l       .text  00000000 
20004370 l       .text  00000000 
20004372 l       .text  00000000 
20004374 l       .text  00000000 
20004376 l       .text  00000000 
2000437a l       .text  00000000 
2000437a l       .text  00000000 
0000f095 l       .debug_loc     00000000 
0000f0b0 l       .debug_loc     00000000 
0000f0cb l       .debug_loc     00000000 
0000f0f1 l       .debug_loc     00000000 
0000f111 l       .debug_loc     00000000 
0000f140 l       .debug_loc     00000000 
0000f179 l       .debug_loc     00000000 
0000f1d4 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000a570 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001770 l       .debug_ranges  00000000 
0000a58a l       .debug_str     00000000 
00000e67 l       .debug_str     00000000 
0000291e l       .debug_str     00000000 
0000a597 l       .debug_str     00000000 
00007a71 l       .debug_str     00000000 
0000a593 l       .debug_str     00000000 
00009fd2 l       .debug_str     00000000 
0000a59b l       .debug_str     00000000 
0000a59f l       .debug_str     00000000 
000003c8 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000798d l       .debug_str     00000000 
0000797a l       .debug_str     00000000 
00001d6c l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 device_sim_dv.c
2000437a l       .text  00000000 
2000437a l       .text  00000000 
2000437a l       .text  00000000 
2000437e l       .text  00000000 
20004382 l       .text  00000000 
2000438c l       .text  00000000 
2000438c l       .text  00000000 
2000438e l       .text  00000000 
2000438e l       .text  00000000 
0000f20f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000a5a4 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001788 l       .debug_ranges  00000000 
0000a5c7 l       .debug_str     00000000 
0000a5d3 l       .debug_str     00000000 
000020fe l       .debug_str     00000000 
0000208c l       .debug_str     00000000 
00002099 l       .debug_str     00000000 
000020ad l       .debug_str     00000000 
000020be l       .debug_str     00000000 
000020cf l       .debug_str     00000000 
000020e0 l       .debug_str     00000000 
000020ef l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
0000a5e1 l       .debug_str     00000000 
0000798d l       .debug_str     00000000 
0000797a l       .debug_str     00000000 
0000a5f2 l       .debug_str     00000000 
0000a602 l       .debug_str     00000000 
0000a620 l       .debug_str     00000000 
0000a637 l       .debug_str     00000000 
0000a647 l       .debug_str     00000000 
0000a657 l       .debug_str     00000000 
0000a665 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
0000a673 l       .debug_str     00000000 
0000a681 l       .debug_str     00000000 
0000a68f l       .debug_str     00000000 
0000a69d l       .debug_str     00000000 
0000a6ab l       .debug_str     00000000 
0000a6b9 l       .debug_str     00000000 
0000a6c7 l       .debug_str     00000000 
0000a6dc l       .debug_str     00000000 
0000a6f3 l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
0000a70c l       .debug_str     00000000 
00007c1b l       .debug_str     00000000 
00002001 l       .debug_str     00000000 
0000a728 l       .debug_str     00000000 
00001da8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 top_earlgrey.c
00000000 l       .debug_str     00000000 
0000a742 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
0000a76c l       .debug_str     00000000 
00006c30 l       .debug_str     00000000 
00006bc8 l       .debug_str     00000000 
0000678f l       .debug_str     00000000 
000067b1 l       .debug_str     00000000 
000067d1 l       .debug_str     00000000 
000067f1 l       .debug_str     00000000 
00006811 l       .debug_str     00000000 
00006831 l       .debug_str     00000000 
00006850 l       .debug_str     00000000 
00006874 l       .debug_str     00000000 
00006893 l       .debug_str     00000000 
000068b2 l       .debug_str     00000000 
000068d1 l       .debug_str     00000000 
000068f3 l       .debug_str     00000000 
00006915 l       .debug_str     00000000 
00006937 l       .debug_str     00000000 
0000695e l       .debug_str     00000000 
00006981 l       .debug_str     00000000 
000069a4 l       .debug_str     00000000 
000069c5 l       .debug_str     00000000 
000069e9 l       .debug_str     00000000 
00006a11 l       .debug_str     00000000 
00006a36 l       .debug_str     00000000 
00006a5c l       .debug_str     00000000 
00006a84 l       .debug_str     00000000 
00006aa8 l       .debug_str     00000000 
00006ac7 l       .debug_str     00000000 
00006ae6 l       .debug_str     00000000 
00006b05 l       .debug_str     00000000 
00006b26 l       .debug_str     00000000 
00006b46 l       .debug_str     00000000 
00006b6b l       .debug_str     00000000 
00006b8a l       .debug_str     00000000 
00006ba9 l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
0000a797 l       .debug_str     00000000 
0000ad94 l       .debug_str     00000000 
0000ad76 l       .debug_str     00000000 
0000a7b9 l       .debug_str     00000000 
0000a7da l       .debug_str     00000000 
0000a7fb l       .debug_str     00000000 
0000a81c l       .debug_str     00000000 
0000a83d l       .debug_str     00000000 
0000a85d l       .debug_str     00000000 
0000a882 l       .debug_str     00000000 
0000a8a2 l       .debug_str     00000000 
0000a8c2 l       .debug_str     00000000 
0000a8e2 l       .debug_str     00000000 
0000a905 l       .debug_str     00000000 
0000a928 l       .debug_str     00000000 
0000a94b l       .debug_str     00000000 
0000a96d l       .debug_str     00000000 
0000a991 l       .debug_str     00000000 
0000a9b5 l       .debug_str     00000000 
0000a9d7 l       .debug_str     00000000 
0000a9fc l       .debug_str     00000000 
0000aa21 l       .debug_str     00000000 
0000aa46 l       .debug_str     00000000 
0000aa6f l       .debug_str     00000000 
0000aa95 l       .debug_str     00000000 
0000aab7 l       .debug_str     00000000 
0000aadc l       .debug_str     00000000 
0000ab03 l       .debug_str     00000000 
0000ab2c l       .debug_str     00000000 
0000ab56 l       .debug_str     00000000 
0000ab7b l       .debug_str     00000000 
0000ab9b l       .debug_str     00000000 
0000abbd l       .debug_str     00000000 
0000abdc l       .debug_str     00000000 
0000abfc l       .debug_str     00000000 
0000ac1c l       .debug_str     00000000 
0000ac3c l       .debug_str     00000000 
0000ac5e l       .debug_str     00000000 
0000ac7f l       .debug_str     00000000 
0000aca5 l       .debug_str     00000000 
0000acc5 l       .debug_str     00000000 
0000ace5 l       .debug_str     00000000 
0000ad0d l       .debug_str     00000000 
0000ad30 l       .debug_str     00000000 
0000ad56 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_boot_measurements.c
00000000 l       .debug_str     00000000 
000075c1 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00007608 l       .debug_str     00000000 
00007652 l       .debug_str     00000000 
0000761a l       .debug_str     00000000 
0000764e l       .debug_str     00000000 
00007637 l       .debug_str     00000000 
00007622 l       .debug_str     00000000 
00008de7 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_epmp_state.c
00000000 l       .debug_str     00000000 
00007666 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000076a6 l       .debug_str     00000000 
000076c8 l       .debug_str     00000000 
000076b1 l       .debug_str     00000000 
000076b8 l       .debug_str     00000000 
000076c0 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
000076d5 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00007713 l       .debug_str     00000000 
00007759 l       .debug_str     00000000 
00007720 l       .debug_str     00000000 
00007734 l       .debug_str     00000000 
0000772b l       .debug_str     00000000 
00007740 l       .debug_str     00000000 
0000774c l       .debug_str     00000000 
00007753 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_version.c
00000000 l       .debug_str     00000000 
00007768 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000077a5 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 rv_core_ibex_testutils.c
00000600 l     O .ot.status_create_record       00000080 rv_core_ibex_testutils_get_rnd_data.kOtStatusRecord
00000680 l     O .ot.status_create_record       00000080 rv_core_ibex_testutils_get_rnd_data.kOtStatusRecord.2
00000700 l     O .ot.status_create_record       00000080 rv_core_ibex_testutils_get_rnd_data.kOtStatusRecord.6
0000603e l       .debug_loc     00000000 
00006059 l       .debug_loc     00000000 
00006080 l       .debug_loc     00000000 
0000609b l       .debug_loc     00000000 
000060c1 l       .debug_loc     00000000 
000060dc l       .debug_loc     00000000 
00006102 l       .debug_loc     00000000 
0000611d l       .debug_loc     00000000 
00006139 l       .debug_loc     00000000 
00006160 l       .debug_loc     00000000 
00006187 l       .debug_loc     00000000 
000061b8 l       .debug_loc     00000000 
000061df l       .debug_loc     00000000 
000061fa l       .debug_loc     00000000 
00006221 l       .debug_loc     00000000 
00006248 l       .debug_loc     00000000 
00006264 l       .debug_loc     00000000 
00006295 l       .debug_loc     00000000 
000062c6 l       .debug_loc     00000000 
000062ec l       .debug_loc     00000000 
00006313 l       .debug_loc     00000000 
0000633a l       .debug_loc     00000000 
00006355 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000078e8 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000a30 l       .debug_ranges  00000000 
00007838 l       .debug_str     00000000 
00001f3c l       .debug_str     00000000 
00000204 l       .debug_str     00000000 
00000291 l       .debug_str     00000000 
00001fcb l       .debug_str     00000000 
00001ff9 l       .debug_str     00000000 
00007a93 l       .debug_str     00000000 
00007a9c l       .debug_str     00000000 
000009a8 l       .debug_ranges  00000000 
00004b8d l       .debug_str     00000000 
000087bd l       .debug_str     00000000 
00008e4c l       .debug_str     00000000 
00002326 l       .debug_str     00000000 
00002495 l       .debug_str     00000000 
000009c0 l       .debug_ranges  00000000 
000009e0 l       .debug_ranges  00000000 
000024bd l       .debug_str     00000000 
000024c2 l       .debug_str     00000000 
000009f8 l       .debug_ranges  00000000 
00000a18 l       .debug_ranges  00000000 
00001f77 l       .debug_str     00000000 
00001f5f l       .debug_str     00000000 
00001f4c l       .debug_str     00000000 
00001f56 l       .debug_str     00000000 
0000027b l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
000025e9 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00007ebb l       .debug_str     00000000 
00000284 l       .debug_str     00000000 
0000028a l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000255 l       .debug_str     00000000 
0000020f l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000312 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000332 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000360 l       .debug_str     00000000 
00007959 l       .debug_str     00000000 
00007917 l       .debug_str     00000000 
00007934 l       .debug_str     00000000 
0000222b l       .debug_str     00000000 
0000210a l       .debug_str     00000000 
0000210e l       .debug_str     00000000 
00002119 l       .debug_str     00000000 
00002122 l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00002145 l       .debug_str     00000000 
0000214f l       .debug_str     00000000 
0000215e l       .debug_str     00000000 
00002170 l       .debug_str     00000000 
00002183 l       .debug_str     00000000 
00002197 l       .debug_str     00000000 
000021a0 l       .debug_str     00000000 
000021ac l       .debug_str     00000000 
000021bb l       .debug_str     00000000 
000021c5 l       .debug_str     00000000 
000021d2 l       .debug_str     00000000 
000021dc l       .debug_str     00000000 
000021ed l       .debug_str     00000000 
00000161 l       .debug_str     00000000 
0000798d l       .debug_str     00000000 
0000797a l       .debug_str     00000000 
00002248 l       .debug_str     00000000 
00007996 l       .debug_str     00000000 
0000152f l       .debug_str     00000000 
00001fd8 l       .debug_str     00000000 
00001fc7 l       .debug_str     00000000 
00000157 l       .debug_str     00000000 
000002d1 l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000062e6 l       .debug_str     00000000 
000079b6 l       .debug_str     00000000 
000079d4 l       .debug_str     00000000 
000079f3 l       .debug_str     00000000 
000079e6 l       .debug_str     00000000 
00007c22 l       .debug_str     00000000 
0000a197 l       .debug_str     00000000 
00007a02 l       .debug_str     00000000 
00007a13 l       .debug_str     00000000 
00007a20 l       .debug_str     00000000 
00007a2b l       .debug_str     00000000 
00007a35 l       .debug_str     00000000 
000079ab l       .debug_str     00000000 
000082c1 l       .debug_str     00000000 
000000f7 l       .debug_str     00000000 
00007a5e l       .debug_str     00000000 
000079eb l       .debug_str     00000000 
00007a71 l       .debug_str     00000000 
000023be l       .debug_str     00000000 
0000891b l       .debug_str     00000000 
000088fc l       .debug_str     00000000 
000064e7 l       .debug_str     00000000 
0000027c l       .debug_str     00000000 
00000106 l       .debug_str     00000000 
00007a7d l       .debug_str     00000000 
00004b4d l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00001fa7 l       .debug_str     00000000 
0000153c l       .debug_str     00000000 
00001551 l       .debug_str     00000000 
0000248e l       .debug_str     00000000 
00000b70 l       .debug_frame   00000000 
2000253c g     F .text  000000d0 rand_testutils_init
2007b000 g       *ABS*  00000000 _non_volatile_scratch_start
20079800 g       *ABS*  00000000 _non_volatile_counter_3_end
20000400 g       .rom_ext_immutable     00000000 _rom_ext_immutable_end
200036d2 g     F .text  0000002a dif_uart_irq_is_pending
20000a84 g     F .text  00000038 dif_gpio_write
20003742 g     F .text  00000018 dif_uart_irq_disable_all
20079000 g       *ABS*  00000000 _non_volatile_counter_3_start
200022b4  w    F .text  00000022 ottf_instr_misaligned_fault_handler
2007b000 g       .non_volatile_scratch  00000000 begin_of_non_volatile_scratch
2000352e g     F .text  0000001e dif_spi_device_get_flash_command_fifo_occupancy
200023d4  w    F .text  0000001c ottf_external_nmi_handler
100027e8 g       .data  00000000 __global_pointer$
10002094 g     O .bss   00000004 ottf_plic
10000004 g     O .static_critical       00000040 boot_measurements
200022b4  w    F .text  00000022 ottf_instr_access_fault_handler
20003414 g     F .text  0000001a dif_spi_device_get_last_read_address
2000421e g     F .text  000000be memrchr
2000385e g     F .text  00000022 dif_uart_watermark_rx_set
200038bc g     F .text  00000022 dif_uart_byte_send_polled
200022b4  w    F .text  00000022 ottf_user_ecall_handler
20001304 g     F .text  00000316 ottf_console_configure_spi_device
200020a2 g     F .text  0000000e dif_pinmux_init
20004390 g       .shutdown      00000000 _text_end
20001cd4 g     F .text  00000016 irq_external_ctrl
2000375a g     F .text  0000001a dif_uart_irq_restore_all
200020e6 g     F .text  00000160 ottf_generic_fault_print
00010000 g       .static_critical       00000000 _chip_info_end
100020ac g     O .bss   00000004 pxCurrentTCB
200023f0  w    F .text  00000042 ottf_internal_isr
20002432 g     F .text  0000000e dif_rstmgr_init
2000260c g     F .text  0000000e dif_rv_core_ibex_init
200062c8 g     O .rodata        000002e8 top_earlgrey_plic_interrupt_for_peripheral
200062b0 g     O .rodata        00000008 kClockFreqPeripheralHz
2000251e g     F .text  0000001e dif_rv_plic_irq_complete
20000400 g       .rom_ext_immutable     00000000 _rom_ext_immutable_start
20000f06 g     F .text  00000022 xPortStartScheduler
20004090 g     F .text  00000082 memcpy
2000230a  w    F .text  000000ca ottf_external_isr
2000354c g     F .text  00000020 dif_spi_device_get_flash_address_fifo_occupancy
20080000 g       .non_volatile_scratch  00000000 end_of_non_volatile_scratch
200022b4  w    F .text  00000022 ottf_illegal_instr_fault_handler
20005e68 g     O .rodata        00000004 kDifRvPlicMinPriority
20003fca g     F .text  00000002 vPortFree
20003fd0  w    F .text  00000004 manufacturer_post_test_hook
20002a20 g     F .text  0000001e base_spi_device_stdout
00005000 g       *ABS*  00000000 _non_volatile_scratch_size
200033a8 g     F .text  00000008 dif_spi_device_init_handle
1000206c g       .bss   00000000 _bss_start
20001cea g     F .text  00000016 irq_timer_ctrl
00000400 g       *ABS*  00000000 _manifest_code_start
20000a68 g     F .text  0000000e dif_gpio_init
00000000 g       *ABS*  00000000 __DYNAMIC
2000275e g     F .text  00000006 ibex_mepc_read
2007b000 g       *ABS*  00000000 _non_volatile_counter_0_end
200022b4  w    F .text  00000022 ottf_load_store_fault_handler
20000400 g       .rom_ext_immutable     00000000 _text_start
200033b0 g     F .text  00000048 dif_spi_device_configure
20003f20 g     F .text  00000006 vListInitialiseItem
10002318 g     O .freertos.heap 00008000 ucHeap
20002440 g     F .text  00000010 dif_rstmgr_reset_info_clear
20005e6c g     O .rodata        00000004 kDifRvPlicMaxPriority
00004390 g       *ABS*  00000000 _manifest_code_end
20000400 g     F .vectors       00000080 _ottf_interrupt_vector
20000548 g       .init_array    00000000 _init_array_end
20002800 g     F .text  00000032 base_log_internal_dv
20006634 g       *ABS*  00000000 _data_init_end
20003774 g     F .text  000000ea dif_uart_configure
2000274c g     F .text  00000006 abort
10000044 g     O .static_critical       00000054 epmp_state
20003f48 g     F .text  00000082 pvPortMalloc
20003fd4 g     F .text  00000004 mmio_region_memcpy_from_mmio32
20003f0c g     F .text  00000014 vListInitialise
2000369c g     F .text  0000000e dif_spi_device_set_flash_status_registers
10002318 g       .bss   00000000 _bss_end
20000abc g     F .text  0000000e dif_gpio_output_set_enabled_all
20003fcc  w    F .text  00000004 manufacturer_pre_test_hook
2000408c g     F .text  00000004 mmio_region_memcpy_to_mmio32
20000aca g     F .text  00000038 ottf_machine_ecall_handler
20000f28 g     F .text  00000166 ottf_console_init
200065b0 g       *ABS*  00000000 _data_init_start
20001cc2 g     F .text  00000012 irq_global_ctrl
1001ff80 g       *ABS*  00000000 _exception_frame_start
20000e7e g     F .text  0000004a vApplicationMallocFailedHook
200020b0 g     F .text  00000036 dif_pinmux_output_select
20000480 g     F .crt   00000068 _ottf_start
10001fe8 g     O .data  00000084 status_codes
00001fe8 g       *ABS*  00000000 _static_critical_size
20002450 g     F .text  0000000e dif_rv_plic_init
20001d00 g     F .text  00000012 irq_software_ctrl
2000390c g     F .text  0000001e dif_uart_rx_bytes_available
200036aa g     F .text  0000001a dif_spi_device_get_flash_status_registers
200024d0 g     F .text  00000028 dif_rv_plic_target_set_threshold
2000197e g     F .text  000000a6 ottf_console_flow_control
2000050c g     F .crt   0000003a crt_section_copy
200062b8 g     O .rodata        00000008 kUartBaudrate
2000356c g     F .text  0000002c dif_spi_device_get_flash_payload_fifo_occupancy
20004170 g     F .text  000000ae memchr
00000800 g       *ABS*  00000000 _non_volatile_counter_size
00080000 g       *ABS*  00000000 _ottf_size
2000321c g     F .text  000000ca status_create
200022f0  w    F .text  0000001a ottf_timer_isr
20003ca4 g     F .text  00000010 vTaskSuspendAll
10001fe8 g       .data  00000000 _data_start
2000342e g     F .text  00000100 dif_spi_device_set_flash_command_slot
2007a800 g       *ABS*  00000000 _non_volatile_counter_0_start
20003f26 g     F .text  00000022 uxListRemove
20080000 g       .freertos.heap 00000000 _non_volatile_scratch_end
2007a000 g       *ABS*  00000000 _non_volatile_counter_2_end
200023d4  w    F .text  0000001c ottf_load_integrity_error_handler
20079800 g       *ABS*  00000000 _non_volatile_counter_2_start
20003b46 g     F .text  0000008a vTaskSwitchContext
20003718 g     F .text  0000002a dif_uart_irq_set_enabled
200024a6 g     F .text  0000002a dif_rv_plic_irq_set_priority
200022b4  w    F .text  00000022 ottf_breakpoint_handler
00003f80 g       *ABS*  00000000 _stack_size
20000608 g     F .text  00000052 handler_exception
20002aa0 g     F .text  000004fe base_vfprintf
1000206c g       .data  00000000 _data_end
20000ec8 g     F .text  0000003e vApplicationStackOverflowHook
00000080 g       *ABS*  00000000 _exception_frame_size
20002a3e g     F .text  00000016 base_uart_stdout
20003362 g     F .text  0000002a dif_spi_device_irq_is_pending
20001d12 g     F .text  00000390 spi_device_testutils_wait_for_upload
20000758 g     F .text  00000054 handler_irq_internal
20002a86 g     F .text  0000001a base_vprintf
200036fc g     F .text  0000001c dif_uart_irq_acknowledge
200022d6  w    F .text  0000001a ottf_software_isr
10000098 g     O .static_critical       00001f50 sec_mmio_ctx
20004112 g     F .text  0000005e memset
20002752 g     F .text  00000006 ibex_mcause_read
200006b0 g     F .text  00000054 handler_irq_timer
2000174a g     F .text  00000234 ottf_console_flow_control_enable
20004908  w    O .rodata        00000004 kStatusReportListSize
200033f8 g     F .text  0000001c dif_spi_device_get_4b_address_mode
1001ff80 g       *ABS*  00000000 _stack_end
100020f0 g     O .bss   00000018 rand_testutils_rng_ctx
10002318 g       .freertos.heap 00000000 _freertos_heap_start
1001c000 g       *ABS*  00000000 _stack_start
200004e8 g     F .crt   00000024 crt_section_clear
20003cb4 g     F .text  0000013a xTaskResumeAll
2000065c g     F .text  00000054 handler_irq_software
200062a0 g     O .rodata        00000004 uxTopUsedPriority
20003bd0 g     F .text  0000005e vTaskStartScheduler
10000000 g     O .static_critical       00000004 static_critical_version
20000548 g     F .text  00000052 xPortStartFirstTask
00010000 g       *ABS*  00000000 _dv_log_offset
20002246  w    F .text  0000006e ottf_exception_handler
0000ff80 g       *ABS*  00000000 _chip_info_start
20000814 g     F .text  00000254 test_main
200029d2 g     F .text  0000000a get_uart_sink
2000245e g     F .text  00000048 dif_rv_plic_irq_set_enabled
20001a24 g     F .text  000000dc ottf_console_flow_control_isr
200035e4 g     F .text  00000048 dif_spi_device_read_flash_payload_buffer
2000362c g     F .text  00000070 dif_spi_device_write_flash_buffer
2000437a g     F .text  00000014 to_cpu_cycles
10002108  w    O .bss   00000028 status_report_list
20003dee g     F .text  0000011e xTaskIncrementTick
200062c0 g     O .rodata        00000004 kDeviceTestStatusAddress
20004600 g     O .rodata        00000018 kOttfTestConfig
20003354 g     F .text  0000000e dif_spi_device_init
00000800 g       *ABS*  00000000 _epmp_reset_rx_size
200042dc g     F .text  0000009e udiv64_slow
20002a54 g     F .text  00000032 base_printf
200024f8 g     F .text  00000026 dif_rv_plic_irq_claim
20003880 g     F .text  0000003c dif_uart_bytes_send
200062c4 g     O .rodata        00000004 kDeviceLogBypassUartAddress
2000392a g     F .text  000001ec xTaskCreate
10020000 g       .static_critical       00000000 _exception_frame_end
200062ac g     O .rodata        00000004 kDeviceType
000001d4 g       *ABS*  00000000 _manifest_address_translation
20002758 g     F .text  00000006 ibex_mtval_read
2007a800 g       *ABS*  00000000 _non_volatile_counter_1_end
00000480 g       *ABS*  00000000 _manifest_entry_point
20000b2c g     F .text  000001e6 _ottf_main
200026e8 g     F .text  00000064 busy_spin_micros
00000080 g       *ABS*  00000000 _chip_info_size
200038de g     F .text  0000002e dif_uart_byte_receive_polled
2000108e g     F .text  000001d4 ottf_console_configure_uart
20003b16 g     F .text  00000030 vTaskExitCritical
2000059c g     F .text  00000024 pxPortInitialiseStack
200032e6 g     F .text  0000006e status_extract
20000a76 g     F .text  0000000e dif_gpio_write_all
00000100 g       *ABS*  00000000 _non_volatile_counter_flash_words
200060f0 g     O .rodata        00000004 MODULE_ID
20000e7c g     F .text  00000002 coverage_send_buffer
200035be g     F .text  00000026 dif_spi_device_pop_flash_address_fifo
20002836 g     F .text  0000000a get_spi_device_sink
200036c4 g     F .text  0000000e dif_uart_init
2007a000 g       *ABS*  00000000 _non_volatile_counter_1_start
20000000 g       .static_critical       00000000 _ottf_start_address
20000548 g       .init_array    00000000 _init_array_start
20000b02 g     F .text  0000002a status_report
2000261a g     F .text  000000ce test_status_set
2000338c g     F .text  0000001c dif_spi_device_irq_acknowledge
20002764 g     F .text  0000009c base_log_internal_core
200007ac g     F .text  00000068 ottf_isr_exit
20000704 g     F .text  00000054 handler_irq_external
20003598 g     F .text  00000026 dif_spi_device_pop_flash_command_fifo



Disassembly of section .vectors:

20000400 <_ottf_interrupt_vector>:
_ottf_interrupt_vector():
20000400:       2080006f                j       20000608 <handler_exception>
20000404:       c0001073                unimp
20000408:       c0001073                unimp
2000040c:       2500006f                j       2000065c <handler_irq_software>
20000410:       c0001073                unimp
20000414:       c0001073                unimp
20000418:       c0001073                unimp
2000041c:       2940006f                j       200006b0 <handler_irq_timer>
20000420:       c0001073                unimp
20000424:       c0001073                unimp
20000428:       c0001073                unimp
2000042c:       2d80006f                j       20000704 <handler_irq_external>
20000430:       c0001073                unimp
20000434:       c0001073                unimp
20000438:       c0001073                unimp
2000043c:       c0001073                unimp
20000440:       c0001073                unimp
20000444:       c0001073                unimp
20000448:       c0001073                unimp
2000044c:       c0001073                unimp
20000450:       c0001073                unimp
20000454:       c0001073                unimp
20000458:       c0001073                unimp
2000045c:       c0001073                unimp
20000460:       c0001073                unimp
20000464:       c0001073                unimp
20000468:       c0001073                unimp
2000046c:       c0001073                unimp
20000470:       c0001073                unimp
20000474:       c0001073                unimp
20000478:       c0001073                unimp
2000047c:       2dc0006f                j       20000758 <handler_irq_internal>

Disassembly of section .crt:

20000480 <_ottf_start>:
_ottf_start():
20000480:       f0002197                auipc   gp,0xf0002
20000484:       36818193                addi    gp,gp,872 # 100027e8 <__global_pointer$>
20000488:       f0020117                auipc   sp,0xf0020
2000048c:       af810113                addi    sp,sp,-1288 # 1001ff80 <_exception_frame_start>
20000490:       00000297                auipc   t0,0x0
20000494:       f7128293                addi    t0,t0,-143 # 20000401 <_ottf_interrupt_vector+0x1>
20000498:       30529073                csrw    mtvec,t0
2000049c:       f0002517                auipc   a0,0xf0002
200004a0:       b4c50513                addi    a0,a0,-1204 # 10001fe8 <status_codes>
200004a4:       88418593                addi    a1,gp,-1916 # 1000206c <gpio>
200004a8:       00006617                auipc   a2,0x6
200004ac:       10860613                addi    a2,a2,264 # 200065b0 <_data_init_start>
200004b0:       28b1                    jal     2000050c <crt_section_copy>
200004b2:       f0002517                auipc   a0,0xf0002
200004b6:       bba50513                addi    a0,a0,-1094 # 1000206c <gpio>
200004ba:       f0002597                auipc   a1,0xf0002
200004be:       e5e58593                addi    a1,a1,-418 # 10002318 <ucHeap>
200004c2:       201d                    jal     200004e8 <crt_section_clear>
200004c4:       00000417                auipc   s0,0x0
200004c8:       08440413                addi    s0,s0,132 # 20000548 <xPortStartFirstTask>
200004cc:       00000497                auipc   s1,0x0
200004d0:       07c48493                addi    s1,s1,124 # 20000548 <xPortStartFirstTask>
200004d4:       00947863                bgeu    s0,s1,200004e4 <init_array_loop_end>

200004d8 <init_array_loop>:
200004d8:       /-> 00042283            lw      t0,0(s0)
200004dc:       |   9282                        jalr    t0
200004de:       |   0411                        addi    s0,s0,4
200004e0:       \-- fe946ce3            bltu    s0,s1,200004d8 <init_array_loop>

200004e4 <init_array_loop_end>:
200004e4:       6480006f                j       20000b2c <_ottf_main>

200004e8 <crt_section_clear>:
crt_section_clear():
/proc/self/cwd/sw/device/lib/crt/crt.S:41
  .global crt_section_clear
  .type crt_section_clear, @function
crt_section_clear:

  // Check that start is before end.
  bgeu a0, a1, .L_clear_nothing
200004e8:       /-------- 00b57e63              bgeu    a0,a1,20000504 <crt_section_clear+0x1c>
/proc/self/cwd/sw/device/lib/crt/crt.S:44

  // Check that start and end are word aligned.
  or   t0, a0, a1
200004ec:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:45
  andi t0, t0, 0x3
200004f0:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:46
  bnez t0, .L_clear_error
200004f4:       |  /----- 00029b63              bnez    t0,2000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:51

.L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
200004f8:       |  |  /-> 00052023              sw      zero,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:52
  addi a0, a0, 4
200004fc:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:53
  bltu a0, a1, .L_clear_loop
200004fe:       |  |  \-- feb56de3              bltu    a0,a1,200004f8 <crt_section_clear+0x10>
/proc/self/cwd/sw/device/lib/crt/crt.S:54
  ret
20000502:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:59

.L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_clear_error
20000504:       \--+----X 00b51363              bne     a0,a1,2000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:60
  ret
20000508:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:63

.L_clear_error:
  unimp
2000050a:          \----> 0000                  unimp

2000050c <crt_section_copy>:
crt_section_copy():
/proc/self/cwd/sw/device/lib/crt/crt.S:95
  .global crt_section_copy
  .type crt_section_copy, @function
crt_section_copy:

  // Check that start is before end.
  bgeu a0, a1, .L_copy_nothing
2000050c:       /-------- 02b57963              bgeu    a0,a1,2000053e <crt_section_copy+0x32>
/proc/self/cwd/sw/device/lib/crt/crt.S:98

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
20000510:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:99
  or   t0, t0, a2
20000514:       |         00c2e2b3              or      t0,t0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:100
  andi t0, t0, 0x3
20000518:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:101
  bnez t0, .L_copy_error
2000051c:       |  /----- 02029463              bnez    t0,20000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:118
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
20000520:       |  |      40c502b3              sub     t0,a0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:119
  sub  t1, a1, a0           // end - start
20000524:       |  |      40a58333              sub     t1,a1,a0
/proc/self/cwd/sw/device/lib/crt/crt.S:120
  bltu t0, t1, .L_copy_error
20000528:       |  +----- 0062ee63              bltu    t0,t1,20000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:125

.L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
2000052c:       |  |  /-> 00062283              lw      t0,0(a2)
/proc/self/cwd/sw/device/lib/crt/crt.S:126
  addi a2, a2, 4
20000530:       |  |  |   0611                  addi    a2,a2,4
/proc/self/cwd/sw/device/lib/crt/crt.S:127
  sw   t0, 0(a0)
20000532:       |  |  |   00552023              sw      t0,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:128
  addi a0, a0, 4
20000536:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:129
  bltu a0, a1, .L_copy_loop
20000538:       |  |  \-- feb56ae3              bltu    a0,a1,2000052c <crt_section_copy+0x20>
/proc/self/cwd/sw/device/lib/crt/crt.S:130
  ret
2000053c:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:135

.L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_copy_error
2000053e:       \--+----X 00b51363              bne     a0,a1,20000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:136
  ret
20000542:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:139

.L_copy_error:
  unimp
20000544:          \----> 0000                  unimp

Disassembly of section .text:

20000548 <xPortStartFirstTask>:
xPortStartFirstTask():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:18
  .global xPortStartFirstTask
  .type xPortStartFirstTask, @function
xPortStartFirstTask:
  // Load the stack pointer for the current TCB (just going to clobber sp here
  // since we are setting it here anyway).
  lw  sp, pxCurrentTCB
20000548:       f0002117                auipc   sp,0xf0002
2000054c:       b6412103                lw      sp,-1180(sp) # 100020ac <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:19
  lw  sp, 0(sp)
20000550:       4102                    lw      sp,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:23

  // NOTE: for starting the FreeRTOS scheduler, the exception return address is
  // used as the function return address. See pxPortInitialiseStack below.
  lw  ra, 0(sp)
20000552:       4082                    lw      ra,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:26

  // Restore registers initialized on task start.
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
20000554:       4332                    lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:27
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
20000556:       43c2                    lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:28
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
20000558:       4452                    lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:29
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
2000055a:       44e2                    lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:30
  lw   a0,  7 * OTTF_WORD_SIZE(sp) // task parameters (pvParameters)
2000055c:       4572                    lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:31
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
2000055e:       5582                    lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:32
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
20000560:       5612                    lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:33
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
20000562:       56a2                    lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:34
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
20000564:       5732                    lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:35
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
20000566:       57c2                    lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:36
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
20000568:       5852                    lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:37
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
2000056a:       58e2                    lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:38
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
2000056c:       5972                    lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:39
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
2000056e:       4986                    lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:40
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
20000570:       4a16                    lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:41
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
20000572:       4aa6                    lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:42
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
20000574:       4b36                    lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:43
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
20000576:       4bc6                    lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:44
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
20000578:       4c56                    lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:45
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
2000057a:       4ce6                    lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:46
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
2000057c:       4d76                    lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:47
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
2000057e:       5d86                    lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:48
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
20000580:       5e16                    lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:49
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
20000582:       5ea6                    lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:50
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
20000584:       5f36                    lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:51
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
20000586:       5fc6                    lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:55

  // Initialize t0 to the value of MSTATUS with global interrupts enabled, which
  // is required because this returns with ret, not eret.
  lw t0, 29 * OTTF_WORD_SIZE(sp) // Load the MSTATUS state from the stack.
20000588:       52d6                    lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:56
  ori t0, t0, 1<<3               // Set MIE field.
2000058a:       0082e293                ori     t0,t0,8
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:57
  csrw mstatus, t0               // Ibex interrupts enabled from here!
2000058e:       30029073                csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:60

  // Restore t0 register from the stack (after using it to manipulate MSTATUS).
  lw t0, 2 * OTTF_WORD_SIZE(sp)
20000592:       42a2                    lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:63

  // Update the stack pointer (shrinking the stack).
  addi sp, sp, OTTF_CONTEXT_SIZE
20000594:       07810113                addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:65

  ret
20000598:       8082                    ret
2000059a:       0001                    nop

2000059c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:133
  .balign 4
  .global pxPortInitialiseStack
  .type pxPortInitialiseStack, @function
pxPortInitialiseStack:
  // Setup the MSTATUS register.
  csrr t0, mstatus
2000059c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:137
  // Ensure interrupts are disabled when the stack is restored within an ISR.
  // Required when a task is created after the scheduler has been started,
  // otherwise interrupts would be disabled anyway.
  andi t0, t0, ~0x8
200005a0:       ff72f293                andi    t0,t0,-9
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:139
  // Generate the value 0x1880, to set the MPIE and MPP bits in MSTATUS.
  li t1, 0x188 << 4
200005a4:       6309                    lui     t1,0x2
200005a6:       88030313                addi    t1,t1,-1920 # 1880 <_epmp_reset_rx_size+0x1080>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:140
  or t0, t0, t1
200005aa:       0062e2b3                or      t0,t0,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:143

  // Setup the stack frame detailed above (a0 holds the task stack pointer).
  addi a0, a0, -OTTF_CONTEXT_SIZE
200005ae:       f8850513                addi    a0,a0,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:145
  // Push MSTATUS onto the stack.
  sw t0, 29 * OTTF_WORD_SIZE(a0)
200005b2:       06552a23                sw      t0,116(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:148

  // Push task parameters (pvParameters that is in x12/a2, on the stack.
  sw a2, 7 * OTTF_WORD_SIZE(a0)
200005b6:       cd50                    sw      a2,28(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:150
  // Push 0 for the portTASK_RETURN_ADDRESS for now.
  sw zero, 1 * OTTF_WORD_SIZE(a0)
200005b8:       00052223                sw      zero,4(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:155
  // Push the pointer to the task's entry point (pxCode) onto the stack. This
  // will be loaded into either ra (in xPortStartFirstTask) or mepc (in
  // freertosIrqExit), so that when ret/mret is called control flow will be
  // transferred accordingly.
  sw a1, 0(a0)
200005bc:       c10c                    sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:157

  ret
200005be:       8082                    ret

200005c0 <compute_mepc_on_synchronous_irq>:
compute_mepc_on_synchronous_irq():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:32
   * address below will cause another exception.
   */
  .balign 4
  .type compute_mepc_on_synchronous_irq, @function
compute_mepc_on_synchronous_irq:
  csrr t0, mepc
200005c0:           341022f3            csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:33
  csrr t1, mcause
200005c4:           34202373            csrr    t1,mcause
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:34
  li t2, 0x01
200005c8:           4385                        li      t2,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:35
  bne t1, t2, .L_load_mepc
200005ca:       /-- 00731363            bne     t1,t2,200005d0 <compute_mepc_on_synchronous_irq+0x10>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:36
  ret
200005ce:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:38
.L_load_mepc:
  lh t2, 0(t0)
200005d0:       \-> 00029383            lh      t2,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:39
  li t1, 0x3
200005d4:           430d                        li      t1,3
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:40
  and t3, t2, t1
200005d6:           0063fe33            and     t3,t2,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:41
  beq t3, t1, .L_32bit_trap_instr
200005da:       /-- 006e0463            beq     t3,t1,200005e2 <compute_mepc_on_synchronous_irq+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:42
  addi t0, t0, OTTF_HALF_WORD_SIZE
200005de:       |   0289                        addi    t0,t0,2
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:43
  ret
200005e0:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:45
.L_32bit_trap_instr:
  addi t0, t0, OTTF_WORD_SIZE
200005e2:       \-> 0291                        addi    t0,t0,4
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:46
  ret
200005e4:           8082                        ret
200005e6:           0001                        nop

200005e8 <save_current_sp_to_tcb>:
save_current_sp_to_tcb():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:61
   * exception, if we attempt to perform a store to said address.
   */
  .balign 4
  .type save_current_sp_to_tcb, @function
save_current_sp_to_tcb:
  la t0, kOttfTestConfig
200005e8:           00004297            auipc   t0,0x4
200005ec:           01828293            addi    t0,t0,24 # 20004600 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:62
  lb t1, 0(t0)
200005f0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:63
  beqz t1, .L_skip_sp_save
200005f4:       /-- 00030863            beqz    t1,20000604 <save_current_sp_to_tcb+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:64
  lw t2, pxCurrentTCB
200005f8:       |   f0002397            auipc   t2,0xf0002
200005fc:       |   ab43a383            lw      t2,-1356(t2) # 100020ac <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:65
  sw sp, 0(t2)
20000600:       |   0023a023            sw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:67
.L_skip_sp_save:
  ret
20000604:       \-> 8082                        ret
20000606:           0001                        nop

20000608 <handler_exception>:
handler_exception():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:80
  .balign 4
  .global handler_exception
  .type handler_exception, @function
handler_exception:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
20000608:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:81
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
2000060c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:82
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
2000060e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:83
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
20000610:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:84
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
20000612:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:85
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
20000614:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:86
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
20000616:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:87
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
20000618:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:88
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
2000061a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:89
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
2000061c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:90
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
2000061e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:91
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
20000620:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:92
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
20000622:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:93
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
20000624:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:94
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
20000626:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:95
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
20000628:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:96
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
2000062a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:97
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
2000062c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:98
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
2000062e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:99
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
20000630:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:100
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
20000632:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:101
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
20000634:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:102
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
20000636:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:103
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
20000638:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:104
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
2000063a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:105
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
2000063c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:106
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
2000063e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:107
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
20000640:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:108
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
20000642:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:111

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
20000644:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:112
  sw t0, 29 * OTTF_WORD_SIZE(sp)
20000648:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:116

  // Save MEPC to the stack after updating it to the next instruction (since
  // this is a synchronous IRQ).
  jal compute_mepc_on_synchronous_irq
2000064a:       3f9d                    jal     200005c0 <compute_mepc_on_synchronous_irq>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:117
  sw t0, 0(sp)
2000064c:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:121

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
2000064e:       3f69                    jal     200005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:124

  // Jump to the exception handler.
  mv a0, sp
20000650:       850a                    mv      a0,sp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:125
  jal ottf_exception_handler
20000652:       3f5010ef                jal     ra,20002246 <ottf_exception_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:128

  // Return from ISR.
  j ottf_isr_exit
20000656:       1560006f                j       200007ac <ottf_isr_exit>
2000065a:       0001                    nop

2000065c <handler_irq_software>:
handler_irq_software():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:141
  .balign 4
  .global handler_irq_software
  .type handler_irq_software, @function
handler_irq_software:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
2000065c:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:142
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
20000660:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:143
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
20000662:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:144
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
20000664:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:145
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
20000666:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:146
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
20000668:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:147
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
2000066a:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:148
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
2000066c:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:149
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
2000066e:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:150
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
20000670:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:151
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
20000672:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:152
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
20000674:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:153
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
20000676:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:154
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
20000678:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:155
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
2000067a:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:156
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
2000067c:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:157
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
2000067e:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:158
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
20000680:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:159
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
20000682:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:160
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
20000684:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:161
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
20000686:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:162
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
20000688:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:163
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
2000068a:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:164
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
2000068c:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:165
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
2000068e:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:166
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
20000690:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:167
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
20000692:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:168
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
20000694:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:169
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
20000696:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:172

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
20000698:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:173
  sw t0, 29 * OTTF_WORD_SIZE(sp)
2000069c:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:177

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
2000069e:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:178
  sw t0, 0(sp)
200006a2:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:182

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
200006a4:       3791                    jal     200005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:185

  // Jump to the software ISR.
  mv a0, sp
200006a6:       850a                    mv      a0,sp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:186
  jal ottf_software_isr
200006a8:       42f010ef                jal     ra,200022d6 <ottf_software_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:189

  // Return from ISR.
  j ottf_isr_exit
200006ac:       1000006f                j       200007ac <ottf_isr_exit>

200006b0 <handler_irq_timer>:
handler_irq_timer():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:202
  .balign 4
  .global handler_irq_timer
  .type handler_irq_timer, @function
handler_irq_timer:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
200006b0:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:203
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
200006b4:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:204
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
200006b6:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:205
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
200006b8:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:206
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
200006ba:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:207
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
200006bc:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:208
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
200006be:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:209
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
200006c0:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:210
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
200006c2:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:211
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
200006c4:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:212
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
200006c6:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:213
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
200006c8:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:214
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
200006ca:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:215
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
200006cc:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:216
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
200006ce:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:217
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
200006d0:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:218
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
200006d2:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:219
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
200006d4:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:220
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
200006d6:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:221
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
200006d8:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:222
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
200006da:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:223
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
200006dc:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:224
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
200006de:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:225
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
200006e0:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:226
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
200006e2:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:227
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
200006e4:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:228
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
200006e6:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:229
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
200006e8:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:230
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
200006ea:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:233

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
200006ec:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:234
  sw t0, 29 * OTTF_WORD_SIZE(sp)
200006f0:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:238

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
200006f2:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:239
  sw t0, 0(sp)
200006f6:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:243

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
200006f8:       3dc5                    jal     200005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:246

  // Jump to timer ISR.
  mv a0, sp
200006fa:       850a                    mv      a0,sp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:247
  jal ottf_timer_isr
200006fc:       3f5010ef                jal     ra,200022f0 <ottf_timer_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:250

  // Return from ISR.
  j ottf_isr_exit
20000700:       0ac0006f                j       200007ac <ottf_isr_exit>

20000704 <handler_irq_external>:
handler_irq_external():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:263
  .balign 4
  .global handler_irq_external
  .type handler_irq_external, @function
handler_irq_external:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
20000704:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:264
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
20000708:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:265
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
2000070a:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:266
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
2000070c:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:267
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
2000070e:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:268
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
20000710:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:269
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
20000712:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:270
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
20000714:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:271
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
20000716:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:272
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
20000718:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:273
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
2000071a:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:274
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
2000071c:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:275
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
2000071e:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:276
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
20000720:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:277
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
20000722:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:278
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
20000724:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:279
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
20000726:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:280
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
20000728:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:281
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
2000072a:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:282
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
2000072c:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:283
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
2000072e:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:284
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
20000730:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:285
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
20000732:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:286
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
20000734:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:287
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
20000736:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:288
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
20000738:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:289
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
2000073a:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:290
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
2000073c:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:291
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
2000073e:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:294

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
20000740:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:295
  sw t0, 29 * OTTF_WORD_SIZE(sp)
20000744:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:299

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
20000746:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:300
  sw t0, 0(sp)
2000074a:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:304

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
2000074c:       3d71                    jal     200005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:307

  // Jump to external ISR.
  mv a0, sp
2000074e:       850a                    mv      a0,sp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:308
  jal ottf_external_isr
20000750:       3bb010ef                jal     ra,2000230a <ottf_external_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:311

  // Return from ISR.
  j ottf_isr_exit
20000754:       0580006f                j       200007ac <ottf_isr_exit>

20000758 <handler_irq_internal>:
handler_irq_internal():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:324
  .balign 4
  .global handler_irq_internal
  .type handler_irq_internal, @function
handler_irq_internal:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
20000758:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:325
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
2000075c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:326
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
2000075e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:327
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
20000760:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:328
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
20000762:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:329
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
20000764:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:330
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
20000766:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:331
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
20000768:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:332
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
2000076a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:333
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
2000076c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:334
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
2000076e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:335
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
20000770:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:336
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
20000772:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:337
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
20000774:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:338
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
20000776:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:339
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
20000778:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:340
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
2000077a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:341
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
2000077c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:342
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
2000077e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:343
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
20000780:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:344
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
20000782:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:345
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
20000784:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:346
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
20000786:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:347
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
20000788:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:348
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
2000078a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:349
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
2000078c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:350
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
2000078e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:351
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
20000790:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:352
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
20000792:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:355

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
20000794:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:356
  sw t0, 29 * OTTF_WORD_SIZE(sp)
20000798:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:360

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
2000079a:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:361
  sw t0, 0(sp)
2000079e:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:365

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
200007a0:       35a1                    jal     200005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:368

  // Jump to the internal ISR.
  mv a0, sp
200007a2:       850a                    mv      a0,sp
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:369
  jal ottf_internal_isr
200007a4:       44d010ef                jal     ra,200023f0 <ottf_internal_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:372

  // Return from ISR.
  j ottf_isr_exit
200007a8:       0040006f                j       200007ac <ottf_isr_exit>

200007ac <ottf_isr_exit>:
ottf_isr_exit():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:389
  // Load the stack pointer for the current task control block (TCB), only if
  // the `enable_concurrency` flag is set in the test configuration struct,
  // meaning a test is run as a FreeRTOS task, where each task maintains its own
  // stack. Otherwise, the test is run on bare-metal, and there is no TCB, and
  // only a single stack/stack pointer.
  la t0, kOttfTestConfig
200007ac:           00004297            auipc   t0,0x4
200007b0:           e5428293            addi    t0,t0,-428 # 20004600 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:390
  lb t1, 0(t0)
200007b4:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:391
  beqz t1, .L_skip_sp_restore
200007b8:       /-- 00030863            beqz    t1,200007c8 <ottf_isr_exit+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:392
  lw  t2, pxCurrentTCB
200007bc:       |   f0002397            auipc   t2,0xf0002
200007c0:       |   8f03a383            lw      t2,-1808(t2) # 100020ac <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:393
  lw  sp, 0(t2)
200007c4:       |   0003a103            lw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:397
.L_skip_sp_restore:

  // Load the correct MEPC for the next instruction in the current task.
  lw t0, 0(sp)
200007c8:       \-> 4282                        lw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:398
  csrw mepc, t0
200007ca:           34129073            csrw    mepc,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:401

  // Load MSTATUS for the MPIE bit.
  lw  t0, 29 * OTTF_WORD_SIZE(sp)
200007ce:           52d6                        lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:402
  csrw mstatus, t0
200007d0:           30029073            csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:405

  // Restore all registers from the stack.
  lw   ra,  1 * OTTF_WORD_SIZE(sp)
200007d4:           4092                        lw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:406
  lw   t0,  2 * OTTF_WORD_SIZE(sp)
200007d6:           42a2                        lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:407
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
200007d8:           4332                        lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:408
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
200007da:           43c2                        lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:409
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
200007dc:           4452                        lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:410
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
200007de:           44e2                        lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:411
  lw   a0,  7 * OTTF_WORD_SIZE(sp)
200007e0:           4572                        lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:412
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
200007e2:           5582                        lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:413
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
200007e4:           5612                        lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:414
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
200007e6:           56a2                        lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:415
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
200007e8:           5732                        lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:416
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
200007ea:           57c2                        lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:417
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
200007ec:           5852                        lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:418
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
200007ee:           58e2                        lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:419
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
200007f0:           5972                        lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:420
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
200007f2:           4986                        lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:421
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
200007f4:           4a16                        lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:422
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
200007f6:           4aa6                        lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:423
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
200007f8:           4b36                        lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:424
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
200007fa:           4bc6                        lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:425
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
200007fc:           4c56                        lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:426
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
200007fe:           4ce6                        lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:427
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
20000800:           4d76                        lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:428
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
20000802:           5d86                        lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:429
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
20000804:           5e16                        lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:430
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
20000806:           5ea6                        lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:431
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
20000808:           5f36                        lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:432
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
2000080a:           5fc6                        lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:433
  addi sp, sp, OTTF_CONTEXT_SIZE
2000080c:           07810113            addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:437

  // This exits the ISR completely, and does not return control flow to the ISR
  // that called this sub-routine.
  mret
20000810:           30200073            mret

20000814 <test_main>:
test_main():
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:23
static dif_gpio_t gpio;
static dif_pinmux_t pinmux;

static const dif_gpio_pin_t kGpioPinIoa5 = 0;

bool test_main(void) {
20000814:                 1141                  addi    sp,sp,-16
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:25
  // Initialize pinmux and GPIO peripherals.
  CHECK_DIF_OK(
20000816:                 c606                  sw      ra,12(sp)
20000818:                 c422                  sw      s0,8(sp)
2000081a:                 f0002517              auipc   a0,0xf0002
2000081e:                 85250593              addi    a1,a0,-1966 # 1000206c <gpio>
20000822:                 40040537              lui     a0,0x40040
20000826:                 2489                  jal     20000a68 <dif_gpio_init>
20000828:                 00006417              auipc   s0,0x6
2000082c:       /-------- cd05                  beqz    a0,20000864 <test_main+0x50>
2000082e:       |         862a                  mv      a2,a0
20000830:       |         a9c42503              lw      a0,-1380(s0) # 200062c4 <kDeviceLogBypassUartAddress>
20000834:       |  /----- cd01                  beqz    a0,2000084c <test_main+0x38>
20000836:       |  |      e000f517              auipc   a0,0xe000f
2000083a:       |  |      7ca50513              addi    a0,a0,1994 # 10000 <_chip_info_end>
2000083e:       |  |      00400593              li      a1,4
20000842:       |  |      952e                  add     a0,a0,a1
20000844:       |  |      4585                  li      a1,1
20000846:       |  |      7bb010ef              jal     ra,20002800 <base_log_internal_dv>
2000084a:       |  |  /-- a801                  j       2000085a <test_main+0x46>
2000084c:       |  \--|-> 00004517              auipc   a0,0x4
20000850:       |     |   dcc50513              addi    a0,a0,-564 # 20004618 <test_main.log_fields>
20000854:       |     |   85b2                  mv      a1,a2
20000856:       |     |   70f010ef              jal     ra,20002764 <base_log_internal_core>
2000085a:       |     \-> 6531                  lui     a0,0xc
2000085c:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20000860:       |         5bb010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:27
      dif_gpio_init(mmio_region_from_addr(TOP_EARLGREY_GPIO_BASE_ADDR), &gpio));
  CHECK_DIF_OK(dif_pinmux_init(
20000864:       \-------> f0002517              auipc   a0,0xf0002
20000868:                 80c50593              addi    a1,a0,-2036 # 10002070 <pinmux>
2000086c:                 40460537              lui     a0,0x40460
20000870:                 033010ef              jal     ra,200020a2 <dif_pinmux_init>
20000874:       /-------- cd05                  beqz    a0,200008ac <test_main+0x98>
20000876:       |         862a                  mv      a2,a0
20000878:       |         a9c42503              lw      a0,-1380(s0)
2000087c:       |  /----- cd01                  beqz    a0,20000894 <test_main+0x80>
2000087e:       |  |      e000f517              auipc   a0,0xe000f
20000882:       |  |      78250513              addi    a0,a0,1922 # 10000 <_chip_info_end>
20000886:       |  |      01800593              li      a1,24
2000088a:       |  |      952e                  add     a0,a0,a1
2000088c:       |  |      4585                  li      a1,1
2000088e:       |  |      773010ef              jal     ra,20002800 <base_log_internal_dv>
20000892:       |  |  /-- a801                  j       200008a2 <test_main+0x8e>
20000894:       |  \--|-> 00004517              auipc   a0,0x4
20000898:       |     |   d9850513              addi    a0,a0,-616 # 2000462c <test_main.log_fields.4>
2000089c:       |     |   85b2                  mv      a1,a2
2000089e:       |     |   6c7010ef              jal     ra,20002764 <base_log_internal_core>
200008a2:       |     \-> 6531                  lui     a0,0xc
200008a4:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200008a8:       |         573010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:29
      mmio_region_from_addr(TOP_EARLGREY_PINMUX_AON_BASE_ADDR), &pinmux));
  CHECK_DIF_OK(dif_pinmux_output_select(&pinmux, kTopEarlgreyPinmuxMioOutIoa5,
200008ac:       \-------> f0001517              auipc   a0,0xf0001
200008b0:                 7c450513              addi    a0,a0,1988 # 10002070 <pinmux>
200008b4:                 4595                  li      a1,5
200008b6:                 460d                  li      a2,3
200008b8:                 7f8010ef              jal     ra,200020b0 <dif_pinmux_output_select>
200008bc:       /-------- cd05                  beqz    a0,200008f4 <test_main+0xe0>
200008be:       |         862a                  mv      a2,a0
200008c0:       |         a9c42503              lw      a0,-1380(s0)
200008c4:       |  /----- cd01                  beqz    a0,200008dc <test_main+0xc8>
200008c6:       |  |      e000f517              auipc   a0,0xe000f
200008ca:       |  |      73a50513              addi    a0,a0,1850 # 10000 <_chip_info_end>
200008ce:       |  |      02c00593              li      a1,44
200008d2:       |  |      952e                  add     a0,a0,a1
200008d4:       |  |      4585                  li      a1,1
200008d6:       |  |      72b010ef              jal     ra,20002800 <base_log_internal_dv>
200008da:       |  |  /-- a801                  j       200008ea <test_main+0xd6>
200008dc:       |  \--|-> 00004517              auipc   a0,0x4
200008e0:       |     |   d6450513              addi    a0,a0,-668 # 20004640 <test_main.log_fields.7>
200008e4:       |     |   85b2                  mv      a1,a2
200008e6:       |     |   67f010ef              jal     ra,20002764 <base_log_internal_core>
200008ea:       |     \-> 6531                  lui     a0,0xc
200008ec:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200008f0:       |         52b010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:31
                                        kTopEarlgreyPinmuxOutselGpioGpio0));
  CHECK_DIF_OK(
200008f4:       \-------> f0001517              auipc   a0,0xf0001
200008f8:                 77850513              addi    a0,a0,1912 # 1000206c <gpio>
200008fc:                 4585                  li      a1,1
200008fe:                 2a7d                  jal     20000abc <dif_gpio_output_set_enabled_all>
20000900:       /-------- cd05                  beqz    a0,20000938 <test_main+0x124>
20000902:       |         862a                  mv      a2,a0
20000904:       |         a9c42503              lw      a0,-1380(s0)
20000908:       |  /----- cd01                  beqz    a0,20000920 <test_main+0x10c>
2000090a:       |  |      e000f517              auipc   a0,0xe000f
2000090e:       |  |      6f650513              addi    a0,a0,1782 # 10000 <_chip_info_end>
20000912:       |  |      04000593              li      a1,64
20000916:       |  |      952e                  add     a0,a0,a1
20000918:       |  |      4585                  li      a1,1
2000091a:       |  |      6e7010ef              jal     ra,20002800 <base_log_internal_dv>
2000091e:       |  |  /-- a801                  j       2000092e <test_main+0x11a>
20000920:       |  \--|-> 00004517              auipc   a0,0x4
20000924:       |     |   d3450513              addi    a0,a0,-716 # 20004654 <test_main.log_fields.10>
20000928:       |     |   85b2                  mv      a1,a2
2000092a:       |     |   63b010ef              jal     ra,20002764 <base_log_internal_core>
2000092e:       |     \-> 6531                  lui     a0,0xc
20000930:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20000934:       |         4e7010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:33
      dif_gpio_output_set_enabled_all(&gpio, 0x1));  // Enable first GPIO.
  CHECK_DIF_OK(
20000938:       \-------> f0001517              auipc   a0,0xf0001
2000093c:                 73450513              addi    a0,a0,1844 # 1000206c <gpio>
20000940:                 4581                  li      a1,0
20000942:                 2a15                  jal     20000a76 <dif_gpio_write_all>
20000944:       /-------- cd05                  beqz    a0,2000097c <test_main+0x168>
20000946:       |         862a                  mv      a2,a0
20000948:       |         a9c42503              lw      a0,-1380(s0)
2000094c:       |  /----- cd01                  beqz    a0,20000964 <test_main+0x150>
2000094e:       |  |      e000f517              auipc   a0,0xe000f
20000952:       |  |      6b250513              addi    a0,a0,1714 # 10000 <_chip_info_end>
20000956:       |  |      05400593              li      a1,84
2000095a:       |  |      952e                  add     a0,a0,a1
2000095c:       |  |      4585                  li      a1,1
2000095e:       |  |      6a3010ef              jal     ra,20002800 <base_log_internal_dv>
20000962:       |  |  /-- a801                  j       20000972 <test_main+0x15e>
20000964:       |  \--|-> 00004517              auipc   a0,0x4
20000968:       |     |   d0450513              addi    a0,a0,-764 # 20004668 <test_main.log_fields.13>
2000096c:       |     |   85b2                  mv      a1,a2
2000096e:       |     |   5f7010ef              jal     ra,20002764 <base_log_internal_core>
20000972:       |     \-> 6531                  lui     a0,0xc
20000974:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20000978:       |         4a3010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:37
      dif_gpio_write_all(&gpio, /*write_val=*/0));  // Intialize all to 0.

  // Toggle IOA5.
  CHECK_DIF_OK(dif_gpio_write(&gpio, kGpioPinIoa5, true));
2000097c:       \-------> f0001517              auipc   a0,0xf0001
20000980:                 6f050513              addi    a0,a0,1776 # 1000206c <gpio>
20000984:                 4605                  li      a2,1
20000986:                 4581                  li      a1,0
20000988:                 28f5                  jal     20000a84 <dif_gpio_write>
2000098a:       /-------- cd05                  beqz    a0,200009c2 <test_main+0x1ae>
2000098c:       |         862a                  mv      a2,a0
2000098e:       |         a9c42503              lw      a0,-1380(s0)
20000992:       |  /----- cd01                  beqz    a0,200009aa <test_main+0x196>
20000994:       |  |      e000f517              auipc   a0,0xe000f
20000998:       |  |      66c50513              addi    a0,a0,1644 # 10000 <_chip_info_end>
2000099c:       |  |      06800593              li      a1,104
200009a0:       |  |      952e                  add     a0,a0,a1
200009a2:       |  |      4585                  li      a1,1
200009a4:       |  |      65d010ef              jal     ra,20002800 <base_log_internal_dv>
200009a8:       |  |  /-- a801                  j       200009b8 <test_main+0x1a4>
200009aa:       |  \--|-> 00004517              auipc   a0,0x4
200009ae:       |     |   cd250513              addi    a0,a0,-814 # 2000467c <test_main.log_fields.16>
200009b2:       |     |   85b2                  mv      a1,a2
200009b4:       |     |   5b1010ef              jal     ra,20002764 <base_log_internal_core>
200009b8:       |     \-> 6531                  lui     a0,0xc
200009ba:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200009be:       |         45d010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:38
  busy_spin_micros(100);
200009c2:       \-------> 06400513              li      a0,100
200009c6:                 523010ef              jal     ra,200026e8 <busy_spin_micros>
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:39
  CHECK_DIF_OK(dif_gpio_write(&gpio, kGpioPinIoa5, false));
200009ca:                 f0001517              auipc   a0,0xf0001
200009ce:                 6a250513              addi    a0,a0,1698 # 1000206c <gpio>
200009d2:                 4581                  li      a1,0
200009d4:                 4601                  li      a2,0
200009d6:                 207d                  jal     20000a84 <dif_gpio_write>
200009d8:       /-------- cd05                  beqz    a0,20000a10 <test_main+0x1fc>
200009da:       |         862a                  mv      a2,a0
200009dc:       |         a9c42503              lw      a0,-1380(s0)
200009e0:       |  /----- cd01                  beqz    a0,200009f8 <test_main+0x1e4>
200009e2:       |  |      e000f517              auipc   a0,0xe000f
200009e6:       |  |      61e50513              addi    a0,a0,1566 # 10000 <_chip_info_end>
200009ea:       |  |      07c00593              li      a1,124
200009ee:       |  |      952e                  add     a0,a0,a1
200009f0:       |  |      4585                  li      a1,1
200009f2:       |  |      60f010ef              jal     ra,20002800 <base_log_internal_dv>
200009f6:       |  |  /-- a801                  j       20000a06 <test_main+0x1f2>
200009f8:       |  \--|-> 00004517              auipc   a0,0x4
200009fc:       |     |   c9850513              addi    a0,a0,-872 # 20004690 <test_main.log_fields.19>
20000a00:       |     |   85b2                  mv      a1,a2
20000a02:       |     |   563010ef              jal     ra,20002764 <base_log_internal_core>
20000a06:       |     \-> 6531                  lui     a0,0xc
20000a08:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20000a0c:       |         40f010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:40
  busy_spin_micros(100);
20000a10:       \-------> 06400513              li      a0,100
20000a14:                 4d5010ef              jal     ra,200026e8 <busy_spin_micros>
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:41
  CHECK_DIF_OK(dif_gpio_write(&gpio, kGpioPinIoa5, true));
20000a18:                 f0001517              auipc   a0,0xf0001
20000a1c:                 65450513              addi    a0,a0,1620 # 1000206c <gpio>
20000a20:                 4605                  li      a2,1
20000a22:                 4581                  li      a1,0
20000a24:                 2085                  jal     20000a84 <dif_gpio_write>
20000a26:       /-------- cd05                  beqz    a0,20000a5e <test_main+0x24a>
20000a28:       |         862a                  mv      a2,a0
20000a2a:       |         a9c42503              lw      a0,-1380(s0)
20000a2e:       |  /----- cd01                  beqz    a0,20000a46 <test_main+0x232>
20000a30:       |  |      e000f517              auipc   a0,0xe000f
20000a34:       |  |      5d050513              addi    a0,a0,1488 # 10000 <_chip_info_end>
20000a38:       |  |      09000593              li      a1,144
20000a3c:       |  |      952e                  add     a0,a0,a1
20000a3e:       |  |      4585                  li      a1,1
20000a40:       |  |      5c1010ef              jal     ra,20002800 <base_log_internal_dv>
20000a44:       |  |  /-- a801                  j       20000a54 <test_main+0x240>
20000a46:       |  \--|-> 00004517              auipc   a0,0x4
20000a4a:       |     |   c5e50513              addi    a0,a0,-930 # 200046a4 <test_main.log_fields.21>
20000a4e:       |     |   85b2                  mv      a1,a2
20000a50:       |     |   515010ef              jal     ra,20002764 <base_log_internal_core>
20000a54:       |     \-> 6531                  lui     a0,0xc
20000a56:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20000a5a:       |         3c1010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/e2e/ate/ate_gpio_toggle_test.c:43

  return true;
20000a5e:       \-------> 4505                  li      a0,1
20000a60:                 40b2                  lw      ra,12(sp)
20000a62:                 4422                  lw      s0,8(sp)
20000a64:                 0141                  addi    sp,sp,16
20000a66:                 8082                  ret

20000a68 <dif_gpio_init>:
dif_gpio_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_gpio_autogen.c:18

#include "gpio_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_gpio_init(mmio_region_t base_addr, dif_gpio_t *gpio) {
  if (gpio == NULL) {
20000a68:       /----- c581                     beqz    a1,20000a70 <dif_gpio_init+0x8>
20000a6a:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_gpio_autogen.c:22
    return kDifBadArg;
  }

  gpio->base_addr = base_addr;
20000a6c:       |      c188                     sw      a0,0(a1)
20000a6e:       |  /-- a011                     j       20000a72 <dif_gpio_init+0xa>
20000a70:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_gpio_autogen.c:25

  return kDifOk;
}
20000a72:          \-> 8532                     mv      a0,a2
20000a74:              8082                     ret

20000a76 <dif_gpio_write_all>:
dif_gpio_write_all():
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:210
  return kDifOk;
}

dif_result_t dif_gpio_write_all(const dif_gpio_t *gpio,
                                dif_gpio_state_t state) {
  if (gpio == NULL) {
20000a76:       /-- c509                        beqz    a0,20000a80 <dif_gpio_write_all+0xa>
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:214
    return kDifBadArg;
  }

  mmio_region_write32(gpio->base_addr, GPIO_DIRECT_OUT_REG_OFFSET, state);
20000a78:       |   4110                        lw      a2,0(a0)
20000a7a:       |   4501                        li      a0,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
20000a7c:       |   ca4c                        sw      a1,20(a2)
dif_gpio_write_all():
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:217

  return kDifOk;
}
20000a7e:       |   8082                        ret
20000a80:       \-> 450d                        li      a0,3
20000a82:           8082                        ret

20000a84 <dif_gpio_write>:
gpio_masked_bit_write():
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:90
  if (gpio == NULL || index >= kDifGpioNumPins) {
20000a84:              00a036b3                 snez    a3,a0
20000a88:              0205b713                 sltiu   a4,a1,32
20000a8c:              8f75                     and     a4,a4,a3
20000a8e:              468d                     li      a3,3
20000a90:       /----- c705                     beqz    a4,20000ab8 <dif_gpio_write+0x34>
20000a92:       |      46c1                     li      a3,16
20000a94:       |      4861                     li      a6,24
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:96
  const ptrdiff_t offset = (index < 16) ? reg_lower_offset : reg_upper_offset;
20000a96:       |  /-- 00d5e363                 bltu    a1,a3,20000a9c <dif_gpio_write+0x18>
20000a9a:       |  |   4871                     li      a6,28
20000a9c:       |  \-> 4681                     li      a3,0
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:99
  const uint32_t mask = index_to_mask(index % 16);
20000a9e:       |      89bd                     andi    a1,a1,15
index_to_mask():
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:18
static uint32_t index_to_mask(uint32_t index) { return 1u << index; }
20000aa0:       |      28b017b3                 bset    a5,zero,a1
20000aa4:       |      6741                     lui     a4,0x10
gpio_masked_bit_write():
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:101
                      (mask << 16) | (val ? mask : 0u));
20000aa6:       |      00b715b3                 sll     a1,a4,a1
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:100
  mmio_region_write32(gpio->base_addr, offset,
20000aaa:       |      4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:101
                      (mask << 16) | (val ? mask : 0u));
20000aac:       |      40c00633                 neg     a2,a2
20000ab0:       |      8e7d                     and     a2,a2,a5
20000ab2:       |      8dd1                     or      a1,a1,a2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
20000ab4:       |      9542                     add     a0,a0,a6
20000ab6:       |      c10c                     sw      a1,0(a0)
dif_gpio_write():
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:221

dif_result_t dif_gpio_write(const dif_gpio_t *gpio, dif_gpio_pin_t pin,
                            bool state) {
  return gpio_masked_bit_write(gpio, GPIO_MASKED_OUT_LOWER_REG_OFFSET,
20000ab8:       \----> 8536                     mv      a0,a3
20000aba:              8082                     ret

20000abc <dif_gpio_output_set_enabled_all>:
dif_gpio_output_set_enabled_all():
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:233
                           GPIO_MASKED_OUT_UPPER_REG_OFFSET, mask, state);
}

dif_result_t dif_gpio_output_set_enabled_all(const dif_gpio_t *gpio,
                                             dif_gpio_state_t state) {
  if (gpio == NULL) {
20000abc:       /-- c509                        beqz    a0,20000ac6 <dif_gpio_output_set_enabled_all+0xa>
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:237
    return kDifBadArg;
  }

  mmio_region_write32(gpio->base_addr, GPIO_DIRECT_OE_REG_OFFSET, state);
20000abe:       |   4110                        lw      a2,0(a0)
20000ac0:       |   4501                        li      a0,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
20000ac2:       |   d20c                        sw      a1,32(a2)
dif_gpio_output_set_enabled_all():
/proc/self/cwd/sw/device/lib/dif/dif_gpio.c:240

  return kDifOk;
}
20000ac4:       |   8082                        ret
20000ac6:       \-> 450d                        li      a0,3
20000ac8:           8082                        ret

20000aca <ottf_machine_ecall_handler>:
ottf_machine_ecall_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:52
rand_testutils_rng_t rand_testutils_rng_ctx;

// The OTTF overrides the default machine ecall exception handler to implement
// FreeRTOS context switching, required for supporting cooperative scheduling.
void ottf_machine_ecall_handler(uint32_t *exc_info) {
  if (pxCurrentTCB != NULL) {
20000aca:           f0001517            auipc   a0,0xf0001
20000ace:           5e252503            lw      a0,1506(a0) # 100020ac <pxCurrentTCB>
20000ad2:       /-- c119                        beqz    a0,20000ad8 <ottf_machine_ecall_handler+0xe>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:56
    // If the pointer to the current TCB is not NULL, we are operating in
    // concurrency mode. In this case, our default behavior is to assume a
    // context switch has been requested.
    vTaskSwitchContext();
20000ad4:       |   0720306f            j       20003b46 <vTaskSwitchContext>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:59
    return;
  }
  LOG_ERROR(
20000ad8:       \-> 00005517            auipc   a0,0x5
20000adc:           7ec52503            lw      a0,2028(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20000ae0:       /-- c919                        beqz    a0,20000af6 <ottf_machine_ecall_handler+0x2c>
20000ae2:       |   e000f517            auipc   a0,0xe000f
20000ae6:       |   51e50513            addi    a0,a0,1310 # 10000 <_chip_info_end>
20000aea:       |   0a400593            li      a1,164
20000aee:       |   952e                        add     a0,a0,a1
20000af0:       |   4581                        li      a1,0
20000af2:       |   50f0106f            j       20002800 <base_log_internal_dv>
20000af6:       \-> 00004517            auipc   a0,0x4
20000afa:           dfe50513            addi    a0,a0,-514 # 200048f4 <ottf_machine_ecall_handler.log_fields>
20000afe:           4670106f            j       20002764 <base_log_internal_core>

20000b02 <status_report>:
status_report():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:100
static size_t status_report_list_cnt = 0;

// Override the status report function to store it in the array above.
void status_report(status_t status) {
  // In case of overflow, we overwrite previous values.
  status_report_list[status_report_list_cnt % kStatusReportListSize] = status;
20000b02:       f0001597                auipc   a1,0xf0001
20000b06:       5725a603                lw      a2,1394(a1) # 10002074 <status_report_list_cnt>
20000b0a:       00004697                auipc   a3,0x4
20000b0e:       dfe6a683                lw      a3,-514(a3) # 20004908 <kStatusReportListSize>
20000b12:       02d676b3                remu    a3,a2,a3
20000b16:       f0001717                auipc   a4,0xf0001
20000b1a:       5f270713                addi    a4,a4,1522 # 10002108 <status_report_list>
20000b1e:       20e6c6b3                sh2add  a3,a3,a4
20000b22:       c288                    sw      a0,0(a3)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:101
  status_report_list_cnt++;
20000b24:       0605                    addi    a2,a2,1
20000b26:       56c5a923                sw      a2,1394(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:102
}
20000b2a:       8082                    ret

20000b2c <_ottf_main>:
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:151
  result = result && test_main();
  result = result && manufacturer_post_test_hook();
  report_test_status(result);
}

void _ottf_main(void) {
20000b2c:                 7179                  addi    sp,sp,-48
20000b2e:                 d606                  sw      ra,44(sp)
20000b30:                 d422                  sw      s0,40(sp)
20000b32:                 d226                  sw      s1,36(sp)
20000b34:                 6511                  lui     a0,0x4
20000b36:                 35450513              addi    a0,a0,852 # 4354 <_stack_size+0x3d4>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:152
  test_status_set(kTestStatusInTest);
20000b3a:                 2e1010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:156

  // Clear reset reason register.
  dif_rstmgr_t rstmgr;
  CHECK_DIF_OK(dif_rstmgr_init(
20000b3e:                 40410537              lui     a0,0x40410
20000b42:                 100c                  addi    a1,sp,32
20000b44:                 0ef010ef              jal     ra,20002432 <dif_rstmgr_init>
20000b48:                 00005417              auipc   s0,0x5
20000b4c:       /-------- cd05                  beqz    a0,20000b84 <_ottf_main+0x58>
20000b4e:       |         862a                  mv      a2,a0
20000b50:       |         77c42503              lw      a0,1916(s0) # 200062c4 <kDeviceLogBypassUartAddress>
20000b54:       |  /----- cd01                  beqz    a0,20000b6c <_ottf_main+0x40>
20000b56:       |  |      e000f517              auipc   a0,0xe000f
20000b5a:       |  |      4aa50513              addi    a0,a0,1194 # 10000 <_chip_info_end>
20000b5e:       |  |      0b800593              li      a1,184
20000b62:       |  |      952e                  add     a0,a0,a1
20000b64:       |  |      4585                  li      a1,1
20000b66:       |  |      49b010ef              jal     ra,20002800 <base_log_internal_dv>
20000b6a:       |  |  /-- a801                  j       20000b7a <_ottf_main+0x4e>
20000b6c:       |  \--|-> 00004517              auipc   a0,0x4
20000b70:       |     |   da050513              addi    a0,a0,-608 # 2000490c <_ottf_main.log_fields>
20000b74:       |     |   85b2                  mv      a1,a2
20000b76:       |     |   3ef010ef              jal     ra,20002764 <base_log_internal_core>
20000b7a:       |     \-> 6531                  lui     a0,0xc
20000b7c:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20000b80:       |         29b010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:158
      mmio_region_from_addr(TOP_EARLGREY_RSTMGR_AON_BASE_ADDR), &rstmgr));
  if (kOttfTestConfig.clear_reset_reason) {
20000b84:       \-------> 00004517              auipc   a0,0x4
20000b88:                 a7c50493              addi    s1,a0,-1412 # 20004600 <kOttfTestConfig>
20000b8c:                 0114c503              lbu     a0,17(s1)
20000b90:       /-------- c121                  beqz    a0,20000bd0 <_ottf_main+0xa4>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:159
    CHECK_DIF_OK(dif_rstmgr_reset_info_clear(&rstmgr));
20000b92:       |         1008                  addi    a0,sp,32
20000b94:       |         0ad010ef              jal     ra,20002440 <dif_rstmgr_reset_info_clear>
20000b98:       +-------- cd05                  beqz    a0,20000bd0 <_ottf_main+0xa4>
20000b9a:       |         862a                  mv      a2,a0
20000b9c:       |         77c42503              lw      a0,1916(s0)
20000ba0:       |  /----- cd01                  beqz    a0,20000bb8 <_ottf_main+0x8c>
20000ba2:       |  |      e000f517              auipc   a0,0xe000f
20000ba6:       |  |      45e50513              addi    a0,a0,1118 # 10000 <_chip_info_end>
20000baa:       |  |      0cc00593              li      a1,204
20000bae:       |  |      952e                  add     a0,a0,a1
20000bb0:       |  |      4585                  li      a1,1
20000bb2:       |  |      44f010ef              jal     ra,20002800 <base_log_internal_dv>
20000bb6:       |  |  /-- a801                  j       20000bc6 <_ottf_main+0x9a>
20000bb8:       |  \--|-> 00004517              auipc   a0,0x4
20000bbc:       |     |   d6850513              addi    a0,a0,-664 # 20004920 <_ottf_main.log_fields.5>
20000bc0:       |     |   85b2                  mv      a1,a2
20000bc2:       |     |   3a3010ef              jal     ra,20002764 <base_log_internal_core>
20000bc6:       |     \-> 6531                  lui     a0,0xc
20000bc8:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20000bcc:       |         24f010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:163
  }

  // Initialize the console to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
20000bd0:       \-------> 00005517              auipc   a0,0x5
20000bd4:                 6dc52503              lw      a0,1756(a0) # 200062ac <kDeviceType>
20000bd8:          /----- c91d                  beqz    a0,20000c0e <_ottf_main+0xe2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:164
    ottf_console_init();
20000bda:          |      26b9                  jal     20000f28 <ottf_console_init>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:165
    if (!kOttfTestConfig.silence_console_prints) {
20000bdc:          |      0124c503              lbu     a0,18(s1)
20000be0:          +----- e51d                  bnez    a0,20000c0e <_ottf_main+0xe2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:166
      LOG_INFO("Running %s", kOttfTestConfig.file);
20000be2:          |      77c42503              lw      a0,1916(s0)
20000be6:          |      48d0                  lw      a2,20(s1)
20000be8:          |  /-- cd01                  beqz    a0,20000c00 <_ottf_main+0xd4>
20000bea:          |  |   e000f517              auipc   a0,0xe000f
20000bee:          |  |   41650513              addi    a0,a0,1046 # 10000 <_chip_info_end>
20000bf2:          |  |   0e000593              li      a1,224
20000bf6:          |  |   952e                  add     a0,a0,a1
20000bf8:          |  |   4585                  li      a1,1
20000bfa:          |  |   407010ef              jal     ra,20002800 <base_log_internal_dv>
20000bfe:          +--|-- a801                  j       20000c0e <_ottf_main+0xe2>
20000c00:          |  \-> 00004517              auipc   a0,0x4
20000c04:          |      d3450513              addi    a0,a0,-716 # 20004934 <_ottf_main.log_fields.8>
20000c08:          |      85b2                  mv      a1,a2
20000c0a:          |      35b010ef              jal     ra,20002764 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:173
  }

  // Initialize a global random number generator testutil context to provide
  // tests with a source of entropy for randomizing test behaviors.
  dif_rv_core_ibex_t rv_core_ibex;
  CHECK_DIF_OK(dif_rv_core_ibex_init(
20000c0e:          \----> 411f0537              lui     a0,0x411f0
20000c12:                 082c                  addi    a1,sp,24
20000c14:                 1f9010ef              jal     ra,2000260c <dif_rv_core_ibex_init>
20000c18:       /-------- cd05                  beqz    a0,20000c50 <_ottf_main+0x124>
20000c1a:       |         862a                  mv      a2,a0
20000c1c:       |         77c42503              lw      a0,1916(s0)
20000c20:       |  /----- cd01                  beqz    a0,20000c38 <_ottf_main+0x10c>
20000c22:       |  |      e000f517              auipc   a0,0xe000f
20000c26:       |  |      3de50513              addi    a0,a0,990 # 10000 <_chip_info_end>
20000c2a:       |  |      0f400593              li      a1,244
20000c2e:       |  |      952e                  add     a0,a0,a1
20000c30:       |  |      4585                  li      a1,1
20000c32:       |  |      3cf010ef              jal     ra,20002800 <base_log_internal_dv>
20000c36:       |  |  /-- a801                  j       20000c46 <_ottf_main+0x11a>
20000c38:       |  \--|-> 00004517              auipc   a0,0x4
20000c3c:       |     |   d1050513              addi    a0,a0,-752 # 20004948 <_ottf_main.log_fields.11>
20000c40:       |     |   85b2                  mv      a1,a2
20000c42:       |     |   323010ef              jal     ra,20002764 <base_log_internal_core>
20000c46:       |     \-> 6531                  lui     a0,0xc
20000c48:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20000c4c:       |         1cf010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:176
      mmio_region_from_addr(TOP_EARLGREY_RV_CORE_IBEX_CFG_BASE_ADDR),
      &rv_core_ibex));
  rand_testutils_rng_ctx = rand_testutils_init(&rv_core_ibex);
20000c50:       \-------> 850a                  mv      a0,sp
20000c52:                 082c                  addi    a1,sp,24
20000c54:                 0e9010ef              jal     ra,2000253c <rand_testutils_init>
20000c58:                 f0001517              auipc   a0,0xf0001
20000c5c:                 49850513              addi    a0,a0,1176 # 100020f0 <rand_testutils_rng_ctx>
20000c60:                 858a                  mv      a1,sp
20000c62:                 4661                  li      a2,24
20000c64:                 42c030ef              jal     ra,20004090 <memcpy>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:179

  // Run the test.
  if (kOttfTestConfig.enable_concurrency) {
20000c68:                 0004c503              lbu     a0,0(s1)
20000c6c:          /----- c11d                  beqz    a0,20000c92 <_ottf_main+0x166>
ottf_task_create():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:67
  return xTaskCreate(/*pvTaskCode=*/task_function, /*pcName=*/task_name,
20000c6e:          |      00000517              auipc   a0,0x0
20000c72:          |      0a450513              addi    a0,a0,164 # 20000d12 <test_wrapper>
20000c76:          |      00004597              auipc   a1,0x4
20000c7a:          |      bf358593              addi    a1,a1,-1037 # 20004869 <test_main.log_fields.21+0x1c5>
20000c7e:          |      40000613              li      a2,1024
20000c82:          |      4705                  li      a4,1
20000c84:          |      4681                  li      a3,0
20000c86:          |      4781                  li      a5,0
20000c88:          |      4a3020ef              jal     ra,2000392a <xTaskCreate>
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:184
    // Run `test_main()` in a FreeRTOS task, allowing other FreeRTOS tasks to
    // be spawned, if requested in the main test task. Note, we spawn the main
    // test task at a priority level of 0.
    ottf_task_create(test_wrapper, "test_main", /*task_stack_depth=*/1024, 0);
    vTaskStartScheduler();
20000c8c:          |      745020ef              jal     ra,20003bd0 <vTaskStartScheduler>
20000c90:          |  /-- a011                  j       20000c94 <_ottf_main+0x168>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:187
  } else {
    // Otherwise, launch `test_main()` on bare-metal.
    test_wrapper(NULL);
20000c92:          \--|-> 2041                  jal     20000d12 <test_wrapper>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:191
  }

  // Unreachable.
  CHECK(false);
20000c94:             \-> 00004517              auipc   a0,0x4
20000c98:                 a2450613              addi    a2,a0,-1500 # 200046b8 <test_main.log_fields.21+0x14>
20000c9c:                 368f05b7              lui     a1,0x368f0
20000ca0:                 4501                  li      a0,0
20000ca2:                 4681                  li      a3,0
20000ca4:                 578020ef              jal     ra,2000321c <status_create>
20000ca8:                 00010023              sb      zero,0(sp)
20000cac:                 00014583              lbu     a1,0(sp)
20000cb0:       /-------- e1a1                  bnez    a1,20000cf0 <_ottf_main+0x1c4>
20000cb2:       |         77c42503              lw      a0,1916(s0)
20000cb6:       |  /----- cd01                  beqz    a0,20000cce <_ottf_main+0x1a2>
20000cb8:       |  |      e000f517              auipc   a0,0xe000f
20000cbc:       |  |      34850513              addi    a0,a0,840 # 10000 <_chip_info_end>
20000cc0:       |  |      10800593              li      a1,264
20000cc4:       |  |      952e                  add     a0,a0,a1
20000cc6:       |  |      4581                  li      a1,0
20000cc8:       |  |      339010ef              jal     ra,20002800 <base_log_internal_dv>
20000ccc:       |  |  /-- a039                  j       20000cda <_ottf_main+0x1ae>
20000cce:       |  \--|-> 00004517              auipc   a0,0x4
20000cd2:       |     |   c8e50513              addi    a0,a0,-882 # 2000495c <_ottf_main.log_fields.15>
20000cd6:       |     |   28f010ef              jal     ra,20002764 <base_log_internal_core>
20000cda:       |     \-> 00004517              auipc   a0,0x4
20000cde:       |         9de50613              addi    a2,a0,-1570 # 200046b8 <test_main.log_fields.21+0x14>
20000ce2:       |         4535                  li      a0,13
20000ce4:       |         368f05b7              lui     a1,0x368f0
20000ce8:       |         0bf00693              li      a3,191
20000cec:       |         530020ef              jal     ra,2000321c <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_WARN_UNUSED_RESULT
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0 ? (absl_status_t)bitfield_field32_read(
20000cf0:       \-------> 00052593              slti    a1,a0,0
20000cf4:                 897d                  andi    a0,a0,31
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:191
20000cf6:                 00a03533              snez    a0,a0
20000cfa:                 8d6d                  and     a0,a0,a1
20000cfc:             /-- c511                  beqz    a0,20000d08 <_ottf_main+0x1dc>
20000cfe:             |   6531                  lui     a0,0xc
20000d00:             |   aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20000d04:             |   117010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:192
}
20000d08:             \-> 50b2                  lw      ra,44(sp)
20000d0a:                 5422                  lw      s0,40(sp)
20000d0c:                 5492                  lw      s1,36(sp)
20000d0e:                 6145                  addi    sp,sp,48
20000d10:                 8082                  ret

20000d12 <test_wrapper>:
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:143
static void test_wrapper(void *task_parameters) {
20000d12:                       7179                    addi    sp,sp,-48
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:145
  bool result = manufacturer_pre_test_hook();
20000d14:                       d606                    sw      ra,44(sp)
20000d16:                       d422                    sw      s0,40(sp)
20000d18:                       d226                    sw      s1,36(sp)
20000d1a:                       d04a                    sw      s2,32(sp)
20000d1c:                       ce4e                    sw      s3,28(sp)
20000d1e:                       cc52                    sw      s4,24(sp)
20000d20:                       ca56                    sw      s5,20(sp)
20000d22:                       c85a                    sw      s6,16(sp)
20000d24:                       c65e                    sw      s7,12(sp)
20000d26:                       c462                    sw      s8,8(sp)
20000d28:                       2a4030ef                jal     ra,20003fcc <manufacturer_pre_test_hook>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:146
  result = result && test_main();
20000d2c:                /----- c519                    beqz    a0,20000d3a <test_wrapper+0x28>
20000d2e:                |      34dd                    jal     20000814 <test_main>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:147
  result = result && manufacturer_post_test_hook();
20000d30:                +----- c509                    beqz    a0,20000d3a <test_wrapper+0x28>
20000d32:                |      29e030ef                jal     ra,20003fd0 <manufacturer_post_test_hook>
20000d36:                |      842a                    mv      s0,a0
20000d38:                |  /-- a011                    j       20000d3c <test_wrapper+0x2a>
20000d3a:                \--|-> 4401                    li      s0,0
report_test_status():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:106
  if (kDeviceType != kDeviceSimDV) {
20000d3c:                   \-> 00005517                auipc   a0,0x5
20000d40:                       57052503                lw      a0,1392(a0) # 200062ac <kDeviceType>
20000d44:          /----------- cd05                    beqz    a0,20000d7c <test_wrapper+0x6a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:107
    if (kOttfTestConfig.console.test_may_clobber) {
20000d46:          |            00004517                auipc   a0,0x4
20000d4a:          |            8ba50493                addi    s1,a0,-1862 # 20004600 <kOttfTestConfig>
20000d4e:          |            00c4c503                lbu     a0,12(s1)
20000d52:          |        /-- c111                    beqz    a0,20000d56 <test_wrapper+0x44>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:108
      ottf_console_init();
20000d54:          |        |   2ad1                    jal     20000f28 <ottf_console_init>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:110
    if (!kOttfTestConfig.silence_console_prints) {
20000d56:          |        \-> 0124c503                lbu     a0,18(s1)
20000d5a:          +----------- e10d                    bnez    a0,20000d7c <test_wrapper+0x6a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:111
      LOG_INFO("Finished %s", kOttfTestConfig.file);
20000d5c:          |            00005517                auipc   a0,0x5
20000d60:          |            56852503                lw      a0,1384(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20000d64:          |            48d0                    lw      a2,20(s1)
20000d66:          |  /-------- cd19                    beqz    a0,20000d84 <test_wrapper+0x72>
20000d68:          |  |         e000f517                auipc   a0,0xe000f
20000d6c:          |  |         29850513                addi    a0,a0,664 # 10000 <_chip_info_end>
20000d70:          |  |         11c00593                li      a1,284
20000d74:          |  |         952e                    add     a0,a0,a1
20000d76:          |  |         4585                    li      a1,1
20000d78:          |  |         289010ef                jal     ra,20002800 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:117
  if (!result) {
20000d7c:          \--|--/----X cc01                    beqz    s0,20000d94 <test_wrapper+0x82>
20000d7e:             |  |  /-> 6425                    lui     s0,0x9
20000d80:             |  |  |   0435                    addi    s0,s0,13
20000d82:       /-----|--|--|-- a8f1                    j       20000e5e <test_wrapper+0x14c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:111
      LOG_INFO("Finished %s", kOttfTestConfig.file);
20000d84:       |     \--|--|-> 00004517                auipc   a0,0x4
20000d88:       |        |  |   bec50513                addi    a0,a0,-1044 # 20004970 <report_test_status.log_fields>
20000d8c:       |        |  |   85b2                    mv      a1,a2
20000d8e:       |        |  |   1d7010ef                jal     ra,20002764 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:117
  if (!result) {
20000d92:       |        |  \-- f475                    bnez    s0,20000d7e <test_wrapper+0x6c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:118
    LOG_INFO("Status reported by the test:");
20000d94:       |        \----> 00005517                auipc   a0,0x5
20000d98:       |               53052983                lw      s3,1328(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20000d9c:       |        /----- 00098d63                beqz    s3,20000db6 <test_wrapper+0xa4>
20000da0:       |        |      e000f517                auipc   a0,0xe000f
20000da4:       |        |      26050513                addi    a0,a0,608 # 10000 <_chip_info_end>
20000da8:       |        |      13000593                li      a1,304
20000dac:       |        |      952e                    add     a0,a0,a1
20000dae:       |        |      4581                    li      a1,0
20000db0:       |        |      251010ef                jal     ra,20002800 <base_log_internal_dv>
20000db4:       |        |  /-- a039                    j       20000dc2 <test_wrapper+0xb0>
20000db6:       |        \--|-> 00004517                auipc   a0,0x4
20000dba:       |           |   bce50513                addi    a0,a0,-1074 # 20004984 <report_test_status.log_fields.20>
20000dbe:       |           |   1a7010ef                jal     ra,20002764 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:120
    size_t print_cnt = status_report_list_cnt;
20000dc2:       |           \-> f0001a97                auipc   s5,0xf0001
20000dc6:       |               2b2aa503                lw      a0,690(s5) # 10002074 <status_report_list_cnt>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:121
    if (status_report_list_cnt > kStatusReportListSize) {
20000dca:       |               00004597                auipc   a1,0x4
20000dce:       |               b3e5ab03                lw      s6,-1218(a1) # 20004908 <kStatusReportListSize>
20000dd2:       |               0b655bb3                minu    s7,a0,s6
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:125
    for (size_t i = 1; i <= print_cnt; i++) {
20000dd6:       |  /----------- 040b8c63                beqz    s7,20000e2e <test_wrapper+0x11c>
20000dda:       |  |            4405                    li      s0,1
20000ddc:       |  |            54fd                    li      s1,-1
20000dde:       |  |            f0001517                auipc   a0,0xf0001
20000de2:       |  |            32a50c13                addi    s8,a0,810 # 10002108 <status_report_list>
20000de6:       |  |            00004517                auipc   a0,0x4
20000dea:       |  |            bb250913                addi    s2,a0,-1102 # 20004998 <report_test_status.log_fields.23>
20000dee:       |  |            e000f517                auipc   a0,0xe000f
20000df2:       |  |            21250a13                addi    s4,a0,530 # 10000 <_chip_info_end>
20000df6:       |  |            14400513                li      a0,324
20000dfa:       |  |            9a2a                    add     s4,s4,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:126
      size_t idx = (status_report_list_cnt - i) % kStatusReportListSize;
20000dfc:       |  |  /-------> 2b2aa503                lw      a0,690(s5)
20000e00:       |  |  |         9526                    add     a0,a0,s1
20000e02:       |  |  |         03657533                remu    a0,a0,s6
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:127
      LOG_INFO("- %r", status_report_list[idx]);
20000e06:       |  |  |         21854533                sh2add  a0,a0,s8
20000e0a:       |  |  |         4110                    lw      a2,0(a0)
20000e0c:       |  |  |  /----- 00098763                beqz    s3,20000e1a <test_wrapper+0x108>
20000e10:       |  |  |  |      4585                    li      a1,1
20000e12:       |  |  |  |      8552                    mv      a0,s4
20000e14:       |  |  |  |      1ed010ef                jal     ra,20002800 <base_log_internal_dv>
20000e18:       |  |  |  |  /-- a029                    j       20000e22 <test_wrapper+0x110>
20000e1a:       |  |  |  \--|-> 854a                    mv      a0,s2
20000e1c:       |  |  |     |   85b2                    mv      a1,a2
20000e1e:       |  |  |     |   147010ef                jal     ra,20002764 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:125
    for (size_t i = 1; i <= print_cnt; i++) {
20000e22:       |  |  |     \-> 0405                    addi    s0,s0,1
20000e24:       |  |  |         14fd                    addi    s1,s1,-1
20000e26:       |  |  \-------- fc8bfbe3                bgeu    s7,s0,20000dfc <test_wrapper+0xea>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:130
    if (status_report_list_cnt > kStatusReportListSize) {
20000e2a:       |  |            2b2aa503                lw      a0,690(s5)
20000e2e:       |  \-----/----X 02ab7563                bgeu    s6,a0,20000e58 <test_wrapper+0x146>
20000e32:       |        |  /-- 00098d63                beqz    s3,20000e4c <test_wrapper+0x13a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:131
      LOG_INFO(
20000e36:       |        |  |   e000f517                auipc   a0,0xe000f
20000e3a:       |        |  |   1ca50513                addi    a0,a0,458 # 10000 <_chip_info_end>
20000e3e:       |        |  |   15800593                li      a1,344
20000e42:       |        |  |   952e                    add     a0,a0,a1
20000e44:       |        |  |   4581                    li      a1,0
20000e46:       |        |  |   1bb010ef                jal     ra,20002800 <base_log_internal_dv>
20000e4a:       |        +--|-- a039                    j       20000e58 <test_wrapper+0x146>
20000e4c:       |        |  \-> 00004517                auipc   a0,0x4
20000e50:       |        |      b6050513                addi    a0,a0,-1184 # 200049ac <report_test_status.log_fields.26>
20000e54:       |        |      111010ef                jal     ra,20002764 <base_log_internal_core>
20000e58:       |        \----> 6531                    lui     a0,0xc
20000e5a:       |               aad50413                addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:136
  coverage_send_buffer();
20000e5e:       \-------------> 2839                    jal     20000e7c <coverage_send_buffer>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:137
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
20000e60:                       8522                    mv      a0,s0
20000e62:                       50b2                    lw      ra,44(sp)
20000e64:                       5422                    lw      s0,40(sp)
20000e66:                       5492                    lw      s1,36(sp)
20000e68:                       5902                    lw      s2,32(sp)
20000e6a:                       49f2                    lw      s3,28(sp)
20000e6c:                       4a62                    lw      s4,24(sp)
20000e6e:                       4ad2                    lw      s5,20(sp)
20000e70:                       4b42                    lw      s6,16(sp)
20000e72:                       4bb2                    lw      s7,12(sp)
20000e74:                       4c22                    lw      s8,8(sp)
20000e76:                       6145                    addi    sp,sp,48
20000e78:                       7a20106f                j       2000261a <test_status_set>

20000e7c <coverage_send_buffer>:
coverage_send_buffer():
/proc/self/cwd/sw/device/lib/testing/test_framework/coverage_none.c:9

#include "sw/device/lib/testing/test_framework/coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void coverage_send_buffer(void) {}
20000e7c:       8082                    ret

20000e7e <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:18

/**
 * This is called if configUSE_MALLOC_FAILED_HOOK is set to 1 in
 * FreeRTOSConfig.h, and a call to pvPortMalloc() fails.
 */
void vApplicationMallocFailedHook(void) {
20000e7e:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:19
  LOG_INFO("%s",
20000e80:              c606                     sw      ra,12(sp)
20000e82:              00005517                 auipc   a0,0x5
20000e86:              44252503                 lw      a0,1090(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20000e8a:          /-- ed01                     bnez    a0,20000ea2 <vApplicationMallocFailedHook+0x24>
20000e8c:          |   00004517                 auipc   a0,0x4
20000e90:          |   be450513                 addi    a0,a0,-1052 # 20004a70 <vApplicationMallocFailedHook.log_fields>
20000e94:          |   00004597                 auipc   a1,0x4
20000e98:          |   b6258593                 addi    a1,a1,-1182 # 200049f6 <report_test_status.log_fields.26+0x4a>
20000e9c:          |   0c9010ef                 jal     ra,20002764 <base_log_internal_core>
20000ea0:       /--|-- a839                     j       20000ebe <vApplicationMallocFailedHook+0x40>
20000ea2:       |  \-> e000f517                 auipc   a0,0xe000f
20000ea6:       |      15e50513                 addi    a0,a0,350 # 10000 <_chip_info_end>
20000eaa:       |      16c00593                 li      a1,364
20000eae:       |      952e                     add     a0,a0,a1
20000eb0:       |      00004597                 auipc   a1,0x4
20000eb4:       |      b4658613                 addi    a2,a1,-1210 # 200049f6 <report_test_status.log_fields.26+0x4a>
20000eb8:       |      4585                     li      a1,1
20000eba:       |      147010ef                 jal     ra,20002800 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:21
           "FreeRTOS malloc failed. Increase heap size in FreeRTOSConfig.h");
  irq_global_ctrl(false);
20000ebe:       \----> 4501                     li      a0,0
20000ec0:              603000ef                 jal     ra,20001cc2 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:22
  abort();
20000ec4:              089010ef                 jal     ra,2000274c <abort>

20000ec8 <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:29

/**
 * This is called if configCHECK_FOR_STACK_OVERFLOW is set to 1 or 2 in
 * FreeRTOSConfig.h, and a task detects a stack overflow.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
20000ec8:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:30
  LOG_INFO("FreeRTOS stack overflow. Increase stack size of task: %s",
20000eca:              c606                     sw      ra,12(sp)
20000ecc:              00005517                 auipc   a0,0x5
20000ed0:              3f852503                 lw      a0,1016(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20000ed4:              862e                     mv      a2,a1
20000ed6:          /-- e909                     bnez    a0,20000ee8 <vApplicationStackOverflowHook+0x20>
20000ed8:          |   00004517                 auipc   a0,0x4
20000edc:          |   bac50513                 addi    a0,a0,-1108 # 20004a84 <vApplicationStackOverflowHook.log_fields>
20000ee0:          |   85b2                     mv      a1,a2
20000ee2:          |   083010ef                 jal     ra,20002764 <base_log_internal_core>
20000ee6:       /--|-- a819                     j       20000efc <vApplicationStackOverflowHook+0x34>
20000ee8:       |  \-> e000f517                 auipc   a0,0xe000f
20000eec:       |      11850513                 addi    a0,a0,280 # 10000 <_chip_info_end>
20000ef0:       |      18000593                 li      a1,384
20000ef4:       |      952e                     add     a0,a0,a1
20000ef6:       |      4585                     li      a1,1
20000ef8:       |      109010ef                 jal     ra,20002800 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:32
           pcTaskName);
  irq_global_ctrl(false);
20000efc:       \----> 4501                     li      a0,0
20000efe:              5c5000ef                 jal     ra,20001cc2 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:33
  abort();
20000f02:              04b010ef                 jal     ra,2000274c <abort>

20000f06 <xPortStartScheduler>:
xPortStartScheduler():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:93
// ----------------------------------------------------------------------------
// Scheduler Setup
// ----------------------------------------------------------------------------
extern void xPortStartFirstTask(void);

BaseType_t xPortStartScheduler(void) {
20000f06:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:97
#if configUSE_PREEMPTION
  vPortSetupTimerInterrupt();
#endif  // configUSE_PREEMPTION
  irq_timer_ctrl(true);
20000f08:       c606                    sw      ra,12(sp)
20000f0a:       4505                    li      a0,1
20000f0c:       5df000ef                jal     ra,20001cea <irq_timer_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:98
  irq_external_ctrl(true);
20000f10:       4505                    li      a0,1
20000f12:       5c3000ef                jal     ra,20001cd4 <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:99
  irq_software_ctrl(true);
20000f16:       4505                    li      a0,1
20000f18:       5e9000ef                jal     ra,20001d00 <irq_software_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:103
  // Note: no need to call 'irq_global_ctrl(true)' since the global interrupt
  // enable is set in the xPortStartFirstTask sub-routine in
  // sw/device/lib/testing/test_framework/freertos_port.S.
  xPortStartFirstTask();
20000f1c:       e2cff0ef                jal     ra,20000548 <xPortStartFirstTask>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:106

  // Unreachable.
  return pdFAIL;
20000f20:       4501                    li      a0,0
20000f22:       40b2                    lw      ra,12(sp)
20000f24:       0141                    addi    sp,sp,16
20000f26:       8082                    ret

20000f28 <ottf_console_init>:
ottf_console_init():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:123
        i * ARRAYSIZE(kEmptyPattern), ARRAYSIZE(kEmptyPattern), kEmptyPattern));
  }
  CHECK_DIF_OK(dif_spi_device_set_flash_status_registers(spi_device, 0x00));
}

void ottf_console_init(void) {
20000f28:                                1141                   addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:125
  // Initialize/Configure the console device.
  uintptr_t base_addr = kOttfTestConfig.console.base_addr;
20000f2a:                                c606                   sw      ra,12(sp)
20000f2c:                                c422                   sw      s0,8(sp)
20000f2e:                                00003517               auipc   a0,0x3
20000f32:                                6d250593               addi    a1,a0,1746 # 20004600 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:126
  switch (kOttfTestConfig.console.type) {
20000f36:                                41c8                   lw      a0,4(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:125
  uintptr_t base_addr = kOttfTestConfig.console.base_addr;
20000f38:                                4580                   lw      s0,8(a1)
20000f3a:                                4585                   li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:126
  switch (kOttfTestConfig.console.type) {
20000f3c:                            /-- 04b50663               beq     a0,a1,20000f88 <ottf_console_init+0x60>
20000f40:                         /--|-- e52d                   bnez    a0,20000faa <ottf_console_init+0x82>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:130
    case kOttfConsoleUart:
      // Set a default for the console base address if the base address is not
      // configured. The default is to use UART0.
      if (base_addr == 0) {
20000f42:       /-----------------|--|-- 12041263               bnez    s0,20001066 <ottf_console_init+0x13e>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:131
        CHECK(kOttfTestConfig.console.type == kOttfConsoleUart);
20000f46:       |                 |  |   00004517               auipc   a0,0x4
20000f4a:       |                 |  |   b5250613               addi    a2,a0,-1198 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
20000f4e:       |                 |  |   0e8f05b7               lui     a1,0xe8f0
20000f52:       |                 |  |   4501                   li      a0,0
20000f54:       |                 |  |   4681                   li      a3,0
20000f56:       |                 |  |   2c6020ef               jal     ra,2000321c <status_create>
20000f5a:       |                 |  |   4585                   li      a1,1
20000f5c:       |                 |  |   00b103a3               sb      a1,7(sp)
20000f60:       |                 |  |   00714583               lbu     a1,7(sp)
20000f64:       |  /--------------|--|-- 0e059363               bnez    a1,2000104a <ottf_console_init+0x122>
20000f68:       |  |              |  |   00005517               auipc   a0,0x5
20000f6c:       |  |              |  |   35c52503               lw      a0,860(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20000f70:       |  |     /--------|--|-- cd45                   beqz    a0,20001028 <ottf_console_init+0x100>
20000f72:       |  |     |        |  |   e000f517               auipc   a0,0xe000f
20000f76:       |  |     |        |  |   08e50513               addi    a0,a0,142 # 10000 <_chip_info_end>
20000f7a:       |  |     |        |  |   19400593               li      a1,404
20000f7e:       |  |     |        |  |   952e                   add     a0,a0,a1
20000f80:       |  |     |        |  |   4581                   li      a1,0
20000f82:       |  |     |        |  |   07f010ef               jal     ra,20002800 <base_log_internal_dv>
20000f86:       |  |     |  /-----|--|-- a07d                   j       20001034 <ottf_console_init+0x10c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:140
      ottf_console_configure_uart(base_addr);
      sink = get_uart_sink();
      getc = uart_getc;
      break;
    case (kOttfConsoleSpiDevice):
      ottf_console_configure_spi_device(base_addr);
20000f88:       |  |     |  |     |  \-> 8522                   mv      a0,s0
20000f8a:       |  |     |  |     |      2ead                   jal     20001304 <ottf_console_configure_spi_device>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:141
      sink = get_spi_device_sink();
20000f8c:       |  |     |  |     |      0ab010ef               jal     ra,20002836 <get_spi_device_sink>
20000f90:       |  |     |  |     |      f0001597               auipc   a1,0xf0001
20000f94:       |  |     |  |     |      0ea5a623               sw      a0,236(a1) # 1000207c <sink>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:142
      getc = spi_device_getc;
20000f98:       |  |     |  |     |      f0001517               auipc   a0,0xf0001
20000f9c:       |  |     |  |     |      00000597               auipc   a1,0x0
20000fa0:       |  |     |  |     |      67e58593               addi    a1,a1,1662 # 2000161a <spi_device_getc>
20000fa4:       |  |     |  |     |      0eb52423               sw      a1,232(a0) # 10002080 <getc>
20000fa8:       |  |  /--|--|-----|----- a8f9                   j       20001086 <ottf_console_init+0x15e>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:145
      break;
    default:
      CHECK(false, "unsupported OTTF console interface.");
20000faa:       |  |  |  |  |     \----> 00004517               auipc   a0,0x4
20000fae:       |  |  |  |  |            aee50613               addi    a2,a0,-1298 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
20000fb2:       |  |  |  |  |            0e8f05b7               lui     a1,0xe8f0
20000fb6:       |  |  |  |  |            4501                   li      a0,0
20000fb8:       |  |  |  |  |            4681                   li      a3,0
20000fba:       |  |  |  |  |            262020ef               jal     ra,2000321c <status_create>
20000fbe:       |  |  |  |  |            00010323               sb      zero,6(sp)
20000fc2:       |  |  |  |  |            00614583               lbu     a1,6(sp)
20000fc6:       |  |  |  |  |  /-------- e1b1                   bnez    a1,2000100a <ottf_console_init+0xe2>
20000fc8:       |  |  |  |  |  |         00005517               auipc   a0,0x5
20000fcc:       |  |  |  |  |  |         2fc52503               lw      a0,764(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20000fd0:       |  |  |  |  |  |  /----- cd01                   beqz    a0,20000fe8 <ottf_console_init+0xc0>
20000fd2:       |  |  |  |  |  |  |      e000f517               auipc   a0,0xe000f
20000fd6:       |  |  |  |  |  |  |      02e50513               addi    a0,a0,46 # 10000 <_chip_info_end>
20000fda:       |  |  |  |  |  |  |      1a800593               li      a1,424
20000fde:       |  |  |  |  |  |  |      952e                   add     a0,a0,a1
20000fe0:       |  |  |  |  |  |  |      4581                   li      a1,0
20000fe2:       |  |  |  |  |  |  |      01f010ef               jal     ra,20002800 <base_log_internal_dv>
20000fe6:       |  |  |  |  |  |  |  /-- a039                   j       20000ff4 <ottf_console_init+0xcc>
20000fe8:       |  |  |  |  |  |  \--|-> 00004517               auipc   a0,0x4
20000fec:       |  |  |  |  |  |     |   65450513               addi    a0,a0,1620 # 2000563c <ottf_console_init.log_fields.4>
20000ff0:       |  |  |  |  |  |     |   774010ef               jal     ra,20002764 <base_log_internal_core>
20000ff4:       |  |  |  |  |  |     \-> 00004517               auipc   a0,0x4
20000ff8:       |  |  |  |  |  |         aa450613               addi    a2,a0,-1372 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
20000ffc:       |  |  |  |  |  |         4535                   li      a0,13
20000ffe:       |  |  |  |  |  |         0e8f05b7               lui     a1,0xe8f0
20001002:       |  |  |  |  |  |         09100693               li      a3,145
20001006:       |  |  |  |  |  |         216020ef               jal     ra,2000321c <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
2000100a:       |  |  |  |  |  \-------> 00052593               slti    a1,a0,0
2000100e:       |  |  |  |  |            897d                   andi    a0,a0,31
ottf_console_init():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:145
20001010:       |  |  |  |  |            00a03533               snez    a0,a0
20001014:       |  |  |  |  |            8d6d                   and     a0,a0,a1
20001016:       |  |  +--|--|----------- c925                   beqz    a0,20001086 <ottf_console_init+0x15e>
20001018:       |  |  |  |  |            6531                   lui     a0,0xc
2000101a:       |  |  |  |  |            aad50513               addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
2000101e:       |  |  |  |  |            40b2                   lw      ra,12(sp)
20001020:       |  |  |  |  |            4422                   lw      s0,8(sp)
20001022:       |  |  |  |  |            0141                   addi    sp,sp,16
20001024:       |  |  |  |  |            5f60106f               j       2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:131
        CHECK(kOttfTestConfig.console.type == kOttfConsoleUart);
20001028:       |  |  |  \--|----------> 00004517               auipc   a0,0x4
2000102c:       |  |  |     |            60050513               addi    a0,a0,1536 # 20005628 <ottf_console_init.log_fields>
20001030:       |  |  |     |            734010ef               jal     ra,20002764 <base_log_internal_core>
20001034:       |  |  |     \----------> 00004517               auipc   a0,0x4
20001038:       |  |  |                  a6450613               addi    a2,a0,-1436 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
2000103c:       |  |  |                  4535                   li      a0,13
2000103e:       |  |  |                  0e8f05b7               lui     a1,0xe8f0
20001042:       |  |  |                  08300693               li      a3,131
20001046:       |  |  |                  1d6020ef               jal     ra,2000321c <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
2000104a:       |  \--|----------------> 00052593               slti    a1,a0,0
2000104e:       |     |                  897d                   andi    a0,a0,31
ottf_console_init():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:131
20001050:       |     |                  00a03533               snez    a0,a0
20001054:       |     |                  8d6d                   and     a0,a0,a1
20001056:       |     |                  40000437               lui     s0,0x40000
2000105a:       +-----|----------------- c511                   beqz    a0,20001066 <ottf_console_init+0x13e>
2000105c:       |     |                  6531                   lui     a0,0xc
2000105e:       |     |                  aad50513               addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001062:       |     |                  5b8010ef               jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:135
      ottf_console_configure_uart(base_addr);
20001066:       \-----|----------------> 8522                   mv      a0,s0
20001068:             |                  201d                   jal     2000108e <ottf_console_configure_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:136
      sink = get_uart_sink();
2000106a:             |                  169010ef               jal     ra,200029d2 <get_uart_sink>
2000106e:             |                  f0001597               auipc   a1,0xf0001
20001072:             |                  00a5a723               sw      a0,14(a1) # 1000207c <sink>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:137
      getc = uart_getc;
20001076:             |                  f0001517               auipc   a0,0xf0001
2000107a:             |                  00000597               auipc   a1,0x0
2000107e:             |                  1e858593               addi    a1,a1,488 # 20001262 <uart_getc>
20001082:             |                  00b52523               sw      a1,10(a0) # 10002080 <getc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:148
      break;
  }
}
20001086:             \----------------> 40b2                   lw      ra,12(sp)
20001088:                                4422                   lw      s0,8(sp)
2000108a:                                0141                   addi    sp,sp,16
2000108c:                                8082                   ret

2000108e <ottf_console_configure_uart>:
ottf_console_configure_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:150

void ottf_console_configure_uart(uintptr_t base_addr) {
2000108e:                 7179                  addi    sp,sp,-48
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:151
  CHECK_DIF_OK(
20001090:                 d606                  sw      ra,44(sp)
20001092:                 d422                  sw      s0,40(sp)
20001094:                 d226                  sw      s1,36(sp)
20001096:                 d04a                  sw      s2,32(sp)
20001098:                 f0001597              auipc   a1,0xf0001
2000109c:                 fe058593              addi    a1,a1,-32 # 10002078 <ottf_console_uart>
200010a0:                 624020ef              jal     ra,200036c4 <dif_uart_init>
200010a4:                 00005917              auipc   s2,0x5
200010a8:       /-------- cd05                  beqz    a0,200010e0 <ottf_console_configure_uart+0x52>
200010aa:       |         862a                  mv      a2,a0
200010ac:       |         22092503              lw      a0,544(s2) # 200062c4 <kDeviceLogBypassUartAddress>
200010b0:       |  /----- cd01                  beqz    a0,200010c8 <ottf_console_configure_uart+0x3a>
200010b2:       |  |      e000f517              auipc   a0,0xe000f
200010b6:       |  |      f4e50513              addi    a0,a0,-178 # 10000 <_chip_info_end>
200010ba:       |  |      1bc00593              li      a1,444
200010be:       |  |      952e                  add     a0,a0,a1
200010c0:       |  |      4585                  li      a1,1
200010c2:       |  |      73e010ef              jal     ra,20002800 <base_log_internal_dv>
200010c6:       |  |  /-- a801                  j       200010d6 <ottf_console_configure_uart+0x48>
200010c8:       |  \--|-> 00004517              auipc   a0,0x4
200010cc:       |     |   58850513              addi    a0,a0,1416 # 20005650 <ottf_console_configure_uart.log_fields>
200010d0:       |     |   85b2                  mv      a1,a2
200010d2:       |     |   692010ef              jal     ra,20002764 <base_log_internal_core>
200010d6:       |     \-> 6531                  lui     a0,0xc
200010d8:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200010dc:       |         53e010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:153
      dif_uart_init(mmio_region_from_addr(base_addr), &ottf_console_uart));
  CHECK(kUartBaudrate <= UINT32_MAX, "kUartBaudrate must fit in uint32_t");
200010e0:       \-------> 00004517              auipc   a0,0x4
200010e4:                 9b850613              addi    a2,a0,-1608 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
200010e8:                 0e8f05b7              lui     a1,0xe8f0
200010ec:                 4501                  li      a0,0
200010ee:                 4681                  li      a3,0
200010f0:                 12c020ef              jal     ra,2000321c <status_create>
200010f4:                 00005597              auipc   a1,0x5
200010f8:                 1c458493              addi    s1,a1,452 # 200062b8 <kUartBaudrate>
200010fc:                 40cc                  lw      a1,4(s1)
200010fe:                 0015b593              seqz    a1,a1
20001102:                 00b10023              sb      a1,0(sp)
20001106:                 00014583              lbu     a1,0(sp)
2000110a:       /-------- e1a1                  bnez    a1,2000114a <ottf_console_configure_uart+0xbc>
2000110c:       |         22092503              lw      a0,544(s2)
20001110:       |  /----- cd01                  beqz    a0,20001128 <ottf_console_configure_uart+0x9a>
20001112:       |  |      e000f517              auipc   a0,0xe000f
20001116:       |  |      eee50513              addi    a0,a0,-274 # 10000 <_chip_info_end>
2000111a:       |  |      1d000593              li      a1,464
2000111e:       |  |      952e                  add     a0,a0,a1
20001120:       |  |      4581                  li      a1,0
20001122:       |  |      6de010ef              jal     ra,20002800 <base_log_internal_dv>
20001126:       |  |  /-- a039                  j       20001134 <ottf_console_configure_uart+0xa6>
20001128:       |  \--|-> 00004517              auipc   a0,0x4
2000112c:       |     |   53c50513              addi    a0,a0,1340 # 20005664 <ottf_console_configure_uart.log_fields.9>
20001130:       |     |   634010ef              jal     ra,20002764 <base_log_internal_core>
20001134:       |     \-> 00004517              auipc   a0,0x4
20001138:       |         96450613              addi    a2,a0,-1692 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
2000113c:       |         4535                  li      a0,13
2000113e:       |         0e8f05b7              lui     a1,0xe8f0
20001142:       |         09900693              li      a3,153
20001146:       |         0d6020ef              jal     ra,2000321c <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
2000114a:       \-------> 00052593              slti    a1,a0,0
2000114e:                 897d                  andi    a0,a0,31
ottf_console_configure_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:153
20001150:                 00a03533              snez    a0,a0
20001154:                 8d6d                  and     a0,a0,a1
20001156:             /-- c511                  beqz    a0,20001162 <ottf_console_configure_uart+0xd4>
20001158:             |   6531                  lui     a0,0xc
2000115a:             |   aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
2000115e:             |   4bc010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:154
  CHECK(kClockFreqPeripheralHz <= UINT32_MAX,
20001162:             \-> 00004517              auipc   a0,0x4
20001166:                 93650613              addi    a2,a0,-1738 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
2000116a:                 0e8f05b7              lui     a1,0xe8f0
2000116e:                 4501                  li      a0,0
20001170:                 4681                  li      a3,0
20001172:                 0aa020ef              jal     ra,2000321c <status_create>
20001176:                 00005597              auipc   a1,0x5
2000117a:                 13a58413              addi    s0,a1,314 # 200062b0 <kClockFreqPeripheralHz>
2000117e:                 404c                  lw      a1,4(s0)
20001180:                 0015b593              seqz    a1,a1
20001184:                 00b10023              sb      a1,0(sp)
20001188:                 00014583              lbu     a1,0(sp)
2000118c:       /-------- e1a1                  bnez    a1,200011cc <ottf_console_configure_uart+0x13e>
2000118e:       |         22092503              lw      a0,544(s2)
20001192:       |  /----- cd01                  beqz    a0,200011aa <ottf_console_configure_uart+0x11c>
20001194:       |  |      e000f517              auipc   a0,0xe000f
20001198:       |  |      e6c50513              addi    a0,a0,-404 # 10000 <_chip_info_end>
2000119c:       |  |      1e400593              li      a1,484
200011a0:       |  |      952e                  add     a0,a0,a1
200011a2:       |  |      4581                  li      a1,0
200011a4:       |  |      65c010ef              jal     ra,20002800 <base_log_internal_dv>
200011a8:       |  |  /-- a039                  j       200011b6 <ottf_console_configure_uart+0x128>
200011aa:       |  \--|-> 00004517              auipc   a0,0x4
200011ae:       |     |   4ce50513              addi    a0,a0,1230 # 20005678 <ottf_console_configure_uart.log_fields.12>
200011b2:       |     |   5b2010ef              jal     ra,20002764 <base_log_internal_core>
200011b6:       |     \-> 00004517              auipc   a0,0x4
200011ba:       |         8e250613              addi    a2,a0,-1822 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
200011be:       |         4535                  li      a0,13
200011c0:       |         0e8f05b7              lui     a1,0xe8f0
200011c4:       |         09b00693              li      a3,155
200011c8:       |         054020ef              jal     ra,2000321c <status_create>
200011cc:       \-------> 4084                  lw      s1,0(s1)
200011ce:                 4000                  lw      s0,0(s0)
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
200011d0:                 00052593              slti    a1,a0,0
200011d4:                 897d                  andi    a0,a0,31
ottf_console_configure_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:154
200011d6:                 00a03533              snez    a0,a0
200011da:                 8d6d                  and     a0,a0,a1
200011dc:             /-- c511                  beqz    a0,200011e8 <ottf_console_configure_uart+0x15a>
200011de:             |   6531                  lui     a0,0xc
200011e0:             |   aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200011e4:             |   436010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:156
        "kClockFreqPeripheralHz must fit in uint32_t");
  CHECK_DIF_OK(dif_uart_configure(
200011e8:             \-> c026                  sw      s1,0(sp)
200011ea:                 c222                  sw      s0,4(sp)
200011ec:                 c402                  sw      zero,8(sp)
200011ee:                 4505                  li      a0,1
200011f0:                 c62a                  sw      a0,12(sp)
200011f2:                 c82a                  sw      a0,16(sp)
200011f4:                 ca2a                  sw      a0,20(sp)
200011f6:                 cc02                  sw      zero,24(sp)
200011f8:                 f0001517              auipc   a0,0xf0001
200011fc:                 e8050513              addi    a0,a0,-384 # 10002078 <ottf_console_uart>
20001200:                 858a                  mv      a1,sp
20001202:                 572020ef              jal     ra,20003774 <dif_uart_configure>
20001206:       /-------- cd05                  beqz    a0,2000123e <ottf_console_configure_uart+0x1b0>
20001208:       |         862a                  mv      a2,a0
2000120a:       |         22092503              lw      a0,544(s2)
2000120e:       |  /----- cd01                  beqz    a0,20001226 <ottf_console_configure_uart+0x198>
20001210:       |  |      e000f517              auipc   a0,0xe000f
20001214:       |  |      df050513              addi    a0,a0,-528 # 10000 <_chip_info_end>
20001218:       |  |      1f800593              li      a1,504
2000121c:       |  |      952e                  add     a0,a0,a1
2000121e:       |  |      4585                  li      a1,1
20001220:       |  |      5e0010ef              jal     ra,20002800 <base_log_internal_dv>
20001224:       |  |  /-- a801                  j       20001234 <ottf_console_configure_uart+0x1a6>
20001226:       |  \--|-> 00004517              auipc   a0,0x4
2000122a:       |     |   46650513              addi    a0,a0,1126 # 2000568c <ottf_console_configure_uart.log_fields.16>
2000122e:       |     |   85b2                  mv      a1,a2
20001230:       |     |   534010ef              jal     ra,20002764 <base_log_internal_core>
20001234:       |     \-> 6531                  lui     a0,0xc
20001236:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
2000123a:       |         3e0010ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:165
                              .parity_enable = kDifToggleDisabled,
                              .parity = kDifUartParityEven,
                              .tx_enable = kDifToggleEnabled,
                              .rx_enable = kDifToggleEnabled,
                          }));
  base_uart_stdout(&ottf_console_uart);
2000123e:       \-------> f0001517              auipc   a0,0xf0001
20001242:                 e3a50513              addi    a0,a0,-454 # 10002078 <ottf_console_uart>
20001246:                 7f8010ef              jal     ra,20002a3e <base_uart_stdout>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:168

  // Initialize/Configure console flow control (if requested).
  if (kOttfTestConfig.enable_uart_flow_control) {
2000124a:                 00003517              auipc   a0,0x3
2000124e:                 3c654503              lbu     a0,966(a0) # 20004610 <kOttfTestConfig+0x10>
20001252:             /-- c111                  beqz    a0,20001256 <ottf_console_configure_uart+0x1c8>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:169
    ottf_console_flow_control_enable();
20001254:             |   29dd                  jal     2000174a <ottf_console_flow_control_enable>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:171
  }
}
20001256:             \-> 50b2                  lw      ra,44(sp)
20001258:                 5422                  lw      s0,40(sp)
2000125a:                 5492                  lw      s1,36(sp)
2000125c:                 5902                  lw      s2,32(sp)
2000125e:                 6145                  addi    sp,sp,48
20001260:                 8082                  ret

20001262 <uart_getc>:
uart_getc():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:72
static status_t uart_getc(void *io) {
20001262:                 1101                  addi    sp,sp,-32
20001264:                 ce06                  sw      ra,28(sp)
20001266:                 cc22                  sw      s0,24(sp)
20001268:                 ca26                  sw      s1,20(sp)
2000126a:                 84aa                  mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:75
  TRY(dif_uart_byte_receive_polled(uart, &byte));
2000126c:                 01310593              addi    a1,sp,19
20001270:                 66e020ef              jal     ra,200038de <dif_uart_byte_receive_polled>
20001274:                 c62a                  sw      a0,12(sp)
20001276:                 0028                  addi    a0,sp,8
20001278:                 006c                  addi    a1,sp,12
2000127a:                 4611                  li      a2,4
2000127c:                 615020ef              jal     ra,20004090 <memcpy>
20001280:                 4522                  lw      a0,8(sp)
20001282:                 00153593              seqz    a1,a0
20001286:                 15fd                  addi    a1,a1,-1
20001288:                 04b5f693              andi    a3,a1,75
2000128c:                 00004597              auipc   a1,0x4
20001290:                 80c58613              addi    a2,a1,-2036 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
20001294:                 0e8f05b7              lui     a1,0xe8f0
20001298:                 785010ef              jal     ra,2000321c <status_create>
2000129c:             /-- 02054563              bltz    a0,200012c6 <uart_getc+0x64>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:76
  TRY(ottf_console_flow_control(uart, kOttfConsoleFlowControlAuto));
200012a0:             |   4585                  li      a1,1
200012a2:             |   8526                  mv      a0,s1
200012a4:             |   6da000ef              jal     ra,2000197e <ottf_console_flow_control>
200012a8:          /--|-- 02054a63              bltz    a0,200012dc <uart_getc+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:77
  return OK_STATUS(byte);
200012ac:          |  |   01314683              lbu     a3,19(sp)
200012b0:          |  |   00003517              auipc   a0,0x3
200012b4:          |  |   7e850613              addi    a2,a0,2024 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
200012b8:          |  |   0e8f05b7              lui     a1,0xe8f0
200012bc:          |  |   4501                  li      a0,0
200012be:          |  |   75f010ef              jal     ra,2000321c <status_create>
200012c2:          |  |   842a                  mv      s0,a0
200012c4:       /--|--|-- a815                  j       200012f8 <uart_getc+0x96>
200012c6:       |  |  \-> 842a                  mv      s0,a0
200012c8:       |  |      897d                  andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:75
  TRY(dif_uart_byte_receive_polled(uart, &byte));
200012ca:       |  |      00003597              auipc   a1,0x3
200012ce:       |  |      7ce58613              addi    a2,a1,1998 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
200012d2:       |  |      0e8f05b7              lui     a1,0xe8f0
200012d6:       |  |      04b00693              li      a3,75
200012da:       |  |  /-- a819                  j       200012f0 <uart_getc+0x8e>
200012dc:       |  \--|-> 842a                  mv      s0,a0
200012de:       |     |   897d                  andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:76
  TRY(ottf_console_flow_control(uart, kOttfConsoleFlowControlAuto));
200012e0:       |     |   00003597              auipc   a1,0x3
200012e4:       |     |   7b858613              addi    a2,a1,1976 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
200012e8:       |     |   0e8f05b7              lui     a1,0xe8f0
200012ec:       |     |   04c00693              li      a3,76
200012f0:       |     \-> 72d010ef              jal     ra,2000321c <status_create>
200012f4:       |         80fff0ef              jal     ra,20000b02 <status_report>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:78
}
200012f8:       \-------> 8522                  mv      a0,s0
200012fa:                 40f2                  lw      ra,28(sp)
200012fc:                 4462                  lw      s0,24(sp)
200012fe:                 44d2                  lw      s1,20(sp)
20001300:                 6105                  addi    sp,sp,32
20001302:                 8082                  ret

20001304 <ottf_console_configure_spi_device>:
ottf_console_configure_spi_device():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:173

void ottf_console_configure_spi_device(uintptr_t base_addr) {
20001304:                    714d                       addi    sp,sp,-336
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:174
  CHECK_DIF_OK(dif_spi_device_init_handle(mmio_region_from_addr(base_addr),
20001306:                    14112623           sw      ra,332(sp)
2000130a:                    14812423           sw      s0,328(sp)
2000130e:                    14912223           sw      s1,324(sp)
20001312:                    15212023           sw      s2,320(sp)
20001316:                    13312e23           sw      s3,316(sp)
2000131a:                    13412c23           sw      s4,312(sp)
2000131e:                    13512a23           sw      s5,308(sp)
20001322:                    13612823           sw      s6,304(sp)
20001326:                    13712623           sw      s7,300(sp)
2000132a:                    13812423           sw      s8,296(sp)
2000132e:                    f0001597           auipc   a1,0xf0001
20001332:                    e0258593           addi    a1,a1,-510 # 10002130 <ottf_console_spi_device>
20001336:                    072020ef           jal     ra,200033a8 <dif_spi_device_init_handle>
2000133a:                    862a                       mv      a2,a0
2000133c:                    00005417           auipc   s0,0x5
20001340:                    e000f517           auipc   a0,0xe000f
20001344:                    cc050a93           addi    s5,a0,-832 # 10000 <_chip_info_end>
20001348:          /-------- c61d                       beqz    a2,20001376 <ottf_console_configure_spi_device+0x72>
2000134a:          |         f8842503           lw      a0,-120(s0) # 200062c4 <kDeviceLogBypassUartAddress>
2000134e:          |     /-- c901                       beqz    a0,2000135e <ottf_console_configure_spi_device+0x5a>
20001350:          |     |   20c00513           li      a0,524
20001354:          |     |   9556                       add     a0,a0,s5
20001356:          |     |   4585                       li      a1,1
20001358:          |     |   4a8010ef           jal     ra,20002800 <base_log_internal_dv>
2000135c:          |  /--|-- a801                       j       2000136c <ottf_console_configure_spi_device+0x68>
2000135e:          |  |  \-> 00004517           auipc   a0,0x4
20001362:          |  |      34250513           addi    a0,a0,834 # 200056a0 <ottf_console_configure_spi_device.log_fields>
20001366:          |  |      85b2                       mv      a1,a2
20001368:          |  |      3fc010ef           jal     ra,20002764 <base_log_internal_core>
2000136c:          |  \----> 6531                       lui     a0,0xc
2000136e:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001372:          |         2a8010ef           jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:176
                                          &ottf_console_spi_device));
  CHECK_DIF_OK(dif_spi_device_configure(
20001376:          \-------> c802                       sw      zero,16(sp)
20001378:                    ca02                       sw      zero,20(sp)
2000137a:                    4505                       li      a0,1
2000137c:                    cc2a                       sw      a0,24(sp)
2000137e:                    f0001517           auipc   a0,0xf0001
20001382:                    db250513           addi    a0,a0,-590 # 10002130 <ottf_console_spi_device>
20001386:                    080c                       addi    a1,sp,16
20001388:                    028020ef           jal     ra,200033b0 <dif_spi_device_configure>
2000138c:                    f8842b03           lw      s6,-120(s0)
20001390:          /-------- c51d                       beqz    a0,200013be <ottf_console_configure_spi_device+0xba>
20001392:          |         862a                       mv      a2,a0
20001394:          |  /----- 000b0963           beqz    s6,200013a6 <ottf_console_configure_spi_device+0xa2>
20001398:          |  |      22000513           li      a0,544
2000139c:          |  |      9556                       add     a0,a0,s5
2000139e:          |  |      4585                       li      a1,1
200013a0:          |  |      460010ef           jal     ra,20002800 <base_log_internal_dv>
200013a4:          |  |  /-- a801                       j       200013b4 <ottf_console_configure_spi_device+0xb0>
200013a6:          |  \--|-> 00004517           auipc   a0,0x4
200013aa:          |     |   30e50513           addi    a0,a0,782 # 200056b4 <ottf_console_configure_spi_device.log_fields.20>
200013ae:          |     |   85b2                       mv      a1,a2
200013b0:          |     |   3b4010ef           jal     ra,20002764 <base_log_internal_core>
200013b4:          |     \-> 6531                       lui     a0,0xc
200013b6:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200013ba:          |         260010ef           jal     ra,2000261a <test_status_set>
200013be:          \-------> 4481                       li      s1,0
200013c0:                    00004517           auipc   a0,0x4
200013c4:                    30850413           addi    s0,a0,776 # 200056c8 <ottf_console_configure_spi_device.log_fields.20+0x14>
200013c8:                    f0001517           auipc   a0,0xf0001
200013cc:                    d6850b93           addi    s7,a0,-664 # 10002130 <ottf_console_spi_device>
200013d0:                    4c19                       li      s8,6
200013d2:                    00004517           auipc   a0,0x4
200013d6:                    39e50913           addi    s2,a0,926 # 20005770 <ottf_console_configure_spi_device.log_fields.23>
200013da:                    6531                       lui     a0,0xc
200013dc:                    aad50993           addi    s3,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200013e0:                    23400a13           li      s4,564
200013e4:                    9a56                       add     s4,s4,s5
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:235
          .payload_dir_to_host = true,
      },
  };
  for (size_t i = 0; i < ARRAYSIZE(read_commands); ++i) {
    uint8_t slot = (uint8_t)i + kSpiDeviceReadCommandSlotBase;
    CHECK_DIF_OK(dif_spi_device_set_flash_command_slot(
200013e6:       /----------> 0808                       addi    a0,sp,16
200013e8:       |            4671                       li      a2,28
200013ea:       |            85a2                       mv      a1,s0
200013ec:       |            4a5020ef           jal     ra,20004090 <memcpy>
200013f0:       |            0ff4f593           andi    a1,s1,255
200013f4:       |            4605                       li      a2,1
200013f6:       |            0814                       addi    a3,sp,16
200013f8:       |            855e                       mv      a0,s7
200013fa:       |            034020ef           jal     ra,2000342e <dif_spi_device_set_flash_command_slot>
200013fe:       |  /-------- c105                       beqz    a0,2000141e <ottf_console_configure_spi_device+0x11a>
20001400:       |  |         862a                       mv      a2,a0
20001402:       |  |  /----- 000b0763           beqz    s6,20001410 <ottf_console_configure_spi_device+0x10c>
20001406:       |  |  |      4585                       li      a1,1
20001408:       |  |  |      8552                       mv      a0,s4
2000140a:       |  |  |      3f6010ef           jal     ra,20002800 <base_log_internal_dv>
2000140e:       |  |  |  /-- a029                       j       20001418 <ottf_console_configure_spi_device+0x114>
20001410:       |  |  \--|-> 854a                       mv      a0,s2
20001412:       |  |     |   85b2                       mv      a1,a2
20001414:       |  |     |   350010ef           jal     ra,20002764 <base_log_internal_core>
20001418:       |  |     \-> 854e                       mv      a0,s3
2000141a:       |  |         200010ef           jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:233
  for (size_t i = 0; i < ARRAYSIZE(read_commands); ++i) {
2000141e:       |  \-------> 0485                       addi    s1,s1,1
20001420:       |            0471                       addi    s0,s0,28
20001422:       \----------- fd8492e3           bne     s1,s8,200013e6 <ottf_console_configure_spi_device+0xe2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:251
          .set_busy_status = true,
      },
  };
  for (size_t i = 0; i < ARRAYSIZE(write_commands); ++i) {
    uint8_t slot = (uint8_t)i + kSpiDeviceWriteCommandSlotBase;
    CHECK_DIF_OK(dif_spi_device_set_flash_command_slot(
20001426:                    00004517           auipc   a0,0x4
2000142a:                    35e50593           addi    a1,a0,862 # 20005784 <ottf_console_configure_spi_device.log_fields.23+0x14>
2000142e:                    0808                       addi    a0,sp,16
20001430:                    4671                       li      a2,28
20001432:                    45f020ef           jal     ra,20004090 <memcpy>
20001436:                    f0001517           auipc   a0,0xf0001
2000143a:                    cfa50513           addi    a0,a0,-774 # 10002130 <ottf_console_spi_device>
2000143e:                    45ad                       li      a1,11
20001440:                    4605                       li      a2,1
20001442:                    0814                       addi    a3,sp,16
20001444:                    7eb010ef           jal     ra,2000342e <dif_spi_device_set_flash_command_slot>
20001448:          /-------- c51d                       beqz    a0,20001476 <ottf_console_configure_spi_device+0x172>
2000144a:          |         862a                       mv      a2,a0
2000144c:          |  /----- 000b0963           beqz    s6,2000145e <ottf_console_configure_spi_device+0x15a>
20001450:          |  |      24800513           li      a0,584
20001454:          |  |      9556                       add     a0,a0,s5
20001456:          |  |      4585                       li      a1,1
20001458:          |  |      3a8010ef           jal     ra,20002800 <base_log_internal_dv>
2000145c:          |  |  /-- a801                       j       2000146c <ottf_console_configure_spi_device+0x168>
2000145e:          |  \--|-> 00004517           auipc   a0,0x4
20001462:          |     |   34250513           addi    a0,a0,834 # 200057a0 <ottf_console_configure_spi_device.log_fields.26>
20001466:          |     |   85b2                       mv      a1,a2
20001468:          |     |   2fc010ef           jal     ra,20002764 <base_log_internal_core>
2000146c:          |     \-> 6531                       lui     a0,0xc
2000146e:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001472:          |         1a8010ef           jal     ra,2000261a <test_status_set>
20001476:          \-------> 4401                       li      s0,0
20001478:                    cafeb537           lui     a0,0xcafeb
2000147c:                    0509                       addi    a0,a0,2
spi_device_wait_for_sync():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:102
  const uint8_t kBootMagicPattern[4] = {0x02, 0xb0, 0xfe, 0xca};
2000147e:                    12a12223           sw      a0,292(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:103
  const uint8_t kEmptyPattern[4] = {0};
20001482:                    12012023           sw      zero,288(sp)
20001486:                    f0001517           auipc   a0,0xf0001
2000148a:                    caa50493           addi    s1,a0,-854 # 10002130 <ottf_console_spi_device>
2000148e:                    28b01b93           bseti   s7,zero,0xb
20001492:                    00004517           auipc   a0,0x4
20001496:                    41250913           addi    s2,a0,1042 # 200058a4 <spi_device_wait_for_sync.log_fields>
2000149a:                    6531                       lui     a0,0xc
2000149c:                    aad50993           addi    s3,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200014a0:                    39c00a13           li      s4,924
200014a4:                    9a56                       add     s4,s4,s5
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:106
    CHECK_DIF_OK(dif_spi_device_write_flash_buffer(
200014a6:       /----------> 4691                       li      a3,4
200014a8:       |            1258                       addi    a4,sp,292
200014aa:       |            8526                       mv      a0,s1
200014ac:       |            4581                       li      a1,0
200014ae:       |            8622                       mv      a2,s0
200014b0:       |            17c020ef           jal     ra,2000362c <dif_spi_device_write_flash_buffer>
200014b4:       |  /-------- c105                       beqz    a0,200014d4 <ottf_console_configure_spi_device+0x1d0>
200014b6:       |  |         862a                       mv      a2,a0
200014b8:       |  |  /----- 000b0763           beqz    s6,200014c6 <ottf_console_configure_spi_device+0x1c2>
200014bc:       |  |  |      4585                       li      a1,1
200014be:       |  |  |      8552                       mv      a0,s4
200014c0:       |  |  |      340010ef           jal     ra,20002800 <base_log_internal_dv>
200014c4:       |  |  |  /-- a029                       j       200014ce <ottf_console_configure_spi_device+0x1ca>
200014c6:       |  |  \--|-> 854a                       mv      a0,s2
200014c8:       |  |     |   85b2                       mv      a1,a2
200014ca:       |  |     |   29a010ef           jal     ra,20002764 <base_log_internal_core>
200014ce:       |  |     \-> 854e                       mv      a0,s3
200014d0:       |  |         14a010ef           jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:105
  for (size_t i = 0; i < SPI_DEVICE_PARAM_SRAM_READ_BUFFER_DEPTH; i++) {
200014d4:       |  \-------> 0411                       addi    s0,s0,4
200014d6:       \----------- fd7418e3           bne     s0,s7,200014a6 <ottf_console_configure_spi_device+0x1a2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:112
  upload_info_t info = {0};
200014da:                    0808                       addi    a0,sp,16
200014dc:                    11000613           li      a2,272
200014e0:                    4581                       li      a1,0
200014e2:                    431020ef           jal     ra,20004112 <memset>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:113
  CHECK_STATUS_OK(spi_device_testutils_wait_for_upload(spi_device, &info));
200014e6:                    f0001517           auipc   a0,0xf0001
200014ea:                    c4a50513           addi    a0,a0,-950 # 10002130 <ottf_console_spi_device>
200014ee:                    080c                       addi    a1,sp,16
200014f0:                    023000ef           jal     ra,20001d12 <spi_device_testutils_wait_for_upload>
200014f4:       /----------- 06055063           bgez    a0,20001554 <ottf_console_configure_spi_device+0x250>
200014f8:       |  /-------- 020b0b63           beqz    s6,2000152e <ottf_console_configure_spi_device+0x22a>
200014fc:       |  |         00010523           sb      zero,10(sp)
20001500:       |  |         00011423           sh      zero,8(sp)
20001504:       |  |         006c                       addi    a1,sp,12
20001506:       |  |         0050                       addi    a2,sp,4
20001508:       |  |         0034                       addi    a3,sp,8
2000150a:       |  |         5dd010ef           jal     ra,200032e6 <status_extract>
2000150e:       |  |  /----- c905                       beqz    a0,2000153e <ottf_console_configure_spi_device+0x23a>
20001510:       |  |  |      00814603           lbu     a2,8(sp)
20001514:       |  |  |      00914683           lbu     a3,9(sp)
20001518:       |  |  |      00a14703           lbu     a4,10(sp)
2000151c:       |  |  |      4792                       lw      a5,4(sp)
2000151e:       |  |  |      4832                       lw      a6,12(sp)
20001520:       |  |  |      3b000513           li      a0,944
20001524:       |  |  |      9556                       add     a0,a0,s5
20001526:       |  |  |      4595                       li      a1,5
20001528:       |  |  |      2d8010ef           jal     ra,20002800 <base_log_internal_dv>
2000152c:       |  |  |  /-- a839                       j       2000154a <ottf_console_configure_spi_device+0x246>
2000152e:       |  \--|--|-> 85aa                       mv      a1,a0
20001530:       |     |  |   00004517           auipc   a0,0x4
20001534:       |     |  |   38850513           addi    a0,a0,904 # 200058b8 <spi_device_wait_for_sync.log_fields.74>
20001538:       |     |  |   22c010ef           jal     ra,20002764 <base_log_internal_core>
2000153c:       |     |  +-- a039                       j       2000154a <ottf_console_configure_spi_device+0x246>
2000153e:       |     \--|-> 3c400513           li      a0,964
20001542:       |        |   9556                       add     a0,a0,s5
20001544:       |        |   4585                       li      a1,1
20001546:       |        |   2ba010ef           jal     ra,20002800 <base_log_internal_dv>
2000154a:       |        \-> 6531                       lui     a0,0xc
2000154c:       |            aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001550:       |            0ca010ef           jal     ra,2000261a <test_status_set>
20001554:       \----------> 4401                       li      s0,0
20001556:                    f0001517           auipc   a0,0xf0001
2000155a:                    bda50493           addi    s1,a0,-1062 # 10002130 <ottf_console_spi_device>
2000155e:                    00004517           auipc   a0,0x4
20001562:                    36e50913           addi    s2,a0,878 # 200058cc <spi_device_wait_for_sync.log_fields.77>
20001566:                    6531                       lui     a0,0xc
20001568:                    aad50993           addi    s3,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
2000156c:                    3d800a13           li      s4,984
20001570:                    9a56                       add     s4,s4,s5
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:116
    CHECK_DIF_OK(dif_spi_device_write_flash_buffer(
20001572:       /----------> 4691                       li      a3,4
20001574:       |            1218                       addi    a4,sp,288
20001576:       |            8526                       mv      a0,s1
20001578:       |            4581                       li      a1,0
2000157a:       |            8622                       mv      a2,s0
2000157c:       |            0b0020ef           jal     ra,2000362c <dif_spi_device_write_flash_buffer>
20001580:       |  /-------- c105                       beqz    a0,200015a0 <ottf_console_configure_spi_device+0x29c>
20001582:       |  |         862a                       mv      a2,a0
20001584:       |  |  /----- 000b0763           beqz    s6,20001592 <ottf_console_configure_spi_device+0x28e>
20001588:       |  |  |      4585                       li      a1,1
2000158a:       |  |  |      8552                       mv      a0,s4
2000158c:       |  |  |      274010ef           jal     ra,20002800 <base_log_internal_dv>
20001590:       |  |  |  /-- a029                       j       2000159a <ottf_console_configure_spi_device+0x296>
20001592:       |  |  \--|-> 854a                       mv      a0,s2
20001594:       |  |     |   85b2                       mv      a1,a2
20001596:       |  |     |   1ce010ef           jal     ra,20002764 <base_log_internal_core>
2000159a:       |  |     \-> 854e                       mv      a0,s3
2000159c:       |  |         07e010ef           jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:115
  for (size_t i = 0; i < SPI_DEVICE_PARAM_SRAM_READ_BUFFER_DEPTH; i++) {
200015a0:       |  \-------> 0411                       addi    s0,s0,4
200015a2:       \----------- fd7418e3           bne     s0,s7,20001572 <ottf_console_configure_spi_device+0x26e>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:120
  CHECK_DIF_OK(dif_spi_device_set_flash_status_registers(spi_device, 0x00));
200015a6:                    f0001517           auipc   a0,0xf0001
200015aa:                    b8a50513           addi    a0,a0,-1142 # 10002130 <ottf_console_spi_device>
200015ae:                    4581                       li      a1,0
200015b0:                    0ec020ef           jal     ra,2000369c <dif_spi_device_set_flash_status_registers>
200015b4:          /-------- c51d                       beqz    a0,200015e2 <ottf_console_configure_spi_device+0x2de>
200015b6:          |         862a                       mv      a2,a0
200015b8:          |  /----- 000b0963           beqz    s6,200015ca <ottf_console_configure_spi_device+0x2c6>
200015bc:          |  |      3ec00513           li      a0,1004
200015c0:          |  |      9556                       add     a0,a0,s5
200015c2:          |  |      4585                       li      a1,1
200015c4:          |  |      23c010ef           jal     ra,20002800 <base_log_internal_dv>
200015c8:          |  |  /-- a801                       j       200015d8 <ottf_console_configure_spi_device+0x2d4>
200015ca:          |  \--|-> 00004517           auipc   a0,0x4
200015ce:          |     |   31650513           addi    a0,a0,790 # 200058e0 <spi_device_wait_for_sync.log_fields.79>
200015d2:          |     |   85b2                       mv      a1,a2
200015d4:          |     |   190010ef           jal     ra,20002764 <base_log_internal_core>
200015d8:          |     \-> 6531                       lui     a0,0xc
200015da:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200015de:          |         03c010ef           jal     ra,2000261a <test_status_set>
ottf_console_configure_spi_device():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:255
        &ottf_console_spi_device, slot, kDifToggleEnabled, write_commands[i]));
  }
  spi_device_wait_for_sync(&ottf_console_spi_device);
  base_spi_device_stdout(&ottf_console_spi_device);
200015e2:          \-------> f0001517           auipc   a0,0xf0001
200015e6:                    b4e50513           addi    a0,a0,-1202 # 10002130 <ottf_console_spi_device>
200015ea:                    436010ef           jal     ra,20002a20 <base_spi_device_stdout>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:256
}
200015ee:                    14c12083           lw      ra,332(sp)
200015f2:                    14812403           lw      s0,328(sp)
200015f6:                    14412483           lw      s1,324(sp)
200015fa:                    14012903           lw      s2,320(sp)
200015fe:                    13c12983           lw      s3,316(sp)
20001602:                    13812a03           lw      s4,312(sp)
20001606:                    13412a83           lw      s5,308(sp)
2000160a:                    13012b03           lw      s6,304(sp)
2000160e:                    12c12b83           lw      s7,300(sp)
20001612:                    12812c03           lw      s8,296(sp)
20001616:                    6171                       addi    sp,sp,336
20001618:                    8082                       ret

2000161a <spi_device_getc>:
spi_device_getc():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:87
static status_t spi_device_getc(void *io) {
2000161a:                       1101                    addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:91
  if (index == info.data_len) {
2000161c:                       ce06                    sw      ra,28(sp)
2000161e:                       cc22                    sw      s0,24(sp)
20001620:                       ca26                    sw      s1,20(sp)
20001622:                       c84a                    sw      s2,16(sp)
20001624:                       c64e                    sw      s3,12(sp)
20001626:                       f0001417                auipc   s0,0xf0001
2000162a:                       a6642583                lw      a1,-1434(s0) # 1000208c <spi_device_getc.index>
2000162e:                       f0001617                auipc   a2,0xf0001
20001632:                       b1260993                addi    s3,a2,-1262 # 10002140 <spi_device_getc.info>
20001636:                       0049d603                lhu     a2,4(s3)
2000163a:       /-------------- 0ec59063                bne     a1,a2,2000171a <spi_device_getc+0x100>
2000163e:       |               892a                    mv      s2,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:92
    memset(&info, 0, sizeof(upload_info_t));
20001640:       |               f0001517                auipc   a0,0xf0001
20001644:       |               b0050493                addi    s1,a0,-1280 # 10002140 <spi_device_getc.info>
20001648:       |               11000613                li      a2,272
2000164c:       |               8526                    mv      a0,s1
2000164e:       |               4581                    li      a1,0
20001650:       |               2c3020ef                jal     ra,20004112 <memset>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:93
    CHECK_STATUS_OK(spi_device_testutils_wait_for_upload(spi_device, &info));
20001654:       |               854a                    mv      a0,s2
20001656:       |               85a6                    mv      a1,s1
20001658:       |               6ba000ef                jal     ra,20001d12 <spi_device_testutils_wait_for_upload>
2000165c:       |  /----------- 06055b63                bgez    a0,200016d2 <spi_device_getc+0xb8>
20001660:       |  |            85aa                    mv      a1,a0
20001662:       |  |            00005517                auipc   a0,0x5
20001666:       |  |            c6252503                lw      a0,-926(a0) # 200062c4 <kDeviceLogBypassUartAddress>
2000166a:       |  |  /-------- cd15                    beqz    a0,200016a6 <spi_device_getc+0x8c>
2000166c:       |  |  |         00010323                sb      zero,6(sp)
20001670:       |  |  |         00011223                sh      zero,4(sp)
20001674:       |  |  |         002c                    addi    a1,sp,8
20001676:       |  |  |         860a                    mv      a2,sp
20001678:       |  |  |         0054                    addi    a3,sp,4
2000167a:       |  |  |         46d010ef                jal     ra,200032e6 <status_extract>
2000167e:       |  |  |  /----- c91d                    beqz    a0,200016b4 <spi_device_getc+0x9a>
20001680:       |  |  |  |      00414603                lbu     a2,4(sp)
20001684:       |  |  |  |      00514683                lbu     a3,5(sp)
20001688:       |  |  |  |      00614703                lbu     a4,6(sp)
2000168c:       |  |  |  |      4782                    lw      a5,0(sp)
2000168e:       |  |  |  |      4822                    lw      a6,8(sp)
20001690:       |  |  |  |      e000f517                auipc   a0,0xe000f
20001694:       |  |  |  |      97050513                addi    a0,a0,-1680 # 10000 <_chip_info_end>
20001698:       |  |  |  |      36000593                li      a1,864
2000169c:       |  |  |  |      952e                    add     a0,a0,a1
2000169e:       |  |  |  |      4595                    li      a1,5
200016a0:       |  |  |  |      160010ef                jal     ra,20002800 <base_log_internal_dv>
200016a4:       |  |  |  |  /-- a015                    j       200016c8 <spi_device_getc+0xae>
200016a6:       |  |  \--|--|-> 00004517                auipc   a0,0x4
200016aa:       |  |     |  |   1d650513                addi    a0,a0,470 # 2000587c <spi_device_getc.log_fields.64>
200016ae:       |  |     |  |   0b6010ef                jal     ra,20002764 <base_log_internal_core>
200016b2:       |  |     |  +-- a819                    j       200016c8 <spi_device_getc+0xae>
200016b4:       |  |     \--|-> e000f517                auipc   a0,0xe000f
200016b8:       |  |        |   94c50513                addi    a0,a0,-1716 # 10000 <_chip_info_end>
200016bc:       |  |        |   37400593                li      a1,884
200016c0:       |  |        |   952e                    add     a0,a0,a1
200016c2:       |  |        |   4585                    li      a1,1
200016c4:       |  |        |   13c010ef                jal     ra,20002800 <base_log_internal_dv>
200016c8:       |  |        \-> 6531                    lui     a0,0xc
200016ca:       |  |            aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200016ce:       |  |            74d000ef                jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:94
    index = 0;
200016d2:       |  \----------> a6042323                sw      zero,-1434(s0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:95
    CHECK_DIF_OK(dif_spi_device_set_flash_status_registers(spi_device, 0x00));
200016d6:       |               854a                    mv      a0,s2
200016d8:       |               4581                    li      a1,0
200016da:       |               7c3010ef                jal     ra,2000369c <dif_spi_device_set_flash_status_registers>
200016de:       +-------------- cd15                    beqz    a0,2000171a <spi_device_getc+0x100>
200016e0:       |               862a                    mv      a2,a0
200016e2:       |               00005517                auipc   a0,0x5
200016e6:       |               be252503                lw      a0,-1054(a0) # 200062c4 <kDeviceLogBypassUartAddress>
200016ea:       |        /----- cd01                    beqz    a0,20001702 <spi_device_getc+0xe8>
200016ec:       |        |      e000f517                auipc   a0,0xe000f
200016f0:       |        |      91450513                addi    a0,a0,-1772 # 10000 <_chip_info_end>
200016f4:       |        |      38800593                li      a1,904
200016f8:       |        |      952e                    add     a0,a0,a1
200016fa:       |        |      4585                    li      a1,1
200016fc:       |        |      104010ef                jal     ra,20002800 <base_log_internal_dv>
20001700:       |        |  /-- a801                    j       20001710 <spi_device_getc+0xf6>
20001702:       |        \--|-> 00004517                auipc   a0,0x4
20001706:       |           |   18e50513                addi    a0,a0,398 # 20005890 <spi_device_getc.log_fields.67>
2000170a:       |           |   85b2                    mv      a1,a2
2000170c:       |           |   058010ef                jal     ra,20002764 <base_log_internal_core>
20001710:       |           \-> 6531                    lui     a0,0xc
20001712:       |               aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001716:       |               705000ef                jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:98
  return OK_STATUS(info.data[index++]);
2000171a:       \-------------> a6642503                lw      a0,-1434(s0)
2000171e:                       99aa                    add     s3,s3,a0
20001720:                       0109c683                lbu     a3,16(s3)
20001724:                       0505                    addi    a0,a0,1
20001726:                       a6a42323                sw      a0,-1434(s0)
2000172a:                       00003517                auipc   a0,0x3
2000172e:                       36e50613                addi    a2,a0,878 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
20001732:                       0e8f05b7                lui     a1,0xe8f0
20001736:                       4501                    li      a0,0
20001738:                       2e5010ef                jal     ra,2000321c <status_create>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:99
}
2000173c:                       40f2                    lw      ra,28(sp)
2000173e:                       4462                    lw      s0,24(sp)
20001740:                       44d2                    lw      s1,20(sp)
20001742:                       4942                    lw      s2,16(sp)
20001744:                       49b2                    lw      s3,12(sp)
20001746:                       6105                    addi    sp,sp,32
20001748:                       8082                    ret

2000174a <ottf_console_flow_control_enable>:
ottf_console_flow_control_enable():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:274
    default:
      return kTopEarlgreyPlicIrqIdUart0RxWatermark;
  }
}

void ottf_console_flow_control_enable(void) {
2000174a:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:275
  CHECK_DIF_OK(dif_rv_plic_init(
2000174c:                 ce06                  sw      ra,28(sp)
2000174e:                 cc22                  sw      s0,24(sp)
20001750:                 ca26                  sw      s1,20(sp)
20001752:                 c84a                  sw      s2,16(sp)
20001754:                 c64e                  sw      s3,12(sp)
20001756:                 f0001517              auipc   a0,0xf0001
2000175a:                 93e50593              addi    a1,a0,-1730 # 10002094 <ottf_plic>
2000175e:                 48000537              lui     a0,0x48000
20001762:                 4ef000ef              jal     ra,20002450 <dif_rv_plic_init>
20001766:                 00005497              auipc   s1,0x5
2000176a:       /-------- cd05                  beqz    a0,200017a2 <ottf_console_flow_control_enable+0x58>
2000176c:       |         862a                  mv      a2,a0
2000176e:       |         b5e4a503              lw      a0,-1186(s1) # 200062c4 <kDeviceLogBypassUartAddress>
20001772:       |  /----- cd01                  beqz    a0,2000178a <ottf_console_flow_control_enable+0x40>
20001774:       |  |      e000f517              auipc   a0,0xe000f
20001778:       |  |      88c50513              addi    a0,a0,-1908 # 10000 <_chip_info_end>
2000177c:       |  |      25c00593              li      a1,604
20001780:       |  |      952e                  add     a0,a0,a1
20001782:       |  |      4585                  li      a1,1
20001784:       |  |      07c010ef              jal     ra,20002800 <base_log_internal_dv>
20001788:       |  |  /-- a801                  j       20001798 <ottf_console_flow_control_enable+0x4e>
2000178a:       |  \--|-> 00004517              auipc   a0,0x4
2000178e:       |     |   02a50513              addi    a0,a0,42 # 200057b4 <ottf_console_flow_control_enable.log_fields>
20001792:       |     |   85b2                  mv      a1,a2
20001794:       |     |   7d1000ef              jal     ra,20002764 <base_log_internal_core>
20001798:       |     \-> 6531                  lui     a0,0xc
2000179a:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
2000179e:       |         67d000ef              jal     ra,2000261a <test_status_set>
ottf_console_get():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:64
  switch (kOttfTestConfig.console.type) {
200017a2:       \-------> 00003517              auipc   a0,0x3
200017a6:                 e5e50413              addi    s0,a0,-418 # 20004600 <kOttfTestConfig>
200017aa:                 4048                  lw      a0,4(s0)
200017ac:                 4585                  li      a1,1
200017ae:          /----- 00b50763              beq     a0,a1,200017bc <ottf_console_flow_control_enable+0x72>
200017b2:          |      f0001517              auipc   a0,0xf0001
200017b6:          |      8c650913              addi    s2,a0,-1850 # 10002078 <ottf_console_uart>
200017ba:          |  /-- a029                  j       200017c4 <ottf_console_flow_control_enable+0x7a>
200017bc:          \--|-> f0001517              auipc   a0,0xf0001
200017c0:             |   97450913              addi    s2,a0,-1676 # 10002130 <ottf_console_spi_device>
ottf_console_flow_control_enable():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:279
      mmio_region_from_addr(TOP_EARLGREY_RV_PLIC_BASE_ADDR), &ottf_plic));

  dif_uart_t *uart = (dif_uart_t *)ottf_console_get();
  CHECK_DIF_OK(dif_uart_watermark_rx_set(uart, kFlowControlRxWatermark));
200017c4:             \-> 458d                  li      a1,3
200017c6:                 854a                  mv      a0,s2
200017c8:                 096020ef              jal     ra,2000385e <dif_uart_watermark_rx_set>
200017cc:       /-------- cd05                  beqz    a0,20001804 <ottf_console_flow_control_enable+0xba>
200017ce:       |         862a                  mv      a2,a0
200017d0:       |         b5e4a503              lw      a0,-1186(s1)
200017d4:       |  /----- cd01                  beqz    a0,200017ec <ottf_console_flow_control_enable+0xa2>
200017d6:       |  |      e000f517              auipc   a0,0xe000f
200017da:       |  |      82a50513              addi    a0,a0,-2006 # 10000 <_chip_info_end>
200017de:       |  |      27000593              li      a1,624
200017e2:       |  |      952e                  add     a0,a0,a1
200017e4:       |  |      4585                  li      a1,1
200017e6:       |  |      01a010ef              jal     ra,20002800 <base_log_internal_dv>
200017ea:       |  |  /-- a801                  j       200017fa <ottf_console_flow_control_enable+0xb0>
200017ec:       |  \--|-> 00004517              auipc   a0,0x4
200017f0:       |     |   fdc50513              addi    a0,a0,-36 # 200057c8 <ottf_console_flow_control_enable.log_fields.30>
200017f4:       |     |   85b2                  mv      a1,a2
200017f6:       |     |   76f000ef              jal     ra,20002764 <base_log_internal_core>
200017fa:       |     \-> 6531                  lui     a0,0xc
200017fc:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001800:       |         61b000ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:280
  CHECK_DIF_OK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
20001804:       \-------> 4585                  li      a1,1
20001806:                 4605                  li      a2,1
20001808:                 854a                  mv      a0,s2
2000180a:                 70f010ef              jal     ra,20003718 <dif_uart_irq_set_enabled>
2000180e:       /-------- cd05                  beqz    a0,20001846 <ottf_console_flow_control_enable+0xfc>
20001810:       |         862a                  mv      a2,a0
20001812:       |         b5e4a503              lw      a0,-1186(s1)
20001816:       |  /----- cd01                  beqz    a0,2000182e <ottf_console_flow_control_enable+0xe4>
20001818:       |  |      e000e517              auipc   a0,0xe000e
2000181c:       |  |      7e850513              addi    a0,a0,2024 # 10000 <_chip_info_end>
20001820:       |  |      28400593              li      a1,644
20001824:       |  |      952e                  add     a0,a0,a1
20001826:       |  |      4585                  li      a1,1
20001828:       |  |      7d9000ef              jal     ra,20002800 <base_log_internal_dv>
2000182c:       |  |  /-- a801                  j       2000183c <ottf_console_flow_control_enable+0xf2>
2000182e:       |  \--|-> 00004517              auipc   a0,0x4
20001832:       |     |   fae50513              addi    a0,a0,-82 # 200057dc <ottf_console_flow_control_enable.log_fields.33>
20001836:       |     |   85b2                  mv      a1,a2
20001838:       |     |   72d000ef              jal     ra,20002764 <base_log_internal_core>
2000183c:       |     \-> 6531                  lui     a0,0xc
2000183e:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001842:       |         5d9000ef              jal     ra,2000261a <test_status_set>
get_flow_control_watermark_plic_id():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:259
  switch (kOttfTestConfig.console.base_addr) {
20001846:       \-------> 4408                  lw      a0,8(s0)
20001848:                 c00005b7              lui     a1,0xc0000
2000184c:                 95aa                  add     a1,a1,a0
2000184e:                 81c1                  srli    a1,a1,0x10
20001850:                 0542                  slli    a0,a0,0x10
20001852:                 8d4d                  or      a0,a0,a1
20001854:                 fff50413              addi    s0,a0,-1
20001858:                 450d                  li      a0,3
2000185a:                 208469b3              sh3add  s3,s0,s0
2000185e:          /----- 00a46463              bltu    s0,a0,20001866 <ottf_console_flow_control_enable+0x11c>
20001862:          |      4589                  li      a1,2
20001864:          |  /-- a019                  j       2000186a <ottf_console_flow_control_enable+0x120>
20001866:          \--|-> 00b98593              addi    a1,s3,11
ottf_console_flow_control_enable():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:284
                                        kDifToggleEnabled));

  // Set IRQ priorities to MAX
  CHECK_DIF_OK(dif_rv_plic_irq_set_priority(
2000186a:             \-> 00004517              auipc   a0,0x4
2000186e:                 60252603              lw      a2,1538(a0) # 20005e6c <kDifRvPlicMaxPriority>
20001872:                 f0001517              auipc   a0,0xf0001
20001876:                 82250513              addi    a0,a0,-2014 # 10002094 <ottf_plic>
2000187a:                 42d000ef              jal     ra,200024a6 <dif_rv_plic_irq_set_priority>
2000187e:       /-------- cd05                  beqz    a0,200018b6 <ottf_console_flow_control_enable+0x16c>
20001880:       |         862a                  mv      a2,a0
20001882:       |         b5e4a503              lw      a0,-1186(s1)
20001886:       |  /----- cd01                  beqz    a0,2000189e <ottf_console_flow_control_enable+0x154>
20001888:       |  |      e000e517              auipc   a0,0xe000e
2000188c:       |  |      77850513              addi    a0,a0,1912 # 10000 <_chip_info_end>
20001890:       |  |      29800593              li      a1,664
20001894:       |  |      952e                  add     a0,a0,a1
20001896:       |  |      4585                  li      a1,1
20001898:       |  |      769000ef              jal     ra,20002800 <base_log_internal_dv>
2000189c:       |  |  /-- a801                  j       200018ac <ottf_console_flow_control_enable+0x162>
2000189e:       |  \--|-> 00004517              auipc   a0,0x4
200018a2:       |     |   f5250513              addi    a0,a0,-174 # 200057f0 <ottf_console_flow_control_enable.log_fields.36>
200018a6:       |     |   85b2                  mv      a1,a2
200018a8:       |     |   6bd000ef              jal     ra,20002764 <base_log_internal_core>
200018ac:       |     \-> 6531                  lui     a0,0xc
200018ae:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200018b2:       |         569000ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:287
      &ottf_plic, get_flow_control_watermark_plic_id(), kDifRvPlicMaxPriority));
  // Set Ibex IRQ priority threshold level
  CHECK_DIF_OK(dif_rv_plic_target_set_threshold(&ottf_plic, kPlicTarget,
200018b6:       \-------> 00004517              auipc   a0,0x4
200018ba:                 5b252603              lw      a2,1458(a0) # 20005e68 <kDifRvPlicMinPriority>
200018be:                 f0000517              auipc   a0,0xf0000
200018c2:                 7d650513              addi    a0,a0,2006 # 10002094 <ottf_plic>
200018c6:                 4581                  li      a1,0
200018c8:                 409000ef              jal     ra,200024d0 <dif_rv_plic_target_set_threshold>
200018cc:       /-------- cd05                  beqz    a0,20001904 <ottf_console_flow_control_enable+0x1ba>
200018ce:       |         862a                  mv      a2,a0
200018d0:       |         b5e4a503              lw      a0,-1186(s1)
200018d4:       |  /----- cd01                  beqz    a0,200018ec <ottf_console_flow_control_enable+0x1a2>
200018d6:       |  |      e000e517              auipc   a0,0xe000e
200018da:       |  |      72a50513              addi    a0,a0,1834 # 10000 <_chip_info_end>
200018de:       |  |      2ac00593              li      a1,684
200018e2:       |  |      952e                  add     a0,a0,a1
200018e4:       |  |      4585                  li      a1,1
200018e6:       |  |      71b000ef              jal     ra,20002800 <base_log_internal_dv>
200018ea:       |  |  /-- a801                  j       200018fa <ottf_console_flow_control_enable+0x1b0>
200018ec:       |  \--|-> 00004517              auipc   a0,0x4
200018f0:       |     |   f1850513              addi    a0,a0,-232 # 20005804 <ottf_console_flow_control_enable.log_fields.39>
200018f4:       |     |   85b2                  mv      a1,a2
200018f6:       |     |   66f000ef              jal     ra,20002764 <base_log_internal_core>
200018fa:       |     \-> 6531                  lui     a0,0xc
200018fc:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001900:       |         51b000ef              jal     ra,2000261a <test_status_set>
20001904:       \-------> 450d                  li      a0,3
get_flow_control_watermark_plic_id():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:259
  switch (kOttfTestConfig.console.base_addr) {
20001906:          /----- 00a46463              bltu    s0,a0,2000190e <ottf_console_flow_control_enable+0x1c4>
2000190a:          |      4589                  li      a1,2
2000190c:          |  /-- a019                  j       20001912 <ottf_console_flow_control_enable+0x1c8>
2000190e:          \--|-> 00b98593              addi    a1,s3,11
ottf_console_flow_control_enable():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:290
                                                kDifRvPlicMinPriority));
  // Enable IRQs in PLIC
  CHECK_DIF_OK(dif_rv_plic_irq_set_enabled(&ottf_plic,
20001912:             \-> f0000517              auipc   a0,0xf0000
20001916:                 78250513              addi    a0,a0,1922 # 10002094 <ottf_plic>
2000191a:                 4685                  li      a3,1
2000191c:                 4405                  li      s0,1
2000191e:                 4601                  li      a2,0
20001920:                 33f000ef              jal     ra,2000245e <dif_rv_plic_irq_set_enabled>
20001924:       /-------- cd05                  beqz    a0,2000195c <ottf_console_flow_control_enable+0x212>
20001926:       |         862a                  mv      a2,a0
20001928:       |         b5e4a503              lw      a0,-1186(s1)
2000192c:       |  /----- cd01                  beqz    a0,20001944 <ottf_console_flow_control_enable+0x1fa>
2000192e:       |  |      e000e517              auipc   a0,0xe000e
20001932:       |  |      6d250513              addi    a0,a0,1746 # 10000 <_chip_info_end>
20001936:       |  |      2c000593              li      a1,704
2000193a:       |  |      952e                  add     a0,a0,a1
2000193c:       |  |      4585                  li      a1,1
2000193e:       |  |      6c3000ef              jal     ra,20002800 <base_log_internal_dv>
20001942:       |  |  /-- a801                  j       20001952 <ottf_console_flow_control_enable+0x208>
20001944:       |  \--|-> 00004517              auipc   a0,0x4
20001948:       |     |   ed450513              addi    a0,a0,-300 # 20005818 <ottf_console_flow_control_enable.log_fields.42>
2000194c:       |     |   85b2                  mv      a1,a2
2000194e:       |     |   617000ef              jal     ra,20002764 <base_log_internal_core>
20001952:       |     \-> 6531                  lui     a0,0xc
20001954:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001958:       |         4c3000ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:294
                                           get_flow_control_watermark_plic_id(),
                                           kPlicTarget, kDifToggleEnabled));

  flow_control_state = kOttfConsoleFlowControlAuto;
2000195c:       \-------> f0000517              auipc   a0,0xf0000
20001960:                 72852423              sw      s0,1832(a0) # 10002084 <flow_control_state>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:295
  irq_global_ctrl(true);
20001964:                 4505                  li      a0,1
20001966:                 2eb1                  jal     20001cc2 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:296
  irq_external_ctrl(true);
20001968:                 4505                  li      a0,1
2000196a:                 26ad                  jal     20001cd4 <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:298
  // Make sure we're in the Resume state and we emit a Resume to the UART.
  ottf_console_flow_control((dif_uart_t *)ottf_console_get(),
2000196c:                 45c5                  li      a1,17
2000196e:                 854a                  mv      a0,s2
20001970:                 40f2                  lw      ra,28(sp)
20001972:                 4462                  lw      s0,24(sp)
20001974:                 44d2                  lw      s1,20(sp)
20001976:                 4942                  lw      s2,16(sp)
20001978:                 49b2                  lw      s3,12(sp)
2000197a:                 6105                  addi    sp,sp,32
2000197c:                 a009                  j       2000197e <ottf_console_flow_control>

2000197e <ottf_console_flow_control>:
ottf_console_flow_control():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:351
}

// The public API has to save and restore interrupts to avoid an
// unexpected write to the global `flow_control_state`.
status_t ottf_console_flow_control(const dif_uart_t *uart,
                                   ottf_console_flow_control_t ctrl) {
2000197e:                 1101                  addi    sp,sp,-32
20001980:                 ce06                  sw      ra,28(sp)
20001982:                 cc22                  sw      s0,24(sp)
20001984:                 ca26                  sw      s1,20(sp)
20001986:                 c84a                  sw      s2,16(sp)
20001988:                 84ae                  mv      s1,a1
2000198a:                 842a                  mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:353
  dif_uart_irq_enable_snapshot_t snapshot;
  CHECK_DIF_OK(dif_uart_irq_disable_all(uart, &snapshot));
2000198c:                 006c                  addi    a1,sp,12
2000198e:                 5b5010ef              jal     ra,20003742 <dif_uart_irq_disable_all>
20001992:                 00005917              auipc   s2,0x5
20001996:       /-------- cd05                  beqz    a0,200019ce <ottf_console_flow_control+0x50>
20001998:       |         862a                  mv      a2,a0
2000199a:       |         93292503              lw      a0,-1742(s2) # 200062c4 <kDeviceLogBypassUartAddress>
2000199e:       |  /----- cd01                  beqz    a0,200019b6 <ottf_console_flow_control+0x38>
200019a0:       |  |      e000e517              auipc   a0,0xe000e
200019a4:       |  |      66050513              addi    a0,a0,1632 # 10000 <_chip_info_end>
200019a8:       |  |      2fc00593              li      a1,764
200019ac:       |  |      952e                  add     a0,a0,a1
200019ae:       |  |      4585                  li      a1,1
200019b0:       |  |      651000ef              jal     ra,20002800 <base_log_internal_dv>
200019b4:       |  |  /-- a801                  j       200019c4 <ottf_console_flow_control+0x46>
200019b6:       |  \--|-> 00004517              auipc   a0,0x4
200019ba:       |     |   e9e50513              addi    a0,a0,-354 # 20005854 <ottf_console_flow_control.log_fields>
200019be:       |     |   85b2                  mv      a1,a2
200019c0:       |     |   5a5000ef              jal     ra,20002764 <base_log_internal_core>
200019c4:       |     \-> 6531                  lui     a0,0xc
200019c6:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200019ca:       |         451000ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:354
  status_t s = manage_flow_control(uart, ctrl);
200019ce:       \-------> 8522                  mv      a0,s0
200019d0:                 85a6                  mv      a1,s1
200019d2:                 223d                  jal     20001b00 <manage_flow_control>
200019d4:                 84aa                  mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:355
  CHECK_DIF_OK(dif_uart_irq_restore_all(uart, &snapshot));
200019d6:                 006c                  addi    a1,sp,12
200019d8:                 8522                  mv      a0,s0
200019da:                 581010ef              jal     ra,2000375a <dif_uart_irq_restore_all>
200019de:       /-------- cd05                  beqz    a0,20001a16 <ottf_console_flow_control+0x98>
200019e0:       |         862a                  mv      a2,a0
200019e2:       |         93292503              lw      a0,-1742(s2)
200019e6:       |  /----- cd01                  beqz    a0,200019fe <ottf_console_flow_control+0x80>
200019e8:       |  |      e000e517              auipc   a0,0xe000e
200019ec:       |  |      61850513              addi    a0,a0,1560 # 10000 <_chip_info_end>
200019f0:       |  |      31000593              li      a1,784
200019f4:       |  |      952e                  add     a0,a0,a1
200019f6:       |  |      4585                  li      a1,1
200019f8:       |  |      609000ef              jal     ra,20002800 <base_log_internal_dv>
200019fc:       |  |  /-- a801                  j       20001a0c <ottf_console_flow_control+0x8e>
200019fe:       |  \--|-> 00004517              auipc   a0,0x4
20001a02:       |     |   e6a50513              addi    a0,a0,-406 # 20005868 <ottf_console_flow_control.log_fields.50>
20001a06:       |     |   85b2                  mv      a1,a2
20001a08:       |     |   55d000ef              jal     ra,20002764 <base_log_internal_core>
20001a0c:       |     \-> 6531                  lui     a0,0xc
20001a0e:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001a12:       |         409000ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:357
  return s;
}
20001a16:       \-------> 8526                  mv      a0,s1
20001a18:                 40f2                  lw      ra,28(sp)
20001a1a:                 4462                  lw      s0,24(sp)
20001a1c:                 44d2                  lw      s1,20(sp)
20001a1e:                 4942                  lw      s2,16(sp)
20001a20:                 6105                  addi    sp,sp,32
20001a22:                 8082                  ret

20001a24 <ottf_console_flow_control_isr>:
ottf_console_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:335
bool ottf_console_flow_control_isr(uint32_t *exc_info) {
20001a24:                 1101                  addi    sp,sp,-32
ottf_console_get():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:64
  switch (kOttfTestConfig.console.type) {
20001a26:                 ce06                  sw      ra,28(sp)
20001a28:                 cc22                  sw      s0,24(sp)
20001a2a:                 ca26                  sw      s1,20(sp)
20001a2c:                 c84a                  sw      s2,16(sp)
20001a2e:                 00003517              auipc   a0,0x3
20001a32:                 bd652503              lw      a0,-1066(a0) # 20004604 <kOttfTestConfig+0x4>
20001a36:                 4585                  li      a1,1
20001a38:          /----- 00b50763              beq     a0,a1,20001a46 <ottf_console_flow_control_isr+0x22>
20001a3c:          |      f0000517              auipc   a0,0xf0000
20001a40:          |      63c50413              addi    s0,a0,1596 # 10002078 <ottf_console_uart>
20001a44:          |  /-- a029                  j       20001a4e <ottf_console_flow_control_isr+0x2a>
20001a46:          \--|-> f0000517              auipc   a0,0xf0000
20001a4a:             |   6ea50413              addi    s0,a0,1770 # 10002130 <ottf_console_spi_device>
ottf_console_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:337
  flow_control_irqs += 1;
20001a4e:             \-> f0000517              auipc   a0,0xf0000
20001a52:                 63a52583              lw      a1,1594(a0) # 10002088 <flow_control_irqs>
20001a56:                 0585                  addi    a1,a1,1
20001a58:                 62b52d23              sw      a1,1594(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:339
  CHECK_DIF_OK(dif_uart_irq_is_pending(uart, kDifUartIrqRxWatermark, &rx));
20001a5c:                 4585                  li      a1,1
20001a5e:                 00f10613              addi    a2,sp,15
20001a62:                 8522                  mv      a0,s0
20001a64:                 46f010ef              jal     ra,200036d2 <dif_uart_irq_is_pending>
20001a68:                 00005917              auipc   s2,0x5
20001a6c:       /-------- cd05                  beqz    a0,20001aa4 <ottf_console_flow_control_isr+0x80>
20001a6e:       |         862a                  mv      a2,a0
20001a70:       |         85c92503              lw      a0,-1956(s2) # 200062c4 <kDeviceLogBypassUartAddress>
20001a74:       |  /----- cd01                  beqz    a0,20001a8c <ottf_console_flow_control_isr+0x68>
20001a76:       |  |      e000e517              auipc   a0,0xe000e
20001a7a:       |  |      58a50513              addi    a0,a0,1418 # 10000 <_chip_info_end>
20001a7e:       |  |      2d400593              li      a1,724
20001a82:       |  |      952e                  add     a0,a0,a1
20001a84:       |  |      4585                  li      a1,1
20001a86:       |  |      57b000ef              jal     ra,20002800 <base_log_internal_dv>
20001a8a:       |  |  /-- a801                  j       20001a9a <ottf_console_flow_control_isr+0x76>
20001a8c:       |  \--|-> 00004517              auipc   a0,0x4
20001a90:       |     |   da050513              addi    a0,a0,-608 # 2000582c <ottf_console_flow_control_isr.log_fields>
20001a94:       |     |   85b2                  mv      a1,a2
20001a96:       |     |   4cf000ef              jal     ra,20002764 <base_log_internal_core>
20001a9a:       |     \-> 6531                  lui     a0,0xc
20001a9c:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001aa0:       |         37b000ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:340
  if (rx) {
20001aa4:       \-------> 00f14483              lbu     s1,15(sp)
20001aa8:       /-------- c4a1                  beqz    s1,20001af0 <ottf_console_flow_control_isr+0xcc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:341
    manage_flow_control(uart, kOttfConsoleFlowControlAuto);
20001aaa:       |         4585                  li      a1,1
20001aac:       |         8522                  mv      a0,s0
20001aae:       |         2889                  jal     20001b00 <manage_flow_control>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:342
    CHECK_DIF_OK(dif_uart_irq_acknowledge(uart, kDifUartIrqRxWatermark));
20001ab0:       |         4585                  li      a1,1
20001ab2:       |         8522                  mv      a0,s0
20001ab4:       |         449010ef              jal     ra,200036fc <dif_uart_irq_acknowledge>
20001ab8:       +-------- cd05                  beqz    a0,20001af0 <ottf_console_flow_control_isr+0xcc>
20001aba:       |         862a                  mv      a2,a0
20001abc:       |         85c92503              lw      a0,-1956(s2)
20001ac0:       |  /----- cd01                  beqz    a0,20001ad8 <ottf_console_flow_control_isr+0xb4>
20001ac2:       |  |      e000e517              auipc   a0,0xe000e
20001ac6:       |  |      53e50513              addi    a0,a0,1342 # 10000 <_chip_info_end>
20001aca:       |  |      2e800593              li      a1,744
20001ace:       |  |      952e                  add     a0,a0,a1
20001ad0:       |  |      4585                  li      a1,1
20001ad2:       |  |      52f000ef              jal     ra,20002800 <base_log_internal_dv>
20001ad6:       |  |  /-- a801                  j       20001ae6 <ottf_console_flow_control_isr+0xc2>
20001ad8:       |  \--|-> 00004517              auipc   a0,0x4
20001adc:       |     |   d6850513              addi    a0,a0,-664 # 20005840 <ottf_console_flow_control_isr.log_fields.46>
20001ae0:       |     |   85b2                  mv      a1,a2
20001ae2:       |     |   483000ef              jal     ra,20002764 <base_log_internal_core>
20001ae6:       |     \-> 6531                  lui     a0,0xc
20001ae8:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001aec:       |         32f000ef              jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:340
  if (rx) {
20001af0:       \-------> 00903533              snez    a0,s1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:346
}
20001af4:                 40f2                  lw      ra,28(sp)
20001af6:                 4462                  lw      s0,24(sp)
20001af8:                 44d2                  lw      s1,20(sp)
20001afa:                 4942                  lw      s2,16(sp)
20001afc:                 6105                  addi    sp,sp,32
20001afe:                 8082                  ret

20001b00 <manage_flow_control>:
manage_flow_control():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:304
                                    ottf_console_flow_control_t ctrl) {
20001b00:                                1101                   addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:305
  if (flow_control_state == kOttfConsoleFlowControlNone) {
20001b02:                                ce06                   sw      ra,28(sp)
20001b04:                                cc22                   sw      s0,24(sp)
20001b06:                                ca26                   sw      s1,20(sp)
20001b08:                                c84a                   sw      s2,16(sp)
20001b0a:                                f0000417               auipc   s0,0xf0000
20001b0e:                                57a42603               lw      a2,1402(s0) # 10002084 <flow_control_state>
20001b12:                      /-------- c249                   beqz    a2,20001b94 <manage_flow_control+0x94>
20001b14:                      |         84ae                   mv      s1,a1
20001b16:                      |         892a                   mv      s2,a0
20001b18:                      |         4505                   li      a0,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:308
  if (ctrl == kOttfConsoleFlowControlAuto) {
20001b1a:       /--------------|-------- 12a59863               bne     a1,a0,20001c4a <manage_flow_control+0x14a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:310
    TRY(dif_uart_rx_bytes_available(uart, &avail));
20001b1e:       |              |         006c                   addi    a1,sp,12
20001b20:       |              |         854a                   mv      a0,s2
20001b22:       |              |         5eb010ef               jal     ra,2000390c <dif_uart_rx_bytes_available>
20001b26:       |              |         c42a                   sw      a0,8(sp)
20001b28:       |              |         0048                   addi    a0,sp,4
20001b2a:       |              |         002c                   addi    a1,sp,8
20001b2c:       |              |         4611                   li      a2,4
20001b2e:       |              |         562020ef               jal     ra,20004090 <memcpy>
20001b32:       |              |         4512                   lw      a0,4(sp)
20001b34:       |              |         00153593               seqz    a1,a0
20001b38:       |              |         15fd                   addi    a1,a1,-1
20001b3a:       |              |         1365f693               andi    a3,a1,310
20001b3e:       |              |         00003597               auipc   a1,0x3
20001b42:       |              |         f5a58613               addi    a2,a1,-166 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
20001b46:       |              |         0e8f05b7               lui     a1,0xe8f0
20001b4a:       |              |         6d2010ef               jal     ra,2000321c <status_create>
20001b4e:       |              |     /-- 06054363               bltz    a0,20001bb4 <manage_flow_control+0xb4>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:311
    if (avail < kFlowControlLowWatermark &&
20001b52:       |              |     |   4532                   lw      a0,12(sp)
20001b54:       |              |     |   458d                   li      a1,3
20001b56:       |              |  /--|-- 06a5ee63               bltu    a1,a0,20001bd2 <manage_flow_control+0xd2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:312
        flow_control_state != kOttfConsoleFlowControlResume) {
20001b5a:       |              |  |  |   57a42503               lw      a0,1402(s0)
20001b5e:       |              |  |  |   44c5                   li      s1,17
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:311
    if (avail < kFlowControlLowWatermark &&
20001b60:       |           /--|--|--|-- 08950163               beq     a0,s1,20001be2 <manage_flow_control+0xe2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:315
      CHECK_DIF_OK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
20001b64:       |           |  |  |  |   4585                   li      a1,1
20001b66:       |           |  |  |  |   4605                   li      a2,1
20001b68:       |           |  |  |  |   854a                   mv      a0,s2
20001b6a:       |           |  |  |  |   3af010ef               jal     ra,20003718 <dif_uart_irq_set_enabled>
20001b6e:       +-----------|--|--|--|-- 0c050e63               beqz    a0,20001c4a <manage_flow_control+0x14a>
20001b72:       |           |  |  |  |   862a                   mv      a2,a0
20001b74:       |           |  |  |  |   00004517               auipc   a0,0x4
20001b78:       |           |  |  |  |   75052503               lw      a0,1872(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20001b7c:       |     /-----|--|--|--|-- c14d                   beqz    a0,20001c1e <manage_flow_control+0x11e>
20001b7e:       |     |     |  |  |  |   e000e517               auipc   a0,0xe000e
20001b82:       |     |     |  |  |  |   48250513               addi    a0,a0,1154 # 10000 <_chip_info_end>
20001b86:       |     |     |  |  |  |   40000593               li      a1,1024
20001b8a:       |     |     |  |  |  |   952e                   add     a0,a0,a1
20001b8c:       |     |     |  |  |  |   4585                   li      a1,1
20001b8e:       |     |     |  |  |  |   473000ef               jal     ra,20002800 <base_log_internal_dv>
20001b92:       |     |  /--|--|--|--|-- a869                   j       20001c2c <manage_flow_control+0x12c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:306
    return OK_STATUS((int32_t)flow_control_state);
20001b94:       |     |  |  |  \--|--|-> 57a42683               lw      a3,1402(s0)
20001b98:       |     |  |  |     |  |   00003517               auipc   a0,0x3
20001b9c:       |     |  |  |     |  |   f0050613               addi    a2,a0,-256 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
20001ba0:       |     |  |  |     |  |   0e8f05b7               lui     a1,0xe8f0
20001ba4:       |     |  |  |     |  |   4501                   li      a0,0
20001ba6:       |     |  |  |     |  |   40f2                   lw      ra,28(sp)
20001ba8:       |     |  |  |     |  |   4462                   lw      s0,24(sp)
20001baa:       |     |  |  |     |  |   44d2                   lw      s1,20(sp)
20001bac:       |     |  |  |     |  |   4942                   lw      s2,16(sp)
20001bae:       |     |  |  |     |  |   6105                   addi    sp,sp,32
20001bb0:       |     |  |  |     |  |   66c0106f               j       2000321c <status_create>
20001bb4:       |     |  |  |     |  \-> 84aa                   mv      s1,a0
20001bb6:       |     |  |  |     |      897d                   andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:310
    TRY(dif_uart_rx_bytes_available(uart, &avail));
20001bb8:       |     |  |  |     |      00003597               auipc   a1,0x3
20001bbc:       |     |  |  |     |      ee058613               addi    a2,a1,-288 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
20001bc0:       |     |  |  |     |      0e8f05b7               lui     a1,0xe8f0
20001bc4:       |     |  |  |     |      13600693               li      a3,310
20001bc8:       |     |  |  |     |      654010ef               jal     ra,2000321c <status_create>
20001bcc:       |     |  |  |     |      f37fe0ef               jal     ra,20000b02 <status_report>
20001bd0:       |  /--|--|--|-----|----- a0d5                   j       20001cb4 <manage_flow_control+0x1b4>
20001bd2:       |  |  |  |  |     \----> 45a1                   li      a1,8
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:318
    } else if (avail >= kFlowControlHighWatermark &&
20001bd4:       |  |  |  |  +----------- 00b56763               bltu    a0,a1,20001be2 <manage_flow_control+0xe2>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:319
               flow_control_state != kOttfConsoleFlowControlPause) {
20001bd8:       |  |  |  |  |            57a42503               lw      a0,1402(s0)
20001bdc:       |  |  |  |  |            44cd                   li      s1,19
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:318
    } else if (avail >= kFlowControlHighWatermark &&
20001bde:       |  |  |  |  |        /-- 00951963               bne     a0,s1,20001bf0 <manage_flow_control+0xf0>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:326
      return OK_STATUS((int32_t)flow_control_state);
20001be2:       |  |  |  |  \--------|-> 57a42683               lw      a3,1402(s0)
20001be6:       |  |  |  |           |   00003517               auipc   a0,0x3
20001bea:       |  |  |  |           |   eb250613               addi    a2,a0,-334 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
20001bee:       |  |  |  |  /--------|-- a86d                   j       20001ca8 <manage_flow_control+0x1a8>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:323
      CHECK_DIF_OK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
20001bf0:       |  |  |  |  |        \-> 4585                   li      a1,1
20001bf2:       |  |  |  |  |            854a                   mv      a0,s2
20001bf4:       |  |  |  |  |            4601                   li      a2,0
20001bf6:       |  |  |  |  |            323010ef               jal     ra,20003718 <dif_uart_irq_set_enabled>
20001bfa:       +--|--|--|--|----------- c921                   beqz    a0,20001c4a <manage_flow_control+0x14a>
20001bfc:       |  |  |  |  |            862a                   mv      a2,a0
20001bfe:       |  |  |  |  |            00004517               auipc   a0,0x4
20001c02:       |  |  |  |  |            6c652503               lw      a0,1734(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20001c06:       |  |  |  |  |  /-------- c50d                   beqz    a0,20001c30 <manage_flow_control+0x130>
20001c08:       |  |  |  |  |  |         e000e517               auipc   a0,0xe000e
20001c0c:       |  |  |  |  |  |         3f850513               addi    a0,a0,1016 # 10000 <_chip_info_end>
20001c10:       |  |  |  |  |  |         41400593               li      a1,1044
20001c14:       |  |  |  |  |  |         952e                   add     a0,a0,a1
20001c16:       |  |  |  |  |  |         4585                   li      a1,1
20001c18:       |  |  |  |  |  |         3e9000ef               jal     ra,20002800 <base_log_internal_dv>
20001c1c:       |  |  |  |  |  |  /----- a00d                   j       20001c3e <manage_flow_control+0x13e>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:315
      CHECK_DIF_OK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
20001c1e:       |  |  \--|--|--|--|----> 00004517               auipc   a0,0x4
20001c22:       |  |     |  |  |  |      cd650513               addi    a0,a0,-810 # 200058f4 <manage_flow_control.log_fields>
20001c26:       |  |     |  |  |  |      85b2                   mv      a1,a2
20001c28:       |  |     |  |  |  |      33d000ef               jal     ra,20002764 <base_log_internal_core>
20001c2c:       |  |     \--|--|--|----> 44c5                   li      s1,17
20001c2e:       |  |        |  |  |  /-- a809                   j       20001c40 <manage_flow_control+0x140>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:323
      CHECK_DIF_OK(dif_uart_irq_set_enabled(uart, kDifUartIrqRxWatermark,
20001c30:       |  |        |  \--|--|-> 00004517               auipc   a0,0x4
20001c34:       |  |        |     |  |   cd850513               addi    a0,a0,-808 # 20005908 <manage_flow_control.log_fields.82>
20001c38:       |  |        |     |  |   85b2                   mv      a1,a2
20001c3a:       |  |        |     |  |   32b000ef               jal     ra,20002764 <base_log_internal_core>
20001c3e:       |  |        |     \--|-> 44cd                   li      s1,19
20001c40:       |  |        |        \-> 6531                   lui     a0,0xc
20001c42:       |  |        |            aad50513               addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001c46:       |  |        |            1d5000ef               jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:329
  uint8_t byte = (uint8_t)ctrl;
20001c4a:       \--|--------|----------> 009101a3               sb      s1,3(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:330
  CHECK_DIF_OK(dif_uart_bytes_send(uart, &byte, 1, NULL));
20001c4e:          |        |            00310593               addi    a1,sp,3
20001c52:          |        |            4605                   li      a2,1
20001c54:          |        |            854a                   mv      a0,s2
20001c56:          |        |            4681                   li      a3,0
20001c58:          |        |            429010ef               jal     ra,20003880 <dif_uart_bytes_send>
20001c5c:          |        |  /-------- cd15                   beqz    a0,20001c98 <manage_flow_control+0x198>
20001c5e:          |        |  |         862a                   mv      a2,a0
20001c60:          |        |  |         00004517               auipc   a0,0x4
20001c64:          |        |  |         66452503               lw      a0,1636(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20001c68:          |        |  |  /----- cd01                   beqz    a0,20001c80 <manage_flow_control+0x180>
20001c6a:          |        |  |  |      e000e517               auipc   a0,0xe000e
20001c6e:          |        |  |  |      39650513               addi    a0,a0,918 # 10000 <_chip_info_end>
20001c72:          |        |  |  |      42800593               li      a1,1064
20001c76:          |        |  |  |      952e                   add     a0,a0,a1
20001c78:          |        |  |  |      4585                   li      a1,1
20001c7a:          |        |  |  |      387000ef               jal     ra,20002800 <base_log_internal_dv>
20001c7e:          |        |  |  |  /-- a801                   j       20001c8e <manage_flow_control+0x18e>
20001c80:          |        |  |  \--|-> 00004517               auipc   a0,0x4
20001c84:          |        |  |     |   c9c50513               addi    a0,a0,-868 # 2000591c <manage_flow_control.log_fields.85>
20001c88:          |        |  |     |   85b2                   mv      a1,a2
20001c8a:          |        |  |     |   2db000ef               jal     ra,20002764 <base_log_internal_core>
20001c8e:          |        |  |     \-> 6531                   lui     a0,0xc
20001c90:          |        |  |         aad50513               addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20001c94:          |        |  |         187000ef               jal     ra,2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:331
  flow_control_state = ctrl;
20001c98:          |        |  \-------> 56942d23               sw      s1,1402(s0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:332
  return OK_STATUS((int32_t)flow_control_state);
20001c9c:          |        |            57a42683               lw      a3,1402(s0)
20001ca0:          |        |            00003517               auipc   a0,0x3
20001ca4:          |        |            df850613               addi    a2,a0,-520 # 20004a98 <vApplicationStackOverflowHook.log_fields+0x14>
20001ca8:          |        \----------> 0e8f05b7               lui     a1,0xe8f0
20001cac:          |                     4501                   li      a0,0
20001cae:          |                     56e010ef               jal     ra,2000321c <status_create>
20001cb2:          |                     84aa                   mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_console.c:333
}
20001cb4:          \-------------------> 8526                   mv      a0,s1
20001cb6:                                40f2                   lw      ra,28(sp)
20001cb8:                                4462                   lw      s0,24(sp)
20001cba:                                44d2                   lw      s1,20(sp)
20001cbc:                                4942                   lw      s2,16(sp)
20001cbe:                                6105                   addi    sp,sp,32
20001cc0:                                8082                   ret

20001cc2 <irq_global_ctrl>:
irq_global_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:18
void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
}

void irq_global_ctrl(bool en) {
  if (en) {
20001cc2:       /-- c509                        beqz    a0,20001ccc <irq_global_ctrl+0xa>
20001cc4:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
20001cc6:       |   30052073            csrs    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
20001cca:       |   8082                        ret
20001ccc:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
20001cce:           30053073            csrc    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
}
20001cd2:           8082                        ret

20001cd4 <irq_external_ctrl>:
irq_external_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
20001cd4:       /-- c511                        beqz    a0,20001ce0 <irq_external_ctrl+0xc>
20001cd6:       |   28b01513            bseti   a0,zero,0xb
/proc/self/cwd/sw/device/lib/runtime/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
20001cda:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20001cde:       |   8082                        ret
20001ce0:       \-> 28b01513            bseti   a0,zero,0xb
/proc/self/cwd/sw/device/lib/runtime/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20001ce4:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
}
20001ce8:           8082                        ret

20001cea <irq_timer_ctrl>:
irq_timer_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
20001cea:       /-- c511                        beqz    a0,20001cf6 <irq_timer_ctrl+0xc>
20001cec:       |   08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
20001cf0:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20001cf4:       |   8082                        ret
20001cf6:       \-> 08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20001cfa:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
}
20001cfe:           8082                        ret

20001d00 <irq_software_ctrl>:
irq_software_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
20001d00:       /-- c509                        beqz    a0,20001d0a <irq_software_ctrl+0xa>
20001d02:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
20001d04:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
20001d08:       |   8082                        ret
20001d0a:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
20001d0c:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
}
20001d10:           8082                        ret

20001d12 <spi_device_testutils_wait_for_upload>:
spi_device_testutils_wait_for_upload():
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:361
  }
  return OK_STATUS();
}

status_t spi_device_testutils_wait_for_upload(dif_spi_device_handle_t *spid,
                                              upload_info_t *info) {
20001d12:                                               7179                    addi    sp,sp,-48
20001d14:                                               d606                    sw      ra,44(sp)
20001d16:                                               d422                    sw      s0,40(sp)
20001d18:                                               d226                    sw      s1,36(sp)
20001d1a:                                               d04a                    sw      s2,32(sp)
20001d1c:                                               ce4e                    sw      s3,28(sp)
20001d1e:                                               cc52                    sw      s4,24(sp)
20001d20:                                               892e                    mv      s2,a1
20001d22:                                               8a2a                    mv      s4,a0
20001d24:                                               00004517                auipc   a0,0x4
20001d28:                                               c0c50413                addi    s0,a0,-1012 # 20005930 <manage_flow_control.log_fields.85+0x14>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:367
  // Wait for a SPI transaction cause an upload.
  bool upload_pending;
  do {
    // The UploadCmdfifoNotEmpty interrupt status is updated after the SPI
    // transaction completes.
    TRY(dif_spi_device_irq_is_pending(
20001d2c:                                           /-> 01710613                addi    a2,sp,23
20001d30:                                           |   8552                    mv      a0,s4
20001d32:                                           |   4581                    li      a1,0
20001d34:                                           |   62e010ef                jal     ra,20003362 <dif_spi_device_irq_is_pending>
20001d38:                                           |   c82a                    sw      a0,16(sp)
20001d3a:                                           |   0068                    addi    a0,sp,12
20001d3c:                                           |   080c                    addi    a1,sp,16
20001d3e:                                           |   4611                    li      a2,4
20001d40:                                           |   350020ef                jal     ra,20004090 <memcpy>
20001d44:                                           |   4532                    lw      a0,12(sp)
20001d46:                                           |   00153593                seqz    a1,a0
20001d4a:                                           |   15fd                    addi    a1,a1,-1
20001d4c:                                           |   1705f693                andi    a3,a1,368
20001d50:                                           |   509305b7                lui     a1,0x50930
20001d54:                                           |   8622                    mv      a2,s0
20001d56:                                           |   4c6010ef                jal     ra,2000321c <status_create>
20001d5a:                /--------------------------|-- 1c054463                bltz    a0,20001f22 <spi_device_testutils_wait_for_upload+0x210>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:369
        &spid->dev, kDifSpiDeviceIrqUploadCmdfifoNotEmpty, &upload_pending));
  } while (!upload_pending);
20001d5e:                |                          |   01714503                lbu     a0,23(sp)
20001d62:                |                          \-- d569                    beqz    a0,20001d2c <spi_device_testutils_wait_for_upload+0x1a>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:374

  uint8_t occupancy;

  // Get the SPI opcode.
  TRY(dif_spi_device_get_flash_command_fifo_occupancy(spid, &occupancy));
20001d64:                |                              00b10593                addi    a1,sp,11
20001d68:                |                              8552                    mv      a0,s4
20001d6a:                |                              7c4010ef                jal     ra,2000352e <dif_spi_device_get_flash_command_fifo_occupancy>
20001d6e:                |                              c82a                    sw      a0,16(sp)
20001d70:                |                              0068                    addi    a0,sp,12
20001d72:                |                              080c                    addi    a1,sp,16
20001d74:                |                              4611                    li      a2,4
20001d76:                |                              31a020ef                jal     ra,20004090 <memcpy>
20001d7a:                |                              4532                    lw      a0,12(sp)
20001d7c:                |                              00153593                seqz    a1,a0
20001d80:                |                              15fd                    addi    a1,a1,-1
20001d82:                |                              1765f693                andi    a3,a1,374
20001d86:                |                              00004597                auipc   a1,0x4
20001d8a:                |                              baa58613                addi    a2,a1,-1110 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001d8e:                |                              509305b7                lui     a1,0x50930
20001d92:                |                              48a010ef                jal     ra,2000321c <status_create>
20001d96:                |                       /----- 1a054163                bltz    a0,20001f38 <spi_device_testutils_wait_for_upload+0x226>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:375
  if (occupancy != 1) {
20001d9a:                |                       |      00b14503                lbu     a0,11(sp)
20001d9e:                |                       |      4585                    li      a1,1
20001da0:       /--------|-----------------------|----- 1ab51763                bne     a0,a1,20001f4e <spi_device_testutils_wait_for_upload+0x23c>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:379
    // Cannot have an uploaded command without an opcode.
    return INTERNAL();
  }
  TRY(dif_spi_device_pop_flash_command_fifo(spid, &info->opcode));
20001da4:       |        |                       |      8552                    mv      a0,s4
20001da6:       |        |                       |      85ca                    mv      a1,s2
20001da8:       |        |                       |      7f0010ef                jal     ra,20003598 <dif_spi_device_pop_flash_command_fifo>
20001dac:       |        |                       |      c82a                    sw      a0,16(sp)
20001dae:       |        |                       |      0068                    addi    a0,sp,12
20001db0:       |        |                       |      080c                    addi    a1,sp,16
20001db2:       |        |                       |      4611                    li      a2,4
20001db4:       |        |                       |      2dc020ef                jal     ra,20004090 <memcpy>
20001db8:       |        |                       |      4532                    lw      a0,12(sp)
20001dba:       |        |                       |      00153593                seqz    a1,a0
20001dbe:       |        |                       |      15fd                    addi    a1,a1,-1
20001dc0:       |        |                       |      17b5f693                andi    a3,a1,379
20001dc4:       |        |                       |      00004597                auipc   a1,0x4
20001dc8:       |        |                       |      b6c58613                addi    a2,a1,-1172 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001dcc:       |        |                       |      509305b7                lui     a1,0x50930
20001dd0:       |        |                       |      44c010ef                jal     ra,2000321c <status_create>
20001dd4:       |  /-----|-----------------------|----- 18054a63                bltz    a0,20001f68 <spi_device_testutils_wait_for_upload+0x256>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:381
  // Get the flash_status register.
  TRY(dif_spi_device_get_flash_status_registers(spid, &info->flash_status));
20001dd8:       |  |     |                       |      00890593                addi    a1,s2,8
20001ddc:       |  |     |                       |      8552                    mv      a0,s4
20001dde:       |  |     |                       |      0cd010ef                jal     ra,200036aa <dif_spi_device_get_flash_status_registers>
20001de2:       |  |     |                       |      c82a                    sw      a0,16(sp)
20001de4:       |  |     |                       |      0068                    addi    a0,sp,12
20001de6:       |  |     |                       |      080c                    addi    a1,sp,16
20001de8:       |  |     |                       |      4611                    li      a2,4
20001dea:       |  |     |                       |      2a6020ef                jal     ra,20004090 <memcpy>
20001dee:       |  |     |                       |      4532                    lw      a0,12(sp)
20001df0:       |  |     |                       |      00153593                seqz    a1,a0
20001df4:       |  |     |                       |      15fd                    addi    a1,a1,-1
20001df6:       |  |     |                       |      17d5f693                andi    a3,a1,381
20001dfa:       |  |     |                       |      00004597                auipc   a1,0x4
20001dfe:       |  |     |                       |      b3658613                addi    a2,a1,-1226 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001e02:       |  |     |                       |      509305b7                lui     a1,0x50930
20001e06:       |  |     |                       |      416010ef                jal     ra,2000321c <status_create>
20001e0a:       |  |  /--|-----------------------|----- 16054a63                bltz    a0,20001f7e <spi_device_testutils_wait_for_upload+0x26c>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:384

  // Get the SPI address (if available).
  TRY(dif_spi_device_get_flash_address_fifo_occupancy(spid, &occupancy));
20001e0e:       |  |  |  |                       |      00b10593                addi    a1,sp,11
20001e12:       |  |  |  |                       |      8552                    mv      a0,s4
20001e14:       |  |  |  |                       |      738010ef                jal     ra,2000354c <dif_spi_device_get_flash_address_fifo_occupancy>
20001e18:       |  |  |  |                       |      c82a                    sw      a0,16(sp)
20001e1a:       |  |  |  |                       |      0068                    addi    a0,sp,12
20001e1c:       |  |  |  |                       |      080c                    addi    a1,sp,16
20001e1e:       |  |  |  |                       |      4611                    li      a2,4
20001e20:       |  |  |  |                       |      270020ef                jal     ra,20004090 <memcpy>
20001e24:       |  |  |  |                       |      4532                    lw      a0,12(sp)
20001e26:       |  |  |  |                       |      00153593                seqz    a1,a0
20001e2a:       |  |  |  |                       |      15fd                    addi    a1,a1,-1
20001e2c:       |  |  |  |                       |      1805f693                andi    a3,a1,384
20001e30:       |  |  |  |                       |      00004597                auipc   a1,0x4
20001e34:       |  |  |  |                       |      b0058613                addi    a2,a1,-1280 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001e38:       |  |  |  |                       |      509305b7                lui     a1,0x50930
20001e3c:       |  |  |  |                       |      3e0010ef                jal     ra,2000321c <status_create>
20001e40:       |  |  |  |     /-----------------|----- 14054a63                bltz    a0,20001f94 <spi_device_testutils_wait_for_upload+0x282>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:385
  if (occupancy) {
20001e44:       |  |  |  |     |                 |      00b14503                lbu     a0,11(sp)
20001e48:       |  |  |  |     |                 |  /-- cd35                    beqz    a0,20001ec4 <spi_device_testutils_wait_for_upload+0x1b2>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:387
    dif_toggle_t addr_4b;
    TRY(dif_spi_device_get_4b_address_mode(spid, &addr_4b));
20001e4a:       |  |  |  |     |                 |  |   080c                    addi    a1,sp,16
20001e4c:       |  |  |  |     |                 |  |   8552                    mv      a0,s4
20001e4e:       |  |  |  |     |                 |  |   5aa010ef                jal     ra,200033f8 <dif_spi_device_get_4b_address_mode>
20001e52:       |  |  |  |     |                 |  |   c62a                    sw      a0,12(sp)
20001e54:       |  |  |  |     |                 |  |   0048                    addi    a0,sp,4
20001e56:       |  |  |  |     |                 |  |   006c                    addi    a1,sp,12
20001e58:       |  |  |  |     |                 |  |   4611                    li      a2,4
20001e5a:       |  |  |  |     |                 |  |   236020ef                jal     ra,20004090 <memcpy>
20001e5e:       |  |  |  |     |                 |  |   4512                    lw      a0,4(sp)
20001e60:       |  |  |  |     |                 |  |   00153593                seqz    a1,a0
20001e64:       |  |  |  |     |                 |  |   15fd                    addi    a1,a1,-1
20001e66:       |  |  |  |     |                 |  |   1835f693                andi    a3,a1,387
20001e6a:       |  |  |  |     |                 |  |   00004597                auipc   a1,0x4
20001e6e:       |  |  |  |     |                 |  |   ac658613                addi    a2,a1,-1338 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001e72:       |  |  |  |     |                 |  |   509305b7                lui     a1,0x50930
20001e76:       |  |  |  |     |                 |  |   3a6010ef                jal     ra,2000321c <status_create>
20001e7a:       |  |  |  |     |  /--------------|--|-- 12054863                bltz    a0,20001faa <spi_device_testutils_wait_for_upload+0x298>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:388
    info->addr_4b = addr_4b;
20001e7e:       |  |  |  |     |  |              |  |   4542                    lw      a0,16(sp)
20001e80:       |  |  |  |     |  |              |  |   00a03533                snez    a0,a0
20001e84:       |  |  |  |     |  |              |  |   00a90123                sb      a0,2(s2)
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:389
    TRY(dif_spi_device_pop_flash_address_fifo(spid, &info->address));
20001e88:       |  |  |  |     |  |              |  |   00c90593                addi    a1,s2,12
20001e8c:       |  |  |  |     |  |              |  |   8552                    mv      a0,s4
20001e8e:       |  |  |  |     |  |              |  |   730010ef                jal     ra,200035be <dif_spi_device_pop_flash_address_fifo>
20001e92:       |  |  |  |     |  |              |  |   c62a                    sw      a0,12(sp)
20001e94:       |  |  |  |     |  |              |  |   0048                    addi    a0,sp,4
20001e96:       |  |  |  |     |  |              |  |   006c                    addi    a1,sp,12
20001e98:       |  |  |  |     |  |              |  |   4611                    li      a2,4
20001e9a:       |  |  |  |     |  |              |  |   1f6020ef                jal     ra,20004090 <memcpy>
20001e9e:       |  |  |  |     |  |              |  |   4512                    lw      a0,4(sp)
20001ea0:       |  |  |  |     |  |              |  |   00153593                seqz    a1,a0
20001ea4:       |  |  |  |     |  |              |  |   15fd                    addi    a1,a1,-1
20001ea6:       |  |  |  |     |  |              |  |   1855f693                andi    a3,a1,389
20001eaa:       |  |  |  |     |  |              |  |   00004597                auipc   a1,0x4
20001eae:       |  |  |  |     |  |              |  |   a8658613                addi    a2,a1,-1402 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001eb2:       |  |  |  |     |  |              |  |   509305b7                lui     a1,0x50930
20001eb6:       |  |  |  |     |  |              |  |   366010ef                jal     ra,2000321c <status_create>
20001eba:       |  |  |  |     |  |     /--------|--|-- 10054763                bltz    a0,20001fc8 <spi_device_testutils_wait_for_upload+0x2b6>
20001ebe:       |  |  |  |     |  |     |        |  |   4505                    li      a0,1
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:390
    info->has_address = true;
20001ec0:       |  |  |  |     |  |     |        |  |   00a900a3                sb      a0,1(s2)
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:395
  }

  // Get the SPI data payload (if available).
  uint32_t start;
  TRY(dif_spi_device_get_flash_payload_fifo_occupancy(spid, &info->data_len,
20001ec4:       |  |  |  |     |  |     |        |  \-> 00490993                addi    s3,s2,4
20001ec8:       |  |  |  |     |  |     |        |      0810                    addi    a2,sp,16
20001eca:       |  |  |  |     |  |     |        |      8552                    mv      a0,s4
20001ecc:       |  |  |  |     |  |     |        |      85ce                    mv      a1,s3
20001ece:       |  |  |  |     |  |     |        |      69e010ef                jal     ra,2000356c <dif_spi_device_get_flash_payload_fifo_occupancy>
20001ed2:       |  |  |  |     |  |     |        |      c62a                    sw      a0,12(sp)
20001ed4:       |  |  |  |     |  |     |        |      0048                    addi    a0,sp,4
20001ed6:       |  |  |  |     |  |     |        |      006c                    addi    a1,sp,12
20001ed8:       |  |  |  |     |  |     |        |      4611                    li      a2,4
20001eda:       |  |  |  |     |  |     |        |      1b6020ef                jal     ra,20004090 <memcpy>
20001ede:       |  |  |  |     |  |     |        |      4512                    lw      a0,4(sp)
20001ee0:       |  |  |  |     |  |     |        |      00153593                seqz    a1,a0
20001ee4:       |  |  |  |     |  |     |        |      15fd                    addi    a1,a1,-1
20001ee6:       |  |  |  |     |  |     |        |      18c5f693                andi    a3,a1,396
20001eea:       |  |  |  |     |  |     |        |      00004597                auipc   a1,0x4
20001eee:       |  |  |  |     |  |     |        |      a4658613                addi    a2,a1,-1466 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001ef2:       |  |  |  |     |  |     |        |      509305b7                lui     a1,0x50930
20001ef6:       |  |  |  |     |  |     |        |      326010ef                jal     ra,2000321c <status_create>
20001efa:       |  |  |  |     |  |     |     /--|----- 0a054c63                bltz    a0,20001fb2 <spi_device_testutils_wait_for_upload+0x2a0>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:397
                                                      &start));
  if (info->data_len) {
20001efe:       |  |  |  |     |  |     |     |  |      0009d603                lhu     a2,0(s3)
20001f02:       |  |  |  |     |  |  /--|-----|--|----- 12060763                beqz    a2,20002030 <spi_device_testutils_wait_for_upload+0x31e>
20001f06:       |  |  |  |     |  |  |  |     |  |      10100513                li      a0,257
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:398
    if (info->data_len > sizeof(info->data)) {
20001f0a:       |  |  |  |     |  |  |  |  /--|--|----- 0ea66763                bltu    a2,a0,20001ff8 <spi_device_testutils_wait_for_upload+0x2e6>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:400
      // We aren't expecting more than 256 bytes of data.
      return INVALID_ARGUMENT();
20001f0e:       |  |  |  |     |  |  |  |  |  |  |      00004517                auipc   a0,0x4
20001f12:       |  |  |  |     |  |  |  |  |  |  |      a2250613                addi    a2,a0,-1502 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001f16:       |  |  |  |     |  |  |  |  |  |  |      450d                    li      a0,3
20001f18:       |  |  |  |     |  |  |  |  |  |  |      509305b7                lui     a1,0x50930
20001f1c:       |  |  |  |     |  |  |  |  |  |  |      19000693                li      a3,400
20001f20:       |  |  |  |  /--|--|--|--|--|--|--|----- a081                    j       20001f60 <spi_device_testutils_wait_for_upload+0x24e>
20001f22:       |  |  |  \--|--|--|--|--|--|--|--|----> 84aa                    mv      s1,a0
20001f24:       |  |  |     |  |  |  |  |  |  |  |      897d                    andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:367
    TRY(dif_spi_device_irq_is_pending(
20001f26:       |  |  |     |  |  |  |  |  |  |  |      00004597                auipc   a1,0x4
20001f2a:       |  |  |     |  |  |  |  |  |  |  |      a0a58613                addi    a2,a1,-1526 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001f2e:       |  |  |     |  |  |  |  |  |  |  |      509305b7                lui     a1,0x50930
20001f32:       |  |  |     |  |  |  |  |  |  |  |      17000693                li      a3,368
20001f36:       |  |  |  /--|--|--|--|--|--|--|--|----- a065                    j       20001fde <spi_device_testutils_wait_for_upload+0x2cc>
20001f38:       |  |  |  |  |  |  |  |  |  |  |  \----> 84aa                    mv      s1,a0
20001f3a:       |  |  |  |  |  |  |  |  |  |  |         897d                    andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:374
  TRY(dif_spi_device_get_flash_command_fifo_occupancy(spid, &occupancy));
20001f3c:       |  |  |  |  |  |  |  |  |  |  |         00004597                auipc   a1,0x4
20001f40:       |  |  |  |  |  |  |  |  |  |  |         9f458613                addi    a2,a1,-1548 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001f44:       |  |  |  |  |  |  |  |  |  |  |         509305b7                lui     a1,0x50930
20001f48:       |  |  |  |  |  |  |  |  |  |  |         17600693                li      a3,374
20001f4c:       |  |  |  +--|--|--|--|--|--|--|-------- a849                    j       20001fde <spi_device_testutils_wait_for_upload+0x2cc>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:377
    return INTERNAL();
20001f4e:       \--|--|--|--|--|--|--|--|--|--|-------> 00004517                auipc   a0,0x4
20001f52:          |  |  |  |  |  |  |  |  |  |         9e250613                addi    a2,a0,-1566 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001f56:          |  |  |  |  |  |  |  |  |  |         4535                    li      a0,13
20001f58:          |  |  |  |  |  |  |  |  |  |         509305b7                lui     a1,0x50930
20001f5c:          |  |  |  |  |  |  |  |  |  |         17900693                li      a3,377
20001f60:          |  |  |  >--|--|--|--|--|--|-------> 2bc010ef                jal     ra,2000321c <status_create>
20001f64:          |  |  |  |  |  |  |  |  |  |         84aa                    mv      s1,a0
20001f66:          |  |  |  |  |  |  |  |  |  |  /----- a041                    j       20001fe6 <spi_device_testutils_wait_for_upload+0x2d4>
20001f68:          \--|--|--|--|--|--|--|--|--|--|----> 84aa                    mv      s1,a0
20001f6a:             |  |  |  |  |  |  |  |  |  |      897d                    andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:379
  TRY(dif_spi_device_pop_flash_command_fifo(spid, &info->opcode));
20001f6c:             |  |  |  |  |  |  |  |  |  |      00004597                auipc   a1,0x4
20001f70:             |  |  |  |  |  |  |  |  |  |      9c458613                addi    a2,a1,-1596 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001f74:             |  |  |  |  |  |  |  |  |  |      509305b7                lui     a1,0x50930
20001f78:             |  |  |  |  |  |  |  |  |  |      17b00693                li      a3,379
20001f7c:             |  +--|--|--|--|--|--|--|--|----- a08d                    j       20001fde <spi_device_testutils_wait_for_upload+0x2cc>
20001f7e:             \--|--|--|--|--|--|--|--|--|----> 84aa                    mv      s1,a0
20001f80:                |  |  |  |  |  |  |  |  |      897d                    andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:381
  TRY(dif_spi_device_get_flash_status_registers(spid, &info->flash_status));
20001f82:                |  |  |  |  |  |  |  |  |      00004597                auipc   a1,0x4
20001f86:                |  |  |  |  |  |  |  |  |      9ae58613                addi    a2,a1,-1618 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001f8a:                |  |  |  |  |  |  |  |  |      509305b7                lui     a1,0x50930
20001f8e:                |  |  |  |  |  |  |  |  |      17d00693                li      a3,381
20001f92:                +--|--|--|--|--|--|--|--|----- a0b1                    j       20001fde <spi_device_testutils_wait_for_upload+0x2cc>
20001f94:                |  |  \--|--|--|--|--|--|----> 84aa                    mv      s1,a0
20001f96:                |  |     |  |  |  |  |  |      897d                    andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:384
  TRY(dif_spi_device_get_flash_address_fifo_occupancy(spid, &occupancy));
20001f98:                |  |     |  |  |  |  |  |      00004597                auipc   a1,0x4
20001f9c:                |  |     |  |  |  |  |  |      99858613                addi    a2,a1,-1640 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001fa0:                |  |     |  |  |  |  |  |      509305b7                lui     a1,0x50930
20001fa4:                |  |     |  |  |  |  |  |      18000693                li      a3,384
20001fa8:                +--|-----|--|--|--|--|--|----- a81d                    j       20001fde <spi_device_testutils_wait_for_upload+0x2cc>
20001faa:                |  |     \--|--|--|--|--|----> 84aa                    mv      s1,a0
20001fac:                |  |        |  |  |  |  |      18300693                li      a3,387
20001fb0:                |  |        |  |  |  |  |  /-- a839                    j       20001fce <spi_device_testutils_wait_for_upload+0x2bc>
20001fb2:                |  |        |  |  |  \--|--|-> 84aa                    mv      s1,a0
20001fb4:                |  |        |  |  |     |  |   897d                    andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:395
  TRY(dif_spi_device_get_flash_payload_fifo_occupancy(spid, &info->data_len,
20001fb6:                |  |        |  |  |     |  |   00004597                auipc   a1,0x4
20001fba:                |  |        |  |  |     |  |   97a58613                addi    a2,a1,-1670 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001fbe:                |  |        |  |  |     |  |   509305b7                lui     a1,0x50930
20001fc2:                |  |        |  |  |     |  |   18c00693                li      a3,396
20001fc6:                +--|--------|--|--|-----|--|-- a821                    j       20001fde <spi_device_testutils_wait_for_upload+0x2cc>
20001fc8:                |  |        |  \--|-----|--|-> 84aa                    mv      s1,a0
20001fca:                |  |        |     |     |  |   18500693                li      a3,389
20001fce:                |  |        |     |     |  \-> 01f4f513                andi    a0,s1,31
20001fd2:                |  |        |     |     |      00004597                auipc   a1,0x4
20001fd6:                |  |        |     |     |      95e58613                addi    a2,a1,-1698 # 20005930 <manage_flow_control.log_fields.85+0x14>
20001fda:                |  |        |     |     |      509305b7                lui     a1,0x50930
20001fde:                >--|--------|-----|-----|----> 23e010ef                jal     ra,2000321c <status_create>
20001fe2:                |  |        |     |     |      b21fe0ef                jal     ra,20000b02 <status_report>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:410

  // Finished: ack the IRQ.
  TRY(dif_spi_device_irq_acknowledge(&spid->dev,
                                     kDifSpiDeviceIrqUploadCmdfifoNotEmpty));
  return OK_STATUS();
}
20001fe6:                |  |        |     |     \----> 8526                    mv      a0,s1
20001fe8:                |  |        |     |            50b2                    lw      ra,44(sp)
20001fea:                |  |        |     |            5422                    lw      s0,40(sp)
20001fec:                |  |        |     |            5492                    lw      s1,36(sp)
20001fee:                |  |        |     |            5902                    lw      s2,32(sp)
20001ff0:                |  |        |     |            49f2                    lw      s3,28(sp)
20001ff2:                |  |        |     |            4a62                    lw      s4,24(sp)
20001ff4:                |  |        |     |            6145                    addi    sp,sp,48
20001ff6:                |  |        |     |            8082                    ret
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:402
    TRY(dif_spi_device_read_flash_payload_buffer(spid, start, info->data_len,
20001ff8:                |  |        |     \----------> 45c2                    lw      a1,16(sp)
20001ffa:                |  |        |                  01090693                addi    a3,s2,16
20001ffe:                |  |        |                  8552                    mv      a0,s4
20002000:                |  |        |                  5e4010ef                jal     ra,200035e4 <dif_spi_device_read_flash_payload_buffer>
20002004:                |  |        |                  c62a                    sw      a0,12(sp)
20002006:                |  |        |                  0048                    addi    a0,sp,4
20002008:                |  |        |                  006c                    addi    a1,sp,12
2000200a:                |  |        |                  4611                    li      a2,4
2000200c:                |  |        |                  084020ef                jal     ra,20004090 <memcpy>
20002010:                |  |        |                  4512                    lw      a0,4(sp)
20002012:                |  |        |                  00153593                seqz    a1,a0
20002016:                |  |        |                  15fd                    addi    a1,a1,-1
20002018:                |  |        |                  1935f693                andi    a3,a1,403
2000201c:                |  |        |                  00004597                auipc   a1,0x4
20002020:                |  |        |                  91458613                addi    a2,a1,-1772 # 20005930 <manage_flow_control.log_fields.85+0x14>
20002024:                |  |        |                  509305b7                lui     a1,0x50930
20002028:                |  |        |                  1f4010ef                jal     ra,2000321c <status_create>
2000202c:                |  |        |           /----- 06054063                bltz    a0,2000208c <spi_device_testutils_wait_for_upload+0x37a>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:407
  TRY(dif_spi_device_irq_acknowledge(&spid->dev,
20002030:                |  |        \-----------|----> 8552                    mv      a0,s4
20002032:                |  |                    |      4581                    li      a1,0
20002034:                |  |                    |      358010ef                jal     ra,2000338c <dif_spi_device_irq_acknowledge>
20002038:                |  |                    |      c62a                    sw      a0,12(sp)
2000203a:                |  |                    |      0048                    addi    a0,sp,4
2000203c:                |  |                    |      006c                    addi    a1,sp,12
2000203e:                |  |                    |      4611                    li      a2,4
20002040:                |  |                    |      050020ef                jal     ra,20004090 <memcpy>
20002044:                |  |                    |      4512                    lw      a0,4(sp)
20002046:                |  |                    |      00153593                seqz    a1,a0
2000204a:                |  |                    |      15fd                    addi    a1,a1,-1
2000204c:                |  |                    |      1985f693                andi    a3,a1,408
20002050:                |  |                    |      00004597                auipc   a1,0x4
20002054:                |  |                    |      8e058613                addi    a2,a1,-1824 # 20005930 <manage_flow_control.log_fields.85+0x14>
20002058:                |  |                    |      509305b7                lui     a1,0x50930
2000205c:                |  |                    |      1c0010ef                jal     ra,2000321c <status_create>
20002060:                |  |                    |  /-- 00054b63                bltz    a0,20002076 <spi_device_testutils_wait_for_upload+0x364>
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:409
  return OK_STATUS();
20002064:                |  |                    |  |   00004517                auipc   a0,0x4
20002068:                |  |                    |  |   8cc50613                addi    a2,a0,-1844 # 20005930 <manage_flow_control.log_fields.85+0x14>
2000206c:                |  |                    |  |   509305b7                lui     a1,0x50930
20002070:                |  |                    |  |   4501                    li      a0,0
20002072:                |  |                    |  |   4681                    li      a3,0
20002074:                |  \--------------------|--|-- b5f5                    j       20001f60 <spi_device_testutils_wait_for_upload+0x24e>
20002076:                |                       |  \-> 84aa                    mv      s1,a0
20002078:                |                       |      897d                    andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:407
  TRY(dif_spi_device_irq_acknowledge(&spid->dev,
2000207a:                |                       |      00004597                auipc   a1,0x4
2000207e:                |                       |      8b658613                addi    a2,a1,-1866 # 20005930 <manage_flow_control.log_fields.85+0x14>
20002082:                |                       |      509305b7                lui     a1,0x50930
20002086:                |                       |      19800693                li      a3,408
2000208a:                +-----------------------|----- bf91                    j       20001fde <spi_device_testutils_wait_for_upload+0x2cc>
2000208c:                |                       \----> 84aa                    mv      s1,a0
2000208e:                |                              897d                    andi    a0,a0,31
/proc/self/cwd/sw/device/lib/testing/spi_device_testutils.c:402
    TRY(dif_spi_device_read_flash_payload_buffer(spid, start, info->data_len,
20002090:                |                              00004597                auipc   a1,0x4
20002094:                |                              8a058613                addi    a2,a1,-1888 # 20005930 <manage_flow_control.log_fields.85+0x14>
20002098:                |                              509305b7                lui     a1,0x50930
2000209c:                |                              19300693                li      a3,403
200020a0:                \----------------------------- bf3d                    j       20001fde <spi_device_testutils_wait_for_upload+0x2cc>

200020a2 <dif_pinmux_init>:
dif_pinmux_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_pinmux_autogen.c:18

#include "pinmux_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_pinmux_init(mmio_region_t base_addr, dif_pinmux_t *pinmux) {
  if (pinmux == NULL) {
200020a2:       /----- c581                     beqz    a1,200020aa <dif_pinmux_init+0x8>
200020a4:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_pinmux_autogen.c:22
    return kDifBadArg;
  }

  pinmux->base_addr = base_addr;
200020a6:       |      c188                     sw      a0,0(a1)
200020a8:       |  /-- a011                     j       200020ac <dif_pinmux_init+0xa>
200020aa:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_pinmux_autogen.c:25

  return kDifOk;
}
200020ac:          \-> 8532                     mv      a0,a2
200020ae:              8082                     ret

200020b0 <dif_pinmux_output_select>:
dif_pinmux_output_select():
/proc/self/cwd/sw/device/lib/dif/dif_pinmux.c:175
}

dif_result_t dif_pinmux_output_select(const dif_pinmux_t *pinmux,
                                      dif_pinmux_index_t mio_pad_output,
                                      dif_pinmux_index_t outsel) {
  if (pinmux == NULL || mio_pad_output >= PINMUX_PARAM_N_MIO_PADS ||
200020b0:           00153693            seqz    a3,a0
200020b4:           02f5b713            sltiu   a4,a1,47
200020b8:           00174713            xori    a4,a4,1
200020bc:           8ed9                        or      a3,a3,a4
200020be:           04e63713            sltiu   a4,a2,78
200020c2:           00174713            xori    a4,a4,1
200020c6:           8f55                        or      a4,a4,a3
200020c8:           468d                        li      a3,3
200020ca:       /-- ef01                        bnez    a4,200020e2 <dif_pinmux_output_select+0x32>
dif_pinmux_is_locked():
/proc/self/cwd/sw/device/lib/dif/dif_pinmux.c:142
  uint32_t reg_value = mmio_region_read32(pinmux->base_addr, reg_offset);
200020cc:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
200020ce:       |   20a5c533            sh2add  a0,a1,a0
200020d2:       |   1cc52583            lw      a1,460(a0)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200020d6:       |   8985                        andi    a1,a1,1
200020d8:       |   46a5                        li      a3,9
dif_pinmux_output_select():
/proc/self/cwd/sw/device/lib/dif/dif_pinmux.c:185
  dif_result_t result = dif_pinmux_is_locked(
      pinmux, mio_pad_output, kDifPinmuxLockTargetOutsel, &is_locked);
  if (result != kDifOk) {
    return result;
  }
  if (is_locked) {
200020da:       +-- c581                        beqz    a1,200020e2 <dif_pinmux_output_select+0x32>
200020dc:       |   4681                        li      a3,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
200020de:       |   28c52423            sw      a2,648(a0)
dif_pinmux_output_select():
/proc/self/cwd/sw/device/lib/dif/dif_pinmux.c:194
      PINMUX_MIO_OUTSEL_0_REG_OFFSET + (ptrdiff_t)(mio_pad_output << 2);
  uint32_t reg_value =
      bitfield_field32_write(0, PINMUX_MIO_OUTSEL_0_OUT_0_FIELD, outsel);
  mmio_region_write32(pinmux->base_addr, reg_offset, reg_value);
  return kDifOk;
}
200020e2:       \-> 8536                        mv      a0,a3
200020e4:           8082                        ret

200020e6 <ottf_generic_fault_print>:
ottf_generic_fault_print():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:65
    "  s3", "  s4", "  s5", "  s6", "  s7", "  s8", "  s9", " s10",
    " s11", "  t3", "  t4", "  t5", "  t6", "msts",
};

void ottf_generic_fault_print(uint32_t *exc_info, const char *reason,
                              uint32_t mcause) {
200020e6:                 7179                  addi    sp,sp,-48
200020e8:                 d606                  sw      ra,44(sp)
200020ea:                 d422                  sw      s0,40(sp)
200020ec:                 d226                  sw      s1,36(sp)
200020ee:                 d04a                  sw      s2,32(sp)
200020f0:                 ce4e                  sw      s3,28(sp)
200020f2:                 cc52                  sw      s4,24(sp)
200020f4:                 ca56                  sw      s5,20(sp)
200020f6:                 c85a                  sw      s6,16(sp)
200020f8:                 c65e                  sw      s7,12(sp)
200020fa:                 c462                  sw      s8,8(sp)
200020fc:                 c266                  sw      s9,4(sp)
200020fe:                 c06a                  sw      s10,0(sp)
20002100:                 8932                  mv      s2,a2
20002102:                 89ae                  mv      s3,a1
20002104:                 8b2a                  mv      s6,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:67
  enum { kExcWords = 30 };
  uint32_t mepc = ibex_mepc_read();
20002106:                 2da1                  jal     2000275e <ibex_mepc_read>
20002108:                 8a2a                  mv      s4,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:68
  uint32_t mtval = ibex_mtval_read();
2000210a:                 25b9                  jal     20002758 <ibex_mtval_read>
2000210c:                 8aaa                  mv      s5,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:69
  if (exc_info) {
2000210e:       /-------- 0c0b0763              beqz    s6,200021dc <ottf_generic_fault_print+0xf6>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:70
    base_printf("===== Exception Frame @ %08x =====", exc_info);
20002112:       |         00004517              auipc   a0,0x4
20002116:       |         90250513              addi    a0,a0,-1790 # 20005a14 <manage_flow_control.log_fields.85+0xf8>
2000211a:       |         85da                  mv      a1,s6
2000211c:       |         139000ef              jal     ra,20002a54 <base_printf>
20002120:       |         4481                  li      s1,0
20002122:       |         00004517              auipc   a0,0x4
20002126:       |         c1250d13              addi    s10,a0,-1006 # 20005d34 <exc_frame>
2000212a:       |         00004517              auipc   a0,0x4
2000212e:       |         e8a50b93              addi    s7,a0,-374 # 20005fb4 <test_status_set.log_fields.7+0x24>
20002132:       |         00004517              auipc   a0,0x4
20002136:       |         90550c13              addi    s8,a0,-1787 # 20005a37 <manage_flow_control.log_fields.85+0x11b>
2000213a:       |         4cf9                  li      s9,30
2000213c:       |         845a                  mv      s0,s6
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:72
    for (size_t i = 0; i < kExcWords; ++i) {
      if (i % 4 == 0) {
2000213e:       |  /----> 0034f513              andi    a0,s1,3
20002142:       |  |  /-- e501                  bnez    a0,2000214a <ottf_generic_fault_print+0x64>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:73
        base_printf("\n");
20002144:       |  |  |   855e                  mv      a0,s7
20002146:       |  |  |   10f000ef              jal     ra,20002a54 <base_printf>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:75
      }
      const char *name = exc_frame[i];
2000214a:       |  |  \-> 000d2583              lw      a1,0(s10)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:78
      if (name == NULL)
        continue;
      base_printf(" %4s=%08x", name, exc_info[i]);
2000214e:       |  |      4010                  lw      a2,0(s0)
20002150:       |  |      8562                  mv      a0,s8
20002152:       |  |      103000ef              jal     ra,20002a54 <base_printf>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:71
    for (size_t i = 0; i < kExcWords; ++i) {
20002156:       |  |      0485                  addi    s1,s1,1
20002158:       |  |      0411                  addi    s0,s0,4
2000215a:       |  |      0d11                  addi    s10,s10,4
2000215c:       |  \----- ff9491e3              bne     s1,s9,2000213e <ottf_generic_fault_print+0x58>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:80
    }
    uint32_t *sp = exc_info + kExcWords;
20002160:       |         078b0413              addi    s0,s6,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:81
    base_printf("\n");
20002164:       |         00004517              auipc   a0,0x4
20002168:       |         e5050513              addi    a0,a0,-432 # 20005fb4 <test_status_set.log_fields.7+0x24>
2000216c:       |         0e9000ef              jal     ra,20002a54 <base_printf>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:90
                     TOP_EARLGREY_SRAM_CTRL_MAIN_RAM_SIZE_BYTES);

    extern const char _text_start[], _text_end[];
    const uint32_t text_start = (uint32_t)_text_start;
    const uint32_t text_end = (uint32_t)_text_end;
    base_printf("===== Call Stack =====\n");
20002170:       |         00004517              auipc   a0,0x4
20002174:       |         8d150513              addi    a0,a0,-1839 # 20005a41 <manage_flow_control.log_fields.85+0x125>
20002178:       |         0dd000ef              jal     ra,20002a54 <base_printf>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:91
    for (; sp >= ram_start && sp < ram_end; ++sp) {
2000217c:       |         01c45513              srli    a0,s0,0x1c
20002180:       |         00153513              seqz    a0,a0
20002184:       |         10020bb7              lui     s7,0x10020
20002188:       |         fffb8593              addi    a1,s7,-1 # 1001ffff <_exception_frame_start+0x7f>
2000218c:       |         0085b5b3              sltu    a1,a1,s0
20002190:       |         8d4d                  or      a0,a0,a1
20002192:       +-------- e529                  bnez    a0,200021dc <ottf_generic_fault_print+0xf6>
20002194:       |         07cb0493              addi    s1,s6,124
20002198:       |         ffffe517              auipc   a0,0xffffe
2000219c:       |         26850c13              addi    s8,a0,616 # 20000400 <_ottf_interrupt_vector>
200021a0:       |         00002517              auipc   a0,0x2
200021a4:       |         1f050413              addi    s0,a0,496 # 20004390 <_text_end>
200021a8:       |         00004517              auipc   a0,0x4
200021ac:       |         8b150b13              addi    s6,a0,-1871 # 20005a59 <manage_flow_control.log_fields.85+0x13d>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:92
      uint32_t val = *sp;
200021b0:       |  /----> ffc4a583              lw      a1,-4(s1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:93
      if (val >= text_start && val < text_end) {
200021b4:       |  |      0185b533              sltu    a0,a1,s8
200021b8:       |  |      0085b633              sltu    a2,a1,s0
200021bc:       |  |      00164613              xori    a2,a2,1
200021c0:       |  |      8d51                  or      a0,a0,a2
200021c2:       |  |  /-- e501                  bnez    a0,200021ca <ottf_generic_fault_print+0xe4>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:94
        base_printf("    %08x\n", val);
200021c4:       |  |  |   855a                  mv      a0,s6
200021c6:       |  |  |   08f000ef              jal     ra,20002a54 <base_printf>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:91
    for (; sp >= ram_start && sp < ram_end; ++sp) {
200021ca:       |  |  \-> 01c4d513              srli    a0,s1,0x1c
200021ce:       |  |      00a03533              snez    a0,a0
200021d2:       |  |      0174b5b3              sltu    a1,s1,s7
200021d6:       |  |      8d6d                  and     a0,a0,a1
200021d8:       |  |      0491                  addi    s1,s1,4
200021da:       |  \----- f979                  bnez    a0,200021b0 <ottf_generic_fault_print+0xca>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:98
      }
    }
  }
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
200021dc:       \-------> 00004517              auipc   a0,0x4
200021e0:                 0e852503              lw      a0,232(a0) # 200062c4 <kDeviceLogBypassUartAddress>
200021e4:             /-- c91d                  beqz    a0,2000221a <ottf_generic_fault_print+0x134>
200021e6:             |   e000e517              auipc   a0,0xe000e
200021ea:             |   e1a50513              addi    a0,a0,-486 # 10000 <_chip_info_end>
200021ee:             |   43c00593              li      a1,1084
200021f2:             |   952e                  add     a0,a0,a1
200021f4:             |   4591                  li      a1,4
200021f6:             |   864e                  mv      a2,s3
200021f8:             |   86ca                  mv      a3,s2
200021fa:             |   8752                  mv      a4,s4
200021fc:             |   87d6                  mv      a5,s5
200021fe:             |   50b2                  lw      ra,44(sp)
20002200:             |   5422                  lw      s0,40(sp)
20002202:             |   5492                  lw      s1,36(sp)
20002204:             |   5902                  lw      s2,32(sp)
20002206:             |   49f2                  lw      s3,28(sp)
20002208:             |   4a62                  lw      s4,24(sp)
2000220a:             |   4ad2                  lw      s5,20(sp)
2000220c:             |   4b42                  lw      s6,16(sp)
2000220e:             |   4bb2                  lw      s7,12(sp)
20002210:             |   4c22                  lw      s8,8(sp)
20002212:             |   4c92                  lw      s9,4(sp)
20002214:             |   4d02                  lw      s10,0(sp)
20002216:             |   6145                  addi    sp,sp,48
20002218:             |   a3e5                  j       20002800 <base_log_internal_dv>
2000221a:             \-> 00004517              auipc   a0,0x4
2000221e:                 b9250513              addi    a0,a0,-1134 # 20005dac <ottf_generic_fault_print.log_fields>
20002222:                 85ce                  mv      a1,s3
20002224:                 864a                  mv      a2,s2
20002226:                 86d2                  mv      a3,s4
20002228:                 8756                  mv      a4,s5
2000222a:                 50b2                  lw      ra,44(sp)
2000222c:                 5422                  lw      s0,40(sp)
2000222e:                 5492                  lw      s1,36(sp)
20002230:                 5902                  lw      s2,32(sp)
20002232:                 49f2                  lw      s3,28(sp)
20002234:                 4a62                  lw      s4,24(sp)
20002236:                 4ad2                  lw      s5,20(sp)
20002238:                 4b42                  lw      s6,16(sp)
2000223a:                 4bb2                  lw      s7,12(sp)
2000223c:                 4c22                  lw      s8,8(sp)
2000223e:                 4c92                  lw      s9,4(sp)
20002240:                 4d02                  lw      s10,0(sp)
20002242:                 6145                  addi    sp,sp,48
20002244:                 a305                  j       20002764 <base_log_internal_core>

20002246 <ottf_exception_handler>:
ottf_exception_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:119
 */
OT_WEAK
void *pxCurrentTCB = NULL;

OT_WEAK
void ottf_exception_handler(uint32_t *exc_info) {
20002246:           1141                        addi    sp,sp,-16
20002248:           c606                        sw      ra,12(sp)
2000224a:           c422                        sw      s0,8(sp)
2000224c:           842a                        mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:120
  uint32_t mcause = ibex_mcause_read();
2000224e:           2311                        jal     20002752 <ibex_mcause_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:122

  switch ((ibex_exc_t)(mcause & kIbexExcMax)) {
20002250:           897d                        andi    a0,a0,31
20002252:           45ad                        li      a1,11
20002254:       /-- 04a5ee63            bltu    a1,a0,200022b0 <ottf_exception_handler+0x6a>
20002258:       |   00003597            auipc   a1,0x3
2000225c:       |   78c58593            addi    a1,a1,1932 # 200059e4 <manage_flow_control.log_fields.85+0xc8>
20002260:       |   20b54533            sh2add  a0,a0,a1
20002264:       |   4108                        lw      a0,0(a0)
20002266:       |   8502                        jr      a0
20002268:       |   8522                        mv      a0,s0
2000226a:       |   40b2                        lw      ra,12(sp)
2000226c:       |   4422                        lw      s0,8(sp)
2000226e:       |   0141                        addi    sp,sp,16
20002270:       |   a091                        j       200022b4 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:124
    case kIbexExcInstrMisaligned:
      ottf_instr_misaligned_fault_handler(exc_info);
20002272:       |   8522                        mv      a0,s0
20002274:       |   40b2                        lw      ra,12(sp)
20002276:       |   4422                        lw      s0,8(sp)
20002278:       |   0141                        addi    sp,sp,16
2000227a:       |   a82d                        j       200022b4 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:127
      break;
    case kIbexExcInstrAccessFault:
      ottf_instr_access_fault_handler(exc_info);
2000227c:       |   8522                        mv      a0,s0
2000227e:       |   40b2                        lw      ra,12(sp)
20002280:       |   4422                        lw      s0,8(sp)
20002282:       |   0141                        addi    sp,sp,16
20002284:       |   a805                        j       200022b4 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:130
      break;
    case kIbexExcIllegalInstrFault:
      ottf_illegal_instr_fault_handler(exc_info);
20002286:       |   8522                        mv      a0,s0
20002288:       |   40b2                        lw      ra,12(sp)
2000228a:       |   4422                        lw      s0,8(sp)
2000228c:       |   0141                        addi    sp,sp,16
2000228e:       |   a01d                        j       200022b4 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:133
      break;
    case kIbexExcBreakpoint:
      ottf_breakpoint_handler(exc_info);
20002290:       |   8522                        mv      a0,s0
20002292:       |   40b2                        lw      ra,12(sp)
20002294:       |   4422                        lw      s0,8(sp)
20002296:       |   0141                        addi    sp,sp,16
20002298:       |   a831                        j       200022b4 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:145
      break;
    case kIbexExcMachineECall:
      ottf_machine_ecall_handler(exc_info);
      break;
    case kIbexExcUserECall:
      ottf_user_ecall_handler(exc_info);
2000229a:       |   8522                        mv      a0,s0
2000229c:       |   40b2                        lw      ra,12(sp)
2000229e:       |   4422                        lw      s0,8(sp)
200022a0:       |   0141                        addi    sp,sp,16
200022a2:       |   a809                        j       200022b4 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:142
      ottf_machine_ecall_handler(exc_info);
200022a4:       |   8522                        mv      a0,s0
200022a6:       |   40b2                        lw      ra,12(sp)
200022a8:       |   4422                        lw      s0,8(sp)
200022aa:       |   0141                        addi    sp,sp,16
200022ac:       |   81ffe06f            j       20000aca <ottf_machine_ecall_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:148
      break;
    default:
      generic_fault_handler(exc_info);
200022b0:       \-> 8522                        mv      a0,s0
200022b2:           2009                        jal     200022b4 <ottf_breakpoint_handler>

200022b4 <ottf_breakpoint_handler>:
generic_fault_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:102
static void generic_fault_handler(uint32_t *exc_info) {
200022b4:       1141                    addi    sp,sp,-16
200022b6:       c606                    sw      ra,12(sp)
200022b8:       c422                    sw      s0,8(sp)
200022ba:       842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:103
  uint32_t mcause = ibex_mcause_read();
200022bc:       2959                    jal     20002752 <ibex_mcause_read>
200022be:       862a                    mv      a2,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:104
  ottf_generic_fault_print(exc_info, exception_reason[mcause & kIbexExcMax],
200022c0:       897d                    andi    a0,a0,31
200022c2:       00004597                auipc   a1,0x4
200022c6:       b2658593                addi    a1,a1,-1242 # 20005de8 <exception_reason>
200022ca:       20b54533                sh2add  a0,a0,a1
200022ce:       410c                    lw      a1,0(a0)
200022d0:       8522                    mv      a0,s0
200022d2:       3d11                    jal     200020e6 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:106
  abort();
200022d4:       29a5                    jal     2000274c <abort>

200022d6 <ottf_software_isr>:
ottf_software_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:181
OT_WEAK
OT_ALIAS("generic_fault_handler")
void ottf_user_ecall_handler(uint32_t *exc_info);

OT_WEAK
void ottf_software_isr(uint32_t *exc_info) {
200022d6:       1141                    addi    sp,sp,-16
200022d8:       c606                    sw      ra,12(sp)
200022da:       c422                    sw      s0,8(sp)
200022dc:       842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:182
  ottf_generic_fault_print(exc_info, "Software IRQ", ibex_mcause_read());
200022de:       2995                    jal     20002752 <ibex_mcause_read>
200022e0:       862a                    mv      a2,a0
200022e2:       00003517                auipc   a0,0x3
200022e6:       7de50593                addi    a1,a0,2014 # 20005ac0 <manage_flow_control.log_fields.85+0x1a4>
200022ea:       8522                    mv      a0,s0
200022ec:       3bed                    jal     200020e6 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:183
  abort();
200022ee:       29b9                    jal     2000274c <abort>

200022f0 <ottf_timer_isr>:
ottf_timer_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:187
}

OT_WEAK
void ottf_timer_isr(uint32_t *exc_info) {
200022f0:       1141                    addi    sp,sp,-16
200022f2:       c606                    sw      ra,12(sp)
200022f4:       c422                    sw      s0,8(sp)
200022f6:       842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:188
  ottf_generic_fault_print(exc_info, "Timer IRQ", ibex_mcause_read());
200022f8:       29a9                    jal     20002752 <ibex_mcause_read>
200022fa:       862a                    mv      a2,a0
200022fc:       00003517                auipc   a0,0x3
20002300:       7d150593                addi    a1,a0,2001 # 20005acd <manage_flow_control.log_fields.85+0x1b1>
20002304:       8522                    mv      a0,s0
20002306:       33c5                    jal     200020e6 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:189
  abort();
20002308:       2191                    jal     2000274c <abort>

2000230a <ottf_external_isr>:
ottf_external_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:196

OT_WEAK
bool ottf_console_flow_control_isr(uint32_t *exc_info) { return false; }

OT_WEAK
void ottf_external_isr(uint32_t *exc_info) {
2000230a:                    1141                       addi    sp,sp,-16
2000230c:                    c606                       sw      ra,12(sp)
2000230e:                    c422                       sw      s0,8(sp)
20002310:                    c226                       sw      s1,4(sp)
20002312:                    842a                       mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:199
  const uint32_t kPlicTarget = kTopEarlgreyPlicTargetIbex0;
  dif_rv_plic_irq_id_t plic_irq_id;
  CHECK_DIF_OK(dif_rv_plic_irq_claim(&ottf_plic, kPlicTarget, &plic_irq_id));
20002314:                    f0000517           auipc   a0,0xf0000
20002318:                    d8050513           addi    a0,a0,-640 # 10002094 <ottf_plic>
2000231c:                    860a                       mv      a2,sp
2000231e:                    4581                       li      a1,0
20002320:                    2ae1                       jal     200024f8 <dif_rv_plic_irq_claim>
20002322:                    00004497           auipc   s1,0x4
20002326:          /-------- c90d                       beqz    a0,20002358 <ottf_external_isr+0x4e>
20002328:          |         862a                       mv      a2,a0
2000232a:          |         fa24a503           lw      a0,-94(s1) # 200062c4 <kDeviceLogBypassUartAddress>
2000232e:          |  /----- c919                       beqz    a0,20002344 <ottf_external_isr+0x3a>
20002330:          |  |      e000e517           auipc   a0,0xe000e
20002334:          |  |      cd050513           addi    a0,a0,-816 # 10000 <_chip_info_end>
20002338:          |  |      45000593           li      a1,1104
2000233c:          |  |      952e                       add     a0,a0,a1
2000233e:          |  |      4585                       li      a1,1
20002340:          |  |      21c1                       jal     20002800 <base_log_internal_dv>
20002342:          |  |  /-- a039                       j       20002350 <ottf_external_isr+0x46>
20002344:          |  \--|-> 00004517           auipc   a0,0x4
20002348:          |     |   a7c50513           addi    a0,a0,-1412 # 20005dc0 <ottf_external_isr.log_fields>
2000234c:          |     |   85b2                       mv      a1,a2
2000234e:          |     |   2919                       jal     20002764 <base_log_internal_core>
20002350:          |     \-> 6531                       lui     a0,0xc
20002352:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
20002356:          |         24d1                       jal     2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:202

  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
20002358:          \-------> 4502                       lw      a0,0(sp)
2000235a:                    00004597           auipc   a1,0x4
2000235e:                    f6e58593           addi    a1,a1,-146 # 200062c8 <top_earlgrey_plic_interrupt_for_peripheral>
20002362:                    20b54533           sh2add  a0,a0,a1
20002366:                    4108                       lw      a0,0(a0)
20002368:                    4585                       li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:204

  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
2000236a:       /----------- 04b51b63           bne     a0,a1,200023c0 <ottf_external_isr+0xb6>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:205
      ottf_console_flow_control_isr(exc_info)) {
2000236e:       |            8522                       mv      a0,s0
20002370:       |            eb4ff0ef           jal     ra,20001a24 <ottf_console_flow_control_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:204
  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
20002374:       +----------- c531                       beqz    a0,200023c0 <ottf_external_isr+0xb6>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:207
    // Complete the IRQ at PLIC.
    CHECK_DIF_OK(
20002376:       |            4602                       lw      a2,0(sp)
20002378:       |            f0000517           auipc   a0,0xf0000
2000237c:       |            d1c50513           addi    a0,a0,-740 # 10002094 <ottf_plic>
20002380:       |            4581                       li      a1,0
20002382:       |            2a71                       jal     2000251e <dif_rv_plic_irq_complete>
20002384:       |  /-------- c90d                       beqz    a0,200023b6 <ottf_external_isr+0xac>
20002386:       |  |         862a                       mv      a2,a0
20002388:       |  |         fa24a503           lw      a0,-94(s1)
2000238c:       |  |  /----- c919                       beqz    a0,200023a2 <ottf_external_isr+0x98>
2000238e:       |  |  |      e000e517           auipc   a0,0xe000e
20002392:       |  |  |      c7250513           addi    a0,a0,-910 # 10000 <_chip_info_end>
20002396:       |  |  |      46400593           li      a1,1124
2000239a:       |  |  |      952e                       add     a0,a0,a1
2000239c:       |  |  |      4585                       li      a1,1
2000239e:       |  |  |      218d                       jal     20002800 <base_log_internal_dv>
200023a0:       |  |  |  /-- a039                       j       200023ae <ottf_external_isr+0xa4>
200023a2:       |  |  \--|-> 00004517           auipc   a0,0x4
200023a6:       |  |     |   a3250513           addi    a0,a0,-1486 # 20005dd4 <ottf_external_isr.log_fields.12>
200023aa:       |  |     |   85b2                       mv      a1,a2
200023ac:       |  |     |   2e65                       jal     20002764 <base_log_internal_core>
200023ae:       |  |     \-> 6531                       lui     a0,0xc
200023b0:       |  |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200023b4:       |  |         249d                       jal     2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:214
    return;
  }

  ottf_generic_fault_print(exc_info, "External IRQ", ibex_mcause_read());
  abort();
}
200023b6:       |  \-------> 40b2                       lw      ra,12(sp)
200023b8:       |            4422                       lw      s0,8(sp)
200023ba:       |            4492                       lw      s1,4(sp)
200023bc:       |            0141                       addi    sp,sp,16
200023be:       |            8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:212
  ottf_generic_fault_print(exc_info, "External IRQ", ibex_mcause_read());
200023c0:       \----------> 2e49                       jal     20002752 <ibex_mcause_read>
200023c2:                    862a                       mv      a2,a0
200023c4:                    00003517           auipc   a0,0x3
200023c8:                    7b950593           addi    a1,a0,1977 # 20005b7d <manage_flow_control.log_fields.85+0x261>
200023cc:                    8522                       mv      a0,s0
200023ce:                    d19ff0ef           jal     ra,200020e6 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:213
  abort();
200023d2:                    2ead                       jal     2000274c <abort>

200023d4 <ottf_external_nmi_handler>:
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:216

static void generic_internal_irq_handler(uint32_t *exc_info) {
200023d4:       1141                    addi    sp,sp,-16
200023d6:       c606                    sw      ra,12(sp)
200023d8:       c422                    sw      s0,8(sp)
200023da:       842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:217
  ottf_generic_fault_print(exc_info, "Internal IRQ", ibex_mcause_read());
200023dc:       2e9d                    jal     20002752 <ibex_mcause_read>
200023de:       862a                    mv      a2,a0
200023e0:       00004517                auipc   a0,0x4
200023e4:       94750593                addi    a1,a0,-1721 # 20005d27 <manage_flow_control.log_fields.85+0x40b>
200023e8:       8522                    mv      a0,s0
200023ea:       cfdff0ef                jal     ra,200020e6 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:218
  abort();
200023ee:       2eb9                    jal     2000274c <abort>

200023f0 <ottf_internal_isr>:
ottf_internal_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:230
OT_WEAK
OT_ALIAS("generic_internal_irq_handler")
void ottf_load_integrity_error_handler(uint32_t *exc_info);

OT_WEAK
void ottf_internal_isr(uint32_t *exc_info) {
200023f0:              1141                     addi    sp,sp,-16
200023f2:              c606                     sw      ra,12(sp)
200023f4:              c422                     sw      s0,8(sp)
200023f6:              842a                     mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:231
  uint32_t mcause = ibex_mcause_read();
200023f8:              2ea9                     jal     20002752 <ibex_mcause_read>
200023fa:              800005b7                 lui     a1,0x80000
200023fe:              05fd                     addi    a1,a1,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:232
  switch ((ibex_internal_irq_t)(mcause)) {
20002400:          /-- 00b50a63                 beq     a0,a1,20002414 <ottf_internal_isr+0x24>
20002404:          |   5581                     li      a1,-32
20002406:       /--|-- 00b51c63                 bne     a0,a1,2000241e <ottf_internal_isr+0x2e>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:234
    case kIbexInternalIrqLoadInteg:
      ottf_load_integrity_error_handler(exc_info);
2000240a:       |  |   8522                     mv      a0,s0
2000240c:       |  |   40b2                     lw      ra,12(sp)
2000240e:       |  |   4422                     lw      s0,8(sp)
20002410:       |  |   0141                     addi    sp,sp,16
20002412:       |  |   b7c9                     j       200023d4 <ottf_external_nmi_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:237
      break;
    case kIbexInternalIrqNmi:
      ottf_external_nmi_handler(exc_info);
20002414:       |  \-> 8522                     mv      a0,s0
20002416:       |      40b2                     lw      ra,12(sp)
20002418:       |      4422                     lw      s0,8(sp)
2000241a:       |      0141                     addi    sp,sp,16
2000241c:       |      bf65                     j       200023d4 <ottf_external_nmi_handler>
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:217
  ottf_generic_fault_print(exc_info, "Internal IRQ", ibex_mcause_read());
2000241e:       \----> 2e15                     jal     20002752 <ibex_mcause_read>
20002420:              862a                     mv      a2,a0
20002422:              00004517                 auipc   a0,0x4
20002426:              90550593                 addi    a1,a0,-1787 # 20005d27 <manage_flow_control.log_fields.85+0x40b>
2000242a:              8522                     mv      a0,s0
2000242c:              cbbff0ef                 jal     ra,200020e6 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:218
  abort();
20002430:              2e31                     jal     2000274c <abort>

20002432 <dif_rstmgr_init>:
dif_rstmgr_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rstmgr_autogen.c:18

#include "rstmgr_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rstmgr_init(mmio_region_t base_addr, dif_rstmgr_t *rstmgr) {
  if (rstmgr == NULL) {
20002432:       /----- c581                     beqz    a1,2000243a <dif_rstmgr_init+0x8>
20002434:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rstmgr_autogen.c:22
    return kDifBadArg;
  }

  rstmgr->base_addr = base_addr;
20002436:       |      c188                     sw      a0,0(a1)
20002438:       |  /-- a011                     j       2000243c <dif_rstmgr_init+0xa>
2000243a:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rstmgr_autogen.c:25

  return kDifOk;
}
2000243c:          \-> 8532                     mv      a0,a2
2000243e:              8082                     ret

20002440 <dif_rstmgr_reset_info_clear>:
dif_rstmgr_reset_info_clear():
/proc/self/cwd/sw/device/lib/dif/dif_rstmgr.c:171

  return kDifOk;
}

dif_result_t dif_rstmgr_reset_info_clear(const dif_rstmgr_t *handle) {
  if (handle == NULL) {
20002440:       /-- c511                        beqz    a0,2000244c <dif_rstmgr_reset_info_clear+0xc>
/proc/self/cwd/sw/device/lib/dif/dif_rstmgr.c:175
    return kDifBadArg;
  }

  mmio_region_t base_addr = handle->base_addr;
20002442:       |   410c                        lw      a1,0(a0)
20002444:       |   4501                        li      a0,0
20002446:       |   567d                        li      a2,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
20002448:       |   c590                        sw      a2,8(a1)
dif_rstmgr_reset_info_clear():
/proc/self/cwd/sw/device/lib/dif/dif_rstmgr.c:180

  rstmgr_reset_info_clear(base_addr);

  return kDifOk;
}
2000244a:       |   8082                        ret
2000244c:       \-> 450d                        li      a0,3
2000244e:           8082                        ret

20002450 <dif_rv_plic_init>:
dif_rv_plic_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_plic_autogen.c:18

#include "rv_plic_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_plic_init(mmio_region_t base_addr, dif_rv_plic_t *rv_plic) {
  if (rv_plic == NULL) {
20002450:       /----- c581                     beqz    a1,20002458 <dif_rv_plic_init+0x8>
20002452:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_plic_autogen.c:22
    return kDifBadArg;
  }

  rv_plic->base_addr = base_addr;
20002454:       |      c188                     sw      a0,0(a1)
20002456:       |  /-- a011                     j       2000245a <dif_rv_plic_init+0xa>
20002458:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_plic_autogen.c:25

  return kDifOk;
}
2000245a:          \-> 8532                     mv      a0,a2
2000245c:              8082                     ret

2000245e <dif_rv_plic_irq_set_enabled>:
dif_rv_plic_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:174

dif_result_t dif_rv_plic_irq_set_enabled(const dif_rv_plic_t *plic,
                                         dif_rv_plic_irq_id_t irq,
                                         dif_rv_plic_target_t target,
                                         dif_toggle_t state) {
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
2000245e:           00153713            seqz    a4,a0
20002462:           0ba5b793            sltiu   a5,a1,186
20002466:           0017c793            xori    a5,a5,1
2000246a:           00c03633            snez    a2,a2
2000246e:           8e59                        or      a2,a2,a4
20002470:           8e5d                        or      a2,a2,a5
20002472:           0026b713            sltiu   a4,a3,2
20002476:           00174713            xori    a4,a4,1
2000247a:           8f51                        or      a4,a4,a2
2000247c:           460d                        li      a2,3
2000247e:       /-- e315                        bnez    a4,200024a2 <dif_rv_plic_irq_set_enabled+0x44>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:193
      return kDifBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->base_addr, reg_info.offset);
20002480:       |   4108                        lw      a0,0(a0)
plic_irq_enable_reg_info():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:92
      .offset = plic_irq_enable_base_for_target(target) + offset,
20002482:       |   0035d613            srli    a2,a1,0x3
20002486:       |   28d61613            bseti   a2,a2,0xd
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
2000248a:       |   9a71                        andi    a2,a2,-4
2000248c:       |   9532                        add     a0,a0,a2
2000248e:       |   4118                        lw      a4,0(a0)
20002490:       |   4601                        li      a2,0
plic_irq_bit_index():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:51
  return irq % RV_PLIC_PARAM_REG_WIDTH;
20002492:       |   01f5f793            andi    a5,a1,31
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
20002496:       |   48f71733            bclr    a4,a4,a5
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
2000249a:       |   00b695b3            sll     a1,a3,a1
2000249e:       |   8dd9                        or      a1,a1,a4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
200024a0:       |   c10c                        sw      a1,0(a0)
dif_rv_plic_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:198
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->base_addr, reg_info.offset, reg);

  return kDifOk;
}
200024a2:       \-> 8532                        mv      a0,a2
200024a4:           8082                        ret

200024a6 <dif_rv_plic_irq_set_priority>:
dif_rv_plic_irq_set_priority():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:203

dif_result_t dif_rv_plic_irq_set_priority(const dif_rv_plic_t *plic,
                                          dif_rv_plic_irq_id_t irq,
                                          uint32_t priority) {
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
200024a6:           00153693            seqz    a3,a0
200024aa:           0ba5b713            sltiu   a4,a1,186
200024ae:           00174713            xori    a4,a4,1
200024b2:           8ed9                        or      a3,a3,a4
200024b4:           00463713            sltiu   a4,a2,4
200024b8:           00174713            xori    a4,a4,1
200024bc:           8f55                        or      a4,a4,a3
200024be:           468d                        li      a3,3
200024c0:       /-- e711                        bnez    a4,200024cc <dif_rv_plic_irq_set_priority+0x26>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:209
      priority > kDifRvPlicMaxPriority) {
    return kDifBadArg;
  }

  ptrdiff_t offset = plic_priority_reg_offset(irq);
  mmio_region_write32(plic->base_addr, offset, priority);
200024c2:       |   4108                        lw      a0,0(a0)
200024c4:       |   4681                        li      a3,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
200024c6:       |   20a5c533            sh2add  a0,a1,a0
200024ca:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_set_priority():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:212

  return kDifOk;
}
200024cc:       \-> 8536                        mv      a0,a3
200024ce:           8082                        ret

200024d0 <dif_rv_plic_target_set_threshold>:
dif_rv_plic_target_set_threshold():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:217

dif_result_t dif_rv_plic_target_set_threshold(const dif_rv_plic_t *plic,
                                              dif_rv_plic_target_t target,
                                              uint32_t threshold) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
200024d0:           00153693            seqz    a3,a0
200024d4:           00b035b3            snez    a1,a1
200024d8:           8dd5                        or      a1,a1,a3
200024da:           00463693            sltiu   a3,a2,4
200024de:           0016c693            xori    a3,a3,1
200024e2:           8ecd                        or      a3,a3,a1
200024e4:           458d                        li      a1,3
200024e6:       /-- e699                        bnez    a3,200024f4 <dif_rv_plic_target_set_threshold+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:223
      threshold > kDifRvPlicMaxPriority) {
    return kDifBadArg;
  }

  ptrdiff_t threshold_offset = plic_threshold_base_for_target(target);
  mmio_region_write32(plic->base_addr, threshold_offset, threshold);
200024e8:       |   4108                        lw      a0,0(a0)
200024ea:       |   4581                        li      a1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
200024ec:       |   002006b7            lui     a3,0x200
200024f0:       |   9536                        add     a0,a0,a3
200024f2:       |   c110                        sw      a2,0(a0)
dif_rv_plic_target_set_threshold():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:226

  return kDifOk;
}
200024f4:       \-> 852e                        mv      a0,a1
200024f6:           8082                        ret

200024f8 <dif_rv_plic_irq_claim>:
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:245
}

dif_result_t dif_rv_plic_irq_claim(const dif_rv_plic_t *plic,
                                   dif_rv_plic_target_t target,
                                   dif_rv_plic_irq_id_t *claim_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
200024f8:           00153693            seqz    a3,a0
200024fc:           00b035b3            snez    a1,a1
20002500:           8dd5                        or      a1,a1,a3
20002502:           00163693            seqz    a3,a2
20002506:           8ecd                        or      a3,a3,a1
20002508:           458d                        li      a1,3
2000250a:       /-- ea81                        bnez    a3,2000251a <dif_rv_plic_irq_claim+0x22>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
      claim_data == NULL) {
    return kDifBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->base_addr, claim_complete_reg);
2000250c:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
2000250e:       |   002005b7            lui     a1,0x200
20002512:       |   952e                        add     a0,a0,a1
20002514:       |   4148                        lw      a0,4(a0)
20002516:       |   4581                        li      a1,0
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
20002518:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:254

  return kDifOk;
}
2000251a:       \-> 852e                        mv      a0,a1
2000251c:           8082                        ret

2000251e <dif_rv_plic_irq_complete>:
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:259

dif_result_t dif_rv_plic_irq_complete(const dif_rv_plic_t *plic,
                                      dif_rv_plic_target_t target,
                                      dif_rv_plic_irq_id_t complete_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
2000251e:           00153693            seqz    a3,a0
20002522:           00b035b3            snez    a1,a1
20002526:           8ecd                        or      a3,a3,a1
20002528:           458d                        li      a1,3
2000252a:       /-- e699                        bnez    a3,20002538 <dif_rv_plic_irq_complete+0x1a>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:266
  }

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->base_addr, claim_complete_reg, complete_data);
2000252c:       |   4108                        lw      a0,0(a0)
2000252e:       |   4581                        li      a1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
20002530:       |   002006b7            lui     a3,0x200
20002534:       |   9536                        add     a0,a0,a3
20002536:       |   c150                        sw      a2,4(a0)
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:269

  return kDifOk;
}
20002538:       \-> 852e                        mv      a0,a1
2000253a:           8082                        ret

2000253c <rand_testutils_init>:
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:31
/**
 * The default timeout in usecs for fetching data from the entropy source.
 */
static const uint32_t kEntropyFetchTimeoutMicros = 100000;

rand_testutils_rng_t rand_testutils_init(dif_rv_core_ibex_t *rv_core_ibex) {
2000253c:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
  CHECK(rv_core_ibex != NULL);
2000253e:                 ce06                  sw      ra,28(sp)
20002540:                 cc22                  sw      s0,24(sp)
20002542:                 ca26                  sw      s1,20(sp)
20002544:                 c84a                  sw      s2,16(sp)
20002546:                 00004617              auipc   a2,0x4
2000254a:                 baa62483              lw      s1,-1110(a2) # 200060f0 <MODULE_ID>
2000254e:                 892e                  mv      s2,a1
20002550:                 842a                  mv      s0,a0
20002552:                 00004517              auipc   a0,0x4
20002556:                 91e50613              addi    a2,a0,-1762 # 20005e70 <kDifRvPlicMaxPriority+0x4>
2000255a:                 4501                  li      a0,0
2000255c:                 85a6                  mv      a1,s1
2000255e:                 4681                  li      a3,0
20002560:                 4bd000ef              jal     ra,2000321c <status_create>
20002564:                 012035b3              snez    a1,s2
20002568:                 00b107a3              sb      a1,15(sp)
2000256c:                 00f14583              lbu     a1,15(sp)
20002570:       /-------- ed9d                  bnez    a1,200025ae <rand_testutils_init+0x72>
20002572:       |         00004517              auipc   a0,0x4
20002576:       |         d5252503              lw      a0,-686(a0) # 200062c4 <kDeviceLogBypassUartAddress>
2000257a:       |  /----- c919                  beqz    a0,20002590 <rand_testutils_init+0x54>
2000257c:       |  |      e000e517              auipc   a0,0xe000e
20002580:       |  |      a8450513              addi    a0,a0,-1404 # 10000 <_chip_info_end>
20002584:       |  |      47800593              li      a1,1144
20002588:       |  |      952e                  add     a0,a0,a1
2000258a:       |  |      4581                  li      a1,0
2000258c:       |  |      2c95                  jal     20002800 <base_log_internal_dv>
2000258e:       |  |  /-- a031                  j       2000259a <rand_testutils_init+0x5e>
20002590:       |  \--|-> 00004517              auipc   a0,0x4
20002594:       |     |   97050513              addi    a0,a0,-1680 # 20005f00 <rand_testutils_init.log_fields>
20002598:       |     |   22f1                  jal     20002764 <base_log_internal_core>
2000259a:       |     \-> 00004517              auipc   a0,0x4
2000259e:       |         8d650613              addi    a2,a0,-1834 # 20005e70 <kDifRvPlicMaxPriority+0x4>
200025a2:       |         4535                  li      a0,13
200025a4:       |         02000693              li      a3,32
200025a8:       |         85a6                  mv      a1,s1
200025aa:       |         473000ef              jal     ra,2000321c <status_create>
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
200025ae:       \-------> 00052593              slti    a1,a0,0
200025b2:                 897d                  andi    a0,a0,31
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
200025b4:                 00a03533              snez    a0,a0
200025b8:                 8d6d                  and     a0,a0,a1
200025ba:             /-- c509                  beqz    a0,200025c4 <rand_testutils_init+0x88>
200025bc:             |   6531                  lui     a0,0xc
200025be:             |   aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200025c2:             |   28a1                  jal     2000261a <test_status_set>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  // For the simulation platforms (DV and Verilator), the LFSR reseed frequency
  // is arbitrarily set to 255. The test may choose to update this value if
  // needed.
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
200025c4:             \-> 01242023              sw      s2,0(s0)
200025c8:                 6561                  lui     a0,0x18
200025ca:                 6a050513              addi    a0,a0,1696 # 186a0 <_chip_info_end+0x86a0>
200025ce:                 c048                  sw      a0,4(s0)
200025d0:                 deadc537              lui     a0,0xdeadc
200025d4:                 eef50513              addi    a0,a0,-273 # deadbeef <_non_volatile_scratch_end+0xbea5beef>
200025d8:                 c408                  sw      a0,8(s0)
200025da:                 80000537              lui     a0,0x80000
200025de:                 05750513              addi    a0,a0,87 # 80000057 <_non_volatile_scratch_end+0x5ff80057>
200025e2:                 c448                  sw      a0,12(s0)
200025e4:                 10000513              li      a0,256
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
      .polynomial_coefficients = kLfsrPolynomialCoefficients,
      .reseed_frequency = 256,
      .op_counter = UINT32_MAX};
  // For non-runtime-sensitive simulations (for example, using FPGA or the
  // debug board), always fetch random data from the hardware.
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
200025e8:                 00004597              auipc   a1,0x4
200025ec:                 cc45a583              lw      a1,-828(a1) # 200062ac <kDeviceType>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
200025f0:                 c808                  sw      a0,16(s0)
200025f2:                 557d                  li      a0,-1
200025f4:                 4609                  li      a2,2
200025f6:                 c848                  sw      a0,20(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
200025f8:             /-- 00c5e463              bltu    a1,a2,20002600 <rand_testutils_init+0xc4>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:46
    ctx.reseed_frequency = 0;
200025fc:             |   00042823              sw      zero,16(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:48
  }
  return ctx;
20002600:             \-> 40f2                  lw      ra,28(sp)
20002602:                 4462                  lw      s0,24(sp)
20002604:                 44d2                  lw      s1,20(sp)
20002606:                 4942                  lw      s2,16(sp)
20002608:                 6105                  addi    sp,sp,32
2000260a:                 8082                  ret

2000260c <dif_rv_core_ibex_init>:
dif_rv_core_ibex_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:19
#include "rv_core_ibex_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_core_ibex_init(mmio_region_t base_addr,
                                   dif_rv_core_ibex_t *rv_core_ibex) {
  if (rv_core_ibex == NULL) {
2000260c:       /----- c581                     beqz    a1,20002614 <dif_rv_core_ibex_init+0x8>
2000260e:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:23
    return kDifBadArg;
  }

  rv_core_ibex->base_addr = base_addr;
20002610:       |      c188                     sw      a0,0(a1)
20002612:       |  /-- a011                     j       20002616 <dif_rv_core_ibex_init+0xa>
20002614:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:26

  return kDifOk;
}
20002616:          \-> 8532                     mv      a0,a2
20002618:              8082                     ret

2000261a <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
2000261a:                    1141                       addi    sp,sp,-16
2000261c:                    c606                       sw      ra,12(sp)
2000261e:                    c422                       sw      s0,8(sp)
20002620:                    65b1                       lui     a1,0xc
20002622:                    aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
20002626:          /-------- 04b50763           beq     a0,a1,20002674 <test_status_set+0x5a>
2000262a:          |         842a                       mv      s0,a0
2000262c:          |         6525                       lui     a0,0x9
2000262e:          |         0535                       addi    a0,a0,13
20002630:       /--|-------- 04a40d63           beq     s0,a0,2000268a <test_status_set+0x70>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:40
      test_status_device_write(test_status);
      abort();
      break;
    }
    default: {
      LOG_INFO("test_status_set to 0x%x", test_status);
20002634:       |  |         00004517           auipc   a0,0x4
20002638:       |  |         c9052503           lw      a0,-880(a0) # 200062c4 <kDeviceLogBypassUartAddress>
2000263c:       |  |  /----- cd01                       beqz    a0,20002654 <test_status_set+0x3a>
2000263e:       |  |  |      e000e517           auipc   a0,0xe000e
20002642:       |  |  |      9c250513           addi    a0,a0,-1598 # 10000 <_chip_info_end>
20002646:       |  |  |      50400593           li      a1,1284
2000264a:       |  |  |      952e                       add     a0,a0,a1
2000264c:       |  |  |      4585                       li      a1,1
2000264e:       |  |  |      8622                       mv      a2,s0
20002650:       |  |  |      2a45                       jal     20002800 <base_log_internal_dv>
20002652:       |  |  |  /-- a039                       j       20002660 <test_status_set+0x46>
20002654:       |  |  \--|-> 00004517           auipc   a0,0x4
20002658:       |  |     |   93c50513           addi    a0,a0,-1732 # 20005f90 <test_status_set.log_fields.7>
2000265c:       |  |     |   85a2                       mv      a1,s0
2000265e:       |  |     |   2219                       jal     20002764 <base_log_internal_core>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
20002660:       |  |     \-> 00004517           auipc   a0,0x4
20002664:       |  |         c6052503           lw      a0,-928(a0) # 200062c0 <kDeviceTestStatusAddress>
20002668:       |  |     /-- c111                       beqz    a0,2000266c <test_status_set+0x52>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
2000266a:       |  |     |   c100                       sw      s0,0(a0)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:45
      test_status_device_write(test_status);
      break;
    }
  }
}
2000266c:       |  |     \-> 40b2                       lw      ra,12(sp)
2000266e:       |  |         4422                       lw      s0,8(sp)
20002670:       |  |         0141                       addi    sp,sp,16
20002672:       |  |         8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
20002674:       |  \-------> 00004517           auipc   a0,0x4
20002678:       |            c5052503           lw      a0,-944(a0) # 200062c4 <kDeviceLogBypassUartAddress>
2000267c:       |        /-- e115                       bnez    a0,200026a0 <test_status_set+0x86>
2000267e:       |        |   00004517           auipc   a0,0x4
20002682:       |        |   8fe50513           addi    a0,a0,-1794 # 20005f7c <test_status_set.log_fields.4>
20002686:       |        |   28f9                       jal     20002764 <base_log_internal_core>
20002688:       |     /--|-- a02d                       j       200026b2 <test_status_set+0x98>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
2000268a:       \-----|--|-> 00004517           auipc   a0,0x4
2000268e:             |  |   c3a52503           lw      a0,-966(a0) # 200062c4 <kDeviceLogBypassUartAddress>
20002692:          /--|--|-- e90d                       bnez    a0,200026c4 <test_status_set+0xaa>
20002694:          |  |  |   00004517           auipc   a0,0x4
20002698:          |  |  |   8d450513           addi    a0,a0,-1836 # 20005f68 <test_status_set.log_fields>
2000269c:          |  |  |   20e1                       jal     20002764 <base_log_internal_core>
2000269e:       /--|--|--|-- a825                       j       200026d6 <test_status_set+0xbc>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
200026a0:       |  |  |  \-> e000e517           auipc   a0,0xe000e
200026a4:       |  |  |      96050513           addi    a0,a0,-1696 # 10000 <_chip_info_end>
200026a8:       |  |  |      4f000593           li      a1,1264
200026ac:       |  |  |      952e                       add     a0,a0,a1
200026ae:       |  |  |      4581                       li      a1,0
200026b0:       |  |  |      2a81                       jal     20002800 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
200026b2:       |  |  \----> 00004517           auipc   a0,0x4
200026b6:       |  |         c0e52503           lw      a0,-1010(a0) # 200062c0 <kDeviceTestStatusAddress>
200026ba:       |  |  /----- c515                       beqz    a0,200026e6 <test_status_set+0xcc>
200026bc:       |  |  |      65b1                       lui     a1,0xc
200026be:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
200026c2:       |  |  |  /-- a00d                       j       200026e4 <test_status_set+0xca>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
200026c4:       |  \--|--|-> e000e517           auipc   a0,0xe000e
200026c8:       |     |  |   93c50513           addi    a0,a0,-1732 # 10000 <_chip_info_end>
200026cc:       |     |  |   4dc00593           li      a1,1244
200026d0:       |     |  |   952e                       add     a0,a0,a1
200026d2:       |     |  |   4581                       li      a1,0
200026d4:       |     |  |   2235                       jal     20002800 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
200026d6:       \-----|--|-> 00004517           auipc   a0,0x4
200026da:             |  |   bea52503           lw      a0,-1046(a0) # 200062c0 <kDeviceTestStatusAddress>
200026de:             +--|-- c501                       beqz    a0,200026e6 <test_status_set+0xcc>
200026e0:             |  |   65a5                       lui     a1,0x9
200026e2:             |  |   05b5                       addi    a1,a1,13
200026e4:             |  \-> c10c                       sw      a1,0(a0)
200026e6:             \----> 209d                       jal     2000274c <abort>

200026e8 <busy_spin_micros>:
busy_spin_micros():
/proc/self/cwd/sw/device/lib/runtime/hart.c:13

#include "sw/device/lib/arch/device.h"
#include "sw/device/lib/base/math.h"
#include "sw/device/lib/runtime/ibex.h"

void busy_spin_micros(uint32_t usec) {
200026e8:                 1141                  addi    sp,sp,-16
200026ea:                 c606                  sw      ra,12(sp)
200026ec:                 c422                  sw      s0,8(sp)
200026ee:                 c226                  sw      s1,4(sp)
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:82
OT_WARN_UNUSED_RESULT
inline uint64_t ibex_mcycle_read(void) {
  uint32_t cycle_low = 0;
  uint32_t cycle_high = 0;
  uint32_t cycle_high_2 = 0;
  asm volatile(
200026f0:             /-> b8002473              csrr    s0,mcycleh
200026f4:             |   b00024f3              csrr    s1,mcycle
200026f8:             |   b80025f3              csrr    a1,mcycleh
200026fc:             \-- feb41ae3              bne     s0,a1,200026f0 <busy_spin_micros+0x8>
busy_spin_micros():
/proc/self/cwd/sw/device/lib/runtime/hart.c:15
  uint64_t start = ibex_mcycle_read();
  uint64_t cycles = to_cpu_cycles(usec);
20002700:                 4581                  li      a1,0
20002702:                 479010ef              jal     ra,2000437a <to_cpu_cycles>
20002706:                 40900633              neg     a2,s1
2000270a:                 009036b3              snez    a3,s1
2000270e:                 40800733              neg     a4,s0
20002712:                 40d706b3              sub     a3,a4,a3
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:82
20002716:       /-------> b8002473              csrr    s0,mcycleh
2000271a:       |         b0002773              csrr    a4,mcycle
2000271e:       |         b80024f3              csrr    s1,mcycleh
20002722:       +-------- fe941ae3              bne     s0,s1,20002716 <busy_spin_micros+0x2e>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:91
      "  csrr %2, mcycleh;"  // Read `mcycleh` again.
      "  bne  %0, %2, 1b;"   // Try again if `mcycle` overflowed before
                             // reading `mcycleh`.
      : "=r"(cycle_high), "=r"(cycle_low), "=r"(cycle_high_2)
      :);
  return (uint64_t)cycle_high << 32 | cycle_low;
20002726:       |         9732                  add     a4,a4,a2
20002728:       |         00c737b3              sltu    a5,a4,a2
2000272c:       |         9436                  add     s0,s0,a3
busy_spin_micros():
/proc/self/cwd/sw/device/lib/runtime/hart.c:16
  while ((ibex_mcycle_read() - start) < cycles) {
2000272e:       |         97a2                  add     a5,a5,s0
20002730:       |  /----- 00b78663              beq     a5,a1,2000273c <busy_spin_micros+0x54>
20002734:       |  |      00b7b733              sltu    a4,a5,a1
20002738:       +--|----- ff79                  bnez    a4,20002716 <busy_spin_micros+0x2e>
2000273a:       |  |  /-- a021                  j       20002742 <busy_spin_micros+0x5a>
2000273c:       |  \--|-> 00a73733              sltu    a4,a4,a0
20002740:       \-----|-- fb79                  bnez    a4,20002716 <busy_spin_micros+0x2e>
/proc/self/cwd/sw/device/lib/runtime/hart.c:18
  }
}
20002742:             \-> 40b2                  lw      ra,12(sp)
20002744:                 4422                  lw      s0,8(sp)
20002746:                 4492                  lw      s1,4(sp)
20002748:                 0141                  addi    sp,sp,16
2000274a:                 8082                  ret

2000274c <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
2000274c:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21

noreturn void abort(void) {
  while (true) {
20002750:       \-- bff5                        j       2000274c <abort>

20002752 <ibex_mcause_read>:
ibex_mcause_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:11

#include "sw/device/lib/base/csr.h"

uint32_t ibex_mcause_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MCAUSE, &mtval);
20002752:       34202573                csrr    a0,mcause
/proc/self/cwd/sw/device/lib/runtime/ibex.c:12
  return mtval;
20002756:       8082                    ret

20002758 <ibex_mtval_read>:
ibex_mtval_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:17
}

uint32_t ibex_mtval_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MTVAL, &mtval);
20002758:       34302573                csrr    a0,mtval
/proc/self/cwd/sw/device/lib/runtime/ibex.c:18
  return mtval;
2000275c:       8082                    ret

2000275e <ibex_mepc_read>:
ibex_mepc_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:23
}

uint32_t ibex_mepc_read(void) {
  uint32_t mepc;
  CSR_READ(CSR_REG_MEPC, &mepc);
2000275e:       34102573                csrr    a0,mepc
/proc/self/cwd/sw/device/lib/runtime/ibex.c:24
  return mepc;
20002762:       8082                    ret

20002764 <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(const log_fields_t *log, ...) {
20002764:              7179                     addi    sp,sp,-48
20002766:              c606                     sw      ra,12(sp)
20002768:              c422                     sw      s0,8(sp)
2000276a:              c226                     sw      s1,4(sp)
2000276c:              842a                     mv      s0,a0
2000276e:              d646                     sw      a7,44(sp)
20002770:              d442                     sw      a6,40(sp)
20002772:              d23e                     sw      a5,36(sp)
20002774:              d03a                     sw      a4,32(sp)
20002776:              ce36                     sw      a3,28(sp)
20002778:              cc32                     sw      a2,24(sp)
2000277a:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      (size_t)(((const char *)memchr(log->file_name, '\0', PTRDIFF_MAX)) -
2000277c:              4148                     lw      a0,4(a0)
2000277e:              80000637                 lui     a2,0x80000
20002782:              167d                     addi    a2,a2,-1
20002784:              4581                     li      a1,0
20002786:              1eb010ef                 jal     ra,20004170 <memchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:50
               log->file_name);
2000278a:              4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
      (size_t)(((const char *)memchr(log->file_name, '\0', PTRDIFF_MAX)) -
2000278c:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  const char *base_name = memrchr(log->file_name, '/', file_name_len);
20002790:              02f00593                 li      a1,47
20002794:              8536                     mv      a0,a3
20002796:              289010ef                 jal     ra,2000421e <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
  if (base_name == NULL) {
2000279a:       /----- c501                     beqz    a0,200027a2 <base_log_internal_core+0x3e>
/proc/self/cwd/sw/device/lib/runtime/log.c:55
    base_name = log->file_name;
  } else {
    ++base_name;  // Remove the final '/'.
2000279c:       |      00150693                 addi    a3,a0,1
200027a0:       |  /-- a011                     j       200027a4 <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:53
    base_name = log->file_name;
200027a2:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:63
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log->severity),
200027a4:          \-> 4008                     lw      a0,0(s0)
200027a6:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
200027a8:       /----- 00a5ea63                 bltu    a1,a0,200027bc <base_log_internal_core+0x58>
200027ac:       |      00004597                 auipc   a1,0x4
200027b0:       |      81458593                 addi    a1,a1,-2028 # 20005fc0 <test_status_set.log_fields.7+0x30>
200027b4:       |      20b54533                 sh2add  a0,a0,a1
200027b8:       |      410c                     lw      a1,0(a0)
200027ba:       |  /-- a029                     j       200027c4 <base_log_internal_core+0x60>
200027bc:       \--|-> 00004517                 auipc   a0,0x4
200027c0:          |   80050593                 addi    a1,a0,-2048 # 20005fbc <test_status_set.log_fields.7+0x2c>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:64
              global_log_counter, base_name, log->line);
200027c4:          \-> f0000497                 auipc   s1,0xf0000
200027c8:              8d44d603                 lhu     a2,-1836(s1) # 10002098 <base_log_internal_core.global_log_counter>
200027cc:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:63
  base_printf("%s%05d %s:%d] ", stringify_severity(log->severity),
200027ce:              00003517                 auipc   a0,0x3
200027d2:              7d650513                 addi    a0,a0,2006 # 20005fa4 <test_status_set.log_fields.7+0x14>
200027d6:              2cbd                     jal     20002a54 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:65
  ++global_log_counter;
200027d8:              8d449503                 lh      a0,-1836(s1)
200027dc:              0505                     addi    a0,a0,1
200027de:              8ca49a23                 sh      a0,-1836(s1)
200027e2:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:68

  va_list args;
  va_start(args, log);
200027e4:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:69
  base_vprintf(log->format, args);
200027e6:              4808                     lw      a0,16(s0)
200027e8:              084c                     addi    a1,sp,20
200027ea:              2c71                     jal     20002a86 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
  va_end(args);

  base_printf("\r\n");
200027ec:              00003517                 auipc   a0,0x3
200027f0:              7c750513                 addi    a0,a0,1991 # 20005fb3 <test_status_set.log_fields.7+0x23>
200027f4:              2485                     jal     20002a54 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:73
}
200027f6:              40b2                     lw      ra,12(sp)
200027f8:              4422                     lw      s0,8(sp)
200027fa:              4492                     lw      s1,4(sp)
200027fc:              6145                     addi    sp,sp,48
200027fe:              8082                     ret

20002800 <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:85
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
20002800:              1101                     addi    sp,sp,-32
20002802:              ce46                     sw      a7,28(sp)
20002804:              cc42                     sw      a6,24(sp)
20002806:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:86
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
20002808:              00004797                 auipc   a5,0x4
2000280c:              abc7a783                 lw      a5,-1348(a5) # 200062c4 <kDeviceLogBypassUartAddress>
20002810:              c83a                     sw      a4,16(sp)
20002812:              c636                     sw      a3,12(sp)
20002814:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
20002816:              c388                     sw      a0,0(a5)
20002818:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
2000281a:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:91
  for (int i = 0; i < nargs; ++i) {
2000281c:       /----- c989                     beqz    a1,2000282e <base_log_internal_dv+0x2e>
/proc/self/cwd/sw/device/lib/runtime/log.c:92
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
2000281e:       |  /-> 4512                     lw      a0,4(sp)
20002820:       |  |   00450613                 addi    a2,a0,4
20002824:       |  |   c232                     sw      a2,4(sp)
20002826:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:91
  for (int i = 0; i < nargs; ++i) {
20002828:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
2000282a:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:91
2000282c:       |  \-- f9ed                     bnez    a1,2000281e <base_log_internal_dv+0x1e>
/proc/self/cwd/sw/device/lib/runtime/log.c:95
  }
  va_end(args);
}
2000282e:       \----> 6105                     addi    sp,sp,32
20002830:              8082                     ret

20002832 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:57

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
20002832:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:58
  return len;
20002834:       8082                    ret

20002836 <get_spi_device_sink>:
get_spi_device_sink():
/proc/self/cwd/sw/device/lib/runtime/print.c:245
  }

  return write_data_len;
}

sink_func_ptr get_spi_device_sink(void) { return &base_dev_spi_device; }
20002836:       00000517                auipc   a0,0x0
2000283a:       00a50513                addi    a0,a0,10 # 20002840 <base_dev_spi_device>
2000283e:       8082                    ret

20002840 <base_dev_spi_device>:
base_dev_spi_device():
/proc/self/cwd/sw/device/lib/runtime/print.c:227
static size_t base_dev_spi_device(void *data, const char *buf, size_t len) {
20002840:                             715d                      addi    sp,sp,-80
20002842:                             c686                      sw      ra,76(sp)
20002844:                             c4a2                      sw      s0,72(sp)
20002846:                             c2a6                      sw      s1,68(sp)
20002848:                             c0ca                      sw      s2,64(sp)
2000284a:                             de4e                      sw      s3,60(sp)
2000284c:                             dc52                      sw      s4,56(sp)
2000284e:                             da56                      sw      s5,52(sp)
20002850:                             d85a                      sw      s6,48(sp)
20002852:                             d65e                      sw      s7,44(sp)
20002854:                             d462                      sw      s8,40(sp)
20002856:                             d266                      sw      s9,36(sp)
20002858:                             d06a                      sw      s10,32(sp)
2000285a:                             ce6e                      sw      s11,28(sp)
2000285c:                             c22e                      sw      a1,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:230
  while (write_data_len < len) {
2000285e:       /-------------------- 14060963                  beqz    a2,200029b0 <base_dev_spi_device+0x170>
20002862:       |                     8ab2                      mv      s5,a2
20002864:       |                     8d2a                      mv      s10,a0
20002866:       |                     4c81                      li      s9,0
20002868:       |                     a5a5c537                  lui     a0,0xa5a5c
2000286c:       |                     eef50993                  addi    s3,a0,-273 # a5a5beef <_non_volatile_scratch_end+0x859dbeef>
20002870:       |                     02000493                  li      s1,32
20002874:       |                     f0000517                  auipc   a0,0xf0000
20002878:       |                     c42a                      sw      a0,8(sp)
2000287a:       |                     f0000c17                  auipc   s8,0xf0000
2000287e:       |                     7ff00b13                  li      s6,2047
20002882:       |  /----------------> 4581                      li      a1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:231
    size_t payload_len = len - write_data_len;
20002884:       |  |                  419a8533                  sub     a0,s5,s9
/proc/self/cwd/sw/device/lib/runtime/print.c:232
    if (payload_len > kSpiDeviceMaxFramePayloadSizeBytes) {
20002888:       |  |                  7e400613                  li      a2,2020
2000288c:       |  |                  0ac55bb3                  minu    s7,a0,a2
spi_device_send_frame():
/proc/self/cwd/sw/device/lib/runtime/print.c:132
  const size_t data_packet_size_bytes = ((len + 3u) & ~3u);
20002890:       |  |                  003b8513                  addi    a0,s7,3
20002894:       |  |                  9971                      andi    a0,a0,-4
20002896:       |  |                  0070                      addi    a2,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:145
    frame_header_bytes[i] = (kSpiDeviceFrameMagicNumber >> (i * 8)) & 0xff;
20002898:       |  |              /-> 00b9d6b3                  srl     a3,s3,a1
2000289c:       |  |              |   00d60023                  sb      a3,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:144
  for (size_t i = 0; i < 4; ++i) {
200028a0:       |  |              |   05a1                      addi    a1,a1,8
200028a2:       |  |              |   0605                      addi    a2,a2,1
200028a4:       |  |              \-- fe959ae3                  bne     a1,s1,20002898 <base_dev_spi_device+0x58>
200028a8:       |  |                  45a2                      lw      a1,8(sp)
200028aa:       |  |                  8305a583                  lw      a1,-2000(a1)
200028ae:       |  |                  4601                      li      a2,0
base_dev_spi_device():
/proc/self/cwd/sw/device/lib/runtime/print.c:236
    if (spi_device_send_frame(data, buf + write_data_len, payload_len) ==
200028b0:       |  |                  4a12                      lw      s4,4(sp)
200028b2:       |  |                  9a66                      add     s4,s4,s9
200028b4:       |  |                  0814                      addi    a3,sp,16
spi_device_send_frame():
/proc/self/cwd/sw/device/lib/runtime/print.c:149
    frame_header_bytes[i + 4] = (spi_device_frame_num >> (i * 8)) & 0xff;
200028b6:       |  |              /-> 00c5d733                  srl     a4,a1,a2
200028ba:       |  |              |   00e68023                  sb      a4,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:148
  for (size_t i = 0; i < 4; ++i) {
200028be:       |  |              |   0621                      addi    a2,a2,8
200028c0:       |  |              |   0685                      addi    a3,a3,1
200028c2:       |  |              \-- fe961ae3                  bne     a2,s1,200028b6 <base_dev_spi_device+0x76>
200028c6:       |  |                  4581                      li      a1,0
200028c8:       |  |                  0850                      addi    a2,sp,20
/proc/self/cwd/sw/device/lib/runtime/print.c:153
    frame_header_bytes[i + 8] = (len >> (i * 8)) & 0xff;
200028ca:       |  |              /-> 00bbd6b3                  srl     a3,s7,a1
200028ce:       |  |              |   00d60023                  sb      a3,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:152
  for (size_t i = 0; i < 4; ++i) {
200028d2:       |  |              |   05a1                      addi    a1,a1,8
200028d4:       |  |              |   0605                      addi    a2,a2,1
200028d6:       |  |              \-- fe959ae3                  bne     a1,s1,200028ca <base_dev_spi_device+0x8a>
/proc/self/cwd/sw/device/lib/runtime/print.c:134
      kSpiDeviceFrameHeaderSizeBytes + data_packet_size_bytes;
200028da:       |  |                  00c50913                  addi    s2,a0,12 # 10002880 <__global_pointer$+0x98>
200028de:       |  |                  01850413                  addi    s0,a0,24
/proc/self/cwd/sw/device/lib/runtime/print.c:158
    uint32_t last_read_address = 0;
200028e2:       |  |        /-------> cc02                      sw      zero,24(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:159
    if (dif_spi_device_get_last_read_address(spi_device, &last_read_address) !=
200028e4:       |  |        |         082c                      addi    a1,sp,24
200028e6:       |  |        |         856a                      mv      a0,s10
200028e8:       |  |        |         32d000ef                  jal     ra,20003414 <dif_spi_device_get_last_read_address>
200028ec:       |  |  /-----|-------- e15d                      bnez    a0,20002992 <base_dev_spi_device+0x152>
/proc/self/cwd/sw/device/lib/runtime/print.c:172
        (kSpiDeviceReadBufferSizeBytes + last_read_address -
200028ee:       |  |  |     |         4562                      lw      a0,24(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:178
    if (next_read_address > next_write_address) {
200028f0:       |  |  |     |         82ec2d83                  lw      s11,-2002(s8) # 100020a8 <spi_device_send_frame.next_write_address>
/proc/self/cwd/sw/device/lib/runtime/print.c:175
    uint32_t next_read_address = ((adjusted_last_read_address + 1) & ~3u) %
200028f4:       |  |  |     |         7f550513                  addi    a0,a0,2037
200028f8:       |  |  |     |         7fc57513                  andi    a0,a0,2044
/proc/self/cwd/sw/device/lib/runtime/print.c:178
    if (next_read_address > next_write_address) {
200028fc:       |  |  |     |  /----- 00ade563                  bltu    s11,a0,20002906 <base_dev_spi_device+0xc6>
20002900:       |  |  |     |  |      41bb05b3                  sub     a1,s6,s11
20002904:       |  |  |     |  |  /-- a019                      j       2000290a <base_dev_spi_device+0xca>
20002906:       |  |  |     |  \--|-> fffdc593                  not     a1,s11
2000290a:       |  |  |     |     \-> 952e                      add     a0,a0,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:185
  } while ((frame_size_bytes + kSpiDeviceBufferPreservedSizeBytes) >
2000290c:       |  |  |     \-------- fc856be3                  bltu    a0,s0,200028e2 <base_dev_spi_device+0xa2>
20002910:       |  |  |               8456                      mv      s0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:190
      (next_write_address + kSpiDeviceFrameHeaderSizeBytes) %
20002912:       |  |  |               0db1                      addi    s11,s11,12
20002914:       |  |  |               7ffdf693                  andi    a3,s11,2047
/proc/self/cwd/sw/device/lib/runtime/print.c:192
  size_t aligned_data_len = len & (~3u);
20002918:       |  |  |               7fcbfa93                  andi    s5,s7,2044
/proc/self/cwd/sw/device/lib/runtime/print.c:193
  if (!status_ok(spi_device_send_data(spi_device, (uint8_t *)buf,
2000291c:       |  |  |               856a                      mv      a0,s10
2000291e:       |  |  |               85d2                      mv      a1,s4
20002920:       |  |  |               8656                      mv      a2,s5
20002922:       |  |  |               2785                      jal     20003082 <spi_device_send_data>
20002924:       |  |  |  /----------- 06054963                  bltz    a0,20002996 <base_dev_spi_device+0x156>
/proc/self/cwd/sw/device/lib/runtime/print.c:199
  if (len != aligned_data_len) {
20002928:       |  |  |  |  /-------- 037a8e63                  beq     s5,s7,20002964 <base_dev_spi_device+0x124>
/proc/self/cwd/sw/device/lib/runtime/print.c:200
    uint8_t pad_bytes[4] = {0xff, 0xff, 0xff, 0xff};
2000292c:       |  |  |  |  |         557d                      li      a0,-1
2000292e:       |  |  |  |  |         cc2a                      sw      a0,24(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:204
    for (size_t i = 0; i + aligned_data_len < len; i++) {
20002930:       |  |  |  |  |  /----- 037af163                  bgeu    s5,s7,20002952 <base_dev_spi_device+0x112>
20002934:       |  |  |  |  |  |      003bf513                  andi    a0,s7,3
20002938:       |  |  |  |  |  |      015c85b3                  add     a1,s9,s5
2000293c:       |  |  |  |  |  |      4612                      lw      a2,4(sp)
2000293e:       |  |  |  |  |  |      95b2                      add     a1,a1,a2
20002940:       |  |  |  |  |  |      0830                      addi    a2,sp,24
/proc/self/cwd/sw/device/lib/runtime/print.c:205
      pad_bytes[i] = buf[aligned_data_len + i];
20002942:       |  |  |  |  |  |  /-> 00058683                  lb      a3,0(a1)
20002946:       |  |  |  |  |  |  |   00d60023                  sb      a3,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:204
    for (size_t i = 0; i + aligned_data_len < len; i++) {
2000294a:       |  |  |  |  |  |  |   0585                      addi    a1,a1,1
2000294c:       |  |  |  |  |  |  |   157d                      addi    a0,a0,-1
2000294e:       |  |  |  |  |  |  |   0605                      addi    a2,a2,1
20002950:       |  |  |  |  |  |  \-- f96d                      bnez    a0,20002942 <base_dev_spi_device+0x102>
20002952:       |  |  |  |  |  \----> 9aee                      add     s5,s5,s11
20002954:       |  |  |  |  |         7ffaf693                  andi    a3,s5,2047
/proc/self/cwd/sw/device/lib/runtime/print.c:207
    if (!status_ok(spi_device_send_data(spi_device, pad_bytes, 4,
20002958:       |  |  |  |  |         082c                      addi    a1,sp,24
2000295a:       |  |  |  |  |         4611                      li      a2,4
2000295c:       |  |  |  |  |         856a                      mv      a0,s10
2000295e:       |  |  |  |  |         2715                      jal     20003082 <spi_device_send_data>
20002960:       |  |  |  +--|-------- 02054b63                  bltz    a0,20002996 <base_dev_spi_device+0x156>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
                                      next_write_address))) {
20002964:       |  |  |  |  \-------> 82ec2683                  lw      a3,-2002(s8)
/proc/self/cwd/sw/device/lib/runtime/print.c:214
  if (!status_ok(spi_device_send_data(spi_device, frame_header_bytes,
20002968:       |  |  |  |            006c                      addi    a1,sp,12
2000296a:       |  |  |  |            4631                      li      a2,12
2000296c:       |  |  |  |            856a                      mv      a0,s10
2000296e:       |  |  |  |            2f11                      jal     20003082 <spi_device_send_data>
20002970:       |  |  |  +----------- 02054363                  bltz    a0,20002996 <base_dev_spi_device+0x156>
/proc/self/cwd/sw/device/lib/runtime/print.c:221
      (next_write_address + frame_size_bytes) % kSpiDeviceReadBufferSizeBytes;
20002974:       |  |  |  |            82ec2503                  lw      a0,-2002(s8)
20002978:       |  |  |  |            4622                      lw      a2,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:222
  spi_device_frame_num++;
2000297a:       |  |  |  |            83062583                  lw      a1,-2000(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:221
      (next_write_address + frame_size_bytes) % kSpiDeviceReadBufferSizeBytes;
2000297e:       |  |  |  |            954a                      add     a0,a0,s2
20002980:       |  |  |  |            7ff57513                  andi    a0,a0,2047
/proc/self/cwd/sw/device/lib/runtime/print.c:220
  next_write_address =
20002984:       |  |  |  |            82ac2723                  sw      a0,-2002(s8)
/proc/self/cwd/sw/device/lib/runtime/print.c:222
  spi_device_frame_num++;
20002988:       |  |  |  |            0585                      addi    a1,a1,1
2000298a:       |  |  |  |            82b62823                  sw      a1,-2000(a2)
2000298e:       |  |  |  |            855e                      mv      a0,s7
20002990:       |  |  |  |     /----- a021                      j       20002998 <base_dev_spi_device+0x158>
20002992:       |  |  \--|-----|----> 4501                      li      a0,0
20002994:       |  |     |     |  /-- a019                      j       2000299a <base_dev_spi_device+0x15a>
20002996:       |  |     \-----|--|-> 4501                      li      a0,0
20002998:       |  |           \--|-> 8aa2                      mv      s5,s0
base_dev_spi_device():
/proc/self/cwd/sw/device/lib/runtime/print.c:236
    if (spi_device_send_frame(data, buf + write_data_len, payload_len) ==
2000299a:       |  |              \-> 01754533                  xor     a0,a0,s7
2000299e:       |  |                  00a03533                  snez    a0,a0
200029a2:       |  |                  157d                      addi    a0,a0,-1
200029a4:       |  |                  01757533                  and     a0,a0,s7
200029a8:       |  |                  9caa                      add     s9,s9,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:230
  while (write_data_len < len) {
200029aa:       |  \----------------- ed5cece3                  bltu    s9,s5,20002882 <base_dev_spi_device+0x42>
200029ae:       |                 /-- a011                      j       200029b2 <base_dev_spi_device+0x172>
200029b0:       \-----------------|-> 4c81                      li      s9,0
/proc/self/cwd/sw/device/lib/runtime/print.c:242
  return write_data_len;
200029b2:                         \-> 8566                      mv      a0,s9
200029b4:                             40b6                      lw      ra,76(sp)
200029b6:                             4426                      lw      s0,72(sp)
200029b8:                             4496                      lw      s1,68(sp)
200029ba:                             4906                      lw      s2,64(sp)
200029bc:                             59f2                      lw      s3,60(sp)
200029be:                             5a62                      lw      s4,56(sp)
200029c0:                             5ad2                      lw      s5,52(sp)
200029c2:                             5b42                      lw      s6,48(sp)
200029c4:                             5bb2                      lw      s7,44(sp)
200029c6:                             5c22                      lw      s8,40(sp)
200029c8:                             5c92                      lw      s9,36(sp)
200029ca:                             5d02                      lw      s10,32(sp)
200029cc:                             4df2                      lw      s11,28(sp)
200029ce:                             6161                      addi    sp,sp,80
200029d0:                             8082                      ret

200029d2 <get_uart_sink>:
get_uart_sink():
/proc/self/cwd/sw/device/lib/runtime/print.c:257
    }
  }
  return len;
}

sink_func_ptr get_uart_sink(void) { return &base_dev_uart; }
200029d2:       00000517                auipc   a0,0x0
200029d6:       00a50513                addi    a0,a0,10 # 200029dc <base_dev_uart>
200029da:       8082                    ret

200029dc <base_dev_uart>:
base_dev_uart():
/proc/self/cwd/sw/device/lib/runtime/print.c:247
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
200029dc:                 1101                  addi    sp,sp,-32
200029de:                 ce06                  sw      ra,28(sp)
200029e0:                 cc22                  sw      s0,24(sp)
200029e2:                 ca26                  sw      s1,20(sp)
200029e4:                 c84a                  sw      s2,16(sp)
200029e6:                 c64e                  sw      s3,12(sp)
200029e8:                 8932                  mv      s2,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:249
  for (size_t i = 0; i < len; ++i) {
200029ea:       /-------- c20d                  beqz    a2,20002a0c <base_dev_uart+0x30>
200029ec:       |         89ae                  mv      s3,a1
200029ee:       |         842a                  mv      s0,a0
200029f0:       |         4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:250
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifOk) {
200029f2:       |  /----> 00998533              add     a0,s3,s1
200029f6:       |  |      00054583              lbu     a1,0(a0)
200029fa:       |  |      8522                  mv      a0,s0
200029fc:       |  |      6c1000ef              jal     ra,200038bc <dif_uart_byte_send_polled>
20002a00:       |  |  /-- e519                  bnez    a0,20002a0e <base_dev_uart+0x32>
/proc/self/cwd/sw/device/lib/runtime/print.c:249
  for (size_t i = 0; i < len; ++i) {
20002a02:       |  |  |   0485                  addi    s1,s1,1
20002a04:       |  \--|-- fe9917e3              bne     s2,s1,200029f2 <base_dev_uart+0x16>
20002a08:       |     |   84ca                  mv      s1,s2
20002a0a:       |     +-- a011                  j       20002a0e <base_dev_uart+0x32>
20002a0c:       \-----|-> 4481                  li      s1,0
20002a0e:             \-> 0b24d533              minu    a0,s1,s2
/proc/self/cwd/sw/device/lib/runtime/print.c:255
}
20002a12:                 40f2                  lw      ra,28(sp)
20002a14:                 4462                  lw      s0,24(sp)
20002a16:                 44d2                  lw      s1,20(sp)
20002a18:                 4942                  lw      s2,16(sp)
20002a1a:                 49b2                  lw      s3,12(sp)
20002a1c:                 6105                  addi    sp,sp,32
20002a1e:                 8082                  ret

20002a20 <base_spi_device_stdout>:
base_spi_device_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:261

void base_spi_device_stdout(const dif_spi_device_handle_t *spi_device) {
  // Reset the frame counter.
  spi_device_frame_num = 0;
20002a20:       effff597                auipc   a1,0xeffff
20002a24:       6805a223                sw      zero,1668(a1) # 100020a4 <spi_device_frame_num>
base_set_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  base_stdout = out;
20002a28:       effff597                auipc   a1,0xeffff
20002a2c:       67458593                addi    a1,a1,1652 # 1000209c <base_stdout>
20002a30:       c188                    sw      a0,0(a1)
20002a32:       00000517                auipc   a0,0x0
20002a36:       e0e50513                addi    a0,a0,-498 # 20002840 <base_dev_spi_device>
20002a3a:       c1c8                    sw      a0,4(a1)
base_spi_device_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:264
  base_set_stdout((buffer_sink_t){.data = (void *)spi_device,
                                  .sink = &base_dev_spi_device});
}
20002a3c:       8082                    ret

20002a3e <base_uart_stdout>:
base_set_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  base_stdout = out;
20002a3e:       effff597                auipc   a1,0xeffff
20002a42:       65e58593                addi    a1,a1,1630 # 1000209c <base_stdout>
20002a46:       c188                    sw      a0,0(a1)
20002a48:       00000517                auipc   a0,0x0
20002a4c:       f9450513                addi    a0,a0,-108 # 200029dc <base_dev_uart>
20002a50:       c1c8                    sw      a0,4(a1)
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:269

void base_uart_stdout(const dif_uart_t *uart) {
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
20002a52:       8082                    ret

20002a54 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:271

size_t base_printf(const char *format, ...) {
20002a54:       7179                    addi    sp,sp,-48
20002a56:       c606                    sw      ra,12(sp)
20002a58:       d646                    sw      a7,44(sp)
20002a5a:       d442                    sw      a6,40(sp)
20002a5c:       d23e                    sw      a5,36(sp)
20002a5e:       d03a                    sw      a4,32(sp)
20002a60:       ce36                    sw      a3,28(sp)
20002a62:       cc32                    sw      a2,24(sp)
20002a64:       ca2e                    sw      a1,20(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
20002a66:       effff597                auipc   a1,0xeffff
20002a6a:       63658593                addi    a1,a1,1590 # 1000209c <base_stdout>
20002a6e:       4190                    lw      a2,0(a1)
20002a70:       41cc                    lw      a1,4(a1)
20002a72:       872a                    mv      a4,a0
20002a74:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:273
  va_start(args, format);
20002a76:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  return base_vfprintf(base_stdout, format, args);
20002a78:       0854                    addi    a3,sp,20
20002a7a:       8532                    mv      a0,a2
20002a7c:       863a                    mv      a2,a4
20002a7e:       200d                    jal     20002aa0 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:276
  return bytes_left;
20002a80:       40b2                    lw      ra,12(sp)
20002a82:       6145                    addi    sp,sp,48
20002a84:       8082                    ret

20002a86 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  return base_vfprintf(base_stdout, format, args);
20002a86:       effff617                auipc   a2,0xeffff
20002a8a:       61660693                addi    a3,a2,1558 # 1000209c <base_stdout>
20002a8e:       4290                    lw      a2,0(a3)
20002a90:       42d4                    lw      a3,4(a3)
20002a92:       872e                    mv      a4,a1
20002a94:       87aa                    mv      a5,a0
20002a96:       8532                    mv      a0,a2
20002a98:       85b6                    mv      a1,a3
20002a9a:       863e                    mv      a2,a5
20002a9c:       86ba                    mv      a3,a4
20002a9e:       a009                    j       20002aa0 <base_vfprintf>

20002aa0 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:733
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
20002aa0:                                                                          711d                 addi    sp,sp,-96
20002aa2:                                                                          ce86                 sw      ra,92(sp)
20002aa4:                                                                          cca2                 sw      s0,88(sp)
20002aa6:                                                                          caa6                 sw      s1,84(sp)
20002aa8:                                                                          c8ca                 sw      s2,80(sp)
20002aaa:                                                                          c6ce                 sw      s3,76(sp)
20002aac:                                                                          c4d2                 sw      s4,72(sp)
20002aae:                                                                          c2d6                 sw      s5,68(sp)
20002ab0:                                                                          c0da                 sw      s6,64(sp)
20002ab2:                                                                          de5e                 sw      s7,60(sp)
20002ab4:                                                                          dc62                 sw      s8,56(sp)
20002ab6:                                                                          da66                 sw      s9,52(sp)
20002ab8:                                                                          d86a                 sw      s10,48(sp)
20002aba:                                                                          d66e                 sw      s11,44(sp)
20002abc:                                                                          8432                 mv      s0,a2
20002abe:                                                                          cc36                 sw      a3,24(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:743
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
20002ac0:                                                                          ca36                 sw      a3,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:746

  size_t bytes_written = 0;
  while (format[0] != '\0') {
20002ac2:                                                                          00064603             lbu     a2,0(a2)
20002ac6:       /----------------------------------------------------------------- 4a060563             beqz    a2,20002f70 <base_vfprintf+0x4d0>
20002aca:       |                                                                  89ae                 mv      s3,a1
20002acc:       |                                                                  892a                 mv      s2,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:734
  if (out.sink == NULL) {
20002ace:       |                                                              /-- e589                 bnez    a1,20002ad8 <base_vfprintf+0x38>
20002ad0:       |                                                              |   00000517             auipc   a0,0x0
20002ad4:       |                                                              |   d6250993             addi    s3,a0,-670 # 20002832 <base_dev_null>
20002ad8:       |                                                              \-> 4a81                 li      s5,0
20002ada:       |                                                                  4a01                 li      s4,0
20002adc:       |                                                                  02500c93             li      s9,37
20002ae0:       |                                                                  02100d13             li      s10,33
20002ae4:       |                                                                  0f600d93             li      s11,246
20002ae8:       |                                                                  650d                 lui     a0,0x3
20002aea:       |                                                                  c2250513             addi    a0,a0,-990 # 2c22 <_static_critical_size+0xc3a>
20002aee:       |                                                                  c82a                 sw      a0,16(sp)
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:341
    char c = (*format)[text_len];
20002af0:       |           /----------------------------------------------------> 01440533             add     a0,s0,s4
20002af4:       |           |                                                      00054483             lbu     s1,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    if (c == '\0' || c == kPercent) {
20002af8:       |           |                                                  /-- 01948363             beq     s1,s9,20002afe <base_vfprintf+0x5e>
20002afc:       |           |                                            /-----|-- ec91                 bnez    s1,20002b18 <base_vfprintf+0x78>
/proc/self/cwd/sw/device/lib/runtime/print.c:343
      if (text_len > 0) {
20002afe:       |           |                                            |  /--\-X 000a0763             beqz    s4,20002b0c <base_vfprintf+0x6c>
/proc/self/cwd/sw/device/lib/runtime/print.c:344
        *bytes_written += out.sink(out.data, *format, text_len);
20002b02:       |           |                                            |  |      854a                 mv      a0,s2
20002b04:       |           |                                            |  |      85a2                 mv      a1,s0
20002b06:       |           |                                            |  |      8652                 mv      a2,s4
20002b08:       |           |                                            |  |      9982                 jalr    s3
20002b0a:       |           |                                            |  |      9aaa                 add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:346
      *format += text_len;
20002b0c:       |           |                                            |  \----> 9452                 add     s0,s0,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      return c != '\0';
20002b0e:       |           |                                            |         00903bb3             snez    s7,s1
20002b12:       |           |                                            |  /----- 01949663             bne     s1,s9,20002b1e <base_vfprintf+0x7e>
20002b16:       |           |                                            |  |  /-- a029                 j       20002b20 <base_vfprintf+0x80>
/proc/self/cwd/sw/device/lib/runtime/print.c:349
    ++text_len;
20002b18:       |           |                                            \--|--|-> 0a05                 addi    s4,s4,1
20002b1a:       |           |                                               |  +-- 01948363             beq     s1,s9,20002b20 <base_vfprintf+0x80>
20002b1e:       |           +-----------------------------------------------\--|-X f8e9                 bnez    s1,20002af0 <base_vfprintf+0x50>
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:747
    if (!consume_until_percent(out, &format, &bytes_written)) {
20002b20:       |           |                                                  \-> 001bf513             andi    a0,s7,1
20002b24:       |  /--------|----------------------------------------------------- 44050763             beqz    a0,20002f72 <base_vfprintf+0x4d2>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:382
  if ((*format)[0] == '!') {
20002b28:       |  |        |                                                      00144a03             lbu     s4,1(s0)
20002b2c:       |  |        |                                               /----- 01aa1763             bne     s4,s10,20002b3a <base_vfprintf+0x9a>
/proc/self/cwd/sw/device/lib/runtime/print.c:395
    char c = (*format)[spec_len];
20002b30:       |  |        |                                               |      00244583             lbu     a1,2(s0)
/proc/self/cwd/sw/device/lib/runtime/print.c:384
    ++(*format);
20002b34:       |  |        |                                               |      0409                 addi    s0,s0,2
20002b36:       |  |        |                                               |      4b05                 li      s6,1
20002b38:       |  |        |                                               |  /-- a021                 j       20002b40 <base_vfprintf+0xa0>
20002b3a:       |  |        |                                               \--|-> 4b01                 li      s6,0
20002b3c:       |  |        |                                                  |   0405                 addi    s0,s0,1
20002b3e:       |  |        |                                                  |   85d2                 mv      a1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:396
    if (c == '\0') {
20002b40:       |  |  /-----|--------------------------------------------------\-X 40058f63             beqz    a1,20002f5e <base_vfprintf+0x4be>
20002b44:       |  |  |     |                                                      4481                 li      s1,0
20002b46:       |  |  |     |                                                      4c01                 li      s8,0
20002b48:       |  |  |     |                                                      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:400
    if (c < '0' || c > '9') {
20002b4a:       |  |  |     |                                                      0405                 addi    s0,s0,1
20002b4c:       |  |  |     |                                         /----------> fc658613             addi    a2,a1,-58
20002b50:       |  |  |     |                                         |            0ff67613             andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:396
    if (c == '\0') {
20002b54:       |  |  |     |                                         |            0ff5f593             andi    a1,a1,255
/proc/self/cwd/sw/device/lib/runtime/print.c:400
    if (c < '0' || c > '9') {
20002b58:       |  |  |     |                                         |  /-------- 03b66c63             bltu    a2,s11,20002b90 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
    if (spec->padding == 0) {
20002b5c:       |  |  |     |                                         |  |         0ff57613             andi    a2,a0,255
20002b60:       |  |  |     |                                         |  |  /----- ee09                 bnez    a2,20002b7a <base_vfprintf+0xda>
20002b62:       |  |  |     |                                         |  |  |      02000c13             li      s8,32
20002b66:       |  |  |     |                                         |  |  |      03000613             li      a2,48
20002b6a:       |  |  |     |                                         |  |  |      02000513             li      a0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:404
      if (c == '0') {
20002b6e:       |  |  |     |                                         |  |  +----- 00c59663             bne     a1,a2,20002b7a <base_vfprintf+0xda>
20002b72:       |  |  |     |                                         |  |  |      03000513             li      a0,48
20002b76:       |  |  |     |                                         |  |  |      8c32                 mv      s8,a2
20002b78:       |  |  |     |                                         |  |  |  /-- a039                 j       20002b86 <base_vfprintf+0xe6>
/proc/self/cwd/sw/device/lib/runtime/print.c:412
    spec->width += (c - '0');
20002b7a:       |  |  |     |                                         |  |  \--|-> 2094c633             sh2add  a2,s1,s1
20002b7e:       |  |  |     |                                         |  |     |   20b625b3             sh1add  a1,a2,a1
20002b82:       |  |  |     |                                         |  |     |   fd058493             addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:395
    char c = (*format)[spec_len];
20002b86:       |  |  |     |                                         |  |     \-> 00044583             lbu     a1,0(s0)
/proc/self/cwd/sw/device/lib/runtime/print.c:396
    if (c == '\0') {
20002b8a:       |  |  |     |                                         |  |         0405                 addi    s0,s0,1
20002b8c:       |  |  |     |                                         \--|-------- f1e1                 bnez    a1,20002b4c <base_vfprintf+0xac>
20002b8e:       |  |  +-----|--------------------------------------------|-------- aec1                 j       20002f5e <base_vfprintf+0x4be>
/proc/self/cwd/sw/device/lib/runtime/print.c:416
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
20002b90:       |  |  |     |                                            \-----/-X c481                 beqz    s1,20002b98 <base_vfprintf+0xf8>
20002b92:       |  |  |     |                                               /--|-- 01a4e763             bltu    s1,s10,20002ba0 <base_vfprintf+0x100>
20002b96:       |  |  |  /--|-----------------------------------------------|--|-- aef5                 j       20002f92 <base_vfprintf+0x4f2>
20002b98:       |  |  |  |  |                                               |  \-> 0ff57513             andi    a0,a0,255
20002b9c:       |  |  |  +--|-----------------------------------------------|----- 3e051b63             bnez    a0,20002f92 <base_vfprintf+0x4f2>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:561
  switch (spec.type) {
20002ba0:       |  |  |  |  |                                               \----> 05700513             li      a0,87
20002ba4:       |  |  |  |  |                                               /----- 04b55d63             bge     a0,a1,20002bfe <base_vfprintf+0x15e>
20002ba8:       |  |  |  |  |                                               |      fa858513             addi    a0,a1,-88
20002bac:       |  |  |  |  |        /--------------------------------------|----- 2cad6563             bltu    s10,a0,20002e76 <base_vfprintf+0x3d6>
20002bb0:       |  |  |  |  |        |                                      |      00003597             auipc   a1,0x3
20002bb4:       |  |  |  |  |        |                                      |      42058593             addi    a1,a1,1056 # 20005fd0 <test_status_set.log_fields.7+0x40>
20002bb8:       |  |  |  |  |        |                                      |      20b54533             sh2add  a0,a0,a1
20002bbc:       |  |  |  |  |        |                                      |      4108                 lw      a0,0(a0)
20002bbe:       |  |  |  |  |        |                                      |      8502                 jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:609
      if (spec.is_nonstd) {
20002bc0:       |  |  |  |  |        +--------------------------------------|----- 2baa0b63             beq     s4,s10,20002e76 <base_vfprintf+0x3d6>
/proc/self/cwd/sw/device/lib/runtime/print.c:612
      uint32_t value = va_arg(*args, uint32_t);
20002bc4:       |  |  |  |  |        |                                      |      4552                 lw      a0,20(sp)
20002bc6:       |  |  |  |  |        |                                      |      00450593             addi    a1,a0,4
20002bca:       |  |  |  |  |        |                                      |      ca2e                 sw      a1,20(sp)
20002bcc:       |  |  |  |  |        |                                      |      00052b03             lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:613
      if (((int32_t)value) < 0) {
20002bd0:       |  |  |  |  |        |                                      |  /-- 000b5c63             bgez    s6,20002be8 <base_vfprintf+0x148>
/proc/self/cwd/sw/device/lib/runtime/print.c:614
        *bytes_written += out.sink(out.data, "-", 1);
20002bd4:       |  |  |  |  |        |                                      |  |   00003517             auipc   a0,0x3
20002bd8:       |  |  |  |  |        |                                      |  |   4b450593             addi    a1,a0,1204 # 20006088 <test_status_set.log_fields.7+0xf8>
20002bdc:       |  |  |  |  |        |                                      |  |   4605                 li      a2,1
20002bde:       |  |  |  |  |        |                                      |  |   854a                 mv      a0,s2
20002be0:       |  |  |  |  |        |                                      |  |   9982                 jalr    s3
20002be2:       |  |  |  |  |        |                                      |  |   9aaa                 add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:615
        value = -value;
20002be4:       |  |  |  |  |        |                                      |  |   41600b33             neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:618
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
20002be8:       |  |  |  |  |        |                                      |  \-> 0ffc7713             andi    a4,s8,255
20002bec:       |  |  |  |  |        |                                      |      00003517             auipc   a0,0x3
20002bf0:       |  |  |  |  |        |                                      |      4b550813             addi    a6,a0,1205 # 200060a1 <kDigitsLow>
20002bf4:       |  |  |  |  |        |                                      |      47a9                 li      a5,10
20002bf6:       |  |  |  |  |        |                                      |      854a                 mv      a0,s2
20002bf8:       |  |  |  |  |        |                                      |      85ce                 mv      a1,s3
20002bfa:       |  |  |  |  |        |                                      |      865a                 mv      a2,s6
20002bfc:       |  |  |  |  |        |              /-----------------------|----- a489                 j       20002e3e <base_vfprintf+0x39e>
20002bfe:       |  |  |  |  |        |           /--|-----------------------\----X 27958a63             beq     a1,s9,20002e72 <base_vfprintf+0x3d2>
/proc/self/cwd/sw/device/lib/runtime/print.c:561
  switch (spec.type) {
20002c02:       |  |  |  |  |        |           |  |                              04300513             li      a0,67
20002c06:       |  |  |  |  |        |     /-----|--|----------------------------- 28a58663             beq     a1,a0,20002e92 <base_vfprintf+0x3f2>
20002c0a:       |  |  |  |  |        |     |     |  |                              04800513             li      a0,72
20002c0e:       |  |  |  |  |        |     |     |  |                          /-- 02a58563             beq     a1,a0,20002c38 <base_vfprintf+0x198>
20002c12:       |  |  |  |  |        +-----|-----|--|--------------------------|-- a495                 j       20002e76 <base_vfprintf+0x3d6>
/proc/self/cwd/sw/device/lib/runtime/print.c:662
      if (spec.is_nonstd) {
20002c14:       |  |  |  |  |        |     |     |  |                          +-- 03aa1263             bne     s4,s10,20002c38 <base_vfprintf+0x198>
/proc/self/cwd/sw/device/lib/runtime/print.c:663
        size_t len = va_arg(*args, size_t);
20002c18:       |  |  |  |  |        |     |     |  |                          |   4552                 lw      a0,20(sp)
20002c1a:       |  |  |  |  |        |     |     |  |                          |   00450593             addi    a1,a0,4
20002c1e:       |  |  |  |  |        |     |     |  |                          |   ca2e                 sw      a1,20(sp)
20002c20:       |  |  |  |  |        |     |     |  |                          |   4114                 lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:664
        char *value = va_arg(*args, char *);
20002c22:       |  |  |  |  |        |     |     |  |                          |   00850593             addi    a1,a0,8
20002c26:       |  |  |  |  |        |     |     |  |                          |   ca2e                 sw      a1,20(sp)
20002c28:       |  |  |  |  |        |     |     |  |                          |   4150                 lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:665
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
20002c2a:       |  |  |  |  |        |     |     |  |                          |   0ffc7793             andi    a5,s8,255
20002c2e:       |  |  |  |  |        |     |     |  |                          |   00003517             auipc   a0,0x3
20002c32:       |  |  |  |  |        |     |     |  |                          |   4a050893             addi    a7,a0,1184 # 200060ce <kDigitsHigh>
20002c36:       |  |  |  |  |        |     |     |  |                       /--|-- a2cd                 j       20002e18 <base_vfprintf+0x378>
/proc/self/cwd/sw/device/lib/runtime/print.c:671
      uint32_t value = va_arg(*args, uint32_t);
20002c38:       |  |  |  |  |        |     |     |  |                       |  \-> 4552                 lw      a0,20(sp)
20002c3a:       |  |  |  |  |        |     |     |  |                       |      00450593             addi    a1,a0,4
20002c3e:       |  |  |  |  |        |     |     |  |                       |      ca2e                 sw      a1,20(sp)
20002c40:       |  |  |  |  |        |     |     |  |                       |      4110                 lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:673
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
20002c42:       |  |  |  |  |        |     |     |  |                       |      0ffc7713             andi    a4,s8,255
20002c46:       |  |  |  |  |        |     |     |  |                       |      00003517             auipc   a0,0x3
20002c4a:       |  |  |  |  |        |     |     |  |                       |      48850813             addi    a6,a0,1160 # 200060ce <kDigitsHigh>
20002c4e:       |  |  |  |  |        |     |     |  |                    /--|----- a2ed                 j       20002e38 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:687
      if (!spec.is_nonstd) {
20002c50:       |  |  |  |  |        +-----|-----|--|--------------------|--|----- 23aa1363             bne     s4,s10,20002e76 <base_vfprintf+0x3d6>
/proc/self/cwd/sw/device/lib/runtime/print.c:690
      size_t len = va_arg(*args, size_t);
20002c54:       |  |  |  |  |        |     |     |  |                    |  |      4552                 lw      a0,20(sp)
20002c56:       |  |  |  |  |        |     |     |  |                    |  |      00450593             addi    a1,a0,4
20002c5a:       |  |  |  |  |        |     |     |  |                    |  |      ca2e                 sw      a1,20(sp)
20002c5c:       |  |  |  |  |        |     |     |  |                    |  |      4114                 lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:691
      char *value = va_arg(*args, char *);
20002c5e:       |  |  |  |  |        |     |     |  |                    |  |      00850593             addi    a1,a0,8
20002c62:       |  |  |  |  |        |     |     |  |                    |  |      ca2e                 sw      a1,20(sp)
20002c64:       |  |  |  |  |        |     |     |  |                    |  |      4150                 lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:692
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
20002c66:       |  |  |  |  |        |     |     |  |                    |  |      0ffc7793             andi    a5,s8,255
20002c6a:       |  |  |  |  |        |     |     |  |                    |  |      00003517             auipc   a0,0x3
20002c6e:       |  |  |  |  |        |     |     |  |                    |  |      46450893             addi    a7,a0,1124 # 200060ce <kDigitsHigh>
20002c72:       |  |  |  |  |        |     |     |  |        /-----------|--|----- aad5                 j       20002e66 <base_vfprintf+0x3c6>
20002c74:       |  |  |  |  |        |     |     |  |        |           |  |      4552                 lw      a0,20(sp)
20002c76:       |  |  |  |  |        |     |     |  |        |           |  |      00450593             addi    a1,a0,4
20002c7a:       |  |  |  |  |        |     |     |  |        |           |  |      ca2e                 sw      a1,20(sp)
20002c7c:       |  |  |  |  |        |     |     |  |        |           |  |      4110                 lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:706
      if (spec.is_nonstd) {
20002c7e:       |  |  |  |  |        |     |  /--|--|--------|-----------|--|----- 27aa1b63             bne     s4,s10,20002ef4 <base_vfprintf+0x454>
/proc/self/cwd/sw/device/lib/runtime/print.c:709
        if (va_arg(*args, int) != 0) {
20002c82:       |  |  |  |  |  /-----|-----|--|--|--|--------|-----------|--|----- 2c060863             beqz    a2,20002f52 <base_vfprintf+0x4b2>
/proc/self/cwd/sw/device/lib/runtime/print.c:710
          *bytes_written += out.sink(out.data, "true", 4);
20002c86:       |  |  |  |  |  |     |     |  |  |  |        |           |  |      00003517             auipc   a0,0x3
20002c8a:       |  |  |  |  |  |     |     |  |  |  |        |           |  |      40750593             addi    a1,a0,1031 # 2000608d <test_status_set.log_fields.7+0xfd>
20002c8e:       |  |  |  |  |  |     |     |  |  |  |        |           |  |      4611                 li      a2,4
20002c90:       |  |  |  |  |  |  /--|-----|--|--|--|--------|-----------|--|----- aac5                 j       20002e80 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:570
      if (spec.is_nonstd) {
20002c92:       |  |  |  |  |  |  |  +-----|--|--|--|--------|-----------|--|----- 1faa0263             beq     s4,s10,20002e76 <base_vfprintf+0x3d6>
/proc/self/cwd/sw/device/lib/runtime/print.c:573
      char value = (char)va_arg(*args, uint32_t);
20002c96:       |  |  |  |  |  |  |  |     |  |  |  |        |           |  |      4552                 lw      a0,20(sp)
20002c98:       |  |  |  |  |  |  |  |     |  |  |  |        |           |  |      00450593             addi    a1,a0,4
20002c9c:       |  |  |  |  |  |  |  |     |  |  |  |        |           |  |      ca2e                 sw      a1,20(sp)
20002c9e:       |  |  |  |  |  |  |  |     |  |  |  |        |           |  |      4108                 lw      a0,0(a0)
20002ca0:       |  |  |  |  |  |  |  |     |  |  |  |        |           |  |      02a10223             sb      a0,36(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:574
      *bytes_written += out.sink(out.data, &value, 1);
20002ca4:       |  |  |  |  |  |  |  |     |  |  |  |        |           |  |      104c                 addi    a1,sp,36
20002ca6:       |  |  |  |  |  |  |  |  /--|--|--|--|--------|-----------|--|----- a465                 j       20002f4e <base_vfprintf+0x4ae>
/proc/self/cwd/sw/device/lib/runtime/print.c:622
      if (spec.is_nonstd) {
20002ca8:       |  |  |  |  |  |  |  +--|--|--|--|--|--------|-----------|--|----- 1daa0763             beq     s4,s10,20002e76 <base_vfprintf+0x3d6>
/proc/self/cwd/sw/device/lib/runtime/print.c:625
      uint32_t value = va_arg(*args, uint32_t);
20002cac:       |  |  |  |  |  |  |  |  |  |  |  |  |        |           |  |      4552                 lw      a0,20(sp)
20002cae:       |  |  |  |  |  |  |  |  |  |  |  |  |        |           |  |      00450593             addi    a1,a0,4
20002cb2:       |  |  |  |  |  |  |  |  |  |  |  |  |        |           |  |      ca2e                 sw      a1,20(sp)
20002cb4:       |  |  |  |  |  |  |  |  |  |  |  |  |        |           |  |      4110                 lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:627
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
20002cb6:       |  |  |  |  |  |  |  |  |  |  |  |  |        |           |  |      0ffc7713             andi    a4,s8,255
20002cba:       |  |  |  |  |  |  |  |  |  |  |  |  |        |           |  |      00003517             auipc   a0,0x3
20002cbe:       |  |  |  |  |  |  |  |  |  |  |  |  |        |           |  |      3e750813             addi    a6,a0,999 # 200060a1 <kDigitsLow>
20002cc2:       |  |  |  |  |  |  |  |  |  |  |  |  |        |           |  |      47a1                 li      a5,8
20002cc4:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-----|-----------|--|----- aa9d                 j       20002e3a <base_vfprintf+0x39a>
/proc/self/cwd/sw/device/lib/runtime/print.c:631
      if (spec.is_nonstd) {
20002cc6:       |  |  |  |  |  |  |  +--|--|--|--|--|--|-----|-----------|--|----- 1baa0863             beq     s4,s10,20002e76 <base_vfprintf+0x3d6>
/proc/self/cwd/sw/device/lib/runtime/print.c:640
      *bytes_written += out.sink(out.data, "0x", 2);
20002cca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      00003517             auipc   a0,0x3
20002cce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      3c050593             addi    a1,a0,960 # 2000608a <test_status_set.log_fields.7+0xfa>
20002cd2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      4609                 li      a2,2
20002cd4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      854a                 mv      a0,s2
20002cd6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      9982                 jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:641
      uintptr_t value = va_arg(*args, uintptr_t);
20002cd8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      45d2                 lw      a1,20(sp)
20002cda:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      00458613             addi    a2,a1,4
20002cde:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      ca32                 sw      a2,20(sp)
20002ce0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      4190                 lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:640
      *bytes_written += out.sink(out.data, "0x", 2);
20002ce2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      9aaa                 add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:643
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
20002ce4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      00003517             auipc   a0,0x3
20002ce8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      3bd50813             addi    a6,a0,957 # 200060a1 <kDigitsLow>
20002cec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      46a1                 li      a3,8
20002cee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      03000713             li      a4,48
20002cf2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      47c1                 li      a5,16
20002cf4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      854a                 mv      a0,s2
20002cf6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      85ce                 mv      a1,s3
20002cf8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      2155                 jal     2000319c <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:642
      *bytes_written +=
20002cfa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |  |      9aaa                 add     s5,s5,a0
20002cfc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-----------|--|----- a269                 j       20002e86 <base_vfprintf+0x3e6>
/proc/self/cwd/sw/device/lib/runtime/print.c:722
      status_t value = va_arg(*args, status_t);
20002cfe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      4552                 lw      a0,20(sp)
20002d00:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      00450593             addi    a1,a0,4
20002d04:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      ca2e                 sw      a1,20(sp)
20002d06:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      4108                 lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:467
  char mod[] = {'"', 0, 0, 0, '"', ','};
20002d08:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      45c2                 lw      a1,16(sp)
20002d0a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      02b11423             sh      a1,40(sp)
20002d0e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      02200593             li      a1,34
20002d12:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      d22e                 sw      a1,36(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:470
  bool err = status_extract(value, &start, &arg, &mod[1]);
20002d14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      086c                 addi    a1,sp,28
20002d16:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      1010                 addi    a2,sp,32
20002d18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      02510693             addi    a3,sp,37
20002d1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      23e9                 jal     200032e6 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:473
  const char *end = start;
20002d1e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      45f2                 lw      a1,28(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:470
  bool err = status_extract(value, &start, &arg, &mod[1]);
20002d20:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      c62a                 sw      a0,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:474
  while (*end)
20002d22:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      fff58493             addi    s1,a1,-1
20002d26:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  /-> 0005c503             lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:475
    end++;
20002d2a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |   0585                 addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:474
  while (*end)
20002d2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |   0485                 addi    s1,s1,1
20002d2e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  \-- fd65                 bnez    a0,20002d26 <base_vfprintf+0x286>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:382
  if ((*format)[0] == '!') {
20002d30:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      fdfa0513             addi    a0,s4,-33
20002d34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      00153613             seqz    a2,a0
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:478
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
20002d38:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      0606                 slli    a2,a2,0x1
20002d3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      00003517             auipc   a0,0x3
20002d3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      35e50593             addi    a1,a0,862 # 20006098 <test_status_set.log_fields.7+0x108>
20002d42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      854a                 mv      a0,s2
20002d44:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      9982                 jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:479
  len += out.sink(out.data, start, (size_t)(end - start));
20002d46:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      45f2                 lw      a1,28(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:478
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
20002d48:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      8a2a                 mv      s4,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:479
  len += out.sink(out.data, start, (size_t)(end - start));
20002d4a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      40b48633             sub     a2,s1,a1
20002d4e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      854a                 mv      a0,s2
20002d50:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      9982                 jalr    s3
20002d52:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      8c2a                 mv      s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:480
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
20002d54:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      00003517             auipc   a0,0x3
20002d58:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      34550593             addi    a1,a0,837 # 20006099 <test_status_set.log_fields.7+0x109>
20002d5c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      854a                 mv      a0,s2
20002d5e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      865a                 mv      a2,s6
20002d60:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      9982                 jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:479
  len += out.sink(out.data, start, (size_t)(end - start));
20002d62:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      9a2a                 add     s4,s4,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:482
  len += out.sink(out.data, ":", 1);
20002d64:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      00002517             auipc   a0,0x2
20002d68:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      b4450593             addi    a1,a0,-1212 # 200048a8 <test_main.log_fields.21+0x204>
20002d6c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      4605                 li      a2,1
20002d6e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      854a                 mv      a0,s2
20002d70:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      9982                 jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:480
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
20002d72:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      9552                 add     a0,a0,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:482
  len += out.sink(out.data, ":", 1);
20002d74:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      9c2a                 add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:483
  if (err) {
20002d76:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |      4532                 lw      a0,12(sp)
20002d78:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--------|--|----- 18050663             beqz    a0,20002f04 <base_vfprintf+0x464>
/proc/self/cwd/sw/device/lib/runtime/print.c:485
    len += out.sink(out.data, "[", 1);
20002d7c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      00003517             auipc   a0,0x3
20002d80:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      31f50593             addi    a1,a0,799 # 2000609b <test_status_set.log_fields.7+0x10b>
20002d84:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      4605                 li      a2,1
20002d86:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      854a                 mv      a0,s2
20002d88:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      9982                 jalr    s3
20002d8a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      84aa                 mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:486
    len += out.sink(out.data, mod, sizeof(mod));
20002d8c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      104c                 addi    a1,sp,36
20002d8e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      4619                 li      a2,6
20002d90:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      854a                 mv      a0,s2
20002d92:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      9982                 jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:487
    len += write_digits(out, (uint32_t)arg, 0, 0, 10, kDigitsLow);
20002d94:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      5602                 lw      a2,32(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:485
    len += out.sink(out.data, "[", 1);
20002d96:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      94aa                 add     s1,s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:487
    len += write_digits(out, (uint32_t)arg, 0, 0, 10, kDigitsLow);
20002d98:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      00003517             auipc   a0,0x3
20002d9c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      30950813             addi    a6,a0,777 # 200060a1 <kDigitsLow>
20002da0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      47a9                 li      a5,10
20002da2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      854a                 mv      a0,s2
20002da4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      85ce                 mv      a1,s3
20002da6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      4681                 li      a3,0
20002da8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      4701                 li      a4,0
20002daa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      2ecd                 jal     2000319c <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
    len += out.sink(out.data, mod, sizeof(mod));
20002dac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      94aa                 add     s1,s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:488
    len += out.sink(out.data, "]", 1);
20002dae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      00003517             auipc   a0,0x3
20002db2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      2ef50593             addi    a1,a0,751 # 2000609d <test_status_set.log_fields.7+0x10d>
20002db6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      4605                 li      a2,1
20002db8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      854a                 mv      a0,s2
20002dba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      9982                 jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:487
    len += write_digits(out, (uint32_t)arg, 0, 0, 10, kDigitsLow);
20002dbc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |      9526                 add     a0,a0,s1
20002dbe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|--|----- aab1                 j       20002f1a <base_vfprintf+0x47a>
20002dc0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      4552                 lw      a0,20(sp)
20002dc2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      00450593             addi    a1,a0,4
20002dc6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      ca2e                 sw      a1,20(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:593
      if (spec.is_nonstd) {
20002dc8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- 17aa1563             bne     s4,s10,20002f32 <base_vfprintf+0x492>
/proc/self/cwd/sw/device/lib/runtime/print.c:595
        len = va_arg(*args, size_t);
20002dcc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      4110                 lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:598
      char *value = va_arg(*args, char *);
20002dce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      00850593             addi    a1,a0,8
20002dd2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      ca2e                 sw      a1,20(sp)
20002dd4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      414c                 lw      a1,4(a0)
20002dd6:       |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|----- a06d                 j       20002e80 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:697
      if (spec.is_nonstd) {
20002dd8:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----- 09aa0f63             beq     s4,s10,20002e76 <base_vfprintf+0x3d6>
/proc/self/cwd/sw/device/lib/runtime/print.c:700
      uint32_t value = va_arg(*args, uint32_t);
20002ddc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      4552                 lw      a0,20(sp)
20002dde:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      00450593             addi    a1,a0,4
20002de2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      ca2e                 sw      a1,20(sp)
20002de4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      4110                 lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:702
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
20002de6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      0ffc7713             andi    a4,s8,255
20002dea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      00003517             auipc   a0,0x3
20002dee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      2b750813             addi    a6,a0,695 # 200060a1 <kDigitsLow>
20002df2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      47a9                 li      a5,10
20002df4:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|--|--|--|----- a099                 j       20002e3a <base_vfprintf+0x39a>
/proc/self/cwd/sw/device/lib/runtime/print.c:647
      if (spec.is_nonstd) {
20002df6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-- 03aa1663             bne     s4,s10,20002e22 <base_vfprintf+0x382>
/proc/self/cwd/sw/device/lib/runtime/print.c:648
        size_t len = va_arg(*args, size_t);
20002dfa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   4552                 lw      a0,20(sp)
20002dfc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   00450593             addi    a1,a0,4
20002e00:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   ca2e                 sw      a1,20(sp)
20002e02:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   4114                 lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:649
        char *value = va_arg(*args, char *);
20002e04:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   00850593             addi    a1,a0,8
20002e08:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   ca2e                 sw      a1,20(sp)
20002e0a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   4150                 lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:650
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
20002e0c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   0ffc7793             andi    a5,s8,255
20002e10:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   00003517             auipc   a0,0x3
20002e14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   29150893             addi    a7,a0,657 # 200060a1 <kDigitsLow>
20002e18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-> 4805                 li      a6,1
20002e1a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   854a                 mv      a0,s2
20002e1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   85ce                 mv      a1,s3
20002e1e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   8726                 mv      a4,s1
20002e20:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-- a0b9                 j       20002e6e <base_vfprintf+0x3ce>
/proc/self/cwd/sw/device/lib/runtime/print.c:656
      uint32_t value = va_arg(*args, uint32_t);
20002e22:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-> 4552                 lw      a0,20(sp)
20002e24:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      00450593             addi    a1,a0,4
20002e28:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      ca2e                 sw      a1,20(sp)
20002e2a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      4110                 lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:658
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
20002e2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      0ffc7713             andi    a4,s8,255
20002e30:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      00003517             auipc   a0,0x3
20002e34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |      27150813             addi    a6,a0,625 # 200060a1 <kDigitsLow>
20002e38:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|----> 47c1                 li      a5,16
20002e3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  >--|--|--|--|--|-----|----> 854a                 mv      a0,s2
20002e3c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |      85ce                 mv      a1,s3
20002e3e:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|--|-----|----> 86a6                 mv      a3,s1
20002e40:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |      2eb1                 jal     2000319c <write_digits>
20002e42:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  /-- a089                 j       20002e84 <base_vfprintf+0x3e4>
/proc/self/cwd/sw/device/lib/runtime/print.c:677
      if (!spec.is_nonstd) {
20002e44:       |  |  |  |  |  |  |  +--|--|--|--|-----|--|--|--|--|--|-----|--|-- 03aa1963             bne     s4,s10,20002e76 <base_vfprintf+0x3d6>
/proc/self/cwd/sw/device/lib/runtime/print.c:680
      size_t len = va_arg(*args, size_t);
20002e48:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  |   4552                 lw      a0,20(sp)
20002e4a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  |   00450593             addi    a1,a0,4
20002e4e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  |   ca2e                 sw      a1,20(sp)
20002e50:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  |   4114                 lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:681
      char *value = va_arg(*args, char *);
20002e52:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  |   00850593             addi    a1,a0,8
20002e56:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  |   ca2e                 sw      a1,20(sp)
20002e58:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  |   4150                 lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:682
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
20002e5a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  |   0ffc7793             andi    a5,s8,255
20002e5e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  |   00003517             auipc   a0,0x3
20002e62:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |     |  |   24350893             addi    a7,a0,579 # 200060a1 <kDigitsLow>
20002e66:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  \--|--|--|-----|--|-> 854a                 mv      a0,s2
20002e68:       |  |  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |     |  |   85ce                 mv      a1,s3
20002e6a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |     |  |   8726                 mv      a4,s1
20002e6c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |     |  |   4801                 li      a6,0
20002e6e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |     \--|-> 2a05                 jal     20002f9e <hex_dump>
20002e70:       |  |  |  |  |  |  |  |  |  |  |  |     |  |     |  |  |        +-- a811                 j       20002e84 <base_vfprintf+0x3e4>
/proc/self/cwd/sw/device/lib/runtime/print.c:563
      if (spec.is_nonstd) {
20002e72:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|-----|--|--|--/-----|-X 0daa1a63             bne     s4,s10,20002f46 <base_vfprintf+0x4a6>
/proc/self/cwd/sw/device/lib/runtime/print.c:728
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
20002e76:       |  |  |  |  |  |  |  \--|--|--|--------|--|-----|--|--|--|-----|-> 00003517             auipc   a0,0x3
20002e7a:       |  |  |  |  |  |  |     |  |  |        |  |     |  |  |  |     |   26850593             addi    a1,a0,616 # 200060de <kUnknownSpec>
20002e7e:       |  |  |  |  |  |  |     |  |  |        |  |     |  |  |  |     |   463d                 li      a2,15
20002e80:       |  |  |  |  |  |  >-----|--|--|--------|--|-----|--|--|--|-----|-> 854a                 mv      a0,s2
20002e82:       |  |  |  |  |  |  |     |  |  |        |  |     |  |  |  |     |   9982                 jalr    s3
20002e84:       |  |  |  |  |  |  |     |  |  |        |  |     |  |  |  |     \-> 9aaa                 add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:746
  while (format[0] != '\0') {
20002e86:       |  |  |  |  |  |  |     |  |  |        |  >-----|--|--|--|-------> 00044503             lbu     a0,0(s0)
20002e8a:       |  |  |  |  |  |  |     |  |  |        |  |     |  |  |  |         4a01                 li      s4,0
20002e8c:       |  |  |  |  \--|--|-----|--|--|--------|--|-----|--|--|--|-------- c60512e3             bnez    a0,20002af0 <base_vfprintf+0x50>
20002e90:       |  +--|--|-----|--|-----|--|--|--------|--|-----|--|--|--|-------- a0cd                 j       20002f72 <base_vfprintf+0x4d2>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:578
      uint32_t value = va_arg(*args, uint32_t);
20002e92:       |  |  |  |     |  |     |  \--|--------|--|-----|--|--|--|-------> 4552                 lw      a0,20(sp)
20002e94:       |  |  |  |     |  |     |     |        |  |     |  |  |  |         00450593             addi    a1,a0,4
20002e98:       |  |  |  |     |  |     |     |        |  |     |  |  |  |         ca2e                 sw      a1,20(sp)
20002e9a:       |  |  |  |     |  |     |     |        |  |     |  |  |  |         4104                 lw      s1,0(a0)
20002e9c:       |  |  |  |     |  |     |     |        |  |     |  |  |  |         4a11                 li      s4,4
/proc/self/cwd/sw/device/lib/runtime/print.c:580
        uint8_t ch = (uint8_t)value;
20002e9e:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  /----> 02910223             sb      s1,36(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:581
        if (ch >= 32 && ch < 127) {
20002ea2:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |      0ff4f513             andi    a0,s1,255
20002ea6:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |      1501                 addi    a0,a0,-32
20002ea8:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |      104c                 addi    a1,sp,36
20002eaa:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |      05f00613             li      a2,95
20002eae:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  /-- 02c56a63             bltu    a0,a2,20002ee2 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:584
          *bytes_written += out.sink(out.data, "\\x", 2);
20002eb2:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   00003517             auipc   a0,0x3
20002eb6:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   1d350593             addi    a1,a0,467 # 20006085 <test_status_set.log_fields.7+0xf5>
20002eba:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   4609                 li      a2,2
20002ebc:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   854a                 mv      a0,s2
20002ebe:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   9982                 jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:585
          *bytes_written += out.sink(out.data, &kDigitsLow[ch >> 4], 1);
20002ec0:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   02414583             lbu     a1,36(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:584
          *bytes_written += out.sink(out.data, "\\x", 2);
20002ec4:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   9aaa                 add     s5,s5,a0
20002ec6:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   8191                 srli    a1,a1,0x4
/proc/self/cwd/sw/device/lib/runtime/print.c:585
          *bytes_written += out.sink(out.data, &kDigitsLow[ch >> 4], 1);
20002ec8:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   00003517             auipc   a0,0x3
20002ecc:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   1d950b13             addi    s6,a0,473 # 200060a1 <kDigitsLow>
20002ed0:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   95da                 add     a1,a1,s6
20002ed2:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   4605                 li      a2,1
20002ed4:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   854a                 mv      a0,s2
20002ed6:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   9982                 jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:586
          *bytes_written += out.sink(out.data, &kDigitsLow[ch & 15], 1);
20002ed8:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   02414583             lbu     a1,36(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:585
          *bytes_written += out.sink(out.data, &kDigitsLow[ch >> 4], 1);
20002edc:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   9aaa                 add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:586
          *bytes_written += out.sink(out.data, &kDigitsLow[ch & 15], 1);
20002ede:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   89bd                 andi    a1,a1,15
20002ee0:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  |   95da                 add     a1,a1,s6
20002ee2:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |  \-> 4605                 li      a2,1
20002ee4:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |      854a                 mv      a0,s2
20002ee6:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |      9982                 jalr    s3
20002ee8:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |      9aaa                 add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:579
      for (size_t i = 0; i < sizeof(uint32_t); ++i, value >>= 8) {
20002eea:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |      1a7d                 addi    s4,s4,-1
20002eec:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  |      80a1                 srli    s1,s1,0x8
20002eee:       |  |  |  |     |  |     |     |        |  |     |  |  |  |  \----- fa0a18e3             bnez    s4,20002e9e <base_vfprintf+0x3fe>
20002ef2:       |  |  |  |     |  |     |     |        |  +-----|--|--|--|-------- bf51                 j       20002e86 <base_vfprintf+0x3e6>
/proc/self/cwd/sw/device/lib/runtime/print.c:718
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
20002ef4:       |  |  |  |     |  |     |     \--------|--|-----|--|--|--|-------> 0ffc7713             andi    a4,s8,255
20002ef8:       |  |  |  |     |  |     |              |  |     |  |  |  |         00003517             auipc   a0,0x3
20002efc:       |  |  |  |     |  |     |              |  |     |  |  |  |         1a950813             addi    a6,a0,425 # 200060a1 <kDigitsLow>
20002f00:       |  |  |  |     |  |     |              |  |     |  |  |  |         4789                 li      a5,2
20002f02:       |  |  |  |     |  |     |              \--|-----|--|--|--|-------- bf25                 j       20002e3a <base_vfprintf+0x39a>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:491
    len += write_digits(out, (uint32_t)arg, 0, 0, 10, kDigitsLow);
20002f04:       |  |  |  |     |  |     |                 |     \--|--|--|-------> 5602                 lw      a2,32(sp)
20002f06:       |  |  |  |     |  |     |                 |        |  |  |         00003517             auipc   a0,0x3
20002f0a:       |  |  |  |     |  |     |                 |        |  |  |         19b50813             addi    a6,a0,411 # 200060a1 <kDigitsLow>
20002f0e:       |  |  |  |     |  |     |                 |        |  |  |         47a9                 li      a5,10
20002f10:       |  |  |  |     |  |     |                 |        |  |  |         854a                 mv      a0,s2
20002f12:       |  |  |  |     |  |     |                 |        |  |  |         85ce                 mv      a1,s3
20002f14:       |  |  |  |     |  |     |                 |        |  |  |         4681                 li      a3,0
20002f16:       |  |  |  |     |  |     |                 |        |  |  |         4701                 li      a4,0
20002f18:       |  |  |  |     |  |     |                 |        |  |  |         2451                 jal     2000319c <write_digits>
20002f1a:       |  |  |  |     |  |     |                 |        |  \--|-------> 9c2a                 add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:493
  len += out.sink(out.data, "}", as_json ? 1 : 0);
20002f1c:       |  |  |  |     |  |     |                 |        |     |         00003517             auipc   a0,0x3
20002f20:       |  |  |  |     |  |     |                 |        |     |         18350593             addi    a1,a0,387 # 2000609f <test_status_set.log_fields.7+0x10f>
20002f24:       |  |  |  |     |  |     |                 |        |     |         854a                 mv      a0,s2
20002f26:       |  |  |  |     |  |     |                 |        |     |         865a                 mv      a2,s6
20002f28:       |  |  |  |     |  |     |                 |        |     |         9982                 jalr    s3
20002f2a:       |  |  |  |     |  |     |                 |        |     |         9556                 add     a0,a0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:723
      *bytes_written += write_status(out, value, spec.is_nonstd);
20002f2c:       |  |  |  |     |  |     |                 |        |     |         00ac0ab3             add     s5,s8,a0
20002f30:       |  |  |  |     |  |     |                 \--------|-----|-------- bf99                 j       20002e86 <base_vfprintf+0x3e6>
/proc/self/cwd/sw/device/lib/runtime/print.c:598
      char *value = va_arg(*args, char *);
20002f32:       |  |  |  |     |  |     |                          \-----|-------> 410c                 lw      a1,0(a0)
20002f34:       |  |  |  |     |  |     |                                |         4601                 li      a2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:599
      while (!spec.is_nonstd && value[len] != '\0') {
20002f36:       |  |  |  |     |  |     |                                |     /-> 00c58533             add     a0,a1,a2
20002f3a:       |  |  |  |     |  |     |                                |     |   00054503             lbu     a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:601
        ++len;
20002f3e:       |  |  |  |     |  |     |                                |     |   0605                 addi    a2,a2,1
/proc/self/cwd/sw/device/lib/runtime/print.c:599
      while (!spec.is_nonstd && value[len] != '\0') {
20002f40:       |  |  |  |     |  |     |                                |     \-- f97d                 bnez    a0,20002f36 <base_vfprintf+0x496>
/proc/self/cwd/sw/device/lib/runtime/print.c:604
      *bytes_written += out.sink(out.data, value, len);
20002f42:       |  |  |  |     |  |     |                                |         167d                 addi    a2,a2,-1
20002f44:       |  |  |  |     |  +-----|--------------------------------|-------- bf35                 j       20002e80 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:566
      *bytes_written += out.sink(out.data, "%", 1);
20002f46:       |  |  |  |     |  |     |                                \-------> 00003517             auipc   a0,0x3
20002f4a:       |  |  |  |     |  |     |                                          13d50593             addi    a1,a0,317 # 20006083 <test_status_set.log_fields.7+0xf3>
20002f4e:       |  |  |  |     |  |     \----------------------------------------> 4605                 li      a2,1
20002f50:       |  |  |  |     |  +----------------------------------------------- bf05                 j       20002e80 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:712
          *bytes_written += out.sink(out.data, "false", 5);
20002f52:       |  |  |  |     \--|----------------------------------------------> 00003517             auipc   a0,0x3
20002f56:       |  |  |  |        |                                                14050593             addi    a1,a0,320 # 20006092 <test_status_set.log_fields.7+0x102>
20002f5a:       |  |  |  |        |                                                4615                 li      a2,5
20002f5c:       |  |  |  |        \----------------------------------------------- b715                 j       20002e80 <base_vfprintf+0x3e0>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
20002f5e:       |  |  \--|-------------------------------------------------------> 00003517             auipc   a0,0x3
20002f62:       |  |     |                                                         15350593             addi    a1,a0,339 # 200060b1 <kErrorNul>
20002f66:       |  |     |                                                         4645                 li      a2,17
20002f68:       |  |     |                                                     /-> 854a                 mv      a0,s2
20002f6a:       |  |     |                                                     |   9982                 jalr    s3
20002f6c:       |  |     |                                                     |   9aaa                 add     s5,s5,a0
20002f6e:       |  +-----|-----------------------------------------------------|-- a011                 j       20002f72 <base_vfprintf+0x4d2>
20002f70:       \--|-----|-----------------------------------------------------|-> 4a81                 li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:759

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
20002f72:          \-----|-----------------------------------------------------|-> 8556                 mv      a0,s5
20002f74:                |                                                     |   40f6                 lw      ra,92(sp)
20002f76:                |                                                     |   4466                 lw      s0,88(sp)
20002f78:                |                                                     |   44d6                 lw      s1,84(sp)
20002f7a:                |                                                     |   4946                 lw      s2,80(sp)
20002f7c:                |                                                     |   49b6                 lw      s3,76(sp)
20002f7e:                |                                                     |   4a26                 lw      s4,72(sp)
20002f80:                |                                                     |   4a96                 lw      s5,68(sp)
20002f82:                |                                                     |   4b06                 lw      s6,64(sp)
20002f84:                |                                                     |   5bf2                 lw      s7,60(sp)
20002f86:                |                                                     |   5c62                 lw      s8,56(sp)
20002f88:                |                                                     |   5cd2                 lw      s9,52(sp)
20002f8a:                |                                                     |   5d42                 lw      s10,48(sp)
20002f8c:                |                                                     |   5db2                 lw      s11,44(sp)
20002f8e:                |                                                     |   6125                 addi    sp,sp,96
20002f90:                |                                                     |   8082                 ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:417
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
20002f92:                \-----------------------------------------------------|-> 00003517             auipc   a0,0x3
20002f96:                                                                      |   13050593             addi    a1,a0,304 # 200060c2 <kErrorTooWide>
20002f9a:                                                                      |   4631                 li      a2,12
20002f9c:                                                                      \-- b7f1                 j       20002f68 <base_vfprintf+0x4c8>

20002f9e <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:513
                       const char *glyphs) {
20002f9e:                 711d                  addi    sp,sp,-96
20002fa0:                 ce86                  sw      ra,92(sp)
20002fa2:                 cca2                  sw      s0,88(sp)
20002fa4:                 caa6                  sw      s1,84(sp)
20002fa6:                 c8ca                  sw      s2,80(sp)
20002fa8:                 c6ce                  sw      s3,76(sp)
20002faa:                 c4d2                  sw      s4,72(sp)
20002fac:                 c2d6                  sw      s5,68(sp)
20002fae:                 c0da                  sw      s6,64(sp)
20002fb0:                 de5e                  sw      s7,60(sp)
20002fb2:                 dc62                  sw      s8,56(sp)
20002fb4:                 da66                  sw      s9,52(sp)
20002fb6:                 d86a                  sw      s10,48(sp)
20002fb8:                 d66e                  sw      s11,44(sp)
20002fba:                 8bc6                  mv      s7,a7
20002fbc:                 8a42                  mv      s4,a6
20002fbe:                 8b36                  mv      s6,a3
20002fc0:                 8ab2                  mv      s5,a2
20002fc2:                 892e                  mv      s2,a1
20002fc4:                 89aa                  mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:517
  if (len < width) {
20002fc6:          /----- 02e6fa63              bgeu    a3,a4,20002ffa <hex_dump+0x5c>
/proc/self/cwd/sw/device/lib/runtime/print.c:518
    width -= len;
20002fca:          |      41670433              sub     s0,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:519
    memset(buf, padding, sizeof(buf));
20002fce:          |      0068                  addi    a0,sp,12
20002fd0:          |      02000613              li      a2,32
20002fd4:          |      02000c13              li      s8,32
20002fd8:          |      85be                  mv      a1,a5
20002fda:          |      138010ef              jal     ra,20004112 <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:520
    while (width > 0) {
20002fde:          +----- cc11                  beqz    s0,20002ffa <hex_dump+0x5c>
20002fe0:          |      4d81                  li      s11,0
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
20002fe2:          |  /-> 0b8454b3              minu    s1,s0,s8
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      bytes_written += out.sink(out.data, buf, to_write);
20002fe6:          |  |   006c                  addi    a1,sp,12
20002fe8:          |  |   854e                  mv      a0,s3
20002fea:          |  |   8626                  mv      a2,s1
20002fec:          |  |   9902                  jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:523
      width -= to_write;
20002fee:          |  |   8c05                  sub     s0,s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      bytes_written += out.sink(out.data, buf, to_write);
20002ff0:          |  |   9daa                  add     s11,s11,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:520
    while (width > 0) {
20002ff2:          |  \-- f865                  bnez    s0,20002fe2 <hex_dump+0x44>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
  for (size_t i = 0; i < len; ++i) {
20002ff4:          |  /-- 000b1663              bnez    s6,20003000 <hex_dump+0x62>
20002ff8:       /--|--|-- a0ad                  j       20003062 <hex_dump+0xc4>
20002ffa:       |  \--|-> 4d81                  li      s11,0
20002ffc:       +-----|-- 060b0363              beqz    s6,20003062 <hex_dump+0xc4>
20003000:       |     \-> 4481                  li      s1,0
20003002:       |         4601                  li      a2,0
20003004:       |         1b7d                  addi    s6,s6,-1
20003006:       |         00c10c13              addi    s8,sp,12
2000300a:       |         02000c93              li      s9,32
2000300e:       |         5d7d                  li      s10,-1
20003010:       |  /----> 855a                  mv      a0,s6
20003012:       |  |  /-- 000a1363              bnez    s4,20003018 <hex_dump+0x7a>
20003016:       |  |  |   8526                  mv      a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:529
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
20003018:       |  |  \-> 9556                  add     a0,a0,s5
2000301a:       |  |      00054503              lbu     a0,0(a0)
2000301e:       |  |      00455593              srli    a1,a0,0x4
20003022:       |  |      95de                  add     a1,a1,s7
20003024:       |  |      00058583              lb      a1,0(a1)
20003028:       |  |      00cc06b3              add     a3,s8,a2
2000302c:       |  |      00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:530
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
20003030:       |  |      893d                  andi    a0,a0,15
20003032:       |  |      955e                  add     a0,a0,s7
20003034:       |  |      00050503              lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:531
    buffered += 2;
20003038:       |  |      0609                  addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:530
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
2000303a:       |  |      00a680a3              sb      a0,1(a3)
2000303e:       |  |  /-- 01961963              bne     a2,s9,20003050 <hex_dump+0xb2>
/proc/self/cwd/sw/device/lib/runtime/print.c:534
      bytes_written += out.sink(out.data, buf, buffered);
20003042:       |  |  |   006c                  addi    a1,sp,12
20003044:       |  |  |   02000613              li      a2,32
20003048:       |  |  |   854e                  mv      a0,s3
2000304a:       |  |  |   9902                  jalr    s2
2000304c:       |  |  |   4601                  li      a2,0
2000304e:       |  |  |   9daa                  add     s11,s11,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:527
  for (size_t i = 0; i < len; ++i) {
20003050:       |  |  \-> 1b7d                  addi    s6,s6,-1
20003052:       |  |      0485                  addi    s1,s1,1
20003054:       |  \----- fbab1ee3              bne     s6,s10,20003010 <hex_dump+0x72>
/proc/self/cwd/sw/device/lib/runtime/print.c:539
  if (buffered != 0) {
20003058:       +-------- c609                  beqz    a2,20003062 <hex_dump+0xc4>
/proc/self/cwd/sw/device/lib/runtime/print.c:540
    bytes_written += out.sink(out.data, buf, buffered);
2000305a:       |         006c                  addi    a1,sp,12
2000305c:       |         854e                  mv      a0,s3
2000305e:       |         9902                  jalr    s2
20003060:       |         9daa                  add     s11,s11,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  return bytes_written;
20003062:       \-------> 856e                  mv      a0,s11
20003064:                 40f6                  lw      ra,92(sp)
20003066:                 4466                  lw      s0,88(sp)
20003068:                 44d6                  lw      s1,84(sp)
2000306a:                 4946                  lw      s2,80(sp)
2000306c:                 49b6                  lw      s3,76(sp)
2000306e:                 4a26                  lw      s4,72(sp)
20003070:                 4a96                  lw      s5,68(sp)
20003072:                 4b06                  lw      s6,64(sp)
20003074:                 5bf2                  lw      s7,60(sp)
20003076:                 5c62                  lw      s8,56(sp)
20003078:                 5cd2                  lw      s9,52(sp)
2000307a:                 5d42                  lw      s10,48(sp)
2000307c:                 5db2                  lw      s11,44(sp)
2000307e:                 6125                  addi    sp,sp,96
20003080:                 8082                  ret

20003082 <spi_device_send_data>:
spi_device_send_data():
/proc/self/cwd/sw/device/lib/runtime/print.c:87
                                     size_t address) {
20003082:                       7179                    addi    sp,sp,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:88
  if (len == 0) {
20003084:                       d606                    sw      ra,44(sp)
20003086:                       d422                    sw      s0,40(sp)
20003088:                       d226                    sw      s1,36(sp)
2000308a:                       d04a                    sw      s2,32(sp)
2000308c:                       ce4e                    sw      s3,28(sp)
2000308e:                       cc52                    sw      s4,24(sp)
20003090:                       ca56                    sw      s5,20(sp)
20003092:                       c85a                    sw      s6,16(sp)
20003094:       /-------------- c245                    beqz    a2,20003134 <spi_device_send_data+0xb2>
20003096:       |               84b2                    mv      s1,a2
20003098:       |               8a2e                    mv      s4,a1
2000309a:       |               89aa                    mv      s3,a0
2000309c:       |               28b01513                bseti   a0,zero,0xb
/proc/self/cwd/sw/device/lib/runtime/print.c:92
  size_t space_to_end_of_buffer = kSpiDeviceReadBufferSizeBytes - address;
200030a0:       |               40d50b33                sub     s6,a0,a3
/proc/self/cwd/sw/device/lib/runtime/print.c:94
      space_to_end_of_buffer < len ? space_to_end_of_buffer : len;
200030a4:       |               0acb5ab3                minu    s5,s6,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:96
  TRY(dif_spi_device_write_flash_buffer(spi_device,
200030a8:       |               854e                    mv      a0,s3
200030aa:       |               4581                    li      a1,0
200030ac:       |               8636                    mv      a2,a3
200030ae:       |               86d6                    mv      a3,s5
200030b0:       |               8752                    mv      a4,s4
200030b2:       |               2bad                    jal     2000362c <dif_spi_device_write_flash_buffer>
200030b4:       |               c62a                    sw      a0,12(sp)
200030b6:       |               0028                    addi    a0,sp,8
200030b8:       |               006c                    addi    a1,sp,12
200030ba:       |               4611                    li      a2,4
200030bc:       |               7d5000ef                jal     ra,20004090 <memcpy>
200030c0:       |               4522                    lw      a0,8(sp)
200030c2:       |               00003597                auipc   a1,0x3
200030c6:       |               02e5a903                lw      s2,46(a1) # 200060f0 <MODULE_ID>
200030ca:       |               00153593                seqz    a1,a0
200030ce:       |               15fd                    addi    a1,a1,-1
200030d0:       |               0625f693                andi    a3,a1,98
200030d4:       |               00003597                auipc   a1,0x3
200030d8:       |               f9158613                addi    a2,a1,-111 # 20006065 <test_status_set.log_fields.7+0xd5>
200030dc:       |               85ca                    mv      a1,s2
200030de:       |               2a3d                    jal     2000321c <status_create>
200030e0:       |  /----------- 06054e63                bltz    a0,2000315c <spi_device_send_data+0xda>
/proc/self/cwd/sw/device/lib/runtime/print.c:101
  if (first_part_size < len) {
200030e4:       |  |        /-- 029b7e63                bgeu    s6,s1,20003120 <spi_device_send_data+0x9e>
/proc/self/cwd/sw/device/lib/runtime/print.c:102
    size_t second_part_size = len - first_part_size;
200030e8:       |  |        |   415486b3                sub     a3,s1,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:103
    TRY(dif_spi_device_write_flash_buffer(
200030ec:       |  |        |   015a0733                add     a4,s4,s5
200030f0:       |  |        |   854e                    mv      a0,s3
200030f2:       |  |        |   4581                    li      a1,0
200030f4:       |  |        |   4601                    li      a2,0
200030f6:       |  |        |   2b1d                    jal     2000362c <dif_spi_device_write_flash_buffer>
200030f8:       |  |        |   c62a                    sw      a0,12(sp)
200030fa:       |  |        |   0028                    addi    a0,sp,8
200030fc:       |  |        |   006c                    addi    a1,sp,12
200030fe:       |  |        |   4611                    li      a2,4
20003100:       |  |        |   791000ef                jal     ra,20004090 <memcpy>
20003104:       |  |        |   4522                    lw      a0,8(sp)
20003106:       |  |        |   00153593                seqz    a1,a0
2000310a:       |  |        |   15fd                    addi    a1,a1,-1
2000310c:       |  |        |   0695f693                andi    a3,a1,105
20003110:       |  |        |   00003597                auipc   a1,0x3
20003114:       |  |        |   f5558613                addi    a2,a1,-171 # 20006065 <test_status_set.log_fields.7+0xd5>
20003118:       |  |        |   85ca                    mv      a1,s2
2000311a:       |  |        |   2209                    jal     2000321c <status_create>
2000311c:       |  |     /--|-- 04054963                bltz    a0,2000316e <spi_device_send_data+0xec>
/proc/self/cwd/sw/device/lib/runtime/print.c:108
  return OK_STATUS();
20003120:       |  |     |  \-> 00003517                auipc   a0,0x3
20003124:       |  |     |      f4550613                addi    a2,a0,-187 # 20006065 <test_status_set.log_fields.7+0xd5>
20003128:       |  |     |      4501                    li      a0,0
2000312a:       |  |     |      85ca                    mv      a1,s2
2000312c:       |  |     |      4681                    li      a3,0
2000312e:       |  |     |      20fd                    jal     2000321c <status_create>
20003130:       |  |     |      842a                    mv      s0,a0
20003132:       |  |  /--|----- a891                    j       20003186 <spi_device_send_data+0x104>
/proc/self/cwd/sw/device/lib/runtime/print.c:89
    return OK_STATUS();
20003134:       \--|--|--|----> 00003517                auipc   a0,0x3
20003138:          |  |  |      fbc52583                lw      a1,-68(a0) # 200060f0 <MODULE_ID>
2000313c:          |  |  |      00003517                auipc   a0,0x3
20003140:          |  |  |      f2950613                addi    a2,a0,-215 # 20006065 <test_status_set.log_fields.7+0xd5>
20003144:          |  |  |      4501                    li      a0,0
20003146:          |  |  |      4681                    li      a3,0
20003148:          |  |  |      50b2                    lw      ra,44(sp)
2000314a:          |  |  |      5422                    lw      s0,40(sp)
2000314c:          |  |  |      5492                    lw      s1,36(sp)
2000314e:          |  |  |      5902                    lw      s2,32(sp)
20003150:          |  |  |      49f2                    lw      s3,28(sp)
20003152:          |  |  |      4a62                    lw      s4,24(sp)
20003154:          |  |  |      4ad2                    lw      s5,20(sp)
20003156:          |  |  |      4b42                    lw      s6,16(sp)
20003158:          |  |  |      6145                    addi    sp,sp,48
2000315a:          |  |  |      a0c9                    j       2000321c <status_create>
2000315c:          \--|--|----> 842a                    mv      s0,a0
2000315e:             |  |      897d                    andi    a0,a0,31
/proc/self/cwd/sw/device/lib/runtime/print.c:96
  TRY(dif_spi_device_write_flash_buffer(spi_device,
20003160:             |  |      00003597                auipc   a1,0x3
20003164:             |  |      f0558613                addi    a2,a1,-251 # 20006065 <test_status_set.log_fields.7+0xd5>
20003168:             |  |      06200693                li      a3,98
2000316c:             |  |  /-- a809                    j       2000317e <spi_device_send_data+0xfc>
2000316e:             |  \--|-> 842a                    mv      s0,a0
20003170:             |     |   897d                    andi    a0,a0,31
/proc/self/cwd/sw/device/lib/runtime/print.c:103
    TRY(dif_spi_device_write_flash_buffer(
20003172:             |     |   00003597                auipc   a1,0x3
20003176:             |     |   ef358613                addi    a2,a1,-269 # 20006065 <test_status_set.log_fields.7+0xd5>
2000317a:             |     |   06900693                li      a3,105
2000317e:             |     \-> 85ca                    mv      a1,s2
20003180:             |         2871                    jal     2000321c <status_create>
20003182:             |         981fd0ef                jal     ra,20000b02 <status_report>
/proc/self/cwd/sw/device/lib/runtime/print.c:109
}
20003186:             \-------> 8522                    mv      a0,s0
20003188:                       50b2                    lw      ra,44(sp)
2000318a:                       5422                    lw      s0,40(sp)
2000318c:                       5492                    lw      s1,36(sp)
2000318e:                       5902                    lw      s2,32(sp)
20003190:                       49f2                    lw      s3,28(sp)
20003192:                       4a62                    lw      s4,24(sp)
20003194:                       4ad2                    lw      s5,20(sp)
20003196:                       4b42                    lw      s6,16(sp)
20003198:                       6145                    addi    sp,sp,48
2000319a:                       8082                    ret

2000319c <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:439
                           char padding, uint32_t base, const char *glyphs) {
2000319c:                       7179                    addi    sp,sp,-48
2000319e:                       d606                    sw      ra,44(sp)
200031a0:                       88ae                    mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:446
  if (value == 0) {
200031a2:       /-------------- ce0d                    beqz    a2,200031dc <write_digits+0x40>
200031a4:       |               4e01                    li      t3,0
/proc/self/cwd/sw/device/lib/runtime/print.c:450
  while (value > 0) {
200031a6:       |               02b10293                addi    t0,sp,43
200031aa:       |           /-> 8332                    mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:452
    value /= base;
200031ac:       |           |   02f65633                divu    a2,a2,a5
200031b0:       |           |   02f603b3                mul     t2,a2,a5
200031b4:       |           |   006805b3                add     a1,a6,t1
/proc/self/cwd/sw/device/lib/runtime/print.c:453
    buffer[kWordBits - 1 - len] = glyphs[digit];
200031b8:       |           |   407585b3                sub     a1,a1,t2
200031bc:       |           |   00058383                lb      t2,0(a1)
200031c0:       |           |   01c285b3                add     a1,t0,t3
200031c4:       |           |   00758023                sb      t2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:450
  while (value > 0) {
200031c8:       |           |   1e7d                    addi    t3,t3,-1
200031ca:       |           \-- fef370e3                bgeu    t1,a5,200031aa <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:456
  width = width == 0 ? 1 : width;
200031ce:       |               41c00633                neg     a2,t3
/proc/self/cwd/sw/device/lib/runtime/print.c:457
  width = width > kWordBits ? kWordBits : width;
200031d2:       |        /----- ea99                    bnez    a3,200031e8 <write_digits+0x4c>
200031d4:       |        |  /-> 4585                    li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:458
  while (len < width) {
200031d6:       |     /--|--|-- 00b66f63                bltu    a2,a1,200031f4 <write_digits+0x58>
200031da:       |  /--|--|--|-- a80d                    j       2000320c <write_digits+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
    buffer[kWordBits - 1] = glyphs[0];
200031dc:       \--|--|--|--|-> 00080583                lb      a1,0(a6)
200031e0:          |  |  |  |   02b105a3                sb      a1,43(sp)
200031e4:          |  |  |  |   4605                    li      a2,1
/proc/self/cwd/sw/device/lib/runtime/print.c:457
  width = width > kWordBits ? kWordBits : width;
200031e6:          |  |  |  \-- d6fd                    beqz    a3,200031d4 <write_digits+0x38>
200031e8:          |  |  \----> 02000593                li      a1,32
200031ec:          |  |         0ab6d5b3                minu    a1,a3,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:458
  while (len < width) {
200031f0:          +--|-------- 00b67e63                bgeu    a2,a1,2000320c <write_digits+0x70>
200031f4:          |  \-------> 40c586b3                sub     a3,a1,a2
200031f8:          |            007c                    addi    a5,sp,12
200031fa:          |            40c78633                sub     a2,a5,a2
200031fe:          |            067d                    addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:459
    buffer[kWordBits - len - 1] = padding;
20003200:          |        /-> 00e60023                sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:458
  while (len < width) {
20003204:          |        |   16fd                    addi    a3,a3,-1
20003206:          |        |   167d                    addi    a2,a2,-1
20003208:          |        \-- fee5                    bnez    a3,20003200 <write_digits+0x64>
2000320a:          |            862e                    mv      a2,a1
2000320c:          \----------> 006c                    addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:462
  return out.sink(out.data, buffer + (kWordBits - len), len);
2000320e:                       8d91                    sub     a1,a1,a2
20003210:                       02058593                addi    a1,a1,32
20003214:                       9882                    jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:463
}
20003216:                       50b2                    lw      ra,44(sp)
20003218:                       6145                    addi    sp,sp,48
2000321a:                       8082                    ret

2000321c <status_create>:
status_create():
/proc/self/cwd/sw/device/lib/base/status.c:26
    --f;
  return f;
}

status_t status_create(absl_status_t code, uint32_t module_id, const char *file,
                       int32_t arg) {
2000321c:                          8836                 mv      a6,a3
/proc/self/cwd/sw/device/lib/base/status.c:27
  if (code == kOk) {
2000321e:                /-------- c121                 beqz    a0,2000325e <status_create+0x42>
/proc/self/cwd/sw/device/lib/base/status.c:48
   *  +---+-------+-------+-------+-------------+-------+
   *
   * The sign bit is set on all not-Ok statuses, thus proviging a covenient
   * overloaded return value from functions that may return an error.
   */
  if (module_id == 0) {
20003220:       /--------|-------- e9cd                 bnez    a1,200032d2 <status_create+0xb6>
20003222:       |     /--|-------> 8732                 mv      a4,a2
basename():
/proc/self/cwd/sw/device/lib/base/status.c:17
  while (*f)
20003224:       |     |  |     /-> 00074583             lbu     a1,0(a4)
/proc/self/cwd/sw/device/lib/base/status.c:18
    ++f;
20003228:       |     |  |     |   0705                 addi    a4,a4,1
/proc/self/cwd/sw/device/lib/base/status.c:17
  while (*f)
2000322a:       |     |  |     \-- fded                 bnez    a1,20003224 <status_create+0x8>
2000322c:       |     |  |         05c00793             li      a5,92
20003230:       |     |  |         02f00893             li      a7,47
20003234:       |     |  |     /-> 85ba                 mv      a1,a4
/proc/self/cwd/sw/device/lib/base/status.c:20
  while (f > file && f[-1] != '/' && f[-1] != '\\')
20003236:       |     |  |     |   177d                 addi    a4,a4,-1
20003238:       |     |  |  /--|-- 00e67863             bgeu    a2,a4,20003248 <status_create+0x2c>
2000323c:       |     |  |  |  |   ffe5c683             lbu     a3,-2(a1)
20003240:       |     |  |  +--|-- 00f68463             beq     a3,a5,20003248 <status_create+0x2c>
20003244:       |     |  |  |  \-- ff1698e3             bne     a3,a7,20003234 <status_create+0x18>
status_create():
/proc/self/cwd/sw/device/lib/base/status.c:51
    // First three characters of the filename.
    const char *f = basename(file);
    module_id = MAKE_MODULE_ID(f[0], f[1], f[2]);
20003248:       |     |  |  \----> fff5c603             lbu     a2,-1(a1)
2000324c:       |     |  |         0e067693             andi    a3,a2,224
20003250:       |     |  |         04000713             li      a4,64
20003254:       |     |  |     /-- 00e69b63             bne     a3,a4,2000326a <status_create+0x4e>
20003258:       |     |  |     |   fc060613             addi    a2,a2,-64
2000325c:       |     |  |  /--|-- a839                 j       2000327a <status_create+0x5e>
/proc/self/cwd/sw/device/lib/base/status.c:28
    if (arg >= 0) {
2000325e:       |  /--|--\--|--|-X 08085263             bgez    a6,200032e2 <status_create+0xc6>
20003262:       |  |  |     |  |   02100813             li      a6,33
20003266:       +--|--|-----|--|-- e5b5                 bnez    a1,200032d2 <status_create+0xb6>
20003268:       |  |  \-----|--|-- bf6d                 j       20003222 <status_create+0x6>
/proc/self/cwd/sw/device/lib/base/status.c:51
    module_id = MAKE_MODULE_ID(f[0], f[1], f[2]);
2000326a:       |  |        |  \-> fa060613             addi    a2,a2,-96
2000326e:       |  |        |      0ff67693             andi    a3,a2,255
20003272:       |  |        |      476d                 li      a4,27
20003274:       |  |        +----- 00e6e363             bltu    a3,a4,2000327a <status_create+0x5e>
20003278:       |  |        |      467d                 li      a2,31
2000327a:       |  |        \----> 0005c683             lbu     a3,0(a1)
2000327e:       |  |               0e06f713             andi    a4,a3,224
20003282:       |  |               04000793             li      a5,64
20003286:       |  |               0642                 slli    a2,a2,0x10
20003288:       |  |           /-- 00f71563             bne     a4,a5,20003292 <status_create+0x76>
2000328c:       |  |           |   fc068713             addi    a4,a3,-64
20003290:       |  |        /--|-- a809                 j       200032a2 <status_create+0x86>
20003292:       |  |        |  \-> fa068713             addi    a4,a3,-96
20003296:       |  |        |      0ff77693             andi    a3,a4,255
2000329a:       |  |        |      47ed                 li      a5,27
2000329c:       |  |        +----- 00f6e363             bltu    a3,a5,200032a2 <status_create+0x86>
200032a0:       |  |        |      477d                 li      a4,31
200032a2:       |  |        \----> 0015c683             lbu     a3,1(a1)
200032a6:       |  |               01571593             slli    a1,a4,0x15
200032aa:       |  |               0e06f713             andi    a4,a3,224
200032ae:       |  |               04000793             li      a5,64
200032b2:       |  |               8dd1                 or      a1,a1,a2
200032b4:       |  |           /-- 00f71563             bne     a4,a5,200032be <status_create+0xa2>
200032b8:       |  |           |   fc068613             addi    a2,a3,-64
200032bc:       |  |        /--|-- a809                 j       200032ce <status_create+0xb2>
200032be:       |  |        |  \-> fa068613             addi    a2,a3,-96
200032c2:       |  |        |      0ff67693             andi    a3,a2,255
200032c6:       |  |        |      476d                 li      a4,27
200032c8:       |  |        +----- 00e6e363             bltu    a3,a4,200032ce <status_create+0xb2>
200032cc:       |  |        |      467d                 li      a2,31
200032ce:       |  |        \----> 066a                 slli    a2,a2,0x1a
200032d0:       |  |               8dd1                 or      a1,a1,a2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
200032d2:       \--|-------------> 897d                 andi    a0,a0,31
200032d4:          |               0856                 slli    a6,a6,0x15
200032d6:          |               01085613             srli    a2,a6,0x10
status_create():
/proc/self/cwd/sw/device/lib/base/status.c:57
  }
  // At this point, the module_id is already packed into the correct bitfield.
  return (status_t){
      .value = (int32_t)(module_id |
                         bitfield_bit32_write(0, STATUS_BIT_ERROR, true) |
                         bitfield_field32_write(0, STATUS_FIELD_CODE, code) |
200032da:          |               8d4d                 or      a0,a0,a1
200032dc:          |               8d51                 or      a0,a0,a2
200032de:          |               29f51813             bseti   a6,a0,0x1f
/proc/self/cwd/sw/device/lib/base/status.c:60
                         bitfield_field32_write(0, STATUS_FIELD_ARG,
                                                (uint32_t)arg))};
}
200032e2:          \-------------> 8542                 mv      a0,a6
200032e4:                          8082                 ret

200032e6 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:240
200032e6:              00052713                 slti    a4,a0,0
200032ea:              00174713                 xori    a4,a4,1
200032ee:              01f57813                 andi    a6,a0,31
200032f2:              00183793                 seqz    a5,a6
200032f6:              00f768b3                 or      a7,a4,a5
200032fa:              02000793                 li      a5,32
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
200032fe:          /-- 00089363                 bnez    a7,20003304 <status_extract+0x1e>
20003302:          |   87c2                     mv      a5,a6
20003304:          \-> 177d                     addi    a4,a4,-1
20003306:              8f7d                     and     a4,a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
20003308:              effff797                 auipc   a5,0xeffff
2000330c:              ce078793                 addi    a5,a5,-800 # 10001fe8 <status_codes>
20003310:              20f747b3                 sh2add  a5,a4,a5
20003314:              439c                     lw      a5,0(a5)
20003316:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
20003318:       /----- cb15                     beqz    a4,2000334c <status_extract+0x66>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
2000331a:       |      01051593                 slli    a1,a0,0x10
2000331e:       |      81d5                     srli    a1,a1,0x15
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
20003320:       |      c20c                     sw      a1,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
20003322:       |      00b51593                 slli    a1,a0,0xb
20003326:       |      81ed                     srli    a1,a1,0x1b
20003328:       |      04058593                 addi    a1,a1,64
2000332c:       |      00b68023                 sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
20003330:       |      00651593                 slli    a1,a0,0x6
20003334:       |      81ed                     srli    a1,a1,0x1b
20003336:       |      04058593                 addi    a1,a1,64
2000333a:       |      00b680a3                 sb      a1,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
2000333e:       |      0506                     slli    a0,a0,0x1
20003340:       |      816d                     srli    a0,a0,0x1b
20003342:       |      04050513                 addi    a0,a0,64
20003346:       |      00a68123                 sb      a0,2(a3)
2000334a:       |  /-- a011                     j       2000334e <status_extract+0x68>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
2000334c:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
2000334e:          \-> 00e03533                 snez    a0,a4
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
20003352:              8082                     ret

20003354 <dif_spi_device_init>:
dif_spi_device_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:19
#include "spi_device_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_device_init(mmio_region_t base_addr,
                                 dif_spi_device_t *spi_device) {
  if (spi_device == NULL) {
20003354:       /----- c581                     beqz    a1,2000335c <dif_spi_device_init+0x8>
20003356:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:23
    return kDifBadArg;
  }

  spi_device->base_addr = base_addr;
20003358:       |      c188                     sw      a0,0(a1)
2000335a:       |  /-- a011                     j       2000335e <dif_spi_device_init+0xa>
2000335c:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:26

  return kDifOk;
}
2000335e:          \-> 8532                     mv      a0,a2
20003360:              8082                     ret

20003362 <dif_spi_device_irq_is_pending>:
dif_spi_device_irq_is_pending():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:139

OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_device_irq_is_pending(const dif_spi_device_t *spi_device,
                                           dif_spi_device_irq_t irq,
                                           bool *is_pending) {
  if (spi_device == NULL || is_pending == NULL) {
20003362:           00153693            seqz    a3,a0
20003366:           00163713            seqz    a4,a2
2000336a:           8ed9                        or      a3,a3,a4
2000336c:           0085b713            sltiu   a4,a1,8
20003370:           00174713            xori    a4,a4,1
20003374:           8f55                        or      a4,a4,a3
20003376:           468d                        li      a3,3
20003378:       /-- eb01                        bnez    a4,20003388 <dif_spi_device_irq_is_pending+0x26>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:148
  bitfield_bit32_index_t index;
  if (!spi_device_get_irq_bit_index(irq, &index)) {
    return kDifBadArg;
  }

  uint32_t intr_state_reg = mmio_region_read32(
2000337a:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
2000337c:       |   4108                        lw      a0,0(a0)
2000337e:       |   4681                        li      a3,0
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
20003380:       |   48b55533            bext    a0,a0,a1
dif_spi_device_irq_is_pending():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:151
      spi_device->base_addr, (ptrdiff_t)SPI_DEVICE_INTR_STATE_REG_OFFSET);

  *is_pending = bitfield_bit32_read(intr_state_reg, index);
20003384:       |   00a60023            sb      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:154

  return kDifOk;
}
20003388:       \-> 8536                        mv      a0,a3
2000338a:           8082                        ret

2000338c <dif_spi_device_irq_acknowledge>:
dif_spi_device_irq_acknowledge():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:173
}

OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_device_irq_acknowledge(const dif_spi_device_t *spi_device,
                                            dif_spi_device_irq_t irq) {
  if (spi_device == NULL) {
2000338c:           00a03633            snez    a2,a0
20003390:           0085b693            sltiu   a3,a1,8
20003394:           8ef1                        and     a3,a3,a2
20003396:           460d                        li      a2,3
20003398:       /-- c691                        beqz    a3,200033a4 <dif_spi_device_irq_acknowledge+0x18>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:184
    return kDifBadArg;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t intr_state_reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(spi_device->base_addr,
2000339a:       |   4108                        lw      a0,0(a0)
2000339c:       |   4601                        li      a2,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
2000339e:       |   28b015b3            bset    a1,zero,a1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
200033a2:       |   c10c                        sw      a1,0(a0)
dif_spi_device_irq_acknowledge():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_device_autogen.c:189
                      (ptrdiff_t)SPI_DEVICE_INTR_STATE_REG_OFFSET,
                      intr_state_reg);

  return kDifOk;
}
200033a4:       \-> 8532                        mv      a0,a2
200033a6:           8082                        ret

200033a8 <dif_spi_device_init_handle>:
dif_spi_device_init_handle():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:77
  return -1u;
}

dif_result_t dif_spi_device_init_handle(mmio_region_t base_addr,
                                        dif_spi_device_handle_t *spi) {
  if (spi == NULL) {
200033a8:       /-- c191                        beqz    a1,200033ac <dif_spi_device_init_handle+0x4>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:80
    return kDifBadArg;
  }
  return dif_spi_device_init(base_addr, &spi->dev);
200033aa:       |   b76d                        j       20003354 <dif_spi_device_init>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:81
}
200033ac:       \-> 450d                        li      a0,3
200033ae:           8082                        ret

200033b0 <dif_spi_device_configure>:
dif_spi_device_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:84

dif_result_t dif_spi_device_configure(dif_spi_device_handle_t *spi,
                                      dif_spi_device_config_t config) {
200033b0:           460d                        li      a2,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:85
  if (spi == NULL) {
200033b2:       /-- c129                        beqz    a0,200033f4 <dif_spi_device_configure+0x44>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:89
    return kDifBadArg;
  }

  uint32_t device_mode = extract_mode_from_config(config);
200033b4:       |   4594                        lw      a3,8(a1)
200033b6:       |   4709                        li      a4,2
extract_mode_from_config():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:62
  switch (config.device_mode) {
200033b8:       +-- 02d76e63            bltu    a4,a3,200033f4 <dif_spi_device_configure+0x44>
dif_spi_device_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:94
  if (device_mode == -1u) {
    return kDifBadArg;
  }

  uint32_t device_config = build_control_word(config);
200033bc:       |   4190                        lw      a2,0(a1)
200033be:       |   41d8                        lw      a4,4(a1)
build_control_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:49
                             config.tx_order == kDifSpiDeviceBitOrderLsbToMsb);
200033c0:       |   167d                        addi    a2,a2,-1
200033c2:       |   00163613            seqz    a2,a2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
200033c6:       |   060a                        slli    a2,a2,0x2
build_control_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:51
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
200033c8:       |   177d                        addi    a4,a4,-1
dif_spi_device_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:95
  mmio_region_write32(spi->dev.base_addr, SPI_DEVICE_CFG_REG_OFFSET,
200033ca:       |   411c                        lw      a5,0(a0)
build_control_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:51
                             config.rx_order == kDifSpiDeviceBitOrderLsbToMsb);
200033cc:       |   00173713            seqz    a4,a4
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
200033d0:       |   070e                        slli    a4,a4,0x3
200033d2:       |   8e59                        or      a2,a2,a4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
200033d4:       |   cbd0                        sw      a2,20(a5)
dif_spi_device_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:99
                      device_config);

  uint32_t control =
      mmio_region_read32(spi->dev.base_addr, SPI_DEVICE_CONTROL_REG_OFFSET);
200033d6:       |   4110                        lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
200033d8:       |   4a18                        lw      a4,16(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
200033da:       |   fcf77713            andi    a4,a4,-49
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
200033de:       |   06fa                        slli    a3,a3,0x1e
200033e0:       |   82e9                        srli    a3,a3,0x1a
200033e2:       |   8ed9                        or      a3,a3,a4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
200033e4:       |   ca14                        sw      a3,16(a2)
dif_spi_device_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:106
  control = bitfield_field32_write(control, SPI_DEVICE_CONTROL_MODE_FIELD,
                                   device_mode);
  mmio_region_write32(spi->dev.base_addr, SPI_DEVICE_CONTROL_REG_OFFSET,
                      control);

  spi->config = config;
200033e6:       |   4590                        lw      a2,8(a1)
200033e8:       |   c550                        sw      a2,12(a0)
200033ea:       |   41d0                        lw      a2,4(a1)
200033ec:       |   c510                        sw      a2,8(a0)
200033ee:       |   418c                        lw      a1,0(a1)
200033f0:       |   4601                        li      a2,0
200033f2:       |   c14c                        sw      a1,4(a0)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:108
  return kDifOk;
}
200033f4:       \-> 8532                        mv      a0,a2
200033f6:           8082                        ret

200033f8 <dif_spi_device_get_4b_address_mode>:
dif_spi_device_get_4b_address_mode():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:205
  return kDifOk;
}

dif_result_t dif_spi_device_get_4b_address_mode(dif_spi_device_handle_t *spi,
                                                dif_toggle_t *addr_4b) {
  if (spi == NULL || addr_4b == NULL) {
200033f8:           00153613            seqz    a2,a0
200033fc:           0015b693            seqz    a3,a1
20003400:           8ed1                        or      a3,a3,a2
20003402:           460d                        li      a2,3
20003404:       /-- e691                        bnez    a3,20003410 <dif_spi_device_get_4b_address_mode+0x18>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:209
    return kDifBadArg;
  }
  uint32_t cfg_reg =
      mmio_region_read32(spi->dev.base_addr, SPI_DEVICE_ADDR_MODE_REG_OFFSET);
20003406:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
20003408:       |   5108                        lw      a0,32(a0)
2000340a:       |   4601                        li      a2,0
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000340c:       |   8905                        andi    a0,a0,1
2000340e:       |   c188                        sw      a0,0(a1)
dif_spi_device_get_4b_address_mode():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:216
    *addr_4b = kDifToggleEnabled;
  } else {
    *addr_4b = kDifToggleDisabled;
  }
  return kDifOk;
}
20003410:       \-> 8532                        mv      a0,a2
20003412:           8082                        ret

20003414 <dif_spi_device_get_last_read_address>:
dif_spi_device_get_last_read_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:300
  return kDifOk;
}

dif_result_t dif_spi_device_get_last_read_address(dif_spi_device_handle_t *spi,
                                                  uint32_t *address) {
  if (spi == NULL || address == NULL) {
20003414:           00153613            seqz    a2,a0
20003418:           0015b693            seqz    a3,a1
2000341c:           8ed1                        or      a3,a3,a2
2000341e:           460d                        li      a2,3
20003420:       /-- e689                        bnez    a3,2000342a <dif_spi_device_get_last_read_address+0x16>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:303
    return kDifBadArg;
  }
  *address = mmio_region_read32(spi->dev.base_addr,
20003422:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
20003424:       |   5148                        lw      a0,36(a0)
20003426:       |   4601                        li      a2,0
dif_spi_device_get_last_read_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:303
20003428:       |   c188                        sw      a0,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:306
                                SPI_DEVICE_LAST_READ_ADDR_REG_OFFSET);
  return kDifOk;
}
2000342a:       \-> 8532                        mv      a0,a2
2000342c:           8082                        ret

2000342e <dif_spi_device_set_flash_command_slot>:
dif_spi_device_set_flash_command_slot():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:341
}

dif_result_t dif_spi_device_set_flash_command_slot(
    dif_spi_device_handle_t *spi, uint8_t slot, dif_toggle_t enable,
    dif_spi_device_flash_command_t command_info) {
  if (spi == NULL || slot >= SPI_DEVICE_PARAM_NUM_CMD_INFO ||
2000342e:                    00153713           seqz    a4,a0
20003432:                    0185b793           sltiu   a5,a1,24
20003436:                    0017c793           xori    a5,a5,1
2000343a:                    8f5d                       or      a4,a4,a5
2000343c:                    00263793           sltiu   a5,a2,2
20003440:                    0017c793           xori    a5,a5,1
20003444:                    8fd9                       or      a5,a5,a4
20003446:                    470d                       li      a4,3
20003448:       /----------- e3ed                       bnez    a5,2000352a <dif_spi_device_set_flash_command_slot+0xfc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:348
    return kDifBadArg;
  }
  ptrdiff_t reg_offset =
      SPI_DEVICE_CMD_INFO_0_REG_OFFSET + slot * sizeof(uint32_t);
  uint32_t reg_val = 0;
  if (enable == kDifToggleDisabled) {
2000344a:       |  /-------- ca79                       beqz    a2,20003520 <dif_spi_device_set_flash_command_slot+0xf2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:354
    reg_val =
        bitfield_bit32_write(reg_val, SPI_DEVICE_CMD_INFO_0_VALID_0_BIT, false);
  } else {
    // Validate command info parameters.
    uint32_t address_mode;
    switch (command_info.address_type) {
2000344c:       |  |         42dc                       lw      a5,4(a3)
2000344e:       |  |         470d                       li      a4,3
20003450:       +--|-------- 0cf76d63           bltu    a4,a5,2000352a <dif_spi_device_set_flash_command_slot+0xfc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:370
        address_mode = SPI_DEVICE_CMD_INFO_0_ADDR_MODE_0_VALUE_ADDR4B;
        break;
      default:
        return kDifBadArg;
    }
    if (command_info.dummy_cycles >
20003454:       |  |         0086c283           lbu     t0,8(a3)
20003458:       |  |         4621                       li      a2,8
2000345a:       +--|-------- 0c566863           bltu    a2,t0,2000352a <dif_spi_device_set_flash_command_slot+0xfc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:376
        (1u + SPI_DEVICE_CMD_INFO_0_DUMMY_SIZE_0_MASK)) {
      return kDifBadArg;
    }

    uint32_t payload_en;
    switch (command_info.payload_io_type) {
2000345e:       |  |         00c6a383           lw      t2,12(a3)
20003462:       |  |         4609                       li      a2,2
20003464:       |  |     /-- 00764f63           blt     a2,t2,20003482 <dif_spi_device_set_flash_command_slot+0x54>
20003468:       |  |     |   881e                       mv      a6,t2
2000346a:       |  |  /--|-- 02038763           beqz    t2,20003498 <dif_spi_device_set_flash_command_slot+0x6a>
2000346e:       |  |  |  |   4605                       li      a2,1
20003470:       +--|--|--|-- 0ac39d63           bne     t2,a2,2000352a <dif_spi_device_set_flash_command_slot+0xfc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:381
      case kDifSpiDevicePayloadIoNone:
        payload_en = 0x0;
        break;
      case kDifSpiDevicePayloadIoSingle:
        if (command_info.payload_dir_to_host) {
20003474:       |  |  |  |   0116c603           lbu     a2,17(a3)
20003478:       |  |  |  |   6841                       lui     a6,0x10
2000347a:       |  |  +--|-- ce19                       beqz    a2,20003498 <dif_spi_device_set_flash_command_slot+0x6a>
2000347c:       |  |  |  |   00020837           lui     a6,0x20
20003480:       |  |  +--|-- a821                       j       20003498 <dif_spi_device_set_flash_command_slot+0x6a>
20003482:       |  |  |  \-> 460d                       li      a2,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:376
    switch (command_info.payload_io_type) {
20003484:       |  |  |  /-- 00c38863           beq     t2,a2,20003494 <dif_spi_device_set_flash_command_slot+0x66>
20003488:       |  |  |  |   463d                       li      a2,15
2000348a:       +--|--|--|-- 0ac39063           bne     t2,a2,2000352a <dif_spi_device_set_flash_command_slot+0xfc>
2000348e:       |  |  |  |   000f0837           lui     a6,0xf0
20003492:       |  |  +--|-- a019                       j       20003498 <dif_spi_device_set_flash_command_slot+0x6a>
20003494:       |  |  |  \-> 00030837           lui     a6,0x30
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:398
      default:
        return kDifBadArg;
    }

    uint32_t read_pipeline_mode;
    switch (command_info.read_pipeline_mode) {
20003498:       |  |  \----> 0146a883           lw      a7,20(a3)
2000349c:       |  |         4609                       li      a2,2
2000349e:       +--|-------- 09166663           bltu    a2,a7,2000352a <dif_spi_device_set_flash_command_slot+0xfc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:416
      default:
        return kDifBadArg;
    }

    // Check for invalid argument combinations.
    if (command_info.payload_swap_enable &&
200034a2:       |  |         0126c303           lbu     t1,18(a3)
200034a6:       |  |     /-- 00030963           beqz    t1,200034b8 <dif_spi_device_set_flash_command_slot+0x8a>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:417
        (command_info.payload_dir_to_host ||
200034aa:       |  |     |   0116ce03           lbu     t3,17(a3)
200034ae:       |  |     |   0013c613           xori    a2,t2,1
200034b2:       |  |     |   01c66633           or      a2,a2,t3
200034b6:       +--|-----|-- ea35                       bnez    a2,2000352a <dif_spi_device_set_flash_command_slot+0xfc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:421
         command_info.payload_io_type != kDifSpiDevicePayloadIoSingle)) {
      return kDifBadArg;
    }
    if (command_info.passthrough_swap_address &&
200034b8:       |  |     \-> 0106c383           lbu     t2,16(a3)
200034bc:       |  |         00703e33           snez    t3,t2
200034c0:       |  |         0017b613           seqz    a2,a5
200034c4:       |  |         00ce7633           and     a2,t3,a2
200034c8:       +--|-------- e22d                       bnez    a2,2000352a <dif_spi_device_set_flash_command_slot+0xfc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:428
      return kDifBadArg;
    }

    // Write the command info values.
    reg_val = bitfield_field32_write(
        reg_val, SPI_DEVICE_CMD_INFO_0_OPCODE_0_FIELD, command_info.opcode);
200034ca:       |  |         0006c603           lbu     a2,0(a3)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
200034ce:       |  |         07fa                       slli    a5,a5,0x1e
200034d0:       |  |         83d9                       srli    a5,a5,0x16
200034d2:       |  |         03aa                       slli    t2,t2,0xa
200034d4:       |  |         00766633           or      a2,a2,t2
200034d8:       |  |         8e5d                       or      a2,a2,a5
dif_spi_device_set_flash_command_slot():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:434
    reg_val = bitfield_field32_write(
        reg_val, SPI_DEVICE_CMD_INFO_0_ADDR_MODE_0_FIELD, address_mode);
    reg_val =
        bitfield_bit32_write(reg_val, SPI_DEVICE_CMD_INFO_0_ADDR_SWAP_EN_0_BIT,
                             command_info.passthrough_swap_address);
    if (command_info.dummy_cycles > 0) {
200034da:       |  |     /-- 00028963           beqz    t0,200034ec <dif_spi_device_set_flash_command_slot+0xbe>
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
200034de:       |  |     |   12fd                       addi    t0,t0,-1
200034e0:       |  |     |   0072f713           andi    a4,t0,7
200034e4:       |  |     |   0732                       slli    a4,a4,0xc
200034e6:       |  |     |   8e59                       or      a2,a2,a4
200034e8:       |  |     |   28f61613           bseti   a2,a2,0xf
dif_spi_device_set_flash_command_slot():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:445
    }
    reg_val = bitfield_field32_write(
        reg_val, SPI_DEVICE_CMD_INFO_0_PAYLOAD_EN_0_FIELD, payload_en);
    reg_val =
        bitfield_bit32_write(reg_val, SPI_DEVICE_CMD_INFO_0_PAYLOAD_DIR_0_BIT,
                             command_info.payload_dir_to_host);
200034ec:       |  |     \-> 0116c703           lbu     a4,17(a3)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
200034f0:       |  |         080642b3           pack    t0,a2,zero
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
200034f4:       |  |         0752                       slli    a4,a4,0x14
200034f6:       |  |         01076733           or      a4,a4,a6
200034fa:       |  |         0356                       slli    t1,t1,0x15
200034fc:       |  |         00676733           or      a4,a4,t1
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_bit32_write(uint32_t bitfield,
                                     bitfield_bit32_index_t bit_index,
                                     bool value) {
  return bitfield_field32_write(bitfield, bitfield_bit32_to_field32(bit_index),
                                value ? 0x1u : 0x0u);
20003500:       |  |         01868783           lb      a5,24(a3)
20003504:       |  |         01968683           lb      a3,25(a3)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
20003508:       |  |         08fa                       slli    a7,a7,0x1e
2000350a:       |  |         0088d613           srli    a2,a7,0x8
2000350e:       |  |         07e2                       slli    a5,a5,0x18
20003510:       |  |         06e6                       slli    a3,a3,0x19
20003512:       |  |         8e59                       or      a2,a2,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
20003514:       |  |         00566633           or      a2,a2,t0
20003518:       |  |         8edd                       or      a3,a3,a5
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
2000351a:       |  |         8e55                       or      a2,a2,a3
2000351c:       |  |         29f61613           bseti   a2,a2,0x1f
dif_spi_device_set_flash_command_slot():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:459
    reg_val = bitfield_bit32_write(reg_val, SPI_DEVICE_CMD_INFO_0_BUSY_0_BIT,
                                   command_info.set_busy_status);
    reg_val =
        bitfield_bit32_write(reg_val, SPI_DEVICE_CMD_INFO_0_VALID_0_BIT, true);
  }
  mmio_region_write32(spi->dev.base_addr, reg_offset, reg_val);
20003520:       |  \-------> 4108                       lw      a0,0(a0)
20003522:       |            4701                       li      a4,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
20003524:       |            20a5c533           sh2add  a0,a1,a0
20003528:       |            dd70                       sw      a2,124(a0)
dif_spi_device_set_flash_command_slot():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:461
  return kDifOk;
}
2000352a:       \----------> 853a                       mv      a0,a4
2000352c:                    8082                       ret

2000352e <dif_spi_device_get_flash_command_fifo_occupancy>:
dif_spi_device_get_flash_command_fifo_occupancy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:640
  return kDifOk;
}

dif_result_t dif_spi_device_get_flash_command_fifo_occupancy(
    dif_spi_device_handle_t *spi, uint8_t *occupancy) {
  if (spi == NULL || occupancy == NULL) {
2000352e:           00153613            seqz    a2,a0
20003532:           0015b693            seqz    a3,a1
20003536:           8ed1                        or      a3,a3,a2
20003538:           460d                        li      a2,3
2000353a:       /-- e699                        bnez    a3,20003548 <dif_spi_device_get_flash_command_fifo_occupancy+0x1a>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:643
    return kDifBadArg;
  }
  uint32_t reg_val = mmio_region_read32(spi->dev.base_addr,
2000353c:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
2000353e:       |   5d48                        lw      a0,60(a0)
20003540:       |   4601                        li      a2,0
dif_spi_device_get_flash_command_fifo_occupancy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:645
                                        SPI_DEVICE_UPLOAD_STATUS_REG_OFFSET);
  *occupancy = (uint8_t)bitfield_field32_read(
20003542:       |   897d                        andi    a0,a0,31
20003544:       |   00a58023            sb      a0,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:648
      reg_val, SPI_DEVICE_UPLOAD_STATUS_CMDFIFO_DEPTH_FIELD);
  return kDifOk;
}
20003548:       \-> 8532                        mv      a0,a2
2000354a:           8082                        ret

2000354c <dif_spi_device_get_flash_address_fifo_occupancy>:
dif_spi_device_get_flash_address_fifo_occupancy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:652

dif_result_t dif_spi_device_get_flash_address_fifo_occupancy(
    dif_spi_device_handle_t *spi, uint8_t *occupancy) {
  if (spi == NULL || occupancy == NULL) {
2000354c:           00153613            seqz    a2,a0
20003550:           0015b693            seqz    a3,a1
20003554:           8ed1                        or      a3,a3,a2
20003556:           460d                        li      a2,3
20003558:       /-- ea81                        bnez    a3,20003568 <dif_spi_device_get_flash_address_fifo_occupancy+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:655
    return kDifBadArg;
  }
  uint32_t reg_val = mmio_region_read32(spi->dev.base_addr,
2000355a:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
2000355c:       |   5d48                        lw      a0,60(a0)
2000355e:       |   4601                        li      a2,0
dif_spi_device_get_flash_address_fifo_occupancy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:657
                                        SPI_DEVICE_UPLOAD_STATUS_REG_OFFSET);
  *occupancy = (uint8_t)bitfield_field32_read(
20003560:       |   054e                        slli    a0,a0,0x13
20003562:       |   816d                        srli    a0,a0,0x1b
20003564:       |   00a58023            sb      a0,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:660
      reg_val, SPI_DEVICE_UPLOAD_STATUS_ADDRFIFO_DEPTH_FIELD);
  return kDifOk;
}
20003568:       \-> 8532                        mv      a0,a2
2000356a:           8082                        ret

2000356c <dif_spi_device_get_flash_payload_fifo_occupancy>:
dif_spi_device_get_flash_payload_fifo_occupancy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:664

dif_result_t dif_spi_device_get_flash_payload_fifo_occupancy(
    dif_spi_device_handle_t *spi, uint16_t *occupancy, uint32_t *start_offset) {
  if (spi == NULL || occupancy == NULL || start_offset == NULL) {
2000356c:           00153693            seqz    a3,a0
20003570:           0015b713            seqz    a4,a1
20003574:           8ed9                        or      a3,a3,a4
20003576:           00163713            seqz    a4,a2
2000357a:           8f55                        or      a4,a4,a3
2000357c:           468d                        li      a3,3
2000357e:       /-- eb19                        bnez    a4,20003594 <dif_spi_device_get_flash_payload_fifo_occupancy+0x28>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:667
    return kDifBadArg;
  }
  uint32_t reg_val = mmio_region_read32(spi->dev.base_addr,
20003580:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
20003582:       |   4128                        lw      a0,64(a0)
20003584:       |   4681                        li      a3,0
dif_spi_device_get_flash_payload_fifo_occupancy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:669
                                        SPI_DEVICE_UPLOAD_STATUS2_REG_OFFSET);
  *occupancy = (uint16_t)bitfield_field32_read(
20003586:       |   1ff57713            andi    a4,a0,511
2000358a:       |   00e59023            sh      a4,0(a1)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
2000358e:       |   0522                        slli    a0,a0,0x8
20003590:       |   8161                        srli    a0,a0,0x18
dif_spi_device_get_flash_payload_fifo_occupancy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:671
      reg_val, SPI_DEVICE_UPLOAD_STATUS2_PAYLOAD_DEPTH_FIELD);
  *start_offset = bitfield_field32_read(
20003592:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:674
      reg_val, SPI_DEVICE_UPLOAD_STATUS2_PAYLOAD_START_IDX_FIELD);
  return kDifOk;
}
20003594:       \-> 8536                        mv      a0,a3
20003596:           8082                        ret

20003598 <dif_spi_device_pop_flash_command_fifo>:
dif_spi_device_pop_flash_command_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:678

// TODO: Does the IP handle overrun / underrun correctly?
dif_result_t dif_spi_device_pop_flash_command_fifo(dif_spi_device_handle_t *spi,
                                                   uint8_t *command) {
20003598:           862a                        mv      a2,a0
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:679
  if (spi == NULL || command == NULL) {
2000359a:           00153513            seqz    a0,a0
2000359e:           0015b693            seqz    a3,a1
200035a2:           8ec9                        or      a3,a3,a0
200035a4:           450d                        li      a0,3
200035a6:       /-- ea99                        bnez    a3,200035bc <dif_spi_device_pop_flash_command_fifo+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:682
    return kDifBadArg;
  }
  uint32_t upload_status = mmio_region_read32(
200035a8:       |   4210                        lw      a2,0(a2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
200035aa:       |   5e48                        lw      a0,60(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
200035ac:       |   08057693            andi    a3,a0,128
200035b0:       |   4539                        li      a0,14
dif_spi_device_pop_flash_command_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:684
      spi->dev.base_addr, SPI_DEVICE_UPLOAD_STATUS_REG_OFFSET);
  if (!bitfield_bit32_read(upload_status,
200035b2:       +-- c689                        beqz    a3,200035bc <dif_spi_device_pop_flash_command_fifo+0x24>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
200035b4:       |   4270                        lw      a2,68(a2)
200035b6:       |   4501                        li      a0,0
dif_spi_device_pop_flash_command_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:690
                           SPI_DEVICE_UPLOAD_STATUS_CMDFIFO_NOTEMPTY_BIT)) {
    return kDifUnavailable;
  }
  uint32_t cmd_item = mmio_region_read32(spi->dev.base_addr,
                                         SPI_DEVICE_UPLOAD_CMDFIFO_REG_OFFSET);
  *command = (uint8_t)bitfield_field32_read(
200035b8:       |   00c58023            sb      a2,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:693
      cmd_item, SPI_DEVICE_UPLOAD_CMDFIFO_DATA_FIELD);
  return kDifOk;
}
200035bc:       \-> 8082                        ret

200035be <dif_spi_device_pop_flash_address_fifo>:
dif_spi_device_pop_flash_address_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:696

dif_result_t dif_spi_device_pop_flash_address_fifo(dif_spi_device_handle_t *spi,
                                                   uint32_t *address) {
200035be:           862a                        mv      a2,a0
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:697
  if (spi == NULL || address == NULL) {
200035c0:           00153513            seqz    a0,a0
200035c4:           0015b693            seqz    a3,a1
200035c8:           8ec9                        or      a3,a3,a0
200035ca:           450d                        li      a0,3
200035cc:       /-- ea99                        bnez    a3,200035e2 <dif_spi_device_pop_flash_address_fifo+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:700
    return kDifBadArg;
  }
  uint32_t upload_status = mmio_region_read32(
200035ce:       |   4210                        lw      a2,0(a2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
200035d0:       |   5e48                        lw      a0,60(a2)
dif_spi_device_pop_flash_address_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:702
      spi->dev.base_addr, SPI_DEVICE_UPLOAD_STATUS_REG_OFFSET);
  if (!bitfield_bit32_read(upload_status,
200035d2:       |   01051693            slli    a3,a0,0x10
200035d6:       |   4539                        li      a0,14
200035d8:       +-- 0006d563            bgez    a3,200035e2 <dif_spi_device_pop_flash_address_fifo+0x24>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
200035dc:       |   4630                        lw      a2,72(a2)
200035de:       |   4501                        li      a0,0
dif_spi_device_pop_flash_address_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:706
                           SPI_DEVICE_UPLOAD_STATUS_ADDRFIFO_NOTEMPTY_BIT)) {
    return kDifUnavailable;
  }
  *address = mmio_region_read32(spi->dev.base_addr,
200035e0:       |   c190                        sw      a2,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:709
                                SPI_DEVICE_UPLOAD_ADDRFIFO_REG_OFFSET);
  return kDifOk;
}
200035e2:       \-> 8082                        ret

200035e4 <dif_spi_device_read_flash_payload_buffer>:
dif_spi_device_read_flash_payload_buffer():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:740
  return kDifOk;
}

dif_result_t dif_spi_device_read_flash_payload_buffer(
    dif_spi_device_handle_t *spi, uint32_t offset, size_t length,
    uint8_t *buf) {
200035e4:           8732                        mv      a4,a2
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:741
  if (spi == NULL || buf == NULL) {
200035e6:           00153613            seqz    a2,a0
200035ea:           0016b793            seqz    a5,a3
200035ee:           8fd1                        or      a5,a5,a2
200035f0:           460d                        li      a2,3
200035f2:       /-- eb9d                        bnez    a5,20003628 <dif_spi_device_read_flash_payload_buffer+0x44>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:748
  }
  const dif_spi_device_buffer_info_t info = {
      .buffer_len = kDifSpiDevicePayloadLen,
      .buffer_offset = kDifSpiDevicePayloadOffset,
  };
  if (offset >= (info.buffer_offset + (ptrdiff_t)info.buffer_len) ||
200035f4:       |   1005b793            sltiu   a5,a1,256
200035f8:       |   0017c813            xori    a6,a5,1
200035fc:       |   10000793            li      a5,256
20003600:       |   8f8d                        sub     a5,a5,a1
20003602:       |   00e7b7b3            sltu    a5,a5,a4
20003606:       |   00f867b3            or      a5,a6,a5
2000360a:       +-- ef99                        bnez    a5,20003628 <dif_spi_device_read_flash_payload_buffer+0x44>
2000360c:       |   1141                        addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:755
                (ptrdiff_t)offset)) {
    return kDifBadArg;
  }
  ptrdiff_t offset_from_base = SPI_DEVICE_INGRESS_BUFFER_REG_OFFSET +
                               info.buffer_offset + (ptrdiff_t)offset;
  mmio_region_memcpy_from_mmio32(spi->dev.base_addr, (uint32_t)offset_from_base,
2000360e:       |   c606                        sw      ra,12(sp)
20003610:       |   4108                        lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:754
                               info.buffer_offset + (ptrdiff_t)offset;
20003612:       |   78000613            li      a2,1920
20003616:       |   20b645b3            sh2add  a1,a2,a1
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:755
  mmio_region_memcpy_from_mmio32(spi->dev.base_addr, (uint32_t)offset_from_base,
2000361a:       |   8636                        mv      a2,a3
2000361c:       |   86ba                        mv      a3,a4
2000361e:       |   1b7000ef            jal     ra,20003fd4 <mmio_region_memcpy_from_mmio32>
20003622:       |   4601                        li      a2,0
20003624:       |   40b2                        lw      ra,12(sp)
20003626:       |   0141                        addi    sp,sp,16
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:758
                                 buf, length);
  return kDifOk;
}
20003628:       \-> 8532                        mv      a0,a2
2000362a:           8082                        ret

2000362c <dif_spi_device_write_flash_buffer>:
dif_spi_device_write_flash_buffer():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:763

dif_result_t dif_spi_device_write_flash_buffer(
    dif_spi_device_handle_t *spi,
    dif_spi_device_flash_buffer_type_t buffer_type, uint32_t offset,
    size_t length, const uint8_t *buf) {
2000362c:           1141                        addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:764
  if (spi == NULL || buf == NULL) {
2000362e:           c606                        sw      ra,12(sp)
20003630:           00153813            seqz    a6,a0
20003634:           00173793            seqz    a5,a4
20003638:           00f86833            or      a6,a6,a5
2000363c:           0035b793            sltiu   a5,a1,3
20003640:           0017c793            xori    a5,a5,1
20003644:           00f867b3            or      a5,a6,a5
20003648:           480d                        li      a6,3
2000364a:       /-- e7a9                        bnez    a5,20003694 <dif_spi_device_write_flash_buffer+0x68>
dif_spi_device_get_flash_buffer_info():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:719
  switch (buffer_type) {
2000364c:       |   00003797            auipc   a5,0x3
20003650:       |   c3c78793            addi    a5,a5,-964 # 20006288 <MODULE_ID+0x198>
20003654:       |   20f5c7b3            sh2add  a5,a1,a5
20003658:       |   0007a883            lw      a7,0(a5)
2000365c:       |   00003797            auipc   a5,0x3
20003660:       |   c3878793            addi    a5,a5,-968 # 20006294 <MODULE_ID+0x1a4>
20003664:       |   20f5c5b3            sh2add  a1,a1,a5
20003668:       |   0005a283            lw      t0,0(a1)
dif_spi_device_write_flash_buffer():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:773
  dif_result_t status =
      dif_spi_device_get_flash_buffer_info(buffer_type, &info);
  if (status != kDifOk) {
    return status;
  }
  if (offset >= (info.buffer_offset + (ptrdiff_t)info.buffer_len) ||
2000366c:       |   9896                        add     a7,a7,t0
2000366e:       |   011637b3            sltu    a5,a2,a7
20003672:       |   0017c793            xori    a5,a5,1
20003676:       |   40c885b3            sub     a1,a7,a2
2000367a:       |   00d5b5b3            sltu    a1,a1,a3
2000367e:       |   8ddd                        or      a1,a1,a5
20003680:       +-- e991                        bnez    a1,20003694 <dif_spi_device_write_flash_buffer+0x68>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:780
                (ptrdiff_t)offset)) {
    return kDifBadArg;
  }
  ptrdiff_t offset_from_base = SPI_DEVICE_EGRESS_BUFFER_REG_OFFSET +
                               info.buffer_offset + (ptrdiff_t)offset;
  mmio_region_memcpy_to_mmio32(spi->dev.base_addr, (uint32_t)offset_from_base,
20003682:       |   4108                        lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:778
  ptrdiff_t offset_from_base = SPI_DEVICE_EGRESS_BUFFER_REG_OFFSET +
20003684:       |   005605b3            add     a1,a2,t0
20003688:       |   6605                        lui     a2,0x1
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:779
                               info.buffer_offset + (ptrdiff_t)offset;
2000368a:       |   95b2                        add     a1,a1,a2
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:780
  mmio_region_memcpy_to_mmio32(spi->dev.base_addr, (uint32_t)offset_from_base,
2000368c:       |   863a                        mv      a2,a4
2000368e:       |   1ff000ef            jal     ra,2000408c <mmio_region_memcpy_to_mmio32>
20003692:       |   4801                        li      a6,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:783
                               buf, length);
  return kDifOk;
}
20003694:       \-> 8542                        mv      a0,a6
20003696:           40b2                        lw      ra,12(sp)
20003698:           0141                        addi    sp,sp,16
2000369a:           8082                        ret

2000369c <dif_spi_device_set_flash_status_registers>:
dif_spi_device_set_flash_status_registers():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:849
  return kDifOk;
}

dif_result_t dif_spi_device_set_flash_status_registers(
    dif_spi_device_handle_t *spi, uint32_t value) {
  if (spi == NULL) {
2000369c:       /-- c509                        beqz    a0,200036a6 <dif_spi_device_set_flash_status_registers+0xa>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:852
    return kDifBadArg;
  }
  mmio_region_write32(spi->dev.base_addr, SPI_DEVICE_FLASH_STATUS_REG_OFFSET,
2000369e:       |   4110                        lw      a2,0(a0)
200036a0:       |   4501                        li      a0,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
200036a2:       |   d60c                        sw      a1,40(a2)
dif_spi_device_set_flash_status_registers():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:855
                      value);
  return kDifOk;
}
200036a4:       |   8082                        ret
200036a6:       \-> 450d                        li      a0,3
200036a8:           8082                        ret

200036aa <dif_spi_device_get_flash_status_registers>:
dif_spi_device_get_flash_status_registers():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:859

dif_result_t dif_spi_device_get_flash_status_registers(
    dif_spi_device_handle_t *spi, uint32_t *value) {
  if (spi == NULL || value == NULL) {
200036aa:           00153613            seqz    a2,a0
200036ae:           0015b693            seqz    a3,a1
200036b2:           8ed1                        or      a3,a3,a2
200036b4:           460d                        li      a2,3
200036b6:       /-- e689                        bnez    a3,200036c0 <dif_spi_device_get_flash_status_registers+0x16>
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:862
    return kDifBadArg;
  }
  *value = mmio_region_read32(spi->dev.base_addr,
200036b8:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
200036ba:       |   5508                        lw      a0,40(a0)
200036bc:       |   4601                        li      a2,0
dif_spi_device_get_flash_status_registers():
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:862
200036be:       |   c188                        sw      a0,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_device.c:865
                              SPI_DEVICE_FLASH_STATUS_REG_OFFSET);
  return kDifOk;
}
200036c0:       \-> 8532                        mv      a0,a2
200036c2:           8082                        ret

200036c4 <dif_uart_init>:
dif_uart_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:18

#include "uart_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_init(mmio_region_t base_addr, dif_uart_t *uart) {
  if (uart == NULL) {
200036c4:       /----- c581                     beqz    a1,200036cc <dif_uart_init+0x8>
200036c6:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:22
    return kDifBadArg;
  }

  uart->base_addr = base_addr;
200036c8:       |      c188                     sw      a0,0(a1)
200036ca:       |  /-- a011                     j       200036ce <dif_uart_init+0xa>
200036cc:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:25

  return kDifOk;
}
200036ce:          \-> 8532                     mv      a0,a2
200036d0:              8082                     ret

200036d2 <dif_uart_irq_is_pending>:
dif_uart_irq_is_pending():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:136
}

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_irq_is_pending(const dif_uart_t *uart, dif_uart_irq_t irq,
                                     bool *is_pending) {
  if (uart == NULL || is_pending == NULL) {
200036d2:           00153693            seqz    a3,a0
200036d6:           00163713            seqz    a4,a2
200036da:           8ed9                        or      a3,a3,a4
200036dc:           0095b713            sltiu   a4,a1,9
200036e0:           00174713            xori    a4,a4,1
200036e4:           8f55                        or      a4,a4,a3
200036e6:           468d                        li      a3,3
200036e8:       /-- eb01                        bnez    a4,200036f8 <dif_uart_irq_is_pending+0x26>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:145
  bitfield_bit32_index_t index;
  if (!uart_get_irq_bit_index(irq, &index)) {
    return kDifBadArg;
  }

  uint32_t intr_state_reg = mmio_region_read32(
200036ea:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
200036ec:       |   4108                        lw      a0,0(a0)
200036ee:       |   4681                        li      a3,0
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
200036f0:       |   48b55533            bext    a0,a0,a1
dif_uart_irq_is_pending():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:148
      uart->base_addr, (ptrdiff_t)UART_INTR_STATE_REG_OFFSET);

  *is_pending = bitfield_bit32_read(intr_state_reg, index);
200036f4:       |   00a60023            sb      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:151

  return kDifOk;
}
200036f8:       \-> 8536                        mv      a0,a3
200036fa:           8082                        ret

200036fc <dif_uart_irq_acknowledge>:
dif_uart_irq_acknowledge():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:169
}

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_irq_acknowledge(const dif_uart_t *uart,
                                      dif_uart_irq_t irq) {
  if (uart == NULL) {
200036fc:           00a03633            snez    a2,a0
20003700:           0095b693            sltiu   a3,a1,9
20003704:           8ef1                        and     a3,a3,a2
20003706:           460d                        li      a2,3
20003708:       /-- c691                        beqz    a3,20003714 <dif_uart_irq_acknowledge+0x18>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:180
    return kDifBadArg;
  }

  // Writing to the register clears the corresponding bits (Write-one clear).
  uint32_t intr_state_reg = bitfield_bit32_write(0, index, true);
  mmio_region_write32(uart->base_addr, (ptrdiff_t)UART_INTR_STATE_REG_OFFSET,
2000370a:       |   4108                        lw      a0,0(a0)
2000370c:       |   4601                        li      a2,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
2000370e:       |   28b015b3            bset    a1,zero,a1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
20003712:       |   c10c                        sw      a1,0(a0)
dif_uart_irq_acknowledge():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:184
                      intr_state_reg);

  return kDifOk;
}
20003714:       \-> 8532                        mv      a0,a2
20003716:           8082                        ret

20003718 <dif_uart_irq_set_enabled>:
dif_uart_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:229
}

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_irq_set_enabled(const dif_uart_t *uart,
                                      dif_uart_irq_t irq, dif_toggle_t state) {
  if (uart == NULL) {
20003718:           00a036b3            snez    a3,a0
2000371c:           0095b713            sltiu   a4,a1,9
20003720:           8f75                        and     a4,a4,a3
20003722:           468d                        li      a3,3
20003724:       /-- cf09                        beqz    a4,2000373e <dif_uart_irq_set_enabled+0x26>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:238
  bitfield_bit32_index_t index;
  if (!uart_get_irq_bit_index(irq, &index)) {
    return kDifBadArg;
  }

  uint32_t intr_enable_reg = mmio_region_read32(
20003726:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
20003728:       |   4158                        lw      a4,4(a0)
2000372a:       |   4681                        li      a3,0
dif_uart_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:241
      uart->base_addr, (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET);

  bool enable_bit = (state == kDifToggleEnabled) ? true : false;
2000372c:       |   167d                        addi    a2,a2,-1
2000372e:       |   00163613            seqz    a2,a2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
20003732:       |   48b71733            bclr    a4,a4,a1
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
20003736:       |   00b615b3            sll     a1,a2,a1
2000373a:       |   8dd9                        or      a1,a1,a4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
2000373c:       |   c14c                        sw      a1,4(a0)
dif_uart_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:247
  intr_enable_reg = bitfield_bit32_write(intr_enable_reg, index, enable_bit);
  mmio_region_write32(uart->base_addr, (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET,
                      intr_enable_reg);

  return kDifOk;
}
2000373e:       \-> 8536                        mv      a0,a3
20003740:           8082                        ret

20003742 <dif_uart_irq_disable_all>:
dif_uart_irq_disable_all():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:252

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_irq_disable_all(
    const dif_uart_t *uart, dif_uart_irq_enable_snapshot_t *snapshot) {
  if (uart == NULL) {
20003742:       /----- c911                     beqz    a0,20003756 <dif_uart_irq_disable_all+0x14>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:257
    return kDifBadArg;
  }

  // Pass the current interrupt state to the caller, if requested.
  if (snapshot != NULL) {
20003744:       |  /-- c581                     beqz    a1,2000374c <dif_uart_irq_disable_all+0xa>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:258
    *snapshot = mmio_region_read32(uart->base_addr,
20003746:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
20003748:       |  |   4250                     lw      a2,4(a2)
dif_uart_irq_disable_all():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:258
2000374a:       |  |   c190                     sw      a2,0(a1)
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:263
                                   (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET);
  }

  // Disable all interrupts.
  mmio_region_write32(uart->base_addr, (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET,
2000374c:       |  \-> 410c                     lw      a1,0(a0)
2000374e:       |      4501                     li      a0,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
20003750:       |      0005a223                 sw      zero,4(a1)
dif_uart_irq_disable_all():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:267
                      0u);

  return kDifOk;
}
20003754:       |      8082                     ret
20003756:       \----> 450d                     li      a0,3
20003758:              8082                     ret

2000375a <dif_uart_irq_restore_all>:
dif_uart_irq_restore_all():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:272

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_irq_restore_all(
    const dif_uart_t *uart, const dif_uart_irq_enable_snapshot_t *snapshot) {
  if (uart == NULL || snapshot == NULL) {
2000375a:           00153613            seqz    a2,a0
2000375e:           0015b693            seqz    a3,a1
20003762:           8ed1                        or      a3,a3,a2
20003764:           460d                        li      a2,3
20003766:       /-- e689                        bnez    a3,20003770 <dif_uart_irq_restore_all+0x16>
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:277
    return kDifBadArg;
  }

  mmio_region_write32(uart->base_addr, (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET,
                      *snapshot);
20003768:       |   418c                        lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:276
  mmio_region_write32(uart->base_addr, (ptrdiff_t)UART_INTR_ENABLE_REG_OFFSET,
2000376a:       |   4108                        lw      a0,0(a0)
2000376c:       |   4601                        li      a2,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
2000376e:       |   c14c                        sw      a1,4(a0)
dif_uart_irq_restore_all():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:280

  return kDifOk;
}
20003770:       \-> 8532                        mv      a0,a2
20003772:           8082                        ret

20003774 <dif_uart_configure>:
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:92

  return bytes_read;
}

dif_result_t dif_uart_configure(const dif_uart_t *uart,
                                dif_uart_config_t config) {
20003774:                 1141                  addi    sp,sp,-16
20003776:                 c606                  sw      ra,12(sp)
20003778:                 c422                  sw      s0,8(sp)
2000377a:                 c226                  sw      s1,4(sp)
2000377c:                 c04a                  sw      s2,0(sp)
2000377e:                 440d                  li      s0,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:93
  if (uart == NULL || config.baudrate == 0 || config.clk_freq_hz == 0 ||
20003780:       /-------- c961                  beqz    a0,20003850 <dif_uart_configure+0xdc>
20003782:       |         84ae                  mv      s1,a1
20003784:       |         418c                  lw      a1,0(a1)
20003786:       +-------- c5e9                  beqz    a1,20003850 <dif_uart_configure+0xdc>
20003788:       |         40d0                  lw      a2,4(s1)
2000378a:       +-------- c279                  beqz    a2,20003850 <dif_uart_configure+0xdc>
2000378c:       |         892a                  mv      s2,a0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:94
      !dif_is_valid_toggle(config.tx_enable) ||
2000378e:       |         4894                  lw      a3,16(s1)
20003790:       |         4505                  li      a0,1
20003792:       +-------- 0ad56f63              bltu    a0,a3,20003850 <dif_uart_configure+0xdc>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:95
      !dif_is_valid_toggle(config.rx_enable)) {
20003796:       |         48d4                  lw      a3,20(s1)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:93
  if (uart == NULL || config.baudrate == 0 || config.clk_freq_hz == 0 ||
20003798:       +-------- 0ad56c63              bltu    a0,a3,20003850 <dif_uart_configure+0xdc>
2000379c:       |         0016e537              lui     a0,0x16e
200037a0:       |         36050513              addi    a0,a0,864 # 16e360 <_ottf_size+0xee360>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:117
  // 2^4 should be multiplied.
  // If uart baud rate is 1.5Mbps and IO is 24Mhz, NCO is 0x10000, which is over
  // the NCO width, use NCO = 0xffff for this case since the error is tolerable.
  // Refer to #4263
  uint64_t nco =
      ((uint64_t)config.baudrate == 1500000 && config.clk_freq_hz == 24000000)
200037a4:       |         8d2d                  xor     a0,a0,a1
200037a6:       |         016e36b7              lui     a3,0x16e3
200037aa:       |         60068693              addi    a3,a3,1536 # 16e3600 <_ottf_size+0x1663600>
200037ae:       |         8eb1                  xor     a3,a3,a2
200037b0:       |         8d55                  or      a0,a0,a3
200037b2:       |     /-- e501                  bnez    a0,200037ba <dif_uart_configure+0x46>
200037b4:       |     |   6541                  lui     a0,0x10
200037b6:       |     |   157d                  addi    a0,a0,-1
200037b8:       |  /--|-- a831                  j       200037d4 <dif_uart_configure+0x60>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:119
          ? 0xffff
          : udiv64_slow((uint64_t)config.baudrate << (nco_width + 4),
200037ba:       |  |  \-> 01459513              slli    a0,a1,0x14
200037be:       |  |      81b1                  srli    a1,a1,0xc
200037c0:       |  |      4681                  li      a3,0
200037c2:       |  |      4701                  li      a4,0
200037c4:       |  |      319000ef              jal     ra,200042dc <udiv64_slow>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:124
                        config.clk_freq_hz, NULL);
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
200037c8:       |  |      01055613              srli    a2,a0,0x10
200037cc:       |  |      8dd1                  or      a1,a1,a2
200037ce:       +--|----- e1c9                  bnez    a1,20003850 <dif_uart_configure+0xdc>
200037d0:       |  |      08054533              pack    a0,a0,zero
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:129
    return kDifBadArg;
  }

  // Check requested RXBLVL is within bounds.
  uint32_t rxblvl = config.rx_break_level;
200037d4:       |  \----> 4c8c                  lw      a1,24(s1)
200037d6:       |         440d                  li      s0,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:130
  if ((rxblvl & UART_CTRL_RXBLVL_MASK) != rxblvl) {
200037d8:       +-------- 06b46c63              bltu    s0,a1,20003850 <dif_uart_configure+0xdc>
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:48
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, 0u);
200037dc:       |         00092603              lw      a2,0(s2)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
200037e0:       |         00062823              sw      zero,16(a2)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:54
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
200037e4:       |         00092603              lw      a2,0(s2)
200037e8:       |         468d                  li      a3,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
200037ea:       |         d214                  sw      a3,32(a2)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:56
  mmio_region_write32(uart->base_addr, UART_OVRD_REG_OFFSET, 0u);
200037ec:       |         00092603              lw      a2,0(s2)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
200037f0:       |         02062423              sw      zero,40(a2)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:57
  mmio_region_write32(uart->base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
200037f4:       |         00092603              lw      a2,0(s2)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
200037f8:       |         02062823              sw      zero,48(a2)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:58
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
200037fc:       |         00092603              lw      a2,0(s2)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
20003800:       |         00062223              sw      zero,4(a2)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:59
  mmio_region_write32(uart->base_addr, UART_INTR_STATE_REG_OFFSET,
20003804:       |         00092603              lw      a2,0(s2)
20003808:       |         56fd                  li      a3,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
2000380a:       |         c214                  sw      a3,0(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
2000380c:       |         0542                  slli    a0,a0,0x10
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:141

  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_field32_write(reg, UART_CTRL_RXBLVL_FIELD, rxblvl);
  if (dif_toggle_to_bool(config.tx_enable)) {
2000380e:       |         4890                  lw      a2,16(s1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
20003810:       |         05fa                  slli    a1,a1,0x1e
20003812:       |         81d9                  srli    a1,a1,0x16
20003814:       |         8d4d                  or      a0,a0,a1
dif_toggle_to_bool():
/proc/self/cwd/./sw/device/lib/dif/dif_base.h:153
 * @param val A dif_toggle_t value.
 * @return Corresponding bool value.
 */
OT_WARN_UNUSED_RESULT
inline bool dif_toggle_to_bool(dif_toggle_t val) {
  switch (val) {
20003816:       |         167d                  addi    a2,a2,-1
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:144
    reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  }
  if (dif_toggle_to_bool(config.rx_enable)) {
20003818:       |         48cc                  lw      a1,20(s1)
dif_toggle_to_bool():
/proc/self/cwd/./sw/device/lib/dif/dif_base.h:153
2000381a:       |         00163613              seqz    a2,a2
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:141
  if (dif_toggle_to_bool(config.tx_enable)) {
2000381e:       |         8d51                  or      a0,a0,a2
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:147
    reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  }
  if (config.parity_enable == kDifToggleEnabled) {
20003820:       |         4490                  lw      a2,8(s1)
dif_toggle_to_bool():
/proc/self/cwd/./sw/device/lib/dif/dif_base.h:153
20003822:       |         15fd                  addi    a1,a1,-1
20003824:       |         0015b593              seqz    a1,a1
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:144
  if (dif_toggle_to_bool(config.rx_enable)) {
20003828:       |         0586                  slli    a1,a1,0x1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:147
  if (config.parity_enable == kDifToggleEnabled) {
2000382a:       |         167d                  addi    a2,a2,-1
2000382c:       |         00163613              seqz    a2,a2
20003830:       |         061a                  slli    a2,a2,0x6
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:150
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
20003832:       |         44d4                  lw      a3,12(s1)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:144
  if (dif_toggle_to_bool(config.rx_enable)) {
20003834:       |         8dd1                  or      a1,a1,a2
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:147
  if (config.parity_enable == kDifToggleEnabled) {
20003836:       |         8d4d                  or      a0,a0,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:153
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, reg);
20003838:       |         00092583              lw      a1,0(s2)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:150
  if (config.parity == kDifUartParityOdd) {
2000383c:       |         0016b613              seqz    a2,a3
20003840:       |         061e                  slli    a2,a2,0x7
20003842:       |         8d51                  or      a0,a0,a2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
20003844:       |         c988                  sw      a0,16(a1)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:156

  // Disable interrupts.
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
20003846:       |         00092503              lw      a0,0(s2)
2000384a:       |         4401                  li      s0,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
2000384c:       |         00052223              sw      zero,4(a0) # 10004 <_chip_info_end+0x4>
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:159

  return kDifOk;
}
20003850:       \-------> 8522                  mv      a0,s0
20003852:                 40b2                  lw      ra,12(sp)
20003854:                 4422                  lw      s0,8(sp)
20003856:                 4492                  lw      s1,4(sp)
20003858:                 4902                  lw      s2,0(sp)
2000385a:                 0141                  addi    sp,sp,16
2000385c:                 8082                  ret

2000385e <dif_uart_watermark_rx_set>:
dif_uart_watermark_rx_set():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:176
  return kDifOk;
}

dif_result_t dif_uart_watermark_rx_set(const dif_uart_t *uart,
                                       dif_uart_watermark_t watermark) {
  if (uart == NULL) {
2000385e:       /----- cd19                     beqz    a0,2000387c <dif_uart_watermark_rx_set+0x1e>
20003860:       |      862a                     mv      a2,a0
20003862:       |      4699                     li      a3,6
20003864:       |      4535                     li      a0,13
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:183
  }

  // Check if the requested watermark is valid, and get a corresponding
  // register definition to be written.
  uint32_t value;
  switch (watermark) {
20003866:       |  /-- 00b6ea63                 bltu    a3,a1,2000387a <dif_uart_watermark_rx_set+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:210
    default:
      return kDifError;
  }

  // Set watermark level.
  uint32_t reg = mmio_region_read32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET);
2000386a:       |  |   4210                     lw      a2,0(a2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
2000386c:       |  |   5214                     lw      a3,32(a2)
2000386e:       |  |   4501                     li      a0,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
20003870:       |  |   9a8d                     andi    a3,a3,-29
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
20003872:       |  |   058a                     slli    a1,a1,0x2
20003874:       |  |   89f1                     andi    a1,a1,28
20003876:       |  |   8dd5                     or      a1,a1,a3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
20003878:       |  |   d20c                     sw      a1,32(a2)
dif_uart_watermark_rx_set():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:215
  reg = bitfield_field32_write(reg, UART_FIFO_CTRL_RXILVL_FIELD, value);
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);

  return kDifOk;
}
2000387a:       |  \-> 8082                     ret
2000387c:       \----> 450d                     li      a0,3
2000387e:              8082                     ret

20003880 <dif_uart_bytes_send>:
dif_uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:291
}

dif_result_t dif_uart_bytes_send(const dif_uart_t *uart, const uint8_t *data,
                                 size_t bytes_requested,
                                 size_t *bytes_written) {
  if (uart == NULL || data == NULL) {
20003880:                 00153713              seqz    a4,a0
20003884:                 0015b793              seqz    a5,a1
20003888:                 8fd9                  or      a5,a5,a4
2000388a:                 470d                  li      a4,3
2000388c:       /-------- e795                  bnez    a5,200038b8 <dif_uart_bytes_send+0x38>
2000388e:       |         4781                  li      a5,0
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:69
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
20003890:       |  /----- c20d                  beqz    a2,200038b2 <dif_uart_bytes_send+0x32>
uart_tx_full():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:22
  uint32_t reg = mmio_region_read32(uart->base_addr, UART_STATUS_REG_OFFSET);
20003892:       |  |  /-> 00052803              lw      a6,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
20003896:       |  |  |   01482703              lw      a4,20(a6)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
2000389a:       |  |  |   8b05                  andi    a4,a4,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:69
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
2000389c:       |  +--|-- eb19                  bnez    a4,200038b2 <dif_uart_bytes_send+0x32>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:70
    uart_tx_fifo_write(uart, data[bytes_written]);
2000389e:       |  |  |   00f58733              add     a4,a1,a5
200038a2:       |  |  |   00074703              lbu     a4,0(a4)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:71
    ++bytes_written;
200038a6:       |  |  |   0785                  addi    a5,a5,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
200038a8:       |  |  |   00e82e23              sw      a4,28(a6)
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:69
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200038ac:       |  |  \-- fef613e3              bne     a2,a5,20003892 <dif_uart_bytes_send+0x12>
200038b0:       |  |      87b2                  mv      a5,a2
200038b2:       |  \----> 4701                  li      a4,0
dif_uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:297
    return kDifBadArg;
  }

  // `bytes_written` is an optional parameter.
  size_t res = uart_bytes_send(uart, data, bytes_requested);
  if (bytes_written != NULL) {
200038b4:       +-------- c291                  beqz    a3,200038b8 <dif_uart_bytes_send+0x38>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:298
    *bytes_written = res;
200038b6:       |         c29c                  sw      a5,0(a3)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:302
  }

  return kDifOk;
}
200038b8:       \-------> 853a                  mv      a0,a4
200038ba:                 8082                  ret

200038bc <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:321

  return kDifOk;
}

dif_result_t dif_uart_byte_send_polled(const dif_uart_t *uart, uint8_t byte) {
  if (uart == NULL) {
200038bc:       /----- cd19                     beqz    a0,200038da <dif_uart_byte_send_polled+0x1e>
200038be:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
200038c0:       |  /-> 4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
200038c2:       |  |   8a85                     andi    a3,a3,1
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:326
    return kDifBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
200038c4:       |  \-- fef5                     bnez    a3,200038c0 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
200038c6:       |      4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
200038c8:       |      8a85                     andi    a3,a3,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:69
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
200038ca:       |  /-- e299                     bnez    a3,200038d0 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
200038cc:       |  |   ce4c                     sw      a1,28(a2)
200038ce:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
200038d0:       |  >-> 4a48                     lw      a0,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
200038d2:       |  |   8921                     andi    a0,a0,8
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:333

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
200038d4:       |  \-- dd75                     beqz    a0,200038d0 <dif_uart_byte_send_polled+0x14>
200038d6:       |      4501                     li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:337
  }

  return kDifOk;
}
200038d8:       |      8082                     ret
200038da:       \----> 450d                     li      a0,3
200038dc:              8082                     ret

200038de <dif_uart_byte_receive_polled>:
dif_uart_byte_receive_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:341

dif_result_t dif_uart_byte_receive_polled(const dif_uart_t *uart,
                                          uint8_t *byte) {
  if (uart == NULL || byte == NULL) {
200038de:              00153613                 seqz    a2,a0
200038e2:              0015b693                 seqz    a3,a1
200038e6:              8ed1                     or      a3,a3,a2
200038e8:              460d                     li      a2,3
200038ea:       /----- ee99                     bnez    a3,20003908 <dif_uart_byte_receive_polled+0x2a>
200038ec:       |      4108                     lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
200038ee:       |  /-> 4950                     lw      a2,20(a0)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
200038f0:       |  |   02067613                 andi    a2,a2,32
dif_uart_byte_receive_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:346
    return kDifBadArg;
  }

  // Busy wait for the RX message in the FIFO.
  while (uart_rx_empty(uart)) {
200038f4:       |  \-- fe6d                     bnez    a2,200038ee <dif_uart_byte_receive_polled+0x10>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
200038f6:       |      4950                     lw      a2,20(a0)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
200038f8:       |      02067613                 andi    a2,a2,32
uart_bytes_receive():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:83
  while ((bytes_read < bytes_requested) && !uart_rx_empty(uart)) {
200038fc:       |  /-- e609                     bnez    a2,20003906 <dif_uart_byte_receive_polled+0x28>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
200038fe:       |  |   4d08                     lw      a0,24(a0)
uart_bytes_receive():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:84
    data[bytes_read] = uart_rx_fifo_read(uart);
20003900:       |  |   00a58023                 sb      a0,0(a1)
20003904:       +--|-- a011                     j       20003908 <dif_uart_byte_receive_polled+0x2a>
20003906:       |  \-> 4601                     li      a2,0
dif_uart_byte_receive_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:352
  }

  (void)uart_bytes_receive(uart, 1, byte);

  return kDifOk;
}
20003908:       \----> 8532                     mv      a0,a2
2000390a:              8082                     ret

2000390c <dif_uart_rx_bytes_available>:
dif_uart_rx_bytes_available():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:356

dif_result_t dif_uart_rx_bytes_available(const dif_uart_t *uart,
                                         size_t *num_bytes) {
  if (uart == NULL || num_bytes == NULL) {
2000390c:           00153613            seqz    a2,a0
20003910:           0015b693            seqz    a3,a1
20003914:           8ed1                        or      a3,a3,a2
20003916:           460d                        li      a2,3
20003918:       /-- e699                        bnez    a3,20003926 <dif_uart_rx_bytes_available+0x1a>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:362
    return kDifBadArg;
  }

  // RX FIFO fill level (in bytes).
  uint32_t reg =
      mmio_region_read32(uart->base_addr, UART_FIFO_STATUS_REG_OFFSET);
2000391a:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
2000391c:       |   5148                        lw      a0,36(a0)
2000391e:       |   4601                        li      a2,0
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
20003920:       |   0522                        slli    a0,a0,0x8
20003922:       |   8161                        srli    a0,a0,0x18
dif_uart_rx_bytes_available():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:363
  *num_bytes = (size_t)bitfield_field32_read(reg, UART_FIFO_STATUS_RXLVL_FIELD);
20003924:       |   c188                        sw      a0,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:366

  return kDifOk;
}
20003926:       \-> 8532                        mv      a0,a2
20003928:           8082                        ret

2000392a <xTaskCreate>:
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:734
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
2000392a:                    7179                       addi    sp,sp,-48
2000392c:                    d606                       sw      ra,44(sp)
2000392e:                    d422                       sw      s0,40(sp)
20003930:                    d226                       sw      s1,36(sp)
20003932:                    d04a                       sw      s2,32(sp)
20003934:                    ce4e                       sw      s3,28(sp)
20003936:                    cc52                       sw      s4,24(sp)
20003938:                    ca56                       sw      s5,20(sp)
2000393a:                    c85a                       sw      s6,16(sp)
2000393c:                    c65e                       sw      s7,12(sp)
2000393e:                    c462                       sw      s8,8(sp)
20003940:                    8abe                       mv      s5,a5
20003942:                    893a                       mv      s2,a4
20003944:                    89b6                       mv      s3,a3
20003946:                    8c32                       mv      s8,a2
20003948:                    84ae                       mv      s1,a1
2000394a:                    8a2a                       mv      s4,a0
/proc/self/cwd/external/freertos/tasks.c:768
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
2000394c:                    00261513           slli    a0,a2,0x2
20003950:                    2be5                       jal     20003f48 <pvPortMalloc>
20003952:                    5b7d                       li      s6,-1
/proc/self/cwd/external/freertos/tasks.c:770

                if( pxStack != NULL )
20003954:       /----------- 1a050463           beqz    a0,20003afc <xTaskCreate+0x1d2>
20003958:       |            842a                       mv      s0,a0
/proc/self/cwd/external/freertos/tasks.c:773
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
2000395a:       |            04c00513           li      a0,76
2000395e:       |            23ed                       jal     20003f48 <pvPortMalloc>
/proc/self/cwd/external/freertos/tasks.c:775

                    if( pxNewTCB != NULL )
20003960:       |  /-------- cd15                       beqz    a0,2000399c <xTaskCreate+0x72>
20003962:       |  |         8baa                       mv      s7,a0
/proc/self/cwd/external/freertos/tasks.c:778
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
20003964:       |  |         d900                       sw      s0,48(a0)
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:860
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
20003966:       |  |         208c4533           sh2add  a0,s8,s0
2000396a:       |  |         1571                       addi    a0,a0,-4
/proc/self/cwd/external/freertos/tasks.c:861
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
2000396c:       |  |         ff057b13           andi    s6,a0,-16
/proc/self/cwd/external/freertos/tasks.c:888
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
20003970:       |  |  /----- c88d                       beqz    s1,200039a2 <xTaskCreate+0x78>
/proc/self/cwd/external/freertos/tasks.c:890
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20003972:       |  |  |      034b8513           addi    a0,s7,52
20003976:       |  |  |      45bd                       li      a1,15
/proc/self/cwd/external/freertos/tasks.c:892
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
20003978:       |  |  |  /-> 00048603           lb      a2,0(s1)
2000397c:       |  |  |  |   00c50023           sb      a2,0(a0)
/proc/self/cwd/external/freertos/tasks.c:897

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
20003980:       |  |  |  |   0004c603           lbu     a2,0(s1)
20003984:       |  |  |  |   00163613           seqz    a2,a2
20003988:       |  |  |  |   0015b693           seqz    a3,a1
2000398c:       |  |  |  |   8e55                       or      a2,a2,a3
2000398e:       |  |  |  |   15fd                       addi    a1,a1,-1
20003990:       |  |  |  |   0505                       addi    a0,a0,1
20003992:       |  |  |  |   0485                       addi    s1,s1,1
20003994:       |  |  |  \-- d275                       beqz    a2,20003978 <xTaskCreate+0x4e>
/proc/self/cwd/external/freertos/tasks.c:909
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
20003996:       |  |  |      040b81a3           sb      zero,67(s7)
2000399a:       |  |  |  /-- a031                       j       200039a6 <xTaskCreate+0x7c>
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:784
                        vPortFreeStack( pxStack );
2000399c:       |  \--|--|-> 8522                       mv      a0,s0
2000399e:       |     |  |   2535                       jal     20003fca <vPortFree>
200039a0:       +-----|--|-- aab1                       j       20003afc <xTaskCreate+0x1d2>
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:915
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
200039a2:       |     \--|-> 020b8a23           sb      zero,52(s7)
200039a6:       |        \-> 4511                       li      a0,4
/proc/self/cwd/external/freertos/tasks.c:921
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
200039a8:       |            0aa95433           minu    s0,s2,a0
/proc/self/cwd/external/freertos/tasks.c:930
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
200039ac:       |            028ba623           sw      s0,44(s7)
/proc/self/cwd/external/freertos/tasks.c:938
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
200039b0:       |            004b8913           addi    s2,s7,4
200039b4:       |            854a                       mv      a0,s2
200039b6:       |            23ad                       jal     20003f20 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:939
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
200039b8:       |            018b8513           addi    a0,s7,24
200039bc:       |            2395                       jal     20003f20 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:943

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
200039be:       |            017ba823           sw      s7,16(s7)
200039c2:       |            4515                       li      a0,5
/proc/self/cwd/external/freertos/tasks.c:946

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200039c4:       |            8d01                       sub     a0,a0,s0
200039c6:       |            00abac23           sw      a0,24(s7)
/proc/self/cwd/external/freertos/tasks.c:947
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
200039ca:       |            037ba223           sw      s7,36(s7)
/proc/self/cwd/external/freertos/tasks.c:951

    #if ( portCRITICAL_NESTING_IN_TCB == 1 )
        {
            pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
200039ce:       |            040ba223           sw      zero,68(s7)
/proc/self/cwd/external/freertos/tasks.c:1002
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
200039d2:       |            040b8423           sb      zero,72(s7)
/proc/self/cwd/external/freertos/tasks.c:1052
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
200039d6:       |            855a                       mv      a0,s6
200039d8:       |            85d2                       mv      a1,s4
200039da:       |            864e                       mv      a2,s3
200039dc:       |            bc1fc0ef           jal     ra,2000059c <pxPortInitialiseStack>
200039e0:       |            00aba023           sw      a0,0(s7)
/proc/self/cwd/external/freertos/tasks.c:1058
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
200039e4:       |        /-- 000a8463           beqz    s5,200039ec <xTaskCreate+0xc2>
/proc/self/cwd/external/freertos/tasks.c:1062
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
200039e8:       |        |   017aa023           sw      s7,0(s5)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskEnterCritical( void )
    {
        portDISABLE_INTERRUPTS();
200039ec:       |        \-> 30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347

        if( xSchedulerRunning != pdFALSE )
200039f0:       |            efffea17           auipc   s4,0xefffe
200039f4:       |            6d0a2503           lw      a0,1744(s4) # 100020c0 <xSchedulerRunning>
200039f8:       |            efffec17           auipc   s8,0xefffe
200039fc:       |        /-- c901                       beqz    a0,20003a0c <xTaskCreate+0xe2>
/proc/self/cwd/external/freertos/tasks.c:4349
        {
            ( pxCurrentTCB->uxCriticalNesting )++;
200039fe:       |        |   6b4c2503           lw      a0,1716(s8) # 100020ac <pxCurrentTCB>
20003a02:       |        |   416c                       lw      a1,68(a0)
20003a04:       |        |   0585                       addi    a1,a1,1
20003a06:       |        |   c16c                       sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB->uxCriticalNesting == 1 )
20003a08:       |        |   6b4c2503           lw      a0,1716(s8)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1077
        uxCurrentNumberOfTasks++;
20003a0c:       |        \-> efffe517           auipc   a0,0xefffe
20003a10:       |            6b052583           lw      a1,1712(a0) # 100020bc <uxCurrentNumberOfTasks>
20003a14:       |            0585                       addi    a1,a1,1
20003a16:       |            6ab52823           sw      a1,1712(a0)
/proc/self/cwd/external/freertos/tasks.c:1079
        if( pxCurrentTCB == NULL )
20003a1a:       |            6b4c2583           lw      a1,1716(s8)
20003a1e:       |            effff617           auipc   a2,0xeffff
20003a22:       |            83260a93           addi    s5,a2,-1998 # 10002250 <pxReadyTasksLists>
20003a26:       |        /-- cd91                       beqz    a1,20003a42 <xTaskCreate+0x118>
/proc/self/cwd/external/freertos/tasks.c:1102
            if( xSchedulerRunning == pdFALSE )
20003a28:       |        |   6d0a2503           lw      a0,1744(s4)
20003a2c:       |     /--|-- ed25                       bnez    a0,20003aa4 <xTaskCreate+0x17a>
/proc/self/cwd/external/freertos/tasks.c:1104
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
20003a2e:       |     |  |   6b4c2503           lw      a0,1716(s8)
20003a32:       |     |  |   5548                       lw      a0,44(a0)
20003a34:       |     |  |   02cba583           lw      a1,44(s7)
20003a38:       |     +--|-- 06a5e663           bltu    a1,a0,20003aa4 <xTaskCreate+0x17a>
/proc/self/cwd/external/freertos/tasks.c:1106
                    pxCurrentTCB = pxNewTCB;
20003a3c:       |     |  |   6b7c2a23           sw      s7,1716(s8)
20003a40:       |     +--|-- a095                       j       20003aa4 <xTaskCreate+0x17a>
/proc/self/cwd/external/freertos/tasks.c:1083
            pxCurrentTCB = pxNewTCB;
20003a42:       |     |  \-> 6b7c2a23           sw      s7,1716(s8)
/proc/self/cwd/external/freertos/tasks.c:1085
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
20003a46:       |     |      6b052503           lw      a0,1712(a0)
20003a4a:       |     |      4585                       li      a1,1
20003a4c:       |     +----- 04b51c63           bne     a0,a1,20003aa4 <xTaskCreate+0x17a>
20003a50:       |     |      4495                       li      s1,5
20003a52:       |     |      8456                       mv      s0,s5
prvInitialiseTaskLists():
/proc/self/cwd/external/freertos/tasks.c:3665
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20003a54:       |     |  /-> 8522                       mv      a0,s0
20003a56:       |     |  |   295d                       jal     20003f0c <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3663
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20003a58:       |     |  |   14fd                       addi    s1,s1,-1
20003a5a:       |     |  |   0451                       addi    s0,s0,20
20003a5c:       |     |  \-- fce5                       bnez    s1,20003a54 <xTaskCreate+0x12a>
/proc/self/cwd/external/freertos/tasks.c:3668
    vListInitialise( &xDelayedTaskList1 );
20003a5e:       |     |      effff517           auipc   a0,0xeffff
20003a62:       |     |      89250993           addi    s3,a0,-1902 # 100022f0 <xDelayedTaskList1>
20003a66:       |     |      854e                       mv      a0,s3
20003a68:       |     |      2155                       jal     20003f0c <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3669
    vListInitialise( &xDelayedTaskList2 );
20003a6a:       |     |      effff517           auipc   a0,0xeffff
20003a6e:       |     |      89a50413           addi    s0,a0,-1894 # 10002304 <xDelayedTaskList2>
20003a72:       |     |      8522                       mv      a0,s0
20003a74:       |     |      2961                       jal     20003f0c <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3670
    vListInitialise( &xPendingReadyList );
20003a76:       |     |      effff517           auipc   a0,0xeffff
20003a7a:       |     |      86650513           addi    a0,a0,-1946 # 100022dc <xPendingReadyList>
20003a7e:       |     |      2179                       jal     20003f0c <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3674
            vListInitialise( &xTasksWaitingTermination );
20003a80:       |     |      effff517           auipc   a0,0xeffff
20003a84:       |     |      83450513           addi    a0,a0,-1996 # 100022b4 <xTasksWaitingTermination>
20003a88:       |     |      2151                       jal     20003f0c <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3680
            vListInitialise( &xSuspendedTaskList );
20003a8a:       |     |      effff517           auipc   a0,0xeffff
20003a8e:       |     |      83e50513           addi    a0,a0,-1986 # 100022c8 <xSuspendedTaskList>
20003a92:       |     |      29ad                       jal     20003f0c <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3686
    pxDelayedTaskList = &xDelayedTaskList1;
20003a94:       |     |      efffe517           auipc   a0,0xefffe
20003a98:       |     |      63352823           sw      s3,1584(a0) # 100020c4 <pxDelayedTaskList>
/proc/self/cwd/external/freertos/tasks.c:3687
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
20003a9c:       |     |      efffe517           auipc   a0,0xefffe
20003aa0:       |     |      62852623           sw      s0,1580(a0) # 100020c8 <pxOverflowDelayedTaskList>
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1119
        uxTaskNumber++;
20003aa4:       |     \----> efffe517           auipc   a0,0xefffe
20003aa8:       |            61052583           lw      a1,1552(a0) # 100020b4 <uxTaskNumber>
20003aac:       |            0585                       addi    a1,a1,1
20003aae:       |            60b52823           sw      a1,1552(a0)
/proc/self/cwd/external/freertos/tasks.c:1129
        prvAddTaskToReadyList( pxNewTCB );
20003ab2:       |            02cba503           lw      a0,44(s7)
20003ab6:       |            efffe597           auipc   a1,0xefffe
20003aba:       |            5fa5a603           lw      a2,1530(a1) # 100020b0 <uxTopReadyPriority>
20003abe:       |            28a61633           bset    a2,a2,a0
20003ac2:       |            5ec5ad23           sw      a2,1530(a1)
20003ac6:       |            20a54533           sh2add  a0,a0,a0
20003aca:       |            21554533           sh2add  a0,a0,s5
20003ace:       |            414c                       lw      a1,4(a0)
20003ad0:       |            00bba423           sw      a1,8(s7)
20003ad4:       |            4590                       lw      a2,8(a1)
20003ad6:       |            00cba623           sw      a2,12(s7)
20003ada:       |            4590                       lw      a2,8(a1)
20003adc:       |            01262223           sw      s2,4(a2)
20003ae0:       |            0125a423           sw      s2,8(a1)
20003ae4:       |            00abaa23           sw      a0,20(s7)
20003ae8:       |            410c                       lw      a1,0(a0)
20003aea:       |            0585                       addi    a1,a1,1
20003aec:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1133
    taskEXIT_CRITICAL();
20003aee:       |            2025                       jal     20003b16 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:1135
    if( xSchedulerRunning != pdFALSE )
20003af0:       |            6d0a2503           lw      a0,1744(s4)
20003af4:       |            4b05                       li      s6,1
20003af6:       +----------- c119                       beqz    a0,20003afc <xTaskCreate+0x1d2>
/proc/self/cwd/external/freertos/tasks.c:1139
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
20003af8:       |            6b4c2503           lw      a0,1716(s8)
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:813
        return xReturn;
20003afc:       \----------> 855a                       mv      a0,s6
20003afe:                    50b2                       lw      ra,44(sp)
20003b00:                    5422                       lw      s0,40(sp)
20003b02:                    5492                       lw      s1,36(sp)
20003b04:                    5902                       lw      s2,32(sp)
20003b06:                    49f2                       lw      s3,28(sp)
20003b08:                    4a62                       lw      s4,24(sp)
20003b0a:                    4ad2                       lw      s5,20(sp)
20003b0c:                    4b42                       lw      s6,16(sp)
20003b0e:                    4bb2                       lw      s7,12(sp)
20003b10:                    4c22                       lw      s8,8(sp)
20003b12:                    6145                       addi    sp,sp,48
20003b14:                    8082                       ret

20003b16 <vTaskExitCritical>:
vTaskExitCritical():
/proc/self/cwd/external/freertos/tasks.c:4375

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskExitCritical( void )
    {
        if( xSchedulerRunning != pdFALSE )
20003b16:              efffe517                 auipc   a0,0xefffe
20003b1a:              5aa52503                 lw      a0,1450(a0) # 100020c0 <xSchedulerRunning>
20003b1e:       /----- c105                     beqz    a0,20003b3e <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4377
        {
            if( pxCurrentTCB->uxCriticalNesting > 0U )
20003b20:       |      efffe517                 auipc   a0,0xefffe
20003b24:       |      58c52583                 lw      a1,1420(a0) # 100020ac <pxCurrentTCB>
20003b28:       |      41ec                     lw      a1,68(a1)
20003b2a:       +----- c991                     beqz    a1,20003b3e <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4379
            {
                ( pxCurrentTCB->uxCriticalNesting )--;
20003b2c:       |      58c52583                 lw      a1,1420(a0)
20003b30:       |      41f0                     lw      a2,68(a1)
20003b32:       |      167d                     addi    a2,a2,-1
20003b34:       |      c1f0                     sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4381

                if( pxCurrentTCB->uxCriticalNesting == 0U )
20003b36:       |      58c52503                 lw      a0,1420(a0)
20003b3a:       |      4168                     lw      a0,68(a0)
20003b3c:       |  /-- c111                     beqz    a0,20003b40 <vTaskExitCritical+0x2a>
/proc/self/cwd/external/freertos/tasks.c:4399
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
20003b3e:       \--|-> 8082                     ret
/proc/self/cwd/external/freertos/tasks.c:4383
                    portENABLE_INTERRUPTS();
20003b40:          \-> 30046073                 csrsi   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4399
    }
20003b44:              8082                     ret

20003b46 <vTaskSwitchContext>:
vTaskSwitchContext():
/proc/self/cwd/external/freertos/tasks.c:3015
{
20003b46:              1141                     addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:3016
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
20003b48:              c606                     sw      ra,12(sp)
20003b4a:              c422                     sw      s0,8(sp)
20003b4c:              efffe517                 auipc   a0,0xefffe
20003b50:              58052503                 lw      a0,1408(a0) # 100020cc <uxSchedulerSuspended>
20003b54:          /-- c519                     beqz    a0,20003b62 <vTaskSwitchContext+0x1c>
/proc/self/cwd/external/freertos/tasks.c:3020
        xYieldPending = pdTRUE;
20003b56:          |   efffe517                 auipc   a0,0xefffe
20003b5a:          |   4585                     li      a1,1
20003b5c:          |   56b52d23                 sw      a1,1402(a0) # 100020d0 <xYieldPending>
20003b60:       /--|-- a0a5                     j       20003bc8 <vTaskSwitchContext+0x82>
/proc/self/cwd/external/freertos/tasks.c:3024
        xYieldPending = pdFALSE;
20003b62:       |  \-> efffe517                 auipc   a0,0xefffe
20003b66:       |      56052723                 sw      zero,1390(a0) # 100020d0 <xYieldPending>
/proc/self/cwd/external/freertos/tasks.c:3056
        taskCHECK_FOR_STACK_OVERFLOW();
20003b6a:       |      efffe417                 auipc   s0,0xefffe
20003b6e:       |      54242503                 lw      a0,1346(s0) # 100020ac <pxCurrentTCB>
20003b72:       |      4108                     lw      a0,0(a0)
20003b74:       |      54242583                 lw      a1,1346(s0)
20003b78:       |      598c                     lw      a1,48(a1)
20003b7a:       |  /-- 00a5ea63                 bltu    a1,a0,20003b8e <vTaskSwitchContext+0x48>
20003b7e:       |  |   54242503                 lw      a0,1346(s0)
20003b82:       |  |   54242583                 lw      a1,1346(s0)
20003b86:       |  |   03458593                 addi    a1,a1,52
20003b8a:       |  |   b3efd0ef                 jal     ra,20000ec8 <vApplicationStackOverflowHook>
/proc/self/cwd/external/freertos/tasks.c:3067
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20003b8e:       |  \-> efffe517                 auipc   a0,0xefffe
20003b92:       |      52252503                 lw      a0,1314(a0) # 100020b0 <uxTopReadyPriority>
20003b96:       |      60051513                 clz     a0,a0
20003b9a:       |      01f54513                 xori    a0,a0,31
20003b9e:       |      20a54533                 sh2add  a0,a0,a0
20003ba2:       |      efffe597                 auipc   a1,0xefffe
20003ba6:       |      6ae58593                 addi    a1,a1,1710 # 10002250 <pxReadyTasksLists>
20003baa:       |      20b545b3                 sh2add  a1,a0,a1
20003bae:       |      41c8                     lw      a0,4(a1)
20003bb0:       |      4148                     lw      a0,4(a0)
20003bb2:       |      00858613                 addi    a2,a1,8
20003bb6:       |      c1c8                     sw      a0,4(a1)
20003bb8:       |  /-- 00c51563                 bne     a0,a2,20003bc2 <vTaskSwitchContext+0x7c>
20003bbc:       |  |   4148                     lw      a0,4(a0)
20003bbe:       |  |   0591                     addi    a1,a1,4
20003bc0:       |  |   c188                     sw      a0,0(a1)
20003bc2:       |  \-> 4548                     lw      a0,12(a0)
20003bc4:       |      54a42123                 sw      a0,1346(s0)
/proc/self/cwd/external/freertos/tasks.c:3087
}
20003bc8:       \----> 40b2                     lw      ra,12(sp)
20003bca:              4422                     lw      s0,8(sp)
20003bcc:              0141                     addi    sp,sp,16
20003bce:              8082                     ret

20003bd0 <vTaskStartScheduler>:
vTaskStartScheduler():
/proc/self/cwd/external/freertos/tasks.c:1991
{
20003bd0:           1141                        addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:2024
            xReturn = xTaskCreate( prvIdleTask,
20003bd2:           c606                        sw      ra,12(sp)
20003bd4:           00000517            auipc   a0,0x0
20003bd8:           05a50513            addi    a0,a0,90 # 20003c2e <prvIdleTask>
20003bdc:           00002597            auipc   a1,0x2
20003be0:           6c858593            addi    a1,a1,1736 # 200062a4 <uxTopUsedPriority+0x4>
20003be4:           efffe617            auipc   a2,0xefffe
20003be8:           4f060793            addi    a5,a2,1264 # 100020d4 <xIdleTaskHandle>
20003bec:           10000613            li      a2,256
20003bf0:           4681                        li      a3,0
20003bf2:           4701                        li      a4,0
20003bf4:           d37ff0ef            jal     ra,2000392a <xTaskCreate>
20003bf8:           4585                        li      a1,1
/proc/self/cwd/external/freertos/tasks.c:2046
    if( xReturn == pdPASS )
20003bfa:       /-- 02b51363            bne     a0,a1,20003c20 <vTaskStartScheduler+0x50>
/proc/self/cwd/external/freertos/tasks.c:2062
        portDISABLE_INTERRUPTS();
20003bfe:       |   30047073            csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:2074
        xNextTaskUnblockTime = portMAX_DELAY;
20003c02:       |   efffe517            auipc   a0,0xefffe
20003c06:       |   567d                        li      a2,-1
20003c08:       |   4cc52b23            sw      a2,1238(a0) # 100020d8 <xNextTaskUnblockTime>
/proc/self/cwd/external/freertos/tasks.c:2075
        xSchedulerRunning = pdTRUE;
20003c0c:       |   efffe517            auipc   a0,0xefffe
20003c10:       |   4ab52a23            sw      a1,1204(a0) # 100020c0 <xSchedulerRunning>
/proc/self/cwd/external/freertos/tasks.c:2076
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
20003c14:       |   efffe517            auipc   a0,0xefffe
20003c18:       |   4c052423            sw      zero,1224(a0) # 100020dc <xTickCount>
/proc/self/cwd/external/freertos/tasks.c:2090
        if( xPortStartScheduler() != pdFALSE )
20003c1c:       |   aeafd0ef            jal     ra,20000f06 <xPortStartScheduler>
/proc/self/cwd/external/freertos/tasks.c:2114
    ( void ) uxTopUsedPriority;
20003c20:       \-> 00002517            auipc   a0,0x2
20003c24:           68052503            lw      a0,1664(a0) # 200062a0 <uxTopUsedPriority>
/proc/self/cwd/external/freertos/tasks.c:2115
}
20003c28:           40b2                        lw      ra,12(sp)
20003c2a:           0141                        addi    sp,sp,16
20003c2c:           8082                        ret

20003c2e <prvIdleTask>:
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3435
{
20003c2e:                 1101                  addi    sp,sp,-32
20003c30:                 ce06                  sw      ra,28(sp)
20003c32:                 cc22                  sw      s0,24(sp)
20003c34:                 ca26                  sw      s1,20(sp)
20003c36:                 c84a                  sw      s2,16(sp)
20003c38:                 c64e                  sw      s3,12(sp)
20003c3a:                 c452                  sw      s4,8(sp)
20003c3c:                 c256                  sw      s5,4(sp)
20003c3e:                 efffe497              auipc   s1,0xefffe
20003c42:                 efffe917              auipc   s2,0xefffe
20003c46:                 efffe997              auipc   s3,0xefffe
20003c4a:                 efffea17              auipc   s4,0xefffe
20003c4e:                 efffea97              auipc   s5,0xefffe
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3701
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20003c52:       /-------> 47a4a503              lw      a0,1146(s1) # 100020b8 <uxDeletedTasksWaitingCleanUp>
20003c56:       |  /----- c521                  beqz    a0,20003c9e <prvIdleTask+0x70>
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
20003c58:       |  |      30047073              csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
20003c5c:       |  |      47e92503              lw      a0,1150(s2) # 100020c0 <xSchedulerRunning>
20003c60:       |  |  /-- c901                  beqz    a0,20003c70 <prvIdleTask+0x42>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
20003c62:       |  |  |   45eaa503              lw      a0,1118(s5) # 100020ac <pxCurrentTCB>
20003c66:       |  |  |   416c                  lw      a1,68(a0)
20003c68:       |  |  |   0585                  addi    a1,a1,1
20003c6a:       |  |  |   c16c                  sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
20003c6c:       |  |  |   45eaa503              lw      a0,1118(s5)
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3705
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20003c70:       |  |  \-> 67a9a503              lw      a0,1658(s3) # 100022c0 <xTasksWaitingTermination+0xc>
20003c74:       |  |      4540                  lw      s0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:3706
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20003c76:       |  |      00440513              addi    a0,s0,4
20003c7a:       |  |      2475                  jal     20003f26 <uxListRemove>
/proc/self/cwd/external/freertos/tasks.c:3707
                    --uxCurrentNumberOfTasks;
20003c7c:       |  |      472a2503              lw      a0,1138(s4) # 100020bc <uxCurrentNumberOfTasks>
20003c80:       |  |      157d                  addi    a0,a0,-1
20003c82:       |  |      46aa2923              sw      a0,1138(s4)
/proc/self/cwd/external/freertos/tasks.c:3708
                    --uxDeletedTasksWaitingCleanUp;
20003c86:       |  |      47a4a503              lw      a0,1146(s1)
20003c8a:       |  |      157d                  addi    a0,a0,-1
20003c8c:       |  |      46a4ad23              sw      a0,1146(s1)
/proc/self/cwd/external/freertos/tasks.c:3710
                taskEXIT_CRITICAL();
20003c90:       |  |      e87ff0ef              jal     ra,20003b16 <vTaskExitCritical>
prvDeleteTCB():
/proc/self/cwd/external/freertos/tasks.c:3964
                vPortFreeStack( pxTCB->pxStack );
20003c94:       |  |      5808                  lw      a0,48(s0)
20003c96:       |  |      2e15                  jal     20003fca <vPortFree>
/proc/self/cwd/external/freertos/tasks.c:3965
                vPortFree( pxTCB );
20003c98:       |  |      8522                  mv      a0,s0
20003c9a:       |  |      2e05                  jal     20003fca <vPortFree>
20003c9c:       +--|----- bf5d                  j       20003c52 <prvIdleTask+0x24>
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3459
                taskYIELD();
20003c9e:       |  \----> 00000073              ecall
20003ca2:       \-------- bf45                  j       20003c52 <prvIdleTask+0x24>

20003ca4 <vTaskSuspendAll>:
vTaskSuspendAll():
/proc/self/cwd/external/freertos/tasks.c:2142
    ++uxSchedulerSuspended;
20003ca4:       efffe517                auipc   a0,0xefffe
20003ca8:       42852583                lw      a1,1064(a0) # 100020cc <uxSchedulerSuspended>
20003cac:       0585                    addi    a1,a1,1
20003cae:       42b52423                sw      a1,1064(a0)
/proc/self/cwd/external/freertos/tasks.c:2147
}
20003cb2:       8082                    ret

20003cb4 <xTaskResumeAll>:
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2214
{
20003cb4:                    1101                       addi    sp,sp,-32
20003cb6:                    ce06                       sw      ra,28(sp)
20003cb8:                    cc22                       sw      s0,24(sp)
20003cba:                    ca26                       sw      s1,20(sp)
20003cbc:                    c84a                       sw      s2,16(sp)
20003cbe:                    c64e                       sw      s3,12(sp)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
20003cc0:                    30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
20003cc4:                    efffe517           auipc   a0,0xefffe
20003cc8:                    3fc52503           lw      a0,1020(a0) # 100020c0 <xSchedulerRunning>
20003ccc:                /-- c911                       beqz    a0,20003ce0 <xTaskResumeAll+0x2c>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
20003cce:                |   efffe517           auipc   a0,0xefffe
20003cd2:                |   3de52583           lw      a1,990(a0) # 100020ac <pxCurrentTCB>
20003cd6:                |   41f0                       lw      a2,68(a1)
20003cd8:                |   0605                       addi    a2,a2,1
20003cda:                |   c1f0                       sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
20003cdc:                |   3de52503           lw      a0,990(a0)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2229
        --uxSchedulerSuspended;
20003ce0:                \-> efffe517           auipc   a0,0xefffe
20003ce4:                    3ec52583           lw      a1,1004(a0) # 100020cc <uxSchedulerSuspended>
20003ce8:                    15fd                       addi    a1,a1,-1
20003cea:                    3eb52623           sw      a1,1004(a0)
/proc/self/cwd/external/freertos/tasks.c:2231
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20003cee:                    3ec52503           lw      a0,1004(a0)
20003cf2:       /----------- e565                       bnez    a0,20003dda <xTaskResumeAll+0x126>
/proc/self/cwd/external/freertos/tasks.c:2233
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
20003cf4:       |            efffe517           auipc   a0,0xefffe
20003cf8:       |            3c852503           lw      a0,968(a0) # 100020bc <uxCurrentNumberOfTasks>
20003cfc:       +----------- cd79                       beqz    a0,20003dda <xTaskResumeAll+0x126>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20003cfe:       |            efffe517           auipc   a0,0xefffe
20003d02:       |            5de50513           addi    a0,a0,1502 # 100022dc <xPendingReadyList>
20003d06:       |            410c                       lw      a1,0(a0)
20003d08:       |            efffe997           auipc   s3,0xefffe
20003d0c:       |  /-------- c9dd                       beqz    a1,20003dc2 <xTaskResumeAll+0x10e>
20003d0e:       |  |         efffe597           auipc   a1,0xefffe
20003d12:       |  |         efffe617           auipc   a2,0xefffe
20003d16:       |  |         53e60893           addi    a7,a2,1342 # 10002250 <pxReadyTasksLists>
20003d1a:       |  |         efffe297           auipc   t0,0xefffe
20003d1e:       |  |         4805                       li      a6,1
/proc/self/cwd/external/freertos/tasks.c:2239
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20003d20:       |  |  /----> 4558                       lw      a4,12(a0)
20003d22:       |  |  |      4758                       lw      a4,12(a4)
/proc/self/cwd/external/freertos/tasks.c:2240
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
20003d24:       |  |  |      5304                       lw      s1,32(a4)
20003d26:       |  |  |      4f40                       lw      s0,28(a4)
20003d28:       |  |  |      5710                       lw      a2,40(a4)
20003d2a:       |  |  |      c404                       sw      s1,8(s0)
20003d2c:       |  |  |      5304                       lw      s1,32(a4)
20003d2e:       |  |  |      c0c0                       sw      s0,4(s1)
20003d30:       |  |  |      4240                       lw      s0,4(a2)
20003d32:       |  |  |      01870793           addi    a5,a4,24
20003d36:       |  |  |  /-- 00f41363           bne     s0,a5,20003d3c <xTaskResumeAll+0x88>
20003d3a:       |  |  |  |   c244                       sw      s1,4(a2)
20003d3c:       |  |  |  \-> 02072423           sw      zero,40(a4)
20003d40:       |  |  |      421c                       lw      a5,0(a2)
20003d42:       |  |  |      17fd                       addi    a5,a5,-1
20003d44:       |  |  |      c21c                       sw      a5,0(a2)
/proc/self/cwd/external/freertos/tasks.c:2242
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
20003d46:       |  |  |      4750                       lw      a2,12(a4)
20003d48:       |  |  |      471c                       lw      a5,8(a4)
20003d4a:       |  |  |      4b44                       lw      s1,20(a4)
20003d4c:       |  |  |      c790                       sw      a2,8(a5)
20003d4e:       |  |  |      4740                       lw      s0,12(a4)
20003d50:       |  |  |      c05c                       sw      a5,4(s0)
20003d52:       |  |  |      40d0                       lw      a2,4(s1)
20003d54:       |  |  |      00470793           addi    a5,a4,4
20003d58:       |  |  |  /-- 00f61363           bne     a2,a5,20003d5e <xTaskResumeAll+0xaa>
20003d5c:       |  |  |  |   c0c0                       sw      s0,4(s1)
20003d5e:       |  |  |  \-> 4090                       lw      a2,0(s1)
20003d60:       |  |  |      167d                       addi    a2,a2,-1
20003d62:       |  |  |      c090                       sw      a2,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2243
                    prvAddTaskToReadyList( pxTCB );
20003d64:       |  |  |      5750                       lw      a2,44(a4)
20003d66:       |  |  |      3a25a483           lw      s1,930(a1) # 100020b0 <uxTopReadyPriority>
20003d6a:       |  |  |      28c494b3           bset    s1,s1,a2
20003d6e:       |  |  |      3a95a123           sw      s1,930(a1)
20003d72:       |  |  |      20c644b3           sh2add  s1,a2,a2
20003d76:       |  |  |      2114c4b3           sh2add  s1,s1,a7
20003d7a:       |  |  |      40c0                       lw      s0,4(s1)
20003d7c:       |  |  |      c700                       sw      s0,8(a4)
20003d7e:       |  |  |      4414                       lw      a3,8(s0)
20003d80:       |  |  |      c754                       sw      a3,12(a4)
20003d82:       |  |  |      4414                       lw      a3,8(s0)
20003d84:       |  |  |      c2dc                       sw      a5,4(a3)
20003d86:       |  |  |      c41c                       sw      a5,8(s0)
20003d88:       |  |  |      cb44                       sw      s1,20(a4)
20003d8a:       |  |  |      4094                       lw      a3,0(s1)
20003d8c:       |  |  |      0685                       addi    a3,a3,1
20003d8e:       |  |  |      c094                       sw      a3,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2247
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20003d90:       |  |  |      3922a683           lw      a3,914(t0) # 100020ac <pxCurrentTCB>
20003d94:       |  |  |      56d4                       lw      a3,44(a3)
20003d96:       |  |  |  /-- 00d66463           bltu    a2,a3,20003d9e <xTaskResumeAll+0xea>
/proc/self/cwd/external/freertos/tasks.c:2249
                        xYieldPending = pdTRUE;
20003d9a:       |  |  |  |   3d09a423           sw      a6,968(s3) # 100020d0 <xYieldPending>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20003d9e:       |  |  |  \-> 4110                       lw      a2,0(a0)
20003da0:       |  |  \----- f241                       bnez    a2,20003d20 <xTaskResumeAll+0x6c>
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20003da2:       |  |         efffe517           auipc   a0,0xefffe
20003da6:       |  |         32252583           lw      a1,802(a0) # 100020c4 <pxDelayedTaskList>
20003daa:       |  |         418c                       lw      a1,0(a1)
20003dac:       |  |  /----- c591                       beqz    a1,20003db8 <xTaskResumeAll+0x104>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
20003dae:       |  |  |      32252503           lw      a0,802(a0)
20003db2:       |  |  |      4548                       lw      a0,12(a0)
20003db4:       |  |  |      4108                       lw      a0,0(a0)
20003db6:       |  |  |  /-- a011                       j       20003dba <xTaskResumeAll+0x106>
20003db8:       |  |  \--|-> 557d                       li      a0,-1
20003dba:       |  |     \-> efffe597           auipc   a1,0xefffe
20003dbe:       |  |         30a5af23           sw      a0,798(a1) # 100020d8 <xNextTaskUnblockTime>
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2273
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
20003dc2:       |  \-------> efffe917           auipc   s2,0xefffe
20003dc6:       |            31e92483           lw      s1,798(s2) # 100020e0 <xPendedTicks>
/proc/self/cwd/external/freertos/tasks.c:2275
                    if( xPendedCounts > ( TickType_t ) 0U )
20003dca:       |     /----- c491                       beqz    s1,20003dd6 <xTaskResumeAll+0x122>
/proc/self/cwd/external/freertos/tasks.c:2279
                            if( xTaskIncrementTick() != pdFALSE )
20003dcc:       |     |  /-> 200d                       jal     20003dee <xTaskIncrementTick>
/proc/self/cwd/external/freertos/tasks.c:2288
                            --xPendedCounts;
20003dce:       |     |  |   14fd                       addi    s1,s1,-1
/proc/self/cwd/external/freertos/tasks.c:2289
                        } while( xPendedCounts > ( TickType_t ) 0U );
20003dd0:       |     |  \-- fcf5                       bnez    s1,20003dcc <xTaskResumeAll+0x118>
/proc/self/cwd/external/freertos/tasks.c:2291
                        xPendedTicks = 0;
20003dd2:       |     |      30092f23           sw      zero,798(s2)
/proc/self/cwd/external/freertos/tasks.c:2299
                if( xYieldPending != pdFALSE )
20003dd6:       |     \----> 3c89a503           lw      a0,968(s3)
/proc/self/cwd/external/freertos/tasks.c:2319
    taskEXIT_CRITICAL();
20003dda:       \----------> d3dff0ef           jal     ra,20003b16 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:2321
    return xAlreadyYielded;
20003dde:                    4501                       li      a0,0
20003de0:                    40f2                       lw      ra,28(sp)
20003de2:                    4462                       lw      s0,24(sp)
20003de4:                    44d2                       lw      s1,20(sp)
20003de6:                    4942                       lw      s2,16(sp)
20003de8:                    49b2                       lw      s3,12(sp)
20003dea:                    6105                       addi    sp,sp,32
20003dec:                    8082                       ret

20003dee <xTaskIncrementTick>:
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2740
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20003dee:                          efffe517             auipc   a0,0xefffe
20003df2:                          2de52503             lw      a0,734(a0) # 100020cc <uxSchedulerSuspended>
20003df6:                      /-- c909                 beqz    a0,20003e08 <xTaskIncrementTick+0x1a>
/proc/self/cwd/external/freertos/tasks.c:2887
        ++xPendedTicks;
20003df8:                      |   efffe517             auipc   a0,0xefffe
20003dfc:                      |   2e852583             lw      a1,744(a0) # 100020e0 <xPendedTicks>
20003e00:                      |   0585                 addi    a1,a1,1
20003e02:                      |   2eb52423             sw      a1,744(a0)
20003e06:       /--------------|-- a209                 j       20003f08 <xTaskIncrementTick+0x11a>
/proc/self/cwd/external/freertos/tasks.c:2744
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
20003e08:       |              \-> efffe517             auipc   a0,0xefffe
20003e0c:       |                  2d452283             lw      t0,724(a0) # 100020dc <xTickCount>
20003e10:       |                  0285                 addi    t0,t0,1
/proc/self/cwd/external/freertos/tasks.c:2748
        xTickCount = xConstTickCount;
20003e12:       |                  2c552a23             sw      t0,724(a0)
20003e16:       |                  efffe317             auipc   t1,0xefffe
20003e1a:       |                  efffe817             auipc   a6,0xefffe
/proc/self/cwd/external/freertos/tasks.c:2750
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
20003e1e:       |        /-------- 02029f63             bnez    t0,20003e5c <xTaskIncrementTick+0x6e>
/proc/self/cwd/external/freertos/tasks.c:2752
            taskSWITCH_DELAYED_LISTS();
20003e22:       |        |         2ae32503             lw      a0,686(t1) # 100020c4 <pxDelayedTaskList>
20003e26:       |        |         efffe597             auipc   a1,0xefffe
20003e2a:       |        |         2a25a683             lw      a3,674(a1) # 100020c8 <pxOverflowDelayedTaskList>
20003e2e:       |        |         2ad32723             sw      a3,686(t1)
20003e32:       |        |         2aa5a123             sw      a0,674(a1)
20003e36:       |        |         efffe517             auipc   a0,0xefffe
20003e3a:       |        |         2ae52583             lw      a1,686(a0) # 100020e4 <xNumOfOverflows>
20003e3e:       |        |         0585                 addi    a1,a1,1
20003e40:       |        |         2ab52723             sw      a1,686(a0)
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20003e44:       |        |         2ae32503             lw      a0,686(t1)
20003e48:       |        |         4108                 lw      a0,0(a0)
20003e4a:       |        |  /----- c511                 beqz    a0,20003e56 <xTaskIncrementTick+0x68>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
20003e4c:       |        |  |      2ae32503             lw      a0,686(t1)
20003e50:       |        |  |      4548                 lw      a0,12(a0)
20003e52:       |        |  |      4108                 lw      a0,0(a0)
20003e54:       |        |  |  /-- a011                 j       20003e58 <xTaskIncrementTick+0x6a>
20003e56:       |        |  \--|-> 557d                 li      a0,-1
20003e58:       |        |     \-> 2aa82f23             sw      a0,702(a6) # 100020d8 <xNextTaskUnblockTime>
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2763
        if( xConstTickCount >= xNextTaskUnblockTime )
20003e5c:       |        \-------> 2be82503             lw      a0,702(a6)
20003e60:       +----------------- 0aa2e463             bltu    t0,a0,20003f08 <xTaskIncrementTick+0x11a>
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20003e64:       |                  2ae32503             lw      a0,686(t1)
20003e68:       |                  4108                 lw      a0,0(a0)
20003e6a:       |  /-------------- c949                 beqz    a0,20003efc <xTaskIncrementTick+0x10e>
20003e6c:       |  |               efffe397             auipc   t2,0xefffe
20003e70:       |  |               efffe517             auipc   a0,0xefffe
20003e74:       |  |               3e050893             addi    a7,a0,992 # 10002250 <pxReadyTasksLists>
/proc/self/cwd/external/freertos/tasks.c:2783
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20003e78:       |  |     /-------> 2ae32503             lw      a0,686(t1)
20003e7c:       |  |     |         4548                 lw      a0,12(a0)
20003e7e:       |  |     |         4548                 lw      a0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:2784
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
20003e80:       |  |     |         414c                 lw      a1,4(a0)
/proc/self/cwd/external/freertos/tasks.c:2786
                    if( xConstTickCount < xItemValue )
20003e82:       |  |  /--|-------- 08b2e163             bltu    t0,a1,20003f04 <xTaskIncrementTick+0x116>
/proc/self/cwd/external/freertos/tasks.c:2802
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
20003e86:       |  |  |  |         454c                 lw      a1,12(a0)
20003e88:       |  |  |  |         4510                 lw      a2,8(a0)
20003e8a:       |  |  |  |         4958                 lw      a4,20(a0)
20003e8c:       |  |  |  |         c60c                 sw      a1,8(a2)
20003e8e:       |  |  |  |         454c                 lw      a1,12(a0)
20003e90:       |  |  |  |         c1d0                 sw      a2,4(a1)
20003e92:       |  |  |  |         4350                 lw      a2,4(a4)
20003e94:       |  |  |  |         00450693             addi    a3,a0,4
20003e98:       |  |  |  |     /-- 00d61363             bne     a2,a3,20003e9e <xTaskIncrementTick+0xb0>
20003e9c:       |  |  |  |     |   c34c                 sw      a1,4(a4)
20003e9e:       |  |  |  |     \-> 430c                 lw      a1,0(a4)
20003ea0:       |  |  |  |         15fd                 addi    a1,a1,-1
20003ea2:       |  |  |  |         c30c                 sw      a1,0(a4)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
20003ea4:       |  |  |  |         5518                 lw      a4,40(a0)
20003ea6:       |  |  |  |  /----- c30d                 beqz    a4,20003ec8 <xTaskIncrementTick+0xda>
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
20003ea8:       |  |  |  |  |      510c                 lw      a1,32(a0)
20003eaa:       |  |  |  |  |      4d50                 lw      a2,28(a0)
20003eac:       |  |  |  |  |      c60c                 sw      a1,8(a2)
20003eae:       |  |  |  |  |      510c                 lw      a1,32(a0)
20003eb0:       |  |  |  |  |      c1d0                 sw      a2,4(a1)
20003eb2:       |  |  |  |  |      4350                 lw      a2,4(a4)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
20003eb4:       |  |  |  |  |      01850793             addi    a5,a0,24
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
20003eb8:       |  |  |  |  |  /-- 00f61363             bne     a2,a5,20003ebe <xTaskIncrementTick+0xd0>
20003ebc:       |  |  |  |  |  |   c34c                 sw      a1,4(a4)
20003ebe:       |  |  |  |  |  \-> 02052423             sw      zero,40(a0)
20003ec2:       |  |  |  |  |      430c                 lw      a1,0(a4)
20003ec4:       |  |  |  |  |      15fd                 addi    a1,a1,-1
20003ec6:       |  |  |  |  |      c30c                 sw      a1,0(a4)
/proc/self/cwd/external/freertos/tasks.c:2817
                    prvAddTaskToReadyList( pxTCB );
20003ec8:       |  |  |  |  \----> 554c                 lw      a1,44(a0)
20003eca:       |  |  |  |         2443a603             lw      a2,580(t2) # 100020b0 <uxTopReadyPriority>
20003ece:       |  |  |  |         28b61633             bset    a2,a2,a1
20003ed2:       |  |  |  |         24c3a223             sw      a2,580(t2)
20003ed6:       |  |  |  |         20b5c5b3             sh2add  a1,a1,a1
20003eda:       |  |  |  |         2115c5b3             sh2add  a1,a1,a7
20003ede:       |  |  |  |         41d0                 lw      a2,4(a1)
20003ee0:       |  |  |  |         c510                 sw      a2,8(a0)
20003ee2:       |  |  |  |         4618                 lw      a4,8(a2)
20003ee4:       |  |  |  |         c558                 sw      a4,12(a0)
20003ee6:       |  |  |  |         4618                 lw      a4,8(a2)
20003ee8:       |  |  |  |         c354                 sw      a3,4(a4)
20003eea:       |  |  |  |         c614                 sw      a3,8(a2)
20003eec:       |  |  |  |         c94c                 sw      a1,20(a0)
20003eee:       |  |  |  |         4188                 lw      a0,0(a1)
20003ef0:       |  |  |  |         0505                 addi    a0,a0,1
20003ef2:       |  |  |  |         c188                 sw      a0,0(a1)
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20003ef4:       |  |  |  |         2ae32503             lw      a0,686(t1)
20003ef8:       |  |  |  |         4108                 lw      a0,0(a0)
20003efa:       |  |  |  \-------- fd3d                 bnez    a0,20003e78 <xTaskIncrementTick+0x8a>
20003efc:       |  \--|----------> 557d                 li      a0,-1
/proc/self/cwd/external/freertos/tasks.c:2774
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003efe:       |     |            2aa82f23             sw      a0,702(a6)
20003f02:       +-----|----------- a019                 j       20003f08 <xTaskIncrementTick+0x11a>
/proc/self/cwd/external/freertos/tasks.c:2793
                        xNextTaskUnblockTime = xItemValue;
20003f04:       |     \----------> 2ab82f23             sw      a1,702(a6)
/proc/self/cwd/external/freertos/tasks.c:2898
    return xSwitchRequired;
20003f08:       \----------------> 4501                 li      a0,0
20003f0a:                          8082                 ret

20003f0c <vListInitialise>:
vListInitialise():
/proc/self/cwd/external/freertos/list.c:55
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20003f0c:       00850593                addi    a1,a0,8
20003f10:       c14c                    sw      a1,4(a0)
20003f12:       567d                    li      a2,-1
/proc/self/cwd/external/freertos/list.c:59

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
20003f14:       c510                    sw      a2,8(a0)
/proc/self/cwd/external/freertos/list.c:63

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20003f16:       c54c                    sw      a1,12(a0)
/proc/self/cwd/external/freertos/list.c:64
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20003f18:       c90c                    sw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:66

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20003f1a:       00052023                sw      zero,0(a0)
/proc/self/cwd/external/freertos/list.c:72

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20003f1e:       8082                    ret

20003f20 <vListInitialiseItem>:
vListInitialiseItem():
/proc/self/cwd/external/freertos/list.c:78
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
20003f20:       00052823                sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:84

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
20003f24:       8082                    ret

20003f26 <uxListRemove>:
uxListRemove():
/proc/self/cwd/external/freertos/list.c:194
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
20003f26:           4510                        lw      a2,8(a0)
20003f28:           4154                        lw      a3,4(a0)
/proc/self/cwd/external/freertos/list.c:192
    List_t * const pxList = pxItemToRemove->pxContainer;
20003f2a:           490c                        lw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:194
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
20003f2c:           c690                        sw      a2,8(a3)
/proc/self/cwd/external/freertos/list.c:195
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
20003f2e:           4510                        lw      a2,8(a0)
20003f30:           c254                        sw      a3,4(a2)
/proc/self/cwd/external/freertos/list.c:201

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
20003f32:           41d4                        lw      a3,4(a1)
20003f34:       /-- 00a69363            bne     a3,a0,20003f3a <uxListRemove+0x14>
/proc/self/cwd/external/freertos/list.c:203
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
20003f38:       |   c1d0                        sw      a2,4(a1)
/proc/self/cwd/external/freertos/list.c:210
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
20003f3a:       \-> 00052823            sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:211
    ( pxList->uxNumberOfItems )--;
20003f3e:           4188                        lw      a0,0(a1)
20003f40:           157d                        addi    a0,a0,-1
20003f42:           c188                        sw      a0,0(a1)
/proc/self/cwd/external/freertos/list.c:213

    return pxList->uxNumberOfItems;
20003f44:           4188                        lw      a0,0(a1)
20003f46:           8082                        ret

20003f48 <pvPortMalloc>:
pvPortMalloc():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:72
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
20003f48:                 1141                  addi    sp,sp,-16
20003f4a:                 c606                  sw      ra,12(sp)
20003f4c:                 c422                  sw      s0,8(sp)
20003f4e:                 c226                  sw      s1,4(sp)
20003f50:                 c04a                  sw      s2,0(sp)
20003f52:                 842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:79
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
20003f54:                 893d                  andi    a0,a0,15
20003f56:             /-- c909                  beqz    a0,20003f68 <pvPortMalloc+0x20>
20003f58:             |   ff047513              andi    a0,s0,-16
20003f5c:             |   0541                  addi    a0,a0,16
20003f5e:             |   00a435b3              sltu    a1,s0,a0
20003f62:             |   40b00433              neg     s0,a1
20003f66:             |   8c69                  and     s0,s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:94
                }
            }
        }
    #endif

    vTaskSuspendAll();
20003f68:             \-> d3dff0ef              jal     ra,20003ca4 <vTaskSuspendAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:96
    {
        if( pucAlignedHeap == NULL )
20003f6c:                 efffe517              auipc   a0,0xefffe
20003f70:                 17c52483              lw      s1,380(a0) # 100020e8 <pvPortMalloc.pucAlignedHeap>
20003f74:             /-- c099                  beqz    s1,20003f7a <pvPortMalloc+0x32>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
20003f76:          /--|-- e811                  bnez    s0,20003f8a <pvPortMalloc+0x42>
20003f78:       /--|--|-- a835                  j       20003fb4 <pvPortMalloc+0x6c>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:99
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
20003f7a:       |  |  \-> efffe597              auipc   a1,0xefffe
20003f7e:       |  |      3ae58493              addi    s1,a1,942 # 10002328 <ucHeap+0x10>
20003f82:       |  |      98c1                  andi    s1,s1,-16
20003f84:       |  |      16952e23              sw      s1,380(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
        if( ( xWantedSize > 0 ) && /* valid size */
20003f88:       +--|----- c415                  beqz    s0,20003fb4 <pvPortMalloc+0x6c>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:104
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
20003f8a:       |  \----> efffe517              auipc   a0,0xefffe
20003f8e:       |         16252903              lw      s2,354(a0) # 100020ec <xNextFreeByte>
20003f92:       |         944a                  add     s0,s0,s2
20003f94:       |         00445593              srli    a1,s0,0x4
20003f98:       |         7ff5b593              sltiu   a1,a1,2047
20003f9c:       |         00893633              sltu    a2,s2,s0
20003fa0:       |         8df1                  and     a1,a1,a2
20003fa2:       +-------- c989                  beqz    a1,20003fb4 <pvPortMalloc+0x6c>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:110
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
            xNextFreeByte += xWantedSize;
20003fa4:       |         16852123              sw      s0,354(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
20003fa8:       |         d0dff0ef              jal     ra,20003cb4 <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:119

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
20003fac:       |     /-- c491                  beqz    s1,20003fb8 <pvPortMalloc+0x70>
20003fae:       |     |   01248533              add     a0,s1,s2
20003fb2:       |  /--|-- a031                  j       20003fbe <pvPortMalloc+0x76>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
    ( void ) xTaskResumeAll();
20003fb4:       \--|--|-> d01ff0ef              jal     ra,20003cb4 <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:122
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
20003fb8:          |  \-> ec7fc0ef              jal     ra,20000e7e <vApplicationMallocFailedHook>
20003fbc:          |      4501                  li      a0,0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:127
            }
        }
    #endif

    return pvReturn;
20003fbe:          \----> 40b2                  lw      ra,12(sp)
20003fc0:                 4422                  lw      s0,8(sp)
20003fc2:                 4492                  lw      s1,4(sp)
20003fc4:                 4902                  lw      s2,0(sp)
20003fc6:                 0141                  addi    sp,sp,16
20003fc8:                 8082                  ret

20003fca <vPortFree>:
vPortFree():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:140
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
20003fca:       8082                    ret

20003fcc <manufacturer_pre_test_hook>:
manufacturer_pre_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:14
// The default test hooks do nothing, but exist as the OTTF expects some hooks
// to exist. Additionally, they are weak symbols so they may be overridden by
// other custom test hooks.

OT_WEAK
bool manufacturer_pre_test_hook(void) { return true; }
20003fcc:       4505                    li      a0,1
20003fce:       8082                    ret

20003fd0 <manufacturer_post_test_hook>:
manufacturer_post_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:17

OT_WEAK
bool manufacturer_post_test_hook(void) { return true; }
20003fd0:       4505                    li      a0,1
20003fd2:       8082                    ret

20003fd4 <mmio_region_memcpy_from_mmio32>:
mmio_region_memcpy_from_mmio32():
/proc/self/cwd/sw/device/lib/base/mmio.c:104
  }
}

void mmio_region_memcpy_from_mmio32(mmio_region_t base, uint32_t offset,
                                    void *dest, size_t len) {
  mmio_region_memcpy32(base, offset, dest, len, true);
20003fd4:       4705                    li      a4,1
20003fd6:       a009                    j       20003fd8 <mmio_region_memcpy32>

20003fd8 <mmio_region_memcpy32>:
mmio_region_memcpy32():
/proc/self/cwd/sw/device/lib/base/mmio.c:27
                                 uint8_t *buf, size_t len, bool from_mmio) {
20003fd8:                    7179                       addi    sp,sp,-48
/proc/self/cwd/sw/device/lib/base/mmio.c:28
  if (len == 0) {
20003fda:                    d606                       sw      ra,44(sp)
20003fdc:                    d422                       sw      s0,40(sp)
20003fde:                    d226                       sw      s1,36(sp)
20003fe0:                    d04a                       sw      s2,32(sp)
20003fe2:                    ce4e                       sw      s3,28(sp)
20003fe4:                    cc52                       sw      s4,24(sp)
20003fe6:                    ca56                       sw      s5,20(sp)
20003fe8:                    c85a                       sw      s6,16(sp)
20003fea:       /----------- c6d9                       beqz    a3,20004078 <mmio_region_memcpy32+0xa0>
20003fec:       |            893a                       mv      s2,a4
20003fee:       |            84b6                       mv      s1,a3
20003ff0:       |            89b2                       mv      s3,a2
20003ff2:       |            8b2e                       mv      s6,a1
20003ff4:       |            8a2a                       mv      s4,a0
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:58
 * Computes how many bytes `addr` is ahead of the previous 32-bit word alignment
 * boundary.
 */
OT_WARN_UNUSED_RESULT
inline ptrdiff_t misalignment32_of(uintptr_t addr) {
  return addr % alignof(uint32_t);
20003ff6:       |            0035f513           andi    a0,a1,3
mmio_region_memcpy32():
/proc/self/cwd/sw/device/lib/base/mmio.c:35
  if (misalignment != 0) {
20003ffa:       |  /-------- cd0d                       beqz    a0,20004034 <mmio_region_memcpy32+0x5c>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
20003ffc:       |  |         ffcb7413           andi    s0,s6,-4
20004000:       |  |         9452                       add     s0,s0,s4
20004002:       |  |         400c                       lw      a1,0(s0)
20004004:       |  |         4611                       li      a2,4
mmio_region_memcpy32():
/proc/self/cwd/sw/device/lib/base/mmio.c:38
    size_t realignment = sizeof(uint32_t) - OT_UNSIGNED(misalignment);
20004006:       |  |         8e09                       sub     a2,a2,a0
/proc/self/cwd/sw/device/lib/base/mmio.c:42
    if (realignment > len) {
20004008:       |  |         0a965ab3           minu    s5,a2,s1
/proc/self/cwd/sw/device/lib/base/mmio.c:49
    uint32_t current_word = mmio_region_read32(base, current_word_offset);
2000400c:       |  |         c62e                       sw      a1,12(sp)
2000400e:       |  |         006c                       addi    a1,sp,12
/proc/self/cwd/sw/device/lib/base/mmio.c:53
    uint8_t *current_byte = ((uint8_t *)&current_word) + misalignment;
20004010:       |  |         8dc9                       or      a1,a1,a0
/proc/self/cwd/sw/device/lib/base/mmio.c:54
    if (from_mmio) {
20004012:       |  |     /-- 00090663           beqz    s2,2000401e <mmio_region_memcpy32+0x46>
/proc/self/cwd/sw/device/lib/base/mmio.c:55
      memcpy(buf, current_byte, realignment);
20004016:       |  |     |   854e                       mv      a0,s3
20004018:       |  |     |   8656                       mv      a2,s5
2000401a:       |  |     |   289d                       jal     20004090 <memcpy>
2000401c:       |  |  /--|-- a039                       j       2000402a <mmio_region_memcpy32+0x52>
/proc/self/cwd/sw/device/lib/base/mmio.c:58
      memcpy(current_byte, buf, realignment);
2000401e:       |  |  |  \-> 852e                       mv      a0,a1
20004020:       |  |  |      85ce                       mv      a1,s3
20004022:       |  |  |      8656                       mv      a2,s5
20004024:       |  |  |      20b5                       jal     20004090 <memcpy>
/proc/self/cwd/sw/device/lib/base/mmio.c:59
      mmio_region_write32(base, current_word_offset, current_word);
20004026:       |  |  |      4532                       lw      a0,12(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
20004028:       |  |  |      c008                       sw      a0,0(s0)
mmio_region_memcpy32():
/proc/self/cwd/sw/device/lib/base/mmio.c:64
    len -= realignment;
2000402a:       |  |  \----> 415484b3           sub     s1,s1,s5
/proc/self/cwd/sw/device/lib/base/mmio.c:68
  while (len > 0) {
2000402e:       +--|-------- c4a9                       beqz    s1,20004078 <mmio_region_memcpy32+0xa0>
20004030:       |  |         9b56                       add     s6,s6,s5
20004032:       |  |         99d6                       add     s3,s3,s5
20004034:       |  \-------> 4a91                       li      s5,4
/proc/self/cwd/sw/device/lib/base/mmio.c:73
    if (bytes_to_copy > len) {
20004036:       |  /-------> 0044b513           sltiu   a0,s1,4
/proc/self/cwd/sw/device/lib/base/mmio.c:79
    if (from_mmio || bytes_to_copy != sizeof(uint32_t)) {
2000403a:       |  |         00a96533           or      a0,s2,a0
/proc/self/cwd/sw/device/lib/base/mmio.c:78
    uint32_t current_word = 0;
2000403e:       |  |         c402                       sw      zero,8(sp)
/proc/self/cwd/sw/device/lib/base/mmio.c:79
    if (from_mmio || bytes_to_copy != sizeof(uint32_t)) {
20004040:       |  |     /-- c511                       beqz    a0,2000404c <mmio_region_memcpy32+0x74>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return (
20004042:       |  |     |   ffcb7513           andi    a0,s6,-4
20004046:       |  |     |   9552                       add     a0,a0,s4
20004048:       |  |     |   4108                       lw      a0,0(a0)
mmio_region_memcpy32():
/proc/self/cwd/sw/device/lib/base/mmio.c:84
      current_word = mmio_region_read32(base, OT_SIGNED(offset));
2000404a:       |  |     |   c42a                       sw      a0,8(sp)
2000404c:       |  |     \-> 0b54d433           minu    s0,s1,s5
/proc/self/cwd/sw/device/lib/base/mmio.c:88
    if (from_mmio) {
20004050:       |  |     /-- 00090763           beqz    s2,2000405e <mmio_region_memcpy32+0x86>
/proc/self/cwd/sw/device/lib/base/mmio.c:89
      memcpy(buf, &current_word, bytes_to_copy);
20004054:       |  |     |   002c                       addi    a1,sp,8
20004056:       |  |     |   854e                       mv      a0,s3
20004058:       |  |     |   8622                       mv      a2,s0
2000405a:       |  |     |   281d                       jal     20004090 <memcpy>
2000405c:       |  |  /--|-- a811                       j       20004070 <mmio_region_memcpy32+0x98>
/proc/self/cwd/sw/device/lib/base/mmio.c:92
      memcpy(&current_word, buf, bytes_to_copy);
2000405e:       |  |  |  \-> 0028                       addi    a0,sp,8
20004060:       |  |  |      85ce                       mv      a1,s3
20004062:       |  |  |      8622                       mv      a2,s0
20004064:       |  |  |      2035                       jal     20004090 <memcpy>
/proc/self/cwd/sw/device/lib/base/mmio.c:93
      mmio_region_write32(base, OT_SIGNED(offset), current_word);
20004066:       |  |  |      4522                       lw      a0,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:149
  ((volatile uint32_t *)base.base)[OT_UNSIGNED(offset) / sizeof(uint32_t)] =
20004068:       |  |  |      ffcb7593           andi    a1,s6,-4
2000406c:       |  |  |      95d2                       add     a1,a1,s4
2000406e:       |  |  |      c188                       sw      a0,0(a1)
mmio_region_memcpy32():
/proc/self/cwd/sw/device/lib/base/mmio.c:96
    offset += bytes_to_copy;
20004070:       |  |  \----> 9b22                       add     s6,s6,s0
/proc/self/cwd/sw/device/lib/base/mmio.c:98
    len -= bytes_to_copy;
20004072:       |  |         8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/base/mmio.c:97
    buf += bytes_to_copy;
20004074:       |  |         99a2                       add     s3,s3,s0
/proc/self/cwd/sw/device/lib/base/mmio.c:68
  while (len > 0) {
20004076:       |  \-------- f0e1                       bnez    s1,20004036 <mmio_region_memcpy32+0x5e>
/proc/self/cwd/sw/device/lib/base/mmio.c:100
}
20004078:       \----------> 50b2                       lw      ra,44(sp)
2000407a:                    5422                       lw      s0,40(sp)
2000407c:                    5492                       lw      s1,36(sp)
2000407e:                    5902                       lw      s2,32(sp)
20004080:                    49f2                       lw      s3,28(sp)
20004082:                    4a62                       lw      s4,24(sp)
20004084:                    4ad2                       lw      s5,20(sp)
20004086:                    4b42                       lw      s6,16(sp)
20004088:                    6145                       addi    sp,sp,48
2000408a:                    8082                       ret

2000408c <mmio_region_memcpy_to_mmio32>:
mmio_region_memcpy_to_mmio32():
/proc/self/cwd/sw/device/lib/base/mmio.c:112
void mmio_region_memcpy_to_mmio32(mmio_region_t base, uint32_t offset,
                                  const void *src, size_t len) {
  // Below `const` cast is necessary to be able to use `mmio_region_memcpy32`
  // for both read and write operations but `from_mmio = false` means that `src`
  // will never be written to.
  mmio_region_memcpy32(base, offset, (void *)src, len, false);
2000408c:       4701                    li      a4,0
2000408e:       b7a9                    j       20003fd8 <mmio_region_memcpy32>

20004090 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:63
  return word << 24 | word << 16 | word << 8 | word;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
20004090:                    00153693           seqz    a3,a0
20004094:                    0015b713           seqz    a4,a1
20004098:                    8ed9                       or      a3,a3,a4
2000409a:       /----------- eabd                       bnez    a3,20004110 <memcpy+0x80>
2000409c:       |            4691                       li      a3,4
2000409e:       |            88b2                       mv      a7,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:20
  if (len < alignof(uint32_t)) {
200040a0:       |        /-- 00d66c63           bltu    a2,a3,200040b8 <memcpy+0x28>
200040a4:       |        |   00a5c6b3           xor     a3,a1,a0
200040a8:       |        |   8a8d                       andi    a3,a3,3
200040aa:       |        |   8832                       mv      a6,a2
200040ac:       |        |   88b2                       mv      a7,a2
200040ae:       |     /--|-- ee81                       bnez    a3,200040c6 <memcpy+0x36>
200040b0:       |     |  |   40a006b3           neg     a3,a0
200040b4:       |     |  |   0036f893           andi    a7,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:52
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
200040b8:       |     |  \-> 411606b3           sub     a3,a2,a7
/proc/self/cwd/sw/device/lib/base/memory.c:53
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
200040bc:       |     |      9af1                       andi    a3,a3,-4
200040be:       |     |      0116e833           or      a6,a3,a7
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:71
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
200040c2:       |  /--|----- 00088d63           beqz    a7,200040dc <memcpy+0x4c>
200040c6:       |  |  \----> 82ae                       mv      t0,a1
200040c8:       |  |         872a                       mv      a4,a0
200040ca:       |  |         86c6                       mv      a3,a7
/proc/self/cwd/sw/device/lib/base/memory.c:72
    dest8[i] = src8[i];
200040cc:       |  |     /-> 00028783           lb      a5,0(t0)
200040d0:       |  |     |   00f70023           sb      a5,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:71
  for (; i < body_offset; ++i) {
200040d4:       |  |     |   16fd                       addi    a3,a3,-1
200040d6:       |  |     |   0705                       addi    a4,a4,1
200040d8:       |  |     |   0285                       addi    t0,t0,1
200040da:       |  |     \-- faed                       bnez    a3,200040cc <memcpy+0x3c>
/proc/self/cwd/sw/device/lib/base/memory.c:74
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
200040dc:       |  \--/----X 0108fb63           bgeu    a7,a6,200040f2 <memcpy+0x62>
/proc/self/cwd/sw/device/lib/base/memory.c:75
    uint32_t word = read_32(&src8[i]);
200040e0:       |     |  /-> 011586b3           add     a3,a1,a7
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:90
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
200040e4:       |     |  |   4294                       lw      a3,0(a3)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:76
    write_32(word, &dest8[i]);
200040e6:       |     |  |   01150733           add     a4,a0,a7
/proc/self/cwd/sw/device/lib/base/memory.c:74
  for (; i < tail_offset; i += sizeof(uint32_t)) {
200040ea:       |     |  |   0891                       addi    a7,a7,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:149
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
200040ec:       |     |  |   c314                       sw      a3,0(a4)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:74
200040ee:       |     |  \-- ff08e9e3           bltu    a7,a6,200040e0 <memcpy+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:78
  }
  for (; i < len; ++i) {
200040f2:       +-----\----X 00c8ff63           bgeu    a7,a2,20004110 <memcpy+0x80>
200040f6:       |            41160633           sub     a2,a2,a7
200040fa:       |            01150733           add     a4,a0,a7
200040fe:       |            95c6                       add     a1,a1,a7
/proc/self/cwd/sw/device/lib/base/memory.c:79
    dest8[i] = src8[i];
20004100:       |        /-> 00058683           lb      a3,0(a1)
20004104:       |        |   00d70023           sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:78
  for (; i < len; ++i) {
20004108:       |        |   167d                       addi    a2,a2,-1
2000410a:       |        |   0705                       addi    a4,a4,1
2000410c:       |        |   0585                       addi    a1,a1,1
2000410e:       |        \-- fa6d                       bnez    a2,20004100 <memcpy+0x70>
/proc/self/cwd/sw/device/lib/base/memory.c:82
  }
  return dest;
}
20004110:       \----------> 8082                       ret

20004112 <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:84

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
20004112:                 4691                  li      a3,4
20004114:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:20
  if (len < alignof(uint32_t)) {
20004116:             /-- 00d66563              bltu    a2,a3,20004120 <memset+0xe>
2000411a:             |   40a00733              neg     a4,a0
2000411e:             |   8b0d                  andi    a4,a4,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:52
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
20004120:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:53
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
20004124:                 9af1                  andi    a3,a3,-4
20004126:                 00e6e833              or      a6,a3,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:91
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
2000412a:          /----- cb01                  beqz    a4,2000413a <memset+0x28>
2000412c:          |      87aa                  mv      a5,a0
2000412e:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:92
    dest8[i] = value8;
20004130:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:91
  for (; i < body_offset; ++i) {
20004134:          |  |   16fd                  addi    a3,a3,-1
20004136:          |  |   0785                  addi    a5,a5,1
20004138:          |  \-- fee5                  bnez    a3,20004130 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:95
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
2000413a:       /--\----X 03077063              bgeu    a4,a6,2000415a <memset+0x48>
2000413e:       |         0ff5f693              andi    a3,a1,255
20004142:       |         010107b7              lui     a5,0x1010
20004146:       |         10178793              addi    a5,a5,257 # 1010101 <_ottf_size+0xf90101>
2000414a:       |         02f687b3              mul     a5,a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
2000414e:       |     /-> 00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:95
  for (; i < tail_offset; i += sizeof(uint32_t)) {
20004152:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:149
20004154:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:95
20004156:       |     \-- ff076ce3              bltu    a4,a6,2000414e <memset+0x3c>
/proc/self/cwd/sw/device/lib/base/memory.c:98
  }
  for (; i < len; ++i) {
2000415a:       \--/----X 00c77a63              bgeu    a4,a2,2000416e <memset+0x5c>
2000415e:          |      8e19                  sub     a2,a2,a4
20004160:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:99
    dest8[i] = value8;
20004164:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:98
  for (; i < len; ++i) {
20004168:          |  |   167d                  addi    a2,a2,-1
2000416a:          |  |   0685                  addi    a3,a3,1
2000416c:          |  \-- fe65                  bnez    a2,20004164 <memset+0x52>
/proc/self/cwd/sw/device/lib/base/memory.c:101
  }
  return dest;
2000416e:          \----> 8082                  ret

20004170 <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:190
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
20004170:                             4691                      li      a3,4
20004172:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:20
  if (len < alignof(uint32_t)) {
20004174:                         /-- 00d66663                  bltu    a2,a3,20004180 <memchr+0x10>
20004178:                         |   40a00733                  neg     a4,a0
2000417c:                         |   00377e93                  andi    t4,a4,3
20004180:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:197
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
20004184:                      /----- 000e8b63                  beqz    t4,2000419a <memchr+0x2a>
20004188:                      |      85aa                      mv      a1,a0
2000418a:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:198
    if (ptr8[i] == value8) {
2000418c:                      |  /-> 0005c683                  lbu     a3,0(a1)
20004190:       /--------------|--|-- 07c68f63                  beq     a3,t3,2000420e <memchr+0x9e>
/proc/self/cwd/sw/device/lib/base/memory.c:197
  for (; i < body_offset; ++i) {
20004194:       |              |  |   17fd                      addi    a5,a5,-1
20004196:       |              |  |   0585                      addi    a1,a1,1
20004198:       |              |  \-- fbf5                      bnez    a5,2000418c <memchr+0x1c>
2000419a:       |              \----> 41d605b3                  sub     a1,a2,t4
2000419e:       |                     99f1                      andi    a1,a1,-4
200041a0:       |                     01d5e833                  or      a6,a1,t4
/proc/self/cwd/sw/device/lib/base/memory.c:203
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
200041a4:       |  /----------------- 050ef763                  bgeu    t4,a6,200041f2 <memchr+0x82>
200041a8:       |  |                  010105b7                  lui     a1,0x1010
200041ac:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
200041b0:       |  |                  02be02b3                  mul     t0,t3,a1
200041b4:       |  |                  0ff00893                  li      a7,255
200041b8:       |  |                  65c1                      lui     a1,0x10
200041ba:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
200041be:       |  |                  00ff0337                  lui     t1,0xff0
/proc/self/cwd/sw/device/lib/base/memory.c:204
    uint32_t word = read_32(&ptr8[i]);
200041c2:       |  |              /-> 01d505b3                  add     a1,a0,t4
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:90
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
200041c6:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:205
    uint32_t bits_eq = ~(word ^ value32);
200041c8:       |  |              |   0056c7b3                  xor     a5,a3,t0
/proc/self/cwd/sw/device/lib/base/memory.c:208
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
200041cc:       |  |              |   40f8f733                  andn    a4,a7,a5
200041d0:       +--|--------------|-- 03170f63                  beq     a4,a7,2000420e <memchr+0x9e>
200041d4:       |  |              |   4056c6b3                  xnor    a3,a3,t0
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
200041d8:       |  |              |   0076f733                  and     a4,a3,t2
200041dc:       |  |  /-----------|-- 02770b63                  beq     a4,t2,20004212 <memchr+0xa2>
/proc/self/cwd/sw/device/lib/base/memory.c:214
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
200041e0:       |  |  |           |   0066f6b3                  and     a3,a3,t1
200041e4:       |  |  |  /--------|-- 02668963                  beq     a3,t1,20004216 <memchr+0xa6>
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
200041e8:       |  |  |  |        |   83e1                      srli    a5,a5,0x18
200041ea:       |  |  |  |  /-----|-- cb85                      beqz    a5,2000421a <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:203
  for (; i < tail_offset; i += sizeof(uint32_t)) {
200041ec:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
200041ee:       |  |  |  |  |     \-- fd0eeae3                  bltu    t4,a6,200041c2 <memchr+0x52>
/proc/self/cwd/sw/device/lib/base/memory.c:221
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
200041f2:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,2000420c <memchr+0x9c>
200041f6:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
200041fa:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:222
    if (ptr8[i] == value8) {
200041fe:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
20004202:       +-----|--|--|--|--|-- 01c50663                  beq     a0,t3,2000420e <memchr+0x9e>
/proc/self/cwd/sw/device/lib/base/memory.c:221
  for (; i < len; ++i) {
20004206:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
20004208:       |     |  |  |  |  |   0585                      addi    a1,a1,1
2000420a:       |     |  |  |  |  \-- fa75                      bnez    a2,200041fe <memchr+0x8e>
2000420c:       |     |  |  |  \----> 4581                      li      a1,0
/proc/self/cwd/sw/device/lib/base/memory.c:227
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
2000420e:       >-----|--|--|-------> 852e                      mv      a0,a1
20004210:       |     |  |  |         8082                      ret
/proc/self/cwd/sw/device/lib/base/memory.c:212
      return (void *)&ptr8[i + 1];
20004212:       |     \--|--|-------> 0585                      addi    a1,a1,1
20004214:       +--------|--|-------- bfed                      j       2000420e <memchr+0x9e>
/proc/self/cwd/sw/device/lib/base/memory.c:215
      return (void *)&ptr8[i + 2];
20004216:       |        \--|-------> 0589                      addi    a1,a1,2
20004218:       +-----------|-------- bfdd                      j       2000420e <memchr+0x9e>
/proc/self/cwd/sw/device/lib/base/memory.c:218
      return (void *)&ptr8[i + 3];
2000421a:       |           \-------> 058d                      addi    a1,a1,3
2000421c:       \-------------------- bfcd                      j       2000420e <memchr+0x9e>

2000421e <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:229

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
2000421e:                          4691                 li      a3,4
20004220:                          82b2                 mv      t0,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:20
  if (len < alignof(uint32_t)) {
20004222:                      /-- 00d66663             bltu    a2,a3,2000422e <memrchr+0x10>
20004226:                      |   40a006b3             neg     a3,a0
2000422a:                      |   0036f293             andi    t0,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:52
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
2000422e:                      \-> 405606b3             sub     a3,a2,t0
/proc/self/cwd/sw/device/lib/base/memory.c:53
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
20004232:                          9af1                 andi    a3,a3,-4
20004234:                          0056e7b3             or      a5,a3,t0
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
20004238:                          0ac7d3b3             minu    t2,a5,a2
2000423c:                          00c50733             add     a4,a0,a2
20004240:                          0ff5f313             andi    t1,a1,255
20004244:                   /--/-X 00c7fc63             bgeu    a5,a2,2000425c <memrchr+0x3e>
/proc/self/cwd/sw/device/lib/base/memory.c:239
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
20004248:                   |  |   fff74683             lbu     a3,-1(a4)
2000424c:                   |  |   fff70593             addi    a1,a4,-1
/proc/self/cwd/sw/device/lib/base/memory.c:238
    const size_t i = end - 1;
20004250:                   |  |   167d                 addi    a2,a2,-1
20004252:                   |  |   872e                 mv      a4,a1
20004254:                   |  \-- fe6698e3             bne     a3,t1,20004244 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:270
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
20004258:       /-----------|----> 852e                 mv      a0,a1
2000425a:       |           |      8082                 ret
2000425c:       |           \----> 010105b7             lui     a1,0x1010
20004260:       |                  10158593             addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:58
  return word << 24 | word << 16 | word << 8 | word;
20004264:       |                  02b305b3             mul     a1,t1,a1
20004268:       |                  00ff0837             lui     a6,0xff0
2000426c:       |                  6641                 lui     a2,0x10
2000426e:       |                  f0060613             addi    a2,a2,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
20004272:       |                  0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:244
  for (; end > body_offset; end -= sizeof(uint32_t)) {
20004276:       |           /--/-X 0272fc63             bgeu    t0,t2,200042ae <memrchr+0x90>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
2000427a:       |           |  |   007507b3             add     a5,a0,t2
/proc/self/cwd/./sw/device/lib/base/memory.h:90
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
2000427e:       |           |  |   ffc7a703             lw      a4,-4(a5)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:247
    uint32_t bits_eq = ~(word ^ value32);
20004282:       |           |  |   00b746b3             xor     a3,a4,a1
/proc/self/cwd/sw/device/lib/base/memory.c:250
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
20004286:       |           |  |   82e1                 srli    a3,a3,0x18
20004288:       |  /--------|--|-- ce9d                 beqz    a3,200042c6 <memrchr+0xa8>
2000428a:       |  |        |  |   40b74733             xnor    a4,a4,a1
/proc/self/cwd/sw/device/lib/base/memory.c:253
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
2000428e:       |  |        |  |   010776b3             and     a3,a4,a6
20004292:       |  |  /-----|--|-- 03068d63             beq     a3,a6,200042cc <memrchr+0xae>
/proc/self/cwd/sw/device/lib/base/memory.c:256
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
20004296:       |  |  |     |  |   00c776b3             and     a3,a4,a2
2000429a:       |  |  |  /--|--|-- 02c68c63             beq     a3,a2,200042d2 <memrchr+0xb4>
/proc/self/cwd/sw/device/lib/base/memory.c:259
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
2000429e:       |  |  |  |  |  |   0ff77693             andi    a3,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:245
    const size_t i = end - sizeof(uint32_t);
200042a2:       |  |  |  |  |  |   13f1                 addi    t2,t2,-4
200042a4:       |  |  |  |  |  \-- fd1699e3             bne     a3,a7,20004276 <memrchr+0x58>
/proc/self/cwd/sw/device/lib/base/memory.c:270
}
200042a8:       |  |  |  |  |      007505b3             add     a1,a0,t2
200042ac:       +--|--|--|--|----- b775                 j       20004258 <memrchr+0x3a>
200042ae:       |  |  |  |  \----> 951e                 add     a0,a0,t2
200042b0:       |  |  |  |  /--/-X 02038463             beqz    t2,200042d8 <memrchr+0xba>
/proc/self/cwd/sw/device/lib/base/memory.c:265
    if (ptr8[i] == value8) {
200042b4:       |  |  |  |  |  |   fff54603             lbu     a2,-1(a0)
200042b8:       |  |  |  |  |  |   fff50593             addi    a1,a0,-1
/proc/self/cwd/sw/device/lib/base/memory.c:264
    const size_t i = end - 1;
200042bc:       |  |  |  |  |  |   13fd                 addi    t2,t2,-1
200042be:       |  |  |  |  |  |   852e                 mv      a0,a1
200042c0:       |  |  |  |  |  \-- fe6618e3             bne     a2,t1,200042b0 <memrchr+0x92>
200042c4:       +--|--|--|--|----- bf51                 j       20004258 <memrchr+0x3a>
/proc/self/cwd/sw/device/lib/base/memory.c:251
      return (void *)&ptr8[i + 3];
200042c6:       |  \--|--|--|----> fff78593             addi    a1,a5,-1
200042ca:       +-----|--|--|----- b779                 j       20004258 <memrchr+0x3a>
/proc/self/cwd/sw/device/lib/base/memory.c:254
      return (void *)&ptr8[i + 2];
200042cc:       |     \--|--|----> ffe78593             addi    a1,a5,-2
200042d0:       +--------|--|----- b761                 j       20004258 <memrchr+0x3a>
/proc/self/cwd/sw/device/lib/base/memory.c:257
      return (void *)&ptr8[i + 1];
200042d2:       |        \--|----> ffd78593             addi    a1,a5,-3
200042d6:       +-----------|----- b749                 j       20004258 <memrchr+0x3a>
200042d8:       |           \----> 4581                 li      a1,0
200042da:       \----------------- bfbd                 j       20004258 <memrchr+0x3a>

200042dc <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:14
/**
 * Extern declaration of inline function.
 */
extern size_t ceil_div(size_t a, size_t b);

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
200042dc:                 1141                  addi    sp,sp,-16
200042de:                 c622                  sw      s0,12(sp)
200042e0:                 4881                  li      a7,0
200042e2:                 4801                  li      a6,0
200042e4:                 4381                  li      t2,0
200042e6:                 4e01                  li      t3,0
200042e8:                 03f00f93              li      t6,63
200042ec:                 00159293              slli    t0,a1,0x1
200042f0:                 537d                  li      t1,-1
/proc/self/cwd/sw/device/lib/base/math.c:28
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
200042f2:       /-------> fe0f8793              addi    a5,t6,-32
200042f6:       |     /-- 0007c563              bltz    a5,20004300 <udiv64_slow+0x24>
200042fa:       |     |   01f5deb3              srl     t4,a1,t6
200042fe:       |  /--|-- a809                  j       20004310 <udiv64_slow+0x34>
20004300:       |  |  \-> 01f55eb3              srl     t4,a0,t6
20004304:       |  |      ffffc793              not     a5,t6
20004308:       |  |      00f297b3              sll     a5,t0,a5
2000430c:       |  |      00feeeb3              or      t4,t4,a5
20004310:       |  \----> 01f3d793              srli    a5,t2,0x1f
20004314:       |         0e06                  slli    t3,t3,0x1
20004316:       |         00fe6e33              or      t3,t3,a5
2000431a:       |         0386                  slli    t2,t2,0x1
2000431c:       |         001ef793              andi    a5,t4,1
20004320:       |         0077eeb3              or      t4,a5,t2
/proc/self/cwd/sw/device/lib/base/math.c:34

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
20004324:       |  /----- 00de0563              beq     t3,a3,2000432e <udiv64_slow+0x52>
20004328:       |  |      00de37b3              sltu    a5,t3,a3
2000432c:       |  |  /-- a019                  j       20004332 <udiv64_slow+0x56>
2000432e:       |  \--|-> 00ceb7b3              sltu    a5,t4,a2
20004332:       |     \-> 0017cf13              xori    t5,a5,1
20004336:       |         01f8d793              srli    a5,a7,0x1f
2000433a:       |         0806                  slli    a6,a6,0x1
2000433c:       |         00f86833              or      a6,a6,a5
20004340:       |         0886                  slli    a7,a7,0x1
20004342:       |         41e007b3              neg     a5,t5
20004346:       |         00d7f433              and     s0,a5,a3
2000434a:       |         8ff1                  and     a5,a5,a2
2000434c:       |         40fe83b3              sub     t2,t4,a5
20004350:       |         00feb7b3              sltu    a5,t4,a5
20004354:       |         408e0433              sub     s0,t3,s0
20004358:       |         40f40e33              sub     t3,s0,a5
/proc/self/cwd/sw/device/lib/base/math.c:25
  for (size_t i = 0; i < bits; ++i) {
2000435c:       |         1ffd                  addi    t6,t6,-1
/proc/self/cwd/sw/device/lib/base/math.c:34
    if (rem >= b) {
2000435e:       |         01e8e8b3              or      a7,a7,t5
/proc/self/cwd/sw/device/lib/base/math.c:25
  for (size_t i = 0; i < bits; ++i) {
20004362:       \-------- f86f98e3              bne     t6,t1,200042f2 <udiv64_slow+0x16>
/proc/self/cwd/sw/device/lib/base/math.c:40
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
20004366:             /-- c709                  beqz    a4,20004370 <udiv64_slow+0x94>
/proc/self/cwd/sw/device/lib/base/math.c:41
    *rem_out = rem;
20004368:             |   00772023              sw      t2,0(a4)
2000436c:             |   01c72223              sw      t3,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:43
  }
  return quot;
20004370:             \-> 8546                  mv      a0,a7
20004372:                 85c2                  mv      a1,a6
20004374:                 4432                  lw      s0,12(sp)
20004376:                 0141                  addi    sp,sp,16
20004378:                 8082                  ret

2000437a <to_cpu_cycles>:
to_cpu_cycles():
/proc/self/cwd/sw/device/lib/arch/device_sim_dv.c:26

const uint64_t kClockFreqCpuMhz = 100;

const uint64_t kClockFreqCpuHz = kClockFreqCpuMhz * 1000 * 1000;

uint64_t to_cpu_cycles(uint64_t usec) { return usec * kClockFreqCpuMhz; }
2000437a:       06400613                li      a2,100
2000437e:       02c585b3                mul     a1,a1,a2
20004382:       02c536b3                mulhu   a3,a0,a2
20004386:       95b6                    add     a1,a1,a3
20004388:       02c50533                mul     a0,a0,a2
2000438c:       8082                    ret
2000438e:       0000                    unimp
