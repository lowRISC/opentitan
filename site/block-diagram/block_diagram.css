/* Copyright lowRISC contributors (OpenTitan project). */
/* Licensed under the Apache License, Version 2.0, see LICENSE for details. */
/* SPDX-License-Identifier: Apache-2.0 */

/**
 * This is a CSS library for building block diagrams out of simple semantic HTML.
 *
 * We're not CSS engineers, so I've done my best not to include hacks, unstable
 * features, or massive complexity. Remaining complexity will be documented
 * or wrapped into variables to make intent clear.
 *
 * Most styling is configurable through variables within `.block-diagram`.
 *
 * The supported features/components are:
 * - Tops
 * - Domains
 * - Top and domain labels
 * - Always-on domains
 * - Grids of blocks
 * - Highlighting by clock
 * - Subclocks (maximum of 2)
 * - Dual lockstep shadowing
 * - Arrows between blocks
 * - Arrows crossing tops/chips/etc
 * - Arrow groups (of three arrows)
 *
 * The `earlgrey.html` block diagram in this repo can be used as an example as
 * it uses all of these features.
 */

/**
 * The root component of the whole block diagram.
 *
 * The following variables can be used to configure the styling of the diagram.
 * These defaults can be overridden by re-defining the variables on a specific diagram.
 */
.block-diagram {
    --text-white: #ffffff;
    --text-black: #000000;

    --diagram-bg: #ffffff;
    --diagram-fg: var(--text-black);

    --top-bg: #f8f8ff;
    --top-fg: var(--text-black);

    --domain-bg: #e9e9e9;
    --domain-fg: var(--text-black);
    --always-on: #dc143c;

    --clock1-bg: #8bd6df;
    --clock2-bg: #6395ae;
    --clock3-bg: #cfbde4;
    --clock4-bg: #967ebf;
    --clock5-bg: #f9ad38;
    --clock6-bg: #d4d4d2;
    --clock1-fg: var(--text-black);
    --clock2-fg: var(--text-white);
    --clock3-fg: var(--text-black);
    --clock4-fg: var(--text-white);
    --clock5-fg: var(--text-black);
    --clock6-fg: var(--text-black);

    --tooltip-bg: #333;
    --tooltip-fg: var(--text-white);
    --tooltip-title-bg: #666;
    --tooltip-title-fg: var(--text-white);
    --tooltip-arrow-width: 0.8em;
    --tooltip-arrow-height: 0.7em;

    --status1-bg: #b81d13;
    --status2-bg: #efb700;
    --status3-bg: #82be00;
    --status4-bg: #008450;
    --status1-fg: var(--text-white);
    --status2-fg: var(--text-black);
    --status3-fg: var(--text-black);
    --status4-fg: var(--text-white);

    --arrow-bg: #7b7979;

    --gap: 0.8em;
    --padding: 0.8em;
    --aon-width: 0.15em;
    --block-height: 2.5em;
    --arrow-width: 0.4em;
    --arrow-head-width: 0.8em;
    --arrow-head-length: 0.3em;
    --dual-offset-x: 1em;
    --dual-offset-y: 1.25rem;

    --font-size: 0.75rem;
}

/**
 * Lay the root out vertically. Various grids are used for horizontal layout
 * within the block diagram.
 */
.block-diagram {
    display: flex;
    flex-direction: column;
    padding: var(--padding);
    gap: var(--gap);

    background-color: var(--diagram-bg);
    color: var(--diagram-fg);
}

/**
 * Remove vertical margins for captions of the block diagram.
 */
.block-diagram > figcaption {
    margin: calc(-1 * var(--gap)) 0;
}

/********
 * Tops *
 ********/

/**
 * Represents a chip top-level. Can be given a `.top-title`.
 *
 * Tops should typically contain `.domains` or `.domain` components.
 */
.top {
    display: flex;
    flex-direction: column;
    padding: var(--padding);

    background-color: var(--top-bg);
    color: var(--top-fg);

    z-index: 3;
}

.top .top-title {
    margin: 0;
    font-size: var(--font-size);
    font-weight: bold;
    text-transform: uppercase;
}

/****************
 * Grid helpers *
 ****************/

/**
 * Helper attributes to specify grids with a certain number of columns.
 *
 * Currently only 2, 3, and 4 column grids have helpers. This can be extended
 * to any number once the CSS `attr()` function supports numeric values.
 */
[grid="2"] { grid-template-columns: repeat(2, 1fr); }
[grid="3"] { grid-template-columns: repeat(3, 1fr); }
[grid="4"] { grid-template-columns: repeat(4, 1fr); }

/**
 * Helper attributes to specify the number of rows or columns a block spans.
 *
 * Currently only spans of 2 - 6 blocks have helpers. This can be extended to
 * any number once the CSS `attr()` function supports numeric values.
 */
[grid-rows="2"] { grid-row: span 2; }
[grid-rows="3"] { grid-row: span 3; }
[grid-rows="4"] { grid-row: span 4; }
[grid-rows="5"] { grid-row: span 5; }
[grid-rows="6"] { grid-row: span 6; }
[grid-cols="2"] { grid-column: span 2; }
[grid-cols="3"] { grid-column: span 3; }
[grid-cols="4"] { grid-column: span 4; }
[grid-cols="5"] { grid-column: span 5; }
[grid-cols="6"] { grid-column: span 6; }

/***********
 * Domains *
 ***********/

/**
 * Group of grid-arranged domains.
 *
 * Use the `grid="[234]"` attribute to set the number of domains side-by-side.
 */
.domains {
    display: grid;
    gap: var(--gap);
}

/**
 * Domain boundary. Can be given a `.domain-title`.
 *
 * Domains should be placed within `.top` or `.domains` elements.
 */
.domain {
    display: block;

    position: relative;
    padding: var(--padding);
    border-radius: 0.25em;

    background-color: var(--domain-bg);
    color: var(--domain-fg);
}

/**
 * Domains may optionally have the `.always-on` class which will outline their
 * blocks.
 *
 * These domains can be placed wherever regular domains can, plus also within
 * `.blocks` elements to surround a subset of blocks.
 *
 * Domains can be given a `.domain-title`.
 */
.domain.always-on {
    background-color: transparent;
    border: var(--aon-width) dashed var(--always-on);
    padding: calc(var(--padding) - var(--aon-width));
}

.blocks .domain.always-on {
    /* Places the AON domain border in the middle of the gaps between blocks */
    padding: calc(0.5 * var(--padding) - var(--aon-width));
    margin: calc(-0.5 * var(--padding));
}

.domain .domain-title {
    font-size: var(--font-size);
    font-weight: bold;
    text-transform: uppercase;
    padding: 0;
    margin: 0;
    margin-top: calc(-1 * var(--padding));
}

.domain.always-on .domain-title {
    margin-top: calc(-0.5 * var(--padding));
    font-size: var(--font-size);
    text-align: right;
    color: var(--always-on);
}

/**********
 * Blocks *
 **********/

/**
 * Group of blocks arranged in a grid.
 *
 * See the `grid="[234]"` attributes for setting the number of columns for the
 * grid of blocks.
 *
 * `.blocks` elements may contain `.block`, `.arrow`, or `.domain.always-on`
 * elements.
 */
.blocks {
    display: grid;
    grid-auto-rows: minmax(var(--block-height), auto);
    gap: var(--gap);
    position: relative;
}

/**
 * Individual block within a `.blocks` grid.
 *
 * ## Clocks
 *
 * Blocks can be given a class `.clock[123456]` to specify their clock speed,
 * plus optional `subclock1="clock[123456]"` and `subclock2="clock[123456]"`
 * attributes to specify up to two sub-clock speeds.
 *
 * ## Duals
 *
 * Blocks can be given the `.dual` class, which will add a shadow-block behind
 * them, useful for dual-lockstep cores.
 *
 * `.dual` blocks can contain a `.dual-label` element to label the shadow-block.
 *
 * ## Positioning
 *
 * Blocks are positioned automatically in left-to-right reading order.
 * A block's size can be set using the `grid-rows` and `grid-cols` attributes.
 */
.block {
    display: flex;
    flex-direction: column;
    justify-content: center;
    text-align: center;

    position: relative;
    z-index: 2;

    padding: calc(0.3 * var(--padding));
    border-radius: 0.5em;

    font-size: var(--font-size);
    text-decoration: none;

    background-color: var(--clock-bg);
    color: var(--clock-fg);
}

a.block:visited {
    background-color: var(--clock-bg);
    color: var(--clock-fg);
}

.block .big-label {
    font-size: calc(1.2 * var(--font-size));
    font-weight: bold;
}

/**
 * Dual blocks have another "shadow block" behind them.
 */
.block.dual {
    margin-right: var(--dual-offset-x);
    margin-bottom: var(--dual-offset-y);

    /* Add the shadow ibex as a literal shadow */
    box-shadow:
        var(--dual-offset-x) var(--dual-offset-y) 0 rgba(0, 0, 0, 0.1), /* Darkening shadow */
        var(--dual-offset-x) var(--dual-offset-y) 0 var(--clock-bg);    /* Clock colour */
}

/**
 * Label for dual blocks.
 */
.block.dual .dual-label {
    position: absolute;

    --label-font-size: calc(0.9 * var(--font-size));

    /* Centre within the non-overlapped shadow area */
    bottom: calc(
        -1 * var(--label-font-size) - /* Move text below main block */
        0.3 * var(--padding) -        /* Including the block's padding */
        0.5 * var(--dual-offset-y) +  /* Down to half way through the offset */
        0.5 * var(--label-font-size)  /* But come back by half the text's height */
    );
    left: var(--dual-offset-x);
    width: 100%;

    font-size: var(--label-font-size);
    color: var(--clock-fg);
}

/**
 * Subclocks are implemented using `::before` and `::after` CSS classes. This
 * lets us create new elements through CSS only, but it does limit us to two
 * subclocks.
 *
 * More than two seems unlikely, but this can be supported by adding elements
 * representing subclocks into the HTML itself.
 */
.block[subclock1]::before, .block[subclock2]::after {
    display: block;
    content: "";

    position: absolute;
    left: calc(0.75 * var(--padding));

    width: 0.75em;
    height: 0.75em;
    border-radius: 0.25em;
}

.block[subclock1]::before {
    top: calc(0.75 * var(--padding));
    background-color: var(--clock-bg);
}

.block[subclock2]::after {
    bottom: calc(0.75 * var(--padding));
    background-color: var(--clock-bg);
}

/**********
 * Clocks *
 **********/

/**
 * Legend of clock colours arranged in a row.
 */
.clocks {
    display: grid;
    grid-auto-columns: minmax(0, 1fr);
    grid-auto-flow: column;
    gap: var(--gap);

    width: fit-content;
}

/**
 * An individual clock in the legend of clocks.
 *
 * Apply each of the `.clock[123456]` classes to these elements to give them
 * the correct colours.
 */
.clocks .clock {
    text-align: center;

    padding: calc(0.5 * var(--padding)) var(--padding);
    border-radius: 0.5em;
    font-size: var(--font-size);
    white-space: nowrap;

    background-color: var(--clock-bg);
    color: var(--clock-fg);
}

/**
 * Colours for the `.clock[123456]` classes and the corresponding subclocks.
 */

.clock1, .block[subclock1="clock1"]::before, .block[subclock2="clock1"]::after {
    --clock-bg: var(--clock1-bg);
    --clock-fg: var(--clock1-fg);
}

.clock2, .block[subclock1="clock2"]::before, .block[subclock2="clock2"]::after {
    --clock-bg: var(--clock2-bg);
    --clock-fg: var(--clock2-fg);
}

.clock3, .block[subclock1="clock3"]::before, .block[subclock2="clock3"]::after {
    --clock-bg: var(--clock3-bg);
    --clock-fg: var(--clock3-fg);
}

.clock4, .block[subclock1="clock4"]::before, .block[subclock2="clock4"]::after {
    --clock-bg: var(--clock4-bg);
    --clock-fg: var(--clock4-fg);
}

.clock5, .block[subclock1="clock5"]::before, .block[subclock2="clock5"]::after {
    --clock-bg: var(--clock5-bg);
    --clock-fg: var(--clock5-fg);
}

.clock6, .block[subclock1="clock6"]::before, .block[subclock2="clock6"]::after {
    --clock-bg: var(--clock6-bg);
    --clock-fg: var(--clock6-fg);
}

/************
 * Tooltips *
 ************/

.block:hover {
    z-index: 3;
}
.block:not(:hover) .tooltip {
    display: none;
}

.tooltip {
    display: grid;
    grid-template-columns: minmax(4.5em, auto) 1fr;
    column-gap: 0.5em;
    row-gap: 0.25em;

    pointer-events: none;

    position: absolute;
    overflow: visible;

    width: max-content;
    padding: var(--padding);

    transform: translateX(-50%);
    top: calc(100% + 0.5 * var(--tooltip-arrow-height));
    left: calc(50%);
    right: 0;
    margin-left: auto;
    margin-right: auto;

    border-radius: 0.4em;
    background: var(--tooltip-bg);
    color: var(--tooltip-fg);

    font-size: 0.75rem;
}

.tooltip::before {
    display: block;
    content: "";
    z-index: 99;

    position: absolute;
    bottom: 100%;
    transform: translateX(-50%);
    left: 50%;

    border-width: 0 var(--tooltip-arrow-width);
    border-style: solid;
    border-color: transparent;
    border-bottom: var(--tooltip-arrow-height) solid var(--tooltip-bg);
}

.tooltip-title {
    grid-column: span 2;
    padding: 0.2em 0.4em;
    margin-top: 0;
    margin-bottom: 0.2em;

    border-radius: 0.3em;
    background: var(--tooltip-title-bg);
    color: var(--tooltip-title-fg);

    white-space: nowrap;
    font-weight: bold;
}

.tooltip hr {
    grid-column: span 2;
    width: 100%;
    margin: 0.2em 0;
    height: 0;
}

.tooltip .value {
    position: relative;
    font-weight: bold;
}

.status1 {
    --status-bg: var(--status1-bg);
    --status-fg: var(--status1-fg);
}
.status2 {
    --status-bg: var(--status2-bg);
    --status-fg: var(--status2-fg);
}
.status3 {
    --status-bg: var(--status3-bg);
    --status-fg: var(--status3-fg);
}
.status4 {
    --status-bg: var(--status4-bg);
    --status-fg: var(--status4-fg);
}

.tooltip .status::before {
    display: block;
    content: "";

    position: absolute;
    transform: translateY(-50%);
    top: 50%;
    left: 0;
    right: 0;

    width: 0.7em;
    height: 0.7em;

    border-radius: 100%;
    background-color: var(--status-bg);
    color: var(--status-fg);
}

.tooltip .percentage {
    padding: 0.1em 1em;
    margin: -0.1em 0;
    border-radius: 0.3em;
    background-color: var(--status-bg);
    color: var(--status-fg);
}

.tooltip .label {
    justify-self: start;
}

/**********
 * Arrows *
 **********/

/**
 *
 * Arrow groups allow arrows within the same row or column to be placed
 * side-by-side.
 *
 * Currently, only groups of three arrows are supported. More configurations can
 * be added fairly easily.
 *
 * This can be made fully general once Chromium supports `display: subgrid`.
 */
.arrow-group {
    display: contents;
}

/**
 * Arrow groups of `n` arrows are supported by checking if the `x`th child is
 * also the `n - x`th child of an `.arrow-group`.
 *
 * This ensures we only apply this styling when there are exactly `n` siblings.
 */
.arrow-group .arrow:nth-child(1):nth-last-child(3) { --arrow-offset: calc(50% - 1.5 * var(--arrow-head-width)); }
.arrow-group .arrow:nth-child(2):nth-last-child(2) { --arrow-offset: 50%; }
.arrow-group .arrow:nth-child(3):nth-last-child(1) { --arrow-offset: calc(50% + 1.5 * var(--arrow-head-width)); }

/**
 * Apply the `--arrow-offset` calculated above to shift within the row or col.
 */
.arrow-group .arrow.row { top: var(--arrow-offset); }
.arrow-group .arrow.column { left: var(--arrow-offset); }

/**
 * An arrow between blocks within a `.blocks` grid.
 *
 * Arrows have heads on both ends and can span across blocks within the grid,
 * and extend outside of the grid to some extent.
 *
 * ## Attributes
 *
 * The following attributes can be used to position an arrow:
 * - `arrow-x`
 * - `arrow-y`
 * - `arrow-span` - number of blocks spanned perpendicular to the arrow.
 * - `arrow-length` - number of blocks spanned parallel to the arrow.
 * - `arrow-layers` - optional number of "layers" (e.g. tops, domains, etc.)
 *                    that the arrow extends outside of its grid of blocks.
 *
 * These are documented in more detail below in the arrow positioning section.
 *
 * ## A note on SVGs
 *
 * These arrows were initially implemented using SVGs by using a line with two
 * markers added to the ends. This allowed the line to be resized without the
 * heads stretching.
 *
 * This worked fine but needed a few hacks to stop the line intersecting the
 * arrow heads. Also, in order to style these SVGs they have to be defined
 * within the HTML document and can't be included as an image.
 *
 * Instead, I've switched to using a background-color for the arrow's line and
 * `::before` and `::after` elements for the heads.
 */
.arrow {
    display: flex;
    align-items: center;
    justify-content: center;

    position: absolute;
    place-self: center center;
    width: 100%;
    height: 100%;

    background-color: var(--arrow-bg);
    background-clip: padding-box;
}

/**
 * Like subclocks, arrow heads are added using `::before` and `::after`
 * pseudo-classes which allow for creating new elements via CSS.
 *
 * The triangle shape is made by setting only one side of the element's border.
 */
.arrow::before, .arrow::after {
    display: block;
    content: "";
    position: absolute;
    border-color: transparent;
    border-style: solid;
}

/**
 * Set up the border sizes for forming the triangles.
 */
.arrow.row::before, .arrow.row::after {
    border-width: calc(0.5 * var(--arrow-head-width)) 0;
}
.arrow.column::before, .arrow.column::after {
    border-width: 0 calc(0.5 * var(--arrow-head-width));
}

/**
 * Fill in the single relevant border and position each arrow head.
 */
.arrow.row::before {
    border-right: var(--arrow-head-length) solid var(--arrow-bg);
    right: 100%;
}
.arrow.row::after {
    border-left: var(--arrow-head-length) solid var(--arrow-bg);
    left: 100%;
}
.arrow.column::before {
    border-bottom: var(--arrow-head-length) solid var(--arrow-bg);
    bottom: 100%;
}
.arrow.column::after {
    border-top: var(--arrow-head-length) solid var(--arrow-bg);
    top: 100%;
}

/**
 * Helper attributes for positioning arrows.
 *
 * As before, these are necessary because support for using attribute values
 * like numbers is still experimental, so we manually convert them to CSS
 * variables here.
 *
 * These are just helpers, you can specify `style="--arrow-{?}: {?}"` manually
 * if you need another value.
 */
.arrow[arrow-x="0"] { --arrow-x: 0; }
.arrow[arrow-x="1"] { --arrow-x: 1; }
.arrow[arrow-x="2"] { --arrow-x: 2; }
.arrow[arrow-x="3"] { --arrow-x: 3; }
.arrow[arrow-x="4"] { --arrow-x: 4; }
.arrow[arrow-y="0"] { --arrow-y: 0; }
.arrow[arrow-y="1"] { --arrow-y: 1; }
.arrow[arrow-y="2"] { --arrow-y: 2; }
.arrow[arrow-y="3"] { --arrow-y: 3; }
.arrow[arrow-y="4"] { --arrow-y: 4; }
.arrow[arrow-y="5"] { --arrow-y: 5; }
.arrow[arrow-y="6"] { --arrow-y: 6; }
.arrow[arrow-span="2"] { --arrow-span: 2; }
.arrow[arrow-span="3"] { --arrow-span: 3; }
.arrow[arrow-span="4"] { --arrow-span: 4; }
.arrow[arrow-span="5"] { --arrow-span: 5; }
.arrow[arrow-span="6"] { --arrow-span: 6; }
.arrow[arrow-length="1"] { --arrow-length: 1; }
.arrow[arrow-length="2"] { --arrow-length: 2; }
.arrow[arrow-length="3"] { --arrow-length: 3; }
.arrow[arrow-length="4"] { --arrow-length: 4; }
.arrow[arrow-length="5"] { --arrow-length: 5; }
.arrow[arrow-length="6"] { --arrow-length: 6; }
.arrow[arrow-layers="1"] { --arrow-layers: 1; }
.arrow[arrow-layers="2"] { --arrow-layers: 2; }
.arrow[arrow-layers="3"] { --arrow-layers: 3; }
.arrow[arrow-layers="4"] { --arrow-layers: 4; }
.arrow[arrow-layers="5"] { --arrow-layers: 5; }
.arrow[arrow-layers="6"] { --arrow-layers: 6; }

/**
 * The following group of classes calculate the size and position of arrows.
 *
 * This isn't an easy task, but this final state is quite stable. It can be
 * refactored to be neater at some point if needs be.
 *
 * ## Stages of calculation
 *
 * The general tactic is to calculate the arrow's length in four parts and
 * collect them all together at the end:
 *
 * - arrow-len-base: the base length of an arrow, e.g. the grid cells it spans
 * - arrow-len-gaps: the extra space needed to span the gaps at either end
 * - arrow-len-layers: the extra space needed for arrows to extend out of the
 *                     grid of blocks into other layers.
 *
 * ## Sizing strategy
 *
 * Took a little while to work out how to get these arrows to always be the
 * right lengths when the grid sizes are calculated dynamically.
 *
 * Here is the strategy:
 *
 * - For arrows of length `l > 2`, we place the arrow across the middle `l - 2`
 *   blocks. This means the arrow heads poke out of the ends no matter the size
 *   of the grid cells.
 * - For arrows of length `l = 2`, we place the arrow within the first grid cell
 *   only and position is so that it starts after.
 * - For arrows of length `l = 1`, we give them no base length. These arrows are
 *   likely reaching out of a blog grid using `arrow-layers` and don't span
 *   between any blocks.
 */

/**
 * The lengths for most arrows: 100% + two gaps either side.
 */
.arrow {
    --arrow-len-base: 100%;
    /* Maps arrow lengths (in grid cells) to the number of gaps they must span:
     *  1  => no gaps: these arrows don't cross between any blocks.
     *  2  => one gap: these arrows cross one gap between two blocks.
     *  >2 => two gaps: these arrows span the middle blocks plus a gap each end.
     */
    --arrow-num-gaps: min(calc(var(--arrow-length) - 1), 2);
    --arrow-len-gaps: calc(var(--arrow-num-gaps) * var(--gap));
}

.arrow[arrow-length="1"], .arrow[arrow-length="2"] {
    /* These arrows don't span any blocks, so don't include grid cell size */
    --arrow-len-base: 0%;
}

.arrow[arrow-layers] {
    /* Arrows going outside the grid will cross one to another layer */
    --arrow-len-layers: calc(var(--arrow-layers) * var(--padding) + var(--gap));
    /* Plus include the gap of the side which stays within the grid */
    --arrow-len-gaps: calc(var(--gap));
}
.arrow[arrow-layers][arrow-length="1"] {
    /* Unlike above, external arrows with length "1" don't cross any gaps */
    --arrow-len-gaps: 0px;
    /* Also ensure they appear above domain backgrounds etc. */
    z-index: 2;
}

/**
 * Position arrows leaving the grid at the end of their grid cell
 */
.arrow.row[arrow-layers] {
    left: calc(var(--arrow-head-length) - var(--gap));
}
.arrow.column[arrow-layers] {
    top: calc(var(--arrow-head-length) - var(--gap));
}

/**
 * Positioning for normal horizontal (row) arrows
 */
.arrow.row {
    width: calc(var(--arrow-len-base) - 2 * var(--arrow-head-length) + var(--arrow-len-gaps) + var(--arrow-len-layers, 0px));
    height: var(--arrow-width);
    grid-row-start: var(--arrow-y);
    grid-row-end: span var(--arrow-span, 1);
    /* Span the middle `length - 2` blocks, pointing to the end two */
    grid-column-start: calc(var(--arrow-x) + 1);
    grid-column-end: span calc(var(--arrow-length) - 2);
}

/**
 * Positioning for normal vertical (column) arrows
 */
.arrow.column {
    height: calc(var(--arrow-len-base) - 2 * var(--arrow-head-length) + var(--arrow-len-gaps) + var(--arrow-len-layers, 0px));
    width: var(--arrow-width);
    grid-column-start: var(--arrow-x);
    grid-column-end: span var(--arrow-span, 1);
    /* Span the middle `length - 2` blocks, pointing to the end two */
    grid-row-start: calc(var(--arrow-y) + 1);
    grid-row-end: span calc(var(--arrow-length) - 2);
}

/**
 * Arrows of length 1 or 2 actually only span a single cell: the first.
 * They're positioned to begin at the end and span to the next cell.
 */
.arrow.row[arrow-length="1"], .arrow.row[arrow-length="2"] {
    grid-column-start: var(--arrow-x);
    grid-column-end: span 1;
    left: calc(100% + var(--arrow-head-length));
}
.arrow.column[arrow-length="1"], .arrow.column[arrow-length="2"] {
    grid-row-start: var(--arrow-y);
    grid-row-end: span 1;
    top: calc(100% + var(--arrow-head-length));
}
