diff --git a/extensions/bindgen/private/bindgen.bzl b/extensions/bindgen/private/bindgen.bzl
index 5b9e29a76..e31f879fa 100644
--- a/extensions/bindgen/private/bindgen.bzl
+++ b/extensions/bindgen/private/bindgen.bzl
@@ -46,6 +46,7 @@ def rust_bindgen_library(
         name,
         header,
         cc_lib,
+        cc_lib_platform = None,
         bindgen_flags = None,
         bindgen_features = None,
         clang_flags = None,
@@ -87,6 +88,7 @@ def rust_bindgen_library(
         name = name + "__bindgen",
         header = header,
         cc_lib = cc_lib,
+        cc_lib_platform = cc_lib_platform,
         bindgen_flags = bindgen_flags or [],
         features = bindgen_features,
         clang_flags = clang_flags or [],
@@ -189,9 +191,9 @@ def _generate_cc_link_build_info(ctx, cc_lib):
 
 def _rust_bindgen_impl(ctx):
     # nb. We can't grab the cc_library`s direct headers, so a header must be provided.
-    cc_lib = ctx.attr.cc_lib
+    cc_lib = ctx.attr.cc_lib[0]
     header = ctx.file.header
-    cc_header_list = ctx.attr.cc_lib[CcInfo].compilation_context.headers.to_list()
+    cc_header_list = cc_lib[CcInfo].compilation_context.headers.to_list()
     if header not in cc_header_list:
         fail("Header {} is not in {}'s transitive headers.".format(ctx.attr.header, cc_lib), "header")
 
@@ -317,7 +319,7 @@ def _rust_bindgen_impl(ctx):
             continue
 
     # Propagated defines should be made visible to clang
-    for define in ctx.attr.cc_lib[CcInfo].compilation_context.defines.to_list():
+    for define in cc_lib[CcInfo].compilation_context.defines.to_list():
         args.add("-D" + define)
 
     _, _, linker_env = get_linker_and_args(ctx, "bin", cc_toolchain, feature_configuration, None)
@@ -379,6 +381,18 @@ def _rust_bindgen_impl(ctx):
         ),
     ]
 
+def _bindgen_transition_impl(settings, attr):
+    if attr.cc_lib_platform:
+        return { "//command_line_option:platforms": str(attr.cc_lib_platform) }
+    else:
+        return {}
+
+bindgen_transition = transition(
+    implementation = _bindgen_transition_impl,
+    inputs = ["//command_line_option:platforms"],
+    outputs = ["//command_line_option:platforms"],
+)
+
 rust_bindgen = rule(
     doc = "Generates a rust source file from a cc_library and a header.",
     implementation = _rust_bindgen_impl,
@@ -390,6 +404,10 @@ rust_bindgen = rule(
             doc = "The cc_library that contains the `.h` file. This is used to find the transitive includes.",
             providers = [CcInfo],
             mandatory = True,
+            cfg = bindgen_transition,
+        ),
+        "cc_lib_platform": attr.label(
+            doc = "The platform for which `cc_lib` should be built",
         ),
         "clang_flags": attr.string_list(
             doc = "Flags to pass directly to the clang executable.",
