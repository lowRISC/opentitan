###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run //third_party/tock:tock_index
###############################################################################
"""
# `crates_repository` API

- [aliases](#aliases)
- [crate_deps](#crate_deps)
- [all_crate_deps](#all_crate_deps)
- [crate_repositories](#crate_repositories)

"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

###############################################################################
# MACROS API
###############################################################################

# An identifier that represent common dependencies (unconditional).
_COMMON_CONDITION = ""

def _flatten_dependency_maps(all_dependency_maps):
    """Flatten a list of dependency maps into one dictionary.

    Dependency maps have the following structure:

    ```python
    DEPENDENCIES_MAP = {
        # The first key in the map is a Bazel package
        # name of the workspace this file is defined in.
        "workspace_member_package": {

            # Not all dependnecies are supported for all platforms.
            # the condition key is the condition required to be true
            # on the host platform.
            "condition": {

                # An alias to a crate target.     # The label of the crate target the
                # Aliases are only crate names.   # package name refers to.
                "package_name":                   "@full//:label",
            }
        }
    }
    ```

    Args:
        all_dependency_maps (list): A list of dicts as described above

    Returns:
        dict: A dictionary as described above
    """
    dependencies = {}

    for workspace_deps_map in all_dependency_maps:
        for pkg_name, conditional_deps_map in workspace_deps_map.items():
            if pkg_name not in dependencies:
                non_frozen_map = dict()
                for key, values in conditional_deps_map.items():
                    non_frozen_map.update({key: dict(values.items())})
                dependencies.setdefault(pkg_name, non_frozen_map)
                continue

            for condition, deps_map in conditional_deps_map.items():
                # If the condition has not been recorded, do so and continue
                if condition not in dependencies[pkg_name]:
                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))
                    continue

                # Alert on any miss-matched dependencies
                inconsistent_entries = []
                for crate_name, crate_label in deps_map.items():
                    existing = dependencies[pkg_name][condition].get(crate_name)
                    if existing and existing != crate_label:
                        inconsistent_entries.append((crate_name, existing, crate_label))
                    dependencies[pkg_name][condition].update({crate_name: crate_label})

    return dependencies

def crate_deps(deps, package_name = None):
    """Finds the fully qualified label of the requested crates for the package where this macro is called.

    Args:
        deps (list): The desired list of crate targets.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()`.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if not deps:
        return []

    if package_name == None:
        package_name = native.package_name()

    # Join both sets of dependencies
    dependencies = _flatten_dependency_maps([
        _NORMAL_DEPENDENCIES,
        _NORMAL_DEV_DEPENDENCIES,
        _PROC_MACRO_DEPENDENCIES,
        _PROC_MACRO_DEV_DEPENDENCIES,
        _BUILD_DEPENDENCIES,
        _BUILD_PROC_MACRO_DEPENDENCIES,
    ]).pop(package_name, {})

    # Combine all conditional packages so we can easily index over a flat list
    # TODO: Perhaps this should actually return select statements and maintain
    # the conditionals of the dependencies
    flat_deps = {}
    for deps_set in dependencies.values():
        for crate_name, crate_label in deps_set.items():
            flat_deps.update({crate_name: crate_label})

    missing_crates = []
    crate_targets = []
    for crate_target in deps:
        if crate_target not in flat_deps:
            missing_crates.append(crate_target)
        else:
            crate_targets.append(flat_deps[crate_target])

    if missing_crates:
        fail("Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`".format(
            missing_crates,
            package_name,
            dependencies,
        ))

    return crate_targets

def all_crate_deps(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Finds the fully qualified label of all requested direct crate dependencies \
    for the package where this macro is called.

    If no parameters are set, all normal dependencies are returned. Setting any one flag will
    otherwise impact the contents of the returned list.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_dependency_maps = []
    if normal:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)
    if normal_dev:
        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)
    if proc_macro:
        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)
    if proc_macro_dev:
        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)
    if build:
        all_dependency_maps.append(_BUILD_DEPENDENCIES)
    if build_proc_macro:
        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)

    # Default to always using normal dependencies
    if not all_dependency_maps:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)

    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)

    if not dependencies:
        if dependencies == None:
            fail("Tried to get all_crate_deps for package " + package_name + " but that package had no Cargo.toml file")
        else:
            return []

    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())
    for condition, deps in dependencies.items():
        crate_deps += selects.with_or({_CONDITIONS[condition]: deps.values()})

    return crate_deps

def aliases(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Produces a map of Crate alias names to their original label

    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.
    Setting any one flag will otherwise determine the contents of the returned dict.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normal dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        dict: The aliases of all associated packages
    """
    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_aliases_maps = []
    if normal:
        all_aliases_maps.append(_NORMAL_ALIASES)
    if normal_dev:
        all_aliases_maps.append(_NORMAL_DEV_ALIASES)
    if proc_macro:
        all_aliases_maps.append(_PROC_MACRO_ALIASES)
    if proc_macro_dev:
        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)
    if build:
        all_aliases_maps.append(_BUILD_ALIASES)
    if build_proc_macro:
        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)

    # Default to always using normal aliases
    if not all_aliases_maps:
        all_aliases_maps.append(_NORMAL_ALIASES)
        all_aliases_maps.append(_PROC_MACRO_ALIASES)

    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)

    if not aliases:
        return dict()

    common_items = aliases.pop(_COMMON_CONDITION, {}).items()

    # If there are only common items in the dictionary, immediately return them
    if not len(aliases.keys()) == 1:
        return dict(common_items)

    # Build a single select statement where each conditional has accounted for the
    # common set of aliases.
    crate_aliases = {"//conditions:default": common_items}
    for condition, deps in aliases.items():
        condition_triples = _CONDITIONS[condition]
        if condition_triples in crate_aliases:
            crate_aliases[condition_triples].update(deps)
        else:
            crate_aliases.update({_CONDITIONS[condition]: dict(deps.items() + common_items)})

    return selects.with_or(crate_aliases)

###############################################################################
# WORKSPACE MEMBER DEPS AND ALIASES
###############################################################################

_NORMAL_DEPENDENCIES = {
    "third_party/tock": {
        _COMMON_CONDITION: {
            "earlgrey-cw310": "@tock_index__earlgrey-cw310-0.1.0//:earlgrey_cw310",
            "elf2tab": "@tock_index__elf2tab-0.10.0-dev//:elf2tab",
            "kernel": "@tock_index__kernel-0.1.0//:kernel",
            "libtock": "@tock_index__libtock-0.1.0//:libtock",
        },
    },
}

_NORMAL_ALIASES = {
    "third_party/tock": {
        _COMMON_CONDITION: {
        },
    },
}

_NORMAL_DEV_DEPENDENCIES = {
    "third_party/tock": {
    },
}

_NORMAL_DEV_ALIASES = {
    "third_party/tock": {
    },
}

_PROC_MACRO_DEPENDENCIES = {
    "third_party/tock": {
    },
}

_PROC_MACRO_ALIASES = {
    "third_party/tock": {
    },
}

_PROC_MACRO_DEV_DEPENDENCIES = {
    "third_party/tock": {
    },
}

_PROC_MACRO_DEV_ALIASES = {
    "third_party/tock": {
    },
}

_BUILD_DEPENDENCIES = {
    "third_party/tock": {
    },
}

_BUILD_ALIASES = {
    "third_party/tock": {
    },
}

_BUILD_PROC_MACRO_DEPENDENCIES = {
    "third_party/tock": {
    },
}

_BUILD_PROC_MACRO_ALIASES = {
    "third_party/tock": {
    },
}

_CONDITIONS = {
    "cfg(all(target_arch = \"aarch64\", target_env = \"gnu\", target_abi = \"llvm\", not(windows_raw_dylib)))": [],
    "cfg(all(target_arch = \"aarch64\", target_env = \"msvc\", not(windows_raw_dylib)))": ["aarch64-pc-windows-msvc"],
    "cfg(all(target_arch = \"wasm32\", not(any(target_os = \"emscripten\", target_os = \"wasi\"))))": ["wasm32-unknown-unknown"],
    "cfg(all(target_arch = \"x86\", target_env = \"gnu\", not(windows_raw_dylib)))": ["i686-unknown-linux-gnu"],
    "cfg(all(target_arch = \"x86\", target_env = \"msvc\", not(windows_raw_dylib)))": ["i686-pc-windows-msvc"],
    "cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", not(target_abi = \"llvm\"), not(windows_raw_dylib)))": ["x86_64-unknown-linux-gnu"],
    "cfg(all(target_arch = \"x86_64\", target_env = \"gnu\", target_abi = \"llvm\", not(windows_raw_dylib)))": [],
    "cfg(all(target_arch = \"x86_64\", target_env = \"msvc\", not(windows_raw_dylib)))": ["x86_64-pc-windows-msvc"],
    "cfg(any(target_os = \"macos\", target_os = \"ios\"))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "i686-apple-darwin", "x86_64-apple-darwin", "x86_64-apple-ios"],
    "cfg(not(windows))": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "riscv32imc-unknown-none-elf", "riscv64gc-unknown-none-elf", "s390x-unknown-linux-gnu", "wasm32-unknown-unknown", "wasm32-wasi", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(target_arch = \"wasm32\")": ["wasm32-unknown-unknown", "wasm32-wasi"],
    "cfg(target_os = \"android\")": ["aarch64-linux-android", "armv7-linux-androideabi", "i686-linux-android", "x86_64-linux-android"],
    "cfg(target_os = \"haiku\")": [],
    "cfg(target_os = \"hermit\")": [],
    "cfg(target_os = \"redox\")": [],
    "cfg(target_os = \"wasi\")": ["wasm32-wasi"],
    "cfg(target_os = \"windows\")": ["aarch64-pc-windows-msvc", "i686-pc-windows-msvc", "x86_64-pc-windows-msvc"],
    "cfg(unix)": ["aarch64-apple-darwin", "aarch64-apple-ios", "aarch64-apple-ios-sim", "aarch64-linux-android", "aarch64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "armv7-linux-androideabi", "armv7-unknown-linux-gnueabi", "i686-apple-darwin", "i686-linux-android", "i686-unknown-freebsd", "i686-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "s390x-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-apple-ios", "x86_64-linux-android", "x86_64-unknown-freebsd", "x86_64-unknown-linux-gnu"],
    "cfg(windows)": ["aarch64-pc-windows-msvc", "i686-pc-windows-msvc", "x86_64-pc-windows-msvc"],
    "i686-pc-windows-gnu": [],
    "x86_64-pc-windows-gnu": [],
}

###############################################################################

def crate_repositories():
    """A macro for defining repositories for all generated crates"""
    maybe(
        http_archive,
        name = "tock_index__android_system_properties-0.1.5",
        sha256 = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/android_system_properties/0.1.5/download"],
        strip_prefix = "android_system_properties-0.1.5",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.android_system_properties-0.1.5.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__ansi_term-0.12.1",
        sha256 = "d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ansi_term/0.12.1/download"],
        strip_prefix = "ansi_term-0.12.1",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.ansi_term-0.12.1.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__atty-0.2.14",
        sha256 = "d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/atty/0.2.14/download"],
        strip_prefix = "atty-0.2.14",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.atty-0.2.14.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__autocfg-1.1.0",
        sha256 = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/autocfg/1.1.0/download"],
        strip_prefix = "autocfg-1.1.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.autocfg-1.1.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__bitflags-1.3.2",
        sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bitflags/1.3.2/download"],
        strip_prefix = "bitflags-1.3.2",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.bitflags-1.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__bumpalo-3.12.2",
        sha256 = "3c6ed94e98ecff0c12dd1b04c15ec0d7d9458ca8fe806cea6f12954efe74c63b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bumpalo/3.12.2/download"],
        strip_prefix = "bumpalo-3.12.2",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.bumpalo-3.12.2.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__byteorder-0.5.3",
        sha256 = "0fc10e8cc6b2580fda3f36eb6dc5316657f812a3df879a44a66fc9f0fdbc4855",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/byteorder/0.5.3/download"],
        strip_prefix = "byteorder-0.5.3",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.byteorder-0.5.3.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__capsules-core-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.capsules-core-0.1.0.bazel"),
        strip_prefix = "capsules/core",
    )

    maybe(
        new_git_repository,
        name = "tock_index__capsules-extra-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.capsules-extra-0.1.0.bazel"),
        strip_prefix = "capsules/extra",
    )

    maybe(
        http_archive,
        name = "tock_index__cc-1.0.79",
        sha256 = "50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cc/1.0.79/download"],
        strip_prefix = "cc-1.0.79",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.cc-1.0.79.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__cfg-if-1.0.0",
        sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cfg-if/1.0.0/download"],
        strip_prefix = "cfg-if-1.0.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.cfg-if-1.0.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__chrono-0.4.24",
        sha256 = "4e3c5919066adf22df73762e50cffcde3a758f2a848b113b586d1f86728b673b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/chrono/0.4.24/download"],
        strip_prefix = "chrono-0.4.24",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.chrono-0.4.24.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__clap-2.34.0",
        sha256 = "a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/clap/2.34.0/download"],
        strip_prefix = "clap-2.34.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.clap-2.34.0.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__components-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.components-0.1.0.bazel"),
        strip_prefix = "boards/components",
    )

    maybe(
        http_archive,
        name = "tock_index__core-foundation-sys-0.8.4",
        sha256 = "e496a50fda8aacccc86d7529e2c1e0892dbd0f898a6b5645b5561b89c3210efa",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/core-foundation-sys/0.8.4/download"],
        strip_prefix = "core-foundation-sys-0.8.4",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.core-foundation-sys-0.8.4.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__earlgrey-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.earlgrey-0.1.0.bazel"),
        strip_prefix = "chips/earlgrey",
    )

    maybe(
        new_git_repository,
        name = "tock_index__earlgrey-cw310-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.earlgrey-cw310-0.1.0.bazel"),
        strip_prefix = "boards/opentitan/earlgrey-cw310",
    )

    maybe(
        http_archive,
        name = "tock_index__elf-0.0.10",
        sha256 = "4841de15dbe0e49b9b62a417589299e3be0d557e0900d36acb87e6dae47197f5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/elf/0.0.10/download"],
        strip_prefix = "elf-0.0.10",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.elf-0.0.10.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__elf2tab-0.10.0-dev",
        branch = "libify",
        init_submodules = True,
        remote = "https://github.com/cfrantz/elf2tab",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.elf2tab-0.10.0-dev.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__enum_primitive-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.enum_primitive-0.1.0.bazel"),
        strip_prefix = "libraries/enum_primitive",
    )

    maybe(
        http_archive,
        name = "tock_index__filetime-0.2.21",
        sha256 = "5cbc844cecaee9d4443931972e1289c8ff485cb4cc2767cb03ca139ed6885153",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/filetime/0.2.21/download"],
        strip_prefix = "filetime-0.2.21",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.filetime-0.2.21.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__heck-0.3.3",
        sha256 = "6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/heck/0.3.3/download"],
        strip_prefix = "heck-0.3.3",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.heck-0.3.3.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__hermit-abi-0.1.19",
        sha256 = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hermit-abi/0.1.19/download"],
        strip_prefix = "hermit-abi-0.1.19",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.hermit-abi-0.1.19.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__iana-time-zone-0.1.56",
        sha256 = "0722cd7114b7de04316e7ea5456a0bbb20e4adb46fd27a3697adb812cff0f37c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/iana-time-zone/0.1.56/download"],
        strip_prefix = "iana-time-zone-0.1.56",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.iana-time-zone-0.1.56.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__iana-time-zone-haiku-0.1.2",
        sha256 = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/iana-time-zone-haiku/0.1.2/download"],
        strip_prefix = "iana-time-zone-haiku-0.1.2",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.iana-time-zone-haiku-0.1.2.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__js-sys-0.3.63",
        sha256 = "2f37a4a5928311ac501dee68b3c7613a1037d0edb30c8e5427bd832d55d1b790",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/js-sys/0.3.63/download"],
        strip_prefix = "js-sys-0.3.63",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.js-sys-0.3.63.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__kernel-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.kernel-0.1.0.bazel"),
        strip_prefix = "kernel",
    )

    maybe(
        http_archive,
        name = "tock_index__lazy_static-1.4.0",
        sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/lazy_static/1.4.0/download"],
        strip_prefix = "lazy_static-1.4.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.lazy_static-1.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__libc-0.2.144",
        sha256 = "2b00cc1c228a6782d0f076e7b232802e0c5689d41bb5df366f2a6b6621cfdfe1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/libc/0.2.144/download"],
        strip_prefix = "libc-0.2.144",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libc-0.2.144.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__libm-0.2.7",
        sha256 = "f7012b1bbb0719e1097c47611d3898568c546d597c2e74d66f6087edd5233ff4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/libm/0.2.7/download"],
        strip_prefix = "libm-0.2.7",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libm-0.2.7.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock-0.1.0.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_adc-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_adc-0.1.0.bazel"),
        strip_prefix = "apis/adc",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_air_quality-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_air_quality-0.1.0.bazel"),
        strip_prefix = "apis/air_quality",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_alarm-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_alarm-0.1.0.bazel"),
        strip_prefix = "apis/alarm",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_ambient_light-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_ambient_light-0.1.0.bazel"),
        strip_prefix = "apis/ambient_light",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_buttons-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_buttons-0.1.0.bazel"),
        strip_prefix = "apis/buttons",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_buzzer-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_buzzer-0.1.0.bazel"),
        strip_prefix = "apis/buzzer",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_console-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_console-0.1.0.bazel"),
        strip_prefix = "apis/console",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_debug_panic-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_debug_panic-0.1.0.bazel"),
        strip_prefix = "panic_handlers/debug_panic",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_gpio-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_gpio-0.1.0.bazel"),
        strip_prefix = "apis/gpio",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_leds-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_leds-0.1.0.bazel"),
        strip_prefix = "apis/leds",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_low_level_debug-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_low_level_debug-0.1.0.bazel"),
        strip_prefix = "apis/low_level_debug",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_ninedof-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_ninedof-0.1.0.bazel"),
        strip_prefix = "apis/ninedof",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_platform-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_platform-0.1.0.bazel"),
        strip_prefix = "platform",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_proximity-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_proximity-0.1.0.bazel"),
        strip_prefix = "apis/proximity",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_runtime-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_runtime-0.1.0.bazel"),
        strip_prefix = "runtime",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_sound_pressure-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_sound_pressure-0.1.0.bazel"),
        strip_prefix = "apis/sound_pressure",
    )

    maybe(
        new_git_repository,
        name = "tock_index__libtock_temperature-0.1.0",
        branch = "master",
        init_submodules = True,
        remote = "https://github.com/tock/libtock-rs",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.libtock_temperature-0.1.0.bazel"),
        strip_prefix = "apis/temperature",
    )

    maybe(
        http_archive,
        name = "tock_index__log-0.4.17",
        sha256 = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/log/0.4.17/download"],
        strip_prefix = "log-0.4.17",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.log-0.4.17.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__lowrisc-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.lowrisc-0.1.0.bazel"),
        strip_prefix = "chips/lowrisc",
    )

    maybe(
        http_archive,
        name = "tock_index__num-integer-0.1.45",
        sha256 = "225d3389fb3509a24c93f5c29eb6bde2586b98d9f016636dff58d7c6f7569cd9",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/num-integer/0.1.45/download"],
        strip_prefix = "num-integer-0.1.45",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.num-integer-0.1.45.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__num-traits-0.2.15",
        sha256 = "578ede34cf02f8924ab9447f50c28075b4d3e5b269972345e7e0372b38c6cdcd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/num-traits/0.2.15/download"],
        strip_prefix = "num-traits-0.2.15",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.num-traits-0.2.15.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__once_cell-1.17.1",
        sha256 = "b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/once_cell/1.17.1/download"],
        strip_prefix = "once_cell-1.17.1",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.once_cell-1.17.1.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__proc-macro-error-1.0.4",
        sha256 = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro-error/1.0.4/download"],
        strip_prefix = "proc-macro-error-1.0.4",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.proc-macro-error-1.0.4.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__proc-macro-error-attr-1.0.4",
        sha256 = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro-error-attr/1.0.4/download"],
        strip_prefix = "proc-macro-error-attr-1.0.4",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.proc-macro-error-attr-1.0.4.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__proc-macro2-1.0.58",
        sha256 = "fa1fb82fc0c281dd9671101b66b771ebbe1eaf967b96ac8740dcba4b70005ca8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro2/1.0.58/download"],
        strip_prefix = "proc-macro2-1.0.58",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.proc-macro2-1.0.58.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__quote-1.0.27",
        sha256 = "8f4f29d145265ec1c483c7c654450edde0bfe043d3938d6972630663356d9500",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/quote/1.0.27/download"],
        strip_prefix = "quote-1.0.27",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.quote-1.0.27.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__redox_syscall-0.2.16",
        sha256 = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/redox_syscall/0.2.16/download"],
        strip_prefix = "redox_syscall-0.2.16",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.redox_syscall-0.2.16.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__riscv-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.riscv-0.1.0.bazel"),
        strip_prefix = "arch/riscv",
    )

    maybe(
        new_git_repository,
        name = "tock_index__riscv-csr-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.riscv-csr-0.1.0.bazel"),
        strip_prefix = "libraries/riscv-csr",
    )

    maybe(
        new_git_repository,
        name = "tock_index__rv32i-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.rv32i-0.1.0.bazel"),
        strip_prefix = "arch/rv32i",
    )

    maybe(
        http_archive,
        name = "tock_index__strsim-0.8.0",
        sha256 = "8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/strsim/0.8.0/download"],
        strip_prefix = "strsim-0.8.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.strsim-0.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__structopt-0.3.26",
        sha256 = "0c6b5c64445ba8094a6ab0c3cd2ad323e07171012d9c98b0b15651daf1787a10",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/structopt/0.3.26/download"],
        strip_prefix = "structopt-0.3.26",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.structopt-0.3.26.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__structopt-derive-0.4.18",
        sha256 = "dcb5ae327f9cc13b68763b5749770cb9e048a99bd9dfdfa58d0cf05d5f64afe0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/structopt-derive/0.4.18/download"],
        strip_prefix = "structopt-derive-0.4.18",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.structopt-derive-0.4.18.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__syn-1.0.109",
        sha256 = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/syn/1.0.109/download"],
        strip_prefix = "syn-1.0.109",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.syn-1.0.109.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__syn-2.0.16",
        sha256 = "a6f671d4b5ffdb8eadec19c0ae67fe2639df8684bd7bc4b83d986b8db549cf01",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/syn/2.0.16/download"],
        strip_prefix = "syn-2.0.16",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.syn-2.0.16.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__tar-0.4.38",
        sha256 = "4b55807c0344e1e6c04d7c965f5289c39a8d94ae23ed5c0b57aabac549f871c6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/tar/0.4.38/download"],
        strip_prefix = "tar-0.4.38",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.tar-0.4.38.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__textwrap-0.11.0",
        sha256 = "d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/textwrap/0.11.0/download"],
        strip_prefix = "textwrap-0.11.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.textwrap-0.11.0.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__tickv-1.0.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.tickv-1.0.0.bazel"),
        strip_prefix = "libraries/tickv",
    )

    maybe(
        http_archive,
        name = "tock_index__time-0.1.45",
        sha256 = "1b797afad3f312d1c66a56d11d0316f916356d11bd158fbc6ca6389ff6bf805a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/time/0.1.45/download"],
        strip_prefix = "time-0.1.45",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.time-0.1.45.bazel"),
    )

    maybe(
        new_git_repository,
        name = "tock_index__tock-cells-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.tock-cells-0.1.0.bazel"),
        strip_prefix = "libraries/tock-cells",
    )

    maybe(
        new_git_repository,
        name = "tock_index__tock-registers-0.8.1",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.tock-registers-0.8.1.bazel"),
        strip_prefix = "libraries/tock-register-interface",
    )

    maybe(
        new_git_repository,
        name = "tock_index__tock-tbf-0.1.0",
        branch = "ot-master-rework",
        init_submodules = True,
        remote = "https://github.com/cfrantz/tock",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.tock-tbf-0.1.0.bazel"),
        strip_prefix = "libraries/tock-tbf",
    )

    maybe(
        http_archive,
        name = "tock_index__unicode-ident-1.0.8",
        sha256 = "e5464a87b239f13a63a501f2701565754bae92d243d4bb7eb12f6d57d2269bf4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-ident/1.0.8/download"],
        strip_prefix = "unicode-ident-1.0.8",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.unicode-ident-1.0.8.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__unicode-segmentation-1.10.1",
        sha256 = "1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-segmentation/1.10.1/download"],
        strip_prefix = "unicode-segmentation-1.10.1",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.unicode-segmentation-1.10.1.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__unicode-width-0.1.10",
        sha256 = "c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-width/0.1.10/download"],
        strip_prefix = "unicode-width-0.1.10",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.unicode-width-0.1.10.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__vec_map-0.8.2",
        sha256 = "f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/vec_map/0.8.2/download"],
        strip_prefix = "vec_map-0.8.2",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.vec_map-0.8.2.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__version_check-0.9.4",
        sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/version_check/0.9.4/download"],
        strip_prefix = "version_check-0.9.4",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.version_check-0.9.4.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__wasi-0.10.0-wasi-snapshot-preview1",
        sha256 = "1a143597ca7c7793eff794def352d41792a93c481eb1042423ff7ff72ba2c31f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasi/0.10.0+wasi-snapshot-preview1/download"],
        strip_prefix = "wasi-0.10.0+wasi-snapshot-preview1",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.wasi-0.10.0+wasi-snapshot-preview1.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__wasm-bindgen-0.2.86",
        sha256 = "5bba0e8cb82ba49ff4e229459ff22a191bbe9a1cb3a341610c9c33efc27ddf73",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen/0.2.86/download"],
        strip_prefix = "wasm-bindgen-0.2.86",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.wasm-bindgen-0.2.86.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__wasm-bindgen-backend-0.2.86",
        sha256 = "19b04bc93f9d6bdee709f6bd2118f57dd6679cf1176a1af464fca3ab0d66d8fb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen-backend/0.2.86/download"],
        strip_prefix = "wasm-bindgen-backend-0.2.86",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.wasm-bindgen-backend-0.2.86.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__wasm-bindgen-macro-0.2.86",
        sha256 = "14d6b024f1a526bb0234f52840389927257beb670610081360e5a03c5df9c258",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen-macro/0.2.86/download"],
        strip_prefix = "wasm-bindgen-macro-0.2.86",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.wasm-bindgen-macro-0.2.86.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__wasm-bindgen-macro-support-0.2.86",
        sha256 = "e128beba882dd1eb6200e1dc92ae6c5dbaa4311aa7bb211ca035779e5efc39f8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen-macro-support/0.2.86/download"],
        strip_prefix = "wasm-bindgen-macro-support-0.2.86",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.wasm-bindgen-macro-support-0.2.86.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__wasm-bindgen-shared-0.2.86",
        sha256 = "ed9d5b4305409d1fc9482fee2d7f9bcbf24b3972bf59817ef757e23982242a93",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasm-bindgen-shared/0.2.86/download"],
        strip_prefix = "wasm-bindgen-shared-0.2.86",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.wasm-bindgen-shared-0.2.86.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__winapi-0.3.9",
        sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi/0.3.9/download"],
        strip_prefix = "winapi-0.3.9",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.winapi-0.3.9.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__winapi-i686-pc-windows-gnu-0.4.0",
        sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-i686-pc-windows-gnu/0.4.0/download"],
        strip_prefix = "winapi-i686-pc-windows-gnu-0.4.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.winapi-i686-pc-windows-gnu-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__winapi-x86_64-pc-windows-gnu-0.4.0",
        sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/winapi-x86_64-pc-windows-gnu/0.4.0/download"],
        strip_prefix = "winapi-x86_64-pc-windows-gnu-0.4.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.winapi-x86_64-pc-windows-gnu-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__windows-0.48.0",
        sha256 = "e686886bc078bc1b0b600cac0147aadb815089b6e4da64016cbd754b6342700f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows/0.48.0/download"],
        strip_prefix = "windows-0.48.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.windows-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__windows-sys-0.48.0",
        sha256 = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows-sys/0.48.0/download"],
        strip_prefix = "windows-sys-0.48.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.windows-sys-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__windows-targets-0.48.0",
        sha256 = "7b1eb6f0cd7c80c79759c929114ef071b87354ce476d9d94271031c0497adfd5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows-targets/0.48.0/download"],
        strip_prefix = "windows-targets-0.48.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.windows-targets-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__windows_aarch64_gnullvm-0.48.0",
        sha256 = "91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_gnullvm/0.48.0/download"],
        strip_prefix = "windows_aarch64_gnullvm-0.48.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.windows_aarch64_gnullvm-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__windows_aarch64_msvc-0.48.0",
        sha256 = "b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_aarch64_msvc/0.48.0/download"],
        strip_prefix = "windows_aarch64_msvc-0.48.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.windows_aarch64_msvc-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__windows_i686_gnu-0.48.0",
        sha256 = "622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_gnu/0.48.0/download"],
        strip_prefix = "windows_i686_gnu-0.48.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.windows_i686_gnu-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__windows_i686_msvc-0.48.0",
        sha256 = "4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_i686_msvc/0.48.0/download"],
        strip_prefix = "windows_i686_msvc-0.48.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.windows_i686_msvc-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__windows_x86_64_gnu-0.48.0",
        sha256 = "ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnu/0.48.0/download"],
        strip_prefix = "windows_x86_64_gnu-0.48.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.windows_x86_64_gnu-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__windows_x86_64_gnullvm-0.48.0",
        sha256 = "7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_gnullvm/0.48.0/download"],
        strip_prefix = "windows_x86_64_gnullvm-0.48.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.windows_x86_64_gnullvm-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__windows_x86_64_msvc-0.48.0",
        sha256 = "1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/windows_x86_64_msvc/0.48.0/download"],
        strip_prefix = "windows_x86_64_msvc-0.48.0",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.windows_x86_64_msvc-0.48.0.bazel"),
    )

    maybe(
        http_archive,
        name = "tock_index__xattr-0.2.3",
        sha256 = "6d1526bbe5aaeb5eb06885f4d987bcdfa5e23187055de9b83fe00156a821fabc",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/xattr/0.2.3/download"],
        strip_prefix = "xattr-0.2.3",
        build_file = Label("@lowrisc_opentitan//third_party/tock/crates:BUILD.xattr-0.2.3.bazel"),
    )
