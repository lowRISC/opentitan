diff --git a/python/private/pypi/requirements.bzl.tmpl.workspace b/python/private/pypi/requirements.bzl.tmpl.workspace
index 2f4bcd69..3e935465 100644
--- a/python/private/pypi/requirements.bzl.tmpl.workspace
+++ b/python/private/pypi/requirements.bzl.tmpl.workspace
@@ -64,7 +64,8 @@ def install_deps(**whl_library_kwargs):
 
         whl_library(
             name = name,
-            requirement = requirement,
+            # Ignore hashes due to mismatches when caching wheels for airgapped builds.
+            requirement = requirement.split(" ")[0],
             group_name = group_name,
             group_deps = group_deps,
             annotation = _get_annotation(requirement),
diff --git a/python/private/pypi/whl_library.bzl b/python/private/pypi/whl_library.bzl
index 612ca2cf..44d6aba8 100644
--- a/python/private/pypi/whl_library.bzl
+++ b/python/private/pypi/whl_library.bzl
@@ -112,10 +112,18 @@ def _parse_optional_attrs(rctx, args, extra_pip_args = None):
     # support rctx.getenv(name, default): When building incrementally, any change to the value of
     # the variable named by name will cause this repository to be re-fetched.
     if "getenv" in dir(rctx):
         getenv = rctx.getenv
     else:
         getenv = rctx.os.environ.get
 
+    # Check if a pre-cached wheels repo is available.
+    if rctx.attr.local_wheels_repo_target:
+        local_wheels_repo_path = rctx.path(rctx.attr.local_wheels_repo_target).dirname
+        extra_pip_args += [
+            "--no-index",
+            "--find-links={}".format(local_wheels_repo_path),
+        ]
+
     # Check for None so we use empty default types from our attrs.
     # Some args want to be list, and some want to be dict.
     if extra_pip_args != None:
@@ -404,6 +412,9 @@ and the target that we need respectively.
     "group_name": attr.string(
         doc = "Name of the group, if any.",
     ),
+    "local_wheels_repo_target": attr.label(
+        doc = "Pointer to a target in the external repo where pre-cached wheels may be found. Used for airgapped builds.",
+    ),
     "repo": attr.string(
         mandatory = True,
         doc = "Pointer to parent repo name. Used to make these rules rerun if the parent repo changes.",
