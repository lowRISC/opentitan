// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module rv_plic_reg_top (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output rv_plic_reg_pkg::rv_plic_reg2hw_t reg2hw, // Write
  input  rv_plic_reg_pkg::rv_plic_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o
);

  import rv_plic_reg_pkg::* ;

  localparam int AW = 27;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [97:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(98)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic prio_0_we;
  logic [1:0] prio_0_qs;
  logic [1:0] prio_0_wd;
  logic prio_1_we;
  logic [1:0] prio_1_qs;
  logic [1:0] prio_1_wd;
  logic prio_2_we;
  logic [1:0] prio_2_qs;
  logic [1:0] prio_2_wd;
  logic prio_3_we;
  logic [1:0] prio_3_qs;
  logic [1:0] prio_3_wd;
  logic prio_4_we;
  logic [1:0] prio_4_qs;
  logic [1:0] prio_4_wd;
  logic prio_5_we;
  logic [1:0] prio_5_qs;
  logic [1:0] prio_5_wd;
  logic prio_6_we;
  logic [1:0] prio_6_qs;
  logic [1:0] prio_6_wd;
  logic prio_7_we;
  logic [1:0] prio_7_qs;
  logic [1:0] prio_7_wd;
  logic prio_8_we;
  logic [1:0] prio_8_qs;
  logic [1:0] prio_8_wd;
  logic prio_9_we;
  logic [1:0] prio_9_qs;
  logic [1:0] prio_9_wd;
  logic prio_10_we;
  logic [1:0] prio_10_qs;
  logic [1:0] prio_10_wd;
  logic prio_11_we;
  logic [1:0] prio_11_qs;
  logic [1:0] prio_11_wd;
  logic prio_12_we;
  logic [1:0] prio_12_qs;
  logic [1:0] prio_12_wd;
  logic prio_13_we;
  logic [1:0] prio_13_qs;
  logic [1:0] prio_13_wd;
  logic prio_14_we;
  logic [1:0] prio_14_qs;
  logic [1:0] prio_14_wd;
  logic prio_15_we;
  logic [1:0] prio_15_qs;
  logic [1:0] prio_15_wd;
  logic prio_16_we;
  logic [1:0] prio_16_qs;
  logic [1:0] prio_16_wd;
  logic prio_17_we;
  logic [1:0] prio_17_qs;
  logic [1:0] prio_17_wd;
  logic prio_18_we;
  logic [1:0] prio_18_qs;
  logic [1:0] prio_18_wd;
  logic prio_19_we;
  logic [1:0] prio_19_qs;
  logic [1:0] prio_19_wd;
  logic prio_20_we;
  logic [1:0] prio_20_qs;
  logic [1:0] prio_20_wd;
  logic prio_21_we;
  logic [1:0] prio_21_qs;
  logic [1:0] prio_21_wd;
  logic prio_22_we;
  logic [1:0] prio_22_qs;
  logic [1:0] prio_22_wd;
  logic prio_23_we;
  logic [1:0] prio_23_qs;
  logic [1:0] prio_23_wd;
  logic prio_24_we;
  logic [1:0] prio_24_qs;
  logic [1:0] prio_24_wd;
  logic prio_25_we;
  logic [1:0] prio_25_qs;
  logic [1:0] prio_25_wd;
  logic prio_26_we;
  logic [1:0] prio_26_qs;
  logic [1:0] prio_26_wd;
  logic prio_27_we;
  logic [1:0] prio_27_qs;
  logic [1:0] prio_27_wd;
  logic prio_28_we;
  logic [1:0] prio_28_qs;
  logic [1:0] prio_28_wd;
  logic prio_29_we;
  logic [1:0] prio_29_qs;
  logic [1:0] prio_29_wd;
  logic prio_30_we;
  logic [1:0] prio_30_qs;
  logic [1:0] prio_30_wd;
  logic prio_31_we;
  logic [1:0] prio_31_qs;
  logic [1:0] prio_31_wd;
  logic prio_32_we;
  logic [1:0] prio_32_qs;
  logic [1:0] prio_32_wd;
  logic prio_33_we;
  logic [1:0] prio_33_qs;
  logic [1:0] prio_33_wd;
  logic prio_34_we;
  logic [1:0] prio_34_qs;
  logic [1:0] prio_34_wd;
  logic prio_35_we;
  logic [1:0] prio_35_qs;
  logic [1:0] prio_35_wd;
  logic prio_36_we;
  logic [1:0] prio_36_qs;
  logic [1:0] prio_36_wd;
  logic prio_37_we;
  logic [1:0] prio_37_qs;
  logic [1:0] prio_37_wd;
  logic prio_38_we;
  logic [1:0] prio_38_qs;
  logic [1:0] prio_38_wd;
  logic prio_39_we;
  logic [1:0] prio_39_qs;
  logic [1:0] prio_39_wd;
  logic prio_40_we;
  logic [1:0] prio_40_qs;
  logic [1:0] prio_40_wd;
  logic prio_41_we;
  logic [1:0] prio_41_qs;
  logic [1:0] prio_41_wd;
  logic prio_42_we;
  logic [1:0] prio_42_qs;
  logic [1:0] prio_42_wd;
  logic prio_43_we;
  logic [1:0] prio_43_qs;
  logic [1:0] prio_43_wd;
  logic prio_44_we;
  logic [1:0] prio_44_qs;
  logic [1:0] prio_44_wd;
  logic prio_45_we;
  logic [1:0] prio_45_qs;
  logic [1:0] prio_45_wd;
  logic prio_46_we;
  logic [1:0] prio_46_qs;
  logic [1:0] prio_46_wd;
  logic prio_47_we;
  logic [1:0] prio_47_qs;
  logic [1:0] prio_47_wd;
  logic prio_48_we;
  logic [1:0] prio_48_qs;
  logic [1:0] prio_48_wd;
  logic prio_49_we;
  logic [1:0] prio_49_qs;
  logic [1:0] prio_49_wd;
  logic prio_50_we;
  logic [1:0] prio_50_qs;
  logic [1:0] prio_50_wd;
  logic prio_51_we;
  logic [1:0] prio_51_qs;
  logic [1:0] prio_51_wd;
  logic prio_52_we;
  logic [1:0] prio_52_qs;
  logic [1:0] prio_52_wd;
  logic prio_53_we;
  logic [1:0] prio_53_qs;
  logic [1:0] prio_53_wd;
  logic prio_54_we;
  logic [1:0] prio_54_qs;
  logic [1:0] prio_54_wd;
  logic prio_55_we;
  logic [1:0] prio_55_qs;
  logic [1:0] prio_55_wd;
  logic prio_56_we;
  logic [1:0] prio_56_qs;
  logic [1:0] prio_56_wd;
  logic prio_57_we;
  logic [1:0] prio_57_qs;
  logic [1:0] prio_57_wd;
  logic prio_58_we;
  logic [1:0] prio_58_qs;
  logic [1:0] prio_58_wd;
  logic prio_59_we;
  logic [1:0] prio_59_qs;
  logic [1:0] prio_59_wd;
  logic prio_60_we;
  logic [1:0] prio_60_qs;
  logic [1:0] prio_60_wd;
  logic prio_61_we;
  logic [1:0] prio_61_qs;
  logic [1:0] prio_61_wd;
  logic prio_62_we;
  logic [1:0] prio_62_qs;
  logic [1:0] prio_62_wd;
  logic prio_63_we;
  logic [1:0] prio_63_qs;
  logic [1:0] prio_63_wd;
  logic prio_64_we;
  logic [1:0] prio_64_qs;
  logic [1:0] prio_64_wd;
  logic prio_65_we;
  logic [1:0] prio_65_qs;
  logic [1:0] prio_65_wd;
  logic prio_66_we;
  logic [1:0] prio_66_qs;
  logic [1:0] prio_66_wd;
  logic prio_67_we;
  logic [1:0] prio_67_qs;
  logic [1:0] prio_67_wd;
  logic prio_68_we;
  logic [1:0] prio_68_qs;
  logic [1:0] prio_68_wd;
  logic prio_69_we;
  logic [1:0] prio_69_qs;
  logic [1:0] prio_69_wd;
  logic prio_70_we;
  logic [1:0] prio_70_qs;
  logic [1:0] prio_70_wd;
  logic prio_71_we;
  logic [1:0] prio_71_qs;
  logic [1:0] prio_71_wd;
  logic prio_72_we;
  logic [1:0] prio_72_qs;
  logic [1:0] prio_72_wd;
  logic prio_73_we;
  logic [1:0] prio_73_qs;
  logic [1:0] prio_73_wd;
  logic prio_74_we;
  logic [1:0] prio_74_qs;
  logic [1:0] prio_74_wd;
  logic prio_75_we;
  logic [1:0] prio_75_qs;
  logic [1:0] prio_75_wd;
  logic prio_76_we;
  logic [1:0] prio_76_qs;
  logic [1:0] prio_76_wd;
  logic prio_77_we;
  logic [1:0] prio_77_qs;
  logic [1:0] prio_77_wd;
  logic prio_78_we;
  logic [1:0] prio_78_qs;
  logic [1:0] prio_78_wd;
  logic prio_79_we;
  logic [1:0] prio_79_qs;
  logic [1:0] prio_79_wd;
  logic prio_80_we;
  logic [1:0] prio_80_qs;
  logic [1:0] prio_80_wd;
  logic prio_81_we;
  logic [1:0] prio_81_qs;
  logic [1:0] prio_81_wd;
  logic prio_82_we;
  logic [1:0] prio_82_qs;
  logic [1:0] prio_82_wd;
  logic prio_83_we;
  logic [1:0] prio_83_qs;
  logic [1:0] prio_83_wd;
  logic prio_84_we;
  logic [1:0] prio_84_qs;
  logic [1:0] prio_84_wd;
  logic prio_85_we;
  logic [1:0] prio_85_qs;
  logic [1:0] prio_85_wd;
  logic prio_86_we;
  logic [1:0] prio_86_qs;
  logic [1:0] prio_86_wd;
  logic prio_87_we;
  logic [1:0] prio_87_qs;
  logic [1:0] prio_87_wd;
  logic ip_0_p_0_qs;
  logic ip_0_p_1_qs;
  logic ip_0_p_2_qs;
  logic ip_0_p_3_qs;
  logic ip_0_p_4_qs;
  logic ip_0_p_5_qs;
  logic ip_0_p_6_qs;
  logic ip_0_p_7_qs;
  logic ip_0_p_8_qs;
  logic ip_0_p_9_qs;
  logic ip_0_p_10_qs;
  logic ip_0_p_11_qs;
  logic ip_0_p_12_qs;
  logic ip_0_p_13_qs;
  logic ip_0_p_14_qs;
  logic ip_0_p_15_qs;
  logic ip_0_p_16_qs;
  logic ip_0_p_17_qs;
  logic ip_0_p_18_qs;
  logic ip_0_p_19_qs;
  logic ip_0_p_20_qs;
  logic ip_0_p_21_qs;
  logic ip_0_p_22_qs;
  logic ip_0_p_23_qs;
  logic ip_0_p_24_qs;
  logic ip_0_p_25_qs;
  logic ip_0_p_26_qs;
  logic ip_0_p_27_qs;
  logic ip_0_p_28_qs;
  logic ip_0_p_29_qs;
  logic ip_0_p_30_qs;
  logic ip_0_p_31_qs;
  logic ip_1_p_32_qs;
  logic ip_1_p_33_qs;
  logic ip_1_p_34_qs;
  logic ip_1_p_35_qs;
  logic ip_1_p_36_qs;
  logic ip_1_p_37_qs;
  logic ip_1_p_38_qs;
  logic ip_1_p_39_qs;
  logic ip_1_p_40_qs;
  logic ip_1_p_41_qs;
  logic ip_1_p_42_qs;
  logic ip_1_p_43_qs;
  logic ip_1_p_44_qs;
  logic ip_1_p_45_qs;
  logic ip_1_p_46_qs;
  logic ip_1_p_47_qs;
  logic ip_1_p_48_qs;
  logic ip_1_p_49_qs;
  logic ip_1_p_50_qs;
  logic ip_1_p_51_qs;
  logic ip_1_p_52_qs;
  logic ip_1_p_53_qs;
  logic ip_1_p_54_qs;
  logic ip_1_p_55_qs;
  logic ip_1_p_56_qs;
  logic ip_1_p_57_qs;
  logic ip_1_p_58_qs;
  logic ip_1_p_59_qs;
  logic ip_1_p_60_qs;
  logic ip_1_p_61_qs;
  logic ip_1_p_62_qs;
  logic ip_1_p_63_qs;
  logic ip_2_p_64_qs;
  logic ip_2_p_65_qs;
  logic ip_2_p_66_qs;
  logic ip_2_p_67_qs;
  logic ip_2_p_68_qs;
  logic ip_2_p_69_qs;
  logic ip_2_p_70_qs;
  logic ip_2_p_71_qs;
  logic ip_2_p_72_qs;
  logic ip_2_p_73_qs;
  logic ip_2_p_74_qs;
  logic ip_2_p_75_qs;
  logic ip_2_p_76_qs;
  logic ip_2_p_77_qs;
  logic ip_2_p_78_qs;
  logic ip_2_p_79_qs;
  logic ip_2_p_80_qs;
  logic ip_2_p_81_qs;
  logic ip_2_p_82_qs;
  logic ip_2_p_83_qs;
  logic ip_2_p_84_qs;
  logic ip_2_p_85_qs;
  logic ip_2_p_86_qs;
  logic ip_2_p_87_qs;
  logic ie0_0_we;
  logic ie0_0_e_0_qs;
  logic ie0_0_e_0_wd;
  logic ie0_0_e_1_qs;
  logic ie0_0_e_1_wd;
  logic ie0_0_e_2_qs;
  logic ie0_0_e_2_wd;
  logic ie0_0_e_3_qs;
  logic ie0_0_e_3_wd;
  logic ie0_0_e_4_qs;
  logic ie0_0_e_4_wd;
  logic ie0_0_e_5_qs;
  logic ie0_0_e_5_wd;
  logic ie0_0_e_6_qs;
  logic ie0_0_e_6_wd;
  logic ie0_0_e_7_qs;
  logic ie0_0_e_7_wd;
  logic ie0_0_e_8_qs;
  logic ie0_0_e_8_wd;
  logic ie0_0_e_9_qs;
  logic ie0_0_e_9_wd;
  logic ie0_0_e_10_qs;
  logic ie0_0_e_10_wd;
  logic ie0_0_e_11_qs;
  logic ie0_0_e_11_wd;
  logic ie0_0_e_12_qs;
  logic ie0_0_e_12_wd;
  logic ie0_0_e_13_qs;
  logic ie0_0_e_13_wd;
  logic ie0_0_e_14_qs;
  logic ie0_0_e_14_wd;
  logic ie0_0_e_15_qs;
  logic ie0_0_e_15_wd;
  logic ie0_0_e_16_qs;
  logic ie0_0_e_16_wd;
  logic ie0_0_e_17_qs;
  logic ie0_0_e_17_wd;
  logic ie0_0_e_18_qs;
  logic ie0_0_e_18_wd;
  logic ie0_0_e_19_qs;
  logic ie0_0_e_19_wd;
  logic ie0_0_e_20_qs;
  logic ie0_0_e_20_wd;
  logic ie0_0_e_21_qs;
  logic ie0_0_e_21_wd;
  logic ie0_0_e_22_qs;
  logic ie0_0_e_22_wd;
  logic ie0_0_e_23_qs;
  logic ie0_0_e_23_wd;
  logic ie0_0_e_24_qs;
  logic ie0_0_e_24_wd;
  logic ie0_0_e_25_qs;
  logic ie0_0_e_25_wd;
  logic ie0_0_e_26_qs;
  logic ie0_0_e_26_wd;
  logic ie0_0_e_27_qs;
  logic ie0_0_e_27_wd;
  logic ie0_0_e_28_qs;
  logic ie0_0_e_28_wd;
  logic ie0_0_e_29_qs;
  logic ie0_0_e_29_wd;
  logic ie0_0_e_30_qs;
  logic ie0_0_e_30_wd;
  logic ie0_0_e_31_qs;
  logic ie0_0_e_31_wd;
  logic ie0_1_we;
  logic ie0_1_e_32_qs;
  logic ie0_1_e_32_wd;
  logic ie0_1_e_33_qs;
  logic ie0_1_e_33_wd;
  logic ie0_1_e_34_qs;
  logic ie0_1_e_34_wd;
  logic ie0_1_e_35_qs;
  logic ie0_1_e_35_wd;
  logic ie0_1_e_36_qs;
  logic ie0_1_e_36_wd;
  logic ie0_1_e_37_qs;
  logic ie0_1_e_37_wd;
  logic ie0_1_e_38_qs;
  logic ie0_1_e_38_wd;
  logic ie0_1_e_39_qs;
  logic ie0_1_e_39_wd;
  logic ie0_1_e_40_qs;
  logic ie0_1_e_40_wd;
  logic ie0_1_e_41_qs;
  logic ie0_1_e_41_wd;
  logic ie0_1_e_42_qs;
  logic ie0_1_e_42_wd;
  logic ie0_1_e_43_qs;
  logic ie0_1_e_43_wd;
  logic ie0_1_e_44_qs;
  logic ie0_1_e_44_wd;
  logic ie0_1_e_45_qs;
  logic ie0_1_e_45_wd;
  logic ie0_1_e_46_qs;
  logic ie0_1_e_46_wd;
  logic ie0_1_e_47_qs;
  logic ie0_1_e_47_wd;
  logic ie0_1_e_48_qs;
  logic ie0_1_e_48_wd;
  logic ie0_1_e_49_qs;
  logic ie0_1_e_49_wd;
  logic ie0_1_e_50_qs;
  logic ie0_1_e_50_wd;
  logic ie0_1_e_51_qs;
  logic ie0_1_e_51_wd;
  logic ie0_1_e_52_qs;
  logic ie0_1_e_52_wd;
  logic ie0_1_e_53_qs;
  logic ie0_1_e_53_wd;
  logic ie0_1_e_54_qs;
  logic ie0_1_e_54_wd;
  logic ie0_1_e_55_qs;
  logic ie0_1_e_55_wd;
  logic ie0_1_e_56_qs;
  logic ie0_1_e_56_wd;
  logic ie0_1_e_57_qs;
  logic ie0_1_e_57_wd;
  logic ie0_1_e_58_qs;
  logic ie0_1_e_58_wd;
  logic ie0_1_e_59_qs;
  logic ie0_1_e_59_wd;
  logic ie0_1_e_60_qs;
  logic ie0_1_e_60_wd;
  logic ie0_1_e_61_qs;
  logic ie0_1_e_61_wd;
  logic ie0_1_e_62_qs;
  logic ie0_1_e_62_wd;
  logic ie0_1_e_63_qs;
  logic ie0_1_e_63_wd;
  logic ie0_2_we;
  logic ie0_2_e_64_qs;
  logic ie0_2_e_64_wd;
  logic ie0_2_e_65_qs;
  logic ie0_2_e_65_wd;
  logic ie0_2_e_66_qs;
  logic ie0_2_e_66_wd;
  logic ie0_2_e_67_qs;
  logic ie0_2_e_67_wd;
  logic ie0_2_e_68_qs;
  logic ie0_2_e_68_wd;
  logic ie0_2_e_69_qs;
  logic ie0_2_e_69_wd;
  logic ie0_2_e_70_qs;
  logic ie0_2_e_70_wd;
  logic ie0_2_e_71_qs;
  logic ie0_2_e_71_wd;
  logic ie0_2_e_72_qs;
  logic ie0_2_e_72_wd;
  logic ie0_2_e_73_qs;
  logic ie0_2_e_73_wd;
  logic ie0_2_e_74_qs;
  logic ie0_2_e_74_wd;
  logic ie0_2_e_75_qs;
  logic ie0_2_e_75_wd;
  logic ie0_2_e_76_qs;
  logic ie0_2_e_76_wd;
  logic ie0_2_e_77_qs;
  logic ie0_2_e_77_wd;
  logic ie0_2_e_78_qs;
  logic ie0_2_e_78_wd;
  logic ie0_2_e_79_qs;
  logic ie0_2_e_79_wd;
  logic ie0_2_e_80_qs;
  logic ie0_2_e_80_wd;
  logic ie0_2_e_81_qs;
  logic ie0_2_e_81_wd;
  logic ie0_2_e_82_qs;
  logic ie0_2_e_82_wd;
  logic ie0_2_e_83_qs;
  logic ie0_2_e_83_wd;
  logic ie0_2_e_84_qs;
  logic ie0_2_e_84_wd;
  logic ie0_2_e_85_qs;
  logic ie0_2_e_85_wd;
  logic ie0_2_e_86_qs;
  logic ie0_2_e_86_wd;
  logic ie0_2_e_87_qs;
  logic ie0_2_e_87_wd;
  logic threshold0_we;
  logic [1:0] threshold0_qs;
  logic [1:0] threshold0_wd;
  logic cc0_re;
  logic cc0_we;
  logic [6:0] cc0_qs;
  logic [6:0] cc0_wd;
  logic msip0_we;
  logic msip0_qs;
  logic msip0_wd;
  logic alert_test_we;
  logic alert_test_wd;

  // Register instances
  // Subregister 0 of Multireg prio
  // R[prio_0]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_0_we),
    .wd     (prio_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_0_qs)
  );


  // Subregister 1 of Multireg prio
  // R[prio_1]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_1_we),
    .wd     (prio_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_1_qs)
  );


  // Subregister 2 of Multireg prio
  // R[prio_2]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_2_we),
    .wd     (prio_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_2_qs)
  );


  // Subregister 3 of Multireg prio
  // R[prio_3]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_3_we),
    .wd     (prio_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_3_qs)
  );


  // Subregister 4 of Multireg prio
  // R[prio_4]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_4_we),
    .wd     (prio_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_4_qs)
  );


  // Subregister 5 of Multireg prio
  // R[prio_5]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_5_we),
    .wd     (prio_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_5_qs)
  );


  // Subregister 6 of Multireg prio
  // R[prio_6]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_6_we),
    .wd     (prio_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_6_qs)
  );


  // Subregister 7 of Multireg prio
  // R[prio_7]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_7_we),
    .wd     (prio_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_7_qs)
  );


  // Subregister 8 of Multireg prio
  // R[prio_8]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_8_we),
    .wd     (prio_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_8_qs)
  );


  // Subregister 9 of Multireg prio
  // R[prio_9]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_9_we),
    .wd     (prio_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_9_qs)
  );


  // Subregister 10 of Multireg prio
  // R[prio_10]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_10_we),
    .wd     (prio_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_10_qs)
  );


  // Subregister 11 of Multireg prio
  // R[prio_11]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_11_we),
    .wd     (prio_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_11_qs)
  );


  // Subregister 12 of Multireg prio
  // R[prio_12]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_12_we),
    .wd     (prio_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_12_qs)
  );


  // Subregister 13 of Multireg prio
  // R[prio_13]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_13_we),
    .wd     (prio_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_13_qs)
  );


  // Subregister 14 of Multireg prio
  // R[prio_14]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_14_we),
    .wd     (prio_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_14_qs)
  );


  // Subregister 15 of Multireg prio
  // R[prio_15]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_15_we),
    .wd     (prio_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_15_qs)
  );


  // Subregister 16 of Multireg prio
  // R[prio_16]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_16_we),
    .wd     (prio_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_16_qs)
  );


  // Subregister 17 of Multireg prio
  // R[prio_17]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_17_we),
    .wd     (prio_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_17_qs)
  );


  // Subregister 18 of Multireg prio
  // R[prio_18]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_18_we),
    .wd     (prio_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_18_qs)
  );


  // Subregister 19 of Multireg prio
  // R[prio_19]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_19_we),
    .wd     (prio_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_19_qs)
  );


  // Subregister 20 of Multireg prio
  // R[prio_20]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_20_we),
    .wd     (prio_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_20_qs)
  );


  // Subregister 21 of Multireg prio
  // R[prio_21]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_21_we),
    .wd     (prio_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_21_qs)
  );


  // Subregister 22 of Multireg prio
  // R[prio_22]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_22_we),
    .wd     (prio_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_22_qs)
  );


  // Subregister 23 of Multireg prio
  // R[prio_23]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_23_we),
    .wd     (prio_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_23_qs)
  );


  // Subregister 24 of Multireg prio
  // R[prio_24]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_24_we),
    .wd     (prio_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_24_qs)
  );


  // Subregister 25 of Multireg prio
  // R[prio_25]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_25_we),
    .wd     (prio_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_25_qs)
  );


  // Subregister 26 of Multireg prio
  // R[prio_26]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_26_we),
    .wd     (prio_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_26_qs)
  );


  // Subregister 27 of Multireg prio
  // R[prio_27]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_27_we),
    .wd     (prio_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_27_qs)
  );


  // Subregister 28 of Multireg prio
  // R[prio_28]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_28_we),
    .wd     (prio_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_28_qs)
  );


  // Subregister 29 of Multireg prio
  // R[prio_29]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_29_we),
    .wd     (prio_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_29_qs)
  );


  // Subregister 30 of Multireg prio
  // R[prio_30]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_30_we),
    .wd     (prio_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_30_qs)
  );


  // Subregister 31 of Multireg prio
  // R[prio_31]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_31_we),
    .wd     (prio_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_31_qs)
  );


  // Subregister 32 of Multireg prio
  // R[prio_32]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_32 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_32_we),
    .wd     (prio_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[32].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_32_qs)
  );


  // Subregister 33 of Multireg prio
  // R[prio_33]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_33 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_33_we),
    .wd     (prio_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[33].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_33_qs)
  );


  // Subregister 34 of Multireg prio
  // R[prio_34]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_34 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_34_we),
    .wd     (prio_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[34].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_34_qs)
  );


  // Subregister 35 of Multireg prio
  // R[prio_35]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_35 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_35_we),
    .wd     (prio_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[35].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_35_qs)
  );


  // Subregister 36 of Multireg prio
  // R[prio_36]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_36 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_36_we),
    .wd     (prio_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[36].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_36_qs)
  );


  // Subregister 37 of Multireg prio
  // R[prio_37]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_37 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_37_we),
    .wd     (prio_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[37].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_37_qs)
  );


  // Subregister 38 of Multireg prio
  // R[prio_38]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_38 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_38_we),
    .wd     (prio_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[38].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_38_qs)
  );


  // Subregister 39 of Multireg prio
  // R[prio_39]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_39 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_39_we),
    .wd     (prio_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[39].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_39_qs)
  );


  // Subregister 40 of Multireg prio
  // R[prio_40]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_40 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_40_we),
    .wd     (prio_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[40].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_40_qs)
  );


  // Subregister 41 of Multireg prio
  // R[prio_41]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_41 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_41_we),
    .wd     (prio_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[41].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_41_qs)
  );


  // Subregister 42 of Multireg prio
  // R[prio_42]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_42 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_42_we),
    .wd     (prio_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[42].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_42_qs)
  );


  // Subregister 43 of Multireg prio
  // R[prio_43]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_43 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_43_we),
    .wd     (prio_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[43].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_43_qs)
  );


  // Subregister 44 of Multireg prio
  // R[prio_44]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_44 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_44_we),
    .wd     (prio_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[44].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_44_qs)
  );


  // Subregister 45 of Multireg prio
  // R[prio_45]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_45 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_45_we),
    .wd     (prio_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[45].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_45_qs)
  );


  // Subregister 46 of Multireg prio
  // R[prio_46]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_46 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_46_we),
    .wd     (prio_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[46].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_46_qs)
  );


  // Subregister 47 of Multireg prio
  // R[prio_47]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_47 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_47_we),
    .wd     (prio_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[47].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_47_qs)
  );


  // Subregister 48 of Multireg prio
  // R[prio_48]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_48 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_48_we),
    .wd     (prio_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[48].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_48_qs)
  );


  // Subregister 49 of Multireg prio
  // R[prio_49]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_49 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_49_we),
    .wd     (prio_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[49].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_49_qs)
  );


  // Subregister 50 of Multireg prio
  // R[prio_50]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_50 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_50_we),
    .wd     (prio_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[50].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_50_qs)
  );


  // Subregister 51 of Multireg prio
  // R[prio_51]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_51 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_51_we),
    .wd     (prio_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[51].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_51_qs)
  );


  // Subregister 52 of Multireg prio
  // R[prio_52]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_52 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_52_we),
    .wd     (prio_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[52].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_52_qs)
  );


  // Subregister 53 of Multireg prio
  // R[prio_53]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_53 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_53_we),
    .wd     (prio_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[53].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_53_qs)
  );


  // Subregister 54 of Multireg prio
  // R[prio_54]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_54 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_54_we),
    .wd     (prio_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[54].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_54_qs)
  );


  // Subregister 55 of Multireg prio
  // R[prio_55]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_55 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_55_we),
    .wd     (prio_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[55].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_55_qs)
  );


  // Subregister 56 of Multireg prio
  // R[prio_56]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_56 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_56_we),
    .wd     (prio_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[56].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_56_qs)
  );


  // Subregister 57 of Multireg prio
  // R[prio_57]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_57 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_57_we),
    .wd     (prio_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[57].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_57_qs)
  );


  // Subregister 58 of Multireg prio
  // R[prio_58]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_58 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_58_we),
    .wd     (prio_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[58].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_58_qs)
  );


  // Subregister 59 of Multireg prio
  // R[prio_59]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_59 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_59_we),
    .wd     (prio_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[59].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_59_qs)
  );


  // Subregister 60 of Multireg prio
  // R[prio_60]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_60 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_60_we),
    .wd     (prio_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[60].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_60_qs)
  );


  // Subregister 61 of Multireg prio
  // R[prio_61]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_61 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_61_we),
    .wd     (prio_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[61].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_61_qs)
  );


  // Subregister 62 of Multireg prio
  // R[prio_62]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_62 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_62_we),
    .wd     (prio_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[62].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_62_qs)
  );


  // Subregister 63 of Multireg prio
  // R[prio_63]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_63 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_63_we),
    .wd     (prio_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[63].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_63_qs)
  );


  // Subregister 64 of Multireg prio
  // R[prio_64]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_64 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_64_we),
    .wd     (prio_64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[64].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_64_qs)
  );


  // Subregister 65 of Multireg prio
  // R[prio_65]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_65 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_65_we),
    .wd     (prio_65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[65].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_65_qs)
  );


  // Subregister 66 of Multireg prio
  // R[prio_66]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_66 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_66_we),
    .wd     (prio_66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[66].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_66_qs)
  );


  // Subregister 67 of Multireg prio
  // R[prio_67]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_67 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_67_we),
    .wd     (prio_67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[67].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_67_qs)
  );


  // Subregister 68 of Multireg prio
  // R[prio_68]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_68 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_68_we),
    .wd     (prio_68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[68].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_68_qs)
  );


  // Subregister 69 of Multireg prio
  // R[prio_69]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_69 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_69_we),
    .wd     (prio_69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[69].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_69_qs)
  );


  // Subregister 70 of Multireg prio
  // R[prio_70]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_70 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_70_we),
    .wd     (prio_70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[70].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_70_qs)
  );


  // Subregister 71 of Multireg prio
  // R[prio_71]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_71 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_71_we),
    .wd     (prio_71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[71].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_71_qs)
  );


  // Subregister 72 of Multireg prio
  // R[prio_72]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_72 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_72_we),
    .wd     (prio_72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[72].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_72_qs)
  );


  // Subregister 73 of Multireg prio
  // R[prio_73]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_73 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_73_we),
    .wd     (prio_73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[73].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_73_qs)
  );


  // Subregister 74 of Multireg prio
  // R[prio_74]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_74 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_74_we),
    .wd     (prio_74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[74].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_74_qs)
  );


  // Subregister 75 of Multireg prio
  // R[prio_75]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_75 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_75_we),
    .wd     (prio_75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[75].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_75_qs)
  );


  // Subregister 76 of Multireg prio
  // R[prio_76]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_76 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_76_we),
    .wd     (prio_76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[76].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_76_qs)
  );


  // Subregister 77 of Multireg prio
  // R[prio_77]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_77 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_77_we),
    .wd     (prio_77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[77].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_77_qs)
  );


  // Subregister 78 of Multireg prio
  // R[prio_78]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_78 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_78_we),
    .wd     (prio_78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[78].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_78_qs)
  );


  // Subregister 79 of Multireg prio
  // R[prio_79]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_79 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_79_we),
    .wd     (prio_79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[79].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_79_qs)
  );


  // Subregister 80 of Multireg prio
  // R[prio_80]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_80 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_80_we),
    .wd     (prio_80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[80].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_80_qs)
  );


  // Subregister 81 of Multireg prio
  // R[prio_81]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_81 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_81_we),
    .wd     (prio_81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[81].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_81_qs)
  );


  // Subregister 82 of Multireg prio
  // R[prio_82]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_82 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_82_we),
    .wd     (prio_82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[82].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_82_qs)
  );


  // Subregister 83 of Multireg prio
  // R[prio_83]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_83 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_83_we),
    .wd     (prio_83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[83].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_83_qs)
  );


  // Subregister 84 of Multireg prio
  // R[prio_84]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_84 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_84_we),
    .wd     (prio_84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[84].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_84_qs)
  );


  // Subregister 85 of Multireg prio
  // R[prio_85]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_85 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_85_we),
    .wd     (prio_85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[85].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_85_qs)
  );


  // Subregister 86 of Multireg prio
  // R[prio_86]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_86 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_86_we),
    .wd     (prio_86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[86].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_86_qs)
  );


  // Subregister 87 of Multireg prio
  // R[prio_87]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_prio_87 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prio_87_we),
    .wd     (prio_87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio[87].q),
    .ds     (),

    // to register interface (read)
    .qs     (prio_87_qs)
  );


  // Subregister 0 of Multireg ip
  // R[ip_0]: V(False)
  //   F[p_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[0].de),
    .d      (hw2reg.ip[0].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_0_qs)
  );

  //   F[p_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[1].de),
    .d      (hw2reg.ip[1].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_1_qs)
  );

  //   F[p_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[2].de),
    .d      (hw2reg.ip[2].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_2_qs)
  );

  //   F[p_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[3].de),
    .d      (hw2reg.ip[3].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_3_qs)
  );

  //   F[p_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[4].de),
    .d      (hw2reg.ip[4].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_4_qs)
  );

  //   F[p_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[5].de),
    .d      (hw2reg.ip[5].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_5_qs)
  );

  //   F[p_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[6].de),
    .d      (hw2reg.ip[6].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_6_qs)
  );

  //   F[p_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[7].de),
    .d      (hw2reg.ip[7].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_7_qs)
  );

  //   F[p_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[8].de),
    .d      (hw2reg.ip[8].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_8_qs)
  );

  //   F[p_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[9].de),
    .d      (hw2reg.ip[9].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_9_qs)
  );

  //   F[p_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[10].de),
    .d      (hw2reg.ip[10].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_10_qs)
  );

  //   F[p_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[11].de),
    .d      (hw2reg.ip[11].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_11_qs)
  );

  //   F[p_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[12].de),
    .d      (hw2reg.ip[12].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_12_qs)
  );

  //   F[p_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[13].de),
    .d      (hw2reg.ip[13].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_13_qs)
  );

  //   F[p_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[14].de),
    .d      (hw2reg.ip[14].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_14_qs)
  );

  //   F[p_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[15].de),
    .d      (hw2reg.ip[15].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_15_qs)
  );

  //   F[p_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[16].de),
    .d      (hw2reg.ip[16].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_16_qs)
  );

  //   F[p_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[17].de),
    .d      (hw2reg.ip[17].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_17_qs)
  );

  //   F[p_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[18].de),
    .d      (hw2reg.ip[18].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_18_qs)
  );

  //   F[p_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[19].de),
    .d      (hw2reg.ip[19].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_19_qs)
  );

  //   F[p_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[20].de),
    .d      (hw2reg.ip[20].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_20_qs)
  );

  //   F[p_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[21].de),
    .d      (hw2reg.ip[21].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_21_qs)
  );

  //   F[p_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[22].de),
    .d      (hw2reg.ip[22].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_22_qs)
  );

  //   F[p_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[23].de),
    .d      (hw2reg.ip[23].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_23_qs)
  );

  //   F[p_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[24].de),
    .d      (hw2reg.ip[24].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_24_qs)
  );

  //   F[p_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[25].de),
    .d      (hw2reg.ip[25].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_25_qs)
  );

  //   F[p_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[26].de),
    .d      (hw2reg.ip[26].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_26_qs)
  );

  //   F[p_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[27].de),
    .d      (hw2reg.ip[27].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_27_qs)
  );

  //   F[p_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[28].de),
    .d      (hw2reg.ip[28].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_28_qs)
  );

  //   F[p_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[29].de),
    .d      (hw2reg.ip[29].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_29_qs)
  );

  //   F[p_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[30].de),
    .d      (hw2reg.ip[30].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_30_qs)
  );

  //   F[p_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_0_p_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[31].de),
    .d      (hw2reg.ip[31].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_0_p_31_qs)
  );


  // Subregister 1 of Multireg ip
  // R[ip_1]: V(False)
  //   F[p_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_32 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[32].de),
    .d      (hw2reg.ip[32].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_32_qs)
  );

  //   F[p_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_33 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[33].de),
    .d      (hw2reg.ip[33].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_33_qs)
  );

  //   F[p_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_34 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[34].de),
    .d      (hw2reg.ip[34].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_34_qs)
  );

  //   F[p_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_35 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[35].de),
    .d      (hw2reg.ip[35].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_35_qs)
  );

  //   F[p_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_36 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[36].de),
    .d      (hw2reg.ip[36].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_36_qs)
  );

  //   F[p_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_37 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[37].de),
    .d      (hw2reg.ip[37].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_37_qs)
  );

  //   F[p_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_38 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[38].de),
    .d      (hw2reg.ip[38].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_38_qs)
  );

  //   F[p_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_39 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[39].de),
    .d      (hw2reg.ip[39].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_39_qs)
  );

  //   F[p_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_40 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[40].de),
    .d      (hw2reg.ip[40].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_40_qs)
  );

  //   F[p_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_41 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[41].de),
    .d      (hw2reg.ip[41].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_41_qs)
  );

  //   F[p_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_42 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[42].de),
    .d      (hw2reg.ip[42].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_42_qs)
  );

  //   F[p_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_43 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[43].de),
    .d      (hw2reg.ip[43].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_43_qs)
  );

  //   F[p_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_44 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[44].de),
    .d      (hw2reg.ip[44].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_44_qs)
  );

  //   F[p_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_45 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[45].de),
    .d      (hw2reg.ip[45].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_45_qs)
  );

  //   F[p_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_46 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[46].de),
    .d      (hw2reg.ip[46].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_46_qs)
  );

  //   F[p_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_47 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[47].de),
    .d      (hw2reg.ip[47].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_47_qs)
  );

  //   F[p_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_48 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[48].de),
    .d      (hw2reg.ip[48].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_48_qs)
  );

  //   F[p_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_49 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[49].de),
    .d      (hw2reg.ip[49].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_49_qs)
  );

  //   F[p_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_50 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[50].de),
    .d      (hw2reg.ip[50].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_50_qs)
  );

  //   F[p_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_51 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[51].de),
    .d      (hw2reg.ip[51].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_51_qs)
  );

  //   F[p_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_52 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[52].de),
    .d      (hw2reg.ip[52].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_52_qs)
  );

  //   F[p_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_53 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[53].de),
    .d      (hw2reg.ip[53].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_53_qs)
  );

  //   F[p_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_54 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[54].de),
    .d      (hw2reg.ip[54].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_54_qs)
  );

  //   F[p_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_55 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[55].de),
    .d      (hw2reg.ip[55].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_55_qs)
  );

  //   F[p_56]: 24:24
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_56 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[56].de),
    .d      (hw2reg.ip[56].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_56_qs)
  );

  //   F[p_57]: 25:25
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_57 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[57].de),
    .d      (hw2reg.ip[57].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_57_qs)
  );

  //   F[p_58]: 26:26
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_58 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[58].de),
    .d      (hw2reg.ip[58].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_58_qs)
  );

  //   F[p_59]: 27:27
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_59 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[59].de),
    .d      (hw2reg.ip[59].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_59_qs)
  );

  //   F[p_60]: 28:28
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_60 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[60].de),
    .d      (hw2reg.ip[60].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_60_qs)
  );

  //   F[p_61]: 29:29
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_61 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[61].de),
    .d      (hw2reg.ip[61].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_61_qs)
  );

  //   F[p_62]: 30:30
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_62 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[62].de),
    .d      (hw2reg.ip[62].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_62_qs)
  );

  //   F[p_63]: 31:31
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_1_p_63 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[63].de),
    .d      (hw2reg.ip[63].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_1_p_63_qs)
  );


  // Subregister 2 of Multireg ip
  // R[ip_2]: V(False)
  //   F[p_64]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_64 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[64].de),
    .d      (hw2reg.ip[64].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_64_qs)
  );

  //   F[p_65]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_65 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[65].de),
    .d      (hw2reg.ip[65].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_65_qs)
  );

  //   F[p_66]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_66 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[66].de),
    .d      (hw2reg.ip[66].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_66_qs)
  );

  //   F[p_67]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_67 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[67].de),
    .d      (hw2reg.ip[67].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_67_qs)
  );

  //   F[p_68]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_68 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[68].de),
    .d      (hw2reg.ip[68].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_68_qs)
  );

  //   F[p_69]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_69 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[69].de),
    .d      (hw2reg.ip[69].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_69_qs)
  );

  //   F[p_70]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_70 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[70].de),
    .d      (hw2reg.ip[70].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_70_qs)
  );

  //   F[p_71]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_71 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[71].de),
    .d      (hw2reg.ip[71].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_71_qs)
  );

  //   F[p_72]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_72 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[72].de),
    .d      (hw2reg.ip[72].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_72_qs)
  );

  //   F[p_73]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_73 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[73].de),
    .d      (hw2reg.ip[73].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_73_qs)
  );

  //   F[p_74]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_74 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[74].de),
    .d      (hw2reg.ip[74].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_74_qs)
  );

  //   F[p_75]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_75 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[75].de),
    .d      (hw2reg.ip[75].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_75_qs)
  );

  //   F[p_76]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_76 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[76].de),
    .d      (hw2reg.ip[76].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_76_qs)
  );

  //   F[p_77]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_77 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[77].de),
    .d      (hw2reg.ip[77].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_77_qs)
  );

  //   F[p_78]: 14:14
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_78 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[78].de),
    .d      (hw2reg.ip[78].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_78_qs)
  );

  //   F[p_79]: 15:15
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_79 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[79].de),
    .d      (hw2reg.ip[79].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_79_qs)
  );

  //   F[p_80]: 16:16
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_80 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[80].de),
    .d      (hw2reg.ip[80].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_80_qs)
  );

  //   F[p_81]: 17:17
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_81 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[81].de),
    .d      (hw2reg.ip[81].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_81_qs)
  );

  //   F[p_82]: 18:18
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_82 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[82].de),
    .d      (hw2reg.ip[82].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_82_qs)
  );

  //   F[p_83]: 19:19
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_83 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[83].de),
    .d      (hw2reg.ip[83].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_83_qs)
  );

  //   F[p_84]: 20:20
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_84 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[84].de),
    .d      (hw2reg.ip[84].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_84_qs)
  );

  //   F[p_85]: 21:21
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_85 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[85].de),
    .d      (hw2reg.ip[85].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_85_qs)
  );

  //   F[p_86]: 22:22
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_86 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[86].de),
    .d      (hw2reg.ip[86].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_86_qs)
  );

  //   F[p_87]: 23:23
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ip_2_p_87 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ip[87].de),
    .d      (hw2reg.ip[87].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ip_2_p_87_qs)
  );


  // Subregister 0 of Multireg ie0
  // R[ie0_0]: V(False)
  //   F[e_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_0_qs)
  );

  //   F[e_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_1_qs)
  );

  //   F[e_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_2_qs)
  );

  //   F[e_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_3_qs)
  );

  //   F[e_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_4_qs)
  );

  //   F[e_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_5_qs)
  );

  //   F[e_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_6_qs)
  );

  //   F[e_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_7_qs)
  );

  //   F[e_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_8_qs)
  );

  //   F[e_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_9_qs)
  );

  //   F[e_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_10_qs)
  );

  //   F[e_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_11_qs)
  );

  //   F[e_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_12_qs)
  );

  //   F[e_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_13_qs)
  );

  //   F[e_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_14_qs)
  );

  //   F[e_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_15_qs)
  );

  //   F[e_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_16_qs)
  );

  //   F[e_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_17_qs)
  );

  //   F[e_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_18_qs)
  );

  //   F[e_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_19_qs)
  );

  //   F[e_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_20_qs)
  );

  //   F[e_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_21_qs)
  );

  //   F[e_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_22_qs)
  );

  //   F[e_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_23_qs)
  );

  //   F[e_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_24_qs)
  );

  //   F[e_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_25_qs)
  );

  //   F[e_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_26_qs)
  );

  //   F[e_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_27_qs)
  );

  //   F[e_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_28_qs)
  );

  //   F[e_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_29_qs)
  );

  //   F[e_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_30_qs)
  );

  //   F[e_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_0_e_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_0_we),
    .wd     (ie0_0_e_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_0_e_31_qs)
  );


  // Subregister 1 of Multireg ie0
  // R[ie0_1]: V(False)
  //   F[e_32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_32 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[32].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_32_qs)
  );

  //   F[e_33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_33 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[33].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_33_qs)
  );

  //   F[e_34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_34 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[34].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_34_qs)
  );

  //   F[e_35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_35 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[35].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_35_qs)
  );

  //   F[e_36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_36 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[36].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_36_qs)
  );

  //   F[e_37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_37 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[37].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_37_qs)
  );

  //   F[e_38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_38 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[38].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_38_qs)
  );

  //   F[e_39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_39 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[39].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_39_qs)
  );

  //   F[e_40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_40 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[40].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_40_qs)
  );

  //   F[e_41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_41 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[41].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_41_qs)
  );

  //   F[e_42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_42 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[42].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_42_qs)
  );

  //   F[e_43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_43 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[43].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_43_qs)
  );

  //   F[e_44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_44 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[44].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_44_qs)
  );

  //   F[e_45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_45 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[45].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_45_qs)
  );

  //   F[e_46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_46 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[46].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_46_qs)
  );

  //   F[e_47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_47 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[47].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_47_qs)
  );

  //   F[e_48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_48 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[48].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_48_qs)
  );

  //   F[e_49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_49 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[49].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_49_qs)
  );

  //   F[e_50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_50 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[50].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_50_qs)
  );

  //   F[e_51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_51 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[51].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_51_qs)
  );

  //   F[e_52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_52 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[52].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_52_qs)
  );

  //   F[e_53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_53 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[53].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_53_qs)
  );

  //   F[e_54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_54 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[54].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_54_qs)
  );

  //   F[e_55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_55 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[55].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_55_qs)
  );

  //   F[e_56]: 24:24
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_56 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[56].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_56_qs)
  );

  //   F[e_57]: 25:25
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_57 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[57].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_57_qs)
  );

  //   F[e_58]: 26:26
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_58 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[58].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_58_qs)
  );

  //   F[e_59]: 27:27
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_59 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[59].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_59_qs)
  );

  //   F[e_60]: 28:28
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_60 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[60].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_60_qs)
  );

  //   F[e_61]: 29:29
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_61 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[61].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_61_qs)
  );

  //   F[e_62]: 30:30
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_62 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[62].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_62_qs)
  );

  //   F[e_63]: 31:31
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_1_e_63 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_1_we),
    .wd     (ie0_1_e_63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[63].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_1_e_63_qs)
  );


  // Subregister 2 of Multireg ie0
  // R[ie0_2]: V(False)
  //   F[e_64]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_64 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[64].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_64_qs)
  );

  //   F[e_65]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_65 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[65].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_65_qs)
  );

  //   F[e_66]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_66 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[66].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_66_qs)
  );

  //   F[e_67]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_67 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[67].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_67_qs)
  );

  //   F[e_68]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_68 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[68].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_68_qs)
  );

  //   F[e_69]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_69 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[69].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_69_qs)
  );

  //   F[e_70]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_70 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[70].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_70_qs)
  );

  //   F[e_71]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_71 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[71].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_71_qs)
  );

  //   F[e_72]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_72 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[72].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_72_qs)
  );

  //   F[e_73]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_73 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[73].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_73_qs)
  );

  //   F[e_74]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_74 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[74].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_74_qs)
  );

  //   F[e_75]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_75 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[75].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_75_qs)
  );

  //   F[e_76]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_76 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[76].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_76_qs)
  );

  //   F[e_77]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_77 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[77].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_77_qs)
  );

  //   F[e_78]: 14:14
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_78 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[78].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_78_qs)
  );

  //   F[e_79]: 15:15
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_79 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[79].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_79_qs)
  );

  //   F[e_80]: 16:16
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_80 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[80].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_80_qs)
  );

  //   F[e_81]: 17:17
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_81 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[81].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_81_qs)
  );

  //   F[e_82]: 18:18
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_82 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[82].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_82_qs)
  );

  //   F[e_83]: 19:19
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_83 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_83_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[83].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_83_qs)
  );

  //   F[e_84]: 20:20
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_84 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_84_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[84].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_84_qs)
  );

  //   F[e_85]: 21:21
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_85 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_85_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[85].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_85_qs)
  );

  //   F[e_86]: 22:22
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_86 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_86_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[86].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_86_qs)
  );

  //   F[e_87]: 23:23
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ie0_2_e_87 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ie0_2_we),
    .wd     (ie0_2_e_87_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[87].q),
    .ds     (),

    // to register interface (read)
    .qs     (ie0_2_e_87_qs)
  );


  // R[threshold0]: V(False)
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_threshold0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (threshold0_we),
    .wd     (threshold0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.threshold0.q),
    .ds     (),

    // to register interface (read)
    .qs     (threshold0_qs)
  );


  // R[cc0]: V(True)
  logic cc0_qe;
  logic [0:0] cc0_flds_we;
  assign cc0_qe = &cc0_flds_we;
  prim_subreg_ext #(
    .DW    (7)
  ) u_cc0 (
    .re     (cc0_re),
    .we     (cc0_we),
    .wd     (cc0_wd),
    .d      (hw2reg.cc0.d),
    .qre    (reg2hw.cc0.re),
    .qe     (cc0_flds_we[0]),
    .q      (reg2hw.cc0.q),
    .ds     (),
    .qs     (cc0_qs)
  );
  assign reg2hw.cc0.qe = cc0_qe;


  // R[msip0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_msip0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (msip0_we),
    .wd     (msip0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.msip0.q),
    .ds     (),

    // to register interface (read)
    .qs     (msip0_qs)
  );


  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [0:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.qe = alert_test_qe;



  logic [97:0] addr_hit;
  always_comb begin
    addr_hit[ 0] = (reg_addr == RV_PLIC_PRIO_0_OFFSET);
    addr_hit[ 1] = (reg_addr == RV_PLIC_PRIO_1_OFFSET);
    addr_hit[ 2] = (reg_addr == RV_PLIC_PRIO_2_OFFSET);
    addr_hit[ 3] = (reg_addr == RV_PLIC_PRIO_3_OFFSET);
    addr_hit[ 4] = (reg_addr == RV_PLIC_PRIO_4_OFFSET);
    addr_hit[ 5] = (reg_addr == RV_PLIC_PRIO_5_OFFSET);
    addr_hit[ 6] = (reg_addr == RV_PLIC_PRIO_6_OFFSET);
    addr_hit[ 7] = (reg_addr == RV_PLIC_PRIO_7_OFFSET);
    addr_hit[ 8] = (reg_addr == RV_PLIC_PRIO_8_OFFSET);
    addr_hit[ 9] = (reg_addr == RV_PLIC_PRIO_9_OFFSET);
    addr_hit[10] = (reg_addr == RV_PLIC_PRIO_10_OFFSET);
    addr_hit[11] = (reg_addr == RV_PLIC_PRIO_11_OFFSET);
    addr_hit[12] = (reg_addr == RV_PLIC_PRIO_12_OFFSET);
    addr_hit[13] = (reg_addr == RV_PLIC_PRIO_13_OFFSET);
    addr_hit[14] = (reg_addr == RV_PLIC_PRIO_14_OFFSET);
    addr_hit[15] = (reg_addr == RV_PLIC_PRIO_15_OFFSET);
    addr_hit[16] = (reg_addr == RV_PLIC_PRIO_16_OFFSET);
    addr_hit[17] = (reg_addr == RV_PLIC_PRIO_17_OFFSET);
    addr_hit[18] = (reg_addr == RV_PLIC_PRIO_18_OFFSET);
    addr_hit[19] = (reg_addr == RV_PLIC_PRIO_19_OFFSET);
    addr_hit[20] = (reg_addr == RV_PLIC_PRIO_20_OFFSET);
    addr_hit[21] = (reg_addr == RV_PLIC_PRIO_21_OFFSET);
    addr_hit[22] = (reg_addr == RV_PLIC_PRIO_22_OFFSET);
    addr_hit[23] = (reg_addr == RV_PLIC_PRIO_23_OFFSET);
    addr_hit[24] = (reg_addr == RV_PLIC_PRIO_24_OFFSET);
    addr_hit[25] = (reg_addr == RV_PLIC_PRIO_25_OFFSET);
    addr_hit[26] = (reg_addr == RV_PLIC_PRIO_26_OFFSET);
    addr_hit[27] = (reg_addr == RV_PLIC_PRIO_27_OFFSET);
    addr_hit[28] = (reg_addr == RV_PLIC_PRIO_28_OFFSET);
    addr_hit[29] = (reg_addr == RV_PLIC_PRIO_29_OFFSET);
    addr_hit[30] = (reg_addr == RV_PLIC_PRIO_30_OFFSET);
    addr_hit[31] = (reg_addr == RV_PLIC_PRIO_31_OFFSET);
    addr_hit[32] = (reg_addr == RV_PLIC_PRIO_32_OFFSET);
    addr_hit[33] = (reg_addr == RV_PLIC_PRIO_33_OFFSET);
    addr_hit[34] = (reg_addr == RV_PLIC_PRIO_34_OFFSET);
    addr_hit[35] = (reg_addr == RV_PLIC_PRIO_35_OFFSET);
    addr_hit[36] = (reg_addr == RV_PLIC_PRIO_36_OFFSET);
    addr_hit[37] = (reg_addr == RV_PLIC_PRIO_37_OFFSET);
    addr_hit[38] = (reg_addr == RV_PLIC_PRIO_38_OFFSET);
    addr_hit[39] = (reg_addr == RV_PLIC_PRIO_39_OFFSET);
    addr_hit[40] = (reg_addr == RV_PLIC_PRIO_40_OFFSET);
    addr_hit[41] = (reg_addr == RV_PLIC_PRIO_41_OFFSET);
    addr_hit[42] = (reg_addr == RV_PLIC_PRIO_42_OFFSET);
    addr_hit[43] = (reg_addr == RV_PLIC_PRIO_43_OFFSET);
    addr_hit[44] = (reg_addr == RV_PLIC_PRIO_44_OFFSET);
    addr_hit[45] = (reg_addr == RV_PLIC_PRIO_45_OFFSET);
    addr_hit[46] = (reg_addr == RV_PLIC_PRIO_46_OFFSET);
    addr_hit[47] = (reg_addr == RV_PLIC_PRIO_47_OFFSET);
    addr_hit[48] = (reg_addr == RV_PLIC_PRIO_48_OFFSET);
    addr_hit[49] = (reg_addr == RV_PLIC_PRIO_49_OFFSET);
    addr_hit[50] = (reg_addr == RV_PLIC_PRIO_50_OFFSET);
    addr_hit[51] = (reg_addr == RV_PLIC_PRIO_51_OFFSET);
    addr_hit[52] = (reg_addr == RV_PLIC_PRIO_52_OFFSET);
    addr_hit[53] = (reg_addr == RV_PLIC_PRIO_53_OFFSET);
    addr_hit[54] = (reg_addr == RV_PLIC_PRIO_54_OFFSET);
    addr_hit[55] = (reg_addr == RV_PLIC_PRIO_55_OFFSET);
    addr_hit[56] = (reg_addr == RV_PLIC_PRIO_56_OFFSET);
    addr_hit[57] = (reg_addr == RV_PLIC_PRIO_57_OFFSET);
    addr_hit[58] = (reg_addr == RV_PLIC_PRIO_58_OFFSET);
    addr_hit[59] = (reg_addr == RV_PLIC_PRIO_59_OFFSET);
    addr_hit[60] = (reg_addr == RV_PLIC_PRIO_60_OFFSET);
    addr_hit[61] = (reg_addr == RV_PLIC_PRIO_61_OFFSET);
    addr_hit[62] = (reg_addr == RV_PLIC_PRIO_62_OFFSET);
    addr_hit[63] = (reg_addr == RV_PLIC_PRIO_63_OFFSET);
    addr_hit[64] = (reg_addr == RV_PLIC_PRIO_64_OFFSET);
    addr_hit[65] = (reg_addr == RV_PLIC_PRIO_65_OFFSET);
    addr_hit[66] = (reg_addr == RV_PLIC_PRIO_66_OFFSET);
    addr_hit[67] = (reg_addr == RV_PLIC_PRIO_67_OFFSET);
    addr_hit[68] = (reg_addr == RV_PLIC_PRIO_68_OFFSET);
    addr_hit[69] = (reg_addr == RV_PLIC_PRIO_69_OFFSET);
    addr_hit[70] = (reg_addr == RV_PLIC_PRIO_70_OFFSET);
    addr_hit[71] = (reg_addr == RV_PLIC_PRIO_71_OFFSET);
    addr_hit[72] = (reg_addr == RV_PLIC_PRIO_72_OFFSET);
    addr_hit[73] = (reg_addr == RV_PLIC_PRIO_73_OFFSET);
    addr_hit[74] = (reg_addr == RV_PLIC_PRIO_74_OFFSET);
    addr_hit[75] = (reg_addr == RV_PLIC_PRIO_75_OFFSET);
    addr_hit[76] = (reg_addr == RV_PLIC_PRIO_76_OFFSET);
    addr_hit[77] = (reg_addr == RV_PLIC_PRIO_77_OFFSET);
    addr_hit[78] = (reg_addr == RV_PLIC_PRIO_78_OFFSET);
    addr_hit[79] = (reg_addr == RV_PLIC_PRIO_79_OFFSET);
    addr_hit[80] = (reg_addr == RV_PLIC_PRIO_80_OFFSET);
    addr_hit[81] = (reg_addr == RV_PLIC_PRIO_81_OFFSET);
    addr_hit[82] = (reg_addr == RV_PLIC_PRIO_82_OFFSET);
    addr_hit[83] = (reg_addr == RV_PLIC_PRIO_83_OFFSET);
    addr_hit[84] = (reg_addr == RV_PLIC_PRIO_84_OFFSET);
    addr_hit[85] = (reg_addr == RV_PLIC_PRIO_85_OFFSET);
    addr_hit[86] = (reg_addr == RV_PLIC_PRIO_86_OFFSET);
    addr_hit[87] = (reg_addr == RV_PLIC_PRIO_87_OFFSET);
    addr_hit[88] = (reg_addr == RV_PLIC_IP_0_OFFSET);
    addr_hit[89] = (reg_addr == RV_PLIC_IP_1_OFFSET);
    addr_hit[90] = (reg_addr == RV_PLIC_IP_2_OFFSET);
    addr_hit[91] = (reg_addr == RV_PLIC_IE0_0_OFFSET);
    addr_hit[92] = (reg_addr == RV_PLIC_IE0_1_OFFSET);
    addr_hit[93] = (reg_addr == RV_PLIC_IE0_2_OFFSET);
    addr_hit[94] = (reg_addr == RV_PLIC_THRESHOLD0_OFFSET);
    addr_hit[95] = (reg_addr == RV_PLIC_CC0_OFFSET);
    addr_hit[96] = (reg_addr == RV_PLIC_MSIP0_OFFSET);
    addr_hit[97] = (reg_addr == RV_PLIC_ALERT_TEST_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(RV_PLIC_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(RV_PLIC_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(RV_PLIC_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(RV_PLIC_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(RV_PLIC_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(RV_PLIC_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(RV_PLIC_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(RV_PLIC_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(RV_PLIC_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(RV_PLIC_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(RV_PLIC_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(RV_PLIC_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(RV_PLIC_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(RV_PLIC_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(RV_PLIC_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(RV_PLIC_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(RV_PLIC_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(RV_PLIC_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(RV_PLIC_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(RV_PLIC_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(RV_PLIC_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(RV_PLIC_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(RV_PLIC_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(RV_PLIC_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(RV_PLIC_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(RV_PLIC_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(RV_PLIC_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(RV_PLIC_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(RV_PLIC_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(RV_PLIC_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(RV_PLIC_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(RV_PLIC_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(RV_PLIC_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(RV_PLIC_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(RV_PLIC_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(RV_PLIC_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(RV_PLIC_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(RV_PLIC_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(RV_PLIC_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(RV_PLIC_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(RV_PLIC_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(RV_PLIC_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(RV_PLIC_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(RV_PLIC_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(RV_PLIC_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(RV_PLIC_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(RV_PLIC_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(RV_PLIC_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(RV_PLIC_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(RV_PLIC_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(RV_PLIC_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(RV_PLIC_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(RV_PLIC_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(RV_PLIC_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(RV_PLIC_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(RV_PLIC_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(RV_PLIC_PERMIT[56] & ~reg_be))) |
               (addr_hit[57] & (|(RV_PLIC_PERMIT[57] & ~reg_be))) |
               (addr_hit[58] & (|(RV_PLIC_PERMIT[58] & ~reg_be))) |
               (addr_hit[59] & (|(RV_PLIC_PERMIT[59] & ~reg_be))) |
               (addr_hit[60] & (|(RV_PLIC_PERMIT[60] & ~reg_be))) |
               (addr_hit[61] & (|(RV_PLIC_PERMIT[61] & ~reg_be))) |
               (addr_hit[62] & (|(RV_PLIC_PERMIT[62] & ~reg_be))) |
               (addr_hit[63] & (|(RV_PLIC_PERMIT[63] & ~reg_be))) |
               (addr_hit[64] & (|(RV_PLIC_PERMIT[64] & ~reg_be))) |
               (addr_hit[65] & (|(RV_PLIC_PERMIT[65] & ~reg_be))) |
               (addr_hit[66] & (|(RV_PLIC_PERMIT[66] & ~reg_be))) |
               (addr_hit[67] & (|(RV_PLIC_PERMIT[67] & ~reg_be))) |
               (addr_hit[68] & (|(RV_PLIC_PERMIT[68] & ~reg_be))) |
               (addr_hit[69] & (|(RV_PLIC_PERMIT[69] & ~reg_be))) |
               (addr_hit[70] & (|(RV_PLIC_PERMIT[70] & ~reg_be))) |
               (addr_hit[71] & (|(RV_PLIC_PERMIT[71] & ~reg_be))) |
               (addr_hit[72] & (|(RV_PLIC_PERMIT[72] & ~reg_be))) |
               (addr_hit[73] & (|(RV_PLIC_PERMIT[73] & ~reg_be))) |
               (addr_hit[74] & (|(RV_PLIC_PERMIT[74] & ~reg_be))) |
               (addr_hit[75] & (|(RV_PLIC_PERMIT[75] & ~reg_be))) |
               (addr_hit[76] & (|(RV_PLIC_PERMIT[76] & ~reg_be))) |
               (addr_hit[77] & (|(RV_PLIC_PERMIT[77] & ~reg_be))) |
               (addr_hit[78] & (|(RV_PLIC_PERMIT[78] & ~reg_be))) |
               (addr_hit[79] & (|(RV_PLIC_PERMIT[79] & ~reg_be))) |
               (addr_hit[80] & (|(RV_PLIC_PERMIT[80] & ~reg_be))) |
               (addr_hit[81] & (|(RV_PLIC_PERMIT[81] & ~reg_be))) |
               (addr_hit[82] & (|(RV_PLIC_PERMIT[82] & ~reg_be))) |
               (addr_hit[83] & (|(RV_PLIC_PERMIT[83] & ~reg_be))) |
               (addr_hit[84] & (|(RV_PLIC_PERMIT[84] & ~reg_be))) |
               (addr_hit[85] & (|(RV_PLIC_PERMIT[85] & ~reg_be))) |
               (addr_hit[86] & (|(RV_PLIC_PERMIT[86] & ~reg_be))) |
               (addr_hit[87] & (|(RV_PLIC_PERMIT[87] & ~reg_be))) |
               (addr_hit[88] & (|(RV_PLIC_PERMIT[88] & ~reg_be))) |
               (addr_hit[89] & (|(RV_PLIC_PERMIT[89] & ~reg_be))) |
               (addr_hit[90] & (|(RV_PLIC_PERMIT[90] & ~reg_be))) |
               (addr_hit[91] & (|(RV_PLIC_PERMIT[91] & ~reg_be))) |
               (addr_hit[92] & (|(RV_PLIC_PERMIT[92] & ~reg_be))) |
               (addr_hit[93] & (|(RV_PLIC_PERMIT[93] & ~reg_be))) |
               (addr_hit[94] & (|(RV_PLIC_PERMIT[94] & ~reg_be))) |
               (addr_hit[95] & (|(RV_PLIC_PERMIT[95] & ~reg_be))) |
               (addr_hit[96] & (|(RV_PLIC_PERMIT[96] & ~reg_be))) |
               (addr_hit[97] & (|(RV_PLIC_PERMIT[97] & ~reg_be)))));
  end

  // Generate write-enables
  assign prio_0_we = addr_hit[0] & reg_we & !reg_error;

  assign prio_0_wd = reg_wdata[1:0];
  assign prio_1_we = addr_hit[1] & reg_we & !reg_error;

  assign prio_1_wd = reg_wdata[1:0];
  assign prio_2_we = addr_hit[2] & reg_we & !reg_error;

  assign prio_2_wd = reg_wdata[1:0];
  assign prio_3_we = addr_hit[3] & reg_we & !reg_error;

  assign prio_3_wd = reg_wdata[1:0];
  assign prio_4_we = addr_hit[4] & reg_we & !reg_error;

  assign prio_4_wd = reg_wdata[1:0];
  assign prio_5_we = addr_hit[5] & reg_we & !reg_error;

  assign prio_5_wd = reg_wdata[1:0];
  assign prio_6_we = addr_hit[6] & reg_we & !reg_error;

  assign prio_6_wd = reg_wdata[1:0];
  assign prio_7_we = addr_hit[7] & reg_we & !reg_error;

  assign prio_7_wd = reg_wdata[1:0];
  assign prio_8_we = addr_hit[8] & reg_we & !reg_error;

  assign prio_8_wd = reg_wdata[1:0];
  assign prio_9_we = addr_hit[9] & reg_we & !reg_error;

  assign prio_9_wd = reg_wdata[1:0];
  assign prio_10_we = addr_hit[10] & reg_we & !reg_error;

  assign prio_10_wd = reg_wdata[1:0];
  assign prio_11_we = addr_hit[11] & reg_we & !reg_error;

  assign prio_11_wd = reg_wdata[1:0];
  assign prio_12_we = addr_hit[12] & reg_we & !reg_error;

  assign prio_12_wd = reg_wdata[1:0];
  assign prio_13_we = addr_hit[13] & reg_we & !reg_error;

  assign prio_13_wd = reg_wdata[1:0];
  assign prio_14_we = addr_hit[14] & reg_we & !reg_error;

  assign prio_14_wd = reg_wdata[1:0];
  assign prio_15_we = addr_hit[15] & reg_we & !reg_error;

  assign prio_15_wd = reg_wdata[1:0];
  assign prio_16_we = addr_hit[16] & reg_we & !reg_error;

  assign prio_16_wd = reg_wdata[1:0];
  assign prio_17_we = addr_hit[17] & reg_we & !reg_error;

  assign prio_17_wd = reg_wdata[1:0];
  assign prio_18_we = addr_hit[18] & reg_we & !reg_error;

  assign prio_18_wd = reg_wdata[1:0];
  assign prio_19_we = addr_hit[19] & reg_we & !reg_error;

  assign prio_19_wd = reg_wdata[1:0];
  assign prio_20_we = addr_hit[20] & reg_we & !reg_error;

  assign prio_20_wd = reg_wdata[1:0];
  assign prio_21_we = addr_hit[21] & reg_we & !reg_error;

  assign prio_21_wd = reg_wdata[1:0];
  assign prio_22_we = addr_hit[22] & reg_we & !reg_error;

  assign prio_22_wd = reg_wdata[1:0];
  assign prio_23_we = addr_hit[23] & reg_we & !reg_error;

  assign prio_23_wd = reg_wdata[1:0];
  assign prio_24_we = addr_hit[24] & reg_we & !reg_error;

  assign prio_24_wd = reg_wdata[1:0];
  assign prio_25_we = addr_hit[25] & reg_we & !reg_error;

  assign prio_25_wd = reg_wdata[1:0];
  assign prio_26_we = addr_hit[26] & reg_we & !reg_error;

  assign prio_26_wd = reg_wdata[1:0];
  assign prio_27_we = addr_hit[27] & reg_we & !reg_error;

  assign prio_27_wd = reg_wdata[1:0];
  assign prio_28_we = addr_hit[28] & reg_we & !reg_error;

  assign prio_28_wd = reg_wdata[1:0];
  assign prio_29_we = addr_hit[29] & reg_we & !reg_error;

  assign prio_29_wd = reg_wdata[1:0];
  assign prio_30_we = addr_hit[30] & reg_we & !reg_error;

  assign prio_30_wd = reg_wdata[1:0];
  assign prio_31_we = addr_hit[31] & reg_we & !reg_error;

  assign prio_31_wd = reg_wdata[1:0];
  assign prio_32_we = addr_hit[32] & reg_we & !reg_error;

  assign prio_32_wd = reg_wdata[1:0];
  assign prio_33_we = addr_hit[33] & reg_we & !reg_error;

  assign prio_33_wd = reg_wdata[1:0];
  assign prio_34_we = addr_hit[34] & reg_we & !reg_error;

  assign prio_34_wd = reg_wdata[1:0];
  assign prio_35_we = addr_hit[35] & reg_we & !reg_error;

  assign prio_35_wd = reg_wdata[1:0];
  assign prio_36_we = addr_hit[36] & reg_we & !reg_error;

  assign prio_36_wd = reg_wdata[1:0];
  assign prio_37_we = addr_hit[37] & reg_we & !reg_error;

  assign prio_37_wd = reg_wdata[1:0];
  assign prio_38_we = addr_hit[38] & reg_we & !reg_error;

  assign prio_38_wd = reg_wdata[1:0];
  assign prio_39_we = addr_hit[39] & reg_we & !reg_error;

  assign prio_39_wd = reg_wdata[1:0];
  assign prio_40_we = addr_hit[40] & reg_we & !reg_error;

  assign prio_40_wd = reg_wdata[1:0];
  assign prio_41_we = addr_hit[41] & reg_we & !reg_error;

  assign prio_41_wd = reg_wdata[1:0];
  assign prio_42_we = addr_hit[42] & reg_we & !reg_error;

  assign prio_42_wd = reg_wdata[1:0];
  assign prio_43_we = addr_hit[43] & reg_we & !reg_error;

  assign prio_43_wd = reg_wdata[1:0];
  assign prio_44_we = addr_hit[44] & reg_we & !reg_error;

  assign prio_44_wd = reg_wdata[1:0];
  assign prio_45_we = addr_hit[45] & reg_we & !reg_error;

  assign prio_45_wd = reg_wdata[1:0];
  assign prio_46_we = addr_hit[46] & reg_we & !reg_error;

  assign prio_46_wd = reg_wdata[1:0];
  assign prio_47_we = addr_hit[47] & reg_we & !reg_error;

  assign prio_47_wd = reg_wdata[1:0];
  assign prio_48_we = addr_hit[48] & reg_we & !reg_error;

  assign prio_48_wd = reg_wdata[1:0];
  assign prio_49_we = addr_hit[49] & reg_we & !reg_error;

  assign prio_49_wd = reg_wdata[1:0];
  assign prio_50_we = addr_hit[50] & reg_we & !reg_error;

  assign prio_50_wd = reg_wdata[1:0];
  assign prio_51_we = addr_hit[51] & reg_we & !reg_error;

  assign prio_51_wd = reg_wdata[1:0];
  assign prio_52_we = addr_hit[52] & reg_we & !reg_error;

  assign prio_52_wd = reg_wdata[1:0];
  assign prio_53_we = addr_hit[53] & reg_we & !reg_error;

  assign prio_53_wd = reg_wdata[1:0];
  assign prio_54_we = addr_hit[54] & reg_we & !reg_error;

  assign prio_54_wd = reg_wdata[1:0];
  assign prio_55_we = addr_hit[55] & reg_we & !reg_error;

  assign prio_55_wd = reg_wdata[1:0];
  assign prio_56_we = addr_hit[56] & reg_we & !reg_error;

  assign prio_56_wd = reg_wdata[1:0];
  assign prio_57_we = addr_hit[57] & reg_we & !reg_error;

  assign prio_57_wd = reg_wdata[1:0];
  assign prio_58_we = addr_hit[58] & reg_we & !reg_error;

  assign prio_58_wd = reg_wdata[1:0];
  assign prio_59_we = addr_hit[59] & reg_we & !reg_error;

  assign prio_59_wd = reg_wdata[1:0];
  assign prio_60_we = addr_hit[60] & reg_we & !reg_error;

  assign prio_60_wd = reg_wdata[1:0];
  assign prio_61_we = addr_hit[61] & reg_we & !reg_error;

  assign prio_61_wd = reg_wdata[1:0];
  assign prio_62_we = addr_hit[62] & reg_we & !reg_error;

  assign prio_62_wd = reg_wdata[1:0];
  assign prio_63_we = addr_hit[63] & reg_we & !reg_error;

  assign prio_63_wd = reg_wdata[1:0];
  assign prio_64_we = addr_hit[64] & reg_we & !reg_error;

  assign prio_64_wd = reg_wdata[1:0];
  assign prio_65_we = addr_hit[65] & reg_we & !reg_error;

  assign prio_65_wd = reg_wdata[1:0];
  assign prio_66_we = addr_hit[66] & reg_we & !reg_error;

  assign prio_66_wd = reg_wdata[1:0];
  assign prio_67_we = addr_hit[67] & reg_we & !reg_error;

  assign prio_67_wd = reg_wdata[1:0];
  assign prio_68_we = addr_hit[68] & reg_we & !reg_error;

  assign prio_68_wd = reg_wdata[1:0];
  assign prio_69_we = addr_hit[69] & reg_we & !reg_error;

  assign prio_69_wd = reg_wdata[1:0];
  assign prio_70_we = addr_hit[70] & reg_we & !reg_error;

  assign prio_70_wd = reg_wdata[1:0];
  assign prio_71_we = addr_hit[71] & reg_we & !reg_error;

  assign prio_71_wd = reg_wdata[1:0];
  assign prio_72_we = addr_hit[72] & reg_we & !reg_error;

  assign prio_72_wd = reg_wdata[1:0];
  assign prio_73_we = addr_hit[73] & reg_we & !reg_error;

  assign prio_73_wd = reg_wdata[1:0];
  assign prio_74_we = addr_hit[74] & reg_we & !reg_error;

  assign prio_74_wd = reg_wdata[1:0];
  assign prio_75_we = addr_hit[75] & reg_we & !reg_error;

  assign prio_75_wd = reg_wdata[1:0];
  assign prio_76_we = addr_hit[76] & reg_we & !reg_error;

  assign prio_76_wd = reg_wdata[1:0];
  assign prio_77_we = addr_hit[77] & reg_we & !reg_error;

  assign prio_77_wd = reg_wdata[1:0];
  assign prio_78_we = addr_hit[78] & reg_we & !reg_error;

  assign prio_78_wd = reg_wdata[1:0];
  assign prio_79_we = addr_hit[79] & reg_we & !reg_error;

  assign prio_79_wd = reg_wdata[1:0];
  assign prio_80_we = addr_hit[80] & reg_we & !reg_error;

  assign prio_80_wd = reg_wdata[1:0];
  assign prio_81_we = addr_hit[81] & reg_we & !reg_error;

  assign prio_81_wd = reg_wdata[1:0];
  assign prio_82_we = addr_hit[82] & reg_we & !reg_error;

  assign prio_82_wd = reg_wdata[1:0];
  assign prio_83_we = addr_hit[83] & reg_we & !reg_error;

  assign prio_83_wd = reg_wdata[1:0];
  assign prio_84_we = addr_hit[84] & reg_we & !reg_error;

  assign prio_84_wd = reg_wdata[1:0];
  assign prio_85_we = addr_hit[85] & reg_we & !reg_error;

  assign prio_85_wd = reg_wdata[1:0];
  assign prio_86_we = addr_hit[86] & reg_we & !reg_error;

  assign prio_86_wd = reg_wdata[1:0];
  assign prio_87_we = addr_hit[87] & reg_we & !reg_error;

  assign prio_87_wd = reg_wdata[1:0];
  assign ie0_0_we = addr_hit[91] & reg_we & !reg_error;

  assign ie0_0_e_0_wd = reg_wdata[0];

  assign ie0_0_e_1_wd = reg_wdata[1];

  assign ie0_0_e_2_wd = reg_wdata[2];

  assign ie0_0_e_3_wd = reg_wdata[3];

  assign ie0_0_e_4_wd = reg_wdata[4];

  assign ie0_0_e_5_wd = reg_wdata[5];

  assign ie0_0_e_6_wd = reg_wdata[6];

  assign ie0_0_e_7_wd = reg_wdata[7];

  assign ie0_0_e_8_wd = reg_wdata[8];

  assign ie0_0_e_9_wd = reg_wdata[9];

  assign ie0_0_e_10_wd = reg_wdata[10];

  assign ie0_0_e_11_wd = reg_wdata[11];

  assign ie0_0_e_12_wd = reg_wdata[12];

  assign ie0_0_e_13_wd = reg_wdata[13];

  assign ie0_0_e_14_wd = reg_wdata[14];

  assign ie0_0_e_15_wd = reg_wdata[15];

  assign ie0_0_e_16_wd = reg_wdata[16];

  assign ie0_0_e_17_wd = reg_wdata[17];

  assign ie0_0_e_18_wd = reg_wdata[18];

  assign ie0_0_e_19_wd = reg_wdata[19];

  assign ie0_0_e_20_wd = reg_wdata[20];

  assign ie0_0_e_21_wd = reg_wdata[21];

  assign ie0_0_e_22_wd = reg_wdata[22];

  assign ie0_0_e_23_wd = reg_wdata[23];

  assign ie0_0_e_24_wd = reg_wdata[24];

  assign ie0_0_e_25_wd = reg_wdata[25];

  assign ie0_0_e_26_wd = reg_wdata[26];

  assign ie0_0_e_27_wd = reg_wdata[27];

  assign ie0_0_e_28_wd = reg_wdata[28];

  assign ie0_0_e_29_wd = reg_wdata[29];

  assign ie0_0_e_30_wd = reg_wdata[30];

  assign ie0_0_e_31_wd = reg_wdata[31];
  assign ie0_1_we = addr_hit[92] & reg_we & !reg_error;

  assign ie0_1_e_32_wd = reg_wdata[0];

  assign ie0_1_e_33_wd = reg_wdata[1];

  assign ie0_1_e_34_wd = reg_wdata[2];

  assign ie0_1_e_35_wd = reg_wdata[3];

  assign ie0_1_e_36_wd = reg_wdata[4];

  assign ie0_1_e_37_wd = reg_wdata[5];

  assign ie0_1_e_38_wd = reg_wdata[6];

  assign ie0_1_e_39_wd = reg_wdata[7];

  assign ie0_1_e_40_wd = reg_wdata[8];

  assign ie0_1_e_41_wd = reg_wdata[9];

  assign ie0_1_e_42_wd = reg_wdata[10];

  assign ie0_1_e_43_wd = reg_wdata[11];

  assign ie0_1_e_44_wd = reg_wdata[12];

  assign ie0_1_e_45_wd = reg_wdata[13];

  assign ie0_1_e_46_wd = reg_wdata[14];

  assign ie0_1_e_47_wd = reg_wdata[15];

  assign ie0_1_e_48_wd = reg_wdata[16];

  assign ie0_1_e_49_wd = reg_wdata[17];

  assign ie0_1_e_50_wd = reg_wdata[18];

  assign ie0_1_e_51_wd = reg_wdata[19];

  assign ie0_1_e_52_wd = reg_wdata[20];

  assign ie0_1_e_53_wd = reg_wdata[21];

  assign ie0_1_e_54_wd = reg_wdata[22];

  assign ie0_1_e_55_wd = reg_wdata[23];

  assign ie0_1_e_56_wd = reg_wdata[24];

  assign ie0_1_e_57_wd = reg_wdata[25];

  assign ie0_1_e_58_wd = reg_wdata[26];

  assign ie0_1_e_59_wd = reg_wdata[27];

  assign ie0_1_e_60_wd = reg_wdata[28];

  assign ie0_1_e_61_wd = reg_wdata[29];

  assign ie0_1_e_62_wd = reg_wdata[30];

  assign ie0_1_e_63_wd = reg_wdata[31];
  assign ie0_2_we = addr_hit[93] & reg_we & !reg_error;

  assign ie0_2_e_64_wd = reg_wdata[0];

  assign ie0_2_e_65_wd = reg_wdata[1];

  assign ie0_2_e_66_wd = reg_wdata[2];

  assign ie0_2_e_67_wd = reg_wdata[3];

  assign ie0_2_e_68_wd = reg_wdata[4];

  assign ie0_2_e_69_wd = reg_wdata[5];

  assign ie0_2_e_70_wd = reg_wdata[6];

  assign ie0_2_e_71_wd = reg_wdata[7];

  assign ie0_2_e_72_wd = reg_wdata[8];

  assign ie0_2_e_73_wd = reg_wdata[9];

  assign ie0_2_e_74_wd = reg_wdata[10];

  assign ie0_2_e_75_wd = reg_wdata[11];

  assign ie0_2_e_76_wd = reg_wdata[12];

  assign ie0_2_e_77_wd = reg_wdata[13];

  assign ie0_2_e_78_wd = reg_wdata[14];

  assign ie0_2_e_79_wd = reg_wdata[15];

  assign ie0_2_e_80_wd = reg_wdata[16];

  assign ie0_2_e_81_wd = reg_wdata[17];

  assign ie0_2_e_82_wd = reg_wdata[18];

  assign ie0_2_e_83_wd = reg_wdata[19];

  assign ie0_2_e_84_wd = reg_wdata[20];

  assign ie0_2_e_85_wd = reg_wdata[21];

  assign ie0_2_e_86_wd = reg_wdata[22];

  assign ie0_2_e_87_wd = reg_wdata[23];
  assign threshold0_we = addr_hit[94] & reg_we & !reg_error;

  assign threshold0_wd = reg_wdata[1:0];
  assign cc0_re = addr_hit[95] & reg_re & !reg_error;
  assign cc0_we = addr_hit[95] & reg_we & !reg_error;

  assign cc0_wd = reg_wdata[6:0];
  assign msip0_we = addr_hit[96] & reg_we & !reg_error;

  assign msip0_wd = reg_wdata[0];
  assign alert_test_we = addr_hit[97] & reg_we & !reg_error;

  assign alert_test_wd = reg_wdata[0];

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check[0] = prio_0_we;
    reg_we_check[1] = prio_1_we;
    reg_we_check[2] = prio_2_we;
    reg_we_check[3] = prio_3_we;
    reg_we_check[4] = prio_4_we;
    reg_we_check[5] = prio_5_we;
    reg_we_check[6] = prio_6_we;
    reg_we_check[7] = prio_7_we;
    reg_we_check[8] = prio_8_we;
    reg_we_check[9] = prio_9_we;
    reg_we_check[10] = prio_10_we;
    reg_we_check[11] = prio_11_we;
    reg_we_check[12] = prio_12_we;
    reg_we_check[13] = prio_13_we;
    reg_we_check[14] = prio_14_we;
    reg_we_check[15] = prio_15_we;
    reg_we_check[16] = prio_16_we;
    reg_we_check[17] = prio_17_we;
    reg_we_check[18] = prio_18_we;
    reg_we_check[19] = prio_19_we;
    reg_we_check[20] = prio_20_we;
    reg_we_check[21] = prio_21_we;
    reg_we_check[22] = prio_22_we;
    reg_we_check[23] = prio_23_we;
    reg_we_check[24] = prio_24_we;
    reg_we_check[25] = prio_25_we;
    reg_we_check[26] = prio_26_we;
    reg_we_check[27] = prio_27_we;
    reg_we_check[28] = prio_28_we;
    reg_we_check[29] = prio_29_we;
    reg_we_check[30] = prio_30_we;
    reg_we_check[31] = prio_31_we;
    reg_we_check[32] = prio_32_we;
    reg_we_check[33] = prio_33_we;
    reg_we_check[34] = prio_34_we;
    reg_we_check[35] = prio_35_we;
    reg_we_check[36] = prio_36_we;
    reg_we_check[37] = prio_37_we;
    reg_we_check[38] = prio_38_we;
    reg_we_check[39] = prio_39_we;
    reg_we_check[40] = prio_40_we;
    reg_we_check[41] = prio_41_we;
    reg_we_check[42] = prio_42_we;
    reg_we_check[43] = prio_43_we;
    reg_we_check[44] = prio_44_we;
    reg_we_check[45] = prio_45_we;
    reg_we_check[46] = prio_46_we;
    reg_we_check[47] = prio_47_we;
    reg_we_check[48] = prio_48_we;
    reg_we_check[49] = prio_49_we;
    reg_we_check[50] = prio_50_we;
    reg_we_check[51] = prio_51_we;
    reg_we_check[52] = prio_52_we;
    reg_we_check[53] = prio_53_we;
    reg_we_check[54] = prio_54_we;
    reg_we_check[55] = prio_55_we;
    reg_we_check[56] = prio_56_we;
    reg_we_check[57] = prio_57_we;
    reg_we_check[58] = prio_58_we;
    reg_we_check[59] = prio_59_we;
    reg_we_check[60] = prio_60_we;
    reg_we_check[61] = prio_61_we;
    reg_we_check[62] = prio_62_we;
    reg_we_check[63] = prio_63_we;
    reg_we_check[64] = prio_64_we;
    reg_we_check[65] = prio_65_we;
    reg_we_check[66] = prio_66_we;
    reg_we_check[67] = prio_67_we;
    reg_we_check[68] = prio_68_we;
    reg_we_check[69] = prio_69_we;
    reg_we_check[70] = prio_70_we;
    reg_we_check[71] = prio_71_we;
    reg_we_check[72] = prio_72_we;
    reg_we_check[73] = prio_73_we;
    reg_we_check[74] = prio_74_we;
    reg_we_check[75] = prio_75_we;
    reg_we_check[76] = prio_76_we;
    reg_we_check[77] = prio_77_we;
    reg_we_check[78] = prio_78_we;
    reg_we_check[79] = prio_79_we;
    reg_we_check[80] = prio_80_we;
    reg_we_check[81] = prio_81_we;
    reg_we_check[82] = prio_82_we;
    reg_we_check[83] = prio_83_we;
    reg_we_check[84] = prio_84_we;
    reg_we_check[85] = prio_85_we;
    reg_we_check[86] = prio_86_we;
    reg_we_check[87] = prio_87_we;
    reg_we_check[88] = 1'b0;
    reg_we_check[89] = 1'b0;
    reg_we_check[90] = 1'b0;
    reg_we_check[91] = ie0_0_we;
    reg_we_check[92] = ie0_1_we;
    reg_we_check[93] = ie0_2_we;
    reg_we_check[94] = threshold0_we;
    reg_we_check[95] = cc0_we;
    reg_we_check[96] = msip0_we;
    reg_we_check[97] = alert_test_we;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[1:0] = prio_0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[1:0] = prio_1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[1:0] = prio_2_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[1:0] = prio_3_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[1:0] = prio_4_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[1:0] = prio_5_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[1:0] = prio_6_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[1:0] = prio_7_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[1:0] = prio_8_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[1:0] = prio_9_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[1:0] = prio_10_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[1:0] = prio_11_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[1:0] = prio_12_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[1:0] = prio_13_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[1:0] = prio_14_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[1:0] = prio_15_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[1:0] = prio_16_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[1:0] = prio_17_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[1:0] = prio_18_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[1:0] = prio_19_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[1:0] = prio_20_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[1:0] = prio_21_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[1:0] = prio_22_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[1:0] = prio_23_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[1:0] = prio_24_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[1:0] = prio_25_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[1:0] = prio_26_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[1:0] = prio_27_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[1:0] = prio_28_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[1:0] = prio_29_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[1:0] = prio_30_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[1:0] = prio_31_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[1:0] = prio_32_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[1:0] = prio_33_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[1:0] = prio_34_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[1:0] = prio_35_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[1:0] = prio_36_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[1:0] = prio_37_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[1:0] = prio_38_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[1:0] = prio_39_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[1:0] = prio_40_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[1:0] = prio_41_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[1:0] = prio_42_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[1:0] = prio_43_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[1:0] = prio_44_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[1:0] = prio_45_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[1:0] = prio_46_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[1:0] = prio_47_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[1:0] = prio_48_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[1:0] = prio_49_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[1:0] = prio_50_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[1:0] = prio_51_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[1:0] = prio_52_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[1:0] = prio_53_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[1:0] = prio_54_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[1:0] = prio_55_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[1:0] = prio_56_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[1:0] = prio_57_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[1:0] = prio_58_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[1:0] = prio_59_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[1:0] = prio_60_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[1:0] = prio_61_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[1:0] = prio_62_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[1:0] = prio_63_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[1:0] = prio_64_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[1:0] = prio_65_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[1:0] = prio_66_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[1:0] = prio_67_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[1:0] = prio_68_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[1:0] = prio_69_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[1:0] = prio_70_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[1:0] = prio_71_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[1:0] = prio_72_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[1:0] = prio_73_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[1:0] = prio_74_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[1:0] = prio_75_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[1:0] = prio_76_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[1:0] = prio_77_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[1:0] = prio_78_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[1:0] = prio_79_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[1:0] = prio_80_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[1:0] = prio_81_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[1:0] = prio_82_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[1:0] = prio_83_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[1:0] = prio_84_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[1:0] = prio_85_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[1:0] = prio_86_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[1:0] = prio_87_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[0] = ip_0_p_0_qs;
        reg_rdata_next[1] = ip_0_p_1_qs;
        reg_rdata_next[2] = ip_0_p_2_qs;
        reg_rdata_next[3] = ip_0_p_3_qs;
        reg_rdata_next[4] = ip_0_p_4_qs;
        reg_rdata_next[5] = ip_0_p_5_qs;
        reg_rdata_next[6] = ip_0_p_6_qs;
        reg_rdata_next[7] = ip_0_p_7_qs;
        reg_rdata_next[8] = ip_0_p_8_qs;
        reg_rdata_next[9] = ip_0_p_9_qs;
        reg_rdata_next[10] = ip_0_p_10_qs;
        reg_rdata_next[11] = ip_0_p_11_qs;
        reg_rdata_next[12] = ip_0_p_12_qs;
        reg_rdata_next[13] = ip_0_p_13_qs;
        reg_rdata_next[14] = ip_0_p_14_qs;
        reg_rdata_next[15] = ip_0_p_15_qs;
        reg_rdata_next[16] = ip_0_p_16_qs;
        reg_rdata_next[17] = ip_0_p_17_qs;
        reg_rdata_next[18] = ip_0_p_18_qs;
        reg_rdata_next[19] = ip_0_p_19_qs;
        reg_rdata_next[20] = ip_0_p_20_qs;
        reg_rdata_next[21] = ip_0_p_21_qs;
        reg_rdata_next[22] = ip_0_p_22_qs;
        reg_rdata_next[23] = ip_0_p_23_qs;
        reg_rdata_next[24] = ip_0_p_24_qs;
        reg_rdata_next[25] = ip_0_p_25_qs;
        reg_rdata_next[26] = ip_0_p_26_qs;
        reg_rdata_next[27] = ip_0_p_27_qs;
        reg_rdata_next[28] = ip_0_p_28_qs;
        reg_rdata_next[29] = ip_0_p_29_qs;
        reg_rdata_next[30] = ip_0_p_30_qs;
        reg_rdata_next[31] = ip_0_p_31_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[0] = ip_1_p_32_qs;
        reg_rdata_next[1] = ip_1_p_33_qs;
        reg_rdata_next[2] = ip_1_p_34_qs;
        reg_rdata_next[3] = ip_1_p_35_qs;
        reg_rdata_next[4] = ip_1_p_36_qs;
        reg_rdata_next[5] = ip_1_p_37_qs;
        reg_rdata_next[6] = ip_1_p_38_qs;
        reg_rdata_next[7] = ip_1_p_39_qs;
        reg_rdata_next[8] = ip_1_p_40_qs;
        reg_rdata_next[9] = ip_1_p_41_qs;
        reg_rdata_next[10] = ip_1_p_42_qs;
        reg_rdata_next[11] = ip_1_p_43_qs;
        reg_rdata_next[12] = ip_1_p_44_qs;
        reg_rdata_next[13] = ip_1_p_45_qs;
        reg_rdata_next[14] = ip_1_p_46_qs;
        reg_rdata_next[15] = ip_1_p_47_qs;
        reg_rdata_next[16] = ip_1_p_48_qs;
        reg_rdata_next[17] = ip_1_p_49_qs;
        reg_rdata_next[18] = ip_1_p_50_qs;
        reg_rdata_next[19] = ip_1_p_51_qs;
        reg_rdata_next[20] = ip_1_p_52_qs;
        reg_rdata_next[21] = ip_1_p_53_qs;
        reg_rdata_next[22] = ip_1_p_54_qs;
        reg_rdata_next[23] = ip_1_p_55_qs;
        reg_rdata_next[24] = ip_1_p_56_qs;
        reg_rdata_next[25] = ip_1_p_57_qs;
        reg_rdata_next[26] = ip_1_p_58_qs;
        reg_rdata_next[27] = ip_1_p_59_qs;
        reg_rdata_next[28] = ip_1_p_60_qs;
        reg_rdata_next[29] = ip_1_p_61_qs;
        reg_rdata_next[30] = ip_1_p_62_qs;
        reg_rdata_next[31] = ip_1_p_63_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[0] = ip_2_p_64_qs;
        reg_rdata_next[1] = ip_2_p_65_qs;
        reg_rdata_next[2] = ip_2_p_66_qs;
        reg_rdata_next[3] = ip_2_p_67_qs;
        reg_rdata_next[4] = ip_2_p_68_qs;
        reg_rdata_next[5] = ip_2_p_69_qs;
        reg_rdata_next[6] = ip_2_p_70_qs;
        reg_rdata_next[7] = ip_2_p_71_qs;
        reg_rdata_next[8] = ip_2_p_72_qs;
        reg_rdata_next[9] = ip_2_p_73_qs;
        reg_rdata_next[10] = ip_2_p_74_qs;
        reg_rdata_next[11] = ip_2_p_75_qs;
        reg_rdata_next[12] = ip_2_p_76_qs;
        reg_rdata_next[13] = ip_2_p_77_qs;
        reg_rdata_next[14] = ip_2_p_78_qs;
        reg_rdata_next[15] = ip_2_p_79_qs;
        reg_rdata_next[16] = ip_2_p_80_qs;
        reg_rdata_next[17] = ip_2_p_81_qs;
        reg_rdata_next[18] = ip_2_p_82_qs;
        reg_rdata_next[19] = ip_2_p_83_qs;
        reg_rdata_next[20] = ip_2_p_84_qs;
        reg_rdata_next[21] = ip_2_p_85_qs;
        reg_rdata_next[22] = ip_2_p_86_qs;
        reg_rdata_next[23] = ip_2_p_87_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[0] = ie0_0_e_0_qs;
        reg_rdata_next[1] = ie0_0_e_1_qs;
        reg_rdata_next[2] = ie0_0_e_2_qs;
        reg_rdata_next[3] = ie0_0_e_3_qs;
        reg_rdata_next[4] = ie0_0_e_4_qs;
        reg_rdata_next[5] = ie0_0_e_5_qs;
        reg_rdata_next[6] = ie0_0_e_6_qs;
        reg_rdata_next[7] = ie0_0_e_7_qs;
        reg_rdata_next[8] = ie0_0_e_8_qs;
        reg_rdata_next[9] = ie0_0_e_9_qs;
        reg_rdata_next[10] = ie0_0_e_10_qs;
        reg_rdata_next[11] = ie0_0_e_11_qs;
        reg_rdata_next[12] = ie0_0_e_12_qs;
        reg_rdata_next[13] = ie0_0_e_13_qs;
        reg_rdata_next[14] = ie0_0_e_14_qs;
        reg_rdata_next[15] = ie0_0_e_15_qs;
        reg_rdata_next[16] = ie0_0_e_16_qs;
        reg_rdata_next[17] = ie0_0_e_17_qs;
        reg_rdata_next[18] = ie0_0_e_18_qs;
        reg_rdata_next[19] = ie0_0_e_19_qs;
        reg_rdata_next[20] = ie0_0_e_20_qs;
        reg_rdata_next[21] = ie0_0_e_21_qs;
        reg_rdata_next[22] = ie0_0_e_22_qs;
        reg_rdata_next[23] = ie0_0_e_23_qs;
        reg_rdata_next[24] = ie0_0_e_24_qs;
        reg_rdata_next[25] = ie0_0_e_25_qs;
        reg_rdata_next[26] = ie0_0_e_26_qs;
        reg_rdata_next[27] = ie0_0_e_27_qs;
        reg_rdata_next[28] = ie0_0_e_28_qs;
        reg_rdata_next[29] = ie0_0_e_29_qs;
        reg_rdata_next[30] = ie0_0_e_30_qs;
        reg_rdata_next[31] = ie0_0_e_31_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[0] = ie0_1_e_32_qs;
        reg_rdata_next[1] = ie0_1_e_33_qs;
        reg_rdata_next[2] = ie0_1_e_34_qs;
        reg_rdata_next[3] = ie0_1_e_35_qs;
        reg_rdata_next[4] = ie0_1_e_36_qs;
        reg_rdata_next[5] = ie0_1_e_37_qs;
        reg_rdata_next[6] = ie0_1_e_38_qs;
        reg_rdata_next[7] = ie0_1_e_39_qs;
        reg_rdata_next[8] = ie0_1_e_40_qs;
        reg_rdata_next[9] = ie0_1_e_41_qs;
        reg_rdata_next[10] = ie0_1_e_42_qs;
        reg_rdata_next[11] = ie0_1_e_43_qs;
        reg_rdata_next[12] = ie0_1_e_44_qs;
        reg_rdata_next[13] = ie0_1_e_45_qs;
        reg_rdata_next[14] = ie0_1_e_46_qs;
        reg_rdata_next[15] = ie0_1_e_47_qs;
        reg_rdata_next[16] = ie0_1_e_48_qs;
        reg_rdata_next[17] = ie0_1_e_49_qs;
        reg_rdata_next[18] = ie0_1_e_50_qs;
        reg_rdata_next[19] = ie0_1_e_51_qs;
        reg_rdata_next[20] = ie0_1_e_52_qs;
        reg_rdata_next[21] = ie0_1_e_53_qs;
        reg_rdata_next[22] = ie0_1_e_54_qs;
        reg_rdata_next[23] = ie0_1_e_55_qs;
        reg_rdata_next[24] = ie0_1_e_56_qs;
        reg_rdata_next[25] = ie0_1_e_57_qs;
        reg_rdata_next[26] = ie0_1_e_58_qs;
        reg_rdata_next[27] = ie0_1_e_59_qs;
        reg_rdata_next[28] = ie0_1_e_60_qs;
        reg_rdata_next[29] = ie0_1_e_61_qs;
        reg_rdata_next[30] = ie0_1_e_62_qs;
        reg_rdata_next[31] = ie0_1_e_63_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[0] = ie0_2_e_64_qs;
        reg_rdata_next[1] = ie0_2_e_65_qs;
        reg_rdata_next[2] = ie0_2_e_66_qs;
        reg_rdata_next[3] = ie0_2_e_67_qs;
        reg_rdata_next[4] = ie0_2_e_68_qs;
        reg_rdata_next[5] = ie0_2_e_69_qs;
        reg_rdata_next[6] = ie0_2_e_70_qs;
        reg_rdata_next[7] = ie0_2_e_71_qs;
        reg_rdata_next[8] = ie0_2_e_72_qs;
        reg_rdata_next[9] = ie0_2_e_73_qs;
        reg_rdata_next[10] = ie0_2_e_74_qs;
        reg_rdata_next[11] = ie0_2_e_75_qs;
        reg_rdata_next[12] = ie0_2_e_76_qs;
        reg_rdata_next[13] = ie0_2_e_77_qs;
        reg_rdata_next[14] = ie0_2_e_78_qs;
        reg_rdata_next[15] = ie0_2_e_79_qs;
        reg_rdata_next[16] = ie0_2_e_80_qs;
        reg_rdata_next[17] = ie0_2_e_81_qs;
        reg_rdata_next[18] = ie0_2_e_82_qs;
        reg_rdata_next[19] = ie0_2_e_83_qs;
        reg_rdata_next[20] = ie0_2_e_84_qs;
        reg_rdata_next[21] = ie0_2_e_85_qs;
        reg_rdata_next[22] = ie0_2_e_86_qs;
        reg_rdata_next[23] = ie0_2_e_87_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[1:0] = threshold0_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[6:0] = cc0_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[0] = msip0_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[0] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
