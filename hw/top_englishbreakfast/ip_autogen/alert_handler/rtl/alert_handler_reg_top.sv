// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module alert_handler_reg_top (
  input clk_i,
  input rst_ni,
  input rst_shadowed_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output alert_handler_reg_pkg::alert_handler_reg2hw_t reg2hw, // Write
  input  alert_handler_reg_pkg::alert_handler_hw2reg_t hw2reg, // Read

  output logic shadowed_storage_err_o,
  output logic shadowed_update_err_o,

  // Integrity check errors
  output logic intg_err_o
);

  import alert_handler_reg_pkg::* ;

  localparam int AW = 10;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [201:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(202)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic intr_state_classa_qs;
  logic intr_state_classa_wd;
  logic intr_state_classb_qs;
  logic intr_state_classb_wd;
  logic intr_state_classc_qs;
  logic intr_state_classc_wd;
  logic intr_state_classd_qs;
  logic intr_state_classd_wd;
  logic intr_enable_we;
  logic intr_enable_classa_qs;
  logic intr_enable_classa_wd;
  logic intr_enable_classb_qs;
  logic intr_enable_classb_wd;
  logic intr_enable_classc_qs;
  logic intr_enable_classc_wd;
  logic intr_enable_classd_qs;
  logic intr_enable_classd_wd;
  logic intr_test_we;
  logic intr_test_classa_wd;
  logic intr_test_classb_wd;
  logic intr_test_classc_wd;
  logic intr_test_classd_wd;
  logic ping_timer_regwen_we;
  logic ping_timer_regwen_qs;
  logic ping_timer_regwen_wd;
  logic ping_timeout_cyc_shadowed_re;
  logic ping_timeout_cyc_shadowed_we;
  logic [15:0] ping_timeout_cyc_shadowed_qs;
  logic [15:0] ping_timeout_cyc_shadowed_wd;
  logic ping_timeout_cyc_shadowed_storage_err;
  logic ping_timeout_cyc_shadowed_update_err;
  logic ping_timer_en_shadowed_re;
  logic ping_timer_en_shadowed_we;
  logic ping_timer_en_shadowed_qs;
  logic ping_timer_en_shadowed_wd;
  logic ping_timer_en_shadowed_storage_err;
  logic ping_timer_en_shadowed_update_err;
  logic alert_regwen_0_we;
  logic alert_regwen_0_qs;
  logic alert_regwen_0_wd;
  logic alert_regwen_1_we;
  logic alert_regwen_1_qs;
  logic alert_regwen_1_wd;
  logic alert_regwen_2_we;
  logic alert_regwen_2_qs;
  logic alert_regwen_2_wd;
  logic alert_regwen_3_we;
  logic alert_regwen_3_qs;
  logic alert_regwen_3_wd;
  logic alert_regwen_4_we;
  logic alert_regwen_4_qs;
  logic alert_regwen_4_wd;
  logic alert_regwen_5_we;
  logic alert_regwen_5_qs;
  logic alert_regwen_5_wd;
  logic alert_regwen_6_we;
  logic alert_regwen_6_qs;
  logic alert_regwen_6_wd;
  logic alert_regwen_7_we;
  logic alert_regwen_7_qs;
  logic alert_regwen_7_wd;
  logic alert_regwen_8_we;
  logic alert_regwen_8_qs;
  logic alert_regwen_8_wd;
  logic alert_regwen_9_we;
  logic alert_regwen_9_qs;
  logic alert_regwen_9_wd;
  logic alert_regwen_10_we;
  logic alert_regwen_10_qs;
  logic alert_regwen_10_wd;
  logic alert_regwen_11_we;
  logic alert_regwen_11_qs;
  logic alert_regwen_11_wd;
  logic alert_regwen_12_we;
  logic alert_regwen_12_qs;
  logic alert_regwen_12_wd;
  logic alert_regwen_13_we;
  logic alert_regwen_13_qs;
  logic alert_regwen_13_wd;
  logic alert_regwen_14_we;
  logic alert_regwen_14_qs;
  logic alert_regwen_14_wd;
  logic alert_regwen_15_we;
  logic alert_regwen_15_qs;
  logic alert_regwen_15_wd;
  logic alert_regwen_16_we;
  logic alert_regwen_16_qs;
  logic alert_regwen_16_wd;
  logic alert_regwen_17_we;
  logic alert_regwen_17_qs;
  logic alert_regwen_17_wd;
  logic alert_regwen_18_we;
  logic alert_regwen_18_qs;
  logic alert_regwen_18_wd;
  logic alert_regwen_19_we;
  logic alert_regwen_19_qs;
  logic alert_regwen_19_wd;
  logic alert_regwen_20_we;
  logic alert_regwen_20_qs;
  logic alert_regwen_20_wd;
  logic alert_regwen_21_we;
  logic alert_regwen_21_qs;
  logic alert_regwen_21_wd;
  logic alert_regwen_22_we;
  logic alert_regwen_22_qs;
  logic alert_regwen_22_wd;
  logic alert_regwen_23_we;
  logic alert_regwen_23_qs;
  logic alert_regwen_23_wd;
  logic alert_regwen_24_we;
  logic alert_regwen_24_qs;
  logic alert_regwen_24_wd;
  logic alert_regwen_25_we;
  logic alert_regwen_25_qs;
  logic alert_regwen_25_wd;
  logic alert_regwen_26_we;
  logic alert_regwen_26_qs;
  logic alert_regwen_26_wd;
  logic alert_regwen_27_we;
  logic alert_regwen_27_qs;
  logic alert_regwen_27_wd;
  logic alert_en_shadowed_0_re;
  logic alert_en_shadowed_0_we;
  logic alert_en_shadowed_0_qs;
  logic alert_en_shadowed_0_wd;
  logic alert_en_shadowed_0_storage_err;
  logic alert_en_shadowed_0_update_err;
  logic alert_en_shadowed_1_re;
  logic alert_en_shadowed_1_we;
  logic alert_en_shadowed_1_qs;
  logic alert_en_shadowed_1_wd;
  logic alert_en_shadowed_1_storage_err;
  logic alert_en_shadowed_1_update_err;
  logic alert_en_shadowed_2_re;
  logic alert_en_shadowed_2_we;
  logic alert_en_shadowed_2_qs;
  logic alert_en_shadowed_2_wd;
  logic alert_en_shadowed_2_storage_err;
  logic alert_en_shadowed_2_update_err;
  logic alert_en_shadowed_3_re;
  logic alert_en_shadowed_3_we;
  logic alert_en_shadowed_3_qs;
  logic alert_en_shadowed_3_wd;
  logic alert_en_shadowed_3_storage_err;
  logic alert_en_shadowed_3_update_err;
  logic alert_en_shadowed_4_re;
  logic alert_en_shadowed_4_we;
  logic alert_en_shadowed_4_qs;
  logic alert_en_shadowed_4_wd;
  logic alert_en_shadowed_4_storage_err;
  logic alert_en_shadowed_4_update_err;
  logic alert_en_shadowed_5_re;
  logic alert_en_shadowed_5_we;
  logic alert_en_shadowed_5_qs;
  logic alert_en_shadowed_5_wd;
  logic alert_en_shadowed_5_storage_err;
  logic alert_en_shadowed_5_update_err;
  logic alert_en_shadowed_6_re;
  logic alert_en_shadowed_6_we;
  logic alert_en_shadowed_6_qs;
  logic alert_en_shadowed_6_wd;
  logic alert_en_shadowed_6_storage_err;
  logic alert_en_shadowed_6_update_err;
  logic alert_en_shadowed_7_re;
  logic alert_en_shadowed_7_we;
  logic alert_en_shadowed_7_qs;
  logic alert_en_shadowed_7_wd;
  logic alert_en_shadowed_7_storage_err;
  logic alert_en_shadowed_7_update_err;
  logic alert_en_shadowed_8_re;
  logic alert_en_shadowed_8_we;
  logic alert_en_shadowed_8_qs;
  logic alert_en_shadowed_8_wd;
  logic alert_en_shadowed_8_storage_err;
  logic alert_en_shadowed_8_update_err;
  logic alert_en_shadowed_9_re;
  logic alert_en_shadowed_9_we;
  logic alert_en_shadowed_9_qs;
  logic alert_en_shadowed_9_wd;
  logic alert_en_shadowed_9_storage_err;
  logic alert_en_shadowed_9_update_err;
  logic alert_en_shadowed_10_re;
  logic alert_en_shadowed_10_we;
  logic alert_en_shadowed_10_qs;
  logic alert_en_shadowed_10_wd;
  logic alert_en_shadowed_10_storage_err;
  logic alert_en_shadowed_10_update_err;
  logic alert_en_shadowed_11_re;
  logic alert_en_shadowed_11_we;
  logic alert_en_shadowed_11_qs;
  logic alert_en_shadowed_11_wd;
  logic alert_en_shadowed_11_storage_err;
  logic alert_en_shadowed_11_update_err;
  logic alert_en_shadowed_12_re;
  logic alert_en_shadowed_12_we;
  logic alert_en_shadowed_12_qs;
  logic alert_en_shadowed_12_wd;
  logic alert_en_shadowed_12_storage_err;
  logic alert_en_shadowed_12_update_err;
  logic alert_en_shadowed_13_re;
  logic alert_en_shadowed_13_we;
  logic alert_en_shadowed_13_qs;
  logic alert_en_shadowed_13_wd;
  logic alert_en_shadowed_13_storage_err;
  logic alert_en_shadowed_13_update_err;
  logic alert_en_shadowed_14_re;
  logic alert_en_shadowed_14_we;
  logic alert_en_shadowed_14_qs;
  logic alert_en_shadowed_14_wd;
  logic alert_en_shadowed_14_storage_err;
  logic alert_en_shadowed_14_update_err;
  logic alert_en_shadowed_15_re;
  logic alert_en_shadowed_15_we;
  logic alert_en_shadowed_15_qs;
  logic alert_en_shadowed_15_wd;
  logic alert_en_shadowed_15_storage_err;
  logic alert_en_shadowed_15_update_err;
  logic alert_en_shadowed_16_re;
  logic alert_en_shadowed_16_we;
  logic alert_en_shadowed_16_qs;
  logic alert_en_shadowed_16_wd;
  logic alert_en_shadowed_16_storage_err;
  logic alert_en_shadowed_16_update_err;
  logic alert_en_shadowed_17_re;
  logic alert_en_shadowed_17_we;
  logic alert_en_shadowed_17_qs;
  logic alert_en_shadowed_17_wd;
  logic alert_en_shadowed_17_storage_err;
  logic alert_en_shadowed_17_update_err;
  logic alert_en_shadowed_18_re;
  logic alert_en_shadowed_18_we;
  logic alert_en_shadowed_18_qs;
  logic alert_en_shadowed_18_wd;
  logic alert_en_shadowed_18_storage_err;
  logic alert_en_shadowed_18_update_err;
  logic alert_en_shadowed_19_re;
  logic alert_en_shadowed_19_we;
  logic alert_en_shadowed_19_qs;
  logic alert_en_shadowed_19_wd;
  logic alert_en_shadowed_19_storage_err;
  logic alert_en_shadowed_19_update_err;
  logic alert_en_shadowed_20_re;
  logic alert_en_shadowed_20_we;
  logic alert_en_shadowed_20_qs;
  logic alert_en_shadowed_20_wd;
  logic alert_en_shadowed_20_storage_err;
  logic alert_en_shadowed_20_update_err;
  logic alert_en_shadowed_21_re;
  logic alert_en_shadowed_21_we;
  logic alert_en_shadowed_21_qs;
  logic alert_en_shadowed_21_wd;
  logic alert_en_shadowed_21_storage_err;
  logic alert_en_shadowed_21_update_err;
  logic alert_en_shadowed_22_re;
  logic alert_en_shadowed_22_we;
  logic alert_en_shadowed_22_qs;
  logic alert_en_shadowed_22_wd;
  logic alert_en_shadowed_22_storage_err;
  logic alert_en_shadowed_22_update_err;
  logic alert_en_shadowed_23_re;
  logic alert_en_shadowed_23_we;
  logic alert_en_shadowed_23_qs;
  logic alert_en_shadowed_23_wd;
  logic alert_en_shadowed_23_storage_err;
  logic alert_en_shadowed_23_update_err;
  logic alert_en_shadowed_24_re;
  logic alert_en_shadowed_24_we;
  logic alert_en_shadowed_24_qs;
  logic alert_en_shadowed_24_wd;
  logic alert_en_shadowed_24_storage_err;
  logic alert_en_shadowed_24_update_err;
  logic alert_en_shadowed_25_re;
  logic alert_en_shadowed_25_we;
  logic alert_en_shadowed_25_qs;
  logic alert_en_shadowed_25_wd;
  logic alert_en_shadowed_25_storage_err;
  logic alert_en_shadowed_25_update_err;
  logic alert_en_shadowed_26_re;
  logic alert_en_shadowed_26_we;
  logic alert_en_shadowed_26_qs;
  logic alert_en_shadowed_26_wd;
  logic alert_en_shadowed_26_storage_err;
  logic alert_en_shadowed_26_update_err;
  logic alert_en_shadowed_27_re;
  logic alert_en_shadowed_27_we;
  logic alert_en_shadowed_27_qs;
  logic alert_en_shadowed_27_wd;
  logic alert_en_shadowed_27_storage_err;
  logic alert_en_shadowed_27_update_err;
  logic alert_class_shadowed_0_re;
  logic alert_class_shadowed_0_we;
  logic [1:0] alert_class_shadowed_0_qs;
  logic [1:0] alert_class_shadowed_0_wd;
  logic alert_class_shadowed_0_storage_err;
  logic alert_class_shadowed_0_update_err;
  logic alert_class_shadowed_1_re;
  logic alert_class_shadowed_1_we;
  logic [1:0] alert_class_shadowed_1_qs;
  logic [1:0] alert_class_shadowed_1_wd;
  logic alert_class_shadowed_1_storage_err;
  logic alert_class_shadowed_1_update_err;
  logic alert_class_shadowed_2_re;
  logic alert_class_shadowed_2_we;
  logic [1:0] alert_class_shadowed_2_qs;
  logic [1:0] alert_class_shadowed_2_wd;
  logic alert_class_shadowed_2_storage_err;
  logic alert_class_shadowed_2_update_err;
  logic alert_class_shadowed_3_re;
  logic alert_class_shadowed_3_we;
  logic [1:0] alert_class_shadowed_3_qs;
  logic [1:0] alert_class_shadowed_3_wd;
  logic alert_class_shadowed_3_storage_err;
  logic alert_class_shadowed_3_update_err;
  logic alert_class_shadowed_4_re;
  logic alert_class_shadowed_4_we;
  logic [1:0] alert_class_shadowed_4_qs;
  logic [1:0] alert_class_shadowed_4_wd;
  logic alert_class_shadowed_4_storage_err;
  logic alert_class_shadowed_4_update_err;
  logic alert_class_shadowed_5_re;
  logic alert_class_shadowed_5_we;
  logic [1:0] alert_class_shadowed_5_qs;
  logic [1:0] alert_class_shadowed_5_wd;
  logic alert_class_shadowed_5_storage_err;
  logic alert_class_shadowed_5_update_err;
  logic alert_class_shadowed_6_re;
  logic alert_class_shadowed_6_we;
  logic [1:0] alert_class_shadowed_6_qs;
  logic [1:0] alert_class_shadowed_6_wd;
  logic alert_class_shadowed_6_storage_err;
  logic alert_class_shadowed_6_update_err;
  logic alert_class_shadowed_7_re;
  logic alert_class_shadowed_7_we;
  logic [1:0] alert_class_shadowed_7_qs;
  logic [1:0] alert_class_shadowed_7_wd;
  logic alert_class_shadowed_7_storage_err;
  logic alert_class_shadowed_7_update_err;
  logic alert_class_shadowed_8_re;
  logic alert_class_shadowed_8_we;
  logic [1:0] alert_class_shadowed_8_qs;
  logic [1:0] alert_class_shadowed_8_wd;
  logic alert_class_shadowed_8_storage_err;
  logic alert_class_shadowed_8_update_err;
  logic alert_class_shadowed_9_re;
  logic alert_class_shadowed_9_we;
  logic [1:0] alert_class_shadowed_9_qs;
  logic [1:0] alert_class_shadowed_9_wd;
  logic alert_class_shadowed_9_storage_err;
  logic alert_class_shadowed_9_update_err;
  logic alert_class_shadowed_10_re;
  logic alert_class_shadowed_10_we;
  logic [1:0] alert_class_shadowed_10_qs;
  logic [1:0] alert_class_shadowed_10_wd;
  logic alert_class_shadowed_10_storage_err;
  logic alert_class_shadowed_10_update_err;
  logic alert_class_shadowed_11_re;
  logic alert_class_shadowed_11_we;
  logic [1:0] alert_class_shadowed_11_qs;
  logic [1:0] alert_class_shadowed_11_wd;
  logic alert_class_shadowed_11_storage_err;
  logic alert_class_shadowed_11_update_err;
  logic alert_class_shadowed_12_re;
  logic alert_class_shadowed_12_we;
  logic [1:0] alert_class_shadowed_12_qs;
  logic [1:0] alert_class_shadowed_12_wd;
  logic alert_class_shadowed_12_storage_err;
  logic alert_class_shadowed_12_update_err;
  logic alert_class_shadowed_13_re;
  logic alert_class_shadowed_13_we;
  logic [1:0] alert_class_shadowed_13_qs;
  logic [1:0] alert_class_shadowed_13_wd;
  logic alert_class_shadowed_13_storage_err;
  logic alert_class_shadowed_13_update_err;
  logic alert_class_shadowed_14_re;
  logic alert_class_shadowed_14_we;
  logic [1:0] alert_class_shadowed_14_qs;
  logic [1:0] alert_class_shadowed_14_wd;
  logic alert_class_shadowed_14_storage_err;
  logic alert_class_shadowed_14_update_err;
  logic alert_class_shadowed_15_re;
  logic alert_class_shadowed_15_we;
  logic [1:0] alert_class_shadowed_15_qs;
  logic [1:0] alert_class_shadowed_15_wd;
  logic alert_class_shadowed_15_storage_err;
  logic alert_class_shadowed_15_update_err;
  logic alert_class_shadowed_16_re;
  logic alert_class_shadowed_16_we;
  logic [1:0] alert_class_shadowed_16_qs;
  logic [1:0] alert_class_shadowed_16_wd;
  logic alert_class_shadowed_16_storage_err;
  logic alert_class_shadowed_16_update_err;
  logic alert_class_shadowed_17_re;
  logic alert_class_shadowed_17_we;
  logic [1:0] alert_class_shadowed_17_qs;
  logic [1:0] alert_class_shadowed_17_wd;
  logic alert_class_shadowed_17_storage_err;
  logic alert_class_shadowed_17_update_err;
  logic alert_class_shadowed_18_re;
  logic alert_class_shadowed_18_we;
  logic [1:0] alert_class_shadowed_18_qs;
  logic [1:0] alert_class_shadowed_18_wd;
  logic alert_class_shadowed_18_storage_err;
  logic alert_class_shadowed_18_update_err;
  logic alert_class_shadowed_19_re;
  logic alert_class_shadowed_19_we;
  logic [1:0] alert_class_shadowed_19_qs;
  logic [1:0] alert_class_shadowed_19_wd;
  logic alert_class_shadowed_19_storage_err;
  logic alert_class_shadowed_19_update_err;
  logic alert_class_shadowed_20_re;
  logic alert_class_shadowed_20_we;
  logic [1:0] alert_class_shadowed_20_qs;
  logic [1:0] alert_class_shadowed_20_wd;
  logic alert_class_shadowed_20_storage_err;
  logic alert_class_shadowed_20_update_err;
  logic alert_class_shadowed_21_re;
  logic alert_class_shadowed_21_we;
  logic [1:0] alert_class_shadowed_21_qs;
  logic [1:0] alert_class_shadowed_21_wd;
  logic alert_class_shadowed_21_storage_err;
  logic alert_class_shadowed_21_update_err;
  logic alert_class_shadowed_22_re;
  logic alert_class_shadowed_22_we;
  logic [1:0] alert_class_shadowed_22_qs;
  logic [1:0] alert_class_shadowed_22_wd;
  logic alert_class_shadowed_22_storage_err;
  logic alert_class_shadowed_22_update_err;
  logic alert_class_shadowed_23_re;
  logic alert_class_shadowed_23_we;
  logic [1:0] alert_class_shadowed_23_qs;
  logic [1:0] alert_class_shadowed_23_wd;
  logic alert_class_shadowed_23_storage_err;
  logic alert_class_shadowed_23_update_err;
  logic alert_class_shadowed_24_re;
  logic alert_class_shadowed_24_we;
  logic [1:0] alert_class_shadowed_24_qs;
  logic [1:0] alert_class_shadowed_24_wd;
  logic alert_class_shadowed_24_storage_err;
  logic alert_class_shadowed_24_update_err;
  logic alert_class_shadowed_25_re;
  logic alert_class_shadowed_25_we;
  logic [1:0] alert_class_shadowed_25_qs;
  logic [1:0] alert_class_shadowed_25_wd;
  logic alert_class_shadowed_25_storage_err;
  logic alert_class_shadowed_25_update_err;
  logic alert_class_shadowed_26_re;
  logic alert_class_shadowed_26_we;
  logic [1:0] alert_class_shadowed_26_qs;
  logic [1:0] alert_class_shadowed_26_wd;
  logic alert_class_shadowed_26_storage_err;
  logic alert_class_shadowed_26_update_err;
  logic alert_class_shadowed_27_re;
  logic alert_class_shadowed_27_we;
  logic [1:0] alert_class_shadowed_27_qs;
  logic [1:0] alert_class_shadowed_27_wd;
  logic alert_class_shadowed_27_storage_err;
  logic alert_class_shadowed_27_update_err;
  logic alert_cause_0_we;
  logic alert_cause_0_qs;
  logic alert_cause_0_wd;
  logic alert_cause_1_we;
  logic alert_cause_1_qs;
  logic alert_cause_1_wd;
  logic alert_cause_2_we;
  logic alert_cause_2_qs;
  logic alert_cause_2_wd;
  logic alert_cause_3_we;
  logic alert_cause_3_qs;
  logic alert_cause_3_wd;
  logic alert_cause_4_we;
  logic alert_cause_4_qs;
  logic alert_cause_4_wd;
  logic alert_cause_5_we;
  logic alert_cause_5_qs;
  logic alert_cause_5_wd;
  logic alert_cause_6_we;
  logic alert_cause_6_qs;
  logic alert_cause_6_wd;
  logic alert_cause_7_we;
  logic alert_cause_7_qs;
  logic alert_cause_7_wd;
  logic alert_cause_8_we;
  logic alert_cause_8_qs;
  logic alert_cause_8_wd;
  logic alert_cause_9_we;
  logic alert_cause_9_qs;
  logic alert_cause_9_wd;
  logic alert_cause_10_we;
  logic alert_cause_10_qs;
  logic alert_cause_10_wd;
  logic alert_cause_11_we;
  logic alert_cause_11_qs;
  logic alert_cause_11_wd;
  logic alert_cause_12_we;
  logic alert_cause_12_qs;
  logic alert_cause_12_wd;
  logic alert_cause_13_we;
  logic alert_cause_13_qs;
  logic alert_cause_13_wd;
  logic alert_cause_14_we;
  logic alert_cause_14_qs;
  logic alert_cause_14_wd;
  logic alert_cause_15_we;
  logic alert_cause_15_qs;
  logic alert_cause_15_wd;
  logic alert_cause_16_we;
  logic alert_cause_16_qs;
  logic alert_cause_16_wd;
  logic alert_cause_17_we;
  logic alert_cause_17_qs;
  logic alert_cause_17_wd;
  logic alert_cause_18_we;
  logic alert_cause_18_qs;
  logic alert_cause_18_wd;
  logic alert_cause_19_we;
  logic alert_cause_19_qs;
  logic alert_cause_19_wd;
  logic alert_cause_20_we;
  logic alert_cause_20_qs;
  logic alert_cause_20_wd;
  logic alert_cause_21_we;
  logic alert_cause_21_qs;
  logic alert_cause_21_wd;
  logic alert_cause_22_we;
  logic alert_cause_22_qs;
  logic alert_cause_22_wd;
  logic alert_cause_23_we;
  logic alert_cause_23_qs;
  logic alert_cause_23_wd;
  logic alert_cause_24_we;
  logic alert_cause_24_qs;
  logic alert_cause_24_wd;
  logic alert_cause_25_we;
  logic alert_cause_25_qs;
  logic alert_cause_25_wd;
  logic alert_cause_26_we;
  logic alert_cause_26_qs;
  logic alert_cause_26_wd;
  logic alert_cause_27_we;
  logic alert_cause_27_qs;
  logic alert_cause_27_wd;
  logic loc_alert_regwen_0_we;
  logic loc_alert_regwen_0_qs;
  logic loc_alert_regwen_0_wd;
  logic loc_alert_regwen_1_we;
  logic loc_alert_regwen_1_qs;
  logic loc_alert_regwen_1_wd;
  logic loc_alert_regwen_2_we;
  logic loc_alert_regwen_2_qs;
  logic loc_alert_regwen_2_wd;
  logic loc_alert_regwen_3_we;
  logic loc_alert_regwen_3_qs;
  logic loc_alert_regwen_3_wd;
  logic loc_alert_regwen_4_we;
  logic loc_alert_regwen_4_qs;
  logic loc_alert_regwen_4_wd;
  logic loc_alert_regwen_5_we;
  logic loc_alert_regwen_5_qs;
  logic loc_alert_regwen_5_wd;
  logic loc_alert_regwen_6_we;
  logic loc_alert_regwen_6_qs;
  logic loc_alert_regwen_6_wd;
  logic loc_alert_en_shadowed_0_re;
  logic loc_alert_en_shadowed_0_we;
  logic loc_alert_en_shadowed_0_qs;
  logic loc_alert_en_shadowed_0_wd;
  logic loc_alert_en_shadowed_0_storage_err;
  logic loc_alert_en_shadowed_0_update_err;
  logic loc_alert_en_shadowed_1_re;
  logic loc_alert_en_shadowed_1_we;
  logic loc_alert_en_shadowed_1_qs;
  logic loc_alert_en_shadowed_1_wd;
  logic loc_alert_en_shadowed_1_storage_err;
  logic loc_alert_en_shadowed_1_update_err;
  logic loc_alert_en_shadowed_2_re;
  logic loc_alert_en_shadowed_2_we;
  logic loc_alert_en_shadowed_2_qs;
  logic loc_alert_en_shadowed_2_wd;
  logic loc_alert_en_shadowed_2_storage_err;
  logic loc_alert_en_shadowed_2_update_err;
  logic loc_alert_en_shadowed_3_re;
  logic loc_alert_en_shadowed_3_we;
  logic loc_alert_en_shadowed_3_qs;
  logic loc_alert_en_shadowed_3_wd;
  logic loc_alert_en_shadowed_3_storage_err;
  logic loc_alert_en_shadowed_3_update_err;
  logic loc_alert_en_shadowed_4_re;
  logic loc_alert_en_shadowed_4_we;
  logic loc_alert_en_shadowed_4_qs;
  logic loc_alert_en_shadowed_4_wd;
  logic loc_alert_en_shadowed_4_storage_err;
  logic loc_alert_en_shadowed_4_update_err;
  logic loc_alert_en_shadowed_5_re;
  logic loc_alert_en_shadowed_5_we;
  logic loc_alert_en_shadowed_5_qs;
  logic loc_alert_en_shadowed_5_wd;
  logic loc_alert_en_shadowed_5_storage_err;
  logic loc_alert_en_shadowed_5_update_err;
  logic loc_alert_en_shadowed_6_re;
  logic loc_alert_en_shadowed_6_we;
  logic loc_alert_en_shadowed_6_qs;
  logic loc_alert_en_shadowed_6_wd;
  logic loc_alert_en_shadowed_6_storage_err;
  logic loc_alert_en_shadowed_6_update_err;
  logic loc_alert_class_shadowed_0_re;
  logic loc_alert_class_shadowed_0_we;
  logic [1:0] loc_alert_class_shadowed_0_qs;
  logic [1:0] loc_alert_class_shadowed_0_wd;
  logic loc_alert_class_shadowed_0_storage_err;
  logic loc_alert_class_shadowed_0_update_err;
  logic loc_alert_class_shadowed_1_re;
  logic loc_alert_class_shadowed_1_we;
  logic [1:0] loc_alert_class_shadowed_1_qs;
  logic [1:0] loc_alert_class_shadowed_1_wd;
  logic loc_alert_class_shadowed_1_storage_err;
  logic loc_alert_class_shadowed_1_update_err;
  logic loc_alert_class_shadowed_2_re;
  logic loc_alert_class_shadowed_2_we;
  logic [1:0] loc_alert_class_shadowed_2_qs;
  logic [1:0] loc_alert_class_shadowed_2_wd;
  logic loc_alert_class_shadowed_2_storage_err;
  logic loc_alert_class_shadowed_2_update_err;
  logic loc_alert_class_shadowed_3_re;
  logic loc_alert_class_shadowed_3_we;
  logic [1:0] loc_alert_class_shadowed_3_qs;
  logic [1:0] loc_alert_class_shadowed_3_wd;
  logic loc_alert_class_shadowed_3_storage_err;
  logic loc_alert_class_shadowed_3_update_err;
  logic loc_alert_class_shadowed_4_re;
  logic loc_alert_class_shadowed_4_we;
  logic [1:0] loc_alert_class_shadowed_4_qs;
  logic [1:0] loc_alert_class_shadowed_4_wd;
  logic loc_alert_class_shadowed_4_storage_err;
  logic loc_alert_class_shadowed_4_update_err;
  logic loc_alert_class_shadowed_5_re;
  logic loc_alert_class_shadowed_5_we;
  logic [1:0] loc_alert_class_shadowed_5_qs;
  logic [1:0] loc_alert_class_shadowed_5_wd;
  logic loc_alert_class_shadowed_5_storage_err;
  logic loc_alert_class_shadowed_5_update_err;
  logic loc_alert_class_shadowed_6_re;
  logic loc_alert_class_shadowed_6_we;
  logic [1:0] loc_alert_class_shadowed_6_qs;
  logic [1:0] loc_alert_class_shadowed_6_wd;
  logic loc_alert_class_shadowed_6_storage_err;
  logic loc_alert_class_shadowed_6_update_err;
  logic loc_alert_cause_0_we;
  logic loc_alert_cause_0_qs;
  logic loc_alert_cause_0_wd;
  logic loc_alert_cause_1_we;
  logic loc_alert_cause_1_qs;
  logic loc_alert_cause_1_wd;
  logic loc_alert_cause_2_we;
  logic loc_alert_cause_2_qs;
  logic loc_alert_cause_2_wd;
  logic loc_alert_cause_3_we;
  logic loc_alert_cause_3_qs;
  logic loc_alert_cause_3_wd;
  logic loc_alert_cause_4_we;
  logic loc_alert_cause_4_qs;
  logic loc_alert_cause_4_wd;
  logic loc_alert_cause_5_we;
  logic loc_alert_cause_5_qs;
  logic loc_alert_cause_5_wd;
  logic loc_alert_cause_6_we;
  logic loc_alert_cause_6_qs;
  logic loc_alert_cause_6_wd;
  logic classa_regwen_we;
  logic classa_regwen_qs;
  logic classa_regwen_wd;
  logic classa_ctrl_shadowed_re;
  logic classa_ctrl_shadowed_we;
  logic classa_ctrl_shadowed_en_qs;
  logic classa_ctrl_shadowed_en_wd;
  logic classa_ctrl_shadowed_en_storage_err;
  logic classa_ctrl_shadowed_en_update_err;
  logic classa_ctrl_shadowed_lock_qs;
  logic classa_ctrl_shadowed_lock_wd;
  logic classa_ctrl_shadowed_lock_storage_err;
  logic classa_ctrl_shadowed_lock_update_err;
  logic classa_ctrl_shadowed_en_e0_qs;
  logic classa_ctrl_shadowed_en_e0_wd;
  logic classa_ctrl_shadowed_en_e0_storage_err;
  logic classa_ctrl_shadowed_en_e0_update_err;
  logic classa_ctrl_shadowed_en_e1_qs;
  logic classa_ctrl_shadowed_en_e1_wd;
  logic classa_ctrl_shadowed_en_e1_storage_err;
  logic classa_ctrl_shadowed_en_e1_update_err;
  logic classa_ctrl_shadowed_en_e2_qs;
  logic classa_ctrl_shadowed_en_e2_wd;
  logic classa_ctrl_shadowed_en_e2_storage_err;
  logic classa_ctrl_shadowed_en_e2_update_err;
  logic classa_ctrl_shadowed_en_e3_qs;
  logic classa_ctrl_shadowed_en_e3_wd;
  logic classa_ctrl_shadowed_en_e3_storage_err;
  logic classa_ctrl_shadowed_en_e3_update_err;
  logic [1:0] classa_ctrl_shadowed_map_e0_qs;
  logic [1:0] classa_ctrl_shadowed_map_e0_wd;
  logic classa_ctrl_shadowed_map_e0_storage_err;
  logic classa_ctrl_shadowed_map_e0_update_err;
  logic [1:0] classa_ctrl_shadowed_map_e1_qs;
  logic [1:0] classa_ctrl_shadowed_map_e1_wd;
  logic classa_ctrl_shadowed_map_e1_storage_err;
  logic classa_ctrl_shadowed_map_e1_update_err;
  logic [1:0] classa_ctrl_shadowed_map_e2_qs;
  logic [1:0] classa_ctrl_shadowed_map_e2_wd;
  logic classa_ctrl_shadowed_map_e2_storage_err;
  logic classa_ctrl_shadowed_map_e2_update_err;
  logic [1:0] classa_ctrl_shadowed_map_e3_qs;
  logic [1:0] classa_ctrl_shadowed_map_e3_wd;
  logic classa_ctrl_shadowed_map_e3_storage_err;
  logic classa_ctrl_shadowed_map_e3_update_err;
  logic classa_clr_regwen_we;
  logic classa_clr_regwen_qs;
  logic classa_clr_regwen_wd;
  logic classa_clr_shadowed_re;
  logic classa_clr_shadowed_we;
  logic classa_clr_shadowed_qs;
  logic classa_clr_shadowed_wd;
  logic classa_clr_shadowed_storage_err;
  logic classa_clr_shadowed_update_err;
  logic classa_accum_cnt_re;
  logic [15:0] classa_accum_cnt_qs;
  logic classa_accum_thresh_shadowed_re;
  logic classa_accum_thresh_shadowed_we;
  logic [15:0] classa_accum_thresh_shadowed_qs;
  logic [15:0] classa_accum_thresh_shadowed_wd;
  logic classa_accum_thresh_shadowed_storage_err;
  logic classa_accum_thresh_shadowed_update_err;
  logic classa_timeout_cyc_shadowed_re;
  logic classa_timeout_cyc_shadowed_we;
  logic [31:0] classa_timeout_cyc_shadowed_qs;
  logic [31:0] classa_timeout_cyc_shadowed_wd;
  logic classa_timeout_cyc_shadowed_storage_err;
  logic classa_timeout_cyc_shadowed_update_err;
  logic classa_crashdump_trigger_shadowed_re;
  logic classa_crashdump_trigger_shadowed_we;
  logic [1:0] classa_crashdump_trigger_shadowed_qs;
  logic [1:0] classa_crashdump_trigger_shadowed_wd;
  logic classa_crashdump_trigger_shadowed_storage_err;
  logic classa_crashdump_trigger_shadowed_update_err;
  logic classa_phase0_cyc_shadowed_re;
  logic classa_phase0_cyc_shadowed_we;
  logic [31:0] classa_phase0_cyc_shadowed_qs;
  logic [31:0] classa_phase0_cyc_shadowed_wd;
  logic classa_phase0_cyc_shadowed_storage_err;
  logic classa_phase0_cyc_shadowed_update_err;
  logic classa_phase1_cyc_shadowed_re;
  logic classa_phase1_cyc_shadowed_we;
  logic [31:0] classa_phase1_cyc_shadowed_qs;
  logic [31:0] classa_phase1_cyc_shadowed_wd;
  logic classa_phase1_cyc_shadowed_storage_err;
  logic classa_phase1_cyc_shadowed_update_err;
  logic classa_phase2_cyc_shadowed_re;
  logic classa_phase2_cyc_shadowed_we;
  logic [31:0] classa_phase2_cyc_shadowed_qs;
  logic [31:0] classa_phase2_cyc_shadowed_wd;
  logic classa_phase2_cyc_shadowed_storage_err;
  logic classa_phase2_cyc_shadowed_update_err;
  logic classa_phase3_cyc_shadowed_re;
  logic classa_phase3_cyc_shadowed_we;
  logic [31:0] classa_phase3_cyc_shadowed_qs;
  logic [31:0] classa_phase3_cyc_shadowed_wd;
  logic classa_phase3_cyc_shadowed_storage_err;
  logic classa_phase3_cyc_shadowed_update_err;
  logic classa_esc_cnt_re;
  logic [31:0] classa_esc_cnt_qs;
  logic classa_state_re;
  logic [2:0] classa_state_qs;
  logic classb_regwen_we;
  logic classb_regwen_qs;
  logic classb_regwen_wd;
  logic classb_ctrl_shadowed_re;
  logic classb_ctrl_shadowed_we;
  logic classb_ctrl_shadowed_en_qs;
  logic classb_ctrl_shadowed_en_wd;
  logic classb_ctrl_shadowed_en_storage_err;
  logic classb_ctrl_shadowed_en_update_err;
  logic classb_ctrl_shadowed_lock_qs;
  logic classb_ctrl_shadowed_lock_wd;
  logic classb_ctrl_shadowed_lock_storage_err;
  logic classb_ctrl_shadowed_lock_update_err;
  logic classb_ctrl_shadowed_en_e0_qs;
  logic classb_ctrl_shadowed_en_e0_wd;
  logic classb_ctrl_shadowed_en_e0_storage_err;
  logic classb_ctrl_shadowed_en_e0_update_err;
  logic classb_ctrl_shadowed_en_e1_qs;
  logic classb_ctrl_shadowed_en_e1_wd;
  logic classb_ctrl_shadowed_en_e1_storage_err;
  logic classb_ctrl_shadowed_en_e1_update_err;
  logic classb_ctrl_shadowed_en_e2_qs;
  logic classb_ctrl_shadowed_en_e2_wd;
  logic classb_ctrl_shadowed_en_e2_storage_err;
  logic classb_ctrl_shadowed_en_e2_update_err;
  logic classb_ctrl_shadowed_en_e3_qs;
  logic classb_ctrl_shadowed_en_e3_wd;
  logic classb_ctrl_shadowed_en_e3_storage_err;
  logic classb_ctrl_shadowed_en_e3_update_err;
  logic [1:0] classb_ctrl_shadowed_map_e0_qs;
  logic [1:0] classb_ctrl_shadowed_map_e0_wd;
  logic classb_ctrl_shadowed_map_e0_storage_err;
  logic classb_ctrl_shadowed_map_e0_update_err;
  logic [1:0] classb_ctrl_shadowed_map_e1_qs;
  logic [1:0] classb_ctrl_shadowed_map_e1_wd;
  logic classb_ctrl_shadowed_map_e1_storage_err;
  logic classb_ctrl_shadowed_map_e1_update_err;
  logic [1:0] classb_ctrl_shadowed_map_e2_qs;
  logic [1:0] classb_ctrl_shadowed_map_e2_wd;
  logic classb_ctrl_shadowed_map_e2_storage_err;
  logic classb_ctrl_shadowed_map_e2_update_err;
  logic [1:0] classb_ctrl_shadowed_map_e3_qs;
  logic [1:0] classb_ctrl_shadowed_map_e3_wd;
  logic classb_ctrl_shadowed_map_e3_storage_err;
  logic classb_ctrl_shadowed_map_e3_update_err;
  logic classb_clr_regwen_we;
  logic classb_clr_regwen_qs;
  logic classb_clr_regwen_wd;
  logic classb_clr_shadowed_re;
  logic classb_clr_shadowed_we;
  logic classb_clr_shadowed_qs;
  logic classb_clr_shadowed_wd;
  logic classb_clr_shadowed_storage_err;
  logic classb_clr_shadowed_update_err;
  logic classb_accum_cnt_re;
  logic [15:0] classb_accum_cnt_qs;
  logic classb_accum_thresh_shadowed_re;
  logic classb_accum_thresh_shadowed_we;
  logic [15:0] classb_accum_thresh_shadowed_qs;
  logic [15:0] classb_accum_thresh_shadowed_wd;
  logic classb_accum_thresh_shadowed_storage_err;
  logic classb_accum_thresh_shadowed_update_err;
  logic classb_timeout_cyc_shadowed_re;
  logic classb_timeout_cyc_shadowed_we;
  logic [31:0] classb_timeout_cyc_shadowed_qs;
  logic [31:0] classb_timeout_cyc_shadowed_wd;
  logic classb_timeout_cyc_shadowed_storage_err;
  logic classb_timeout_cyc_shadowed_update_err;
  logic classb_crashdump_trigger_shadowed_re;
  logic classb_crashdump_trigger_shadowed_we;
  logic [1:0] classb_crashdump_trigger_shadowed_qs;
  logic [1:0] classb_crashdump_trigger_shadowed_wd;
  logic classb_crashdump_trigger_shadowed_storage_err;
  logic classb_crashdump_trigger_shadowed_update_err;
  logic classb_phase0_cyc_shadowed_re;
  logic classb_phase0_cyc_shadowed_we;
  logic [31:0] classb_phase0_cyc_shadowed_qs;
  logic [31:0] classb_phase0_cyc_shadowed_wd;
  logic classb_phase0_cyc_shadowed_storage_err;
  logic classb_phase0_cyc_shadowed_update_err;
  logic classb_phase1_cyc_shadowed_re;
  logic classb_phase1_cyc_shadowed_we;
  logic [31:0] classb_phase1_cyc_shadowed_qs;
  logic [31:0] classb_phase1_cyc_shadowed_wd;
  logic classb_phase1_cyc_shadowed_storage_err;
  logic classb_phase1_cyc_shadowed_update_err;
  logic classb_phase2_cyc_shadowed_re;
  logic classb_phase2_cyc_shadowed_we;
  logic [31:0] classb_phase2_cyc_shadowed_qs;
  logic [31:0] classb_phase2_cyc_shadowed_wd;
  logic classb_phase2_cyc_shadowed_storage_err;
  logic classb_phase2_cyc_shadowed_update_err;
  logic classb_phase3_cyc_shadowed_re;
  logic classb_phase3_cyc_shadowed_we;
  logic [31:0] classb_phase3_cyc_shadowed_qs;
  logic [31:0] classb_phase3_cyc_shadowed_wd;
  logic classb_phase3_cyc_shadowed_storage_err;
  logic classb_phase3_cyc_shadowed_update_err;
  logic classb_esc_cnt_re;
  logic [31:0] classb_esc_cnt_qs;
  logic classb_state_re;
  logic [2:0] classb_state_qs;
  logic classc_regwen_we;
  logic classc_regwen_qs;
  logic classc_regwen_wd;
  logic classc_ctrl_shadowed_re;
  logic classc_ctrl_shadowed_we;
  logic classc_ctrl_shadowed_en_qs;
  logic classc_ctrl_shadowed_en_wd;
  logic classc_ctrl_shadowed_en_storage_err;
  logic classc_ctrl_shadowed_en_update_err;
  logic classc_ctrl_shadowed_lock_qs;
  logic classc_ctrl_shadowed_lock_wd;
  logic classc_ctrl_shadowed_lock_storage_err;
  logic classc_ctrl_shadowed_lock_update_err;
  logic classc_ctrl_shadowed_en_e0_qs;
  logic classc_ctrl_shadowed_en_e0_wd;
  logic classc_ctrl_shadowed_en_e0_storage_err;
  logic classc_ctrl_shadowed_en_e0_update_err;
  logic classc_ctrl_shadowed_en_e1_qs;
  logic classc_ctrl_shadowed_en_e1_wd;
  logic classc_ctrl_shadowed_en_e1_storage_err;
  logic classc_ctrl_shadowed_en_e1_update_err;
  logic classc_ctrl_shadowed_en_e2_qs;
  logic classc_ctrl_shadowed_en_e2_wd;
  logic classc_ctrl_shadowed_en_e2_storage_err;
  logic classc_ctrl_shadowed_en_e2_update_err;
  logic classc_ctrl_shadowed_en_e3_qs;
  logic classc_ctrl_shadowed_en_e3_wd;
  logic classc_ctrl_shadowed_en_e3_storage_err;
  logic classc_ctrl_shadowed_en_e3_update_err;
  logic [1:0] classc_ctrl_shadowed_map_e0_qs;
  logic [1:0] classc_ctrl_shadowed_map_e0_wd;
  logic classc_ctrl_shadowed_map_e0_storage_err;
  logic classc_ctrl_shadowed_map_e0_update_err;
  logic [1:0] classc_ctrl_shadowed_map_e1_qs;
  logic [1:0] classc_ctrl_shadowed_map_e1_wd;
  logic classc_ctrl_shadowed_map_e1_storage_err;
  logic classc_ctrl_shadowed_map_e1_update_err;
  logic [1:0] classc_ctrl_shadowed_map_e2_qs;
  logic [1:0] classc_ctrl_shadowed_map_e2_wd;
  logic classc_ctrl_shadowed_map_e2_storage_err;
  logic classc_ctrl_shadowed_map_e2_update_err;
  logic [1:0] classc_ctrl_shadowed_map_e3_qs;
  logic [1:0] classc_ctrl_shadowed_map_e3_wd;
  logic classc_ctrl_shadowed_map_e3_storage_err;
  logic classc_ctrl_shadowed_map_e3_update_err;
  logic classc_clr_regwen_we;
  logic classc_clr_regwen_qs;
  logic classc_clr_regwen_wd;
  logic classc_clr_shadowed_re;
  logic classc_clr_shadowed_we;
  logic classc_clr_shadowed_qs;
  logic classc_clr_shadowed_wd;
  logic classc_clr_shadowed_storage_err;
  logic classc_clr_shadowed_update_err;
  logic classc_accum_cnt_re;
  logic [15:0] classc_accum_cnt_qs;
  logic classc_accum_thresh_shadowed_re;
  logic classc_accum_thresh_shadowed_we;
  logic [15:0] classc_accum_thresh_shadowed_qs;
  logic [15:0] classc_accum_thresh_shadowed_wd;
  logic classc_accum_thresh_shadowed_storage_err;
  logic classc_accum_thresh_shadowed_update_err;
  logic classc_timeout_cyc_shadowed_re;
  logic classc_timeout_cyc_shadowed_we;
  logic [31:0] classc_timeout_cyc_shadowed_qs;
  logic [31:0] classc_timeout_cyc_shadowed_wd;
  logic classc_timeout_cyc_shadowed_storage_err;
  logic classc_timeout_cyc_shadowed_update_err;
  logic classc_crashdump_trigger_shadowed_re;
  logic classc_crashdump_trigger_shadowed_we;
  logic [1:0] classc_crashdump_trigger_shadowed_qs;
  logic [1:0] classc_crashdump_trigger_shadowed_wd;
  logic classc_crashdump_trigger_shadowed_storage_err;
  logic classc_crashdump_trigger_shadowed_update_err;
  logic classc_phase0_cyc_shadowed_re;
  logic classc_phase0_cyc_shadowed_we;
  logic [31:0] classc_phase0_cyc_shadowed_qs;
  logic [31:0] classc_phase0_cyc_shadowed_wd;
  logic classc_phase0_cyc_shadowed_storage_err;
  logic classc_phase0_cyc_shadowed_update_err;
  logic classc_phase1_cyc_shadowed_re;
  logic classc_phase1_cyc_shadowed_we;
  logic [31:0] classc_phase1_cyc_shadowed_qs;
  logic [31:0] classc_phase1_cyc_shadowed_wd;
  logic classc_phase1_cyc_shadowed_storage_err;
  logic classc_phase1_cyc_shadowed_update_err;
  logic classc_phase2_cyc_shadowed_re;
  logic classc_phase2_cyc_shadowed_we;
  logic [31:0] classc_phase2_cyc_shadowed_qs;
  logic [31:0] classc_phase2_cyc_shadowed_wd;
  logic classc_phase2_cyc_shadowed_storage_err;
  logic classc_phase2_cyc_shadowed_update_err;
  logic classc_phase3_cyc_shadowed_re;
  logic classc_phase3_cyc_shadowed_we;
  logic [31:0] classc_phase3_cyc_shadowed_qs;
  logic [31:0] classc_phase3_cyc_shadowed_wd;
  logic classc_phase3_cyc_shadowed_storage_err;
  logic classc_phase3_cyc_shadowed_update_err;
  logic classc_esc_cnt_re;
  logic [31:0] classc_esc_cnt_qs;
  logic classc_state_re;
  logic [2:0] classc_state_qs;
  logic classd_regwen_we;
  logic classd_regwen_qs;
  logic classd_regwen_wd;
  logic classd_ctrl_shadowed_re;
  logic classd_ctrl_shadowed_we;
  logic classd_ctrl_shadowed_en_qs;
  logic classd_ctrl_shadowed_en_wd;
  logic classd_ctrl_shadowed_en_storage_err;
  logic classd_ctrl_shadowed_en_update_err;
  logic classd_ctrl_shadowed_lock_qs;
  logic classd_ctrl_shadowed_lock_wd;
  logic classd_ctrl_shadowed_lock_storage_err;
  logic classd_ctrl_shadowed_lock_update_err;
  logic classd_ctrl_shadowed_en_e0_qs;
  logic classd_ctrl_shadowed_en_e0_wd;
  logic classd_ctrl_shadowed_en_e0_storage_err;
  logic classd_ctrl_shadowed_en_e0_update_err;
  logic classd_ctrl_shadowed_en_e1_qs;
  logic classd_ctrl_shadowed_en_e1_wd;
  logic classd_ctrl_shadowed_en_e1_storage_err;
  logic classd_ctrl_shadowed_en_e1_update_err;
  logic classd_ctrl_shadowed_en_e2_qs;
  logic classd_ctrl_shadowed_en_e2_wd;
  logic classd_ctrl_shadowed_en_e2_storage_err;
  logic classd_ctrl_shadowed_en_e2_update_err;
  logic classd_ctrl_shadowed_en_e3_qs;
  logic classd_ctrl_shadowed_en_e3_wd;
  logic classd_ctrl_shadowed_en_e3_storage_err;
  logic classd_ctrl_shadowed_en_e3_update_err;
  logic [1:0] classd_ctrl_shadowed_map_e0_qs;
  logic [1:0] classd_ctrl_shadowed_map_e0_wd;
  logic classd_ctrl_shadowed_map_e0_storage_err;
  logic classd_ctrl_shadowed_map_e0_update_err;
  logic [1:0] classd_ctrl_shadowed_map_e1_qs;
  logic [1:0] classd_ctrl_shadowed_map_e1_wd;
  logic classd_ctrl_shadowed_map_e1_storage_err;
  logic classd_ctrl_shadowed_map_e1_update_err;
  logic [1:0] classd_ctrl_shadowed_map_e2_qs;
  logic [1:0] classd_ctrl_shadowed_map_e2_wd;
  logic classd_ctrl_shadowed_map_e2_storage_err;
  logic classd_ctrl_shadowed_map_e2_update_err;
  logic [1:0] classd_ctrl_shadowed_map_e3_qs;
  logic [1:0] classd_ctrl_shadowed_map_e3_wd;
  logic classd_ctrl_shadowed_map_e3_storage_err;
  logic classd_ctrl_shadowed_map_e3_update_err;
  logic classd_clr_regwen_we;
  logic classd_clr_regwen_qs;
  logic classd_clr_regwen_wd;
  logic classd_clr_shadowed_re;
  logic classd_clr_shadowed_we;
  logic classd_clr_shadowed_qs;
  logic classd_clr_shadowed_wd;
  logic classd_clr_shadowed_storage_err;
  logic classd_clr_shadowed_update_err;
  logic classd_accum_cnt_re;
  logic [15:0] classd_accum_cnt_qs;
  logic classd_accum_thresh_shadowed_re;
  logic classd_accum_thresh_shadowed_we;
  logic [15:0] classd_accum_thresh_shadowed_qs;
  logic [15:0] classd_accum_thresh_shadowed_wd;
  logic classd_accum_thresh_shadowed_storage_err;
  logic classd_accum_thresh_shadowed_update_err;
  logic classd_timeout_cyc_shadowed_re;
  logic classd_timeout_cyc_shadowed_we;
  logic [31:0] classd_timeout_cyc_shadowed_qs;
  logic [31:0] classd_timeout_cyc_shadowed_wd;
  logic classd_timeout_cyc_shadowed_storage_err;
  logic classd_timeout_cyc_shadowed_update_err;
  logic classd_crashdump_trigger_shadowed_re;
  logic classd_crashdump_trigger_shadowed_we;
  logic [1:0] classd_crashdump_trigger_shadowed_qs;
  logic [1:0] classd_crashdump_trigger_shadowed_wd;
  logic classd_crashdump_trigger_shadowed_storage_err;
  logic classd_crashdump_trigger_shadowed_update_err;
  logic classd_phase0_cyc_shadowed_re;
  logic classd_phase0_cyc_shadowed_we;
  logic [31:0] classd_phase0_cyc_shadowed_qs;
  logic [31:0] classd_phase0_cyc_shadowed_wd;
  logic classd_phase0_cyc_shadowed_storage_err;
  logic classd_phase0_cyc_shadowed_update_err;
  logic classd_phase1_cyc_shadowed_re;
  logic classd_phase1_cyc_shadowed_we;
  logic [31:0] classd_phase1_cyc_shadowed_qs;
  logic [31:0] classd_phase1_cyc_shadowed_wd;
  logic classd_phase1_cyc_shadowed_storage_err;
  logic classd_phase1_cyc_shadowed_update_err;
  logic classd_phase2_cyc_shadowed_re;
  logic classd_phase2_cyc_shadowed_we;
  logic [31:0] classd_phase2_cyc_shadowed_qs;
  logic [31:0] classd_phase2_cyc_shadowed_wd;
  logic classd_phase2_cyc_shadowed_storage_err;
  logic classd_phase2_cyc_shadowed_update_err;
  logic classd_phase3_cyc_shadowed_re;
  logic classd_phase3_cyc_shadowed_we;
  logic [31:0] classd_phase3_cyc_shadowed_qs;
  logic [31:0] classd_phase3_cyc_shadowed_wd;
  logic classd_phase3_cyc_shadowed_storage_err;
  logic classd_phase3_cyc_shadowed_update_err;
  logic classd_esc_cnt_re;
  logic [31:0] classd_esc_cnt_qs;
  logic classd_state_re;
  logic [2:0] classd_state_qs;

  // Register instances
  // R[intr_state]: V(False)
  //   F[classa]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_classa (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_classa_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.classa.de),
    .d      (hw2reg.intr_state.classa.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.classa.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_classa_qs)
  );

  //   F[classb]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_classb (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_classb_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.classb.de),
    .d      (hw2reg.intr_state.classb.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.classb.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_classb_qs)
  );

  //   F[classc]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_classc (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_classc_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.classc.de),
    .d      (hw2reg.intr_state.classc.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.classc.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_classc_qs)
  );

  //   F[classd]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_classd (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_classd_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.classd.de),
    .d      (hw2reg.intr_state.classd.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.classd.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_classd_qs)
  );


  // R[intr_enable]: V(False)
  //   F[classa]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_classa (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_classa_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.classa.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_classa_qs)
  );

  //   F[classb]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_classb (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_classb_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.classb.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_classb_qs)
  );

  //   F[classc]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_classc (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_classc_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.classc.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_classc_qs)
  );

  //   F[classd]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_classd (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_classd_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.classd.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_classd_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [3:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  //   F[classa]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_classa (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_classa_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.classa.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.classa.qe = intr_test_qe;

  //   F[classb]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_classb (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_classb_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[1]),
    .q      (reg2hw.intr_test.classb.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.classb.qe = intr_test_qe;

  //   F[classc]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_classc (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_classc_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[2]),
    .q      (reg2hw.intr_test.classc.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.classc.qe = intr_test_qe;

  //   F[classd]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_classd (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_classd_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[3]),
    .q      (reg2hw.intr_test.classd.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.classd.qe = intr_test_qe;


  // R[ping_timer_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_ping_timer_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ping_timer_regwen_we),
    .wd     (ping_timer_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ping_timer_regwen_qs)
  );


  // R[ping_timeout_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic ping_timeout_cyc_shadowed_gated_we;
  assign ping_timeout_cyc_shadowed_gated_we = ping_timeout_cyc_shadowed_we & ping_timer_regwen_qs;
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h100),
    .Mubi    (1'b0)
  ) u_ping_timeout_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ping_timeout_cyc_shadowed_re),
    .we     (ping_timeout_cyc_shadowed_gated_we),
    .wd     (ping_timeout_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ping_timeout_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (ping_timeout_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ping_timeout_cyc_shadowed_update_err),
    .err_storage (ping_timeout_cyc_shadowed_storage_err)
  );


  // R[ping_timer_en_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic ping_timer_en_shadowed_gated_we;
  assign ping_timer_en_shadowed_gated_we = ping_timer_en_shadowed_we & ping_timer_regwen_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1S),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ping_timer_en_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ping_timer_en_shadowed_re),
    .we     (ping_timer_en_shadowed_gated_we),
    .wd     (ping_timer_en_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ping_timer_en_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (ping_timer_en_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ping_timer_en_shadowed_update_err),
    .err_storage (ping_timer_en_shadowed_storage_err)
  );


  // Subregister 0 of Multireg alert_regwen
  // R[alert_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_0_we),
    .wd     (alert_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_0_qs)
  );


  // Subregister 1 of Multireg alert_regwen
  // R[alert_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_1_we),
    .wd     (alert_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_1_qs)
  );


  // Subregister 2 of Multireg alert_regwen
  // R[alert_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_2_we),
    .wd     (alert_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_2_qs)
  );


  // Subregister 3 of Multireg alert_regwen
  // R[alert_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_3_we),
    .wd     (alert_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_3_qs)
  );


  // Subregister 4 of Multireg alert_regwen
  // R[alert_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_4_we),
    .wd     (alert_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_4_qs)
  );


  // Subregister 5 of Multireg alert_regwen
  // R[alert_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_5_we),
    .wd     (alert_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_5_qs)
  );


  // Subregister 6 of Multireg alert_regwen
  // R[alert_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_6_we),
    .wd     (alert_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_6_qs)
  );


  // Subregister 7 of Multireg alert_regwen
  // R[alert_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_7_we),
    .wd     (alert_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_7_qs)
  );


  // Subregister 8 of Multireg alert_regwen
  // R[alert_regwen_8]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_8_we),
    .wd     (alert_regwen_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_8_qs)
  );


  // Subregister 9 of Multireg alert_regwen
  // R[alert_regwen_9]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_9_we),
    .wd     (alert_regwen_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_9_qs)
  );


  // Subregister 10 of Multireg alert_regwen
  // R[alert_regwen_10]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_10_we),
    .wd     (alert_regwen_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_10_qs)
  );


  // Subregister 11 of Multireg alert_regwen
  // R[alert_regwen_11]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_11_we),
    .wd     (alert_regwen_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_11_qs)
  );


  // Subregister 12 of Multireg alert_regwen
  // R[alert_regwen_12]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_12_we),
    .wd     (alert_regwen_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_12_qs)
  );


  // Subregister 13 of Multireg alert_regwen
  // R[alert_regwen_13]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_13_we),
    .wd     (alert_regwen_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_13_qs)
  );


  // Subregister 14 of Multireg alert_regwen
  // R[alert_regwen_14]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_14_we),
    .wd     (alert_regwen_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_14_qs)
  );


  // Subregister 15 of Multireg alert_regwen
  // R[alert_regwen_15]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_15_we),
    .wd     (alert_regwen_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_15_qs)
  );


  // Subregister 16 of Multireg alert_regwen
  // R[alert_regwen_16]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_16_we),
    .wd     (alert_regwen_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_16_qs)
  );


  // Subregister 17 of Multireg alert_regwen
  // R[alert_regwen_17]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_17_we),
    .wd     (alert_regwen_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_17_qs)
  );


  // Subregister 18 of Multireg alert_regwen
  // R[alert_regwen_18]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_18_we),
    .wd     (alert_regwen_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_18_qs)
  );


  // Subregister 19 of Multireg alert_regwen
  // R[alert_regwen_19]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_19_we),
    .wd     (alert_regwen_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_19_qs)
  );


  // Subregister 20 of Multireg alert_regwen
  // R[alert_regwen_20]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_20_we),
    .wd     (alert_regwen_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_20_qs)
  );


  // Subregister 21 of Multireg alert_regwen
  // R[alert_regwen_21]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_21_we),
    .wd     (alert_regwen_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_21_qs)
  );


  // Subregister 22 of Multireg alert_regwen
  // R[alert_regwen_22]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_22_we),
    .wd     (alert_regwen_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_22_qs)
  );


  // Subregister 23 of Multireg alert_regwen
  // R[alert_regwen_23]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_23_we),
    .wd     (alert_regwen_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_23_qs)
  );


  // Subregister 24 of Multireg alert_regwen
  // R[alert_regwen_24]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_24_we),
    .wd     (alert_regwen_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_24_qs)
  );


  // Subregister 25 of Multireg alert_regwen
  // R[alert_regwen_25]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_25_we),
    .wd     (alert_regwen_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_25_qs)
  );


  // Subregister 26 of Multireg alert_regwen
  // R[alert_regwen_26]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_26_we),
    .wd     (alert_regwen_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_26_qs)
  );


  // Subregister 27 of Multireg alert_regwen
  // R[alert_regwen_27]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_alert_regwen_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_regwen_27_we),
    .wd     (alert_regwen_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_regwen[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_regwen_27_qs)
  );


  // Subregister 0 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_0]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_0_gated_we;
  assign alert_en_shadowed_0_gated_we = alert_en_shadowed_0_we & alert_regwen_0_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_0_re),
    .we     (alert_en_shadowed_0_gated_we),
    .wd     (alert_en_shadowed_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_0_update_err),
    .err_storage (alert_en_shadowed_0_storage_err)
  );


  // Subregister 1 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_1]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_1_gated_we;
  assign alert_en_shadowed_1_gated_we = alert_en_shadowed_1_we & alert_regwen_1_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_1_re),
    .we     (alert_en_shadowed_1_gated_we),
    .wd     (alert_en_shadowed_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_1_update_err),
    .err_storage (alert_en_shadowed_1_storage_err)
  );


  // Subregister 2 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_2]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_2_gated_we;
  assign alert_en_shadowed_2_gated_we = alert_en_shadowed_2_we & alert_regwen_2_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_2_re),
    .we     (alert_en_shadowed_2_gated_we),
    .wd     (alert_en_shadowed_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_2_update_err),
    .err_storage (alert_en_shadowed_2_storage_err)
  );


  // Subregister 3 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_3]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_3_gated_we;
  assign alert_en_shadowed_3_gated_we = alert_en_shadowed_3_we & alert_regwen_3_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_3_re),
    .we     (alert_en_shadowed_3_gated_we),
    .wd     (alert_en_shadowed_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_3_update_err),
    .err_storage (alert_en_shadowed_3_storage_err)
  );


  // Subregister 4 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_4]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_4_gated_we;
  assign alert_en_shadowed_4_gated_we = alert_en_shadowed_4_we & alert_regwen_4_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_4_re),
    .we     (alert_en_shadowed_4_gated_we),
    .wd     (alert_en_shadowed_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_4_update_err),
    .err_storage (alert_en_shadowed_4_storage_err)
  );


  // Subregister 5 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_5]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_5_gated_we;
  assign alert_en_shadowed_5_gated_we = alert_en_shadowed_5_we & alert_regwen_5_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_5_re),
    .we     (alert_en_shadowed_5_gated_we),
    .wd     (alert_en_shadowed_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_5_update_err),
    .err_storage (alert_en_shadowed_5_storage_err)
  );


  // Subregister 6 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_6]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_6_gated_we;
  assign alert_en_shadowed_6_gated_we = alert_en_shadowed_6_we & alert_regwen_6_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_6_re),
    .we     (alert_en_shadowed_6_gated_we),
    .wd     (alert_en_shadowed_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_6_update_err),
    .err_storage (alert_en_shadowed_6_storage_err)
  );


  // Subregister 7 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_7]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_7_gated_we;
  assign alert_en_shadowed_7_gated_we = alert_en_shadowed_7_we & alert_regwen_7_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_7_re),
    .we     (alert_en_shadowed_7_gated_we),
    .wd     (alert_en_shadowed_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_7_update_err),
    .err_storage (alert_en_shadowed_7_storage_err)
  );


  // Subregister 8 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_8]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_8_gated_we;
  assign alert_en_shadowed_8_gated_we = alert_en_shadowed_8_we & alert_regwen_8_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_8_re),
    .we     (alert_en_shadowed_8_gated_we),
    .wd     (alert_en_shadowed_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_8_update_err),
    .err_storage (alert_en_shadowed_8_storage_err)
  );


  // Subregister 9 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_9]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_9_gated_we;
  assign alert_en_shadowed_9_gated_we = alert_en_shadowed_9_we & alert_regwen_9_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_9_re),
    .we     (alert_en_shadowed_9_gated_we),
    .wd     (alert_en_shadowed_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_9_update_err),
    .err_storage (alert_en_shadowed_9_storage_err)
  );


  // Subregister 10 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_10]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_10_gated_we;
  assign alert_en_shadowed_10_gated_we = alert_en_shadowed_10_we & alert_regwen_10_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_10_re),
    .we     (alert_en_shadowed_10_gated_we),
    .wd     (alert_en_shadowed_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_10_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_10_update_err),
    .err_storage (alert_en_shadowed_10_storage_err)
  );


  // Subregister 11 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_11]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_11_gated_we;
  assign alert_en_shadowed_11_gated_we = alert_en_shadowed_11_we & alert_regwen_11_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_11_re),
    .we     (alert_en_shadowed_11_gated_we),
    .wd     (alert_en_shadowed_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_11_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_11_update_err),
    .err_storage (alert_en_shadowed_11_storage_err)
  );


  // Subregister 12 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_12]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_12_gated_we;
  assign alert_en_shadowed_12_gated_we = alert_en_shadowed_12_we & alert_regwen_12_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_12_re),
    .we     (alert_en_shadowed_12_gated_we),
    .wd     (alert_en_shadowed_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_12_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_12_update_err),
    .err_storage (alert_en_shadowed_12_storage_err)
  );


  // Subregister 13 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_13]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_13_gated_we;
  assign alert_en_shadowed_13_gated_we = alert_en_shadowed_13_we & alert_regwen_13_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_13_re),
    .we     (alert_en_shadowed_13_gated_we),
    .wd     (alert_en_shadowed_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_13_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_13_update_err),
    .err_storage (alert_en_shadowed_13_storage_err)
  );


  // Subregister 14 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_14]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_14_gated_we;
  assign alert_en_shadowed_14_gated_we = alert_en_shadowed_14_we & alert_regwen_14_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_14_re),
    .we     (alert_en_shadowed_14_gated_we),
    .wd     (alert_en_shadowed_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_14_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_14_update_err),
    .err_storage (alert_en_shadowed_14_storage_err)
  );


  // Subregister 15 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_15]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_15_gated_we;
  assign alert_en_shadowed_15_gated_we = alert_en_shadowed_15_we & alert_regwen_15_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_15_re),
    .we     (alert_en_shadowed_15_gated_we),
    .wd     (alert_en_shadowed_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_15_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_15_update_err),
    .err_storage (alert_en_shadowed_15_storage_err)
  );


  // Subregister 16 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_16]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_16_gated_we;
  assign alert_en_shadowed_16_gated_we = alert_en_shadowed_16_we & alert_regwen_16_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_16_re),
    .we     (alert_en_shadowed_16_gated_we),
    .wd     (alert_en_shadowed_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_16_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_16_update_err),
    .err_storage (alert_en_shadowed_16_storage_err)
  );


  // Subregister 17 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_17]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_17_gated_we;
  assign alert_en_shadowed_17_gated_we = alert_en_shadowed_17_we & alert_regwen_17_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_17_re),
    .we     (alert_en_shadowed_17_gated_we),
    .wd     (alert_en_shadowed_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_17_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_17_update_err),
    .err_storage (alert_en_shadowed_17_storage_err)
  );


  // Subregister 18 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_18]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_18_gated_we;
  assign alert_en_shadowed_18_gated_we = alert_en_shadowed_18_we & alert_regwen_18_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_18_re),
    .we     (alert_en_shadowed_18_gated_we),
    .wd     (alert_en_shadowed_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_18_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_18_update_err),
    .err_storage (alert_en_shadowed_18_storage_err)
  );


  // Subregister 19 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_19]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_19_gated_we;
  assign alert_en_shadowed_19_gated_we = alert_en_shadowed_19_we & alert_regwen_19_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_19_re),
    .we     (alert_en_shadowed_19_gated_we),
    .wd     (alert_en_shadowed_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_19_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_19_update_err),
    .err_storage (alert_en_shadowed_19_storage_err)
  );


  // Subregister 20 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_20]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_20_gated_we;
  assign alert_en_shadowed_20_gated_we = alert_en_shadowed_20_we & alert_regwen_20_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_20_re),
    .we     (alert_en_shadowed_20_gated_we),
    .wd     (alert_en_shadowed_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_20_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_20_update_err),
    .err_storage (alert_en_shadowed_20_storage_err)
  );


  // Subregister 21 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_21]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_21_gated_we;
  assign alert_en_shadowed_21_gated_we = alert_en_shadowed_21_we & alert_regwen_21_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_21_re),
    .we     (alert_en_shadowed_21_gated_we),
    .wd     (alert_en_shadowed_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_21_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_21_update_err),
    .err_storage (alert_en_shadowed_21_storage_err)
  );


  // Subregister 22 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_22]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_22_gated_we;
  assign alert_en_shadowed_22_gated_we = alert_en_shadowed_22_we & alert_regwen_22_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_22_re),
    .we     (alert_en_shadowed_22_gated_we),
    .wd     (alert_en_shadowed_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_22_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_22_update_err),
    .err_storage (alert_en_shadowed_22_storage_err)
  );


  // Subregister 23 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_23]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_23_gated_we;
  assign alert_en_shadowed_23_gated_we = alert_en_shadowed_23_we & alert_regwen_23_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_23_re),
    .we     (alert_en_shadowed_23_gated_we),
    .wd     (alert_en_shadowed_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_23_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_23_update_err),
    .err_storage (alert_en_shadowed_23_storage_err)
  );


  // Subregister 24 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_24]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_24_gated_we;
  assign alert_en_shadowed_24_gated_we = alert_en_shadowed_24_we & alert_regwen_24_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_24_re),
    .we     (alert_en_shadowed_24_gated_we),
    .wd     (alert_en_shadowed_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_24_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_24_update_err),
    .err_storage (alert_en_shadowed_24_storage_err)
  );


  // Subregister 25 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_25]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_25_gated_we;
  assign alert_en_shadowed_25_gated_we = alert_en_shadowed_25_we & alert_regwen_25_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_25_re),
    .we     (alert_en_shadowed_25_gated_we),
    .wd     (alert_en_shadowed_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_25_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_25_update_err),
    .err_storage (alert_en_shadowed_25_storage_err)
  );


  // Subregister 26 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_26]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_26_gated_we;
  assign alert_en_shadowed_26_gated_we = alert_en_shadowed_26_we & alert_regwen_26_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_26_re),
    .we     (alert_en_shadowed_26_gated_we),
    .wd     (alert_en_shadowed_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_26_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_26_update_err),
    .err_storage (alert_en_shadowed_26_storage_err)
  );


  // Subregister 27 of Multireg alert_en_shadowed
  // R[alert_en_shadowed_27]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_en_shadowed_27_gated_we;
  assign alert_en_shadowed_27_gated_we = alert_en_shadowed_27_we & alert_regwen_27_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_en_shadowed_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_en_shadowed_27_re),
    .we     (alert_en_shadowed_27_gated_we),
    .wd     (alert_en_shadowed_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_en_shadowed[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_en_shadowed_27_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_en_shadowed_27_update_err),
    .err_storage (alert_en_shadowed_27_storage_err)
  );


  // Subregister 0 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_0]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_0_gated_we;
  assign alert_class_shadowed_0_gated_we = alert_class_shadowed_0_we & alert_regwen_0_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_0_re),
    .we     (alert_class_shadowed_0_gated_we),
    .wd     (alert_class_shadowed_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_0_update_err),
    .err_storage (alert_class_shadowed_0_storage_err)
  );


  // Subregister 1 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_1]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_1_gated_we;
  assign alert_class_shadowed_1_gated_we = alert_class_shadowed_1_we & alert_regwen_1_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_1_re),
    .we     (alert_class_shadowed_1_gated_we),
    .wd     (alert_class_shadowed_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_1_update_err),
    .err_storage (alert_class_shadowed_1_storage_err)
  );


  // Subregister 2 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_2]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_2_gated_we;
  assign alert_class_shadowed_2_gated_we = alert_class_shadowed_2_we & alert_regwen_2_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_2_re),
    .we     (alert_class_shadowed_2_gated_we),
    .wd     (alert_class_shadowed_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_2_update_err),
    .err_storage (alert_class_shadowed_2_storage_err)
  );


  // Subregister 3 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_3]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_3_gated_we;
  assign alert_class_shadowed_3_gated_we = alert_class_shadowed_3_we & alert_regwen_3_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_3_re),
    .we     (alert_class_shadowed_3_gated_we),
    .wd     (alert_class_shadowed_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_3_update_err),
    .err_storage (alert_class_shadowed_3_storage_err)
  );


  // Subregister 4 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_4]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_4_gated_we;
  assign alert_class_shadowed_4_gated_we = alert_class_shadowed_4_we & alert_regwen_4_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_4_re),
    .we     (alert_class_shadowed_4_gated_we),
    .wd     (alert_class_shadowed_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_4_update_err),
    .err_storage (alert_class_shadowed_4_storage_err)
  );


  // Subregister 5 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_5]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_5_gated_we;
  assign alert_class_shadowed_5_gated_we = alert_class_shadowed_5_we & alert_regwen_5_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_5_re),
    .we     (alert_class_shadowed_5_gated_we),
    .wd     (alert_class_shadowed_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_5_update_err),
    .err_storage (alert_class_shadowed_5_storage_err)
  );


  // Subregister 6 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_6]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_6_gated_we;
  assign alert_class_shadowed_6_gated_we = alert_class_shadowed_6_we & alert_regwen_6_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_6_re),
    .we     (alert_class_shadowed_6_gated_we),
    .wd     (alert_class_shadowed_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_6_update_err),
    .err_storage (alert_class_shadowed_6_storage_err)
  );


  // Subregister 7 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_7]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_7_gated_we;
  assign alert_class_shadowed_7_gated_we = alert_class_shadowed_7_we & alert_regwen_7_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_7_re),
    .we     (alert_class_shadowed_7_gated_we),
    .wd     (alert_class_shadowed_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_7_update_err),
    .err_storage (alert_class_shadowed_7_storage_err)
  );


  // Subregister 8 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_8]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_8_gated_we;
  assign alert_class_shadowed_8_gated_we = alert_class_shadowed_8_we & alert_regwen_8_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_8_re),
    .we     (alert_class_shadowed_8_gated_we),
    .wd     (alert_class_shadowed_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_8_update_err),
    .err_storage (alert_class_shadowed_8_storage_err)
  );


  // Subregister 9 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_9]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_9_gated_we;
  assign alert_class_shadowed_9_gated_we = alert_class_shadowed_9_we & alert_regwen_9_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_9_re),
    .we     (alert_class_shadowed_9_gated_we),
    .wd     (alert_class_shadowed_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_9_update_err),
    .err_storage (alert_class_shadowed_9_storage_err)
  );


  // Subregister 10 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_10]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_10_gated_we;
  assign alert_class_shadowed_10_gated_we = alert_class_shadowed_10_we & alert_regwen_10_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_10_re),
    .we     (alert_class_shadowed_10_gated_we),
    .wd     (alert_class_shadowed_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_10_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_10_update_err),
    .err_storage (alert_class_shadowed_10_storage_err)
  );


  // Subregister 11 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_11]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_11_gated_we;
  assign alert_class_shadowed_11_gated_we = alert_class_shadowed_11_we & alert_regwen_11_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_11_re),
    .we     (alert_class_shadowed_11_gated_we),
    .wd     (alert_class_shadowed_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_11_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_11_update_err),
    .err_storage (alert_class_shadowed_11_storage_err)
  );


  // Subregister 12 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_12]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_12_gated_we;
  assign alert_class_shadowed_12_gated_we = alert_class_shadowed_12_we & alert_regwen_12_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_12_re),
    .we     (alert_class_shadowed_12_gated_we),
    .wd     (alert_class_shadowed_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_12_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_12_update_err),
    .err_storage (alert_class_shadowed_12_storage_err)
  );


  // Subregister 13 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_13]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_13_gated_we;
  assign alert_class_shadowed_13_gated_we = alert_class_shadowed_13_we & alert_regwen_13_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_13_re),
    .we     (alert_class_shadowed_13_gated_we),
    .wd     (alert_class_shadowed_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_13_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_13_update_err),
    .err_storage (alert_class_shadowed_13_storage_err)
  );


  // Subregister 14 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_14]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_14_gated_we;
  assign alert_class_shadowed_14_gated_we = alert_class_shadowed_14_we & alert_regwen_14_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_14_re),
    .we     (alert_class_shadowed_14_gated_we),
    .wd     (alert_class_shadowed_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_14_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_14_update_err),
    .err_storage (alert_class_shadowed_14_storage_err)
  );


  // Subregister 15 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_15]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_15_gated_we;
  assign alert_class_shadowed_15_gated_we = alert_class_shadowed_15_we & alert_regwen_15_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_15_re),
    .we     (alert_class_shadowed_15_gated_we),
    .wd     (alert_class_shadowed_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_15_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_15_update_err),
    .err_storage (alert_class_shadowed_15_storage_err)
  );


  // Subregister 16 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_16]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_16_gated_we;
  assign alert_class_shadowed_16_gated_we = alert_class_shadowed_16_we & alert_regwen_16_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_16_re),
    .we     (alert_class_shadowed_16_gated_we),
    .wd     (alert_class_shadowed_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_16_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_16_update_err),
    .err_storage (alert_class_shadowed_16_storage_err)
  );


  // Subregister 17 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_17]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_17_gated_we;
  assign alert_class_shadowed_17_gated_we = alert_class_shadowed_17_we & alert_regwen_17_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_17_re),
    .we     (alert_class_shadowed_17_gated_we),
    .wd     (alert_class_shadowed_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_17_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_17_update_err),
    .err_storage (alert_class_shadowed_17_storage_err)
  );


  // Subregister 18 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_18]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_18_gated_we;
  assign alert_class_shadowed_18_gated_we = alert_class_shadowed_18_we & alert_regwen_18_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_18_re),
    .we     (alert_class_shadowed_18_gated_we),
    .wd     (alert_class_shadowed_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_18_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_18_update_err),
    .err_storage (alert_class_shadowed_18_storage_err)
  );


  // Subregister 19 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_19]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_19_gated_we;
  assign alert_class_shadowed_19_gated_we = alert_class_shadowed_19_we & alert_regwen_19_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_19_re),
    .we     (alert_class_shadowed_19_gated_we),
    .wd     (alert_class_shadowed_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_19_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_19_update_err),
    .err_storage (alert_class_shadowed_19_storage_err)
  );


  // Subregister 20 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_20]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_20_gated_we;
  assign alert_class_shadowed_20_gated_we = alert_class_shadowed_20_we & alert_regwen_20_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_20_re),
    .we     (alert_class_shadowed_20_gated_we),
    .wd     (alert_class_shadowed_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_20_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_20_update_err),
    .err_storage (alert_class_shadowed_20_storage_err)
  );


  // Subregister 21 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_21]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_21_gated_we;
  assign alert_class_shadowed_21_gated_we = alert_class_shadowed_21_we & alert_regwen_21_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_21_re),
    .we     (alert_class_shadowed_21_gated_we),
    .wd     (alert_class_shadowed_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_21_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_21_update_err),
    .err_storage (alert_class_shadowed_21_storage_err)
  );


  // Subregister 22 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_22]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_22_gated_we;
  assign alert_class_shadowed_22_gated_we = alert_class_shadowed_22_we & alert_regwen_22_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_22_re),
    .we     (alert_class_shadowed_22_gated_we),
    .wd     (alert_class_shadowed_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_22_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_22_update_err),
    .err_storage (alert_class_shadowed_22_storage_err)
  );


  // Subregister 23 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_23]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_23_gated_we;
  assign alert_class_shadowed_23_gated_we = alert_class_shadowed_23_we & alert_regwen_23_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_23_re),
    .we     (alert_class_shadowed_23_gated_we),
    .wd     (alert_class_shadowed_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_23_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_23_update_err),
    .err_storage (alert_class_shadowed_23_storage_err)
  );


  // Subregister 24 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_24]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_24_gated_we;
  assign alert_class_shadowed_24_gated_we = alert_class_shadowed_24_we & alert_regwen_24_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_24_re),
    .we     (alert_class_shadowed_24_gated_we),
    .wd     (alert_class_shadowed_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_24_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_24_update_err),
    .err_storage (alert_class_shadowed_24_storage_err)
  );


  // Subregister 25 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_25]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_25_gated_we;
  assign alert_class_shadowed_25_gated_we = alert_class_shadowed_25_we & alert_regwen_25_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_25_re),
    .we     (alert_class_shadowed_25_gated_we),
    .wd     (alert_class_shadowed_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_25_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_25_update_err),
    .err_storage (alert_class_shadowed_25_storage_err)
  );


  // Subregister 26 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_26]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_26_gated_we;
  assign alert_class_shadowed_26_gated_we = alert_class_shadowed_26_we & alert_regwen_26_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_26_re),
    .we     (alert_class_shadowed_26_gated_we),
    .wd     (alert_class_shadowed_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_26_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_26_update_err),
    .err_storage (alert_class_shadowed_26_storage_err)
  );


  // Subregister 27 of Multireg alert_class_shadowed
  // R[alert_class_shadowed_27]: V(False)
  // Create REGWEN-gated WE signal
  logic alert_class_shadowed_27_gated_we;
  assign alert_class_shadowed_27_gated_we = alert_class_shadowed_27_we & alert_regwen_27_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_alert_class_shadowed_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (alert_class_shadowed_27_re),
    .we     (alert_class_shadowed_27_gated_we),
    .wd     (alert_class_shadowed_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_class_shadowed[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_class_shadowed_27_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (alert_class_shadowed_27_update_err),
    .err_storage (alert_class_shadowed_27_storage_err)
  );


  // Subregister 0 of Multireg alert_cause
  // R[alert_cause_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_0_we),
    .wd     (alert_cause_0_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[0].de),
    .d      (hw2reg.alert_cause[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_0_qs)
  );


  // Subregister 1 of Multireg alert_cause
  // R[alert_cause_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_1_we),
    .wd     (alert_cause_1_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[1].de),
    .d      (hw2reg.alert_cause[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_1_qs)
  );


  // Subregister 2 of Multireg alert_cause
  // R[alert_cause_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_2_we),
    .wd     (alert_cause_2_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[2].de),
    .d      (hw2reg.alert_cause[2].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_2_qs)
  );


  // Subregister 3 of Multireg alert_cause
  // R[alert_cause_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_3_we),
    .wd     (alert_cause_3_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[3].de),
    .d      (hw2reg.alert_cause[3].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_3_qs)
  );


  // Subregister 4 of Multireg alert_cause
  // R[alert_cause_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_4_we),
    .wd     (alert_cause_4_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[4].de),
    .d      (hw2reg.alert_cause[4].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_4_qs)
  );


  // Subregister 5 of Multireg alert_cause
  // R[alert_cause_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_5_we),
    .wd     (alert_cause_5_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[5].de),
    .d      (hw2reg.alert_cause[5].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_5_qs)
  );


  // Subregister 6 of Multireg alert_cause
  // R[alert_cause_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_6_we),
    .wd     (alert_cause_6_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[6].de),
    .d      (hw2reg.alert_cause[6].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_6_qs)
  );


  // Subregister 7 of Multireg alert_cause
  // R[alert_cause_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_7_we),
    .wd     (alert_cause_7_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[7].de),
    .d      (hw2reg.alert_cause[7].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_7_qs)
  );


  // Subregister 8 of Multireg alert_cause
  // R[alert_cause_8]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_8_we),
    .wd     (alert_cause_8_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[8].de),
    .d      (hw2reg.alert_cause[8].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_8_qs)
  );


  // Subregister 9 of Multireg alert_cause
  // R[alert_cause_9]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_9_we),
    .wd     (alert_cause_9_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[9].de),
    .d      (hw2reg.alert_cause[9].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_9_qs)
  );


  // Subregister 10 of Multireg alert_cause
  // R[alert_cause_10]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_10_we),
    .wd     (alert_cause_10_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[10].de),
    .d      (hw2reg.alert_cause[10].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_10_qs)
  );


  // Subregister 11 of Multireg alert_cause
  // R[alert_cause_11]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_11_we),
    .wd     (alert_cause_11_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[11].de),
    .d      (hw2reg.alert_cause[11].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_11_qs)
  );


  // Subregister 12 of Multireg alert_cause
  // R[alert_cause_12]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_12_we),
    .wd     (alert_cause_12_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[12].de),
    .d      (hw2reg.alert_cause[12].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_12_qs)
  );


  // Subregister 13 of Multireg alert_cause
  // R[alert_cause_13]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_13_we),
    .wd     (alert_cause_13_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[13].de),
    .d      (hw2reg.alert_cause[13].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_13_qs)
  );


  // Subregister 14 of Multireg alert_cause
  // R[alert_cause_14]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_14_we),
    .wd     (alert_cause_14_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[14].de),
    .d      (hw2reg.alert_cause[14].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_14_qs)
  );


  // Subregister 15 of Multireg alert_cause
  // R[alert_cause_15]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_15_we),
    .wd     (alert_cause_15_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[15].de),
    .d      (hw2reg.alert_cause[15].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_15_qs)
  );


  // Subregister 16 of Multireg alert_cause
  // R[alert_cause_16]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_16_we),
    .wd     (alert_cause_16_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[16].de),
    .d      (hw2reg.alert_cause[16].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_16_qs)
  );


  // Subregister 17 of Multireg alert_cause
  // R[alert_cause_17]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_17_we),
    .wd     (alert_cause_17_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[17].de),
    .d      (hw2reg.alert_cause[17].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_17_qs)
  );


  // Subregister 18 of Multireg alert_cause
  // R[alert_cause_18]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_18_we),
    .wd     (alert_cause_18_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[18].de),
    .d      (hw2reg.alert_cause[18].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_18_qs)
  );


  // Subregister 19 of Multireg alert_cause
  // R[alert_cause_19]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_19_we),
    .wd     (alert_cause_19_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[19].de),
    .d      (hw2reg.alert_cause[19].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_19_qs)
  );


  // Subregister 20 of Multireg alert_cause
  // R[alert_cause_20]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_20_we),
    .wd     (alert_cause_20_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[20].de),
    .d      (hw2reg.alert_cause[20].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_20_qs)
  );


  // Subregister 21 of Multireg alert_cause
  // R[alert_cause_21]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_21_we),
    .wd     (alert_cause_21_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[21].de),
    .d      (hw2reg.alert_cause[21].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_21_qs)
  );


  // Subregister 22 of Multireg alert_cause
  // R[alert_cause_22]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_22_we),
    .wd     (alert_cause_22_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[22].de),
    .d      (hw2reg.alert_cause[22].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_22_qs)
  );


  // Subregister 23 of Multireg alert_cause
  // R[alert_cause_23]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_23_we),
    .wd     (alert_cause_23_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[23].de),
    .d      (hw2reg.alert_cause[23].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_23_qs)
  );


  // Subregister 24 of Multireg alert_cause
  // R[alert_cause_24]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_24_we),
    .wd     (alert_cause_24_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[24].de),
    .d      (hw2reg.alert_cause[24].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_24_qs)
  );


  // Subregister 25 of Multireg alert_cause
  // R[alert_cause_25]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_25_we),
    .wd     (alert_cause_25_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[25].de),
    .d      (hw2reg.alert_cause[25].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_25_qs)
  );


  // Subregister 26 of Multireg alert_cause
  // R[alert_cause_26]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_26_we),
    .wd     (alert_cause_26_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[26].de),
    .d      (hw2reg.alert_cause[26].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_26_qs)
  );


  // Subregister 27 of Multireg alert_cause
  // R[alert_cause_27]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_cause_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_cause_27_we),
    .wd     (alert_cause_27_wd),

    // from internal hardware
    .de     (hw2reg.alert_cause[27].de),
    .d      (hw2reg.alert_cause[27].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.alert_cause[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (alert_cause_27_qs)
  );


  // Subregister 0 of Multireg loc_alert_regwen
  // R[loc_alert_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_loc_alert_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_regwen_0_we),
    .wd     (loc_alert_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_regwen_0_qs)
  );


  // Subregister 1 of Multireg loc_alert_regwen
  // R[loc_alert_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_loc_alert_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_regwen_1_we),
    .wd     (loc_alert_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_regwen_1_qs)
  );


  // Subregister 2 of Multireg loc_alert_regwen
  // R[loc_alert_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_loc_alert_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_regwen_2_we),
    .wd     (loc_alert_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_regwen_2_qs)
  );


  // Subregister 3 of Multireg loc_alert_regwen
  // R[loc_alert_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_loc_alert_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_regwen_3_we),
    .wd     (loc_alert_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_regwen_3_qs)
  );


  // Subregister 4 of Multireg loc_alert_regwen
  // R[loc_alert_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_loc_alert_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_regwen_4_we),
    .wd     (loc_alert_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_regwen_4_qs)
  );


  // Subregister 5 of Multireg loc_alert_regwen
  // R[loc_alert_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_loc_alert_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_regwen_5_we),
    .wd     (loc_alert_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_regwen_5_qs)
  );


  // Subregister 6 of Multireg loc_alert_regwen
  // R[loc_alert_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_loc_alert_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_regwen_6_we),
    .wd     (loc_alert_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_regwen_6_qs)
  );


  // Subregister 0 of Multireg loc_alert_en_shadowed
  // R[loc_alert_en_shadowed_0]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_en_shadowed_0_gated_we;
  assign loc_alert_en_shadowed_0_gated_we = loc_alert_en_shadowed_0_we & loc_alert_regwen_0_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_en_shadowed_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_en_shadowed_0_re),
    .we     (loc_alert_en_shadowed_0_gated_we),
    .wd     (loc_alert_en_shadowed_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_en_shadowed[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_en_shadowed_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_en_shadowed_0_update_err),
    .err_storage (loc_alert_en_shadowed_0_storage_err)
  );


  // Subregister 1 of Multireg loc_alert_en_shadowed
  // R[loc_alert_en_shadowed_1]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_en_shadowed_1_gated_we;
  assign loc_alert_en_shadowed_1_gated_we = loc_alert_en_shadowed_1_we & loc_alert_regwen_1_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_en_shadowed_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_en_shadowed_1_re),
    .we     (loc_alert_en_shadowed_1_gated_we),
    .wd     (loc_alert_en_shadowed_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_en_shadowed[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_en_shadowed_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_en_shadowed_1_update_err),
    .err_storage (loc_alert_en_shadowed_1_storage_err)
  );


  // Subregister 2 of Multireg loc_alert_en_shadowed
  // R[loc_alert_en_shadowed_2]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_en_shadowed_2_gated_we;
  assign loc_alert_en_shadowed_2_gated_we = loc_alert_en_shadowed_2_we & loc_alert_regwen_2_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_en_shadowed_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_en_shadowed_2_re),
    .we     (loc_alert_en_shadowed_2_gated_we),
    .wd     (loc_alert_en_shadowed_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_en_shadowed[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_en_shadowed_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_en_shadowed_2_update_err),
    .err_storage (loc_alert_en_shadowed_2_storage_err)
  );


  // Subregister 3 of Multireg loc_alert_en_shadowed
  // R[loc_alert_en_shadowed_3]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_en_shadowed_3_gated_we;
  assign loc_alert_en_shadowed_3_gated_we = loc_alert_en_shadowed_3_we & loc_alert_regwen_3_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_en_shadowed_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_en_shadowed_3_re),
    .we     (loc_alert_en_shadowed_3_gated_we),
    .wd     (loc_alert_en_shadowed_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_en_shadowed[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_en_shadowed_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_en_shadowed_3_update_err),
    .err_storage (loc_alert_en_shadowed_3_storage_err)
  );


  // Subregister 4 of Multireg loc_alert_en_shadowed
  // R[loc_alert_en_shadowed_4]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_en_shadowed_4_gated_we;
  assign loc_alert_en_shadowed_4_gated_we = loc_alert_en_shadowed_4_we & loc_alert_regwen_4_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_en_shadowed_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_en_shadowed_4_re),
    .we     (loc_alert_en_shadowed_4_gated_we),
    .wd     (loc_alert_en_shadowed_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_en_shadowed[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_en_shadowed_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_en_shadowed_4_update_err),
    .err_storage (loc_alert_en_shadowed_4_storage_err)
  );


  // Subregister 5 of Multireg loc_alert_en_shadowed
  // R[loc_alert_en_shadowed_5]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_en_shadowed_5_gated_we;
  assign loc_alert_en_shadowed_5_gated_we = loc_alert_en_shadowed_5_we & loc_alert_regwen_5_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_en_shadowed_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_en_shadowed_5_re),
    .we     (loc_alert_en_shadowed_5_gated_we),
    .wd     (loc_alert_en_shadowed_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_en_shadowed[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_en_shadowed_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_en_shadowed_5_update_err),
    .err_storage (loc_alert_en_shadowed_5_storage_err)
  );


  // Subregister 6 of Multireg loc_alert_en_shadowed
  // R[loc_alert_en_shadowed_6]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_en_shadowed_6_gated_we;
  assign loc_alert_en_shadowed_6_gated_we = loc_alert_en_shadowed_6_we & loc_alert_regwen_6_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_en_shadowed_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_en_shadowed_6_re),
    .we     (loc_alert_en_shadowed_6_gated_we),
    .wd     (loc_alert_en_shadowed_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_en_shadowed[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_en_shadowed_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_en_shadowed_6_update_err),
    .err_storage (loc_alert_en_shadowed_6_storage_err)
  );


  // Subregister 0 of Multireg loc_alert_class_shadowed
  // R[loc_alert_class_shadowed_0]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_class_shadowed_0_gated_we;
  assign loc_alert_class_shadowed_0_gated_we =
    loc_alert_class_shadowed_0_we & loc_alert_regwen_0_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_class_shadowed_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_class_shadowed_0_re),
    .we     (loc_alert_class_shadowed_0_gated_we),
    .wd     (loc_alert_class_shadowed_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_class_shadowed[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_class_shadowed_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_class_shadowed_0_update_err),
    .err_storage (loc_alert_class_shadowed_0_storage_err)
  );


  // Subregister 1 of Multireg loc_alert_class_shadowed
  // R[loc_alert_class_shadowed_1]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_class_shadowed_1_gated_we;
  assign loc_alert_class_shadowed_1_gated_we =
    loc_alert_class_shadowed_1_we & loc_alert_regwen_1_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_class_shadowed_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_class_shadowed_1_re),
    .we     (loc_alert_class_shadowed_1_gated_we),
    .wd     (loc_alert_class_shadowed_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_class_shadowed[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_class_shadowed_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_class_shadowed_1_update_err),
    .err_storage (loc_alert_class_shadowed_1_storage_err)
  );


  // Subregister 2 of Multireg loc_alert_class_shadowed
  // R[loc_alert_class_shadowed_2]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_class_shadowed_2_gated_we;
  assign loc_alert_class_shadowed_2_gated_we =
    loc_alert_class_shadowed_2_we & loc_alert_regwen_2_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_class_shadowed_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_class_shadowed_2_re),
    .we     (loc_alert_class_shadowed_2_gated_we),
    .wd     (loc_alert_class_shadowed_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_class_shadowed[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_class_shadowed_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_class_shadowed_2_update_err),
    .err_storage (loc_alert_class_shadowed_2_storage_err)
  );


  // Subregister 3 of Multireg loc_alert_class_shadowed
  // R[loc_alert_class_shadowed_3]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_class_shadowed_3_gated_we;
  assign loc_alert_class_shadowed_3_gated_we =
    loc_alert_class_shadowed_3_we & loc_alert_regwen_3_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_class_shadowed_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_class_shadowed_3_re),
    .we     (loc_alert_class_shadowed_3_gated_we),
    .wd     (loc_alert_class_shadowed_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_class_shadowed[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_class_shadowed_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_class_shadowed_3_update_err),
    .err_storage (loc_alert_class_shadowed_3_storage_err)
  );


  // Subregister 4 of Multireg loc_alert_class_shadowed
  // R[loc_alert_class_shadowed_4]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_class_shadowed_4_gated_we;
  assign loc_alert_class_shadowed_4_gated_we =
    loc_alert_class_shadowed_4_we & loc_alert_regwen_4_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_class_shadowed_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_class_shadowed_4_re),
    .we     (loc_alert_class_shadowed_4_gated_we),
    .wd     (loc_alert_class_shadowed_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_class_shadowed[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_class_shadowed_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_class_shadowed_4_update_err),
    .err_storage (loc_alert_class_shadowed_4_storage_err)
  );


  // Subregister 5 of Multireg loc_alert_class_shadowed
  // R[loc_alert_class_shadowed_5]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_class_shadowed_5_gated_we;
  assign loc_alert_class_shadowed_5_gated_we =
    loc_alert_class_shadowed_5_we & loc_alert_regwen_5_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_class_shadowed_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_class_shadowed_5_re),
    .we     (loc_alert_class_shadowed_5_gated_we),
    .wd     (loc_alert_class_shadowed_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_class_shadowed[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_class_shadowed_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_class_shadowed_5_update_err),
    .err_storage (loc_alert_class_shadowed_5_storage_err)
  );


  // Subregister 6 of Multireg loc_alert_class_shadowed
  // R[loc_alert_class_shadowed_6]: V(False)
  // Create REGWEN-gated WE signal
  logic loc_alert_class_shadowed_6_gated_we;
  assign loc_alert_class_shadowed_6_gated_we =
    loc_alert_class_shadowed_6_we & loc_alert_regwen_6_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_class_shadowed_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (loc_alert_class_shadowed_6_re),
    .we     (loc_alert_class_shadowed_6_gated_we),
    .wd     (loc_alert_class_shadowed_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_class_shadowed[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_class_shadowed_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (loc_alert_class_shadowed_6_update_err),
    .err_storage (loc_alert_class_shadowed_6_storage_err)
  );


  // Subregister 0 of Multireg loc_alert_cause
  // R[loc_alert_cause_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_cause_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_cause_0_we),
    .wd     (loc_alert_cause_0_wd),

    // from internal hardware
    .de     (hw2reg.loc_alert_cause[0].de),
    .d      (hw2reg.loc_alert_cause[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_cause[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_cause_0_qs)
  );


  // Subregister 1 of Multireg loc_alert_cause
  // R[loc_alert_cause_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_cause_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_cause_1_we),
    .wd     (loc_alert_cause_1_wd),

    // from internal hardware
    .de     (hw2reg.loc_alert_cause[1].de),
    .d      (hw2reg.loc_alert_cause[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_cause[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_cause_1_qs)
  );


  // Subregister 2 of Multireg loc_alert_cause
  // R[loc_alert_cause_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_cause_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_cause_2_we),
    .wd     (loc_alert_cause_2_wd),

    // from internal hardware
    .de     (hw2reg.loc_alert_cause[2].de),
    .d      (hw2reg.loc_alert_cause[2].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_cause[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_cause_2_qs)
  );


  // Subregister 3 of Multireg loc_alert_cause
  // R[loc_alert_cause_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_cause_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_cause_3_we),
    .wd     (loc_alert_cause_3_wd),

    // from internal hardware
    .de     (hw2reg.loc_alert_cause[3].de),
    .d      (hw2reg.loc_alert_cause[3].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_cause[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_cause_3_qs)
  );


  // Subregister 4 of Multireg loc_alert_cause
  // R[loc_alert_cause_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_cause_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_cause_4_we),
    .wd     (loc_alert_cause_4_wd),

    // from internal hardware
    .de     (hw2reg.loc_alert_cause[4].de),
    .d      (hw2reg.loc_alert_cause[4].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_cause[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_cause_4_qs)
  );


  // Subregister 5 of Multireg loc_alert_cause
  // R[loc_alert_cause_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_cause_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_cause_5_we),
    .wd     (loc_alert_cause_5_wd),

    // from internal hardware
    .de     (hw2reg.loc_alert_cause[5].de),
    .d      (hw2reg.loc_alert_cause[5].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_cause[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_cause_5_qs)
  );


  // Subregister 6 of Multireg loc_alert_cause
  // R[loc_alert_cause_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_loc_alert_cause_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (loc_alert_cause_6_we),
    .wd     (loc_alert_cause_6_wd),

    // from internal hardware
    .de     (hw2reg.loc_alert_cause[6].de),
    .d      (hw2reg.loc_alert_cause[6].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.loc_alert_cause[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (loc_alert_cause_6_qs)
  );


  // R[classa_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classa_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (classa_regwen_we),
    .wd     (classa_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (classa_regwen_qs)
  );


  // R[classa_ctrl_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classa_ctrl_shadowed_gated_we;
  assign classa_ctrl_shadowed_gated_we = classa_ctrl_shadowed_we & classa_regwen_qs;
  //   F[en]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classa_ctrl_shadowed_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_ctrl_shadowed_re),
    .we     (classa_ctrl_shadowed_gated_we),
    .wd     (classa_ctrl_shadowed_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_ctrl_shadowed.en.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_ctrl_shadowed_en_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_ctrl_shadowed_en_update_err),
    .err_storage (classa_ctrl_shadowed_en_storage_err)
  );

  //   F[lock]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classa_ctrl_shadowed_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_ctrl_shadowed_re),
    .we     (classa_ctrl_shadowed_gated_we),
    .wd     (classa_ctrl_shadowed_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_ctrl_shadowed.lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_ctrl_shadowed_lock_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_ctrl_shadowed_lock_update_err),
    .err_storage (classa_ctrl_shadowed_lock_storage_err)
  );

  //   F[en_e0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classa_ctrl_shadowed_en_e0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_ctrl_shadowed_re),
    .we     (classa_ctrl_shadowed_gated_we),
    .wd     (classa_ctrl_shadowed_en_e0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_ctrl_shadowed.en_e0.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_ctrl_shadowed_en_e0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_ctrl_shadowed_en_e0_update_err),
    .err_storage (classa_ctrl_shadowed_en_e0_storage_err)
  );

  //   F[en_e1]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classa_ctrl_shadowed_en_e1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_ctrl_shadowed_re),
    .we     (classa_ctrl_shadowed_gated_we),
    .wd     (classa_ctrl_shadowed_en_e1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_ctrl_shadowed.en_e1.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_ctrl_shadowed_en_e1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_ctrl_shadowed_en_e1_update_err),
    .err_storage (classa_ctrl_shadowed_en_e1_storage_err)
  );

  //   F[en_e2]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classa_ctrl_shadowed_en_e2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_ctrl_shadowed_re),
    .we     (classa_ctrl_shadowed_gated_we),
    .wd     (classa_ctrl_shadowed_en_e2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_ctrl_shadowed.en_e2.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_ctrl_shadowed_en_e2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_ctrl_shadowed_en_e2_update_err),
    .err_storage (classa_ctrl_shadowed_en_e2_storage_err)
  );

  //   F[en_e3]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classa_ctrl_shadowed_en_e3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_ctrl_shadowed_re),
    .we     (classa_ctrl_shadowed_gated_we),
    .wd     (classa_ctrl_shadowed_en_e3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_ctrl_shadowed.en_e3.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_ctrl_shadowed_en_e3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_ctrl_shadowed_en_e3_update_err),
    .err_storage (classa_ctrl_shadowed_en_e3_storage_err)
  );

  //   F[map_e0]: 7:6
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_classa_ctrl_shadowed_map_e0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_ctrl_shadowed_re),
    .we     (classa_ctrl_shadowed_gated_we),
    .wd     (classa_ctrl_shadowed_map_e0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_ctrl_shadowed.map_e0.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_ctrl_shadowed_map_e0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_ctrl_shadowed_map_e0_update_err),
    .err_storage (classa_ctrl_shadowed_map_e0_storage_err)
  );

  //   F[map_e1]: 9:8
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h1),
    .Mubi    (1'b0)
  ) u_classa_ctrl_shadowed_map_e1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_ctrl_shadowed_re),
    .we     (classa_ctrl_shadowed_gated_we),
    .wd     (classa_ctrl_shadowed_map_e1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_ctrl_shadowed.map_e1.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_ctrl_shadowed_map_e1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_ctrl_shadowed_map_e1_update_err),
    .err_storage (classa_ctrl_shadowed_map_e1_storage_err)
  );

  //   F[map_e2]: 11:10
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2),
    .Mubi    (1'b0)
  ) u_classa_ctrl_shadowed_map_e2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_ctrl_shadowed_re),
    .we     (classa_ctrl_shadowed_gated_we),
    .wd     (classa_ctrl_shadowed_map_e2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_ctrl_shadowed.map_e2.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_ctrl_shadowed_map_e2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_ctrl_shadowed_map_e2_update_err),
    .err_storage (classa_ctrl_shadowed_map_e2_storage_err)
  );

  //   F[map_e3]: 13:12
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h3),
    .Mubi    (1'b0)
  ) u_classa_ctrl_shadowed_map_e3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_ctrl_shadowed_re),
    .we     (classa_ctrl_shadowed_gated_we),
    .wd     (classa_ctrl_shadowed_map_e3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_ctrl_shadowed.map_e3.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_ctrl_shadowed_map_e3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_ctrl_shadowed_map_e3_update_err),
    .err_storage (classa_ctrl_shadowed_map_e3_storage_err)
  );


  // R[classa_clr_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classa_clr_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (classa_clr_regwen_we),
    .wd     (classa_clr_regwen_wd),

    // from internal hardware
    .de     (hw2reg.classa_clr_regwen.de),
    .d      (hw2reg.classa_clr_regwen.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (classa_clr_regwen_qs)
  );


  // R[classa_clr_shadowed]: V(False)
  logic classa_clr_shadowed_qe;
  logic [0:0] classa_clr_shadowed_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_classa_clr_shadowed0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&classa_clr_shadowed_flds_we),
    .q_o(classa_clr_shadowed_qe)
  );
  // Create REGWEN-gated WE signal
  logic classa_clr_shadowed_gated_we;
  assign classa_clr_shadowed_gated_we = classa_clr_shadowed_we & classa_clr_regwen_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classa_clr_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_clr_shadowed_re),
    .we     (classa_clr_shadowed_gated_we),
    .wd     (classa_clr_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (classa_clr_shadowed_flds_we[0]),
    .q      (reg2hw.classa_clr_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_clr_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_clr_shadowed_update_err),
    .err_storage (classa_clr_shadowed_storage_err)
  );
  assign reg2hw.classa_clr_shadowed.qe = classa_clr_shadowed_qe;


  // R[classa_accum_cnt]: V(True)
  prim_subreg_ext #(
    .DW    (16)
  ) u_classa_accum_cnt (
    .re     (classa_accum_cnt_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classa_accum_cnt.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classa_accum_cnt_qs)
  );


  // R[classa_accum_thresh_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classa_accum_thresh_shadowed_gated_we;
  assign classa_accum_thresh_shadowed_gated_we = classa_accum_thresh_shadowed_we & classa_regwen_qs;
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_classa_accum_thresh_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_accum_thresh_shadowed_re),
    .we     (classa_accum_thresh_shadowed_gated_we),
    .wd     (classa_accum_thresh_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_accum_thresh_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_accum_thresh_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_accum_thresh_shadowed_update_err),
    .err_storage (classa_accum_thresh_shadowed_storage_err)
  );


  // R[classa_timeout_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classa_timeout_cyc_shadowed_gated_we;
  assign classa_timeout_cyc_shadowed_gated_we = classa_timeout_cyc_shadowed_we & classa_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classa_timeout_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_timeout_cyc_shadowed_re),
    .we     (classa_timeout_cyc_shadowed_gated_we),
    .wd     (classa_timeout_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_timeout_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_timeout_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_timeout_cyc_shadowed_update_err),
    .err_storage (classa_timeout_cyc_shadowed_storage_err)
  );


  // R[classa_crashdump_trigger_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classa_crashdump_trigger_shadowed_gated_we;
  assign classa_crashdump_trigger_shadowed_gated_we =
    classa_crashdump_trigger_shadowed_we & classa_regwen_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_classa_crashdump_trigger_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_crashdump_trigger_shadowed_re),
    .we     (classa_crashdump_trigger_shadowed_gated_we),
    .wd     (classa_crashdump_trigger_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_crashdump_trigger_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_crashdump_trigger_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_crashdump_trigger_shadowed_update_err),
    .err_storage (classa_crashdump_trigger_shadowed_storage_err)
  );


  // R[classa_phase0_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classa_phase0_cyc_shadowed_gated_we;
  assign classa_phase0_cyc_shadowed_gated_we = classa_phase0_cyc_shadowed_we & classa_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classa_phase0_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_phase0_cyc_shadowed_re),
    .we     (classa_phase0_cyc_shadowed_gated_we),
    .wd     (classa_phase0_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_phase0_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_phase0_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_phase0_cyc_shadowed_update_err),
    .err_storage (classa_phase0_cyc_shadowed_storage_err)
  );


  // R[classa_phase1_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classa_phase1_cyc_shadowed_gated_we;
  assign classa_phase1_cyc_shadowed_gated_we = classa_phase1_cyc_shadowed_we & classa_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classa_phase1_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_phase1_cyc_shadowed_re),
    .we     (classa_phase1_cyc_shadowed_gated_we),
    .wd     (classa_phase1_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_phase1_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_phase1_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_phase1_cyc_shadowed_update_err),
    .err_storage (classa_phase1_cyc_shadowed_storage_err)
  );


  // R[classa_phase2_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classa_phase2_cyc_shadowed_gated_we;
  assign classa_phase2_cyc_shadowed_gated_we = classa_phase2_cyc_shadowed_we & classa_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classa_phase2_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_phase2_cyc_shadowed_re),
    .we     (classa_phase2_cyc_shadowed_gated_we),
    .wd     (classa_phase2_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_phase2_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_phase2_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_phase2_cyc_shadowed_update_err),
    .err_storage (classa_phase2_cyc_shadowed_storage_err)
  );


  // R[classa_phase3_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classa_phase3_cyc_shadowed_gated_we;
  assign classa_phase3_cyc_shadowed_gated_we = classa_phase3_cyc_shadowed_we & classa_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classa_phase3_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classa_phase3_cyc_shadowed_re),
    .we     (classa_phase3_cyc_shadowed_gated_we),
    .wd     (classa_phase3_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classa_phase3_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classa_phase3_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classa_phase3_cyc_shadowed_update_err),
    .err_storage (classa_phase3_cyc_shadowed_storage_err)
  );


  // R[classa_esc_cnt]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_classa_esc_cnt (
    .re     (classa_esc_cnt_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classa_esc_cnt.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classa_esc_cnt_qs)
  );


  // R[classa_state]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_classa_state (
    .re     (classa_state_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classa_state.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classa_state_qs)
  );


  // R[classb_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classb_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (classb_regwen_we),
    .wd     (classb_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (classb_regwen_qs)
  );


  // R[classb_ctrl_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classb_ctrl_shadowed_gated_we;
  assign classb_ctrl_shadowed_gated_we = classb_ctrl_shadowed_we & classb_regwen_qs;
  //   F[en]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classb_ctrl_shadowed_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_ctrl_shadowed_re),
    .we     (classb_ctrl_shadowed_gated_we),
    .wd     (classb_ctrl_shadowed_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_ctrl_shadowed.en.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_ctrl_shadowed_en_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_ctrl_shadowed_en_update_err),
    .err_storage (classb_ctrl_shadowed_en_storage_err)
  );

  //   F[lock]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classb_ctrl_shadowed_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_ctrl_shadowed_re),
    .we     (classb_ctrl_shadowed_gated_we),
    .wd     (classb_ctrl_shadowed_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_ctrl_shadowed.lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_ctrl_shadowed_lock_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_ctrl_shadowed_lock_update_err),
    .err_storage (classb_ctrl_shadowed_lock_storage_err)
  );

  //   F[en_e0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classb_ctrl_shadowed_en_e0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_ctrl_shadowed_re),
    .we     (classb_ctrl_shadowed_gated_we),
    .wd     (classb_ctrl_shadowed_en_e0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_ctrl_shadowed.en_e0.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_ctrl_shadowed_en_e0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_ctrl_shadowed_en_e0_update_err),
    .err_storage (classb_ctrl_shadowed_en_e0_storage_err)
  );

  //   F[en_e1]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classb_ctrl_shadowed_en_e1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_ctrl_shadowed_re),
    .we     (classb_ctrl_shadowed_gated_we),
    .wd     (classb_ctrl_shadowed_en_e1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_ctrl_shadowed.en_e1.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_ctrl_shadowed_en_e1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_ctrl_shadowed_en_e1_update_err),
    .err_storage (classb_ctrl_shadowed_en_e1_storage_err)
  );

  //   F[en_e2]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classb_ctrl_shadowed_en_e2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_ctrl_shadowed_re),
    .we     (classb_ctrl_shadowed_gated_we),
    .wd     (classb_ctrl_shadowed_en_e2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_ctrl_shadowed.en_e2.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_ctrl_shadowed_en_e2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_ctrl_shadowed_en_e2_update_err),
    .err_storage (classb_ctrl_shadowed_en_e2_storage_err)
  );

  //   F[en_e3]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classb_ctrl_shadowed_en_e3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_ctrl_shadowed_re),
    .we     (classb_ctrl_shadowed_gated_we),
    .wd     (classb_ctrl_shadowed_en_e3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_ctrl_shadowed.en_e3.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_ctrl_shadowed_en_e3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_ctrl_shadowed_en_e3_update_err),
    .err_storage (classb_ctrl_shadowed_en_e3_storage_err)
  );

  //   F[map_e0]: 7:6
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_classb_ctrl_shadowed_map_e0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_ctrl_shadowed_re),
    .we     (classb_ctrl_shadowed_gated_we),
    .wd     (classb_ctrl_shadowed_map_e0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_ctrl_shadowed.map_e0.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_ctrl_shadowed_map_e0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_ctrl_shadowed_map_e0_update_err),
    .err_storage (classb_ctrl_shadowed_map_e0_storage_err)
  );

  //   F[map_e1]: 9:8
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h1),
    .Mubi    (1'b0)
  ) u_classb_ctrl_shadowed_map_e1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_ctrl_shadowed_re),
    .we     (classb_ctrl_shadowed_gated_we),
    .wd     (classb_ctrl_shadowed_map_e1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_ctrl_shadowed.map_e1.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_ctrl_shadowed_map_e1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_ctrl_shadowed_map_e1_update_err),
    .err_storage (classb_ctrl_shadowed_map_e1_storage_err)
  );

  //   F[map_e2]: 11:10
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2),
    .Mubi    (1'b0)
  ) u_classb_ctrl_shadowed_map_e2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_ctrl_shadowed_re),
    .we     (classb_ctrl_shadowed_gated_we),
    .wd     (classb_ctrl_shadowed_map_e2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_ctrl_shadowed.map_e2.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_ctrl_shadowed_map_e2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_ctrl_shadowed_map_e2_update_err),
    .err_storage (classb_ctrl_shadowed_map_e2_storage_err)
  );

  //   F[map_e3]: 13:12
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h3),
    .Mubi    (1'b0)
  ) u_classb_ctrl_shadowed_map_e3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_ctrl_shadowed_re),
    .we     (classb_ctrl_shadowed_gated_we),
    .wd     (classb_ctrl_shadowed_map_e3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_ctrl_shadowed.map_e3.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_ctrl_shadowed_map_e3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_ctrl_shadowed_map_e3_update_err),
    .err_storage (classb_ctrl_shadowed_map_e3_storage_err)
  );


  // R[classb_clr_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classb_clr_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (classb_clr_regwen_we),
    .wd     (classb_clr_regwen_wd),

    // from internal hardware
    .de     (hw2reg.classb_clr_regwen.de),
    .d      (hw2reg.classb_clr_regwen.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (classb_clr_regwen_qs)
  );


  // R[classb_clr_shadowed]: V(False)
  logic classb_clr_shadowed_qe;
  logic [0:0] classb_clr_shadowed_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_classb_clr_shadowed0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&classb_clr_shadowed_flds_we),
    .q_o(classb_clr_shadowed_qe)
  );
  // Create REGWEN-gated WE signal
  logic classb_clr_shadowed_gated_we;
  assign classb_clr_shadowed_gated_we = classb_clr_shadowed_we & classb_clr_regwen_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classb_clr_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_clr_shadowed_re),
    .we     (classb_clr_shadowed_gated_we),
    .wd     (classb_clr_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (classb_clr_shadowed_flds_we[0]),
    .q      (reg2hw.classb_clr_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_clr_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_clr_shadowed_update_err),
    .err_storage (classb_clr_shadowed_storage_err)
  );
  assign reg2hw.classb_clr_shadowed.qe = classb_clr_shadowed_qe;


  // R[classb_accum_cnt]: V(True)
  prim_subreg_ext #(
    .DW    (16)
  ) u_classb_accum_cnt (
    .re     (classb_accum_cnt_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classb_accum_cnt.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classb_accum_cnt_qs)
  );


  // R[classb_accum_thresh_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classb_accum_thresh_shadowed_gated_we;
  assign classb_accum_thresh_shadowed_gated_we = classb_accum_thresh_shadowed_we & classb_regwen_qs;
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_classb_accum_thresh_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_accum_thresh_shadowed_re),
    .we     (classb_accum_thresh_shadowed_gated_we),
    .wd     (classb_accum_thresh_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_accum_thresh_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_accum_thresh_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_accum_thresh_shadowed_update_err),
    .err_storage (classb_accum_thresh_shadowed_storage_err)
  );


  // R[classb_timeout_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classb_timeout_cyc_shadowed_gated_we;
  assign classb_timeout_cyc_shadowed_gated_we = classb_timeout_cyc_shadowed_we & classb_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classb_timeout_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_timeout_cyc_shadowed_re),
    .we     (classb_timeout_cyc_shadowed_gated_we),
    .wd     (classb_timeout_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_timeout_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_timeout_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_timeout_cyc_shadowed_update_err),
    .err_storage (classb_timeout_cyc_shadowed_storage_err)
  );


  // R[classb_crashdump_trigger_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classb_crashdump_trigger_shadowed_gated_we;
  assign classb_crashdump_trigger_shadowed_gated_we =
    classb_crashdump_trigger_shadowed_we & classb_regwen_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_classb_crashdump_trigger_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_crashdump_trigger_shadowed_re),
    .we     (classb_crashdump_trigger_shadowed_gated_we),
    .wd     (classb_crashdump_trigger_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_crashdump_trigger_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_crashdump_trigger_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_crashdump_trigger_shadowed_update_err),
    .err_storage (classb_crashdump_trigger_shadowed_storage_err)
  );


  // R[classb_phase0_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classb_phase0_cyc_shadowed_gated_we;
  assign classb_phase0_cyc_shadowed_gated_we = classb_phase0_cyc_shadowed_we & classb_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classb_phase0_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_phase0_cyc_shadowed_re),
    .we     (classb_phase0_cyc_shadowed_gated_we),
    .wd     (classb_phase0_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_phase0_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_phase0_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_phase0_cyc_shadowed_update_err),
    .err_storage (classb_phase0_cyc_shadowed_storage_err)
  );


  // R[classb_phase1_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classb_phase1_cyc_shadowed_gated_we;
  assign classb_phase1_cyc_shadowed_gated_we = classb_phase1_cyc_shadowed_we & classb_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classb_phase1_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_phase1_cyc_shadowed_re),
    .we     (classb_phase1_cyc_shadowed_gated_we),
    .wd     (classb_phase1_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_phase1_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_phase1_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_phase1_cyc_shadowed_update_err),
    .err_storage (classb_phase1_cyc_shadowed_storage_err)
  );


  // R[classb_phase2_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classb_phase2_cyc_shadowed_gated_we;
  assign classb_phase2_cyc_shadowed_gated_we = classb_phase2_cyc_shadowed_we & classb_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classb_phase2_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_phase2_cyc_shadowed_re),
    .we     (classb_phase2_cyc_shadowed_gated_we),
    .wd     (classb_phase2_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_phase2_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_phase2_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_phase2_cyc_shadowed_update_err),
    .err_storage (classb_phase2_cyc_shadowed_storage_err)
  );


  // R[classb_phase3_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classb_phase3_cyc_shadowed_gated_we;
  assign classb_phase3_cyc_shadowed_gated_we = classb_phase3_cyc_shadowed_we & classb_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classb_phase3_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classb_phase3_cyc_shadowed_re),
    .we     (classb_phase3_cyc_shadowed_gated_we),
    .wd     (classb_phase3_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classb_phase3_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classb_phase3_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classb_phase3_cyc_shadowed_update_err),
    .err_storage (classb_phase3_cyc_shadowed_storage_err)
  );


  // R[classb_esc_cnt]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_classb_esc_cnt (
    .re     (classb_esc_cnt_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classb_esc_cnt.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classb_esc_cnt_qs)
  );


  // R[classb_state]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_classb_state (
    .re     (classb_state_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classb_state.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classb_state_qs)
  );


  // R[classc_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classc_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (classc_regwen_we),
    .wd     (classc_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (classc_regwen_qs)
  );


  // R[classc_ctrl_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classc_ctrl_shadowed_gated_we;
  assign classc_ctrl_shadowed_gated_we = classc_ctrl_shadowed_we & classc_regwen_qs;
  //   F[en]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classc_ctrl_shadowed_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_ctrl_shadowed_re),
    .we     (classc_ctrl_shadowed_gated_we),
    .wd     (classc_ctrl_shadowed_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_ctrl_shadowed.en.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_ctrl_shadowed_en_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_ctrl_shadowed_en_update_err),
    .err_storage (classc_ctrl_shadowed_en_storage_err)
  );

  //   F[lock]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classc_ctrl_shadowed_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_ctrl_shadowed_re),
    .we     (classc_ctrl_shadowed_gated_we),
    .wd     (classc_ctrl_shadowed_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_ctrl_shadowed.lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_ctrl_shadowed_lock_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_ctrl_shadowed_lock_update_err),
    .err_storage (classc_ctrl_shadowed_lock_storage_err)
  );

  //   F[en_e0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classc_ctrl_shadowed_en_e0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_ctrl_shadowed_re),
    .we     (classc_ctrl_shadowed_gated_we),
    .wd     (classc_ctrl_shadowed_en_e0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_ctrl_shadowed.en_e0.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_ctrl_shadowed_en_e0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_ctrl_shadowed_en_e0_update_err),
    .err_storage (classc_ctrl_shadowed_en_e0_storage_err)
  );

  //   F[en_e1]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classc_ctrl_shadowed_en_e1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_ctrl_shadowed_re),
    .we     (classc_ctrl_shadowed_gated_we),
    .wd     (classc_ctrl_shadowed_en_e1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_ctrl_shadowed.en_e1.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_ctrl_shadowed_en_e1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_ctrl_shadowed_en_e1_update_err),
    .err_storage (classc_ctrl_shadowed_en_e1_storage_err)
  );

  //   F[en_e2]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classc_ctrl_shadowed_en_e2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_ctrl_shadowed_re),
    .we     (classc_ctrl_shadowed_gated_we),
    .wd     (classc_ctrl_shadowed_en_e2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_ctrl_shadowed.en_e2.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_ctrl_shadowed_en_e2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_ctrl_shadowed_en_e2_update_err),
    .err_storage (classc_ctrl_shadowed_en_e2_storage_err)
  );

  //   F[en_e3]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classc_ctrl_shadowed_en_e3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_ctrl_shadowed_re),
    .we     (classc_ctrl_shadowed_gated_we),
    .wd     (classc_ctrl_shadowed_en_e3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_ctrl_shadowed.en_e3.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_ctrl_shadowed_en_e3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_ctrl_shadowed_en_e3_update_err),
    .err_storage (classc_ctrl_shadowed_en_e3_storage_err)
  );

  //   F[map_e0]: 7:6
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_classc_ctrl_shadowed_map_e0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_ctrl_shadowed_re),
    .we     (classc_ctrl_shadowed_gated_we),
    .wd     (classc_ctrl_shadowed_map_e0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_ctrl_shadowed.map_e0.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_ctrl_shadowed_map_e0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_ctrl_shadowed_map_e0_update_err),
    .err_storage (classc_ctrl_shadowed_map_e0_storage_err)
  );

  //   F[map_e1]: 9:8
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h1),
    .Mubi    (1'b0)
  ) u_classc_ctrl_shadowed_map_e1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_ctrl_shadowed_re),
    .we     (classc_ctrl_shadowed_gated_we),
    .wd     (classc_ctrl_shadowed_map_e1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_ctrl_shadowed.map_e1.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_ctrl_shadowed_map_e1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_ctrl_shadowed_map_e1_update_err),
    .err_storage (classc_ctrl_shadowed_map_e1_storage_err)
  );

  //   F[map_e2]: 11:10
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2),
    .Mubi    (1'b0)
  ) u_classc_ctrl_shadowed_map_e2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_ctrl_shadowed_re),
    .we     (classc_ctrl_shadowed_gated_we),
    .wd     (classc_ctrl_shadowed_map_e2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_ctrl_shadowed.map_e2.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_ctrl_shadowed_map_e2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_ctrl_shadowed_map_e2_update_err),
    .err_storage (classc_ctrl_shadowed_map_e2_storage_err)
  );

  //   F[map_e3]: 13:12
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h3),
    .Mubi    (1'b0)
  ) u_classc_ctrl_shadowed_map_e3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_ctrl_shadowed_re),
    .we     (classc_ctrl_shadowed_gated_we),
    .wd     (classc_ctrl_shadowed_map_e3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_ctrl_shadowed.map_e3.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_ctrl_shadowed_map_e3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_ctrl_shadowed_map_e3_update_err),
    .err_storage (classc_ctrl_shadowed_map_e3_storage_err)
  );


  // R[classc_clr_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classc_clr_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (classc_clr_regwen_we),
    .wd     (classc_clr_regwen_wd),

    // from internal hardware
    .de     (hw2reg.classc_clr_regwen.de),
    .d      (hw2reg.classc_clr_regwen.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (classc_clr_regwen_qs)
  );


  // R[classc_clr_shadowed]: V(False)
  logic classc_clr_shadowed_qe;
  logic [0:0] classc_clr_shadowed_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_classc_clr_shadowed0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&classc_clr_shadowed_flds_we),
    .q_o(classc_clr_shadowed_qe)
  );
  // Create REGWEN-gated WE signal
  logic classc_clr_shadowed_gated_we;
  assign classc_clr_shadowed_gated_we = classc_clr_shadowed_we & classc_clr_regwen_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classc_clr_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_clr_shadowed_re),
    .we     (classc_clr_shadowed_gated_we),
    .wd     (classc_clr_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (classc_clr_shadowed_flds_we[0]),
    .q      (reg2hw.classc_clr_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_clr_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_clr_shadowed_update_err),
    .err_storage (classc_clr_shadowed_storage_err)
  );
  assign reg2hw.classc_clr_shadowed.qe = classc_clr_shadowed_qe;


  // R[classc_accum_cnt]: V(True)
  prim_subreg_ext #(
    .DW    (16)
  ) u_classc_accum_cnt (
    .re     (classc_accum_cnt_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classc_accum_cnt.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classc_accum_cnt_qs)
  );


  // R[classc_accum_thresh_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classc_accum_thresh_shadowed_gated_we;
  assign classc_accum_thresh_shadowed_gated_we = classc_accum_thresh_shadowed_we & classc_regwen_qs;
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_classc_accum_thresh_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_accum_thresh_shadowed_re),
    .we     (classc_accum_thresh_shadowed_gated_we),
    .wd     (classc_accum_thresh_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_accum_thresh_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_accum_thresh_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_accum_thresh_shadowed_update_err),
    .err_storage (classc_accum_thresh_shadowed_storage_err)
  );


  // R[classc_timeout_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classc_timeout_cyc_shadowed_gated_we;
  assign classc_timeout_cyc_shadowed_gated_we = classc_timeout_cyc_shadowed_we & classc_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classc_timeout_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_timeout_cyc_shadowed_re),
    .we     (classc_timeout_cyc_shadowed_gated_we),
    .wd     (classc_timeout_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_timeout_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_timeout_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_timeout_cyc_shadowed_update_err),
    .err_storage (classc_timeout_cyc_shadowed_storage_err)
  );


  // R[classc_crashdump_trigger_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classc_crashdump_trigger_shadowed_gated_we;
  assign classc_crashdump_trigger_shadowed_gated_we =
    classc_crashdump_trigger_shadowed_we & classc_regwen_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_classc_crashdump_trigger_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_crashdump_trigger_shadowed_re),
    .we     (classc_crashdump_trigger_shadowed_gated_we),
    .wd     (classc_crashdump_trigger_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_crashdump_trigger_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_crashdump_trigger_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_crashdump_trigger_shadowed_update_err),
    .err_storage (classc_crashdump_trigger_shadowed_storage_err)
  );


  // R[classc_phase0_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classc_phase0_cyc_shadowed_gated_we;
  assign classc_phase0_cyc_shadowed_gated_we = classc_phase0_cyc_shadowed_we & classc_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classc_phase0_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_phase0_cyc_shadowed_re),
    .we     (classc_phase0_cyc_shadowed_gated_we),
    .wd     (classc_phase0_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_phase0_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_phase0_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_phase0_cyc_shadowed_update_err),
    .err_storage (classc_phase0_cyc_shadowed_storage_err)
  );


  // R[classc_phase1_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classc_phase1_cyc_shadowed_gated_we;
  assign classc_phase1_cyc_shadowed_gated_we = classc_phase1_cyc_shadowed_we & classc_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classc_phase1_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_phase1_cyc_shadowed_re),
    .we     (classc_phase1_cyc_shadowed_gated_we),
    .wd     (classc_phase1_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_phase1_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_phase1_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_phase1_cyc_shadowed_update_err),
    .err_storage (classc_phase1_cyc_shadowed_storage_err)
  );


  // R[classc_phase2_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classc_phase2_cyc_shadowed_gated_we;
  assign classc_phase2_cyc_shadowed_gated_we = classc_phase2_cyc_shadowed_we & classc_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classc_phase2_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_phase2_cyc_shadowed_re),
    .we     (classc_phase2_cyc_shadowed_gated_we),
    .wd     (classc_phase2_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_phase2_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_phase2_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_phase2_cyc_shadowed_update_err),
    .err_storage (classc_phase2_cyc_shadowed_storage_err)
  );


  // R[classc_phase3_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classc_phase3_cyc_shadowed_gated_we;
  assign classc_phase3_cyc_shadowed_gated_we = classc_phase3_cyc_shadowed_we & classc_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classc_phase3_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classc_phase3_cyc_shadowed_re),
    .we     (classc_phase3_cyc_shadowed_gated_we),
    .wd     (classc_phase3_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classc_phase3_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classc_phase3_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classc_phase3_cyc_shadowed_update_err),
    .err_storage (classc_phase3_cyc_shadowed_storage_err)
  );


  // R[classc_esc_cnt]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_classc_esc_cnt (
    .re     (classc_esc_cnt_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classc_esc_cnt.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classc_esc_cnt_qs)
  );


  // R[classc_state]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_classc_state (
    .re     (classc_state_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classc_state.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classc_state_qs)
  );


  // R[classd_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classd_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (classd_regwen_we),
    .wd     (classd_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (classd_regwen_qs)
  );


  // R[classd_ctrl_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classd_ctrl_shadowed_gated_we;
  assign classd_ctrl_shadowed_gated_we = classd_ctrl_shadowed_we & classd_regwen_qs;
  //   F[en]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classd_ctrl_shadowed_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_ctrl_shadowed_re),
    .we     (classd_ctrl_shadowed_gated_we),
    .wd     (classd_ctrl_shadowed_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_ctrl_shadowed.en.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_ctrl_shadowed_en_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_ctrl_shadowed_en_update_err),
    .err_storage (classd_ctrl_shadowed_en_storage_err)
  );

  //   F[lock]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classd_ctrl_shadowed_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_ctrl_shadowed_re),
    .we     (classd_ctrl_shadowed_gated_we),
    .wd     (classd_ctrl_shadowed_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_ctrl_shadowed.lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_ctrl_shadowed_lock_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_ctrl_shadowed_lock_update_err),
    .err_storage (classd_ctrl_shadowed_lock_storage_err)
  );

  //   F[en_e0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classd_ctrl_shadowed_en_e0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_ctrl_shadowed_re),
    .we     (classd_ctrl_shadowed_gated_we),
    .wd     (classd_ctrl_shadowed_en_e0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_ctrl_shadowed.en_e0.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_ctrl_shadowed_en_e0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_ctrl_shadowed_en_e0_update_err),
    .err_storage (classd_ctrl_shadowed_en_e0_storage_err)
  );

  //   F[en_e1]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classd_ctrl_shadowed_en_e1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_ctrl_shadowed_re),
    .we     (classd_ctrl_shadowed_gated_we),
    .wd     (classd_ctrl_shadowed_en_e1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_ctrl_shadowed.en_e1.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_ctrl_shadowed_en_e1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_ctrl_shadowed_en_e1_update_err),
    .err_storage (classd_ctrl_shadowed_en_e1_storage_err)
  );

  //   F[en_e2]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classd_ctrl_shadowed_en_e2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_ctrl_shadowed_re),
    .we     (classd_ctrl_shadowed_gated_we),
    .wd     (classd_ctrl_shadowed_en_e2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_ctrl_shadowed.en_e2.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_ctrl_shadowed_en_e2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_ctrl_shadowed_en_e2_update_err),
    .err_storage (classd_ctrl_shadowed_en_e2_storage_err)
  );

  //   F[en_e3]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classd_ctrl_shadowed_en_e3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_ctrl_shadowed_re),
    .we     (classd_ctrl_shadowed_gated_we),
    .wd     (classd_ctrl_shadowed_en_e3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_ctrl_shadowed.en_e3.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_ctrl_shadowed_en_e3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_ctrl_shadowed_en_e3_update_err),
    .err_storage (classd_ctrl_shadowed_en_e3_storage_err)
  );

  //   F[map_e0]: 7:6
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_classd_ctrl_shadowed_map_e0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_ctrl_shadowed_re),
    .we     (classd_ctrl_shadowed_gated_we),
    .wd     (classd_ctrl_shadowed_map_e0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_ctrl_shadowed.map_e0.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_ctrl_shadowed_map_e0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_ctrl_shadowed_map_e0_update_err),
    .err_storage (classd_ctrl_shadowed_map_e0_storage_err)
  );

  //   F[map_e1]: 9:8
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h1),
    .Mubi    (1'b0)
  ) u_classd_ctrl_shadowed_map_e1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_ctrl_shadowed_re),
    .we     (classd_ctrl_shadowed_gated_we),
    .wd     (classd_ctrl_shadowed_map_e1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_ctrl_shadowed.map_e1.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_ctrl_shadowed_map_e1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_ctrl_shadowed_map_e1_update_err),
    .err_storage (classd_ctrl_shadowed_map_e1_storage_err)
  );

  //   F[map_e2]: 11:10
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2),
    .Mubi    (1'b0)
  ) u_classd_ctrl_shadowed_map_e2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_ctrl_shadowed_re),
    .we     (classd_ctrl_shadowed_gated_we),
    .wd     (classd_ctrl_shadowed_map_e2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_ctrl_shadowed.map_e2.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_ctrl_shadowed_map_e2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_ctrl_shadowed_map_e2_update_err),
    .err_storage (classd_ctrl_shadowed_map_e2_storage_err)
  );

  //   F[map_e3]: 13:12
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h3),
    .Mubi    (1'b0)
  ) u_classd_ctrl_shadowed_map_e3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_ctrl_shadowed_re),
    .we     (classd_ctrl_shadowed_gated_we),
    .wd     (classd_ctrl_shadowed_map_e3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_ctrl_shadowed.map_e3.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_ctrl_shadowed_map_e3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_ctrl_shadowed_map_e3_update_err),
    .err_storage (classd_ctrl_shadowed_map_e3_storage_err)
  );


  // R[classd_clr_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_classd_clr_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (classd_clr_regwen_we),
    .wd     (classd_clr_regwen_wd),

    // from internal hardware
    .de     (hw2reg.classd_clr_regwen.de),
    .d      (hw2reg.classd_clr_regwen.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (classd_clr_regwen_qs)
  );


  // R[classd_clr_shadowed]: V(False)
  logic classd_clr_shadowed_qe;
  logic [0:0] classd_clr_shadowed_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_classd_clr_shadowed0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&classd_clr_shadowed_flds_we),
    .q_o(classd_clr_shadowed_qe)
  );
  // Create REGWEN-gated WE signal
  logic classd_clr_shadowed_gated_we;
  assign classd_clr_shadowed_gated_we = classd_clr_shadowed_we & classd_clr_regwen_qs;
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_classd_clr_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_clr_shadowed_re),
    .we     (classd_clr_shadowed_gated_we),
    .wd     (classd_clr_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (classd_clr_shadowed_flds_we[0]),
    .q      (reg2hw.classd_clr_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_clr_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_clr_shadowed_update_err),
    .err_storage (classd_clr_shadowed_storage_err)
  );
  assign reg2hw.classd_clr_shadowed.qe = classd_clr_shadowed_qe;


  // R[classd_accum_cnt]: V(True)
  prim_subreg_ext #(
    .DW    (16)
  ) u_classd_accum_cnt (
    .re     (classd_accum_cnt_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classd_accum_cnt.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classd_accum_cnt_qs)
  );


  // R[classd_accum_thresh_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classd_accum_thresh_shadowed_gated_we;
  assign classd_accum_thresh_shadowed_gated_we = classd_accum_thresh_shadowed_we & classd_regwen_qs;
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_classd_accum_thresh_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_accum_thresh_shadowed_re),
    .we     (classd_accum_thresh_shadowed_gated_we),
    .wd     (classd_accum_thresh_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_accum_thresh_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_accum_thresh_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_accum_thresh_shadowed_update_err),
    .err_storage (classd_accum_thresh_shadowed_storage_err)
  );


  // R[classd_timeout_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classd_timeout_cyc_shadowed_gated_we;
  assign classd_timeout_cyc_shadowed_gated_we = classd_timeout_cyc_shadowed_we & classd_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classd_timeout_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_timeout_cyc_shadowed_re),
    .we     (classd_timeout_cyc_shadowed_gated_we),
    .wd     (classd_timeout_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_timeout_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_timeout_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_timeout_cyc_shadowed_update_err),
    .err_storage (classd_timeout_cyc_shadowed_storage_err)
  );


  // R[classd_crashdump_trigger_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classd_crashdump_trigger_shadowed_gated_we;
  assign classd_crashdump_trigger_shadowed_gated_we =
    classd_crashdump_trigger_shadowed_we & classd_regwen_qs;
  prim_subreg_shadow #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_classd_crashdump_trigger_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_crashdump_trigger_shadowed_re),
    .we     (classd_crashdump_trigger_shadowed_gated_we),
    .wd     (classd_crashdump_trigger_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_crashdump_trigger_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_crashdump_trigger_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_crashdump_trigger_shadowed_update_err),
    .err_storage (classd_crashdump_trigger_shadowed_storage_err)
  );


  // R[classd_phase0_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classd_phase0_cyc_shadowed_gated_we;
  assign classd_phase0_cyc_shadowed_gated_we = classd_phase0_cyc_shadowed_we & classd_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classd_phase0_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_phase0_cyc_shadowed_re),
    .we     (classd_phase0_cyc_shadowed_gated_we),
    .wd     (classd_phase0_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_phase0_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_phase0_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_phase0_cyc_shadowed_update_err),
    .err_storage (classd_phase0_cyc_shadowed_storage_err)
  );


  // R[classd_phase1_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classd_phase1_cyc_shadowed_gated_we;
  assign classd_phase1_cyc_shadowed_gated_we = classd_phase1_cyc_shadowed_we & classd_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classd_phase1_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_phase1_cyc_shadowed_re),
    .we     (classd_phase1_cyc_shadowed_gated_we),
    .wd     (classd_phase1_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_phase1_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_phase1_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_phase1_cyc_shadowed_update_err),
    .err_storage (classd_phase1_cyc_shadowed_storage_err)
  );


  // R[classd_phase2_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classd_phase2_cyc_shadowed_gated_we;
  assign classd_phase2_cyc_shadowed_gated_we = classd_phase2_cyc_shadowed_we & classd_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classd_phase2_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_phase2_cyc_shadowed_re),
    .we     (classd_phase2_cyc_shadowed_gated_we),
    .wd     (classd_phase2_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_phase2_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_phase2_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_phase2_cyc_shadowed_update_err),
    .err_storage (classd_phase2_cyc_shadowed_storage_err)
  );


  // R[classd_phase3_cyc_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic classd_phase3_cyc_shadowed_gated_we;
  assign classd_phase3_cyc_shadowed_gated_we = classd_phase3_cyc_shadowed_we & classd_regwen_qs;
  prim_subreg_shadow #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_classd_phase3_cyc_shadowed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (classd_phase3_cyc_shadowed_re),
    .we     (classd_phase3_cyc_shadowed_gated_we),
    .wd     (classd_phase3_cyc_shadowed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.classd_phase3_cyc_shadowed.q),
    .ds     (),

    // to register interface (read)
    .qs     (classd_phase3_cyc_shadowed_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (classd_phase3_cyc_shadowed_update_err),
    .err_storage (classd_phase3_cyc_shadowed_storage_err)
  );


  // R[classd_esc_cnt]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_classd_esc_cnt (
    .re     (classd_esc_cnt_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classd_esc_cnt.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classd_esc_cnt_qs)
  );


  // R[classd_state]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_classd_state (
    .re     (classd_state_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.classd_state.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (classd_state_qs)
  );



  logic [201:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == ALERT_HANDLER_INTR_STATE_OFFSET);
    addr_hit[  1] = (reg_addr == ALERT_HANDLER_INTR_ENABLE_OFFSET);
    addr_hit[  2] = (reg_addr == ALERT_HANDLER_INTR_TEST_OFFSET);
    addr_hit[  3] = (reg_addr == ALERT_HANDLER_PING_TIMER_REGWEN_OFFSET);
    addr_hit[  4] = (reg_addr == ALERT_HANDLER_PING_TIMEOUT_CYC_SHADOWED_OFFSET);
    addr_hit[  5] = (reg_addr == ALERT_HANDLER_PING_TIMER_EN_SHADOWED_OFFSET);
    addr_hit[  6] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_0_OFFSET);
    addr_hit[  7] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_1_OFFSET);
    addr_hit[  8] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_2_OFFSET);
    addr_hit[  9] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_3_OFFSET);
    addr_hit[ 10] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_4_OFFSET);
    addr_hit[ 11] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_5_OFFSET);
    addr_hit[ 12] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_6_OFFSET);
    addr_hit[ 13] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_7_OFFSET);
    addr_hit[ 14] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_8_OFFSET);
    addr_hit[ 15] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_9_OFFSET);
    addr_hit[ 16] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_10_OFFSET);
    addr_hit[ 17] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_11_OFFSET);
    addr_hit[ 18] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_12_OFFSET);
    addr_hit[ 19] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_13_OFFSET);
    addr_hit[ 20] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_14_OFFSET);
    addr_hit[ 21] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_15_OFFSET);
    addr_hit[ 22] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_16_OFFSET);
    addr_hit[ 23] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_17_OFFSET);
    addr_hit[ 24] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_18_OFFSET);
    addr_hit[ 25] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_19_OFFSET);
    addr_hit[ 26] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_20_OFFSET);
    addr_hit[ 27] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_21_OFFSET);
    addr_hit[ 28] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_22_OFFSET);
    addr_hit[ 29] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_23_OFFSET);
    addr_hit[ 30] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_24_OFFSET);
    addr_hit[ 31] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_25_OFFSET);
    addr_hit[ 32] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_26_OFFSET);
    addr_hit[ 33] = (reg_addr == ALERT_HANDLER_ALERT_REGWEN_27_OFFSET);
    addr_hit[ 34] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_0_OFFSET);
    addr_hit[ 35] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_1_OFFSET);
    addr_hit[ 36] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_2_OFFSET);
    addr_hit[ 37] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_3_OFFSET);
    addr_hit[ 38] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_4_OFFSET);
    addr_hit[ 39] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_5_OFFSET);
    addr_hit[ 40] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_6_OFFSET);
    addr_hit[ 41] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_7_OFFSET);
    addr_hit[ 42] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_8_OFFSET);
    addr_hit[ 43] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_9_OFFSET);
    addr_hit[ 44] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_10_OFFSET);
    addr_hit[ 45] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_11_OFFSET);
    addr_hit[ 46] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_12_OFFSET);
    addr_hit[ 47] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_13_OFFSET);
    addr_hit[ 48] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_14_OFFSET);
    addr_hit[ 49] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_15_OFFSET);
    addr_hit[ 50] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_16_OFFSET);
    addr_hit[ 51] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_17_OFFSET);
    addr_hit[ 52] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_18_OFFSET);
    addr_hit[ 53] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_19_OFFSET);
    addr_hit[ 54] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_20_OFFSET);
    addr_hit[ 55] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_21_OFFSET);
    addr_hit[ 56] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_22_OFFSET);
    addr_hit[ 57] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_23_OFFSET);
    addr_hit[ 58] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_24_OFFSET);
    addr_hit[ 59] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_25_OFFSET);
    addr_hit[ 60] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_26_OFFSET);
    addr_hit[ 61] = (reg_addr == ALERT_HANDLER_ALERT_EN_SHADOWED_27_OFFSET);
    addr_hit[ 62] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_0_OFFSET);
    addr_hit[ 63] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_1_OFFSET);
    addr_hit[ 64] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_2_OFFSET);
    addr_hit[ 65] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_3_OFFSET);
    addr_hit[ 66] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_4_OFFSET);
    addr_hit[ 67] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_5_OFFSET);
    addr_hit[ 68] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_6_OFFSET);
    addr_hit[ 69] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_7_OFFSET);
    addr_hit[ 70] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_8_OFFSET);
    addr_hit[ 71] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_9_OFFSET);
    addr_hit[ 72] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_10_OFFSET);
    addr_hit[ 73] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_11_OFFSET);
    addr_hit[ 74] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_12_OFFSET);
    addr_hit[ 75] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_13_OFFSET);
    addr_hit[ 76] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_14_OFFSET);
    addr_hit[ 77] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_15_OFFSET);
    addr_hit[ 78] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_16_OFFSET);
    addr_hit[ 79] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_17_OFFSET);
    addr_hit[ 80] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_18_OFFSET);
    addr_hit[ 81] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_19_OFFSET);
    addr_hit[ 82] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_20_OFFSET);
    addr_hit[ 83] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_21_OFFSET);
    addr_hit[ 84] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_22_OFFSET);
    addr_hit[ 85] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_23_OFFSET);
    addr_hit[ 86] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_24_OFFSET);
    addr_hit[ 87] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_25_OFFSET);
    addr_hit[ 88] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_26_OFFSET);
    addr_hit[ 89] = (reg_addr == ALERT_HANDLER_ALERT_CLASS_SHADOWED_27_OFFSET);
    addr_hit[ 90] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_0_OFFSET);
    addr_hit[ 91] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_1_OFFSET);
    addr_hit[ 92] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_2_OFFSET);
    addr_hit[ 93] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_3_OFFSET);
    addr_hit[ 94] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_4_OFFSET);
    addr_hit[ 95] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_5_OFFSET);
    addr_hit[ 96] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_6_OFFSET);
    addr_hit[ 97] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_7_OFFSET);
    addr_hit[ 98] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_8_OFFSET);
    addr_hit[ 99] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_9_OFFSET);
    addr_hit[100] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_10_OFFSET);
    addr_hit[101] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_11_OFFSET);
    addr_hit[102] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_12_OFFSET);
    addr_hit[103] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_13_OFFSET);
    addr_hit[104] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_14_OFFSET);
    addr_hit[105] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_15_OFFSET);
    addr_hit[106] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_16_OFFSET);
    addr_hit[107] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_17_OFFSET);
    addr_hit[108] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_18_OFFSET);
    addr_hit[109] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_19_OFFSET);
    addr_hit[110] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_20_OFFSET);
    addr_hit[111] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_21_OFFSET);
    addr_hit[112] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_22_OFFSET);
    addr_hit[113] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_23_OFFSET);
    addr_hit[114] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_24_OFFSET);
    addr_hit[115] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_25_OFFSET);
    addr_hit[116] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_26_OFFSET);
    addr_hit[117] = (reg_addr == ALERT_HANDLER_ALERT_CAUSE_27_OFFSET);
    addr_hit[118] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_0_OFFSET);
    addr_hit[119] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_1_OFFSET);
    addr_hit[120] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_2_OFFSET);
    addr_hit[121] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_3_OFFSET);
    addr_hit[122] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_4_OFFSET);
    addr_hit[123] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_5_OFFSET);
    addr_hit[124] = (reg_addr == ALERT_HANDLER_LOC_ALERT_REGWEN_6_OFFSET);
    addr_hit[125] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_0_OFFSET);
    addr_hit[126] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_1_OFFSET);
    addr_hit[127] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_2_OFFSET);
    addr_hit[128] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_3_OFFSET);
    addr_hit[129] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_4_OFFSET);
    addr_hit[130] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_5_OFFSET);
    addr_hit[131] = (reg_addr == ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_6_OFFSET);
    addr_hit[132] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_0_OFFSET);
    addr_hit[133] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_1_OFFSET);
    addr_hit[134] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_2_OFFSET);
    addr_hit[135] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_3_OFFSET);
    addr_hit[136] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_4_OFFSET);
    addr_hit[137] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_5_OFFSET);
    addr_hit[138] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_6_OFFSET);
    addr_hit[139] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_0_OFFSET);
    addr_hit[140] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_1_OFFSET);
    addr_hit[141] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_2_OFFSET);
    addr_hit[142] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_3_OFFSET);
    addr_hit[143] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_4_OFFSET);
    addr_hit[144] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_5_OFFSET);
    addr_hit[145] = (reg_addr == ALERT_HANDLER_LOC_ALERT_CAUSE_6_OFFSET);
    addr_hit[146] = (reg_addr == ALERT_HANDLER_CLASSA_REGWEN_OFFSET);
    addr_hit[147] = (reg_addr == ALERT_HANDLER_CLASSA_CTRL_SHADOWED_OFFSET);
    addr_hit[148] = (reg_addr == ALERT_HANDLER_CLASSA_CLR_REGWEN_OFFSET);
    addr_hit[149] = (reg_addr == ALERT_HANDLER_CLASSA_CLR_SHADOWED_OFFSET);
    addr_hit[150] = (reg_addr == ALERT_HANDLER_CLASSA_ACCUM_CNT_OFFSET);
    addr_hit[151] = (reg_addr == ALERT_HANDLER_CLASSA_ACCUM_THRESH_SHADOWED_OFFSET);
    addr_hit[152] = (reg_addr == ALERT_HANDLER_CLASSA_TIMEOUT_CYC_SHADOWED_OFFSET);
    addr_hit[153] = (reg_addr == ALERT_HANDLER_CLASSA_CRASHDUMP_TRIGGER_SHADOWED_OFFSET);
    addr_hit[154] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE0_CYC_SHADOWED_OFFSET);
    addr_hit[155] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE1_CYC_SHADOWED_OFFSET);
    addr_hit[156] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE2_CYC_SHADOWED_OFFSET);
    addr_hit[157] = (reg_addr == ALERT_HANDLER_CLASSA_PHASE3_CYC_SHADOWED_OFFSET);
    addr_hit[158] = (reg_addr == ALERT_HANDLER_CLASSA_ESC_CNT_OFFSET);
    addr_hit[159] = (reg_addr == ALERT_HANDLER_CLASSA_STATE_OFFSET);
    addr_hit[160] = (reg_addr == ALERT_HANDLER_CLASSB_REGWEN_OFFSET);
    addr_hit[161] = (reg_addr == ALERT_HANDLER_CLASSB_CTRL_SHADOWED_OFFSET);
    addr_hit[162] = (reg_addr == ALERT_HANDLER_CLASSB_CLR_REGWEN_OFFSET);
    addr_hit[163] = (reg_addr == ALERT_HANDLER_CLASSB_CLR_SHADOWED_OFFSET);
    addr_hit[164] = (reg_addr == ALERT_HANDLER_CLASSB_ACCUM_CNT_OFFSET);
    addr_hit[165] = (reg_addr == ALERT_HANDLER_CLASSB_ACCUM_THRESH_SHADOWED_OFFSET);
    addr_hit[166] = (reg_addr == ALERT_HANDLER_CLASSB_TIMEOUT_CYC_SHADOWED_OFFSET);
    addr_hit[167] = (reg_addr == ALERT_HANDLER_CLASSB_CRASHDUMP_TRIGGER_SHADOWED_OFFSET);
    addr_hit[168] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE0_CYC_SHADOWED_OFFSET);
    addr_hit[169] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE1_CYC_SHADOWED_OFFSET);
    addr_hit[170] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE2_CYC_SHADOWED_OFFSET);
    addr_hit[171] = (reg_addr == ALERT_HANDLER_CLASSB_PHASE3_CYC_SHADOWED_OFFSET);
    addr_hit[172] = (reg_addr == ALERT_HANDLER_CLASSB_ESC_CNT_OFFSET);
    addr_hit[173] = (reg_addr == ALERT_HANDLER_CLASSB_STATE_OFFSET);
    addr_hit[174] = (reg_addr == ALERT_HANDLER_CLASSC_REGWEN_OFFSET);
    addr_hit[175] = (reg_addr == ALERT_HANDLER_CLASSC_CTRL_SHADOWED_OFFSET);
    addr_hit[176] = (reg_addr == ALERT_HANDLER_CLASSC_CLR_REGWEN_OFFSET);
    addr_hit[177] = (reg_addr == ALERT_HANDLER_CLASSC_CLR_SHADOWED_OFFSET);
    addr_hit[178] = (reg_addr == ALERT_HANDLER_CLASSC_ACCUM_CNT_OFFSET);
    addr_hit[179] = (reg_addr == ALERT_HANDLER_CLASSC_ACCUM_THRESH_SHADOWED_OFFSET);
    addr_hit[180] = (reg_addr == ALERT_HANDLER_CLASSC_TIMEOUT_CYC_SHADOWED_OFFSET);
    addr_hit[181] = (reg_addr == ALERT_HANDLER_CLASSC_CRASHDUMP_TRIGGER_SHADOWED_OFFSET);
    addr_hit[182] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE0_CYC_SHADOWED_OFFSET);
    addr_hit[183] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE1_CYC_SHADOWED_OFFSET);
    addr_hit[184] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE2_CYC_SHADOWED_OFFSET);
    addr_hit[185] = (reg_addr == ALERT_HANDLER_CLASSC_PHASE3_CYC_SHADOWED_OFFSET);
    addr_hit[186] = (reg_addr == ALERT_HANDLER_CLASSC_ESC_CNT_OFFSET);
    addr_hit[187] = (reg_addr == ALERT_HANDLER_CLASSC_STATE_OFFSET);
    addr_hit[188] = (reg_addr == ALERT_HANDLER_CLASSD_REGWEN_OFFSET);
    addr_hit[189] = (reg_addr == ALERT_HANDLER_CLASSD_CTRL_SHADOWED_OFFSET);
    addr_hit[190] = (reg_addr == ALERT_HANDLER_CLASSD_CLR_REGWEN_OFFSET);
    addr_hit[191] = (reg_addr == ALERT_HANDLER_CLASSD_CLR_SHADOWED_OFFSET);
    addr_hit[192] = (reg_addr == ALERT_HANDLER_CLASSD_ACCUM_CNT_OFFSET);
    addr_hit[193] = (reg_addr == ALERT_HANDLER_CLASSD_ACCUM_THRESH_SHADOWED_OFFSET);
    addr_hit[194] = (reg_addr == ALERT_HANDLER_CLASSD_TIMEOUT_CYC_SHADOWED_OFFSET);
    addr_hit[195] = (reg_addr == ALERT_HANDLER_CLASSD_CRASHDUMP_TRIGGER_SHADOWED_OFFSET);
    addr_hit[196] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE0_CYC_SHADOWED_OFFSET);
    addr_hit[197] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE1_CYC_SHADOWED_OFFSET);
    addr_hit[198] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE2_CYC_SHADOWED_OFFSET);
    addr_hit[199] = (reg_addr == ALERT_HANDLER_CLASSD_PHASE3_CYC_SHADOWED_OFFSET);
    addr_hit[200] = (reg_addr == ALERT_HANDLER_CLASSD_ESC_CNT_OFFSET);
    addr_hit[201] = (reg_addr == ALERT_HANDLER_CLASSD_STATE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(ALERT_HANDLER_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(ALERT_HANDLER_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(ALERT_HANDLER_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(ALERT_HANDLER_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(ALERT_HANDLER_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(ALERT_HANDLER_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(ALERT_HANDLER_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(ALERT_HANDLER_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(ALERT_HANDLER_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(ALERT_HANDLER_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(ALERT_HANDLER_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(ALERT_HANDLER_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(ALERT_HANDLER_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(ALERT_HANDLER_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(ALERT_HANDLER_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(ALERT_HANDLER_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(ALERT_HANDLER_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(ALERT_HANDLER_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(ALERT_HANDLER_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(ALERT_HANDLER_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(ALERT_HANDLER_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(ALERT_HANDLER_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(ALERT_HANDLER_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(ALERT_HANDLER_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(ALERT_HANDLER_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(ALERT_HANDLER_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(ALERT_HANDLER_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(ALERT_HANDLER_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(ALERT_HANDLER_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(ALERT_HANDLER_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(ALERT_HANDLER_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(ALERT_HANDLER_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(ALERT_HANDLER_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(ALERT_HANDLER_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(ALERT_HANDLER_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(ALERT_HANDLER_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(ALERT_HANDLER_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(ALERT_HANDLER_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(ALERT_HANDLER_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(ALERT_HANDLER_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(ALERT_HANDLER_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(ALERT_HANDLER_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(ALERT_HANDLER_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(ALERT_HANDLER_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(ALERT_HANDLER_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(ALERT_HANDLER_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(ALERT_HANDLER_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(ALERT_HANDLER_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(ALERT_HANDLER_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(ALERT_HANDLER_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(ALERT_HANDLER_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(ALERT_HANDLER_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(ALERT_HANDLER_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(ALERT_HANDLER_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(ALERT_HANDLER_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(ALERT_HANDLER_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(ALERT_HANDLER_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(ALERT_HANDLER_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(ALERT_HANDLER_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(ALERT_HANDLER_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(ALERT_HANDLER_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(ALERT_HANDLER_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(ALERT_HANDLER_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(ALERT_HANDLER_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(ALERT_HANDLER_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(ALERT_HANDLER_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(ALERT_HANDLER_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(ALERT_HANDLER_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(ALERT_HANDLER_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(ALERT_HANDLER_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(ALERT_HANDLER_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(ALERT_HANDLER_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(ALERT_HANDLER_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(ALERT_HANDLER_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(ALERT_HANDLER_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(ALERT_HANDLER_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(ALERT_HANDLER_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(ALERT_HANDLER_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(ALERT_HANDLER_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(ALERT_HANDLER_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(ALERT_HANDLER_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(ALERT_HANDLER_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(ALERT_HANDLER_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(ALERT_HANDLER_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(ALERT_HANDLER_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(ALERT_HANDLER_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(ALERT_HANDLER_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(ALERT_HANDLER_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(ALERT_HANDLER_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(ALERT_HANDLER_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(ALERT_HANDLER_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(ALERT_HANDLER_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(ALERT_HANDLER_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(ALERT_HANDLER_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(ALERT_HANDLER_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(ALERT_HANDLER_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(ALERT_HANDLER_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(ALERT_HANDLER_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(ALERT_HANDLER_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(ALERT_HANDLER_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(ALERT_HANDLER_PERMIT[100] & ~reg_be))) |
               (addr_hit[101] & (|(ALERT_HANDLER_PERMIT[101] & ~reg_be))) |
               (addr_hit[102] & (|(ALERT_HANDLER_PERMIT[102] & ~reg_be))) |
               (addr_hit[103] & (|(ALERT_HANDLER_PERMIT[103] & ~reg_be))) |
               (addr_hit[104] & (|(ALERT_HANDLER_PERMIT[104] & ~reg_be))) |
               (addr_hit[105] & (|(ALERT_HANDLER_PERMIT[105] & ~reg_be))) |
               (addr_hit[106] & (|(ALERT_HANDLER_PERMIT[106] & ~reg_be))) |
               (addr_hit[107] & (|(ALERT_HANDLER_PERMIT[107] & ~reg_be))) |
               (addr_hit[108] & (|(ALERT_HANDLER_PERMIT[108] & ~reg_be))) |
               (addr_hit[109] & (|(ALERT_HANDLER_PERMIT[109] & ~reg_be))) |
               (addr_hit[110] & (|(ALERT_HANDLER_PERMIT[110] & ~reg_be))) |
               (addr_hit[111] & (|(ALERT_HANDLER_PERMIT[111] & ~reg_be))) |
               (addr_hit[112] & (|(ALERT_HANDLER_PERMIT[112] & ~reg_be))) |
               (addr_hit[113] & (|(ALERT_HANDLER_PERMIT[113] & ~reg_be))) |
               (addr_hit[114] & (|(ALERT_HANDLER_PERMIT[114] & ~reg_be))) |
               (addr_hit[115] & (|(ALERT_HANDLER_PERMIT[115] & ~reg_be))) |
               (addr_hit[116] & (|(ALERT_HANDLER_PERMIT[116] & ~reg_be))) |
               (addr_hit[117] & (|(ALERT_HANDLER_PERMIT[117] & ~reg_be))) |
               (addr_hit[118] & (|(ALERT_HANDLER_PERMIT[118] & ~reg_be))) |
               (addr_hit[119] & (|(ALERT_HANDLER_PERMIT[119] & ~reg_be))) |
               (addr_hit[120] & (|(ALERT_HANDLER_PERMIT[120] & ~reg_be))) |
               (addr_hit[121] & (|(ALERT_HANDLER_PERMIT[121] & ~reg_be))) |
               (addr_hit[122] & (|(ALERT_HANDLER_PERMIT[122] & ~reg_be))) |
               (addr_hit[123] & (|(ALERT_HANDLER_PERMIT[123] & ~reg_be))) |
               (addr_hit[124] & (|(ALERT_HANDLER_PERMIT[124] & ~reg_be))) |
               (addr_hit[125] & (|(ALERT_HANDLER_PERMIT[125] & ~reg_be))) |
               (addr_hit[126] & (|(ALERT_HANDLER_PERMIT[126] & ~reg_be))) |
               (addr_hit[127] & (|(ALERT_HANDLER_PERMIT[127] & ~reg_be))) |
               (addr_hit[128] & (|(ALERT_HANDLER_PERMIT[128] & ~reg_be))) |
               (addr_hit[129] & (|(ALERT_HANDLER_PERMIT[129] & ~reg_be))) |
               (addr_hit[130] & (|(ALERT_HANDLER_PERMIT[130] & ~reg_be))) |
               (addr_hit[131] & (|(ALERT_HANDLER_PERMIT[131] & ~reg_be))) |
               (addr_hit[132] & (|(ALERT_HANDLER_PERMIT[132] & ~reg_be))) |
               (addr_hit[133] & (|(ALERT_HANDLER_PERMIT[133] & ~reg_be))) |
               (addr_hit[134] & (|(ALERT_HANDLER_PERMIT[134] & ~reg_be))) |
               (addr_hit[135] & (|(ALERT_HANDLER_PERMIT[135] & ~reg_be))) |
               (addr_hit[136] & (|(ALERT_HANDLER_PERMIT[136] & ~reg_be))) |
               (addr_hit[137] & (|(ALERT_HANDLER_PERMIT[137] & ~reg_be))) |
               (addr_hit[138] & (|(ALERT_HANDLER_PERMIT[138] & ~reg_be))) |
               (addr_hit[139] & (|(ALERT_HANDLER_PERMIT[139] & ~reg_be))) |
               (addr_hit[140] & (|(ALERT_HANDLER_PERMIT[140] & ~reg_be))) |
               (addr_hit[141] & (|(ALERT_HANDLER_PERMIT[141] & ~reg_be))) |
               (addr_hit[142] & (|(ALERT_HANDLER_PERMIT[142] & ~reg_be))) |
               (addr_hit[143] & (|(ALERT_HANDLER_PERMIT[143] & ~reg_be))) |
               (addr_hit[144] & (|(ALERT_HANDLER_PERMIT[144] & ~reg_be))) |
               (addr_hit[145] & (|(ALERT_HANDLER_PERMIT[145] & ~reg_be))) |
               (addr_hit[146] & (|(ALERT_HANDLER_PERMIT[146] & ~reg_be))) |
               (addr_hit[147] & (|(ALERT_HANDLER_PERMIT[147] & ~reg_be))) |
               (addr_hit[148] & (|(ALERT_HANDLER_PERMIT[148] & ~reg_be))) |
               (addr_hit[149] & (|(ALERT_HANDLER_PERMIT[149] & ~reg_be))) |
               (addr_hit[150] & (|(ALERT_HANDLER_PERMIT[150] & ~reg_be))) |
               (addr_hit[151] & (|(ALERT_HANDLER_PERMIT[151] & ~reg_be))) |
               (addr_hit[152] & (|(ALERT_HANDLER_PERMIT[152] & ~reg_be))) |
               (addr_hit[153] & (|(ALERT_HANDLER_PERMIT[153] & ~reg_be))) |
               (addr_hit[154] & (|(ALERT_HANDLER_PERMIT[154] & ~reg_be))) |
               (addr_hit[155] & (|(ALERT_HANDLER_PERMIT[155] & ~reg_be))) |
               (addr_hit[156] & (|(ALERT_HANDLER_PERMIT[156] & ~reg_be))) |
               (addr_hit[157] & (|(ALERT_HANDLER_PERMIT[157] & ~reg_be))) |
               (addr_hit[158] & (|(ALERT_HANDLER_PERMIT[158] & ~reg_be))) |
               (addr_hit[159] & (|(ALERT_HANDLER_PERMIT[159] & ~reg_be))) |
               (addr_hit[160] & (|(ALERT_HANDLER_PERMIT[160] & ~reg_be))) |
               (addr_hit[161] & (|(ALERT_HANDLER_PERMIT[161] & ~reg_be))) |
               (addr_hit[162] & (|(ALERT_HANDLER_PERMIT[162] & ~reg_be))) |
               (addr_hit[163] & (|(ALERT_HANDLER_PERMIT[163] & ~reg_be))) |
               (addr_hit[164] & (|(ALERT_HANDLER_PERMIT[164] & ~reg_be))) |
               (addr_hit[165] & (|(ALERT_HANDLER_PERMIT[165] & ~reg_be))) |
               (addr_hit[166] & (|(ALERT_HANDLER_PERMIT[166] & ~reg_be))) |
               (addr_hit[167] & (|(ALERT_HANDLER_PERMIT[167] & ~reg_be))) |
               (addr_hit[168] & (|(ALERT_HANDLER_PERMIT[168] & ~reg_be))) |
               (addr_hit[169] & (|(ALERT_HANDLER_PERMIT[169] & ~reg_be))) |
               (addr_hit[170] & (|(ALERT_HANDLER_PERMIT[170] & ~reg_be))) |
               (addr_hit[171] & (|(ALERT_HANDLER_PERMIT[171] & ~reg_be))) |
               (addr_hit[172] & (|(ALERT_HANDLER_PERMIT[172] & ~reg_be))) |
               (addr_hit[173] & (|(ALERT_HANDLER_PERMIT[173] & ~reg_be))) |
               (addr_hit[174] & (|(ALERT_HANDLER_PERMIT[174] & ~reg_be))) |
               (addr_hit[175] & (|(ALERT_HANDLER_PERMIT[175] & ~reg_be))) |
               (addr_hit[176] & (|(ALERT_HANDLER_PERMIT[176] & ~reg_be))) |
               (addr_hit[177] & (|(ALERT_HANDLER_PERMIT[177] & ~reg_be))) |
               (addr_hit[178] & (|(ALERT_HANDLER_PERMIT[178] & ~reg_be))) |
               (addr_hit[179] & (|(ALERT_HANDLER_PERMIT[179] & ~reg_be))) |
               (addr_hit[180] & (|(ALERT_HANDLER_PERMIT[180] & ~reg_be))) |
               (addr_hit[181] & (|(ALERT_HANDLER_PERMIT[181] & ~reg_be))) |
               (addr_hit[182] & (|(ALERT_HANDLER_PERMIT[182] & ~reg_be))) |
               (addr_hit[183] & (|(ALERT_HANDLER_PERMIT[183] & ~reg_be))) |
               (addr_hit[184] & (|(ALERT_HANDLER_PERMIT[184] & ~reg_be))) |
               (addr_hit[185] & (|(ALERT_HANDLER_PERMIT[185] & ~reg_be))) |
               (addr_hit[186] & (|(ALERT_HANDLER_PERMIT[186] & ~reg_be))) |
               (addr_hit[187] & (|(ALERT_HANDLER_PERMIT[187] & ~reg_be))) |
               (addr_hit[188] & (|(ALERT_HANDLER_PERMIT[188] & ~reg_be))) |
               (addr_hit[189] & (|(ALERT_HANDLER_PERMIT[189] & ~reg_be))) |
               (addr_hit[190] & (|(ALERT_HANDLER_PERMIT[190] & ~reg_be))) |
               (addr_hit[191] & (|(ALERT_HANDLER_PERMIT[191] & ~reg_be))) |
               (addr_hit[192] & (|(ALERT_HANDLER_PERMIT[192] & ~reg_be))) |
               (addr_hit[193] & (|(ALERT_HANDLER_PERMIT[193] & ~reg_be))) |
               (addr_hit[194] & (|(ALERT_HANDLER_PERMIT[194] & ~reg_be))) |
               (addr_hit[195] & (|(ALERT_HANDLER_PERMIT[195] & ~reg_be))) |
               (addr_hit[196] & (|(ALERT_HANDLER_PERMIT[196] & ~reg_be))) |
               (addr_hit[197] & (|(ALERT_HANDLER_PERMIT[197] & ~reg_be))) |
               (addr_hit[198] & (|(ALERT_HANDLER_PERMIT[198] & ~reg_be))) |
               (addr_hit[199] & (|(ALERT_HANDLER_PERMIT[199] & ~reg_be))) |
               (addr_hit[200] & (|(ALERT_HANDLER_PERMIT[200] & ~reg_be))) |
               (addr_hit[201] & (|(ALERT_HANDLER_PERMIT[201] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;

  assign intr_state_classa_wd = reg_wdata[0];

  assign intr_state_classb_wd = reg_wdata[1];

  assign intr_state_classc_wd = reg_wdata[2];

  assign intr_state_classd_wd = reg_wdata[3];
  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;

  assign intr_enable_classa_wd = reg_wdata[0];

  assign intr_enable_classb_wd = reg_wdata[1];

  assign intr_enable_classc_wd = reg_wdata[2];

  assign intr_enable_classd_wd = reg_wdata[3];
  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;

  assign intr_test_classa_wd = reg_wdata[0];

  assign intr_test_classb_wd = reg_wdata[1];

  assign intr_test_classc_wd = reg_wdata[2];

  assign intr_test_classd_wd = reg_wdata[3];
  assign ping_timer_regwen_we = addr_hit[3] & reg_we & !reg_error;

  assign ping_timer_regwen_wd = reg_wdata[0];
  assign ping_timeout_cyc_shadowed_re = addr_hit[4] & reg_re & !reg_error;
  assign ping_timeout_cyc_shadowed_we = addr_hit[4] & reg_we & !reg_error;

  assign ping_timeout_cyc_shadowed_wd = reg_wdata[15:0];
  assign ping_timer_en_shadowed_re = addr_hit[5] & reg_re & !reg_error;
  assign ping_timer_en_shadowed_we = addr_hit[5] & reg_we & !reg_error;

  assign ping_timer_en_shadowed_wd = reg_wdata[0];
  assign alert_regwen_0_we = addr_hit[6] & reg_we & !reg_error;

  assign alert_regwen_0_wd = reg_wdata[0];
  assign alert_regwen_1_we = addr_hit[7] & reg_we & !reg_error;

  assign alert_regwen_1_wd = reg_wdata[0];
  assign alert_regwen_2_we = addr_hit[8] & reg_we & !reg_error;

  assign alert_regwen_2_wd = reg_wdata[0];
  assign alert_regwen_3_we = addr_hit[9] & reg_we & !reg_error;

  assign alert_regwen_3_wd = reg_wdata[0];
  assign alert_regwen_4_we = addr_hit[10] & reg_we & !reg_error;

  assign alert_regwen_4_wd = reg_wdata[0];
  assign alert_regwen_5_we = addr_hit[11] & reg_we & !reg_error;

  assign alert_regwen_5_wd = reg_wdata[0];
  assign alert_regwen_6_we = addr_hit[12] & reg_we & !reg_error;

  assign alert_regwen_6_wd = reg_wdata[0];
  assign alert_regwen_7_we = addr_hit[13] & reg_we & !reg_error;

  assign alert_regwen_7_wd = reg_wdata[0];
  assign alert_regwen_8_we = addr_hit[14] & reg_we & !reg_error;

  assign alert_regwen_8_wd = reg_wdata[0];
  assign alert_regwen_9_we = addr_hit[15] & reg_we & !reg_error;

  assign alert_regwen_9_wd = reg_wdata[0];
  assign alert_regwen_10_we = addr_hit[16] & reg_we & !reg_error;

  assign alert_regwen_10_wd = reg_wdata[0];
  assign alert_regwen_11_we = addr_hit[17] & reg_we & !reg_error;

  assign alert_regwen_11_wd = reg_wdata[0];
  assign alert_regwen_12_we = addr_hit[18] & reg_we & !reg_error;

  assign alert_regwen_12_wd = reg_wdata[0];
  assign alert_regwen_13_we = addr_hit[19] & reg_we & !reg_error;

  assign alert_regwen_13_wd = reg_wdata[0];
  assign alert_regwen_14_we = addr_hit[20] & reg_we & !reg_error;

  assign alert_regwen_14_wd = reg_wdata[0];
  assign alert_regwen_15_we = addr_hit[21] & reg_we & !reg_error;

  assign alert_regwen_15_wd = reg_wdata[0];
  assign alert_regwen_16_we = addr_hit[22] & reg_we & !reg_error;

  assign alert_regwen_16_wd = reg_wdata[0];
  assign alert_regwen_17_we = addr_hit[23] & reg_we & !reg_error;

  assign alert_regwen_17_wd = reg_wdata[0];
  assign alert_regwen_18_we = addr_hit[24] & reg_we & !reg_error;

  assign alert_regwen_18_wd = reg_wdata[0];
  assign alert_regwen_19_we = addr_hit[25] & reg_we & !reg_error;

  assign alert_regwen_19_wd = reg_wdata[0];
  assign alert_regwen_20_we = addr_hit[26] & reg_we & !reg_error;

  assign alert_regwen_20_wd = reg_wdata[0];
  assign alert_regwen_21_we = addr_hit[27] & reg_we & !reg_error;

  assign alert_regwen_21_wd = reg_wdata[0];
  assign alert_regwen_22_we = addr_hit[28] & reg_we & !reg_error;

  assign alert_regwen_22_wd = reg_wdata[0];
  assign alert_regwen_23_we = addr_hit[29] & reg_we & !reg_error;

  assign alert_regwen_23_wd = reg_wdata[0];
  assign alert_regwen_24_we = addr_hit[30] & reg_we & !reg_error;

  assign alert_regwen_24_wd = reg_wdata[0];
  assign alert_regwen_25_we = addr_hit[31] & reg_we & !reg_error;

  assign alert_regwen_25_wd = reg_wdata[0];
  assign alert_regwen_26_we = addr_hit[32] & reg_we & !reg_error;

  assign alert_regwen_26_wd = reg_wdata[0];
  assign alert_regwen_27_we = addr_hit[33] & reg_we & !reg_error;

  assign alert_regwen_27_wd = reg_wdata[0];
  assign alert_en_shadowed_0_re = addr_hit[34] & reg_re & !reg_error;
  assign alert_en_shadowed_0_we = addr_hit[34] & reg_we & !reg_error;

  assign alert_en_shadowed_0_wd = reg_wdata[0];
  assign alert_en_shadowed_1_re = addr_hit[35] & reg_re & !reg_error;
  assign alert_en_shadowed_1_we = addr_hit[35] & reg_we & !reg_error;

  assign alert_en_shadowed_1_wd = reg_wdata[0];
  assign alert_en_shadowed_2_re = addr_hit[36] & reg_re & !reg_error;
  assign alert_en_shadowed_2_we = addr_hit[36] & reg_we & !reg_error;

  assign alert_en_shadowed_2_wd = reg_wdata[0];
  assign alert_en_shadowed_3_re = addr_hit[37] & reg_re & !reg_error;
  assign alert_en_shadowed_3_we = addr_hit[37] & reg_we & !reg_error;

  assign alert_en_shadowed_3_wd = reg_wdata[0];
  assign alert_en_shadowed_4_re = addr_hit[38] & reg_re & !reg_error;
  assign alert_en_shadowed_4_we = addr_hit[38] & reg_we & !reg_error;

  assign alert_en_shadowed_4_wd = reg_wdata[0];
  assign alert_en_shadowed_5_re = addr_hit[39] & reg_re & !reg_error;
  assign alert_en_shadowed_5_we = addr_hit[39] & reg_we & !reg_error;

  assign alert_en_shadowed_5_wd = reg_wdata[0];
  assign alert_en_shadowed_6_re = addr_hit[40] & reg_re & !reg_error;
  assign alert_en_shadowed_6_we = addr_hit[40] & reg_we & !reg_error;

  assign alert_en_shadowed_6_wd = reg_wdata[0];
  assign alert_en_shadowed_7_re = addr_hit[41] & reg_re & !reg_error;
  assign alert_en_shadowed_7_we = addr_hit[41] & reg_we & !reg_error;

  assign alert_en_shadowed_7_wd = reg_wdata[0];
  assign alert_en_shadowed_8_re = addr_hit[42] & reg_re & !reg_error;
  assign alert_en_shadowed_8_we = addr_hit[42] & reg_we & !reg_error;

  assign alert_en_shadowed_8_wd = reg_wdata[0];
  assign alert_en_shadowed_9_re = addr_hit[43] & reg_re & !reg_error;
  assign alert_en_shadowed_9_we = addr_hit[43] & reg_we & !reg_error;

  assign alert_en_shadowed_9_wd = reg_wdata[0];
  assign alert_en_shadowed_10_re = addr_hit[44] & reg_re & !reg_error;
  assign alert_en_shadowed_10_we = addr_hit[44] & reg_we & !reg_error;

  assign alert_en_shadowed_10_wd = reg_wdata[0];
  assign alert_en_shadowed_11_re = addr_hit[45] & reg_re & !reg_error;
  assign alert_en_shadowed_11_we = addr_hit[45] & reg_we & !reg_error;

  assign alert_en_shadowed_11_wd = reg_wdata[0];
  assign alert_en_shadowed_12_re = addr_hit[46] & reg_re & !reg_error;
  assign alert_en_shadowed_12_we = addr_hit[46] & reg_we & !reg_error;

  assign alert_en_shadowed_12_wd = reg_wdata[0];
  assign alert_en_shadowed_13_re = addr_hit[47] & reg_re & !reg_error;
  assign alert_en_shadowed_13_we = addr_hit[47] & reg_we & !reg_error;

  assign alert_en_shadowed_13_wd = reg_wdata[0];
  assign alert_en_shadowed_14_re = addr_hit[48] & reg_re & !reg_error;
  assign alert_en_shadowed_14_we = addr_hit[48] & reg_we & !reg_error;

  assign alert_en_shadowed_14_wd = reg_wdata[0];
  assign alert_en_shadowed_15_re = addr_hit[49] & reg_re & !reg_error;
  assign alert_en_shadowed_15_we = addr_hit[49] & reg_we & !reg_error;

  assign alert_en_shadowed_15_wd = reg_wdata[0];
  assign alert_en_shadowed_16_re = addr_hit[50] & reg_re & !reg_error;
  assign alert_en_shadowed_16_we = addr_hit[50] & reg_we & !reg_error;

  assign alert_en_shadowed_16_wd = reg_wdata[0];
  assign alert_en_shadowed_17_re = addr_hit[51] & reg_re & !reg_error;
  assign alert_en_shadowed_17_we = addr_hit[51] & reg_we & !reg_error;

  assign alert_en_shadowed_17_wd = reg_wdata[0];
  assign alert_en_shadowed_18_re = addr_hit[52] & reg_re & !reg_error;
  assign alert_en_shadowed_18_we = addr_hit[52] & reg_we & !reg_error;

  assign alert_en_shadowed_18_wd = reg_wdata[0];
  assign alert_en_shadowed_19_re = addr_hit[53] & reg_re & !reg_error;
  assign alert_en_shadowed_19_we = addr_hit[53] & reg_we & !reg_error;

  assign alert_en_shadowed_19_wd = reg_wdata[0];
  assign alert_en_shadowed_20_re = addr_hit[54] & reg_re & !reg_error;
  assign alert_en_shadowed_20_we = addr_hit[54] & reg_we & !reg_error;

  assign alert_en_shadowed_20_wd = reg_wdata[0];
  assign alert_en_shadowed_21_re = addr_hit[55] & reg_re & !reg_error;
  assign alert_en_shadowed_21_we = addr_hit[55] & reg_we & !reg_error;

  assign alert_en_shadowed_21_wd = reg_wdata[0];
  assign alert_en_shadowed_22_re = addr_hit[56] & reg_re & !reg_error;
  assign alert_en_shadowed_22_we = addr_hit[56] & reg_we & !reg_error;

  assign alert_en_shadowed_22_wd = reg_wdata[0];
  assign alert_en_shadowed_23_re = addr_hit[57] & reg_re & !reg_error;
  assign alert_en_shadowed_23_we = addr_hit[57] & reg_we & !reg_error;

  assign alert_en_shadowed_23_wd = reg_wdata[0];
  assign alert_en_shadowed_24_re = addr_hit[58] & reg_re & !reg_error;
  assign alert_en_shadowed_24_we = addr_hit[58] & reg_we & !reg_error;

  assign alert_en_shadowed_24_wd = reg_wdata[0];
  assign alert_en_shadowed_25_re = addr_hit[59] & reg_re & !reg_error;
  assign alert_en_shadowed_25_we = addr_hit[59] & reg_we & !reg_error;

  assign alert_en_shadowed_25_wd = reg_wdata[0];
  assign alert_en_shadowed_26_re = addr_hit[60] & reg_re & !reg_error;
  assign alert_en_shadowed_26_we = addr_hit[60] & reg_we & !reg_error;

  assign alert_en_shadowed_26_wd = reg_wdata[0];
  assign alert_en_shadowed_27_re = addr_hit[61] & reg_re & !reg_error;
  assign alert_en_shadowed_27_we = addr_hit[61] & reg_we & !reg_error;

  assign alert_en_shadowed_27_wd = reg_wdata[0];
  assign alert_class_shadowed_0_re = addr_hit[62] & reg_re & !reg_error;
  assign alert_class_shadowed_0_we = addr_hit[62] & reg_we & !reg_error;

  assign alert_class_shadowed_0_wd = reg_wdata[1:0];
  assign alert_class_shadowed_1_re = addr_hit[63] & reg_re & !reg_error;
  assign alert_class_shadowed_1_we = addr_hit[63] & reg_we & !reg_error;

  assign alert_class_shadowed_1_wd = reg_wdata[1:0];
  assign alert_class_shadowed_2_re = addr_hit[64] & reg_re & !reg_error;
  assign alert_class_shadowed_2_we = addr_hit[64] & reg_we & !reg_error;

  assign alert_class_shadowed_2_wd = reg_wdata[1:0];
  assign alert_class_shadowed_3_re = addr_hit[65] & reg_re & !reg_error;
  assign alert_class_shadowed_3_we = addr_hit[65] & reg_we & !reg_error;

  assign alert_class_shadowed_3_wd = reg_wdata[1:0];
  assign alert_class_shadowed_4_re = addr_hit[66] & reg_re & !reg_error;
  assign alert_class_shadowed_4_we = addr_hit[66] & reg_we & !reg_error;

  assign alert_class_shadowed_4_wd = reg_wdata[1:0];
  assign alert_class_shadowed_5_re = addr_hit[67] & reg_re & !reg_error;
  assign alert_class_shadowed_5_we = addr_hit[67] & reg_we & !reg_error;

  assign alert_class_shadowed_5_wd = reg_wdata[1:0];
  assign alert_class_shadowed_6_re = addr_hit[68] & reg_re & !reg_error;
  assign alert_class_shadowed_6_we = addr_hit[68] & reg_we & !reg_error;

  assign alert_class_shadowed_6_wd = reg_wdata[1:0];
  assign alert_class_shadowed_7_re = addr_hit[69] & reg_re & !reg_error;
  assign alert_class_shadowed_7_we = addr_hit[69] & reg_we & !reg_error;

  assign alert_class_shadowed_7_wd = reg_wdata[1:0];
  assign alert_class_shadowed_8_re = addr_hit[70] & reg_re & !reg_error;
  assign alert_class_shadowed_8_we = addr_hit[70] & reg_we & !reg_error;

  assign alert_class_shadowed_8_wd = reg_wdata[1:0];
  assign alert_class_shadowed_9_re = addr_hit[71] & reg_re & !reg_error;
  assign alert_class_shadowed_9_we = addr_hit[71] & reg_we & !reg_error;

  assign alert_class_shadowed_9_wd = reg_wdata[1:0];
  assign alert_class_shadowed_10_re = addr_hit[72] & reg_re & !reg_error;
  assign alert_class_shadowed_10_we = addr_hit[72] & reg_we & !reg_error;

  assign alert_class_shadowed_10_wd = reg_wdata[1:0];
  assign alert_class_shadowed_11_re = addr_hit[73] & reg_re & !reg_error;
  assign alert_class_shadowed_11_we = addr_hit[73] & reg_we & !reg_error;

  assign alert_class_shadowed_11_wd = reg_wdata[1:0];
  assign alert_class_shadowed_12_re = addr_hit[74] & reg_re & !reg_error;
  assign alert_class_shadowed_12_we = addr_hit[74] & reg_we & !reg_error;

  assign alert_class_shadowed_12_wd = reg_wdata[1:0];
  assign alert_class_shadowed_13_re = addr_hit[75] & reg_re & !reg_error;
  assign alert_class_shadowed_13_we = addr_hit[75] & reg_we & !reg_error;

  assign alert_class_shadowed_13_wd = reg_wdata[1:0];
  assign alert_class_shadowed_14_re = addr_hit[76] & reg_re & !reg_error;
  assign alert_class_shadowed_14_we = addr_hit[76] & reg_we & !reg_error;

  assign alert_class_shadowed_14_wd = reg_wdata[1:0];
  assign alert_class_shadowed_15_re = addr_hit[77] & reg_re & !reg_error;
  assign alert_class_shadowed_15_we = addr_hit[77] & reg_we & !reg_error;

  assign alert_class_shadowed_15_wd = reg_wdata[1:0];
  assign alert_class_shadowed_16_re = addr_hit[78] & reg_re & !reg_error;
  assign alert_class_shadowed_16_we = addr_hit[78] & reg_we & !reg_error;

  assign alert_class_shadowed_16_wd = reg_wdata[1:0];
  assign alert_class_shadowed_17_re = addr_hit[79] & reg_re & !reg_error;
  assign alert_class_shadowed_17_we = addr_hit[79] & reg_we & !reg_error;

  assign alert_class_shadowed_17_wd = reg_wdata[1:0];
  assign alert_class_shadowed_18_re = addr_hit[80] & reg_re & !reg_error;
  assign alert_class_shadowed_18_we = addr_hit[80] & reg_we & !reg_error;

  assign alert_class_shadowed_18_wd = reg_wdata[1:0];
  assign alert_class_shadowed_19_re = addr_hit[81] & reg_re & !reg_error;
  assign alert_class_shadowed_19_we = addr_hit[81] & reg_we & !reg_error;

  assign alert_class_shadowed_19_wd = reg_wdata[1:0];
  assign alert_class_shadowed_20_re = addr_hit[82] & reg_re & !reg_error;
  assign alert_class_shadowed_20_we = addr_hit[82] & reg_we & !reg_error;

  assign alert_class_shadowed_20_wd = reg_wdata[1:0];
  assign alert_class_shadowed_21_re = addr_hit[83] & reg_re & !reg_error;
  assign alert_class_shadowed_21_we = addr_hit[83] & reg_we & !reg_error;

  assign alert_class_shadowed_21_wd = reg_wdata[1:0];
  assign alert_class_shadowed_22_re = addr_hit[84] & reg_re & !reg_error;
  assign alert_class_shadowed_22_we = addr_hit[84] & reg_we & !reg_error;

  assign alert_class_shadowed_22_wd = reg_wdata[1:0];
  assign alert_class_shadowed_23_re = addr_hit[85] & reg_re & !reg_error;
  assign alert_class_shadowed_23_we = addr_hit[85] & reg_we & !reg_error;

  assign alert_class_shadowed_23_wd = reg_wdata[1:0];
  assign alert_class_shadowed_24_re = addr_hit[86] & reg_re & !reg_error;
  assign alert_class_shadowed_24_we = addr_hit[86] & reg_we & !reg_error;

  assign alert_class_shadowed_24_wd = reg_wdata[1:0];
  assign alert_class_shadowed_25_re = addr_hit[87] & reg_re & !reg_error;
  assign alert_class_shadowed_25_we = addr_hit[87] & reg_we & !reg_error;

  assign alert_class_shadowed_25_wd = reg_wdata[1:0];
  assign alert_class_shadowed_26_re = addr_hit[88] & reg_re & !reg_error;
  assign alert_class_shadowed_26_we = addr_hit[88] & reg_we & !reg_error;

  assign alert_class_shadowed_26_wd = reg_wdata[1:0];
  assign alert_class_shadowed_27_re = addr_hit[89] & reg_re & !reg_error;
  assign alert_class_shadowed_27_we = addr_hit[89] & reg_we & !reg_error;

  assign alert_class_shadowed_27_wd = reg_wdata[1:0];
  assign alert_cause_0_we = addr_hit[90] & reg_we & !reg_error;

  assign alert_cause_0_wd = reg_wdata[0];
  assign alert_cause_1_we = addr_hit[91] & reg_we & !reg_error;

  assign alert_cause_1_wd = reg_wdata[0];
  assign alert_cause_2_we = addr_hit[92] & reg_we & !reg_error;

  assign alert_cause_2_wd = reg_wdata[0];
  assign alert_cause_3_we = addr_hit[93] & reg_we & !reg_error;

  assign alert_cause_3_wd = reg_wdata[0];
  assign alert_cause_4_we = addr_hit[94] & reg_we & !reg_error;

  assign alert_cause_4_wd = reg_wdata[0];
  assign alert_cause_5_we = addr_hit[95] & reg_we & !reg_error;

  assign alert_cause_5_wd = reg_wdata[0];
  assign alert_cause_6_we = addr_hit[96] & reg_we & !reg_error;

  assign alert_cause_6_wd = reg_wdata[0];
  assign alert_cause_7_we = addr_hit[97] & reg_we & !reg_error;

  assign alert_cause_7_wd = reg_wdata[0];
  assign alert_cause_8_we = addr_hit[98] & reg_we & !reg_error;

  assign alert_cause_8_wd = reg_wdata[0];
  assign alert_cause_9_we = addr_hit[99] & reg_we & !reg_error;

  assign alert_cause_9_wd = reg_wdata[0];
  assign alert_cause_10_we = addr_hit[100] & reg_we & !reg_error;

  assign alert_cause_10_wd = reg_wdata[0];
  assign alert_cause_11_we = addr_hit[101] & reg_we & !reg_error;

  assign alert_cause_11_wd = reg_wdata[0];
  assign alert_cause_12_we = addr_hit[102] & reg_we & !reg_error;

  assign alert_cause_12_wd = reg_wdata[0];
  assign alert_cause_13_we = addr_hit[103] & reg_we & !reg_error;

  assign alert_cause_13_wd = reg_wdata[0];
  assign alert_cause_14_we = addr_hit[104] & reg_we & !reg_error;

  assign alert_cause_14_wd = reg_wdata[0];
  assign alert_cause_15_we = addr_hit[105] & reg_we & !reg_error;

  assign alert_cause_15_wd = reg_wdata[0];
  assign alert_cause_16_we = addr_hit[106] & reg_we & !reg_error;

  assign alert_cause_16_wd = reg_wdata[0];
  assign alert_cause_17_we = addr_hit[107] & reg_we & !reg_error;

  assign alert_cause_17_wd = reg_wdata[0];
  assign alert_cause_18_we = addr_hit[108] & reg_we & !reg_error;

  assign alert_cause_18_wd = reg_wdata[0];
  assign alert_cause_19_we = addr_hit[109] & reg_we & !reg_error;

  assign alert_cause_19_wd = reg_wdata[0];
  assign alert_cause_20_we = addr_hit[110] & reg_we & !reg_error;

  assign alert_cause_20_wd = reg_wdata[0];
  assign alert_cause_21_we = addr_hit[111] & reg_we & !reg_error;

  assign alert_cause_21_wd = reg_wdata[0];
  assign alert_cause_22_we = addr_hit[112] & reg_we & !reg_error;

  assign alert_cause_22_wd = reg_wdata[0];
  assign alert_cause_23_we = addr_hit[113] & reg_we & !reg_error;

  assign alert_cause_23_wd = reg_wdata[0];
  assign alert_cause_24_we = addr_hit[114] & reg_we & !reg_error;

  assign alert_cause_24_wd = reg_wdata[0];
  assign alert_cause_25_we = addr_hit[115] & reg_we & !reg_error;

  assign alert_cause_25_wd = reg_wdata[0];
  assign alert_cause_26_we = addr_hit[116] & reg_we & !reg_error;

  assign alert_cause_26_wd = reg_wdata[0];
  assign alert_cause_27_we = addr_hit[117] & reg_we & !reg_error;

  assign alert_cause_27_wd = reg_wdata[0];
  assign loc_alert_regwen_0_we = addr_hit[118] & reg_we & !reg_error;

  assign loc_alert_regwen_0_wd = reg_wdata[0];
  assign loc_alert_regwen_1_we = addr_hit[119] & reg_we & !reg_error;

  assign loc_alert_regwen_1_wd = reg_wdata[0];
  assign loc_alert_regwen_2_we = addr_hit[120] & reg_we & !reg_error;

  assign loc_alert_regwen_2_wd = reg_wdata[0];
  assign loc_alert_regwen_3_we = addr_hit[121] & reg_we & !reg_error;

  assign loc_alert_regwen_3_wd = reg_wdata[0];
  assign loc_alert_regwen_4_we = addr_hit[122] & reg_we & !reg_error;

  assign loc_alert_regwen_4_wd = reg_wdata[0];
  assign loc_alert_regwen_5_we = addr_hit[123] & reg_we & !reg_error;

  assign loc_alert_regwen_5_wd = reg_wdata[0];
  assign loc_alert_regwen_6_we = addr_hit[124] & reg_we & !reg_error;

  assign loc_alert_regwen_6_wd = reg_wdata[0];
  assign loc_alert_en_shadowed_0_re = addr_hit[125] & reg_re & !reg_error;
  assign loc_alert_en_shadowed_0_we = addr_hit[125] & reg_we & !reg_error;

  assign loc_alert_en_shadowed_0_wd = reg_wdata[0];
  assign loc_alert_en_shadowed_1_re = addr_hit[126] & reg_re & !reg_error;
  assign loc_alert_en_shadowed_1_we = addr_hit[126] & reg_we & !reg_error;

  assign loc_alert_en_shadowed_1_wd = reg_wdata[0];
  assign loc_alert_en_shadowed_2_re = addr_hit[127] & reg_re & !reg_error;
  assign loc_alert_en_shadowed_2_we = addr_hit[127] & reg_we & !reg_error;

  assign loc_alert_en_shadowed_2_wd = reg_wdata[0];
  assign loc_alert_en_shadowed_3_re = addr_hit[128] & reg_re & !reg_error;
  assign loc_alert_en_shadowed_3_we = addr_hit[128] & reg_we & !reg_error;

  assign loc_alert_en_shadowed_3_wd = reg_wdata[0];
  assign loc_alert_en_shadowed_4_re = addr_hit[129] & reg_re & !reg_error;
  assign loc_alert_en_shadowed_4_we = addr_hit[129] & reg_we & !reg_error;

  assign loc_alert_en_shadowed_4_wd = reg_wdata[0];
  assign loc_alert_en_shadowed_5_re = addr_hit[130] & reg_re & !reg_error;
  assign loc_alert_en_shadowed_5_we = addr_hit[130] & reg_we & !reg_error;

  assign loc_alert_en_shadowed_5_wd = reg_wdata[0];
  assign loc_alert_en_shadowed_6_re = addr_hit[131] & reg_re & !reg_error;
  assign loc_alert_en_shadowed_6_we = addr_hit[131] & reg_we & !reg_error;

  assign loc_alert_en_shadowed_6_wd = reg_wdata[0];
  assign loc_alert_class_shadowed_0_re = addr_hit[132] & reg_re & !reg_error;
  assign loc_alert_class_shadowed_0_we = addr_hit[132] & reg_we & !reg_error;

  assign loc_alert_class_shadowed_0_wd = reg_wdata[1:0];
  assign loc_alert_class_shadowed_1_re = addr_hit[133] & reg_re & !reg_error;
  assign loc_alert_class_shadowed_1_we = addr_hit[133] & reg_we & !reg_error;

  assign loc_alert_class_shadowed_1_wd = reg_wdata[1:0];
  assign loc_alert_class_shadowed_2_re = addr_hit[134] & reg_re & !reg_error;
  assign loc_alert_class_shadowed_2_we = addr_hit[134] & reg_we & !reg_error;

  assign loc_alert_class_shadowed_2_wd = reg_wdata[1:0];
  assign loc_alert_class_shadowed_3_re = addr_hit[135] & reg_re & !reg_error;
  assign loc_alert_class_shadowed_3_we = addr_hit[135] & reg_we & !reg_error;

  assign loc_alert_class_shadowed_3_wd = reg_wdata[1:0];
  assign loc_alert_class_shadowed_4_re = addr_hit[136] & reg_re & !reg_error;
  assign loc_alert_class_shadowed_4_we = addr_hit[136] & reg_we & !reg_error;

  assign loc_alert_class_shadowed_4_wd = reg_wdata[1:0];
  assign loc_alert_class_shadowed_5_re = addr_hit[137] & reg_re & !reg_error;
  assign loc_alert_class_shadowed_5_we = addr_hit[137] & reg_we & !reg_error;

  assign loc_alert_class_shadowed_5_wd = reg_wdata[1:0];
  assign loc_alert_class_shadowed_6_re = addr_hit[138] & reg_re & !reg_error;
  assign loc_alert_class_shadowed_6_we = addr_hit[138] & reg_we & !reg_error;

  assign loc_alert_class_shadowed_6_wd = reg_wdata[1:0];
  assign loc_alert_cause_0_we = addr_hit[139] & reg_we & !reg_error;

  assign loc_alert_cause_0_wd = reg_wdata[0];
  assign loc_alert_cause_1_we = addr_hit[140] & reg_we & !reg_error;

  assign loc_alert_cause_1_wd = reg_wdata[0];
  assign loc_alert_cause_2_we = addr_hit[141] & reg_we & !reg_error;

  assign loc_alert_cause_2_wd = reg_wdata[0];
  assign loc_alert_cause_3_we = addr_hit[142] & reg_we & !reg_error;

  assign loc_alert_cause_3_wd = reg_wdata[0];
  assign loc_alert_cause_4_we = addr_hit[143] & reg_we & !reg_error;

  assign loc_alert_cause_4_wd = reg_wdata[0];
  assign loc_alert_cause_5_we = addr_hit[144] & reg_we & !reg_error;

  assign loc_alert_cause_5_wd = reg_wdata[0];
  assign loc_alert_cause_6_we = addr_hit[145] & reg_we & !reg_error;

  assign loc_alert_cause_6_wd = reg_wdata[0];
  assign classa_regwen_we = addr_hit[146] & reg_we & !reg_error;

  assign classa_regwen_wd = reg_wdata[0];
  assign classa_ctrl_shadowed_re = addr_hit[147] & reg_re & !reg_error;
  assign classa_ctrl_shadowed_we = addr_hit[147] & reg_we & !reg_error;

  assign classa_ctrl_shadowed_en_wd = reg_wdata[0];

  assign classa_ctrl_shadowed_lock_wd = reg_wdata[1];

  assign classa_ctrl_shadowed_en_e0_wd = reg_wdata[2];

  assign classa_ctrl_shadowed_en_e1_wd = reg_wdata[3];

  assign classa_ctrl_shadowed_en_e2_wd = reg_wdata[4];

  assign classa_ctrl_shadowed_en_e3_wd = reg_wdata[5];

  assign classa_ctrl_shadowed_map_e0_wd = reg_wdata[7:6];

  assign classa_ctrl_shadowed_map_e1_wd = reg_wdata[9:8];

  assign classa_ctrl_shadowed_map_e2_wd = reg_wdata[11:10];

  assign classa_ctrl_shadowed_map_e3_wd = reg_wdata[13:12];
  assign classa_clr_regwen_we = addr_hit[148] & reg_we & !reg_error;

  assign classa_clr_regwen_wd = reg_wdata[0];
  assign classa_clr_shadowed_re = addr_hit[149] & reg_re & !reg_error;
  assign classa_clr_shadowed_we = addr_hit[149] & reg_we & !reg_error;

  assign classa_clr_shadowed_wd = reg_wdata[0];
  assign classa_accum_cnt_re = addr_hit[150] & reg_re & !reg_error;
  assign classa_accum_thresh_shadowed_re = addr_hit[151] & reg_re & !reg_error;
  assign classa_accum_thresh_shadowed_we = addr_hit[151] & reg_we & !reg_error;

  assign classa_accum_thresh_shadowed_wd = reg_wdata[15:0];
  assign classa_timeout_cyc_shadowed_re = addr_hit[152] & reg_re & !reg_error;
  assign classa_timeout_cyc_shadowed_we = addr_hit[152] & reg_we & !reg_error;

  assign classa_timeout_cyc_shadowed_wd = reg_wdata[31:0];
  assign classa_crashdump_trigger_shadowed_re = addr_hit[153] & reg_re & !reg_error;
  assign classa_crashdump_trigger_shadowed_we = addr_hit[153] & reg_we & !reg_error;

  assign classa_crashdump_trigger_shadowed_wd = reg_wdata[1:0];
  assign classa_phase0_cyc_shadowed_re = addr_hit[154] & reg_re & !reg_error;
  assign classa_phase0_cyc_shadowed_we = addr_hit[154] & reg_we & !reg_error;

  assign classa_phase0_cyc_shadowed_wd = reg_wdata[31:0];
  assign classa_phase1_cyc_shadowed_re = addr_hit[155] & reg_re & !reg_error;
  assign classa_phase1_cyc_shadowed_we = addr_hit[155] & reg_we & !reg_error;

  assign classa_phase1_cyc_shadowed_wd = reg_wdata[31:0];
  assign classa_phase2_cyc_shadowed_re = addr_hit[156] & reg_re & !reg_error;
  assign classa_phase2_cyc_shadowed_we = addr_hit[156] & reg_we & !reg_error;

  assign classa_phase2_cyc_shadowed_wd = reg_wdata[31:0];
  assign classa_phase3_cyc_shadowed_re = addr_hit[157] & reg_re & !reg_error;
  assign classa_phase3_cyc_shadowed_we = addr_hit[157] & reg_we & !reg_error;

  assign classa_phase3_cyc_shadowed_wd = reg_wdata[31:0];
  assign classa_esc_cnt_re = addr_hit[158] & reg_re & !reg_error;
  assign classa_state_re = addr_hit[159] & reg_re & !reg_error;
  assign classb_regwen_we = addr_hit[160] & reg_we & !reg_error;

  assign classb_regwen_wd = reg_wdata[0];
  assign classb_ctrl_shadowed_re = addr_hit[161] & reg_re & !reg_error;
  assign classb_ctrl_shadowed_we = addr_hit[161] & reg_we & !reg_error;

  assign classb_ctrl_shadowed_en_wd = reg_wdata[0];

  assign classb_ctrl_shadowed_lock_wd = reg_wdata[1];

  assign classb_ctrl_shadowed_en_e0_wd = reg_wdata[2];

  assign classb_ctrl_shadowed_en_e1_wd = reg_wdata[3];

  assign classb_ctrl_shadowed_en_e2_wd = reg_wdata[4];

  assign classb_ctrl_shadowed_en_e3_wd = reg_wdata[5];

  assign classb_ctrl_shadowed_map_e0_wd = reg_wdata[7:6];

  assign classb_ctrl_shadowed_map_e1_wd = reg_wdata[9:8];

  assign classb_ctrl_shadowed_map_e2_wd = reg_wdata[11:10];

  assign classb_ctrl_shadowed_map_e3_wd = reg_wdata[13:12];
  assign classb_clr_regwen_we = addr_hit[162] & reg_we & !reg_error;

  assign classb_clr_regwen_wd = reg_wdata[0];
  assign classb_clr_shadowed_re = addr_hit[163] & reg_re & !reg_error;
  assign classb_clr_shadowed_we = addr_hit[163] & reg_we & !reg_error;

  assign classb_clr_shadowed_wd = reg_wdata[0];
  assign classb_accum_cnt_re = addr_hit[164] & reg_re & !reg_error;
  assign classb_accum_thresh_shadowed_re = addr_hit[165] & reg_re & !reg_error;
  assign classb_accum_thresh_shadowed_we = addr_hit[165] & reg_we & !reg_error;

  assign classb_accum_thresh_shadowed_wd = reg_wdata[15:0];
  assign classb_timeout_cyc_shadowed_re = addr_hit[166] & reg_re & !reg_error;
  assign classb_timeout_cyc_shadowed_we = addr_hit[166] & reg_we & !reg_error;

  assign classb_timeout_cyc_shadowed_wd = reg_wdata[31:0];
  assign classb_crashdump_trigger_shadowed_re = addr_hit[167] & reg_re & !reg_error;
  assign classb_crashdump_trigger_shadowed_we = addr_hit[167] & reg_we & !reg_error;

  assign classb_crashdump_trigger_shadowed_wd = reg_wdata[1:0];
  assign classb_phase0_cyc_shadowed_re = addr_hit[168] & reg_re & !reg_error;
  assign classb_phase0_cyc_shadowed_we = addr_hit[168] & reg_we & !reg_error;

  assign classb_phase0_cyc_shadowed_wd = reg_wdata[31:0];
  assign classb_phase1_cyc_shadowed_re = addr_hit[169] & reg_re & !reg_error;
  assign classb_phase1_cyc_shadowed_we = addr_hit[169] & reg_we & !reg_error;

  assign classb_phase1_cyc_shadowed_wd = reg_wdata[31:0];
  assign classb_phase2_cyc_shadowed_re = addr_hit[170] & reg_re & !reg_error;
  assign classb_phase2_cyc_shadowed_we = addr_hit[170] & reg_we & !reg_error;

  assign classb_phase2_cyc_shadowed_wd = reg_wdata[31:0];
  assign classb_phase3_cyc_shadowed_re = addr_hit[171] & reg_re & !reg_error;
  assign classb_phase3_cyc_shadowed_we = addr_hit[171] & reg_we & !reg_error;

  assign classb_phase3_cyc_shadowed_wd = reg_wdata[31:0];
  assign classb_esc_cnt_re = addr_hit[172] & reg_re & !reg_error;
  assign classb_state_re = addr_hit[173] & reg_re & !reg_error;
  assign classc_regwen_we = addr_hit[174] & reg_we & !reg_error;

  assign classc_regwen_wd = reg_wdata[0];
  assign classc_ctrl_shadowed_re = addr_hit[175] & reg_re & !reg_error;
  assign classc_ctrl_shadowed_we = addr_hit[175] & reg_we & !reg_error;

  assign classc_ctrl_shadowed_en_wd = reg_wdata[0];

  assign classc_ctrl_shadowed_lock_wd = reg_wdata[1];

  assign classc_ctrl_shadowed_en_e0_wd = reg_wdata[2];

  assign classc_ctrl_shadowed_en_e1_wd = reg_wdata[3];

  assign classc_ctrl_shadowed_en_e2_wd = reg_wdata[4];

  assign classc_ctrl_shadowed_en_e3_wd = reg_wdata[5];

  assign classc_ctrl_shadowed_map_e0_wd = reg_wdata[7:6];

  assign classc_ctrl_shadowed_map_e1_wd = reg_wdata[9:8];

  assign classc_ctrl_shadowed_map_e2_wd = reg_wdata[11:10];

  assign classc_ctrl_shadowed_map_e3_wd = reg_wdata[13:12];
  assign classc_clr_regwen_we = addr_hit[176] & reg_we & !reg_error;

  assign classc_clr_regwen_wd = reg_wdata[0];
  assign classc_clr_shadowed_re = addr_hit[177] & reg_re & !reg_error;
  assign classc_clr_shadowed_we = addr_hit[177] & reg_we & !reg_error;

  assign classc_clr_shadowed_wd = reg_wdata[0];
  assign classc_accum_cnt_re = addr_hit[178] & reg_re & !reg_error;
  assign classc_accum_thresh_shadowed_re = addr_hit[179] & reg_re & !reg_error;
  assign classc_accum_thresh_shadowed_we = addr_hit[179] & reg_we & !reg_error;

  assign classc_accum_thresh_shadowed_wd = reg_wdata[15:0];
  assign classc_timeout_cyc_shadowed_re = addr_hit[180] & reg_re & !reg_error;
  assign classc_timeout_cyc_shadowed_we = addr_hit[180] & reg_we & !reg_error;

  assign classc_timeout_cyc_shadowed_wd = reg_wdata[31:0];
  assign classc_crashdump_trigger_shadowed_re = addr_hit[181] & reg_re & !reg_error;
  assign classc_crashdump_trigger_shadowed_we = addr_hit[181] & reg_we & !reg_error;

  assign classc_crashdump_trigger_shadowed_wd = reg_wdata[1:0];
  assign classc_phase0_cyc_shadowed_re = addr_hit[182] & reg_re & !reg_error;
  assign classc_phase0_cyc_shadowed_we = addr_hit[182] & reg_we & !reg_error;

  assign classc_phase0_cyc_shadowed_wd = reg_wdata[31:0];
  assign classc_phase1_cyc_shadowed_re = addr_hit[183] & reg_re & !reg_error;
  assign classc_phase1_cyc_shadowed_we = addr_hit[183] & reg_we & !reg_error;

  assign classc_phase1_cyc_shadowed_wd = reg_wdata[31:0];
  assign classc_phase2_cyc_shadowed_re = addr_hit[184] & reg_re & !reg_error;
  assign classc_phase2_cyc_shadowed_we = addr_hit[184] & reg_we & !reg_error;

  assign classc_phase2_cyc_shadowed_wd = reg_wdata[31:0];
  assign classc_phase3_cyc_shadowed_re = addr_hit[185] & reg_re & !reg_error;
  assign classc_phase3_cyc_shadowed_we = addr_hit[185] & reg_we & !reg_error;

  assign classc_phase3_cyc_shadowed_wd = reg_wdata[31:0];
  assign classc_esc_cnt_re = addr_hit[186] & reg_re & !reg_error;
  assign classc_state_re = addr_hit[187] & reg_re & !reg_error;
  assign classd_regwen_we = addr_hit[188] & reg_we & !reg_error;

  assign classd_regwen_wd = reg_wdata[0];
  assign classd_ctrl_shadowed_re = addr_hit[189] & reg_re & !reg_error;
  assign classd_ctrl_shadowed_we = addr_hit[189] & reg_we & !reg_error;

  assign classd_ctrl_shadowed_en_wd = reg_wdata[0];

  assign classd_ctrl_shadowed_lock_wd = reg_wdata[1];

  assign classd_ctrl_shadowed_en_e0_wd = reg_wdata[2];

  assign classd_ctrl_shadowed_en_e1_wd = reg_wdata[3];

  assign classd_ctrl_shadowed_en_e2_wd = reg_wdata[4];

  assign classd_ctrl_shadowed_en_e3_wd = reg_wdata[5];

  assign classd_ctrl_shadowed_map_e0_wd = reg_wdata[7:6];

  assign classd_ctrl_shadowed_map_e1_wd = reg_wdata[9:8];

  assign classd_ctrl_shadowed_map_e2_wd = reg_wdata[11:10];

  assign classd_ctrl_shadowed_map_e3_wd = reg_wdata[13:12];
  assign classd_clr_regwen_we = addr_hit[190] & reg_we & !reg_error;

  assign classd_clr_regwen_wd = reg_wdata[0];
  assign classd_clr_shadowed_re = addr_hit[191] & reg_re & !reg_error;
  assign classd_clr_shadowed_we = addr_hit[191] & reg_we & !reg_error;

  assign classd_clr_shadowed_wd = reg_wdata[0];
  assign classd_accum_cnt_re = addr_hit[192] & reg_re & !reg_error;
  assign classd_accum_thresh_shadowed_re = addr_hit[193] & reg_re & !reg_error;
  assign classd_accum_thresh_shadowed_we = addr_hit[193] & reg_we & !reg_error;

  assign classd_accum_thresh_shadowed_wd = reg_wdata[15:0];
  assign classd_timeout_cyc_shadowed_re = addr_hit[194] & reg_re & !reg_error;
  assign classd_timeout_cyc_shadowed_we = addr_hit[194] & reg_we & !reg_error;

  assign classd_timeout_cyc_shadowed_wd = reg_wdata[31:0];
  assign classd_crashdump_trigger_shadowed_re = addr_hit[195] & reg_re & !reg_error;
  assign classd_crashdump_trigger_shadowed_we = addr_hit[195] & reg_we & !reg_error;

  assign classd_crashdump_trigger_shadowed_wd = reg_wdata[1:0];
  assign classd_phase0_cyc_shadowed_re = addr_hit[196] & reg_re & !reg_error;
  assign classd_phase0_cyc_shadowed_we = addr_hit[196] & reg_we & !reg_error;

  assign classd_phase0_cyc_shadowed_wd = reg_wdata[31:0];
  assign classd_phase1_cyc_shadowed_re = addr_hit[197] & reg_re & !reg_error;
  assign classd_phase1_cyc_shadowed_we = addr_hit[197] & reg_we & !reg_error;

  assign classd_phase1_cyc_shadowed_wd = reg_wdata[31:0];
  assign classd_phase2_cyc_shadowed_re = addr_hit[198] & reg_re & !reg_error;
  assign classd_phase2_cyc_shadowed_we = addr_hit[198] & reg_we & !reg_error;

  assign classd_phase2_cyc_shadowed_wd = reg_wdata[31:0];
  assign classd_phase3_cyc_shadowed_re = addr_hit[199] & reg_re & !reg_error;
  assign classd_phase3_cyc_shadowed_we = addr_hit[199] & reg_we & !reg_error;

  assign classd_phase3_cyc_shadowed_wd = reg_wdata[31:0];
  assign classd_esc_cnt_re = addr_hit[200] & reg_re & !reg_error;
  assign classd_state_re = addr_hit[201] & reg_re & !reg_error;

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = intr_state_we;
    reg_we_check[1] = intr_enable_we;
    reg_we_check[2] = intr_test_we;
    reg_we_check[3] = ping_timer_regwen_we;
    reg_we_check[4] = ping_timeout_cyc_shadowed_gated_we;
    reg_we_check[5] = ping_timer_en_shadowed_gated_we;
    reg_we_check[6] = alert_regwen_0_we;
    reg_we_check[7] = alert_regwen_1_we;
    reg_we_check[8] = alert_regwen_2_we;
    reg_we_check[9] = alert_regwen_3_we;
    reg_we_check[10] = alert_regwen_4_we;
    reg_we_check[11] = alert_regwen_5_we;
    reg_we_check[12] = alert_regwen_6_we;
    reg_we_check[13] = alert_regwen_7_we;
    reg_we_check[14] = alert_regwen_8_we;
    reg_we_check[15] = alert_regwen_9_we;
    reg_we_check[16] = alert_regwen_10_we;
    reg_we_check[17] = alert_regwen_11_we;
    reg_we_check[18] = alert_regwen_12_we;
    reg_we_check[19] = alert_regwen_13_we;
    reg_we_check[20] = alert_regwen_14_we;
    reg_we_check[21] = alert_regwen_15_we;
    reg_we_check[22] = alert_regwen_16_we;
    reg_we_check[23] = alert_regwen_17_we;
    reg_we_check[24] = alert_regwen_18_we;
    reg_we_check[25] = alert_regwen_19_we;
    reg_we_check[26] = alert_regwen_20_we;
    reg_we_check[27] = alert_regwen_21_we;
    reg_we_check[28] = alert_regwen_22_we;
    reg_we_check[29] = alert_regwen_23_we;
    reg_we_check[30] = alert_regwen_24_we;
    reg_we_check[31] = alert_regwen_25_we;
    reg_we_check[32] = alert_regwen_26_we;
    reg_we_check[33] = alert_regwen_27_we;
    reg_we_check[34] = alert_en_shadowed_0_gated_we;
    reg_we_check[35] = alert_en_shadowed_1_gated_we;
    reg_we_check[36] = alert_en_shadowed_2_gated_we;
    reg_we_check[37] = alert_en_shadowed_3_gated_we;
    reg_we_check[38] = alert_en_shadowed_4_gated_we;
    reg_we_check[39] = alert_en_shadowed_5_gated_we;
    reg_we_check[40] = alert_en_shadowed_6_gated_we;
    reg_we_check[41] = alert_en_shadowed_7_gated_we;
    reg_we_check[42] = alert_en_shadowed_8_gated_we;
    reg_we_check[43] = alert_en_shadowed_9_gated_we;
    reg_we_check[44] = alert_en_shadowed_10_gated_we;
    reg_we_check[45] = alert_en_shadowed_11_gated_we;
    reg_we_check[46] = alert_en_shadowed_12_gated_we;
    reg_we_check[47] = alert_en_shadowed_13_gated_we;
    reg_we_check[48] = alert_en_shadowed_14_gated_we;
    reg_we_check[49] = alert_en_shadowed_15_gated_we;
    reg_we_check[50] = alert_en_shadowed_16_gated_we;
    reg_we_check[51] = alert_en_shadowed_17_gated_we;
    reg_we_check[52] = alert_en_shadowed_18_gated_we;
    reg_we_check[53] = alert_en_shadowed_19_gated_we;
    reg_we_check[54] = alert_en_shadowed_20_gated_we;
    reg_we_check[55] = alert_en_shadowed_21_gated_we;
    reg_we_check[56] = alert_en_shadowed_22_gated_we;
    reg_we_check[57] = alert_en_shadowed_23_gated_we;
    reg_we_check[58] = alert_en_shadowed_24_gated_we;
    reg_we_check[59] = alert_en_shadowed_25_gated_we;
    reg_we_check[60] = alert_en_shadowed_26_gated_we;
    reg_we_check[61] = alert_en_shadowed_27_gated_we;
    reg_we_check[62] = alert_class_shadowed_0_gated_we;
    reg_we_check[63] = alert_class_shadowed_1_gated_we;
    reg_we_check[64] = alert_class_shadowed_2_gated_we;
    reg_we_check[65] = alert_class_shadowed_3_gated_we;
    reg_we_check[66] = alert_class_shadowed_4_gated_we;
    reg_we_check[67] = alert_class_shadowed_5_gated_we;
    reg_we_check[68] = alert_class_shadowed_6_gated_we;
    reg_we_check[69] = alert_class_shadowed_7_gated_we;
    reg_we_check[70] = alert_class_shadowed_8_gated_we;
    reg_we_check[71] = alert_class_shadowed_9_gated_we;
    reg_we_check[72] = alert_class_shadowed_10_gated_we;
    reg_we_check[73] = alert_class_shadowed_11_gated_we;
    reg_we_check[74] = alert_class_shadowed_12_gated_we;
    reg_we_check[75] = alert_class_shadowed_13_gated_we;
    reg_we_check[76] = alert_class_shadowed_14_gated_we;
    reg_we_check[77] = alert_class_shadowed_15_gated_we;
    reg_we_check[78] = alert_class_shadowed_16_gated_we;
    reg_we_check[79] = alert_class_shadowed_17_gated_we;
    reg_we_check[80] = alert_class_shadowed_18_gated_we;
    reg_we_check[81] = alert_class_shadowed_19_gated_we;
    reg_we_check[82] = alert_class_shadowed_20_gated_we;
    reg_we_check[83] = alert_class_shadowed_21_gated_we;
    reg_we_check[84] = alert_class_shadowed_22_gated_we;
    reg_we_check[85] = alert_class_shadowed_23_gated_we;
    reg_we_check[86] = alert_class_shadowed_24_gated_we;
    reg_we_check[87] = alert_class_shadowed_25_gated_we;
    reg_we_check[88] = alert_class_shadowed_26_gated_we;
    reg_we_check[89] = alert_class_shadowed_27_gated_we;
    reg_we_check[90] = alert_cause_0_we;
    reg_we_check[91] = alert_cause_1_we;
    reg_we_check[92] = alert_cause_2_we;
    reg_we_check[93] = alert_cause_3_we;
    reg_we_check[94] = alert_cause_4_we;
    reg_we_check[95] = alert_cause_5_we;
    reg_we_check[96] = alert_cause_6_we;
    reg_we_check[97] = alert_cause_7_we;
    reg_we_check[98] = alert_cause_8_we;
    reg_we_check[99] = alert_cause_9_we;
    reg_we_check[100] = alert_cause_10_we;
    reg_we_check[101] = alert_cause_11_we;
    reg_we_check[102] = alert_cause_12_we;
    reg_we_check[103] = alert_cause_13_we;
    reg_we_check[104] = alert_cause_14_we;
    reg_we_check[105] = alert_cause_15_we;
    reg_we_check[106] = alert_cause_16_we;
    reg_we_check[107] = alert_cause_17_we;
    reg_we_check[108] = alert_cause_18_we;
    reg_we_check[109] = alert_cause_19_we;
    reg_we_check[110] = alert_cause_20_we;
    reg_we_check[111] = alert_cause_21_we;
    reg_we_check[112] = alert_cause_22_we;
    reg_we_check[113] = alert_cause_23_we;
    reg_we_check[114] = alert_cause_24_we;
    reg_we_check[115] = alert_cause_25_we;
    reg_we_check[116] = alert_cause_26_we;
    reg_we_check[117] = alert_cause_27_we;
    reg_we_check[118] = loc_alert_regwen_0_we;
    reg_we_check[119] = loc_alert_regwen_1_we;
    reg_we_check[120] = loc_alert_regwen_2_we;
    reg_we_check[121] = loc_alert_regwen_3_we;
    reg_we_check[122] = loc_alert_regwen_4_we;
    reg_we_check[123] = loc_alert_regwen_5_we;
    reg_we_check[124] = loc_alert_regwen_6_we;
    reg_we_check[125] = loc_alert_en_shadowed_0_gated_we;
    reg_we_check[126] = loc_alert_en_shadowed_1_gated_we;
    reg_we_check[127] = loc_alert_en_shadowed_2_gated_we;
    reg_we_check[128] = loc_alert_en_shadowed_3_gated_we;
    reg_we_check[129] = loc_alert_en_shadowed_4_gated_we;
    reg_we_check[130] = loc_alert_en_shadowed_5_gated_we;
    reg_we_check[131] = loc_alert_en_shadowed_6_gated_we;
    reg_we_check[132] = loc_alert_class_shadowed_0_gated_we;
    reg_we_check[133] = loc_alert_class_shadowed_1_gated_we;
    reg_we_check[134] = loc_alert_class_shadowed_2_gated_we;
    reg_we_check[135] = loc_alert_class_shadowed_3_gated_we;
    reg_we_check[136] = loc_alert_class_shadowed_4_gated_we;
    reg_we_check[137] = loc_alert_class_shadowed_5_gated_we;
    reg_we_check[138] = loc_alert_class_shadowed_6_gated_we;
    reg_we_check[139] = loc_alert_cause_0_we;
    reg_we_check[140] = loc_alert_cause_1_we;
    reg_we_check[141] = loc_alert_cause_2_we;
    reg_we_check[142] = loc_alert_cause_3_we;
    reg_we_check[143] = loc_alert_cause_4_we;
    reg_we_check[144] = loc_alert_cause_5_we;
    reg_we_check[145] = loc_alert_cause_6_we;
    reg_we_check[146] = classa_regwen_we;
    reg_we_check[147] = classa_ctrl_shadowed_gated_we;
    reg_we_check[148] = classa_clr_regwen_we;
    reg_we_check[149] = classa_clr_shadowed_gated_we;
    reg_we_check[150] = 1'b0;
    reg_we_check[151] = classa_accum_thresh_shadowed_gated_we;
    reg_we_check[152] = classa_timeout_cyc_shadowed_gated_we;
    reg_we_check[153] = classa_crashdump_trigger_shadowed_gated_we;
    reg_we_check[154] = classa_phase0_cyc_shadowed_gated_we;
    reg_we_check[155] = classa_phase1_cyc_shadowed_gated_we;
    reg_we_check[156] = classa_phase2_cyc_shadowed_gated_we;
    reg_we_check[157] = classa_phase3_cyc_shadowed_gated_we;
    reg_we_check[158] = 1'b0;
    reg_we_check[159] = 1'b0;
    reg_we_check[160] = classb_regwen_we;
    reg_we_check[161] = classb_ctrl_shadowed_gated_we;
    reg_we_check[162] = classb_clr_regwen_we;
    reg_we_check[163] = classb_clr_shadowed_gated_we;
    reg_we_check[164] = 1'b0;
    reg_we_check[165] = classb_accum_thresh_shadowed_gated_we;
    reg_we_check[166] = classb_timeout_cyc_shadowed_gated_we;
    reg_we_check[167] = classb_crashdump_trigger_shadowed_gated_we;
    reg_we_check[168] = classb_phase0_cyc_shadowed_gated_we;
    reg_we_check[169] = classb_phase1_cyc_shadowed_gated_we;
    reg_we_check[170] = classb_phase2_cyc_shadowed_gated_we;
    reg_we_check[171] = classb_phase3_cyc_shadowed_gated_we;
    reg_we_check[172] = 1'b0;
    reg_we_check[173] = 1'b0;
    reg_we_check[174] = classc_regwen_we;
    reg_we_check[175] = classc_ctrl_shadowed_gated_we;
    reg_we_check[176] = classc_clr_regwen_we;
    reg_we_check[177] = classc_clr_shadowed_gated_we;
    reg_we_check[178] = 1'b0;
    reg_we_check[179] = classc_accum_thresh_shadowed_gated_we;
    reg_we_check[180] = classc_timeout_cyc_shadowed_gated_we;
    reg_we_check[181] = classc_crashdump_trigger_shadowed_gated_we;
    reg_we_check[182] = classc_phase0_cyc_shadowed_gated_we;
    reg_we_check[183] = classc_phase1_cyc_shadowed_gated_we;
    reg_we_check[184] = classc_phase2_cyc_shadowed_gated_we;
    reg_we_check[185] = classc_phase3_cyc_shadowed_gated_we;
    reg_we_check[186] = 1'b0;
    reg_we_check[187] = 1'b0;
    reg_we_check[188] = classd_regwen_we;
    reg_we_check[189] = classd_ctrl_shadowed_gated_we;
    reg_we_check[190] = classd_clr_regwen_we;
    reg_we_check[191] = classd_clr_shadowed_gated_we;
    reg_we_check[192] = 1'b0;
    reg_we_check[193] = classd_accum_thresh_shadowed_gated_we;
    reg_we_check[194] = classd_timeout_cyc_shadowed_gated_we;
    reg_we_check[195] = classd_crashdump_trigger_shadowed_gated_we;
    reg_we_check[196] = classd_phase0_cyc_shadowed_gated_we;
    reg_we_check[197] = classd_phase1_cyc_shadowed_gated_we;
    reg_we_check[198] = classd_phase2_cyc_shadowed_gated_we;
    reg_we_check[199] = classd_phase3_cyc_shadowed_gated_we;
    reg_we_check[200] = 1'b0;
    reg_we_check[201] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_classa_qs;
        reg_rdata_next[1] = intr_state_classb_qs;
        reg_rdata_next[2] = intr_state_classc_qs;
        reg_rdata_next[3] = intr_state_classd_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_classa_qs;
        reg_rdata_next[1] = intr_enable_classb_qs;
        reg_rdata_next[2] = intr_enable_classc_qs;
        reg_rdata_next[3] = intr_enable_classd_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = ping_timer_regwen_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[15:0] = ping_timeout_cyc_shadowed_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = ping_timer_en_shadowed_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = alert_regwen_0_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = alert_regwen_1_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = alert_regwen_2_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = alert_regwen_3_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = alert_regwen_4_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = alert_regwen_5_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = alert_regwen_6_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = alert_regwen_7_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = alert_regwen_8_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = alert_regwen_9_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = alert_regwen_10_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = alert_regwen_11_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = alert_regwen_12_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = alert_regwen_13_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = alert_regwen_14_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = alert_regwen_15_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = alert_regwen_16_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = alert_regwen_17_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = alert_regwen_18_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = alert_regwen_19_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = alert_regwen_20_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = alert_regwen_21_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = alert_regwen_22_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = alert_regwen_23_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = alert_regwen_24_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = alert_regwen_25_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = alert_regwen_26_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[0] = alert_regwen_27_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = alert_en_shadowed_0_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0] = alert_en_shadowed_1_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = alert_en_shadowed_2_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[0] = alert_en_shadowed_3_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = alert_en_shadowed_4_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[0] = alert_en_shadowed_5_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[0] = alert_en_shadowed_6_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[0] = alert_en_shadowed_7_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = alert_en_shadowed_8_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[0] = alert_en_shadowed_9_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[0] = alert_en_shadowed_10_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[0] = alert_en_shadowed_11_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = alert_en_shadowed_12_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[0] = alert_en_shadowed_13_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = alert_en_shadowed_14_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[0] = alert_en_shadowed_15_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = alert_en_shadowed_16_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[0] = alert_en_shadowed_17_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[0] = alert_en_shadowed_18_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[0] = alert_en_shadowed_19_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[0] = alert_en_shadowed_20_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[0] = alert_en_shadowed_21_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = alert_en_shadowed_22_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[0] = alert_en_shadowed_23_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = alert_en_shadowed_24_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[0] = alert_en_shadowed_25_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[0] = alert_en_shadowed_26_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[0] = alert_en_shadowed_27_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_0_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_1_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_2_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_3_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_4_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_5_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_6_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_7_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_8_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_9_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_10_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_11_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_12_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_13_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_14_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_15_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_16_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_17_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_18_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_19_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_20_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_21_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_22_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_23_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_24_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_25_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_26_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[1:0] = alert_class_shadowed_27_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[0] = alert_cause_0_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[0] = alert_cause_1_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[0] = alert_cause_2_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[0] = alert_cause_3_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[0] = alert_cause_4_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[0] = alert_cause_5_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[0] = alert_cause_6_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[0] = alert_cause_7_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[0] = alert_cause_8_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[0] = alert_cause_9_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[0] = alert_cause_10_qs;
      end

      addr_hit[101]: begin
        reg_rdata_next[0] = alert_cause_11_qs;
      end

      addr_hit[102]: begin
        reg_rdata_next[0] = alert_cause_12_qs;
      end

      addr_hit[103]: begin
        reg_rdata_next[0] = alert_cause_13_qs;
      end

      addr_hit[104]: begin
        reg_rdata_next[0] = alert_cause_14_qs;
      end

      addr_hit[105]: begin
        reg_rdata_next[0] = alert_cause_15_qs;
      end

      addr_hit[106]: begin
        reg_rdata_next[0] = alert_cause_16_qs;
      end

      addr_hit[107]: begin
        reg_rdata_next[0] = alert_cause_17_qs;
      end

      addr_hit[108]: begin
        reg_rdata_next[0] = alert_cause_18_qs;
      end

      addr_hit[109]: begin
        reg_rdata_next[0] = alert_cause_19_qs;
      end

      addr_hit[110]: begin
        reg_rdata_next[0] = alert_cause_20_qs;
      end

      addr_hit[111]: begin
        reg_rdata_next[0] = alert_cause_21_qs;
      end

      addr_hit[112]: begin
        reg_rdata_next[0] = alert_cause_22_qs;
      end

      addr_hit[113]: begin
        reg_rdata_next[0] = alert_cause_23_qs;
      end

      addr_hit[114]: begin
        reg_rdata_next[0] = alert_cause_24_qs;
      end

      addr_hit[115]: begin
        reg_rdata_next[0] = alert_cause_25_qs;
      end

      addr_hit[116]: begin
        reg_rdata_next[0] = alert_cause_26_qs;
      end

      addr_hit[117]: begin
        reg_rdata_next[0] = alert_cause_27_qs;
      end

      addr_hit[118]: begin
        reg_rdata_next[0] = loc_alert_regwen_0_qs;
      end

      addr_hit[119]: begin
        reg_rdata_next[0] = loc_alert_regwen_1_qs;
      end

      addr_hit[120]: begin
        reg_rdata_next[0] = loc_alert_regwen_2_qs;
      end

      addr_hit[121]: begin
        reg_rdata_next[0] = loc_alert_regwen_3_qs;
      end

      addr_hit[122]: begin
        reg_rdata_next[0] = loc_alert_regwen_4_qs;
      end

      addr_hit[123]: begin
        reg_rdata_next[0] = loc_alert_regwen_5_qs;
      end

      addr_hit[124]: begin
        reg_rdata_next[0] = loc_alert_regwen_6_qs;
      end

      addr_hit[125]: begin
        reg_rdata_next[0] = loc_alert_en_shadowed_0_qs;
      end

      addr_hit[126]: begin
        reg_rdata_next[0] = loc_alert_en_shadowed_1_qs;
      end

      addr_hit[127]: begin
        reg_rdata_next[0] = loc_alert_en_shadowed_2_qs;
      end

      addr_hit[128]: begin
        reg_rdata_next[0] = loc_alert_en_shadowed_3_qs;
      end

      addr_hit[129]: begin
        reg_rdata_next[0] = loc_alert_en_shadowed_4_qs;
      end

      addr_hit[130]: begin
        reg_rdata_next[0] = loc_alert_en_shadowed_5_qs;
      end

      addr_hit[131]: begin
        reg_rdata_next[0] = loc_alert_en_shadowed_6_qs;
      end

      addr_hit[132]: begin
        reg_rdata_next[1:0] = loc_alert_class_shadowed_0_qs;
      end

      addr_hit[133]: begin
        reg_rdata_next[1:0] = loc_alert_class_shadowed_1_qs;
      end

      addr_hit[134]: begin
        reg_rdata_next[1:0] = loc_alert_class_shadowed_2_qs;
      end

      addr_hit[135]: begin
        reg_rdata_next[1:0] = loc_alert_class_shadowed_3_qs;
      end

      addr_hit[136]: begin
        reg_rdata_next[1:0] = loc_alert_class_shadowed_4_qs;
      end

      addr_hit[137]: begin
        reg_rdata_next[1:0] = loc_alert_class_shadowed_5_qs;
      end

      addr_hit[138]: begin
        reg_rdata_next[1:0] = loc_alert_class_shadowed_6_qs;
      end

      addr_hit[139]: begin
        reg_rdata_next[0] = loc_alert_cause_0_qs;
      end

      addr_hit[140]: begin
        reg_rdata_next[0] = loc_alert_cause_1_qs;
      end

      addr_hit[141]: begin
        reg_rdata_next[0] = loc_alert_cause_2_qs;
      end

      addr_hit[142]: begin
        reg_rdata_next[0] = loc_alert_cause_3_qs;
      end

      addr_hit[143]: begin
        reg_rdata_next[0] = loc_alert_cause_4_qs;
      end

      addr_hit[144]: begin
        reg_rdata_next[0] = loc_alert_cause_5_qs;
      end

      addr_hit[145]: begin
        reg_rdata_next[0] = loc_alert_cause_6_qs;
      end

      addr_hit[146]: begin
        reg_rdata_next[0] = classa_regwen_qs;
      end

      addr_hit[147]: begin
        reg_rdata_next[0] = classa_ctrl_shadowed_en_qs;
        reg_rdata_next[1] = classa_ctrl_shadowed_lock_qs;
        reg_rdata_next[2] = classa_ctrl_shadowed_en_e0_qs;
        reg_rdata_next[3] = classa_ctrl_shadowed_en_e1_qs;
        reg_rdata_next[4] = classa_ctrl_shadowed_en_e2_qs;
        reg_rdata_next[5] = classa_ctrl_shadowed_en_e3_qs;
        reg_rdata_next[7:6] = classa_ctrl_shadowed_map_e0_qs;
        reg_rdata_next[9:8] = classa_ctrl_shadowed_map_e1_qs;
        reg_rdata_next[11:10] = classa_ctrl_shadowed_map_e2_qs;
        reg_rdata_next[13:12] = classa_ctrl_shadowed_map_e3_qs;
      end

      addr_hit[148]: begin
        reg_rdata_next[0] = classa_clr_regwen_qs;
      end

      addr_hit[149]: begin
        reg_rdata_next[0] = classa_clr_shadowed_qs;
      end

      addr_hit[150]: begin
        reg_rdata_next[15:0] = classa_accum_cnt_qs;
      end

      addr_hit[151]: begin
        reg_rdata_next[15:0] = classa_accum_thresh_shadowed_qs;
      end

      addr_hit[152]: begin
        reg_rdata_next[31:0] = classa_timeout_cyc_shadowed_qs;
      end

      addr_hit[153]: begin
        reg_rdata_next[1:0] = classa_crashdump_trigger_shadowed_qs;
      end

      addr_hit[154]: begin
        reg_rdata_next[31:0] = classa_phase0_cyc_shadowed_qs;
      end

      addr_hit[155]: begin
        reg_rdata_next[31:0] = classa_phase1_cyc_shadowed_qs;
      end

      addr_hit[156]: begin
        reg_rdata_next[31:0] = classa_phase2_cyc_shadowed_qs;
      end

      addr_hit[157]: begin
        reg_rdata_next[31:0] = classa_phase3_cyc_shadowed_qs;
      end

      addr_hit[158]: begin
        reg_rdata_next[31:0] = classa_esc_cnt_qs;
      end

      addr_hit[159]: begin
        reg_rdata_next[2:0] = classa_state_qs;
      end

      addr_hit[160]: begin
        reg_rdata_next[0] = classb_regwen_qs;
      end

      addr_hit[161]: begin
        reg_rdata_next[0] = classb_ctrl_shadowed_en_qs;
        reg_rdata_next[1] = classb_ctrl_shadowed_lock_qs;
        reg_rdata_next[2] = classb_ctrl_shadowed_en_e0_qs;
        reg_rdata_next[3] = classb_ctrl_shadowed_en_e1_qs;
        reg_rdata_next[4] = classb_ctrl_shadowed_en_e2_qs;
        reg_rdata_next[5] = classb_ctrl_shadowed_en_e3_qs;
        reg_rdata_next[7:6] = classb_ctrl_shadowed_map_e0_qs;
        reg_rdata_next[9:8] = classb_ctrl_shadowed_map_e1_qs;
        reg_rdata_next[11:10] = classb_ctrl_shadowed_map_e2_qs;
        reg_rdata_next[13:12] = classb_ctrl_shadowed_map_e3_qs;
      end

      addr_hit[162]: begin
        reg_rdata_next[0] = classb_clr_regwen_qs;
      end

      addr_hit[163]: begin
        reg_rdata_next[0] = classb_clr_shadowed_qs;
      end

      addr_hit[164]: begin
        reg_rdata_next[15:0] = classb_accum_cnt_qs;
      end

      addr_hit[165]: begin
        reg_rdata_next[15:0] = classb_accum_thresh_shadowed_qs;
      end

      addr_hit[166]: begin
        reg_rdata_next[31:0] = classb_timeout_cyc_shadowed_qs;
      end

      addr_hit[167]: begin
        reg_rdata_next[1:0] = classb_crashdump_trigger_shadowed_qs;
      end

      addr_hit[168]: begin
        reg_rdata_next[31:0] = classb_phase0_cyc_shadowed_qs;
      end

      addr_hit[169]: begin
        reg_rdata_next[31:0] = classb_phase1_cyc_shadowed_qs;
      end

      addr_hit[170]: begin
        reg_rdata_next[31:0] = classb_phase2_cyc_shadowed_qs;
      end

      addr_hit[171]: begin
        reg_rdata_next[31:0] = classb_phase3_cyc_shadowed_qs;
      end

      addr_hit[172]: begin
        reg_rdata_next[31:0] = classb_esc_cnt_qs;
      end

      addr_hit[173]: begin
        reg_rdata_next[2:0] = classb_state_qs;
      end

      addr_hit[174]: begin
        reg_rdata_next[0] = classc_regwen_qs;
      end

      addr_hit[175]: begin
        reg_rdata_next[0] = classc_ctrl_shadowed_en_qs;
        reg_rdata_next[1] = classc_ctrl_shadowed_lock_qs;
        reg_rdata_next[2] = classc_ctrl_shadowed_en_e0_qs;
        reg_rdata_next[3] = classc_ctrl_shadowed_en_e1_qs;
        reg_rdata_next[4] = classc_ctrl_shadowed_en_e2_qs;
        reg_rdata_next[5] = classc_ctrl_shadowed_en_e3_qs;
        reg_rdata_next[7:6] = classc_ctrl_shadowed_map_e0_qs;
        reg_rdata_next[9:8] = classc_ctrl_shadowed_map_e1_qs;
        reg_rdata_next[11:10] = classc_ctrl_shadowed_map_e2_qs;
        reg_rdata_next[13:12] = classc_ctrl_shadowed_map_e3_qs;
      end

      addr_hit[176]: begin
        reg_rdata_next[0] = classc_clr_regwen_qs;
      end

      addr_hit[177]: begin
        reg_rdata_next[0] = classc_clr_shadowed_qs;
      end

      addr_hit[178]: begin
        reg_rdata_next[15:0] = classc_accum_cnt_qs;
      end

      addr_hit[179]: begin
        reg_rdata_next[15:0] = classc_accum_thresh_shadowed_qs;
      end

      addr_hit[180]: begin
        reg_rdata_next[31:0] = classc_timeout_cyc_shadowed_qs;
      end

      addr_hit[181]: begin
        reg_rdata_next[1:0] = classc_crashdump_trigger_shadowed_qs;
      end

      addr_hit[182]: begin
        reg_rdata_next[31:0] = classc_phase0_cyc_shadowed_qs;
      end

      addr_hit[183]: begin
        reg_rdata_next[31:0] = classc_phase1_cyc_shadowed_qs;
      end

      addr_hit[184]: begin
        reg_rdata_next[31:0] = classc_phase2_cyc_shadowed_qs;
      end

      addr_hit[185]: begin
        reg_rdata_next[31:0] = classc_phase3_cyc_shadowed_qs;
      end

      addr_hit[186]: begin
        reg_rdata_next[31:0] = classc_esc_cnt_qs;
      end

      addr_hit[187]: begin
        reg_rdata_next[2:0] = classc_state_qs;
      end

      addr_hit[188]: begin
        reg_rdata_next[0] = classd_regwen_qs;
      end

      addr_hit[189]: begin
        reg_rdata_next[0] = classd_ctrl_shadowed_en_qs;
        reg_rdata_next[1] = classd_ctrl_shadowed_lock_qs;
        reg_rdata_next[2] = classd_ctrl_shadowed_en_e0_qs;
        reg_rdata_next[3] = classd_ctrl_shadowed_en_e1_qs;
        reg_rdata_next[4] = classd_ctrl_shadowed_en_e2_qs;
        reg_rdata_next[5] = classd_ctrl_shadowed_en_e3_qs;
        reg_rdata_next[7:6] = classd_ctrl_shadowed_map_e0_qs;
        reg_rdata_next[9:8] = classd_ctrl_shadowed_map_e1_qs;
        reg_rdata_next[11:10] = classd_ctrl_shadowed_map_e2_qs;
        reg_rdata_next[13:12] = classd_ctrl_shadowed_map_e3_qs;
      end

      addr_hit[190]: begin
        reg_rdata_next[0] = classd_clr_regwen_qs;
      end

      addr_hit[191]: begin
        reg_rdata_next[0] = classd_clr_shadowed_qs;
      end

      addr_hit[192]: begin
        reg_rdata_next[15:0] = classd_accum_cnt_qs;
      end

      addr_hit[193]: begin
        reg_rdata_next[15:0] = classd_accum_thresh_shadowed_qs;
      end

      addr_hit[194]: begin
        reg_rdata_next[31:0] = classd_timeout_cyc_shadowed_qs;
      end

      addr_hit[195]: begin
        reg_rdata_next[1:0] = classd_crashdump_trigger_shadowed_qs;
      end

      addr_hit[196]: begin
        reg_rdata_next[31:0] = classd_phase0_cyc_shadowed_qs;
      end

      addr_hit[197]: begin
        reg_rdata_next[31:0] = classd_phase1_cyc_shadowed_qs;
      end

      addr_hit[198]: begin
        reg_rdata_next[31:0] = classd_phase2_cyc_shadowed_qs;
      end

      addr_hit[199]: begin
        reg_rdata_next[31:0] = classd_phase3_cyc_shadowed_qs;
      end

      addr_hit[200]: begin
        reg_rdata_next[31:0] = classd_esc_cnt_qs;
      end

      addr_hit[201]: begin
        reg_rdata_next[2:0] = classd_state_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  logic rst_done;
  logic shadow_rst_done;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      rst_done <= '0;
    end else begin
      rst_done <= 1'b1;
    end
  end

  always_ff @(posedge clk_i or negedge rst_shadowed_ni) begin
    if (!rst_shadowed_ni) begin
      shadow_rst_done <= '0;
    end else begin
      shadow_rst_done <= 1'b1;
    end
  end

  // both shadow and normal resets have been released
  assign shadow_busy = ~(rst_done & shadow_rst_done);

  // Collect up storage and update errors
  assign shadowed_storage_err_o = |{
    ping_timeout_cyc_shadowed_storage_err,
    ping_timer_en_shadowed_storage_err,
    alert_en_shadowed_0_storage_err,
    alert_en_shadowed_1_storage_err,
    alert_en_shadowed_2_storage_err,
    alert_en_shadowed_3_storage_err,
    alert_en_shadowed_4_storage_err,
    alert_en_shadowed_5_storage_err,
    alert_en_shadowed_6_storage_err,
    alert_en_shadowed_7_storage_err,
    alert_en_shadowed_8_storage_err,
    alert_en_shadowed_9_storage_err,
    alert_en_shadowed_10_storage_err,
    alert_en_shadowed_11_storage_err,
    alert_en_shadowed_12_storage_err,
    alert_en_shadowed_13_storage_err,
    alert_en_shadowed_14_storage_err,
    alert_en_shadowed_15_storage_err,
    alert_en_shadowed_16_storage_err,
    alert_en_shadowed_17_storage_err,
    alert_en_shadowed_18_storage_err,
    alert_en_shadowed_19_storage_err,
    alert_en_shadowed_20_storage_err,
    alert_en_shadowed_21_storage_err,
    alert_en_shadowed_22_storage_err,
    alert_en_shadowed_23_storage_err,
    alert_en_shadowed_24_storage_err,
    alert_en_shadowed_25_storage_err,
    alert_en_shadowed_26_storage_err,
    alert_en_shadowed_27_storage_err,
    alert_class_shadowed_0_storage_err,
    alert_class_shadowed_1_storage_err,
    alert_class_shadowed_2_storage_err,
    alert_class_shadowed_3_storage_err,
    alert_class_shadowed_4_storage_err,
    alert_class_shadowed_5_storage_err,
    alert_class_shadowed_6_storage_err,
    alert_class_shadowed_7_storage_err,
    alert_class_shadowed_8_storage_err,
    alert_class_shadowed_9_storage_err,
    alert_class_shadowed_10_storage_err,
    alert_class_shadowed_11_storage_err,
    alert_class_shadowed_12_storage_err,
    alert_class_shadowed_13_storage_err,
    alert_class_shadowed_14_storage_err,
    alert_class_shadowed_15_storage_err,
    alert_class_shadowed_16_storage_err,
    alert_class_shadowed_17_storage_err,
    alert_class_shadowed_18_storage_err,
    alert_class_shadowed_19_storage_err,
    alert_class_shadowed_20_storage_err,
    alert_class_shadowed_21_storage_err,
    alert_class_shadowed_22_storage_err,
    alert_class_shadowed_23_storage_err,
    alert_class_shadowed_24_storage_err,
    alert_class_shadowed_25_storage_err,
    alert_class_shadowed_26_storage_err,
    alert_class_shadowed_27_storage_err,
    loc_alert_en_shadowed_0_storage_err,
    loc_alert_en_shadowed_1_storage_err,
    loc_alert_en_shadowed_2_storage_err,
    loc_alert_en_shadowed_3_storage_err,
    loc_alert_en_shadowed_4_storage_err,
    loc_alert_en_shadowed_5_storage_err,
    loc_alert_en_shadowed_6_storage_err,
    loc_alert_class_shadowed_0_storage_err,
    loc_alert_class_shadowed_1_storage_err,
    loc_alert_class_shadowed_2_storage_err,
    loc_alert_class_shadowed_3_storage_err,
    loc_alert_class_shadowed_4_storage_err,
    loc_alert_class_shadowed_5_storage_err,
    loc_alert_class_shadowed_6_storage_err,
    classa_ctrl_shadowed_en_storage_err,
    classa_ctrl_shadowed_lock_storage_err,
    classa_ctrl_shadowed_en_e0_storage_err,
    classa_ctrl_shadowed_en_e1_storage_err,
    classa_ctrl_shadowed_en_e2_storage_err,
    classa_ctrl_shadowed_en_e3_storage_err,
    classa_ctrl_shadowed_map_e0_storage_err,
    classa_ctrl_shadowed_map_e1_storage_err,
    classa_ctrl_shadowed_map_e2_storage_err,
    classa_ctrl_shadowed_map_e3_storage_err,
    classa_clr_shadowed_storage_err,
    classa_accum_thresh_shadowed_storage_err,
    classa_timeout_cyc_shadowed_storage_err,
    classa_crashdump_trigger_shadowed_storage_err,
    classa_phase0_cyc_shadowed_storage_err,
    classa_phase1_cyc_shadowed_storage_err,
    classa_phase2_cyc_shadowed_storage_err,
    classa_phase3_cyc_shadowed_storage_err,
    classb_ctrl_shadowed_en_storage_err,
    classb_ctrl_shadowed_lock_storage_err,
    classb_ctrl_shadowed_en_e0_storage_err,
    classb_ctrl_shadowed_en_e1_storage_err,
    classb_ctrl_shadowed_en_e2_storage_err,
    classb_ctrl_shadowed_en_e3_storage_err,
    classb_ctrl_shadowed_map_e0_storage_err,
    classb_ctrl_shadowed_map_e1_storage_err,
    classb_ctrl_shadowed_map_e2_storage_err,
    classb_ctrl_shadowed_map_e3_storage_err,
    classb_clr_shadowed_storage_err,
    classb_accum_thresh_shadowed_storage_err,
    classb_timeout_cyc_shadowed_storage_err,
    classb_crashdump_trigger_shadowed_storage_err,
    classb_phase0_cyc_shadowed_storage_err,
    classb_phase1_cyc_shadowed_storage_err,
    classb_phase2_cyc_shadowed_storage_err,
    classb_phase3_cyc_shadowed_storage_err,
    classc_ctrl_shadowed_en_storage_err,
    classc_ctrl_shadowed_lock_storage_err,
    classc_ctrl_shadowed_en_e0_storage_err,
    classc_ctrl_shadowed_en_e1_storage_err,
    classc_ctrl_shadowed_en_e2_storage_err,
    classc_ctrl_shadowed_en_e3_storage_err,
    classc_ctrl_shadowed_map_e0_storage_err,
    classc_ctrl_shadowed_map_e1_storage_err,
    classc_ctrl_shadowed_map_e2_storage_err,
    classc_ctrl_shadowed_map_e3_storage_err,
    classc_clr_shadowed_storage_err,
    classc_accum_thresh_shadowed_storage_err,
    classc_timeout_cyc_shadowed_storage_err,
    classc_crashdump_trigger_shadowed_storage_err,
    classc_phase0_cyc_shadowed_storage_err,
    classc_phase1_cyc_shadowed_storage_err,
    classc_phase2_cyc_shadowed_storage_err,
    classc_phase3_cyc_shadowed_storage_err,
    classd_ctrl_shadowed_en_storage_err,
    classd_ctrl_shadowed_lock_storage_err,
    classd_ctrl_shadowed_en_e0_storage_err,
    classd_ctrl_shadowed_en_e1_storage_err,
    classd_ctrl_shadowed_en_e2_storage_err,
    classd_ctrl_shadowed_en_e3_storage_err,
    classd_ctrl_shadowed_map_e0_storage_err,
    classd_ctrl_shadowed_map_e1_storage_err,
    classd_ctrl_shadowed_map_e2_storage_err,
    classd_ctrl_shadowed_map_e3_storage_err,
    classd_clr_shadowed_storage_err,
    classd_accum_thresh_shadowed_storage_err,
    classd_timeout_cyc_shadowed_storage_err,
    classd_crashdump_trigger_shadowed_storage_err,
    classd_phase0_cyc_shadowed_storage_err,
    classd_phase1_cyc_shadowed_storage_err,
    classd_phase2_cyc_shadowed_storage_err,
    classd_phase3_cyc_shadowed_storage_err
  };
  assign shadowed_update_err_o = |{
    ping_timeout_cyc_shadowed_update_err,
    ping_timer_en_shadowed_update_err,
    alert_en_shadowed_0_update_err,
    alert_en_shadowed_1_update_err,
    alert_en_shadowed_2_update_err,
    alert_en_shadowed_3_update_err,
    alert_en_shadowed_4_update_err,
    alert_en_shadowed_5_update_err,
    alert_en_shadowed_6_update_err,
    alert_en_shadowed_7_update_err,
    alert_en_shadowed_8_update_err,
    alert_en_shadowed_9_update_err,
    alert_en_shadowed_10_update_err,
    alert_en_shadowed_11_update_err,
    alert_en_shadowed_12_update_err,
    alert_en_shadowed_13_update_err,
    alert_en_shadowed_14_update_err,
    alert_en_shadowed_15_update_err,
    alert_en_shadowed_16_update_err,
    alert_en_shadowed_17_update_err,
    alert_en_shadowed_18_update_err,
    alert_en_shadowed_19_update_err,
    alert_en_shadowed_20_update_err,
    alert_en_shadowed_21_update_err,
    alert_en_shadowed_22_update_err,
    alert_en_shadowed_23_update_err,
    alert_en_shadowed_24_update_err,
    alert_en_shadowed_25_update_err,
    alert_en_shadowed_26_update_err,
    alert_en_shadowed_27_update_err,
    alert_class_shadowed_0_update_err,
    alert_class_shadowed_1_update_err,
    alert_class_shadowed_2_update_err,
    alert_class_shadowed_3_update_err,
    alert_class_shadowed_4_update_err,
    alert_class_shadowed_5_update_err,
    alert_class_shadowed_6_update_err,
    alert_class_shadowed_7_update_err,
    alert_class_shadowed_8_update_err,
    alert_class_shadowed_9_update_err,
    alert_class_shadowed_10_update_err,
    alert_class_shadowed_11_update_err,
    alert_class_shadowed_12_update_err,
    alert_class_shadowed_13_update_err,
    alert_class_shadowed_14_update_err,
    alert_class_shadowed_15_update_err,
    alert_class_shadowed_16_update_err,
    alert_class_shadowed_17_update_err,
    alert_class_shadowed_18_update_err,
    alert_class_shadowed_19_update_err,
    alert_class_shadowed_20_update_err,
    alert_class_shadowed_21_update_err,
    alert_class_shadowed_22_update_err,
    alert_class_shadowed_23_update_err,
    alert_class_shadowed_24_update_err,
    alert_class_shadowed_25_update_err,
    alert_class_shadowed_26_update_err,
    alert_class_shadowed_27_update_err,
    loc_alert_en_shadowed_0_update_err,
    loc_alert_en_shadowed_1_update_err,
    loc_alert_en_shadowed_2_update_err,
    loc_alert_en_shadowed_3_update_err,
    loc_alert_en_shadowed_4_update_err,
    loc_alert_en_shadowed_5_update_err,
    loc_alert_en_shadowed_6_update_err,
    loc_alert_class_shadowed_0_update_err,
    loc_alert_class_shadowed_1_update_err,
    loc_alert_class_shadowed_2_update_err,
    loc_alert_class_shadowed_3_update_err,
    loc_alert_class_shadowed_4_update_err,
    loc_alert_class_shadowed_5_update_err,
    loc_alert_class_shadowed_6_update_err,
    classa_ctrl_shadowed_en_update_err,
    classa_ctrl_shadowed_lock_update_err,
    classa_ctrl_shadowed_en_e0_update_err,
    classa_ctrl_shadowed_en_e1_update_err,
    classa_ctrl_shadowed_en_e2_update_err,
    classa_ctrl_shadowed_en_e3_update_err,
    classa_ctrl_shadowed_map_e0_update_err,
    classa_ctrl_shadowed_map_e1_update_err,
    classa_ctrl_shadowed_map_e2_update_err,
    classa_ctrl_shadowed_map_e3_update_err,
    classa_clr_shadowed_update_err,
    classa_accum_thresh_shadowed_update_err,
    classa_timeout_cyc_shadowed_update_err,
    classa_crashdump_trigger_shadowed_update_err,
    classa_phase0_cyc_shadowed_update_err,
    classa_phase1_cyc_shadowed_update_err,
    classa_phase2_cyc_shadowed_update_err,
    classa_phase3_cyc_shadowed_update_err,
    classb_ctrl_shadowed_en_update_err,
    classb_ctrl_shadowed_lock_update_err,
    classb_ctrl_shadowed_en_e0_update_err,
    classb_ctrl_shadowed_en_e1_update_err,
    classb_ctrl_shadowed_en_e2_update_err,
    classb_ctrl_shadowed_en_e3_update_err,
    classb_ctrl_shadowed_map_e0_update_err,
    classb_ctrl_shadowed_map_e1_update_err,
    classb_ctrl_shadowed_map_e2_update_err,
    classb_ctrl_shadowed_map_e3_update_err,
    classb_clr_shadowed_update_err,
    classb_accum_thresh_shadowed_update_err,
    classb_timeout_cyc_shadowed_update_err,
    classb_crashdump_trigger_shadowed_update_err,
    classb_phase0_cyc_shadowed_update_err,
    classb_phase1_cyc_shadowed_update_err,
    classb_phase2_cyc_shadowed_update_err,
    classb_phase3_cyc_shadowed_update_err,
    classc_ctrl_shadowed_en_update_err,
    classc_ctrl_shadowed_lock_update_err,
    classc_ctrl_shadowed_en_e0_update_err,
    classc_ctrl_shadowed_en_e1_update_err,
    classc_ctrl_shadowed_en_e2_update_err,
    classc_ctrl_shadowed_en_e3_update_err,
    classc_ctrl_shadowed_map_e0_update_err,
    classc_ctrl_shadowed_map_e1_update_err,
    classc_ctrl_shadowed_map_e2_update_err,
    classc_ctrl_shadowed_map_e3_update_err,
    classc_clr_shadowed_update_err,
    classc_accum_thresh_shadowed_update_err,
    classc_timeout_cyc_shadowed_update_err,
    classc_crashdump_trigger_shadowed_update_err,
    classc_phase0_cyc_shadowed_update_err,
    classc_phase1_cyc_shadowed_update_err,
    classc_phase2_cyc_shadowed_update_err,
    classc_phase3_cyc_shadowed_update_err,
    classd_ctrl_shadowed_en_update_err,
    classd_ctrl_shadowed_lock_update_err,
    classd_ctrl_shadowed_en_e0_update_err,
    classd_ctrl_shadowed_en_e1_update_err,
    classd_ctrl_shadowed_en_e2_update_err,
    classd_ctrl_shadowed_en_e3_update_err,
    classd_ctrl_shadowed_map_e0_update_err,
    classd_ctrl_shadowed_map_e1_update_err,
    classd_ctrl_shadowed_map_e2_update_err,
    classd_ctrl_shadowed_map_e3_update_err,
    classd_clr_shadowed_update_err,
    classd_accum_thresh_shadowed_update_err,
    classd_timeout_cyc_shadowed_update_err,
    classd_crashdump_trigger_shadowed_update_err,
    classd_phase0_cyc_shadowed_update_err,
    classd_phase1_cyc_shadowed_update_err,
    classd_phase2_cyc_shadowed_update_err,
    classd_phase3_cyc_shadowed_update_err
  };

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
