# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

package(default_visibility = ["//visibility:public"])

load(
    "//rules:autogen.bzl",
    "autogen_hjson_sw_headers",
)

load(
    "//rules/opentitan:defs.bzl",
    "CLEAR_KEY_SET",
    "DEFAULT_TEST_FAILURE_MSG",
    "DEFAULT_TEST_SUCCESS_MSG",
    "fpga_cw305",
    "fpga_cw310",
    "fpga_cw340",
    "silicon",
    "sim_dv",
    "sim_verilator",
)

autogen_hjson_sw_headers(
    name_prefix = "rv_plic",
    srcs = [
        "//hw/top_englishbreakfast/ip_autogen:rv_plic/data/rv_plic.hjson",
    ],
)

autogen_hjson_sw_headers(
    name_prefix = "alert_handler",
    srcs = [
        "//hw/top_englishbreakfast/ip_autogen:alert_handler/data/alert_handler.hjson",
    ],
)

# This header is used by the autogenerated sw to point to the
# various DT headers used by this top.
#
# FIXME How can we improve this? The problem is that we have
# no consistent way of defining headers so even this cannot
# be generated by topgen without huge hacks.
cc_library(
    name = "dt_headers",
    srcs = [],
    deps = [
        ":alert_handler_dt",
        ":rv_plic_dt",
        "//hw/ip/adc_ctrl/data:adc_ctrl_dt",
        "//hw/ip/aes/data:aes_dt",
        "//hw/ip/aon_timer/data:aon_timer_dt",
        "//hw/ip/csrng/data:csrng_dt",
        "//hw/ip/edn/data:edn_dt",
        "//hw/ip/entropy_src/data:entropy_src_dt",
        "//hw/ip/gpio/data:gpio_dt",
        "//hw/ip/hmac/data:hmac_dt",
        "//hw/ip/i2c/data:i2c_dt",
        "//hw/ip/keymgr/data:keymgr_dt",
        "//hw/ip/kmac/data:kmac_dt",
        "//hw/ip/lc_ctrl/data:lc_ctrl_dt",
        "//hw/ip/otbn/data:otbn_dt",
        "//hw/ip/otp_ctrl/data:otp_ctrl_dt",
        "//hw/ip/pattgen/data:pattgen_dt",
        "//hw/ip/pinmux/data:pinmux_dt",
        "//hw/ip/pwm/data:pwm_dt",
        "//hw/ip/rom_ctrl/data:rom_ctrl_dt",
        "//hw/ip/rv_core_ibex/data:rv_core_ibex_dt",
        "//hw/ip/rv_dm/data:rv_dm_dt",
        "//hw/ip/rv_timer/data:rv_timer_dt",
        "//hw/ip/spi_device/data:spi_device_dt",
        "//hw/ip/spi_host/data:spi_host_dt",
        "//hw/ip/sram_ctrl/data:sram_ctrl_dt",
        "//hw/ip/sysrst_ctrl/data:sysrst_ctrl_dt",
        "//hw/ip/uart/data:uart_dt",
        "//hw/ip/usbdev/data:usbdev_dt",
        "//hw/top_englishbreakfast/ip/ast/data:ast_dt",
        "//hw/top_englishbreakfast/ip/sensor_ctrl/data:sensor_ctrl_dt",
        "//hw/top_englishbreakfast/ip/pinmux/data/autogen:pinmux_dt",
        "//hw/top_englishbreakfast/ip_autogen/clkmgr:clkmgr_dt",
        "//hw/top_englishbreakfast/ip_autogen/rstmgr:rstmgr_dt",
        "//hw/top_englishbreakfast/ip_autogen/flash_ctrl:flash_ctrl_dt",
        "//hw/top_englishbreakfast/ip_autogen/pwrmgr:pwrmgr_dt",
    ]
)


filegroup(
    name = "all_files",
    srcs = glob(["**"]) + [
        "//hw/top_englishbreakfast/data:all_files",
        "//hw/top_englishbreakfast/dv/verilator:all_files",
        "//hw/top_englishbreakfast/ip:all_files",
        "//hw/top_englishbreakfast/ip_autogen:all_files",
    ],
)

###########################################################################
# Sim Verilator Environments
#
# The sim_verilator_base target is only meant to be used for building ROMs
# and other items without `testonly=True`.
###########################################################################
sim_verilator(
    name = "sim_verilator_base",
    design = "englishbreakfast",
    exec_env = "sim_verilator",
    libs = [
        "//sw/device/lib/arch:boot_stage_rom_ext",
        "//sw/device/lib/arch:sim_verilator",
        "//hw/top_englishbreakfast/sw/autogen:devicetables",
    ],
    linker_script = "//sw/device/lib/testing/test_framework:ottf_ld_silicon_creator_slot_a",
    otp = "//hw/ip/otp_ctrl/data:img_rma",
    rom_scramble_config = "//hw/top_englishbreakfast/data:autogen/top_englishbreakfast.gen.hjson",
    test_cmd = "testing-not-supported",
)
