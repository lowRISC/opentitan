From c1d4cdedb11f185e967fda782b1b18093bf1f5ab Mon Sep 17 00:00:00 2001
From: Michael Schaffner <msf@google.com>
Date: Thu, 17 Oct 2019 18:12:59 -0700
Subject: [PATCH 06/11] [lint/cleanup] Fix several lint errors / warnings

This fixes several lint errors and warnings, most of which are related to
array indexing operations that are out of range.
---
 src/dm_csrs.sv      | 158 +++++++++++++++++++++++++++++---------------
 src/dm_mem.sv       |  95 ++++++++++++++++----------
 src/dmi_jtag.sv     |   4 +-
 src/dmi_jtag_tap.sv |  30 +++++----
 4 files changed, 182 insertions(+), 105 deletions(-)

diff --git a/src/dm_csrs.sv b/src/dm_csrs.sv
index a6b1c6d..54cbc1a 100644
--- a/src/dm_csrs.sv
+++ b/src/dm_csrs.sv
@@ -80,6 +80,8 @@ module dm_csrs #(
 );
   // the amount of bits we need to represent all harts
   localparam int unsigned HartSelLen = (NrHarts == 1) ? 1 : $clog2(NrHarts);
+  localparam int unsigned NrHartsAligned = 2**HartSelLen;
+
   dm::dtm_op_e dtm_op;
   assign dtm_op = dm::dtm_op_e'(dmi_req_i.op);
 
@@ -102,35 +104,56 @@ module dm_csrs #(
   logic [32-1:0] halted_flat3;
 
   // haltsum0
+  logic [14:0] hartsel_idx0;
   always_comb begin : p_haltsum0
     halted              = '0;
+    haltsum0            = '0;
+    hartsel_idx0        = hartsel_o[19:5];
     halted[NrHarts-1:0] = halted_i;
     halted_reshaped0    = halted;
-    haltsum0            = halted_reshaped0[hartsel_o[19:5]];
+    if (hartsel_idx0 < (NrHarts-1)/2**5+1) begin
+      haltsum0 = halted_reshaped0[hartsel_idx0];
+    end
   end
 
   // haltsum1
+  logic [9:0] hartsel_idx1;
   always_comb begin : p_reduction1
     halted_flat1 = '0;
-    for (int unsigned k=0; k<NrHarts/2**5+1; k++) begin
+    haltsum1     = '0;
+    hartsel_idx1 = hartsel_o[19:10];
+
+    for (int unsigned k = 0; k < NrHarts/2**5+1; k++) begin
       halted_flat1[k] = |halted_reshaped0[k];
     end
     halted_reshaped1 = halted_flat1;
-    haltsum1         = halted_reshaped1[hartsel_o[19:10]];
+
+    if (hartsel_idx1 < (NrHarts/2**10+1)) begin
+      haltsum1 = halted_reshaped1[hartsel_idx1];
+    end
   end
+
   // haltsum2
+  logic [4:0] hartsel_idx2;
   always_comb begin : p_reduction2
     halted_flat2 = '0;
-    for (int unsigned k=0; k<NrHarts/2**10+1; k++) begin
+    haltsum2     = '0;
+    hartsel_idx2 = hartsel_o[19:15];
+
+    for (int unsigned k = 0; k < NrHarts/2**10+1; k++) begin
       halted_flat2[k] = |halted_reshaped1[k];
     end
     halted_reshaped2 = halted_flat2;
-    haltsum2         = halted_reshaped2[hartsel_o[19:15]];
+
+    if (hartsel_idx2 < (NrHarts/2**15+1)) begin
+      haltsum2         = halted_reshaped2[hartsel_idx2];
+    end
   end
+
   // haltsum3
   always_comb begin : p_reduction3
     halted_flat3 = '0;
-    for (int unsigned k=0; k<NrHarts/2**15+1; k++) begin
+    for (int unsigned k = 0; k < NrHarts/2**15+1; k++) begin
       halted_flat3[k] = |halted_reshaped2[k];
     end
     haltsum3 = halted_flat3;
@@ -151,8 +174,7 @@ module dm_csrs #(
   logic [NrHarts-1:0] havereset_d, havereset_q;
   // program buffer
   logic [dm::ProgBufSize-1:0][31:0] progbuf_d, progbuf_q;
-  // because first data address starts at 0x04
-  logic [({3'b0, dm::DataCount} + dm::Data0 - 1):(dm::Data0)][31:0] data_d, data_q;
+  logic [dm::DataCount-1:0][31:0] data_d, data_q;
 
   logic [HartSelLen-1:0] selected_hart;
 
@@ -171,6 +193,27 @@ module dm_csrs #(
 
   assign hartsel_o         = {dmcontrol_q.hartselhi, dmcontrol_q.hartsello};
 
+  // needed to avoid lint warnings
+  logic [NrHartsAligned-1:0] havereset_d_aligned, havereset_q_aligned,
+                             resumeack_aligned, unavailable_aligned,
+                             halted_aligned;
+  assign resumeack_aligned   = NrHartsAligned'(resumeack_i);
+  assign unavailable_aligned = NrHartsAligned'(unavailable_i);
+  assign halted_aligned      = NrHartsAligned'(halted_i);
+
+  assign havereset_d         = NrHarts'(havereset_d_aligned);
+  assign havereset_q_aligned = NrHartsAligned'(havereset_q);
+
+  dm::hartinfo_t [NrHartsAligned-1:0] hartinfo_aligned;
+  always_comb begin : p_hartinfo_align
+    hartinfo_aligned = '0;
+    hartinfo_aligned[NrHarts-1:0] = hartinfo_i;
+  end
+
+  // helper variables
+  dm::sbcs_t sbcs;
+  dm::dmcontrol_t dmcontrol;
+  dm::abstractcs_t a_abstractcs;
   always_comb begin : csr_read_write
     // --------------------
     // Static Values (R/O)
@@ -183,14 +226,14 @@ module dm_csrs #(
     // we do not support halt-on-reset sequence
     dmstatus.hasresethaltreq = 1'b0;
     // TODO(zarubaf) things need to change here if we implement the array mask
-    dmstatus.allhavereset = havereset_q[selected_hart];
-    dmstatus.anyhavereset = havereset_q[selected_hart];
+    dmstatus.allhavereset = havereset_q_aligned[selected_hart];
+    dmstatus.anyhavereset = havereset_q_aligned[selected_hart];
 
-    dmstatus.allresumeack = resumeack_i[selected_hart];
-    dmstatus.anyresumeack = resumeack_i[selected_hart];
+    dmstatus.allresumeack = resumeack_aligned[selected_hart];
+    dmstatus.anyresumeack = resumeack_aligned[selected_hart];
 
-    dmstatus.allunavail   = unavailable_i[selected_hart];
-    dmstatus.anyunavail   = unavailable_i[selected_hart];
+    dmstatus.allunavail   = unavailable_aligned[selected_hart];
+    dmstatus.anyunavail   = unavailable_aligned[selected_hart];
 
     // as soon as we are out of the legal Hart region tell the debugger
     // that there are only non-existent harts
@@ -199,11 +242,11 @@ module dm_csrs #(
 
     // We are not allowed to be in multiple states at once. This is a to
     // make the running/halted and unavailable states exclusive.
-    dmstatus.allhalted    = halted_i[selected_hart] & ~unavailable_i[selected_hart];
-    dmstatus.anyhalted    = halted_i[selected_hart] & ~unavailable_i[selected_hart];
+    dmstatus.allhalted    = halted_aligned[selected_hart] & ~unavailable_aligned[selected_hart];
+    dmstatus.anyhalted    = halted_aligned[selected_hart] & ~unavailable_aligned[selected_hart];
 
-    dmstatus.allrunning   = ~halted_i[selected_hart] & ~unavailable_i[selected_hart];
-    dmstatus.anyrunning   = ~halted_i[selected_hart] & ~unavailable_i[selected_hart];
+    dmstatus.allrunning   = ~halted_aligned[selected_hart] & ~unavailable_aligned[selected_hart];
+    dmstatus.anyrunning   = ~halted_aligned[selected_hart] & ~unavailable_aligned[selected_hart];
 
     // abstractcs
     abstractcs = '0;
@@ -217,15 +260,15 @@ module dm_csrs #(
     abstractauto_d.zero0 = '0;
 
     // default assignments
-    havereset_d = havereset_q;
-    dmcontrol_d = dmcontrol_q;
-    cmderr_d    = cmderr_q;
-    command_d   = command_q;
-    progbuf_d   = progbuf_q;
-    data_d      = data_q;
-    sbcs_d      = sbcs_q;
-    sbaddr_d    = sbaddress_i;
-    sbdata_d    = sbdata_q;
+    havereset_d_aligned = NrHartsAligned'(havereset_q);
+    dmcontrol_d         = dmcontrol_q;
+    cmderr_d            = cmderr_q;
+    command_d           = command_q;
+    progbuf_d           = progbuf_q;
+    data_d              = data_q;
+    sbcs_d              = sbcs_q;
+    sbaddr_d            = 64'(sbaddress_i);
+    sbdata_d            = sbdata_q;
 
     resp_queue_data         = 32'b0;
     cmd_valid_d             = 1'b0;
@@ -234,13 +277,19 @@ module dm_csrs #(
     sbdata_write_valid_o    = 1'b0;
     clear_resumeack_o       = 1'b0;
 
+    // helper variables
+    sbcs         = '0;
+    dmcontrol    = '0;
+    a_abstractcs = '0;
+
+    // localparam int unsigned DataCountAlign = $clog2(dm::DataCount);
     // reads
     if (dmi_req_ready_o && dmi_req_valid_i && dtm_op == dm::DTM_READ) begin
       unique case ({1'b0, dmi_req_i.addr}) inside
         [(dm::Data0):DataEnd]: begin
-          if (dm::DataCount > 0) begin
-            resp_queue_data = data_q[dmi_req_i.addr[4:0]];
-          end
+          // logic [$clog2(dm::DataCount)-1:0] resp_queue_idx;
+          // resp_queue_idx = dmi_req_i.addr[4:0] - int'(dm::Data0);
+          resp_queue_data = data_q[dmi_req_i.addr[4:0] - int'(dm::Data0)];
           if (!cmdbusy_i) begin
             // check whether we need to re-execute the command (just give a cmd_valid)
             cmd_valid_d = abstractauto_q.autoexecdata[dmi_req_i.addr[3:0] -
@@ -249,13 +298,13 @@ module dm_csrs #(
         end
         dm::DMControl:    resp_queue_data = dmcontrol_q;
         dm::DMStatus:     resp_queue_data = dmstatus;
-        dm::Hartinfo:     resp_queue_data = hartinfo_i[selected_hart];
+        dm::Hartinfo:     resp_queue_data = hartinfo_aligned[selected_hart];
         dm::AbstractCS:   resp_queue_data = abstractcs;
         dm::AbstractAuto: resp_queue_data = abstractauto_q;
         // command is read-only
         dm::Command:    resp_queue_data = '0;
         [(dm::ProgBuf0):ProgBufEnd]: begin
-          resp_queue_data = progbuf_q[dmi_req_i.addr[4:0]];
+          resp_queue_data = progbuf_q[dmi_req_i.addr[$clog2(dm::ProgBufSize)-1:0]];
           if (!cmdbusy_i) begin
             // check whether we need to re-execute the command (just give a cmd_valid)
             // TODO(zarubaf): check if offset is correct: without it this may assign Xes
@@ -284,11 +333,11 @@ module dm_csrs #(
           end else begin
             resp_queue_data = sbaddr_q[63:32];
           end
-      end
+        end
         dm::SBData0: begin
           // access while the SBA was busy
           if (sbbusy_i) begin
-           sbcs_d.sbbusyerror = 1'b1;
+            sbcs_d.sbbusyerror = 1'b1;
           end else begin
             sbdata_read_valid_o = (sbcs_q.sberror == '0);
             resp_queue_data = sbdata_q[31:0];
@@ -312,18 +361,16 @@ module dm_csrs #(
         [(dm::Data0):DataEnd]: begin
           // attempts to write them while busy is set does not change their value
           if (!cmdbusy_i && dm::DataCount > 0) begin
-              data_d[dmi_req_i.addr[4:0]] = dmi_req_i.data;
-              // check whether we need to re-execute the command (just give a cmd_valid)
-              cmd_valid_d = abstractauto_q.autoexecdata[dmi_req_i.addr[3:0] -
-                            int'(dm::Data0)];
+            data_d[dmi_req_i.addr[$clog2(dm::DataCount)-1:0]] = dmi_req_i.data;
+            // check whether we need to re-execute the command (just give a cmd_valid)
+            cmd_valid_d = abstractauto_q.autoexecdata[dmi_req_i.addr[3:0] - int'(dm::Data0)];
           end
         end
         dm::DMControl: begin
-          automatic dm::dmcontrol_t dmcontrol;
           dmcontrol = dm::dmcontrol_t'(dmi_req_i.data);
           // clear the havreset of the selected hart
           if (dmcontrol.ackhavereset) begin
-              havereset_d[selected_hart] = 1'b0;
+            havereset_d_aligned[selected_hart] = 1'b0;
           end
           dmcontrol_d = dmi_req_i.data;
         end
@@ -335,7 +382,6 @@ module dm_csrs #(
           // field remain set until they are cleared by writing 1 to
           // them. No abstract command is started until the value is
           // reset to 0.
-          automatic dm::abstractcs_t a_abstractcs;
           a_abstractcs = dm::abstractcs_t'(dmi_req_i.data);
           // reads during abstract command execution are not allowed
           if (!cmdbusy_i) begin
@@ -368,7 +414,7 @@ module dm_csrs #(
         [(dm::ProgBuf0):ProgBufEnd]: begin
           // attempts to write them while busy is set does not change their value
           if (!cmdbusy_i) begin
-            progbuf_d[dmi_req_i.addr[4:0]] = dmi_req_i.data;
+            progbuf_d[dmi_req_i.addr[$clog2(dm::ProgBufSize)-1:0]] = dmi_req_i.data;
             // check whether we need to re-execute the command (just give a cmd_valid)
             // this should probably throw an error if executed during another command
             // was busy
@@ -382,7 +428,6 @@ module dm_csrs #(
           if (sbbusy_i) begin
             sbcs_d.sbbusyerror = 1'b1;
           end else begin
-            automatic dm::sbcs_t sbcs;
             sbcs = dm::sbcs_t'(dmi_req_i.data);
             sbcs_d = sbcs;
             // R/W1C
@@ -410,7 +455,7 @@ module dm_csrs #(
         dm::SBData0: begin
           // access while the SBA was busy
           if (sbbusy_i) begin
-            sbcs_d.sbbusyerror = 1'b1;
+           sbcs_d.sbbusyerror = 1'b1;
           end else begin
             sbdata_d[31:0] = dmi_req_i.data;
             sbdata_write_valid_o = (sbcs_q.sberror == '0);
@@ -439,7 +484,7 @@ module dm_csrs #(
 
     // set the havereset flag when we did a ndmreset
     if (ndmreset_o) begin
-      havereset_d = '1;
+      havereset_d_aligned[NrHarts-1:0] = '1;
     end
     // -------------
     // System Bus
@@ -488,8 +533,10 @@ module dm_csrs #(
     // default assignment
     haltreq_o = '0;
     resumereq_o = '0;
-    haltreq_o[selected_hart] = dmcontrol_q.haltreq;
-    resumereq_o[selected_hart] = dmcontrol_q.resumereq;
+    if (selected_hart < NrHarts) begin
+      haltreq_o[selected_hart]   = dmcontrol_q.haltreq;
+      resumereq_o[selected_hart] = dmcontrol_q.resumereq;
+    end
   end
 
   assign dmactive_o  = dmcontrol_q.dmactive;
@@ -521,7 +568,7 @@ module dm_csrs #(
     .pop_i            ( resp_queue_pop       )
   );
 
-  always_ff @(posedge clk_i or negedge rst_ni) begin
+  always_ff @(posedge clk_i or negedge rst_ni) begin : p_regs
     // PoR
     if (!rst_ni) begin
       dmcontrol_q    <= '0;
@@ -542,6 +589,7 @@ module dm_csrs #(
         dmcontrol_q.haltreq          <= '0;
         dmcontrol_q.resumereq        <= '0;
         dmcontrol_q.hartreset        <= '0;
+        dmcontrol_q.ackhavereset     <= '0;
         dmcontrol_q.zero1            <= '0;
         dmcontrol_q.hasel            <= '0;
         dmcontrol_q.hartsello        <= '0;
@@ -576,19 +624,19 @@ module dm_csrs #(
     end
   end
 
-///////////////////////////////////////////////////////
-// assertions
-///////////////////////////////////////////////////////
+  ///////////////////////////////////////////////////////
+  // assertions
+  ///////////////////////////////////////////////////////
 
-//pragma translate_off
-`ifndef VERILATOR
+  //pragma translate_off
+  `ifndef VERILATOR
   haltsum: assert property (
       @(posedge clk_i) disable iff (!rst_ni)
           (dmi_req_ready_o && dmi_req_valid_i && dtm_op == dm::DTM_READ) |->
               !({1'b0, dmi_req_i.addr} inside
                   {dm::HaltSum0, dm::HaltSum1, dm::HaltSum2, dm::HaltSum3}))
       else $warning("Haltsums have not been properly tested yet.");
-`endif
-//pragma translate_on
+  `endif
+  //pragma translate_on
 
 endmodule : dm_csrs
diff --git a/src/dm_mem.sv b/src/dm_mem.sv
index bba5234..c6d4059 100644
--- a/src/dm_mem.sv
+++ b/src/dm_mem.sv
@@ -56,7 +56,6 @@ module dm_mem #(
   input  logic [BusWidth/8-1:0]            be_i,
   output logic [BusWidth-1:0]              rdata_o
 );
-
   localparam int unsigned DbgAddressBits = 12;
   localparam int unsigned HartSelLen     = (NrHarts == 1) ? 1 : $clog2(NrHarts);
   localparam int unsigned NrHartsAligned = 2**HartSelLen;
@@ -79,13 +78,11 @@ module dm_mem #(
   localparam logic [DbgAddressBits-1:0] ExceptionAddr = 'h10C;
 
   logic [dm::ProgBufSize/2-1:0][63:0]   progbuf;
-  logic [4:0][63:0]   abstract_cmd;
+  logic [7:0][63:0]   abstract_cmd;
   logic [NrHarts-1:0] halted_d, halted_q;
   logic [NrHarts-1:0] resuming_d, resuming_q;
   logic               resume, go, going;
-  logic [NrHarts-1:0] halted;
 
-  logic [HartSelLen-1:0] hart_sel;
   logic exception;
   logic unsupported_command;
 
@@ -93,6 +90,27 @@ module dm_mem #(
   logic [63:0] rdata_d, rdata_q;
   logic        word_enable32_q;
 
+  // this is needed to avoid lint warnings related to array indexing
+  // resize hartsel to valid range
+  logic [HartSelLen-1:0] hartsel, wdata_hartsel;
+
+  assign hartsel       = hartsel_i[HartSelLen-1:0];
+  assign wdata_hartsel = wdata_i[HartSelLen-1:0];
+
+  logic [NrHartsAligned-1:0] resumereq_aligned, haltreq_aligned,
+                             halted_d_aligned, halted_q_aligned,
+                             halted_aligned, resumereq_wdata_aligned,
+                             resuming_d_aligned, resuming_q_aligned;
+
+  assign resumereq_aligned       = NrHartsAligned'(resumereq_i);
+  assign haltreq_aligned         = NrHartsAligned'(haltreq_i);
+  assign resumereq_wdata_aligned = NrHartsAligned'(resumereq_i);
+
+  assign halted_q_aligned        = NrHartsAligned'(halted_q);
+  assign halted_d                = NrHarts'(halted_d_aligned);
+  assign resuming_q_aligned      = NrHartsAligned'(resuming_q);
+  assign resuming_d              = NrHarts'(resuming_d_aligned);
+
   // distinguish whether we need to forward data from the ROM or the FSM
   // latch the address for this
   logic fwd_rom_d, fwd_rom_q;
@@ -100,7 +118,6 @@ module dm_mem #(
 
   // Abstract Command Access Register
   assign ac_ar       = dm::ac_ar_cmd_t'(cmd_i.control);
-  assign hart_sel    = wdata_i[HartSelLen-1:0];
   assign debug_req_o = haltreq_i;
   assign halted_o    = halted_q;
   assign resuming_o  = resuming_q;
@@ -123,7 +140,7 @@ module dm_mem #(
     case (state_q)
       Idle: begin
         cmdbusy_o = 1'b0;
-        if (cmd_valid_i && halted_q[hartsel_i]) begin
+        if (cmd_valid_i && halted_q_aligned[hartsel]) begin
           // give the go signal
           state_d = Go;
         end else if (cmd_valid_i) begin
@@ -133,8 +150,8 @@ module dm_mem #(
         end
         // CSRs want to resume, the request is ignored when the hart is
         // requested to halt or it didn't clear the resuming_q bit before
-        if (resumereq_i[hartsel_i] && !resuming_q[hartsel_i] &&
-             !haltreq_i[hartsel_i] &&    halted_q[hartsel_i]) begin
+        if (resumereq_aligned[hartsel] && !resuming_q_aligned[hartsel] &&
+            !haltreq_aligned[hartsel] && halted_q_aligned[hartsel]) begin
           state_d = Resume;
         end
       end
@@ -145,14 +162,14 @@ module dm_mem #(
         go        = 1'b1;
         // the thread is now executing the command, track its state
         if (going) begin
-          state_d = CmdExecuting;
+            state_d = CmdExecuting;
         end
       end
 
       Resume: begin
         cmdbusy_o = 1'b1;
         resume = 1'b1;
-        if (resuming_o[hartsel_i]) begin
+        if (resuming_q_aligned[hartsel]) begin
           state_d = Idle;
         end
       end
@@ -161,7 +178,7 @@ module dm_mem #(
         cmdbusy_o = 1'b1;
         go        = 1'b0;
         // wait until the hart has halted again
-        if (halted[hartsel_i]) begin
+        if (halted_aligned[hartsel]) begin
           state_d = Idle;
         end
       end
@@ -191,22 +208,26 @@ module dm_mem #(
   end
 
   // read/write logic
+  logic [63:0] data_bits;
+  logic [7:0][7:0] rdata;
   always_comb begin : p_rw_logic
-    automatic logic [63:0] data_bits;
 
-    halted_d     = halted_q;
-    resuming_d   = resuming_q;
-    rdata_d      = rdata_q;
+    halted_d_aligned   = NrHartsAligned'(halted_q);
+    resuming_d_aligned = NrHartsAligned'(resuming_q);
+    rdata_d        = rdata_q;
     // convert the data in bits representation
-    data_bits    = data_i;
+    data_bits      = data_i;
+    rdata          = '0;
+
     // write data in csr register
-    data_valid_o = 1'b0;
-    exception    = 1'b0;
-    halted       = '0;
-    going        = 1'b0;
+    data_valid_o   = 1'b0;
+    exception      = 1'b0;
+    halted_aligned     = '0;
+    going          = 1'b0;
+
     // The resume ack signal is lowered when the resume request is deasserted
     if (clear_resumeack_i) begin
-      resuming_d[hartsel_i] = 1'b0;
+      resuming_d_aligned[hartsel] = 1'b0;
     end
     // we've got a new request
     if (req_i) begin
@@ -214,17 +235,17 @@ module dm_mem #(
       if (we_i) begin
         unique case (addr_i[DbgAddressBits-1:0]) inside
           HaltedAddr: begin
-            halted[hart_sel] = 1'b1;
-            halted_d[hart_sel] = 1'b1;
+            halted_aligned[wdata_hartsel] = 1'b1;
+            halted_d_aligned[wdata_hartsel] = 1'b1;
           end
           GoingAddr: begin
             going = 1'b1;
           end
           ResumingAddr: begin
             // clear the halted flag as the hart resumed execution
-            halted_d[hart_sel] = 1'b0;
+            halted_d_aligned[wdata_hartsel] = 1'b0;
             // set the resuming flag which needs to be cleared by the debugger
-            resuming_d[hart_sel] = 1'b1;
+            resuming_d_aligned[wdata_hartsel] = 1'b1;
           end
           // an exception occurred during execution
           ExceptionAddr: exception = 1'b1;
@@ -246,7 +267,7 @@ module dm_mem #(
           // variable ROM content
           WhereToAddr: begin
             // variable jump to abstract cmd, program_buffer or resume
-            if (resumereq_i[hart_sel]) begin
+            if (resumereq_wdata_aligned[wdata_hartsel]) begin
               rdata_d = {32'b0, dm::jal('0, dm::ResumeAddress[11:0]-WhereToAddr)};
             end
 
@@ -266,30 +287,30 @@ module dm_mem #(
 
           [DataBaseAddr:DataEndAddr]: begin
             rdata_d = {
-                      data_i[(addr_i[DbgAddressBits-1:3] - DataBaseAddr[DbgAddressBits-1:3] + 1)],
-                      data_i[(addr_i[DbgAddressBits-1:3] - DataBaseAddr[DbgAddressBits-1:3])]
+                      data_i[$clog2(dm::ProgBufSize)'(addr_i[DbgAddressBits-1:3] -
+                          DataBaseAddr[DbgAddressBits-1:3] + 1)],
+                      data_i[$clog2(dm::ProgBufSize)'(addr_i[DbgAddressBits-1:3] -
+                          DataBaseAddr[DbgAddressBits-1:3])]
                       };
           end
 
           [ProgBufBaseAddr:ProgBufEndAddr]: begin
-            rdata_d = progbuf[(addr_i[DbgAddressBits-1:3] -
+            rdata_d = progbuf[$clog2(dm::ProgBufSize)'(addr_i[DbgAddressBits-1:3] -
                           ProgBufBaseAddr[DbgAddressBits-1:3])];
           end
 
           // two slots for abstract command
           [AbstractCmdBaseAddr:AbstractCmdEndAddr]: begin
             // return the correct address index
-            rdata_d = abstract_cmd[(addr_i[DbgAddressBits-1:3] -
+            rdata_d = abstract_cmd[3'(addr_i[DbgAddressBits-1:3] -
                            AbstractCmdBaseAddr[DbgAddressBits-1:3])];
           end
           // harts are polling for flags here
           [FlagsBaseAddr:FlagsEndAddr]: begin
-            automatic logic [7:0][7:0] rdata;
-            rdata = '0;
             // release the corresponding hart
             if (({addr_i[DbgAddressBits-1:3], 3'b0} - FlagsBaseAddr[DbgAddressBits-1:0]) ==
-                {hartsel_i[DbgAddressBits-1:3], 3'b0}) begin
-              rdata[hartsel_i[2:0]] = {6'b0, resume, go};
+              (DbgAddressBits'(hartsel) & {{(DbgAddressBits-3){1'b1}}, 3'b0})) begin
+              rdata[DbgAddressBits'(hartsel) & 3'b111] = {6'b0, resume, go};
             end
             rdata_d = rdata;
           end
@@ -317,6 +338,7 @@ module dm_mem #(
     abstract_cmd[3][63:32] = dm::nop();
     abstract_cmd[4][31:0]  = dm::csrr(dm::CSR_DSCRATCH1, 5'd10);
     abstract_cmd[4][63:32] = dm::ebreak();
+    abstract_cmd[7:5]      = '0;
 
     // this depends on the command being executed
     unique case (cmd_i.cmdtype)
@@ -370,8 +392,8 @@ module dm_mem #(
           abstract_cmd[0][31:0]  = dm::csrw(dm::CSR_DSCRATCH1, 5'd10);
           // this range is reserved
           if (ac_ar.regno[15:14] != '0) begin
-            abstract_cmd[0][31:0] = dm::ebreak(); // we leave asap
-            unsupported_command = 1'b1;
+              abstract_cmd[0][31:0] = dm::ebreak(); // we leave asap
+              unsupported_command = 1'b1;
           // A0 access needs to be handled separately, as we use A0 to load
           // the DM address offset need to access DSCRATCH1 in this case
           end else if (ac_ar.regno[12] && (!ac_ar.regno[5]) &&
@@ -413,6 +435,7 @@ module dm_mem #(
           abstract_cmd[0][31:0] = dm::ebreak(); // we leave asap
           unsupported_command = 1'b1;
         end
+
         // Check whether we need to execute the program buffer. When we
         // get an unsupported command we really should abort instead of
         // still trying to execute the program buffer, makes it easier
diff --git a/src/dmi_jtag.sv b/src/dmi_jtag.sv
index 5642dc1..60e67f4 100644
--- a/src/dmi_jtag.sv
+++ b/src/dmi_jtag.sv
@@ -195,7 +195,7 @@ module dmi_jtag #(
     end
   end
 
-  always_ff @(posedge tck_i or negedge trst_ni) begin
+  always_ff @(posedge tck_i or negedge trst_ni) begin : p_regs
     if (!trst_ni) begin
       dr_q      <= '0;
       state_q   <= Idle;
@@ -224,7 +224,7 @@ module dmi_jtag #(
     .td_i,
     .td_o,
     .tdo_oe_o,
-    .testmode_i         ( testmode_i       ),
+    .testmode_i,
     .test_logic_reset_o ( test_logic_reset ),
     .shift_dr_o         ( shift_dr         ),
     .update_dr_o        ( update_dr        ),
diff --git a/src/dmi_jtag_tap.sv b/src/dmi_jtag_tap.sv
index c39fc43..a6fd191 100644
--- a/src/dmi_jtag_tap.sv
+++ b/src/dmi_jtag_tap.sv
@@ -84,9 +84,12 @@ module dmi_jtag_tap #(
   // ----------------
   // IR logic
   // ----------------
-  logic [IrLength-1:0]  jtag_ir_shift_d, jtag_ir_shift_q; // shift register
-  ir_reg_e              jtag_ir_d, jtag_ir_q; // IR register -> this gets captured from shift register upon update_ir
-  logic capture_ir, shift_ir, pause_ir, update_ir;
+
+  // shift register
+  logic [IrLength-1:0]  jtag_ir_shift_d, jtag_ir_shift_q;
+  // IR register -> this gets captured from shift register upon update_ir
+  ir_reg_e              jtag_ir_d, jtag_ir_q;
+  logic capture_ir, shift_ir, update_ir; // pause_ir
 
   always_comb begin : p_jtag
     jtag_ir_shift_d = jtag_ir_shift_q;
@@ -138,7 +141,7 @@ module dmi_jtag_tap #(
 
   assign dmi_reset_o = dtmcs_q.dmireset;
 
-  always_comb begin : p_tap_dr
+  always_comb begin
     idcode_d = idcode_q;
     bypass_d = bypass_q;
     dtmcs_d  = dtmcs_q;
@@ -152,7 +155,7 @@ module dmi_jtag_tap #(
                       dmihardreset : 1'b0,
                       dmireset     : 1'b0,
                       zero0        : '0,
-                      idle         : 'd1,         // 1: Enter Run-Test/Idle and leave it immediately
+                      idle         : 'd1, // 1: Enter Run-Test/Idle and leave it immediately
                       dmistat      : dmi_error_i, // 0: No error, 1: Op failed, 2: too fast
                       abits        : 'd7, // The size of address in dmi
                       version      : 'd1  // Version described in spec version 0.13 (and later?)
@@ -161,9 +164,9 @@ module dmi_jtag_tap #(
     end
 
     if (shift_dr_o) begin
-      if (idcode_select)  idcode_d = {td_i, idcode_q[31:1]};
+      if (idcode_select)  idcode_d = {td_i, 31'(idcode_q >> 1)};
       if (bypass_select)  bypass_d = td_i;
-      if (dtmcs_select_o) dtmcs_d  = {td_i, dtmcs_q[31:1]};
+      if (dtmcs_select_o) dtmcs_d  = {td_i, 31'(dtmcs_q >> 1)};
     end
 
     if (test_logic_reset_o) begin
@@ -203,7 +206,7 @@ module dmi_jtag_tap #(
     end else begin
       case (jtag_ir_q)    // synthesis parallel_case
         IDCODE:         tdo_mux = idcode_q[0];     // Reading ID code
-        DTMCSR:         tdo_mux = dtmcs_q[0];
+        DTMCSR:         tdo_mux = dtmcs_q.version[0];
         DMIACCESS:      tdo_mux = dmi_tdo_i;       // Read from DMI TDO
         default:        tdo_mux = bypass_q;      // BYPASS instruction
       endcase
@@ -242,6 +245,7 @@ module dmi_jtag_tap #(
   // ----------------
   // Determination of next state; purely combinatorial
   always_comb begin : p_tap_fsm
+
     test_logic_reset_o = 1'b0;
 
     capture_dr_o       = 1'b0;
@@ -250,9 +254,11 @@ module dmi_jtag_tap #(
 
     capture_ir         = 1'b0;
     shift_ir           = 1'b0;
-    pause_ir           = 1'b0;
+    // pause_ir           = 1'b0; unused
     update_ir          = 1'b0;
 
+    // note that tap_state_d does not have a default assignment since the
+    // case statement is full
     case (tap_state_q)
       TestLogicReset: begin
         tap_state_d = (tms_i) ? TestLogicReset : RunTestIdle;
@@ -307,10 +313,10 @@ module dmi_jtag_tap #(
         tap_state_d = (tms_i) ? Exit1Ir : ShiftIr;
       end
       Exit1Ir: begin
-            tap_state_d = (tms_i) ? UpdateIr : PauseIr;
+        tap_state_d = (tms_i) ? UpdateIr : PauseIr;
       end
       PauseIr: begin
-        pause_ir = 1'b1;
+        // pause_ir = 1'b1; // unused
         tap_state_d = (tms_i) ? Exit2Ir : PauseIr;
       end
       Exit2Ir: begin
@@ -324,7 +330,7 @@ module dmi_jtag_tap #(
         update_ir = 1'b1;
         tap_state_d = (tms_i) ? SelectDrScan : RunTestIdle;
       end
-      default: tap_state_d = TestLogicReset;  // can't actually happen
+      default: ; // can't actually happen
     endcase
   end
 
-- 
2.17.1

