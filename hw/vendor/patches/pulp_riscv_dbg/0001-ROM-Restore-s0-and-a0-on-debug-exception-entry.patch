From 4897a1bc9d9e0ac06072d6025b6cdca40332c5a7 Mon Sep 17 00:00:00 2001
From: Tom Roberts <tomroberts@lowrisc.org>
Date: Wed, 27 Nov 2019 13:13:34 +0000
Subject: [PATCH 1/4] [ROM] Restore s0 and a0 on debug exception entry

As noted in lowRISC/opentitan#1035 an exception occuring during program
buffer execution can corrupt the values of core registers (since they might
be used by the program, but not restored due to the exception). This change
forces the boot rom to restore its two scratch registers on exception entry.

This allows the DM to recover from exceptions corrupting s0 or a0, but not
other registers. OpenOCD currently only uses s0 in its program buffer routines.

Signed-off-by: Tom Roberts <tomroberts@lowrisc.org>
---
 debug_rom/debug_rom.S  | 11 +++++++++--
 debug_rom/debug_rom.h  |  2 +-
 debug_rom/debug_rom.sv |  6 +++---
 debug_rom/gen_rom.py   |  2 +-
 4 files changed, 14 insertions(+), 7 deletions(-)

diff --git a/debug_rom/debug_rom.S b/debug_rom/debug_rom.S
index 3a99e6b..089e043 100644
--- a/debug_rom/debug_rom.S
+++ b/debug_rom/debug_rom.S
@@ -60,11 +60,18 @@ entry_loop:
         jal  zero, entry_loop
 
 _exception:
-        csrw CSR_DSCRATCH1, a0       // Save a0 to allow loading arbitrary DM offsets
+        // We can only get here due to an exception while in debug mode. Hence,
+        // we do not need to save a0 to a scratch register as it has already
+        // been saved on debug entry.
         auipc a0, 0                  // Get POC
         srli a0, a0, 12              // And throw away lower 12 bits to get the DM base
         slli a0, a0, 12
         sw   zero, EXCEPTION(a0)     // Let debug module know you got an exception.
+        // It is safe to always restore the scratch registers here as they must
+        // have been saved on debug entry. Restoring them here avoids issues
+        // with registers being overwritten by exceptions occuring during
+        // program buffer execution.
+        csrr s0, CSR_DSCRATCH0       // Restore s0 here
         csrr a0, CSR_DSCRATCH1       // Restore a0 here
         ebreak
 
@@ -90,4 +97,4 @@ whereto:
         //                Debug Module state machine tracks what is 'desired'.
         //                We don't need/want to use jalr here because all of the
         //                Variable ROM contents are set by
-        //                Debug Module before setting the OK_GO byte.
\ No newline at end of file
+        //                Debug Module before setting the OK_GO byte.
diff --git a/debug_rom/debug_rom.h b/debug_rom/debug_rom.h
index 2627a5d..ae5b42b 100644
--- a/debug_rom/debug_rom.h
+++ b/debug_rom/debug_rom.h
@@ -24,11 +24,11 @@ uint32_t reset_vec[reset_vec_size] = {
     0x00247413,
     0xfa041ce3,
     0xfd5ff06f,
-    0x7b351073,
     0x00000517,
     0x00c55513,
     0x00c51513,
     0x10052623,
+    0x7b202473,
     0x7b302573,
     0x00100073,
     0x10052223,
diff --git a/debug_rom/debug_rom.sv b/debug_rom/debug_rom.sv
index 2723816..fdf2fe8 100644
--- a/debug_rom/debug_rom.sv
+++ b/debug_rom/debug_rom.sv
@@ -30,9 +30,9 @@ module debug_rom (
     64'ha85ff06f_7b302573,
     64'h7b202473_10052223,
     64'h00100073_7b302573,
-    64'h10052623_00c51513,
-    64'h00c55513_00000517,
-    64'h7b351073_fd5ff06f,
+    64'h7b202473_10052623,
+    64'h00c51513_00c55513,
+    64'h00000517_fd5ff06f,
     64'hfa041ce3_00247413,
     64'h40044403_00a40433,
     64'hf1402473_02041c63,
diff --git a/debug_rom/gen_rom.py b/debug_rom/gen_rom.py
index 338abbb..b3ce019 100755
--- a/debug_rom/gen_rom.py
+++ b/debug_rom/gen_rom.py
@@ -66,7 +66,7 @@ $content
   // the speculative fetch stage of the core
   always_comb begin : p_outmux
     rdata_o = '0;
-    if (addr_q < $clog2(RomSize)'(RomSize)) begin
+    if (addr_q < $$clog2(RomSize)'(RomSize)) begin
         rdata_o = mem[addr_q];
     end
   end
-- 
2.24.1.735.g03f4e72817-goog

