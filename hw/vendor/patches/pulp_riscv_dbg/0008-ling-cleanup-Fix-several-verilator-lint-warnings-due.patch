From dcad45beb85df7b1154d68a7e10dc9e7f88249fa Mon Sep 17 00:00:00 2001
From: Michael Schaffner <msf@google.com>
Date: Fri, 18 Oct 2019 11:03:19 -0700
Subject: [PATCH 08/11] [ling/cleanup] Fix several verilator lint warnings due
 to sizing

---
 debug_rom/debug_rom.sv |  4 ++--
 debug_rom/gen_rom.py   |  4 ++--
 src/dm_csrs.sv         | 39 ++++++++++++++++++++++-----------------
 src/dm_mem.sv          | 16 ++++++++--------
 src/dm_sba.sv          | 24 ++++++++++++------------
 5 files changed, 46 insertions(+), 41 deletions(-)

diff --git a/debug_rom/debug_rom.sv b/debug_rom/debug_rom.sv
index d8e8913..2723816 100644
--- a/debug_rom/debug_rom.sv
+++ b/debug_rom/debug_rom.sv
@@ -21,7 +21,7 @@ module debug_rom (
   output logic [63:0]  rdata_o
 );
 
-  localparam int RomSize = 19;
+  localparam int unsigned RomSize = 19;
 
   const logic [RomSize-1:0][63:0] mem = {
     64'h00000000_7b200073,
@@ -57,7 +57,7 @@ module debug_rom (
   // the speculative fetch stage of the core
   always_comb begin : p_outmux
     rdata_o = '0;
-    if (addr_q < RomSize) begin
+    if (addr_q < $clog2(RomSize)'(RomSize)) begin
         rdata_o = mem[addr_q];
     end
   end
diff --git a/debug_rom/gen_rom.py b/debug_rom/gen_rom.py
index e701c52..338abbb 100755
--- a/debug_rom/gen_rom.py
+++ b/debug_rom/gen_rom.py
@@ -48,7 +48,7 @@ module $filename (
   output logic [63:0]  rdata_o
 );
 
-  localparam int RomSize = $size;
+  localparam int unsigned RomSize = $size;
 
   const logic [RomSize-1:0][63:0] mem = {
 $content
@@ -66,7 +66,7 @@ $content
   // the speculative fetch stage of the core
   always_comb begin : p_outmux
     rdata_o = '0;
-    if (addr_q < RomSize) begin
+    if (addr_q < $clog2(RomSize)'(RomSize)) begin
         rdata_o = mem[addr_q];
     end
   end
diff --git a/src/dm_csrs.sv b/src/dm_csrs.sv
index cac7509..807bb19 100644
--- a/src/dm_csrs.sv
+++ b/src/dm_csrs.sv
@@ -111,7 +111,7 @@ module dm_csrs #(
     hartsel_idx0        = hartsel_o[19:5];
     halted[NrHarts-1:0] = halted_i;
     halted_reshaped0    = halted;
-    if (hartsel_idx0 < (NrHarts-1)/2**5+1) begin
+    if (hartsel_idx0 < 15'((NrHarts-1)/2**5+1)) begin
       haltsum0 = halted_reshaped0[hartsel_idx0];
     end
   end
@@ -128,7 +128,7 @@ module dm_csrs #(
     end
     halted_reshaped1 = halted_flat1;
 
-    if (hartsel_idx1 < (NrHarts/2**10+1)) begin
+    if (hartsel_idx1 < 10'((NrHarts/2**10+1))) begin
       haltsum1 = halted_reshaped1[hartsel_idx1];
     end
   end
@@ -145,7 +145,7 @@ module dm_csrs #(
     end
     halted_reshaped2 = halted_flat2;
 
-    if (hartsel_idx2 < (NrHarts/2**15+1)) begin
+    if (hartsel_idx2 < 5'((NrHarts/2**15+1))) begin
       haltsum2         = halted_reshaped2[hartsel_idx2];
     end
   end
@@ -214,6 +214,7 @@ module dm_csrs #(
   dm::sbcs_t sbcs;
   dm::dmcontrol_t dmcontrol;
   dm::abstractcs_t a_abstractcs;
+  logic [4:0] autoexecdata_idx;
   always_comb begin : csr_read_write
     // --------------------
     // Static Values (R/O)
@@ -237,8 +238,8 @@ module dm_csrs #(
 
     // as soon as we are out of the legal Hart region tell the debugger
     // that there are only non-existent harts
-    dmstatus.allnonexistent = logic'(hartsel_o > (NrHarts - 1));
-    dmstatus.anynonexistent = logic'(hartsel_o > (NrHarts - 1));
+    dmstatus.allnonexistent = logic'(32'(hartsel_o) > (NrHarts - 1));
+    dmstatus.anynonexistent = logic'(32'(hartsel_o) > (NrHarts - 1));
 
     // We are not allowed to be in multiple states at once. This is a to
     // make the running/halted and unavailable states exclusive.
@@ -282,6 +283,8 @@ module dm_csrs #(
     dmcontrol    = '0;
     a_abstractcs = '0;
 
+    autoexecdata_idx    = dmi_req_i.addr[4:0] - 5'(dm::Data0);
+
     // localparam int unsigned DataCountAlign = $clog2(dm::DataCount);
     // reads
     if (dmi_req_ready_o && dmi_req_valid_i && dtm_op == dm::DTM_READ) begin
@@ -289,11 +292,12 @@ module dm_csrs #(
         [(dm::Data0):DataEnd]: begin
           // logic [$clog2(dm::DataCount)-1:0] resp_queue_idx;
           // resp_queue_idx = dmi_req_i.addr[4:0] - int'(dm::Data0);
-          resp_queue_data = data_q[dmi_req_i.addr[4:0] - int'(dm::Data0)];
+          resp_queue_data = data_q[$clog2(dm::DataCount)'(autoexecdata_idx)];
           if (!cmdbusy_i) begin
             // check whether we need to re-execute the command (just give a cmd_valid)
-            cmd_valid_d = abstractauto_q.autoexecdata[dmi_req_i.addr[3:0] -
-                          int'(dm::Data0)];
+            if (autoexecdata_idx < $bits(abstractauto_q.autoexecdata)) begin
+              cmd_valid_d = abstractauto_q.autoexecdata[autoexecdata_idx];
+            end
           end
         end
         dm::DMControl:    resp_queue_data = dmcontrol_q;
@@ -307,8 +311,8 @@ module dm_csrs #(
           resp_queue_data = progbuf_q[dmi_req_i.addr[$clog2(dm::ProgBufSize)-1:0]];
           if (!cmdbusy_i) begin
             // check whether we need to re-execute the command (just give a cmd_valid)
-            // TODO(zarubaf): check if offset is correct: without it this may assign Xes
-            cmd_valid_d = abstractauto_q.autoexecprogbuf[dmi_req_i.addr[3:0]+16];
+            // range of autoexecprogbuf is 31:16
+            cmd_valid_d = abstractauto_q.autoexecprogbuf[{1'b1, dmi_req_i.addr[3:0]}];
           end
         end
         dm::HaltSum0: resp_queue_data = haltsum0;
@@ -363,7 +367,9 @@ module dm_csrs #(
           if (!cmdbusy_i && dm::DataCount > 0) begin
             data_d[dmi_req_i.addr[$clog2(dm::DataCount)-1:0]] = dmi_req_i.data;
             // check whether we need to re-execute the command (just give a cmd_valid)
-            cmd_valid_d = abstractauto_q.autoexecdata[dmi_req_i.addr[3:0] - int'(dm::Data0)];
+            if (autoexecdata_idx < $bits(abstractauto_q.autoexecdata)) begin
+              cmd_valid_d = abstractauto_q.autoexecdata[autoexecdata_idx];
+            end
           end
         end
         dm::DMControl: begin
@@ -418,9 +424,8 @@ module dm_csrs #(
             // check whether we need to re-execute the command (just give a cmd_valid)
             // this should probably throw an error if executed during another command
             // was busy
-            // TODO(zarubaf): check if offset is correct - without it this may
-            // assign Xes
-            cmd_valid_d = abstractauto_q.autoexecprogbuf[dmi_req_i.addr[3:0]+16];
+            // range of autoexecprogbuf is 31:16
+            cmd_valid_d = abstractauto_q.autoexecprogbuf[{1'b1, dmi_req_i.addr[3:0]}];
           end
         end
         dm::SBCS: begin
@@ -518,13 +523,13 @@ module dm_csrs #(
     // static values for dcsr
     sbcs_d.sbversion            = 3'b1;
     sbcs_d.sbbusy               = sbbusy_i;
-    sbcs_d.sbasize              = BusWidth;
+    sbcs_d.sbasize              = $bits(sbcs_d.sbasize)'(BusWidth);
     sbcs_d.sbaccess128          = 1'b0;
     sbcs_d.sbaccess64           = logic'(BusWidth == 32'd64);
     sbcs_d.sbaccess32           = logic'(BusWidth == 32'd32);
     sbcs_d.sbaccess16           = 1'b0;
     sbcs_d.sbaccess8            = 1'b0;
-    sbcs_d.sbaccess             = (BusWidth == 32'd64) ? 2'd3 : 2'd2;
+    sbcs_d.sbaccess             = (BusWidth == 32'd64) ? 3'd3 : 3'd2;
   end
 
   // output multiplexer
@@ -533,7 +538,7 @@ module dm_csrs #(
     // default assignment
     haltreq_o = '0;
     resumereq_o = '0;
-    if (selected_hart < NrHarts) begin
+    if (selected_hart < HartSelLen'(NrHarts)) begin
       haltreq_o[selected_hart]   = dmcontrol_q.haltreq;
       resumereq_o[selected_hart] = dmcontrol_q.resumereq;
     end
diff --git a/src/dm_mem.sv b/src/dm_mem.sv
index c6d4059..5c361fc 100644
--- a/src/dm_mem.sv
+++ b/src/dm_mem.sv
@@ -268,7 +268,7 @@ module dm_mem #(
           WhereToAddr: begin
             // variable jump to abstract cmd, program_buffer or resume
             if (resumereq_wdata_aligned[wdata_hartsel]) begin
-              rdata_d = {32'b0, dm::jal('0, dm::ResumeAddress[11:0]-WhereToAddr)};
+              rdata_d = {32'b0, dm::jal('0, 21'(dm::ResumeAddress[11:0])-21'(WhereToAddr))};
             end
 
             // there is a command active so jump there
@@ -277,10 +277,10 @@ module dm_mem #(
               // keep this statement narrow to not catch invalid commands
               if (cmd_i.cmdtype == dm::AccessRegister &&
                   !ac_ar.transfer && ac_ar.postexec) begin
-                rdata_d = {32'b0, dm::jal('0, ProgBufBaseAddr-WhereToAddr)};
+                rdata_d = {32'b0, dm::jal('0, 21'(ProgBufBaseAddr)-21'(WhereToAddr))};
               // this is a legit abstract cmd -> execute it
               end else begin
-                rdata_d = {32'b0, dm::jal('0, AbstractCmdBaseAddr-WhereToAddr)};
+                rdata_d = {32'b0, dm::jal('0, 21'(AbstractCmdBaseAddr)-21'(WhereToAddr))};
               end
             end
           end
@@ -288,7 +288,7 @@ module dm_mem #(
           [DataBaseAddr:DataEndAddr]: begin
             rdata_d = {
                       data_i[$clog2(dm::ProgBufSize)'(addr_i[DbgAddressBits-1:3] -
-                          DataBaseAddr[DbgAddressBits-1:3] + 1)],
+                          DataBaseAddr[DbgAddressBits-1:3] + 1'b1)],
                       data_i[$clog2(dm::ProgBufSize)'(addr_i[DbgAddressBits-1:3] -
                           DataBaseAddr[DbgAddressBits-1:3])]
                       };
@@ -310,7 +310,7 @@ module dm_mem #(
             // release the corresponding hart
             if (({addr_i[DbgAddressBits-1:3], 3'b0} - FlagsBaseAddr[DbgAddressBits-1:0]) ==
               (DbgAddressBits'(hartsel) & {{(DbgAddressBits-3){1'b1}}, 3'b0})) begin
-              rdata[DbgAddressBits'(hartsel) & 3'b111] = {6'b0, resume, go};
+              rdata[DbgAddressBits'(hartsel) & DbgAddressBits'(3'b111)] = {6'b0, resume, go};
             end
             rdata_d = rdata;
           end
@@ -346,7 +346,7 @@ module dm_mem #(
       // Access Register
       // --------------------
       dm::AccessRegister: begin
-        if (ac_ar.aarsize < MaxAar && ac_ar.transfer && ac_ar.write) begin
+        if (32'(ac_ar.aarsize) < MaxAar && ac_ar.transfer && ac_ar.write) begin
           // store a0 in dscratch1
           abstract_cmd[0][31:0] = dm::csrw(dm::CSR_DSCRATCH1, 5'd10);
           // this range is reserved
@@ -387,7 +387,7 @@ module dm_mem #(
             // restore s0 again from dscratch
             abstract_cmd[3][63:32] = dm::csrr(dm::CSR_DSCRATCH0, 5'd8);
           end
-        end else if (ac_ar.aarsize < MaxAar && ac_ar.transfer && !ac_ar.write) begin
+        end else if (32'(ac_ar.aarsize) < MaxAar && ac_ar.transfer && !ac_ar.write) begin
           // store a0 in dscratch1
           abstract_cmd[0][31:0]  = dm::csrw(dm::CSR_DSCRATCH1, 5'd10);
           // this range is reserved
@@ -428,7 +428,7 @@ module dm_mem #(
             // restore s0 again from dscratch
             abstract_cmd[3][63:32] = dm::csrr(dm::CSR_DSCRATCH0, 5'd8);
           end
-        end else if (ac_ar.aarsize >= MaxAar || ac_ar.aarpostincrement == 1'b1) begin
+        end else if (32'(ac_ar.aarsize) >= MaxAar || ac_ar.aarpostincrement == 1'b1) begin
           // this should happend when e.g. ac_ar.aarsize >= MaxAar
           // Openocd will try to do an access with aarsize=64 bits
           // first before falling back to 32 bits.
diff --git a/src/dm_sba.sv b/src/dm_sba.sv
index fa08d3f..43a6dad 100644
--- a/src/dm_sba.sv
+++ b/src/dm_sba.sv
@@ -55,11 +55,12 @@ module dm_sba #(
   typedef enum logic [2:0] { Idle, Read, Write, WaitRead, WaitWrite } state_e;
   state_e state_d, state_q;
 
-  logic [BusWidth-1:0]   address;
-  logic                  req;
-  logic                  gnt;
-  logic                  we;
-  logic [BusWidth/8-1:0] be;
+  logic [BusWidth-1:0]           address;
+  logic                          req;
+  logic                          gnt;
+  logic                          we;
+  logic [BusWidth/8-1:0]         be;
+  logic [$clog2(BusWidth/8)-1:0] be_idx;
 
   assign sbbusy_o = logic'(state_q != Idle);
 
@@ -68,6 +69,7 @@ module dm_sba #(
     address = sbaddress_i;
     we      = 1'b0;
     be      = '0;
+    be_idx  = sbaddress_i[$clog2(BusWidth/8)-1:0];
 
     sberror_o       = '0;
     sberror_valid_o = 1'b0;
@@ -96,15 +98,13 @@ module dm_sba #(
         // generate byte enable mask
         case (sbaccess_i)
           3'b000: begin
-            if (BusWidth == 32'd64) be[ sbaddress_i[2:0]] = '1;
-            else                    be[ sbaddress_i[1:0]] = '1;
+            be[be_idx] = '1;
           end
           3'b001: begin
-            if (BusWidth == 32'd64) be[{sbaddress_i[2:1], 1'b0} +: 2] = '1;
-            else                    be[{sbaddress_i[1:1], 1'b0} +: 2] = '1;
+            be[int'({be_idx[$high(be_idx):1], 1'b0}) +: 2] = '1;
           end
           3'b010: begin
-            if (BusWidth == 32'd64) be[{sbaddress_i[2:2], 2'b0} +: 4] = '1;
+            if (BusWidth == 32'd64) be[int'({be_idx[$high(be_idx)], 2'b0}) +: 4] = '1;
             else                    be = '1;
           end
           3'b011: be = '1;
@@ -117,7 +117,7 @@ module dm_sba #(
         if (sbdata_valid_o) begin
           state_d = Idle;
           // auto-increment address
-          if (sbautoincrement_i) sbaddress_o = sbaddress_i + (1'b1 << sbaccess_i);
+          if (sbautoincrement_i) sbaddress_o = sbaddress_i + (32'b1 << sbaccess_i);
         end
       end
 
@@ -125,7 +125,7 @@ module dm_sba #(
         if (sbdata_valid_o) begin
           state_d = Idle;
           // auto-increment address
-          if (sbautoincrement_i) sbaddress_o = sbaddress_i + (1'b1 << sbaccess_i);
+          if (sbautoincrement_i) sbaddress_o = sbaddress_i + (32'b1 << sbaccess_i);
         end
       end
 
-- 
2.17.1

