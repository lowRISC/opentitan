From f6b2619166ce631d1208fe951249e4e7b341e2fb Mon Sep 17 00:00:00 2001
From: Michael Schaffner <msf@opentitan.org>
Date: Tue, 21 Nov 2023 19:40:16 -0800
Subject: [PATCH 5/5] [dm_csrs] Implement nextdm register

Signed-off-by: Michael Schaffner <msf@opentitan.org>

diff --git a/src/dm_csrs.sv b/src/dm_csrs.sv
index b899b17..f3aa721 100644
--- a/src/dm_csrs.sv
+++ b/src/dm_csrs.sv
@@ -18,7 +18,8 @@
 module dm_csrs #(
   parameter int unsigned        NrHarts          = 1,
   parameter int unsigned        BusWidth         = 32,
-  parameter logic [NrHarts-1:0] SelectableHarts  = {NrHarts{1'b1}}
+  parameter logic [NrHarts-1:0] SelectableHarts  = {NrHarts{1'b1}},
+  parameter logic [31:0]        NextDmAddr       = '0
 ) (
   input  logic                              clk_i,           // Clock
   input  logic                              rst_ni,          // Asynchronous reset active low
@@ -307,8 +308,8 @@ module dm_csrs #(
         dm::Hartinfo:     resp_queue_inp.data = hartinfo_aligned[selected_hart];
         dm::AbstractCS:   resp_queue_inp.data = abstractcs;
         dm::AbstractAuto: resp_queue_inp.data = abstractauto_q;
-        // command is read-only
-        dm::Command:    resp_queue_inp.data = '0;
+        dm::Command:      resp_queue_inp.data = '0;
+        dm::NextDM:       resp_queue_inp.data = NextDmAddr;
         [(dm::ProgBuf0):ProgBufEnd]: begin
           resp_queue_inp.data = progbuf_q[dmi_req_i.addr[$clog2(dm::ProgBufSize)-1:0]];
           if (!cmdbusy_i) begin
@@ -419,6 +420,7 @@ module dm_csrs #(
             end
           end
         end
+        dm::NextDM:; // nextdm is R/O
         dm::AbstractAuto: begin
           // this field can only be written legally when there is no command executing
           if (!cmdbusy_i) begin
diff --git a/src/dm_top.sv b/src/dm_top.sv
index 6188b28..a5bde9f 100644
--- a/src/dm_top.sv
+++ b/src/dm_top.sv
@@ -25,7 +25,12 @@ module dm_top #(
   // that don't use hart numbers in a contiguous fashion.
   parameter logic [NrHarts-1:0] SelectableHarts  = {NrHarts{1'b1}},
   // toggle new behavior to drive master_be_o during a read
-  parameter bit                 ReadByteEnable   = 1
+  parameter bit                 ReadByteEnable   = 1,
+  // Subsequent debug modules can be chained by setting the nextdm register value to the offset of
+  // the next debug module. The RISC-V debug spec mandates that the first debug module located at
+  // 0x0, and that the last debug module in the chain sets the nextdm register to 0x0. The nextdm
+  // register is a word address and not a byte address.
+  parameter logic [31:0]        NextDmAddr       = '0
 ) (
   input  logic                  clk_i,       // clock
   // asynchronous reset active low, connect PoR here, not the system reset
@@ -111,7 +116,8 @@ module dm_top #(
   dm_csrs #(
     .NrHarts(NrHarts),
     .BusWidth(BusWidth),
-    .SelectableHarts(SelectableHarts)
+    .SelectableHarts(SelectableHarts),
+    .NextDmAddr(NextDmAddr)
   ) i_dm_csrs (
     .clk_i,
     .rst_ni,
