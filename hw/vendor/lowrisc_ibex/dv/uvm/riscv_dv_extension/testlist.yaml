# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

- test: riscv_arithmetic_basic_test
  description: >
    Arithmetic instruction test, no load/store/branch instructions
  gen_opts: >
    +instr_cnt=10000
    +num_of_sub_program=0
    +no_fence=1
    +no_data_page=1'b1
    +no_branch_jump=1'b1
    +boot_mode=m
  iterations: 10
  gen_test: riscv_instr_base_test
  rtl_test: core_ibex_base_test

- test: riscv_machine_mode_rand_test
  description: >
    Machine mode random instruction test
  iterations: 10
  gen_test: riscv_instr_base_test
  gen_opts: >
    +instr_cnt=10000
    +num_of_sub_program=5
    +boot_mode=m
  rtl_test: core_ibex_base_test

- test: riscv_rand_instr_test
  description: >
    Random instruction stress test
  iterations: 10
  gen_test: riscv_instr_base_test
  gen_opts: >
    +instr_cnt=10000
    +num_of_sub_program=5
    +directed_instr_0=riscv_load_store_rand_instr_stream,4
    +directed_instr_1=riscv_loop_instr,4
    +directed_instr_2=riscv_hazard_instr_stream,4
    +directed_instr_3=riscv_load_store_hazard_instr_stream,4
    +directed_instr_4=riscv_cache_line_stress_instr_stream,4
    +directed_instr_5=riscv_multi_page_load_store_instr_stream,4
  rtl_test: core_ibex_base_test

- test: riscv_rand_jump_test
  description: >
    Jump among large number of sub-programs, stress testing iTLB operations.
  iterations: 10
  gen_test: riscv_instr_base_test
  gen_opts: >
    +instr_cnt=15000
    +num_of_sub_program=20
    +directed_instr_0=riscv_load_store_rand_instr_stream,8
  rtl_test: core_ibex_base_test

- test: riscv_mmu_stress_test
  description: >
    Test with different patterns of load/store instructions, stress test MMU
    operations.
  iterations: 10
  gen_test: riscv_instr_base_test
  gen_opts: >
    +instr_cnt=10000
    +num_of_sub_program=5
    +directed_instr_0=riscv_load_store_rand_instr_stream,40
    +directed_instr_1=riscv_load_store_hazard_instr_stream,40
    +directed_instr_2=riscv_cache_line_stress_instr_stream,40
    +directed_instr_3=riscv_multi_page_load_store_instr_stream,40
  rtl_test: core_ibex_base_test

- test: riscv_illegal_instr_test
  description: >
    Illegal instruction test, verify the processor can detect illegal
    instruction and handle corresponding exception properly. An exception
    handling routine is designed to resume execution after illegal
    instruction exception.
  iterations: 10
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +enable_illegal_instruction=1
  rtl_test: core_ibex_base_test

- test: riscv_hint_instr_test
  description: >
    HINT instruction test, verify the processor can detect HINT instruction
    treat it as NOP. No illegal instruction exception is expected
  iterations: 10
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +enable_hint_instruction=1
  rtl_test: core_ibex_base_test

- test: riscv_ebreak_test
  description: >
    Random instruction test with ebreak instruction enabled. Debug mode is not
    enabled for this test, processor should raise ebreak exception.
  iterations: 10
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +instr_cnt=6000
    +no_ebreak=0
  rtl_test: core_ibex_base_test

- test: riscv_debug_basic_test
  description: >
    Randomly assert debug_req_i, random instruction sequence in debug_rom section
  iterations: 5
  gen_test: riscv_instr_base_test
  gen_opts: >
    +require_signature_addr=1
    +gen_debug_section=1
    +no_ebreak=1
    +no_branch_jump=1
    +instr_cnt=6000
    +no_csr_instr=1
    +no_fence=1
    +num_of_sub_program=0
  rtl_test: core_ibex_debug_intr_basic_test
  sim_opts: >
    +require_signature_addr=1
    +max_interval=1000
    +enable_debug_stress_seq=1
  compare_opts:
    compare_final_value_only: 1
    verbose: 1

- test: riscv_debug_stress_test
  description: >
    Randomly assert debug_req_i more often, debug_rom is empty, with only a dret instruction
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +require_signature_addr=1
    +no_ebreak=1
    +instr_cnt=6000
    +no_csr_instr=1
    +no_fence=1
  rtl_test: core_ibex_debug_intr_basic_test
  iterations: 5
  sim_opts: >
    +max_interval=250
    +enable_debug_stress_seq=1
    +require_signature_addr=1
  compare_opts:
    verbose: 1

- test: riscv_debug_branch_jump_test
  description: >
    Randomly assert debug_req_i, insert branch instructions and subprograms into debug_rom to make core
    jump around within the debug_rom
  iterations: 5
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +require_signature_addr=1
    +gen_debug_section=1
    +no_ebreak=1
    +instr_cnt=6000
    +no_csr_instr=1
    +no_fence=1
    +num_of_sub_program=0
    +num_debug_sub_program=3
  rtl_test: core_ibex_debug_intr_basic_test
  sim_opts: >
    +require_signature_addr=1
    +max_interval=2000
    +enable_debug_stress_seq=1
  compare_opts:
    compare_final_value_only: 1
    verbose: 1

- test: riscv_debug_wfi_test
  description: >
    Assert debug_req while core is in WFI sleep state, should jump to debug mode
  iterations: 5
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +require_signature_addr=1
    +gen_debug_section=1
    +no_ebreak=1
    +instr_cnt=3000
    +no_csr_instr=1
    +no_fence=1
    +no_wfi=0
  rtl_test: core_ibex_debug_wfi_test
  sim_opts: >
    +require_signature_addr=1
    +enable_debug_single_seq=1
  compare_opts:
    compare_final_value_only: 1
    verbose: 1

- test: riscv_dret_test
  description: >
    Dret instructions will be inserted into M-mode code, ibex should treat these
    like illegal instructions.
  iterations: 5
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +require_signature_addr=1
    +no_dret=0
    +instr_cnt=6000
  rtl_test: core_ibex_dret_test
  sim_opts: >
    +require_signature_addr=1

- test: riscv_ebreak_test
  description: >
    Ebreak instructions will be inserted into the M mode code, ibex should handle them normally.
  iterations: 5
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +no_ebreak=0
    +instr_cnt=6000
  rtl_test: core_ibex_base_test

- test: riscv_debug_ebreak_test
  description: >
    A directed ebreak sequence will be inserted into the debug rom, upon encountering it,
    ibex should jump back to the beginning of debug mode. The sequence is designed to avoid an
    infinite loop.
  iterations: 5
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +require_signature_addr=1
    +gen_debug_section=1
    +enable_ebreak_in_debug_rom=1
    +no_csr_instr=1
    +no_fence=1
    +no_wfi=1
    +no_ebreak=0
    +instr_cnt=6000
  rtl_test: core_ibex_debug_ebreak_test
  sim_opts: >
    +require_signature_addr=1
    +enable_debug_single_seq=1
  compare_opts:
    compare_final_value_only: 1

- test: riscv_debug_ebreakm_test
  description: >
    dcsr.ebreakm will be set at the beginning of the test upon the first entry into the debug rom.
    From then on, every ebreak instruction should cause debug mode to be entered.
  iterations: 5
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +require_signature_addr=1
    +gen_debug_section=1
    +set_dcsr_ebreak=1
    +no_ebreak=0
    +no_csr_instr=1
    +no_fence=1
    +no_wfi=1
    +instr_cnt=6000
  rtl_test: core_ibex_debug_ebreakm_test
  sim_opts: >
    +require_signature_addr=1
    +enable_debug_single_seq=1
  compare_opts:
    compare_final_value_only: 1

- test: riscv_interrupt_test
  description: >
    Random instruction test with complete interrupt handling
  iterations: 0
  gen_test: riscv_rand_instr_test
  gen_opts: >
    +require_signature_addr=1
  rtl_test: core_ibex_debug_intr_basic_test
  sim_opts: >
    +require_signature_addr=1
    +enable_irq_stress_seq=1
  compare_opts:
    compare_final_value_only: 1

- test: riscv_csr_test
  description: >
    Test all CSR instructions on all implemented CSR registers
  iterations: 5
  no_iss: 1
  rtl_test: core_ibex_csr_test
  no_post_compare: 1

- test: riscv_unaligned_load_store_test
  description: >
    Unaligned load/store test, ibex should handle it correctly without raising any exception
  iterations: 5
  gen_test: riscv_instr_base_test
  gen_opts: >
    +instr_cnt=10000
    +num_of_sub_program=5
    +directed_instr_0=riscv_load_store_rand_instr_stream,20
    +directed_instr_1=riscv_load_store_hazard_instr_stream,20
    +directed_instr_2=riscv_cache_line_stress_instr_stream,20
    +directed_instr_3=riscv_multi_page_load_store_instr_stream,20
    +enable_unaligned_load_store=1
  rtl_test: core_ibex_base_test
