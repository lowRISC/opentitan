// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// This file was generated automatically.
// Please do not modify content of this file directly.
// File generated by using template: "toplevel.rs.tpl"
// To regenerate this file follow OpenTitan topgen documentations.

#![allow(dead_code)]

//! This file contains enums and consts for use within the Rust codebase.
//!
//! These definitions are for information that depends on the top-specific chip
//! configuration, which includes:
//! - Device Memory Information (for Peripherals and Memory)
//! - PLIC Interrupt ID Names and Source Mappings
//! - Alert ID Names and Source Mappings

use core::convert::TryFrom;

/// Peripheral base address for dmi device on lc_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const LC_CTRL_DMI_BASE_ADDR: usize = 0x20000;

/// Peripheral size for dmi device on lc_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #LC_CTRL_DMI_BASE_ADDR and
/// `LC_CTRL_DMI_BASE_ADDR + LC_CTRL_DMI_SIZE_BYTES`.
pub const LC_CTRL_DMI_SIZE_BYTES: usize = 0x1000;

/// Peripheral base address for dbg device on rv_dm in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const RV_DM_DBG_BASE_ADDR: usize = 0x0;

/// Peripheral size for dbg device on rv_dm in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #RV_DM_DBG_BASE_ADDR and
/// `RV_DM_DBG_BASE_ADDR + RV_DM_DBG_SIZE_BYTES`.
pub const RV_DM_DBG_SIZE_BYTES: usize = 0x200;

/// Peripheral base address for soc device on mbx_jtag in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const MBX_JTAG_SOC_BASE_ADDR: usize = 0x1000;

/// Peripheral size for soc device on mbx_jtag in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #MBX_JTAG_SOC_BASE_ADDR and
/// `MBX_JTAG_SOC_BASE_ADDR + MBX_JTAG_SOC_SIZE_BYTES`.
pub const MBX_JTAG_SOC_SIZE_BYTES: usize = 0x20;

/// Peripheral base address for jtag device on soc_dbg_ctrl in top darjeeling.
///
/// This should be used with #mmio_region_from_addr to access the memory-mapped
/// registers associated with the peripheral (usually via a DIF).
pub const SOC_DBG_CTRL_JTAG_BASE_ADDR: usize = 0x2300;

/// Peripheral size for jtag device on soc_dbg_ctrl in top darjeeling.
///
/// This is the size (in bytes) of the peripheral's reserved memory area. All
/// memory-mapped registers associated with this peripheral should have an
/// address between #SOC_DBG_CTRL_JTAG_BASE_ADDR and
/// `SOC_DBG_CTRL_JTAG_BASE_ADDR + SOC_DBG_CTRL_JTAG_SIZE_BYTES`.
pub const SOC_DBG_CTRL_JTAG_SIZE_BYTES: usize = 0x20;
