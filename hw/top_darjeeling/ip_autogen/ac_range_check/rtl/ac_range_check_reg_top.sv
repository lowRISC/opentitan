// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module ac_range_check_reg_top
  # (
    parameter bit          EnableRacl           = 1'b0,
    parameter bit          RaclErrorRsp         = 1'b1,
    parameter top_racl_pkg::racl_policy_sel_t RaclPolicySelVec[ac_range_check_reg_pkg::NumRegs] =
      '{ac_range_check_reg_pkg::NumRegs{0}}
  ) (
  input clk_i,
  input rst_ni,
  input rst_shadowed_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output ac_range_check_reg_pkg::ac_range_check_reg2hw_t reg2hw, // Write
  input  ac_range_check_reg_pkg::ac_range_check_hw2reg_t hw2reg, // Read

  output logic shadowed_storage_err_o,
  output logic shadowed_update_err_o,

  // RACL interface
  input  top_racl_pkg::racl_policy_vec_t racl_policies_i,
  output top_racl_pkg::racl_error_log_t  racl_error_o,

  // Integrity check errors
  output logic intg_err_o
);

  import ac_range_check_reg_pkg::* ;

  localparam int AW = 10;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [167:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(168)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    // Translate RACL error to TLUL error if enabled
    .error_i (reg_error | (RaclErrorRsp & racl_error_o.valid))
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic intr_state_qs;
  logic intr_state_wd;
  logic intr_enable_we;
  logic intr_enable_qs;
  logic intr_enable_wd;
  logic intr_test_we;
  logic intr_test_wd;
  logic alert_test_we;
  logic alert_test_recov_ctrl_update_err_wd;
  logic alert_test_fatal_fault_wd;
  logic alert_status_re;
  logic alert_status_shadowed_update_err_qs;
  logic alert_status_shadowed_update_err_wd;
  logic alert_status_shadowed_storage_err_qs;
  logic alert_status_reg_intg_err_qs;
  logic alert_status_counter_err_qs;
  logic log_config_we;
  logic log_config_log_enable_qs;
  logic log_config_log_enable_wd;
  logic log_config_log_clear_qs;
  logic log_config_log_clear_wd;
  logic [7:0] log_config_deny_cnt_threshold_qs;
  logic [7:0] log_config_deny_cnt_threshold_wd;
  logic [7:0] log_status_deny_cnt_qs;
  logic log_status_denied_read_access_qs;
  logic log_status_denied_write_access_qs;
  logic log_status_denied_execute_access_qs;
  logic log_status_denied_no_match_qs;
  logic log_status_denied_racl_read_qs;
  logic log_status_denied_racl_write_qs;
  logic [3:0] log_status_denied_source_role_qs;
  logic [4:0] log_status_denied_ctn_uid_qs;
  logic [4:0] log_status_deny_range_index_qs;
  logic [31:0] log_address_qs;
  logic range_regwen_0_we;
  logic [3:0] range_regwen_0_qs;
  logic [3:0] range_regwen_0_wd;
  logic range_regwen_1_we;
  logic [3:0] range_regwen_1_qs;
  logic [3:0] range_regwen_1_wd;
  logic range_regwen_2_we;
  logic [3:0] range_regwen_2_qs;
  logic [3:0] range_regwen_2_wd;
  logic range_regwen_3_we;
  logic [3:0] range_regwen_3_qs;
  logic [3:0] range_regwen_3_wd;
  logic range_regwen_4_we;
  logic [3:0] range_regwen_4_qs;
  logic [3:0] range_regwen_4_wd;
  logic range_regwen_5_we;
  logic [3:0] range_regwen_5_qs;
  logic [3:0] range_regwen_5_wd;
  logic range_regwen_6_we;
  logic [3:0] range_regwen_6_qs;
  logic [3:0] range_regwen_6_wd;
  logic range_regwen_7_we;
  logic [3:0] range_regwen_7_qs;
  logic [3:0] range_regwen_7_wd;
  logic range_regwen_8_we;
  logic [3:0] range_regwen_8_qs;
  logic [3:0] range_regwen_8_wd;
  logic range_regwen_9_we;
  logic [3:0] range_regwen_9_qs;
  logic [3:0] range_regwen_9_wd;
  logic range_regwen_10_we;
  logic [3:0] range_regwen_10_qs;
  logic [3:0] range_regwen_10_wd;
  logic range_regwen_11_we;
  logic [3:0] range_regwen_11_qs;
  logic [3:0] range_regwen_11_wd;
  logic range_regwen_12_we;
  logic [3:0] range_regwen_12_qs;
  logic [3:0] range_regwen_12_wd;
  logic range_regwen_13_we;
  logic [3:0] range_regwen_13_qs;
  logic [3:0] range_regwen_13_wd;
  logic range_regwen_14_we;
  logic [3:0] range_regwen_14_qs;
  logic [3:0] range_regwen_14_wd;
  logic range_regwen_15_we;
  logic [3:0] range_regwen_15_qs;
  logic [3:0] range_regwen_15_wd;
  logic range_regwen_16_we;
  logic [3:0] range_regwen_16_qs;
  logic [3:0] range_regwen_16_wd;
  logic range_regwen_17_we;
  logic [3:0] range_regwen_17_qs;
  logic [3:0] range_regwen_17_wd;
  logic range_regwen_18_we;
  logic [3:0] range_regwen_18_qs;
  logic [3:0] range_regwen_18_wd;
  logic range_regwen_19_we;
  logic [3:0] range_regwen_19_qs;
  logic [3:0] range_regwen_19_wd;
  logic range_regwen_20_we;
  logic [3:0] range_regwen_20_qs;
  logic [3:0] range_regwen_20_wd;
  logic range_regwen_21_we;
  logic [3:0] range_regwen_21_qs;
  logic [3:0] range_regwen_21_wd;
  logic range_regwen_22_we;
  logic [3:0] range_regwen_22_qs;
  logic [3:0] range_regwen_22_wd;
  logic range_regwen_23_we;
  logic [3:0] range_regwen_23_qs;
  logic [3:0] range_regwen_23_wd;
  logic range_regwen_24_we;
  logic [3:0] range_regwen_24_qs;
  logic [3:0] range_regwen_24_wd;
  logic range_regwen_25_we;
  logic [3:0] range_regwen_25_qs;
  logic [3:0] range_regwen_25_wd;
  logic range_regwen_26_we;
  logic [3:0] range_regwen_26_qs;
  logic [3:0] range_regwen_26_wd;
  logic range_regwen_27_we;
  logic [3:0] range_regwen_27_qs;
  logic [3:0] range_regwen_27_wd;
  logic range_regwen_28_we;
  logic [3:0] range_regwen_28_qs;
  logic [3:0] range_regwen_28_wd;
  logic range_regwen_29_we;
  logic [3:0] range_regwen_29_qs;
  logic [3:0] range_regwen_29_wd;
  logic range_regwen_30_we;
  logic [3:0] range_regwen_30_qs;
  logic [3:0] range_regwen_30_wd;
  logic range_regwen_31_we;
  logic [3:0] range_regwen_31_qs;
  logic [3:0] range_regwen_31_wd;
  logic range_base_0_we;
  logic [29:0] range_base_0_qs;
  logic [29:0] range_base_0_wd;
  logic range_base_1_we;
  logic [29:0] range_base_1_qs;
  logic [29:0] range_base_1_wd;
  logic range_base_2_we;
  logic [29:0] range_base_2_qs;
  logic [29:0] range_base_2_wd;
  logic range_base_3_we;
  logic [29:0] range_base_3_qs;
  logic [29:0] range_base_3_wd;
  logic range_base_4_we;
  logic [29:0] range_base_4_qs;
  logic [29:0] range_base_4_wd;
  logic range_base_5_we;
  logic [29:0] range_base_5_qs;
  logic [29:0] range_base_5_wd;
  logic range_base_6_we;
  logic [29:0] range_base_6_qs;
  logic [29:0] range_base_6_wd;
  logic range_base_7_we;
  logic [29:0] range_base_7_qs;
  logic [29:0] range_base_7_wd;
  logic range_base_8_we;
  logic [29:0] range_base_8_qs;
  logic [29:0] range_base_8_wd;
  logic range_base_9_we;
  logic [29:0] range_base_9_qs;
  logic [29:0] range_base_9_wd;
  logic range_base_10_we;
  logic [29:0] range_base_10_qs;
  logic [29:0] range_base_10_wd;
  logic range_base_11_we;
  logic [29:0] range_base_11_qs;
  logic [29:0] range_base_11_wd;
  logic range_base_12_we;
  logic [29:0] range_base_12_qs;
  logic [29:0] range_base_12_wd;
  logic range_base_13_we;
  logic [29:0] range_base_13_qs;
  logic [29:0] range_base_13_wd;
  logic range_base_14_we;
  logic [29:0] range_base_14_qs;
  logic [29:0] range_base_14_wd;
  logic range_base_15_we;
  logic [29:0] range_base_15_qs;
  logic [29:0] range_base_15_wd;
  logic range_base_16_we;
  logic [29:0] range_base_16_qs;
  logic [29:0] range_base_16_wd;
  logic range_base_17_we;
  logic [29:0] range_base_17_qs;
  logic [29:0] range_base_17_wd;
  logic range_base_18_we;
  logic [29:0] range_base_18_qs;
  logic [29:0] range_base_18_wd;
  logic range_base_19_we;
  logic [29:0] range_base_19_qs;
  logic [29:0] range_base_19_wd;
  logic range_base_20_we;
  logic [29:0] range_base_20_qs;
  logic [29:0] range_base_20_wd;
  logic range_base_21_we;
  logic [29:0] range_base_21_qs;
  logic [29:0] range_base_21_wd;
  logic range_base_22_we;
  logic [29:0] range_base_22_qs;
  logic [29:0] range_base_22_wd;
  logic range_base_23_we;
  logic [29:0] range_base_23_qs;
  logic [29:0] range_base_23_wd;
  logic range_base_24_we;
  logic [29:0] range_base_24_qs;
  logic [29:0] range_base_24_wd;
  logic range_base_25_we;
  logic [29:0] range_base_25_qs;
  logic [29:0] range_base_25_wd;
  logic range_base_26_we;
  logic [29:0] range_base_26_qs;
  logic [29:0] range_base_26_wd;
  logic range_base_27_we;
  logic [29:0] range_base_27_qs;
  logic [29:0] range_base_27_wd;
  logic range_base_28_we;
  logic [29:0] range_base_28_qs;
  logic [29:0] range_base_28_wd;
  logic range_base_29_we;
  logic [29:0] range_base_29_qs;
  logic [29:0] range_base_29_wd;
  logic range_base_30_we;
  logic [29:0] range_base_30_qs;
  logic [29:0] range_base_30_wd;
  logic range_base_31_we;
  logic [29:0] range_base_31_qs;
  logic [29:0] range_base_31_wd;
  logic range_limit_0_we;
  logic [29:0] range_limit_0_qs;
  logic [29:0] range_limit_0_wd;
  logic range_limit_1_we;
  logic [29:0] range_limit_1_qs;
  logic [29:0] range_limit_1_wd;
  logic range_limit_2_we;
  logic [29:0] range_limit_2_qs;
  logic [29:0] range_limit_2_wd;
  logic range_limit_3_we;
  logic [29:0] range_limit_3_qs;
  logic [29:0] range_limit_3_wd;
  logic range_limit_4_we;
  logic [29:0] range_limit_4_qs;
  logic [29:0] range_limit_4_wd;
  logic range_limit_5_we;
  logic [29:0] range_limit_5_qs;
  logic [29:0] range_limit_5_wd;
  logic range_limit_6_we;
  logic [29:0] range_limit_6_qs;
  logic [29:0] range_limit_6_wd;
  logic range_limit_7_we;
  logic [29:0] range_limit_7_qs;
  logic [29:0] range_limit_7_wd;
  logic range_limit_8_we;
  logic [29:0] range_limit_8_qs;
  logic [29:0] range_limit_8_wd;
  logic range_limit_9_we;
  logic [29:0] range_limit_9_qs;
  logic [29:0] range_limit_9_wd;
  logic range_limit_10_we;
  logic [29:0] range_limit_10_qs;
  logic [29:0] range_limit_10_wd;
  logic range_limit_11_we;
  logic [29:0] range_limit_11_qs;
  logic [29:0] range_limit_11_wd;
  logic range_limit_12_we;
  logic [29:0] range_limit_12_qs;
  logic [29:0] range_limit_12_wd;
  logic range_limit_13_we;
  logic [29:0] range_limit_13_qs;
  logic [29:0] range_limit_13_wd;
  logic range_limit_14_we;
  logic [29:0] range_limit_14_qs;
  logic [29:0] range_limit_14_wd;
  logic range_limit_15_we;
  logic [29:0] range_limit_15_qs;
  logic [29:0] range_limit_15_wd;
  logic range_limit_16_we;
  logic [29:0] range_limit_16_qs;
  logic [29:0] range_limit_16_wd;
  logic range_limit_17_we;
  logic [29:0] range_limit_17_qs;
  logic [29:0] range_limit_17_wd;
  logic range_limit_18_we;
  logic [29:0] range_limit_18_qs;
  logic [29:0] range_limit_18_wd;
  logic range_limit_19_we;
  logic [29:0] range_limit_19_qs;
  logic [29:0] range_limit_19_wd;
  logic range_limit_20_we;
  logic [29:0] range_limit_20_qs;
  logic [29:0] range_limit_20_wd;
  logic range_limit_21_we;
  logic [29:0] range_limit_21_qs;
  logic [29:0] range_limit_21_wd;
  logic range_limit_22_we;
  logic [29:0] range_limit_22_qs;
  logic [29:0] range_limit_22_wd;
  logic range_limit_23_we;
  logic [29:0] range_limit_23_qs;
  logic [29:0] range_limit_23_wd;
  logic range_limit_24_we;
  logic [29:0] range_limit_24_qs;
  logic [29:0] range_limit_24_wd;
  logic range_limit_25_we;
  logic [29:0] range_limit_25_qs;
  logic [29:0] range_limit_25_wd;
  logic range_limit_26_we;
  logic [29:0] range_limit_26_qs;
  logic [29:0] range_limit_26_wd;
  logic range_limit_27_we;
  logic [29:0] range_limit_27_qs;
  logic [29:0] range_limit_27_wd;
  logic range_limit_28_we;
  logic [29:0] range_limit_28_qs;
  logic [29:0] range_limit_28_wd;
  logic range_limit_29_we;
  logic [29:0] range_limit_29_qs;
  logic [29:0] range_limit_29_wd;
  logic range_limit_30_we;
  logic [29:0] range_limit_30_qs;
  logic [29:0] range_limit_30_wd;
  logic range_limit_31_we;
  logic [29:0] range_limit_31_qs;
  logic [29:0] range_limit_31_wd;
  logic range_perm_0_we;
  logic [3:0] range_perm_0_enable_0_qs;
  logic [3:0] range_perm_0_enable_0_wd;
  logic [3:0] range_perm_0_read_access_0_qs;
  logic [3:0] range_perm_0_read_access_0_wd;
  logic [3:0] range_perm_0_write_access_0_qs;
  logic [3:0] range_perm_0_write_access_0_wd;
  logic [3:0] range_perm_0_execute_access_0_qs;
  logic [3:0] range_perm_0_execute_access_0_wd;
  logic [3:0] range_perm_0_log_denied_access_0_qs;
  logic [3:0] range_perm_0_log_denied_access_0_wd;
  logic range_perm_1_we;
  logic [3:0] range_perm_1_enable_1_qs;
  logic [3:0] range_perm_1_enable_1_wd;
  logic [3:0] range_perm_1_read_access_1_qs;
  logic [3:0] range_perm_1_read_access_1_wd;
  logic [3:0] range_perm_1_write_access_1_qs;
  logic [3:0] range_perm_1_write_access_1_wd;
  logic [3:0] range_perm_1_execute_access_1_qs;
  logic [3:0] range_perm_1_execute_access_1_wd;
  logic [3:0] range_perm_1_log_denied_access_1_qs;
  logic [3:0] range_perm_1_log_denied_access_1_wd;
  logic range_perm_2_we;
  logic [3:0] range_perm_2_enable_2_qs;
  logic [3:0] range_perm_2_enable_2_wd;
  logic [3:0] range_perm_2_read_access_2_qs;
  logic [3:0] range_perm_2_read_access_2_wd;
  logic [3:0] range_perm_2_write_access_2_qs;
  logic [3:0] range_perm_2_write_access_2_wd;
  logic [3:0] range_perm_2_execute_access_2_qs;
  logic [3:0] range_perm_2_execute_access_2_wd;
  logic [3:0] range_perm_2_log_denied_access_2_qs;
  logic [3:0] range_perm_2_log_denied_access_2_wd;
  logic range_perm_3_we;
  logic [3:0] range_perm_3_enable_3_qs;
  logic [3:0] range_perm_3_enable_3_wd;
  logic [3:0] range_perm_3_read_access_3_qs;
  logic [3:0] range_perm_3_read_access_3_wd;
  logic [3:0] range_perm_3_write_access_3_qs;
  logic [3:0] range_perm_3_write_access_3_wd;
  logic [3:0] range_perm_3_execute_access_3_qs;
  logic [3:0] range_perm_3_execute_access_3_wd;
  logic [3:0] range_perm_3_log_denied_access_3_qs;
  logic [3:0] range_perm_3_log_denied_access_3_wd;
  logic range_perm_4_we;
  logic [3:0] range_perm_4_enable_4_qs;
  logic [3:0] range_perm_4_enable_4_wd;
  logic [3:0] range_perm_4_read_access_4_qs;
  logic [3:0] range_perm_4_read_access_4_wd;
  logic [3:0] range_perm_4_write_access_4_qs;
  logic [3:0] range_perm_4_write_access_4_wd;
  logic [3:0] range_perm_4_execute_access_4_qs;
  logic [3:0] range_perm_4_execute_access_4_wd;
  logic [3:0] range_perm_4_log_denied_access_4_qs;
  logic [3:0] range_perm_4_log_denied_access_4_wd;
  logic range_perm_5_we;
  logic [3:0] range_perm_5_enable_5_qs;
  logic [3:0] range_perm_5_enable_5_wd;
  logic [3:0] range_perm_5_read_access_5_qs;
  logic [3:0] range_perm_5_read_access_5_wd;
  logic [3:0] range_perm_5_write_access_5_qs;
  logic [3:0] range_perm_5_write_access_5_wd;
  logic [3:0] range_perm_5_execute_access_5_qs;
  logic [3:0] range_perm_5_execute_access_5_wd;
  logic [3:0] range_perm_5_log_denied_access_5_qs;
  logic [3:0] range_perm_5_log_denied_access_5_wd;
  logic range_perm_6_we;
  logic [3:0] range_perm_6_enable_6_qs;
  logic [3:0] range_perm_6_enable_6_wd;
  logic [3:0] range_perm_6_read_access_6_qs;
  logic [3:0] range_perm_6_read_access_6_wd;
  logic [3:0] range_perm_6_write_access_6_qs;
  logic [3:0] range_perm_6_write_access_6_wd;
  logic [3:0] range_perm_6_execute_access_6_qs;
  logic [3:0] range_perm_6_execute_access_6_wd;
  logic [3:0] range_perm_6_log_denied_access_6_qs;
  logic [3:0] range_perm_6_log_denied_access_6_wd;
  logic range_perm_7_we;
  logic [3:0] range_perm_7_enable_7_qs;
  logic [3:0] range_perm_7_enable_7_wd;
  logic [3:0] range_perm_7_read_access_7_qs;
  logic [3:0] range_perm_7_read_access_7_wd;
  logic [3:0] range_perm_7_write_access_7_qs;
  logic [3:0] range_perm_7_write_access_7_wd;
  logic [3:0] range_perm_7_execute_access_7_qs;
  logic [3:0] range_perm_7_execute_access_7_wd;
  logic [3:0] range_perm_7_log_denied_access_7_qs;
  logic [3:0] range_perm_7_log_denied_access_7_wd;
  logic range_perm_8_we;
  logic [3:0] range_perm_8_enable_8_qs;
  logic [3:0] range_perm_8_enable_8_wd;
  logic [3:0] range_perm_8_read_access_8_qs;
  logic [3:0] range_perm_8_read_access_8_wd;
  logic [3:0] range_perm_8_write_access_8_qs;
  logic [3:0] range_perm_8_write_access_8_wd;
  logic [3:0] range_perm_8_execute_access_8_qs;
  logic [3:0] range_perm_8_execute_access_8_wd;
  logic [3:0] range_perm_8_log_denied_access_8_qs;
  logic [3:0] range_perm_8_log_denied_access_8_wd;
  logic range_perm_9_we;
  logic [3:0] range_perm_9_enable_9_qs;
  logic [3:0] range_perm_9_enable_9_wd;
  logic [3:0] range_perm_9_read_access_9_qs;
  logic [3:0] range_perm_9_read_access_9_wd;
  logic [3:0] range_perm_9_write_access_9_qs;
  logic [3:0] range_perm_9_write_access_9_wd;
  logic [3:0] range_perm_9_execute_access_9_qs;
  logic [3:0] range_perm_9_execute_access_9_wd;
  logic [3:0] range_perm_9_log_denied_access_9_qs;
  logic [3:0] range_perm_9_log_denied_access_9_wd;
  logic range_perm_10_we;
  logic [3:0] range_perm_10_enable_10_qs;
  logic [3:0] range_perm_10_enable_10_wd;
  logic [3:0] range_perm_10_read_access_10_qs;
  logic [3:0] range_perm_10_read_access_10_wd;
  logic [3:0] range_perm_10_write_access_10_qs;
  logic [3:0] range_perm_10_write_access_10_wd;
  logic [3:0] range_perm_10_execute_access_10_qs;
  logic [3:0] range_perm_10_execute_access_10_wd;
  logic [3:0] range_perm_10_log_denied_access_10_qs;
  logic [3:0] range_perm_10_log_denied_access_10_wd;
  logic range_perm_11_we;
  logic [3:0] range_perm_11_enable_11_qs;
  logic [3:0] range_perm_11_enable_11_wd;
  logic [3:0] range_perm_11_read_access_11_qs;
  logic [3:0] range_perm_11_read_access_11_wd;
  logic [3:0] range_perm_11_write_access_11_qs;
  logic [3:0] range_perm_11_write_access_11_wd;
  logic [3:0] range_perm_11_execute_access_11_qs;
  logic [3:0] range_perm_11_execute_access_11_wd;
  logic [3:0] range_perm_11_log_denied_access_11_qs;
  logic [3:0] range_perm_11_log_denied_access_11_wd;
  logic range_perm_12_we;
  logic [3:0] range_perm_12_enable_12_qs;
  logic [3:0] range_perm_12_enable_12_wd;
  logic [3:0] range_perm_12_read_access_12_qs;
  logic [3:0] range_perm_12_read_access_12_wd;
  logic [3:0] range_perm_12_write_access_12_qs;
  logic [3:0] range_perm_12_write_access_12_wd;
  logic [3:0] range_perm_12_execute_access_12_qs;
  logic [3:0] range_perm_12_execute_access_12_wd;
  logic [3:0] range_perm_12_log_denied_access_12_qs;
  logic [3:0] range_perm_12_log_denied_access_12_wd;
  logic range_perm_13_we;
  logic [3:0] range_perm_13_enable_13_qs;
  logic [3:0] range_perm_13_enable_13_wd;
  logic [3:0] range_perm_13_read_access_13_qs;
  logic [3:0] range_perm_13_read_access_13_wd;
  logic [3:0] range_perm_13_write_access_13_qs;
  logic [3:0] range_perm_13_write_access_13_wd;
  logic [3:0] range_perm_13_execute_access_13_qs;
  logic [3:0] range_perm_13_execute_access_13_wd;
  logic [3:0] range_perm_13_log_denied_access_13_qs;
  logic [3:0] range_perm_13_log_denied_access_13_wd;
  logic range_perm_14_we;
  logic [3:0] range_perm_14_enable_14_qs;
  logic [3:0] range_perm_14_enable_14_wd;
  logic [3:0] range_perm_14_read_access_14_qs;
  logic [3:0] range_perm_14_read_access_14_wd;
  logic [3:0] range_perm_14_write_access_14_qs;
  logic [3:0] range_perm_14_write_access_14_wd;
  logic [3:0] range_perm_14_execute_access_14_qs;
  logic [3:0] range_perm_14_execute_access_14_wd;
  logic [3:0] range_perm_14_log_denied_access_14_qs;
  logic [3:0] range_perm_14_log_denied_access_14_wd;
  logic range_perm_15_we;
  logic [3:0] range_perm_15_enable_15_qs;
  logic [3:0] range_perm_15_enable_15_wd;
  logic [3:0] range_perm_15_read_access_15_qs;
  logic [3:0] range_perm_15_read_access_15_wd;
  logic [3:0] range_perm_15_write_access_15_qs;
  logic [3:0] range_perm_15_write_access_15_wd;
  logic [3:0] range_perm_15_execute_access_15_qs;
  logic [3:0] range_perm_15_execute_access_15_wd;
  logic [3:0] range_perm_15_log_denied_access_15_qs;
  logic [3:0] range_perm_15_log_denied_access_15_wd;
  logic range_perm_16_we;
  logic [3:0] range_perm_16_enable_16_qs;
  logic [3:0] range_perm_16_enable_16_wd;
  logic [3:0] range_perm_16_read_access_16_qs;
  logic [3:0] range_perm_16_read_access_16_wd;
  logic [3:0] range_perm_16_write_access_16_qs;
  logic [3:0] range_perm_16_write_access_16_wd;
  logic [3:0] range_perm_16_execute_access_16_qs;
  logic [3:0] range_perm_16_execute_access_16_wd;
  logic [3:0] range_perm_16_log_denied_access_16_qs;
  logic [3:0] range_perm_16_log_denied_access_16_wd;
  logic range_perm_17_we;
  logic [3:0] range_perm_17_enable_17_qs;
  logic [3:0] range_perm_17_enable_17_wd;
  logic [3:0] range_perm_17_read_access_17_qs;
  logic [3:0] range_perm_17_read_access_17_wd;
  logic [3:0] range_perm_17_write_access_17_qs;
  logic [3:0] range_perm_17_write_access_17_wd;
  logic [3:0] range_perm_17_execute_access_17_qs;
  logic [3:0] range_perm_17_execute_access_17_wd;
  logic [3:0] range_perm_17_log_denied_access_17_qs;
  logic [3:0] range_perm_17_log_denied_access_17_wd;
  logic range_perm_18_we;
  logic [3:0] range_perm_18_enable_18_qs;
  logic [3:0] range_perm_18_enable_18_wd;
  logic [3:0] range_perm_18_read_access_18_qs;
  logic [3:0] range_perm_18_read_access_18_wd;
  logic [3:0] range_perm_18_write_access_18_qs;
  logic [3:0] range_perm_18_write_access_18_wd;
  logic [3:0] range_perm_18_execute_access_18_qs;
  logic [3:0] range_perm_18_execute_access_18_wd;
  logic [3:0] range_perm_18_log_denied_access_18_qs;
  logic [3:0] range_perm_18_log_denied_access_18_wd;
  logic range_perm_19_we;
  logic [3:0] range_perm_19_enable_19_qs;
  logic [3:0] range_perm_19_enable_19_wd;
  logic [3:0] range_perm_19_read_access_19_qs;
  logic [3:0] range_perm_19_read_access_19_wd;
  logic [3:0] range_perm_19_write_access_19_qs;
  logic [3:0] range_perm_19_write_access_19_wd;
  logic [3:0] range_perm_19_execute_access_19_qs;
  logic [3:0] range_perm_19_execute_access_19_wd;
  logic [3:0] range_perm_19_log_denied_access_19_qs;
  logic [3:0] range_perm_19_log_denied_access_19_wd;
  logic range_perm_20_we;
  logic [3:0] range_perm_20_enable_20_qs;
  logic [3:0] range_perm_20_enable_20_wd;
  logic [3:0] range_perm_20_read_access_20_qs;
  logic [3:0] range_perm_20_read_access_20_wd;
  logic [3:0] range_perm_20_write_access_20_qs;
  logic [3:0] range_perm_20_write_access_20_wd;
  logic [3:0] range_perm_20_execute_access_20_qs;
  logic [3:0] range_perm_20_execute_access_20_wd;
  logic [3:0] range_perm_20_log_denied_access_20_qs;
  logic [3:0] range_perm_20_log_denied_access_20_wd;
  logic range_perm_21_we;
  logic [3:0] range_perm_21_enable_21_qs;
  logic [3:0] range_perm_21_enable_21_wd;
  logic [3:0] range_perm_21_read_access_21_qs;
  logic [3:0] range_perm_21_read_access_21_wd;
  logic [3:0] range_perm_21_write_access_21_qs;
  logic [3:0] range_perm_21_write_access_21_wd;
  logic [3:0] range_perm_21_execute_access_21_qs;
  logic [3:0] range_perm_21_execute_access_21_wd;
  logic [3:0] range_perm_21_log_denied_access_21_qs;
  logic [3:0] range_perm_21_log_denied_access_21_wd;
  logic range_perm_22_we;
  logic [3:0] range_perm_22_enable_22_qs;
  logic [3:0] range_perm_22_enable_22_wd;
  logic [3:0] range_perm_22_read_access_22_qs;
  logic [3:0] range_perm_22_read_access_22_wd;
  logic [3:0] range_perm_22_write_access_22_qs;
  logic [3:0] range_perm_22_write_access_22_wd;
  logic [3:0] range_perm_22_execute_access_22_qs;
  logic [3:0] range_perm_22_execute_access_22_wd;
  logic [3:0] range_perm_22_log_denied_access_22_qs;
  logic [3:0] range_perm_22_log_denied_access_22_wd;
  logic range_perm_23_we;
  logic [3:0] range_perm_23_enable_23_qs;
  logic [3:0] range_perm_23_enable_23_wd;
  logic [3:0] range_perm_23_read_access_23_qs;
  logic [3:0] range_perm_23_read_access_23_wd;
  logic [3:0] range_perm_23_write_access_23_qs;
  logic [3:0] range_perm_23_write_access_23_wd;
  logic [3:0] range_perm_23_execute_access_23_qs;
  logic [3:0] range_perm_23_execute_access_23_wd;
  logic [3:0] range_perm_23_log_denied_access_23_qs;
  logic [3:0] range_perm_23_log_denied_access_23_wd;
  logic range_perm_24_we;
  logic [3:0] range_perm_24_enable_24_qs;
  logic [3:0] range_perm_24_enable_24_wd;
  logic [3:0] range_perm_24_read_access_24_qs;
  logic [3:0] range_perm_24_read_access_24_wd;
  logic [3:0] range_perm_24_write_access_24_qs;
  logic [3:0] range_perm_24_write_access_24_wd;
  logic [3:0] range_perm_24_execute_access_24_qs;
  logic [3:0] range_perm_24_execute_access_24_wd;
  logic [3:0] range_perm_24_log_denied_access_24_qs;
  logic [3:0] range_perm_24_log_denied_access_24_wd;
  logic range_perm_25_we;
  logic [3:0] range_perm_25_enable_25_qs;
  logic [3:0] range_perm_25_enable_25_wd;
  logic [3:0] range_perm_25_read_access_25_qs;
  logic [3:0] range_perm_25_read_access_25_wd;
  logic [3:0] range_perm_25_write_access_25_qs;
  logic [3:0] range_perm_25_write_access_25_wd;
  logic [3:0] range_perm_25_execute_access_25_qs;
  logic [3:0] range_perm_25_execute_access_25_wd;
  logic [3:0] range_perm_25_log_denied_access_25_qs;
  logic [3:0] range_perm_25_log_denied_access_25_wd;
  logic range_perm_26_we;
  logic [3:0] range_perm_26_enable_26_qs;
  logic [3:0] range_perm_26_enable_26_wd;
  logic [3:0] range_perm_26_read_access_26_qs;
  logic [3:0] range_perm_26_read_access_26_wd;
  logic [3:0] range_perm_26_write_access_26_qs;
  logic [3:0] range_perm_26_write_access_26_wd;
  logic [3:0] range_perm_26_execute_access_26_qs;
  logic [3:0] range_perm_26_execute_access_26_wd;
  logic [3:0] range_perm_26_log_denied_access_26_qs;
  logic [3:0] range_perm_26_log_denied_access_26_wd;
  logic range_perm_27_we;
  logic [3:0] range_perm_27_enable_27_qs;
  logic [3:0] range_perm_27_enable_27_wd;
  logic [3:0] range_perm_27_read_access_27_qs;
  logic [3:0] range_perm_27_read_access_27_wd;
  logic [3:0] range_perm_27_write_access_27_qs;
  logic [3:0] range_perm_27_write_access_27_wd;
  logic [3:0] range_perm_27_execute_access_27_qs;
  logic [3:0] range_perm_27_execute_access_27_wd;
  logic [3:0] range_perm_27_log_denied_access_27_qs;
  logic [3:0] range_perm_27_log_denied_access_27_wd;
  logic range_perm_28_we;
  logic [3:0] range_perm_28_enable_28_qs;
  logic [3:0] range_perm_28_enable_28_wd;
  logic [3:0] range_perm_28_read_access_28_qs;
  logic [3:0] range_perm_28_read_access_28_wd;
  logic [3:0] range_perm_28_write_access_28_qs;
  logic [3:0] range_perm_28_write_access_28_wd;
  logic [3:0] range_perm_28_execute_access_28_qs;
  logic [3:0] range_perm_28_execute_access_28_wd;
  logic [3:0] range_perm_28_log_denied_access_28_qs;
  logic [3:0] range_perm_28_log_denied_access_28_wd;
  logic range_perm_29_we;
  logic [3:0] range_perm_29_enable_29_qs;
  logic [3:0] range_perm_29_enable_29_wd;
  logic [3:0] range_perm_29_read_access_29_qs;
  logic [3:0] range_perm_29_read_access_29_wd;
  logic [3:0] range_perm_29_write_access_29_qs;
  logic [3:0] range_perm_29_write_access_29_wd;
  logic [3:0] range_perm_29_execute_access_29_qs;
  logic [3:0] range_perm_29_execute_access_29_wd;
  logic [3:0] range_perm_29_log_denied_access_29_qs;
  logic [3:0] range_perm_29_log_denied_access_29_wd;
  logic range_perm_30_we;
  logic [3:0] range_perm_30_enable_30_qs;
  logic [3:0] range_perm_30_enable_30_wd;
  logic [3:0] range_perm_30_read_access_30_qs;
  logic [3:0] range_perm_30_read_access_30_wd;
  logic [3:0] range_perm_30_write_access_30_qs;
  logic [3:0] range_perm_30_write_access_30_wd;
  logic [3:0] range_perm_30_execute_access_30_qs;
  logic [3:0] range_perm_30_execute_access_30_wd;
  logic [3:0] range_perm_30_log_denied_access_30_qs;
  logic [3:0] range_perm_30_log_denied_access_30_wd;
  logic range_perm_31_we;
  logic [3:0] range_perm_31_enable_31_qs;
  logic [3:0] range_perm_31_enable_31_wd;
  logic [3:0] range_perm_31_read_access_31_qs;
  logic [3:0] range_perm_31_read_access_31_wd;
  logic [3:0] range_perm_31_write_access_31_qs;
  logic [3:0] range_perm_31_write_access_31_wd;
  logic [3:0] range_perm_31_execute_access_31_qs;
  logic [3:0] range_perm_31_execute_access_31_wd;
  logic [3:0] range_perm_31_log_denied_access_31_qs;
  logic [3:0] range_perm_31_log_denied_access_31_wd;
  logic range_racl_policy_shadowed_0_re;
  logic range_racl_policy_shadowed_0_we;
  logic [15:0] range_racl_policy_shadowed_0_read_perm_0_qs;
  logic [15:0] range_racl_policy_shadowed_0_read_perm_0_wd;
  logic range_racl_policy_shadowed_0_read_perm_0_storage_err;
  logic range_racl_policy_shadowed_0_read_perm_0_update_err;
  logic [15:0] range_racl_policy_shadowed_0_write_perm_0_qs;
  logic [15:0] range_racl_policy_shadowed_0_write_perm_0_wd;
  logic range_racl_policy_shadowed_0_write_perm_0_storage_err;
  logic range_racl_policy_shadowed_0_write_perm_0_update_err;
  logic range_racl_policy_shadowed_1_re;
  logic range_racl_policy_shadowed_1_we;
  logic [15:0] range_racl_policy_shadowed_1_read_perm_1_qs;
  logic [15:0] range_racl_policy_shadowed_1_read_perm_1_wd;
  logic range_racl_policy_shadowed_1_read_perm_1_storage_err;
  logic range_racl_policy_shadowed_1_read_perm_1_update_err;
  logic [15:0] range_racl_policy_shadowed_1_write_perm_1_qs;
  logic [15:0] range_racl_policy_shadowed_1_write_perm_1_wd;
  logic range_racl_policy_shadowed_1_write_perm_1_storage_err;
  logic range_racl_policy_shadowed_1_write_perm_1_update_err;
  logic range_racl_policy_shadowed_2_re;
  logic range_racl_policy_shadowed_2_we;
  logic [15:0] range_racl_policy_shadowed_2_read_perm_2_qs;
  logic [15:0] range_racl_policy_shadowed_2_read_perm_2_wd;
  logic range_racl_policy_shadowed_2_read_perm_2_storage_err;
  logic range_racl_policy_shadowed_2_read_perm_2_update_err;
  logic [15:0] range_racl_policy_shadowed_2_write_perm_2_qs;
  logic [15:0] range_racl_policy_shadowed_2_write_perm_2_wd;
  logic range_racl_policy_shadowed_2_write_perm_2_storage_err;
  logic range_racl_policy_shadowed_2_write_perm_2_update_err;
  logic range_racl_policy_shadowed_3_re;
  logic range_racl_policy_shadowed_3_we;
  logic [15:0] range_racl_policy_shadowed_3_read_perm_3_qs;
  logic [15:0] range_racl_policy_shadowed_3_read_perm_3_wd;
  logic range_racl_policy_shadowed_3_read_perm_3_storage_err;
  logic range_racl_policy_shadowed_3_read_perm_3_update_err;
  logic [15:0] range_racl_policy_shadowed_3_write_perm_3_qs;
  logic [15:0] range_racl_policy_shadowed_3_write_perm_3_wd;
  logic range_racl_policy_shadowed_3_write_perm_3_storage_err;
  logic range_racl_policy_shadowed_3_write_perm_3_update_err;
  logic range_racl_policy_shadowed_4_re;
  logic range_racl_policy_shadowed_4_we;
  logic [15:0] range_racl_policy_shadowed_4_read_perm_4_qs;
  logic [15:0] range_racl_policy_shadowed_4_read_perm_4_wd;
  logic range_racl_policy_shadowed_4_read_perm_4_storage_err;
  logic range_racl_policy_shadowed_4_read_perm_4_update_err;
  logic [15:0] range_racl_policy_shadowed_4_write_perm_4_qs;
  logic [15:0] range_racl_policy_shadowed_4_write_perm_4_wd;
  logic range_racl_policy_shadowed_4_write_perm_4_storage_err;
  logic range_racl_policy_shadowed_4_write_perm_4_update_err;
  logic range_racl_policy_shadowed_5_re;
  logic range_racl_policy_shadowed_5_we;
  logic [15:0] range_racl_policy_shadowed_5_read_perm_5_qs;
  logic [15:0] range_racl_policy_shadowed_5_read_perm_5_wd;
  logic range_racl_policy_shadowed_5_read_perm_5_storage_err;
  logic range_racl_policy_shadowed_5_read_perm_5_update_err;
  logic [15:0] range_racl_policy_shadowed_5_write_perm_5_qs;
  logic [15:0] range_racl_policy_shadowed_5_write_perm_5_wd;
  logic range_racl_policy_shadowed_5_write_perm_5_storage_err;
  logic range_racl_policy_shadowed_5_write_perm_5_update_err;
  logic range_racl_policy_shadowed_6_re;
  logic range_racl_policy_shadowed_6_we;
  logic [15:0] range_racl_policy_shadowed_6_read_perm_6_qs;
  logic [15:0] range_racl_policy_shadowed_6_read_perm_6_wd;
  logic range_racl_policy_shadowed_6_read_perm_6_storage_err;
  logic range_racl_policy_shadowed_6_read_perm_6_update_err;
  logic [15:0] range_racl_policy_shadowed_6_write_perm_6_qs;
  logic [15:0] range_racl_policy_shadowed_6_write_perm_6_wd;
  logic range_racl_policy_shadowed_6_write_perm_6_storage_err;
  logic range_racl_policy_shadowed_6_write_perm_6_update_err;
  logic range_racl_policy_shadowed_7_re;
  logic range_racl_policy_shadowed_7_we;
  logic [15:0] range_racl_policy_shadowed_7_read_perm_7_qs;
  logic [15:0] range_racl_policy_shadowed_7_read_perm_7_wd;
  logic range_racl_policy_shadowed_7_read_perm_7_storage_err;
  logic range_racl_policy_shadowed_7_read_perm_7_update_err;
  logic [15:0] range_racl_policy_shadowed_7_write_perm_7_qs;
  logic [15:0] range_racl_policy_shadowed_7_write_perm_7_wd;
  logic range_racl_policy_shadowed_7_write_perm_7_storage_err;
  logic range_racl_policy_shadowed_7_write_perm_7_update_err;
  logic range_racl_policy_shadowed_8_re;
  logic range_racl_policy_shadowed_8_we;
  logic [15:0] range_racl_policy_shadowed_8_read_perm_8_qs;
  logic [15:0] range_racl_policy_shadowed_8_read_perm_8_wd;
  logic range_racl_policy_shadowed_8_read_perm_8_storage_err;
  logic range_racl_policy_shadowed_8_read_perm_8_update_err;
  logic [15:0] range_racl_policy_shadowed_8_write_perm_8_qs;
  logic [15:0] range_racl_policy_shadowed_8_write_perm_8_wd;
  logic range_racl_policy_shadowed_8_write_perm_8_storage_err;
  logic range_racl_policy_shadowed_8_write_perm_8_update_err;
  logic range_racl_policy_shadowed_9_re;
  logic range_racl_policy_shadowed_9_we;
  logic [15:0] range_racl_policy_shadowed_9_read_perm_9_qs;
  logic [15:0] range_racl_policy_shadowed_9_read_perm_9_wd;
  logic range_racl_policy_shadowed_9_read_perm_9_storage_err;
  logic range_racl_policy_shadowed_9_read_perm_9_update_err;
  logic [15:0] range_racl_policy_shadowed_9_write_perm_9_qs;
  logic [15:0] range_racl_policy_shadowed_9_write_perm_9_wd;
  logic range_racl_policy_shadowed_9_write_perm_9_storage_err;
  logic range_racl_policy_shadowed_9_write_perm_9_update_err;
  logic range_racl_policy_shadowed_10_re;
  logic range_racl_policy_shadowed_10_we;
  logic [15:0] range_racl_policy_shadowed_10_read_perm_10_qs;
  logic [15:0] range_racl_policy_shadowed_10_read_perm_10_wd;
  logic range_racl_policy_shadowed_10_read_perm_10_storage_err;
  logic range_racl_policy_shadowed_10_read_perm_10_update_err;
  logic [15:0] range_racl_policy_shadowed_10_write_perm_10_qs;
  logic [15:0] range_racl_policy_shadowed_10_write_perm_10_wd;
  logic range_racl_policy_shadowed_10_write_perm_10_storage_err;
  logic range_racl_policy_shadowed_10_write_perm_10_update_err;
  logic range_racl_policy_shadowed_11_re;
  logic range_racl_policy_shadowed_11_we;
  logic [15:0] range_racl_policy_shadowed_11_read_perm_11_qs;
  logic [15:0] range_racl_policy_shadowed_11_read_perm_11_wd;
  logic range_racl_policy_shadowed_11_read_perm_11_storage_err;
  logic range_racl_policy_shadowed_11_read_perm_11_update_err;
  logic [15:0] range_racl_policy_shadowed_11_write_perm_11_qs;
  logic [15:0] range_racl_policy_shadowed_11_write_perm_11_wd;
  logic range_racl_policy_shadowed_11_write_perm_11_storage_err;
  logic range_racl_policy_shadowed_11_write_perm_11_update_err;
  logic range_racl_policy_shadowed_12_re;
  logic range_racl_policy_shadowed_12_we;
  logic [15:0] range_racl_policy_shadowed_12_read_perm_12_qs;
  logic [15:0] range_racl_policy_shadowed_12_read_perm_12_wd;
  logic range_racl_policy_shadowed_12_read_perm_12_storage_err;
  logic range_racl_policy_shadowed_12_read_perm_12_update_err;
  logic [15:0] range_racl_policy_shadowed_12_write_perm_12_qs;
  logic [15:0] range_racl_policy_shadowed_12_write_perm_12_wd;
  logic range_racl_policy_shadowed_12_write_perm_12_storage_err;
  logic range_racl_policy_shadowed_12_write_perm_12_update_err;
  logic range_racl_policy_shadowed_13_re;
  logic range_racl_policy_shadowed_13_we;
  logic [15:0] range_racl_policy_shadowed_13_read_perm_13_qs;
  logic [15:0] range_racl_policy_shadowed_13_read_perm_13_wd;
  logic range_racl_policy_shadowed_13_read_perm_13_storage_err;
  logic range_racl_policy_shadowed_13_read_perm_13_update_err;
  logic [15:0] range_racl_policy_shadowed_13_write_perm_13_qs;
  logic [15:0] range_racl_policy_shadowed_13_write_perm_13_wd;
  logic range_racl_policy_shadowed_13_write_perm_13_storage_err;
  logic range_racl_policy_shadowed_13_write_perm_13_update_err;
  logic range_racl_policy_shadowed_14_re;
  logic range_racl_policy_shadowed_14_we;
  logic [15:0] range_racl_policy_shadowed_14_read_perm_14_qs;
  logic [15:0] range_racl_policy_shadowed_14_read_perm_14_wd;
  logic range_racl_policy_shadowed_14_read_perm_14_storage_err;
  logic range_racl_policy_shadowed_14_read_perm_14_update_err;
  logic [15:0] range_racl_policy_shadowed_14_write_perm_14_qs;
  logic [15:0] range_racl_policy_shadowed_14_write_perm_14_wd;
  logic range_racl_policy_shadowed_14_write_perm_14_storage_err;
  logic range_racl_policy_shadowed_14_write_perm_14_update_err;
  logic range_racl_policy_shadowed_15_re;
  logic range_racl_policy_shadowed_15_we;
  logic [15:0] range_racl_policy_shadowed_15_read_perm_15_qs;
  logic [15:0] range_racl_policy_shadowed_15_read_perm_15_wd;
  logic range_racl_policy_shadowed_15_read_perm_15_storage_err;
  logic range_racl_policy_shadowed_15_read_perm_15_update_err;
  logic [15:0] range_racl_policy_shadowed_15_write_perm_15_qs;
  logic [15:0] range_racl_policy_shadowed_15_write_perm_15_wd;
  logic range_racl_policy_shadowed_15_write_perm_15_storage_err;
  logic range_racl_policy_shadowed_15_write_perm_15_update_err;
  logic range_racl_policy_shadowed_16_re;
  logic range_racl_policy_shadowed_16_we;
  logic [15:0] range_racl_policy_shadowed_16_read_perm_16_qs;
  logic [15:0] range_racl_policy_shadowed_16_read_perm_16_wd;
  logic range_racl_policy_shadowed_16_read_perm_16_storage_err;
  logic range_racl_policy_shadowed_16_read_perm_16_update_err;
  logic [15:0] range_racl_policy_shadowed_16_write_perm_16_qs;
  logic [15:0] range_racl_policy_shadowed_16_write_perm_16_wd;
  logic range_racl_policy_shadowed_16_write_perm_16_storage_err;
  logic range_racl_policy_shadowed_16_write_perm_16_update_err;
  logic range_racl_policy_shadowed_17_re;
  logic range_racl_policy_shadowed_17_we;
  logic [15:0] range_racl_policy_shadowed_17_read_perm_17_qs;
  logic [15:0] range_racl_policy_shadowed_17_read_perm_17_wd;
  logic range_racl_policy_shadowed_17_read_perm_17_storage_err;
  logic range_racl_policy_shadowed_17_read_perm_17_update_err;
  logic [15:0] range_racl_policy_shadowed_17_write_perm_17_qs;
  logic [15:0] range_racl_policy_shadowed_17_write_perm_17_wd;
  logic range_racl_policy_shadowed_17_write_perm_17_storage_err;
  logic range_racl_policy_shadowed_17_write_perm_17_update_err;
  logic range_racl_policy_shadowed_18_re;
  logic range_racl_policy_shadowed_18_we;
  logic [15:0] range_racl_policy_shadowed_18_read_perm_18_qs;
  logic [15:0] range_racl_policy_shadowed_18_read_perm_18_wd;
  logic range_racl_policy_shadowed_18_read_perm_18_storage_err;
  logic range_racl_policy_shadowed_18_read_perm_18_update_err;
  logic [15:0] range_racl_policy_shadowed_18_write_perm_18_qs;
  logic [15:0] range_racl_policy_shadowed_18_write_perm_18_wd;
  logic range_racl_policy_shadowed_18_write_perm_18_storage_err;
  logic range_racl_policy_shadowed_18_write_perm_18_update_err;
  logic range_racl_policy_shadowed_19_re;
  logic range_racl_policy_shadowed_19_we;
  logic [15:0] range_racl_policy_shadowed_19_read_perm_19_qs;
  logic [15:0] range_racl_policy_shadowed_19_read_perm_19_wd;
  logic range_racl_policy_shadowed_19_read_perm_19_storage_err;
  logic range_racl_policy_shadowed_19_read_perm_19_update_err;
  logic [15:0] range_racl_policy_shadowed_19_write_perm_19_qs;
  logic [15:0] range_racl_policy_shadowed_19_write_perm_19_wd;
  logic range_racl_policy_shadowed_19_write_perm_19_storage_err;
  logic range_racl_policy_shadowed_19_write_perm_19_update_err;
  logic range_racl_policy_shadowed_20_re;
  logic range_racl_policy_shadowed_20_we;
  logic [15:0] range_racl_policy_shadowed_20_read_perm_20_qs;
  logic [15:0] range_racl_policy_shadowed_20_read_perm_20_wd;
  logic range_racl_policy_shadowed_20_read_perm_20_storage_err;
  logic range_racl_policy_shadowed_20_read_perm_20_update_err;
  logic [15:0] range_racl_policy_shadowed_20_write_perm_20_qs;
  logic [15:0] range_racl_policy_shadowed_20_write_perm_20_wd;
  logic range_racl_policy_shadowed_20_write_perm_20_storage_err;
  logic range_racl_policy_shadowed_20_write_perm_20_update_err;
  logic range_racl_policy_shadowed_21_re;
  logic range_racl_policy_shadowed_21_we;
  logic [15:0] range_racl_policy_shadowed_21_read_perm_21_qs;
  logic [15:0] range_racl_policy_shadowed_21_read_perm_21_wd;
  logic range_racl_policy_shadowed_21_read_perm_21_storage_err;
  logic range_racl_policy_shadowed_21_read_perm_21_update_err;
  logic [15:0] range_racl_policy_shadowed_21_write_perm_21_qs;
  logic [15:0] range_racl_policy_shadowed_21_write_perm_21_wd;
  logic range_racl_policy_shadowed_21_write_perm_21_storage_err;
  logic range_racl_policy_shadowed_21_write_perm_21_update_err;
  logic range_racl_policy_shadowed_22_re;
  logic range_racl_policy_shadowed_22_we;
  logic [15:0] range_racl_policy_shadowed_22_read_perm_22_qs;
  logic [15:0] range_racl_policy_shadowed_22_read_perm_22_wd;
  logic range_racl_policy_shadowed_22_read_perm_22_storage_err;
  logic range_racl_policy_shadowed_22_read_perm_22_update_err;
  logic [15:0] range_racl_policy_shadowed_22_write_perm_22_qs;
  logic [15:0] range_racl_policy_shadowed_22_write_perm_22_wd;
  logic range_racl_policy_shadowed_22_write_perm_22_storage_err;
  logic range_racl_policy_shadowed_22_write_perm_22_update_err;
  logic range_racl_policy_shadowed_23_re;
  logic range_racl_policy_shadowed_23_we;
  logic [15:0] range_racl_policy_shadowed_23_read_perm_23_qs;
  logic [15:0] range_racl_policy_shadowed_23_read_perm_23_wd;
  logic range_racl_policy_shadowed_23_read_perm_23_storage_err;
  logic range_racl_policy_shadowed_23_read_perm_23_update_err;
  logic [15:0] range_racl_policy_shadowed_23_write_perm_23_qs;
  logic [15:0] range_racl_policy_shadowed_23_write_perm_23_wd;
  logic range_racl_policy_shadowed_23_write_perm_23_storage_err;
  logic range_racl_policy_shadowed_23_write_perm_23_update_err;
  logic range_racl_policy_shadowed_24_re;
  logic range_racl_policy_shadowed_24_we;
  logic [15:0] range_racl_policy_shadowed_24_read_perm_24_qs;
  logic [15:0] range_racl_policy_shadowed_24_read_perm_24_wd;
  logic range_racl_policy_shadowed_24_read_perm_24_storage_err;
  logic range_racl_policy_shadowed_24_read_perm_24_update_err;
  logic [15:0] range_racl_policy_shadowed_24_write_perm_24_qs;
  logic [15:0] range_racl_policy_shadowed_24_write_perm_24_wd;
  logic range_racl_policy_shadowed_24_write_perm_24_storage_err;
  logic range_racl_policy_shadowed_24_write_perm_24_update_err;
  logic range_racl_policy_shadowed_25_re;
  logic range_racl_policy_shadowed_25_we;
  logic [15:0] range_racl_policy_shadowed_25_read_perm_25_qs;
  logic [15:0] range_racl_policy_shadowed_25_read_perm_25_wd;
  logic range_racl_policy_shadowed_25_read_perm_25_storage_err;
  logic range_racl_policy_shadowed_25_read_perm_25_update_err;
  logic [15:0] range_racl_policy_shadowed_25_write_perm_25_qs;
  logic [15:0] range_racl_policy_shadowed_25_write_perm_25_wd;
  logic range_racl_policy_shadowed_25_write_perm_25_storage_err;
  logic range_racl_policy_shadowed_25_write_perm_25_update_err;
  logic range_racl_policy_shadowed_26_re;
  logic range_racl_policy_shadowed_26_we;
  logic [15:0] range_racl_policy_shadowed_26_read_perm_26_qs;
  logic [15:0] range_racl_policy_shadowed_26_read_perm_26_wd;
  logic range_racl_policy_shadowed_26_read_perm_26_storage_err;
  logic range_racl_policy_shadowed_26_read_perm_26_update_err;
  logic [15:0] range_racl_policy_shadowed_26_write_perm_26_qs;
  logic [15:0] range_racl_policy_shadowed_26_write_perm_26_wd;
  logic range_racl_policy_shadowed_26_write_perm_26_storage_err;
  logic range_racl_policy_shadowed_26_write_perm_26_update_err;
  logic range_racl_policy_shadowed_27_re;
  logic range_racl_policy_shadowed_27_we;
  logic [15:0] range_racl_policy_shadowed_27_read_perm_27_qs;
  logic [15:0] range_racl_policy_shadowed_27_read_perm_27_wd;
  logic range_racl_policy_shadowed_27_read_perm_27_storage_err;
  logic range_racl_policy_shadowed_27_read_perm_27_update_err;
  logic [15:0] range_racl_policy_shadowed_27_write_perm_27_qs;
  logic [15:0] range_racl_policy_shadowed_27_write_perm_27_wd;
  logic range_racl_policy_shadowed_27_write_perm_27_storage_err;
  logic range_racl_policy_shadowed_27_write_perm_27_update_err;
  logic range_racl_policy_shadowed_28_re;
  logic range_racl_policy_shadowed_28_we;
  logic [15:0] range_racl_policy_shadowed_28_read_perm_28_qs;
  logic [15:0] range_racl_policy_shadowed_28_read_perm_28_wd;
  logic range_racl_policy_shadowed_28_read_perm_28_storage_err;
  logic range_racl_policy_shadowed_28_read_perm_28_update_err;
  logic [15:0] range_racl_policy_shadowed_28_write_perm_28_qs;
  logic [15:0] range_racl_policy_shadowed_28_write_perm_28_wd;
  logic range_racl_policy_shadowed_28_write_perm_28_storage_err;
  logic range_racl_policy_shadowed_28_write_perm_28_update_err;
  logic range_racl_policy_shadowed_29_re;
  logic range_racl_policy_shadowed_29_we;
  logic [15:0] range_racl_policy_shadowed_29_read_perm_29_qs;
  logic [15:0] range_racl_policy_shadowed_29_read_perm_29_wd;
  logic range_racl_policy_shadowed_29_read_perm_29_storage_err;
  logic range_racl_policy_shadowed_29_read_perm_29_update_err;
  logic [15:0] range_racl_policy_shadowed_29_write_perm_29_qs;
  logic [15:0] range_racl_policy_shadowed_29_write_perm_29_wd;
  logic range_racl_policy_shadowed_29_write_perm_29_storage_err;
  logic range_racl_policy_shadowed_29_write_perm_29_update_err;
  logic range_racl_policy_shadowed_30_re;
  logic range_racl_policy_shadowed_30_we;
  logic [15:0] range_racl_policy_shadowed_30_read_perm_30_qs;
  logic [15:0] range_racl_policy_shadowed_30_read_perm_30_wd;
  logic range_racl_policy_shadowed_30_read_perm_30_storage_err;
  logic range_racl_policy_shadowed_30_read_perm_30_update_err;
  logic [15:0] range_racl_policy_shadowed_30_write_perm_30_qs;
  logic [15:0] range_racl_policy_shadowed_30_write_perm_30_wd;
  logic range_racl_policy_shadowed_30_write_perm_30_storage_err;
  logic range_racl_policy_shadowed_30_write_perm_30_update_err;
  logic range_racl_policy_shadowed_31_re;
  logic range_racl_policy_shadowed_31_we;
  logic [15:0] range_racl_policy_shadowed_31_read_perm_31_qs;
  logic [15:0] range_racl_policy_shadowed_31_read_perm_31_wd;
  logic range_racl_policy_shadowed_31_read_perm_31_storage_err;
  logic range_racl_policy_shadowed_31_read_perm_31_update_err;
  logic [15:0] range_racl_policy_shadowed_31_write_perm_31_qs;
  logic [15:0] range_racl_policy_shadowed_31_write_perm_31_wd;
  logic range_racl_policy_shadowed_31_write_perm_31_storage_err;
  logic range_racl_policy_shadowed_31_write_perm_31_update_err;

  // Register instances
  // R[intr_state]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.de),
    .d      (hw2reg.intr_state.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_qs)
  );


  // R[intr_enable]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [0:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.qe = intr_test_qe;


  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [1:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  //   F[recov_ctrl_update_err]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_recov_ctrl_update_err (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_recov_ctrl_update_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.recov_ctrl_update_err.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.recov_ctrl_update_err.qe = alert_test_qe;

  //   F[fatal_fault]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_fault (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_fault_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[1]),
    .q      (reg2hw.alert_test.fatal_fault.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_fault.qe = alert_test_qe;


  // R[alert_status]: V(False)
  //   F[shadowed_update_err]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRC),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_status_shadowed_update_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (alert_status_re),
    .wd     (alert_status_shadowed_update_err_wd),

    // from internal hardware
    .de     (hw2reg.alert_status.shadowed_update_err.de),
    .d      (hw2reg.alert_status.shadowed_update_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (alert_status_shadowed_update_err_qs)
  );

  //   F[shadowed_storage_err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_status_shadowed_storage_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.alert_status.shadowed_storage_err.de),
    .d      (hw2reg.alert_status.shadowed_storage_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (alert_status_shadowed_storage_err_qs)
  );

  //   F[reg_intg_err]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_status_reg_intg_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.alert_status.reg_intg_err.de),
    .d      (hw2reg.alert_status.reg_intg_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (alert_status_reg_intg_err_qs)
  );

  //   F[counter_err]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_alert_status_counter_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.alert_status.counter_err.de),
    .d      (hw2reg.alert_status.counter_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (alert_status_counter_err_qs)
  );


  // R[log_config]: V(False)
  logic log_config_qe;
  logic [2:0] log_config_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_log_config0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&log_config_flds_we),
    .q_o(log_config_qe)
  );
  //   F[log_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_log_config_log_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (log_config_we),
    .wd     (log_config_log_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (log_config_flds_we[0]),
    .q      (reg2hw.log_config.log_enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (log_config_log_enable_qs)
  );

  //   F[log_clear]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_log_config_log_clear (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (log_config_we),
    .wd     (log_config_log_clear_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (log_config_flds_we[1]),
    .q      (reg2hw.log_config.log_clear.q),
    .ds     (),

    // to register interface (read)
    .qs     (log_config_log_clear_qs)
  );
  assign reg2hw.log_config.log_clear.qe = log_config_qe;

  //   F[deny_cnt_threshold]: 9:2
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_log_config_deny_cnt_threshold (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (log_config_we),
    .wd     (log_config_deny_cnt_threshold_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (log_config_flds_we[2]),
    .q      (reg2hw.log_config.deny_cnt_threshold.q),
    .ds     (),

    // to register interface (read)
    .qs     (log_config_deny_cnt_threshold_qs)
  );


  // R[log_status]: V(False)
  //   F[deny_cnt]: 7:0
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_log_status_deny_cnt (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_status.deny_cnt.de),
    .d      (hw2reg.log_status.deny_cnt.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_status_deny_cnt_qs)
  );

  //   F[denied_read_access]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_log_status_denied_read_access (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_status.denied_read_access.de),
    .d      (hw2reg.log_status.denied_read_access.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_status_denied_read_access_qs)
  );

  //   F[denied_write_access]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_log_status_denied_write_access (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_status.denied_write_access.de),
    .d      (hw2reg.log_status.denied_write_access.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_status_denied_write_access_qs)
  );

  //   F[denied_execute_access]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_log_status_denied_execute_access (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_status.denied_execute_access.de),
    .d      (hw2reg.log_status.denied_execute_access.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_status_denied_execute_access_qs)
  );

  //   F[denied_no_match]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_log_status_denied_no_match (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_status.denied_no_match.de),
    .d      (hw2reg.log_status.denied_no_match.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_status_denied_no_match_qs)
  );

  //   F[denied_racl_read]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_log_status_denied_racl_read (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_status.denied_racl_read.de),
    .d      (hw2reg.log_status.denied_racl_read.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_status_denied_racl_read_qs)
  );

  //   F[denied_racl_write]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_log_status_denied_racl_write (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_status.denied_racl_write.de),
    .d      (hw2reg.log_status.denied_racl_write.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_status_denied_racl_write_qs)
  );

  //   F[denied_source_role]: 17:14
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (4'h0),
    .Mubi    (1'b0)
  ) u_log_status_denied_source_role (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_status.denied_source_role.de),
    .d      (hw2reg.log_status.denied_source_role.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_status_denied_source_role_qs)
  );

  //   F[denied_ctn_uid]: 22:18
  prim_subreg #(
    .DW      (5),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (5'h0),
    .Mubi    (1'b0)
  ) u_log_status_denied_ctn_uid (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_status.denied_ctn_uid.de),
    .d      (hw2reg.log_status.denied_ctn_uid.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_status_denied_ctn_uid_qs)
  );

  //   F[deny_range_index]: 27:23
  prim_subreg #(
    .DW      (5),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (5'h0),
    .Mubi    (1'b0)
  ) u_log_status_deny_range_index (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_status.deny_range_index.de),
    .d      (hw2reg.log_status.deny_range_index.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_status_deny_range_index_qs)
  );


  // R[log_address]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_log_address (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.log_address.de),
    .d      (hw2reg.log_address.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (log_address_qs)
  );


  // Subregister 0 of Multireg range_regwen
  // R[range_regwen_0]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_0_we),
    .wd     (range_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_0_qs)
  );


  // Subregister 1 of Multireg range_regwen
  // R[range_regwen_1]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_1_we),
    .wd     (range_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_1_qs)
  );


  // Subregister 2 of Multireg range_regwen
  // R[range_regwen_2]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_2_we),
    .wd     (range_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_2_qs)
  );


  // Subregister 3 of Multireg range_regwen
  // R[range_regwen_3]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_3_we),
    .wd     (range_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_3_qs)
  );


  // Subregister 4 of Multireg range_regwen
  // R[range_regwen_4]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_4_we),
    .wd     (range_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_4_qs)
  );


  // Subregister 5 of Multireg range_regwen
  // R[range_regwen_5]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_5_we),
    .wd     (range_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_5_qs)
  );


  // Subregister 6 of Multireg range_regwen
  // R[range_regwen_6]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_6_we),
    .wd     (range_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_6_qs)
  );


  // Subregister 7 of Multireg range_regwen
  // R[range_regwen_7]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_7_we),
    .wd     (range_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_7_qs)
  );


  // Subregister 8 of Multireg range_regwen
  // R[range_regwen_8]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_8_we),
    .wd     (range_regwen_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_8_qs)
  );


  // Subregister 9 of Multireg range_regwen
  // R[range_regwen_9]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_9_we),
    .wd     (range_regwen_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_9_qs)
  );


  // Subregister 10 of Multireg range_regwen
  // R[range_regwen_10]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_10_we),
    .wd     (range_regwen_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_10_qs)
  );


  // Subregister 11 of Multireg range_regwen
  // R[range_regwen_11]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_11_we),
    .wd     (range_regwen_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_11_qs)
  );


  // Subregister 12 of Multireg range_regwen
  // R[range_regwen_12]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_12_we),
    .wd     (range_regwen_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_12_qs)
  );


  // Subregister 13 of Multireg range_regwen
  // R[range_regwen_13]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_13_we),
    .wd     (range_regwen_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_13_qs)
  );


  // Subregister 14 of Multireg range_regwen
  // R[range_regwen_14]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_14_we),
    .wd     (range_regwen_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_14_qs)
  );


  // Subregister 15 of Multireg range_regwen
  // R[range_regwen_15]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_15_we),
    .wd     (range_regwen_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_15_qs)
  );


  // Subregister 16 of Multireg range_regwen
  // R[range_regwen_16]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_16_we),
    .wd     (range_regwen_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_16_qs)
  );


  // Subregister 17 of Multireg range_regwen
  // R[range_regwen_17]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_17_we),
    .wd     (range_regwen_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_17_qs)
  );


  // Subregister 18 of Multireg range_regwen
  // R[range_regwen_18]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_18_we),
    .wd     (range_regwen_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_18_qs)
  );


  // Subregister 19 of Multireg range_regwen
  // R[range_regwen_19]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_19_we),
    .wd     (range_regwen_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_19_qs)
  );


  // Subregister 20 of Multireg range_regwen
  // R[range_regwen_20]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_20_we),
    .wd     (range_regwen_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_20_qs)
  );


  // Subregister 21 of Multireg range_regwen
  // R[range_regwen_21]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_21_we),
    .wd     (range_regwen_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_21_qs)
  );


  // Subregister 22 of Multireg range_regwen
  // R[range_regwen_22]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_22_we),
    .wd     (range_regwen_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_22_qs)
  );


  // Subregister 23 of Multireg range_regwen
  // R[range_regwen_23]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_23_we),
    .wd     (range_regwen_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_23_qs)
  );


  // Subregister 24 of Multireg range_regwen
  // R[range_regwen_24]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_24_we),
    .wd     (range_regwen_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_24_qs)
  );


  // Subregister 25 of Multireg range_regwen
  // R[range_regwen_25]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_25_we),
    .wd     (range_regwen_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_25_qs)
  );


  // Subregister 26 of Multireg range_regwen
  // R[range_regwen_26]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_26_we),
    .wd     (range_regwen_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_26_qs)
  );


  // Subregister 27 of Multireg range_regwen
  // R[range_regwen_27]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_27_we),
    .wd     (range_regwen_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_27_qs)
  );


  // Subregister 28 of Multireg range_regwen
  // R[range_regwen_28]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_28_we),
    .wd     (range_regwen_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_28_qs)
  );


  // Subregister 29 of Multireg range_regwen
  // R[range_regwen_29]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_29_we),
    .wd     (range_regwen_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_29_qs)
  );


  // Subregister 30 of Multireg range_regwen
  // R[range_regwen_30]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_30_we),
    .wd     (range_regwen_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_30_qs)
  );


  // Subregister 31 of Multireg range_regwen
  // R[range_regwen_31]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_regwen_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_regwen_31_we),
    .wd     (range_regwen_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (range_regwen_31_qs)
  );


  // Subregister 0 of Multireg range_base
  // R[range_base_0]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_0_gated_we;
  assign range_base_0_gated_we =
    range_base_0_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_0_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_0_gated_we),
    .wd     (range_base_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_0_qs)
  );


  // Subregister 1 of Multireg range_base
  // R[range_base_1]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_1_gated_we;
  assign range_base_1_gated_we =
    range_base_1_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_1_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_1_gated_we),
    .wd     (range_base_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_1_qs)
  );


  // Subregister 2 of Multireg range_base
  // R[range_base_2]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_2_gated_we;
  assign range_base_2_gated_we =
    range_base_2_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_2_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_2_gated_we),
    .wd     (range_base_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_2_qs)
  );


  // Subregister 3 of Multireg range_base
  // R[range_base_3]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_3_gated_we;
  assign range_base_3_gated_we =
    range_base_3_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_3_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_3_gated_we),
    .wd     (range_base_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_3_qs)
  );


  // Subregister 4 of Multireg range_base
  // R[range_base_4]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_4_gated_we;
  assign range_base_4_gated_we =
    range_base_4_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_4_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_4_gated_we),
    .wd     (range_base_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_4_qs)
  );


  // Subregister 5 of Multireg range_base
  // R[range_base_5]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_5_gated_we;
  assign range_base_5_gated_we =
    range_base_5_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_5_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_5_gated_we),
    .wd     (range_base_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_5_qs)
  );


  // Subregister 6 of Multireg range_base
  // R[range_base_6]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_6_gated_we;
  assign range_base_6_gated_we =
    range_base_6_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_6_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_6_gated_we),
    .wd     (range_base_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_6_qs)
  );


  // Subregister 7 of Multireg range_base
  // R[range_base_7]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_7_gated_we;
  assign range_base_7_gated_we =
    range_base_7_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_7_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_7_gated_we),
    .wd     (range_base_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_7_qs)
  );


  // Subregister 8 of Multireg range_base
  // R[range_base_8]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_8_gated_we;
  assign range_base_8_gated_we =
    range_base_8_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_8_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_8_gated_we),
    .wd     (range_base_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_8_qs)
  );


  // Subregister 9 of Multireg range_base
  // R[range_base_9]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_9_gated_we;
  assign range_base_9_gated_we =
    range_base_9_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_9_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_9_gated_we),
    .wd     (range_base_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_9_qs)
  );


  // Subregister 10 of Multireg range_base
  // R[range_base_10]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_10_gated_we;
  assign range_base_10_gated_we =
    range_base_10_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_10_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_10_gated_we),
    .wd     (range_base_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_10_qs)
  );


  // Subregister 11 of Multireg range_base
  // R[range_base_11]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_11_gated_we;
  assign range_base_11_gated_we =
    range_base_11_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_11_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_11_gated_we),
    .wd     (range_base_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_11_qs)
  );


  // Subregister 12 of Multireg range_base
  // R[range_base_12]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_12_gated_we;
  assign range_base_12_gated_we =
    range_base_12_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_12_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_12_gated_we),
    .wd     (range_base_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_12_qs)
  );


  // Subregister 13 of Multireg range_base
  // R[range_base_13]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_13_gated_we;
  assign range_base_13_gated_we =
    range_base_13_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_13_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_13_gated_we),
    .wd     (range_base_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_13_qs)
  );


  // Subregister 14 of Multireg range_base
  // R[range_base_14]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_14_gated_we;
  assign range_base_14_gated_we =
    range_base_14_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_14_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_14_gated_we),
    .wd     (range_base_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_14_qs)
  );


  // Subregister 15 of Multireg range_base
  // R[range_base_15]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_15_gated_we;
  assign range_base_15_gated_we =
    range_base_15_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_15_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_15_gated_we),
    .wd     (range_base_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_15_qs)
  );


  // Subregister 16 of Multireg range_base
  // R[range_base_16]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_16_gated_we;
  assign range_base_16_gated_we =
    range_base_16_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_16_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_16_gated_we),
    .wd     (range_base_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_16_qs)
  );


  // Subregister 17 of Multireg range_base
  // R[range_base_17]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_17_gated_we;
  assign range_base_17_gated_we =
    range_base_17_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_17_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_17_gated_we),
    .wd     (range_base_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_17_qs)
  );


  // Subregister 18 of Multireg range_base
  // R[range_base_18]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_18_gated_we;
  assign range_base_18_gated_we =
    range_base_18_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_18_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_18_gated_we),
    .wd     (range_base_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_18_qs)
  );


  // Subregister 19 of Multireg range_base
  // R[range_base_19]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_19_gated_we;
  assign range_base_19_gated_we =
    range_base_19_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_19_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_19_gated_we),
    .wd     (range_base_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_19_qs)
  );


  // Subregister 20 of Multireg range_base
  // R[range_base_20]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_20_gated_we;
  assign range_base_20_gated_we =
    range_base_20_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_20_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_20_gated_we),
    .wd     (range_base_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_20_qs)
  );


  // Subregister 21 of Multireg range_base
  // R[range_base_21]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_21_gated_we;
  assign range_base_21_gated_we =
    range_base_21_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_21_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_21_gated_we),
    .wd     (range_base_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_21_qs)
  );


  // Subregister 22 of Multireg range_base
  // R[range_base_22]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_22_gated_we;
  assign range_base_22_gated_we =
    range_base_22_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_22_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_22_gated_we),
    .wd     (range_base_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_22_qs)
  );


  // Subregister 23 of Multireg range_base
  // R[range_base_23]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_23_gated_we;
  assign range_base_23_gated_we =
    range_base_23_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_23_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_23_gated_we),
    .wd     (range_base_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_23_qs)
  );


  // Subregister 24 of Multireg range_base
  // R[range_base_24]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_24_gated_we;
  assign range_base_24_gated_we =
    range_base_24_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_24_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_24_gated_we),
    .wd     (range_base_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_24_qs)
  );


  // Subregister 25 of Multireg range_base
  // R[range_base_25]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_25_gated_we;
  assign range_base_25_gated_we =
    range_base_25_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_25_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_25_gated_we),
    .wd     (range_base_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_25_qs)
  );


  // Subregister 26 of Multireg range_base
  // R[range_base_26]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_26_gated_we;
  assign range_base_26_gated_we =
    range_base_26_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_26_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_26_gated_we),
    .wd     (range_base_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_26_qs)
  );


  // Subregister 27 of Multireg range_base
  // R[range_base_27]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_27_gated_we;
  assign range_base_27_gated_we =
    range_base_27_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_27_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_27_gated_we),
    .wd     (range_base_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_27_qs)
  );


  // Subregister 28 of Multireg range_base
  // R[range_base_28]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_28_gated_we;
  assign range_base_28_gated_we =
    range_base_28_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_28_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_28_gated_we),
    .wd     (range_base_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_28_qs)
  );


  // Subregister 29 of Multireg range_base
  // R[range_base_29]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_29_gated_we;
  assign range_base_29_gated_we =
    range_base_29_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_29_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_29_gated_we),
    .wd     (range_base_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_29_qs)
  );


  // Subregister 30 of Multireg range_base
  // R[range_base_30]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_30_gated_we;
  assign range_base_30_gated_we =
    range_base_30_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_30_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_30_gated_we),
    .wd     (range_base_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_30_qs)
  );


  // Subregister 31 of Multireg range_base
  // R[range_base_31]: V(False)
  // Create REGWEN-gated WE signal
  logic range_base_31_gated_we;
  assign range_base_31_gated_we =
    range_base_31_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_31_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_base_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_base_31_gated_we),
    .wd     (range_base_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_base[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_base_31_qs)
  );


  // Subregister 0 of Multireg range_limit
  // R[range_limit_0]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_0_gated_we;
  assign range_limit_0_gated_we =
    range_limit_0_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_0_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_0_gated_we),
    .wd     (range_limit_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_0_qs)
  );


  // Subregister 1 of Multireg range_limit
  // R[range_limit_1]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_1_gated_we;
  assign range_limit_1_gated_we =
    range_limit_1_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_1_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_1_gated_we),
    .wd     (range_limit_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_1_qs)
  );


  // Subregister 2 of Multireg range_limit
  // R[range_limit_2]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_2_gated_we;
  assign range_limit_2_gated_we =
    range_limit_2_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_2_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_2_gated_we),
    .wd     (range_limit_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_2_qs)
  );


  // Subregister 3 of Multireg range_limit
  // R[range_limit_3]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_3_gated_we;
  assign range_limit_3_gated_we =
    range_limit_3_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_3_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_3_gated_we),
    .wd     (range_limit_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_3_qs)
  );


  // Subregister 4 of Multireg range_limit
  // R[range_limit_4]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_4_gated_we;
  assign range_limit_4_gated_we =
    range_limit_4_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_4_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_4_gated_we),
    .wd     (range_limit_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_4_qs)
  );


  // Subregister 5 of Multireg range_limit
  // R[range_limit_5]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_5_gated_we;
  assign range_limit_5_gated_we =
    range_limit_5_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_5_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_5_gated_we),
    .wd     (range_limit_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_5_qs)
  );


  // Subregister 6 of Multireg range_limit
  // R[range_limit_6]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_6_gated_we;
  assign range_limit_6_gated_we =
    range_limit_6_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_6_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_6_gated_we),
    .wd     (range_limit_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_6_qs)
  );


  // Subregister 7 of Multireg range_limit
  // R[range_limit_7]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_7_gated_we;
  assign range_limit_7_gated_we =
    range_limit_7_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_7_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_7_gated_we),
    .wd     (range_limit_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_7_qs)
  );


  // Subregister 8 of Multireg range_limit
  // R[range_limit_8]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_8_gated_we;
  assign range_limit_8_gated_we =
    range_limit_8_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_8_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_8_gated_we),
    .wd     (range_limit_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_8_qs)
  );


  // Subregister 9 of Multireg range_limit
  // R[range_limit_9]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_9_gated_we;
  assign range_limit_9_gated_we =
    range_limit_9_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_9_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_9_gated_we),
    .wd     (range_limit_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_9_qs)
  );


  // Subregister 10 of Multireg range_limit
  // R[range_limit_10]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_10_gated_we;
  assign range_limit_10_gated_we =
    range_limit_10_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_10_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_10_gated_we),
    .wd     (range_limit_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_10_qs)
  );


  // Subregister 11 of Multireg range_limit
  // R[range_limit_11]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_11_gated_we;
  assign range_limit_11_gated_we =
    range_limit_11_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_11_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_11_gated_we),
    .wd     (range_limit_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_11_qs)
  );


  // Subregister 12 of Multireg range_limit
  // R[range_limit_12]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_12_gated_we;
  assign range_limit_12_gated_we =
    range_limit_12_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_12_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_12_gated_we),
    .wd     (range_limit_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_12_qs)
  );


  // Subregister 13 of Multireg range_limit
  // R[range_limit_13]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_13_gated_we;
  assign range_limit_13_gated_we =
    range_limit_13_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_13_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_13_gated_we),
    .wd     (range_limit_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_13_qs)
  );


  // Subregister 14 of Multireg range_limit
  // R[range_limit_14]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_14_gated_we;
  assign range_limit_14_gated_we =
    range_limit_14_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_14_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_14_gated_we),
    .wd     (range_limit_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_14_qs)
  );


  // Subregister 15 of Multireg range_limit
  // R[range_limit_15]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_15_gated_we;
  assign range_limit_15_gated_we =
    range_limit_15_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_15_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_15_gated_we),
    .wd     (range_limit_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_15_qs)
  );


  // Subregister 16 of Multireg range_limit
  // R[range_limit_16]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_16_gated_we;
  assign range_limit_16_gated_we =
    range_limit_16_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_16_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_16_gated_we),
    .wd     (range_limit_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_16_qs)
  );


  // Subregister 17 of Multireg range_limit
  // R[range_limit_17]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_17_gated_we;
  assign range_limit_17_gated_we =
    range_limit_17_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_17_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_17_gated_we),
    .wd     (range_limit_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_17_qs)
  );


  // Subregister 18 of Multireg range_limit
  // R[range_limit_18]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_18_gated_we;
  assign range_limit_18_gated_we =
    range_limit_18_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_18_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_18_gated_we),
    .wd     (range_limit_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_18_qs)
  );


  // Subregister 19 of Multireg range_limit
  // R[range_limit_19]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_19_gated_we;
  assign range_limit_19_gated_we =
    range_limit_19_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_19_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_19_gated_we),
    .wd     (range_limit_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_19_qs)
  );


  // Subregister 20 of Multireg range_limit
  // R[range_limit_20]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_20_gated_we;
  assign range_limit_20_gated_we =
    range_limit_20_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_20_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_20_gated_we),
    .wd     (range_limit_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_20_qs)
  );


  // Subregister 21 of Multireg range_limit
  // R[range_limit_21]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_21_gated_we;
  assign range_limit_21_gated_we =
    range_limit_21_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_21_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_21_gated_we),
    .wd     (range_limit_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_21_qs)
  );


  // Subregister 22 of Multireg range_limit
  // R[range_limit_22]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_22_gated_we;
  assign range_limit_22_gated_we =
    range_limit_22_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_22_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_22_gated_we),
    .wd     (range_limit_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_22_qs)
  );


  // Subregister 23 of Multireg range_limit
  // R[range_limit_23]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_23_gated_we;
  assign range_limit_23_gated_we =
    range_limit_23_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_23_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_23_gated_we),
    .wd     (range_limit_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_23_qs)
  );


  // Subregister 24 of Multireg range_limit
  // R[range_limit_24]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_24_gated_we;
  assign range_limit_24_gated_we =
    range_limit_24_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_24_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_24_gated_we),
    .wd     (range_limit_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_24_qs)
  );


  // Subregister 25 of Multireg range_limit
  // R[range_limit_25]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_25_gated_we;
  assign range_limit_25_gated_we =
    range_limit_25_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_25_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_25_gated_we),
    .wd     (range_limit_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_25_qs)
  );


  // Subregister 26 of Multireg range_limit
  // R[range_limit_26]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_26_gated_we;
  assign range_limit_26_gated_we =
    range_limit_26_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_26_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_26_gated_we),
    .wd     (range_limit_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_26_qs)
  );


  // Subregister 27 of Multireg range_limit
  // R[range_limit_27]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_27_gated_we;
  assign range_limit_27_gated_we =
    range_limit_27_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_27_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_27_gated_we),
    .wd     (range_limit_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_27_qs)
  );


  // Subregister 28 of Multireg range_limit
  // R[range_limit_28]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_28_gated_we;
  assign range_limit_28_gated_we =
    range_limit_28_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_28_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_28_gated_we),
    .wd     (range_limit_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_28_qs)
  );


  // Subregister 29 of Multireg range_limit
  // R[range_limit_29]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_29_gated_we;
  assign range_limit_29_gated_we =
    range_limit_29_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_29_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_29_gated_we),
    .wd     (range_limit_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_29_qs)
  );


  // Subregister 30 of Multireg range_limit
  // R[range_limit_30]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_30_gated_we;
  assign range_limit_30_gated_we =
    range_limit_30_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_30_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_30_gated_we),
    .wd     (range_limit_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_30_qs)
  );


  // Subregister 31 of Multireg range_limit
  // R[range_limit_31]: V(False)
  // Create REGWEN-gated WE signal
  logic range_limit_31_gated_we;
  assign range_limit_31_gated_we =
    range_limit_31_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_31_qs));
  prim_subreg #(
    .DW      (30),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (30'h0),
    .Mubi    (1'b0)
  ) u_range_limit_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_limit_31_gated_we),
    .wd     (range_limit_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_limit[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (range_limit_31_qs)
  );


  // Subregister 0 of Multireg range_perm
  // R[range_perm_0]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_0_gated_we;
  assign range_perm_0_gated_we =
    range_perm_0_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_0_qs));
  //   F[enable_0]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_0_enable_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_0_gated_we),
    .wd     (range_perm_0_enable_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[0].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_0_enable_0_qs)
  );

  //   F[read_access_0]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_0_read_access_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_0_gated_we),
    .wd     (range_perm_0_read_access_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[0].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_0_read_access_0_qs)
  );

  //   F[write_access_0]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_0_write_access_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_0_gated_we),
    .wd     (range_perm_0_write_access_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[0].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_0_write_access_0_qs)
  );

  //   F[execute_access_0]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_0_execute_access_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_0_gated_we),
    .wd     (range_perm_0_execute_access_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[0].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_0_execute_access_0_qs)
  );

  //   F[log_denied_access_0]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_0_log_denied_access_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_0_gated_we),
    .wd     (range_perm_0_log_denied_access_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[0].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_0_log_denied_access_0_qs)
  );


  // Subregister 1 of Multireg range_perm
  // R[range_perm_1]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_1_gated_we;
  assign range_perm_1_gated_we =
    range_perm_1_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_1_qs));
  //   F[enable_1]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_1_enable_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_1_gated_we),
    .wd     (range_perm_1_enable_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[1].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_1_enable_1_qs)
  );

  //   F[read_access_1]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_1_read_access_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_1_gated_we),
    .wd     (range_perm_1_read_access_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[1].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_1_read_access_1_qs)
  );

  //   F[write_access_1]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_1_write_access_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_1_gated_we),
    .wd     (range_perm_1_write_access_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[1].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_1_write_access_1_qs)
  );

  //   F[execute_access_1]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_1_execute_access_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_1_gated_we),
    .wd     (range_perm_1_execute_access_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[1].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_1_execute_access_1_qs)
  );

  //   F[log_denied_access_1]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_1_log_denied_access_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_1_gated_we),
    .wd     (range_perm_1_log_denied_access_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[1].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_1_log_denied_access_1_qs)
  );


  // Subregister 2 of Multireg range_perm
  // R[range_perm_2]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_2_gated_we;
  assign range_perm_2_gated_we =
    range_perm_2_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_2_qs));
  //   F[enable_2]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_2_enable_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_2_gated_we),
    .wd     (range_perm_2_enable_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[2].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_2_enable_2_qs)
  );

  //   F[read_access_2]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_2_read_access_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_2_gated_we),
    .wd     (range_perm_2_read_access_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[2].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_2_read_access_2_qs)
  );

  //   F[write_access_2]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_2_write_access_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_2_gated_we),
    .wd     (range_perm_2_write_access_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[2].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_2_write_access_2_qs)
  );

  //   F[execute_access_2]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_2_execute_access_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_2_gated_we),
    .wd     (range_perm_2_execute_access_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[2].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_2_execute_access_2_qs)
  );

  //   F[log_denied_access_2]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_2_log_denied_access_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_2_gated_we),
    .wd     (range_perm_2_log_denied_access_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[2].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_2_log_denied_access_2_qs)
  );


  // Subregister 3 of Multireg range_perm
  // R[range_perm_3]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_3_gated_we;
  assign range_perm_3_gated_we =
    range_perm_3_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_3_qs));
  //   F[enable_3]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_3_enable_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_3_gated_we),
    .wd     (range_perm_3_enable_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[3].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_3_enable_3_qs)
  );

  //   F[read_access_3]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_3_read_access_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_3_gated_we),
    .wd     (range_perm_3_read_access_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[3].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_3_read_access_3_qs)
  );

  //   F[write_access_3]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_3_write_access_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_3_gated_we),
    .wd     (range_perm_3_write_access_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[3].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_3_write_access_3_qs)
  );

  //   F[execute_access_3]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_3_execute_access_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_3_gated_we),
    .wd     (range_perm_3_execute_access_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[3].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_3_execute_access_3_qs)
  );

  //   F[log_denied_access_3]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_3_log_denied_access_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_3_gated_we),
    .wd     (range_perm_3_log_denied_access_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[3].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_3_log_denied_access_3_qs)
  );


  // Subregister 4 of Multireg range_perm
  // R[range_perm_4]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_4_gated_we;
  assign range_perm_4_gated_we =
    range_perm_4_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_4_qs));
  //   F[enable_4]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_4_enable_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_4_gated_we),
    .wd     (range_perm_4_enable_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[4].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_4_enable_4_qs)
  );

  //   F[read_access_4]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_4_read_access_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_4_gated_we),
    .wd     (range_perm_4_read_access_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[4].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_4_read_access_4_qs)
  );

  //   F[write_access_4]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_4_write_access_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_4_gated_we),
    .wd     (range_perm_4_write_access_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[4].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_4_write_access_4_qs)
  );

  //   F[execute_access_4]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_4_execute_access_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_4_gated_we),
    .wd     (range_perm_4_execute_access_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[4].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_4_execute_access_4_qs)
  );

  //   F[log_denied_access_4]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_4_log_denied_access_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_4_gated_we),
    .wd     (range_perm_4_log_denied_access_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[4].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_4_log_denied_access_4_qs)
  );


  // Subregister 5 of Multireg range_perm
  // R[range_perm_5]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_5_gated_we;
  assign range_perm_5_gated_we =
    range_perm_5_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_5_qs));
  //   F[enable_5]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_5_enable_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_5_gated_we),
    .wd     (range_perm_5_enable_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[5].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_5_enable_5_qs)
  );

  //   F[read_access_5]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_5_read_access_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_5_gated_we),
    .wd     (range_perm_5_read_access_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[5].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_5_read_access_5_qs)
  );

  //   F[write_access_5]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_5_write_access_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_5_gated_we),
    .wd     (range_perm_5_write_access_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[5].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_5_write_access_5_qs)
  );

  //   F[execute_access_5]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_5_execute_access_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_5_gated_we),
    .wd     (range_perm_5_execute_access_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[5].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_5_execute_access_5_qs)
  );

  //   F[log_denied_access_5]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_5_log_denied_access_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_5_gated_we),
    .wd     (range_perm_5_log_denied_access_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[5].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_5_log_denied_access_5_qs)
  );


  // Subregister 6 of Multireg range_perm
  // R[range_perm_6]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_6_gated_we;
  assign range_perm_6_gated_we =
    range_perm_6_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_6_qs));
  //   F[enable_6]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_6_enable_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_6_gated_we),
    .wd     (range_perm_6_enable_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[6].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_6_enable_6_qs)
  );

  //   F[read_access_6]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_6_read_access_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_6_gated_we),
    .wd     (range_perm_6_read_access_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[6].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_6_read_access_6_qs)
  );

  //   F[write_access_6]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_6_write_access_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_6_gated_we),
    .wd     (range_perm_6_write_access_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[6].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_6_write_access_6_qs)
  );

  //   F[execute_access_6]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_6_execute_access_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_6_gated_we),
    .wd     (range_perm_6_execute_access_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[6].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_6_execute_access_6_qs)
  );

  //   F[log_denied_access_6]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_6_log_denied_access_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_6_gated_we),
    .wd     (range_perm_6_log_denied_access_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[6].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_6_log_denied_access_6_qs)
  );


  // Subregister 7 of Multireg range_perm
  // R[range_perm_7]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_7_gated_we;
  assign range_perm_7_gated_we =
    range_perm_7_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_7_qs));
  //   F[enable_7]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_7_enable_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_7_gated_we),
    .wd     (range_perm_7_enable_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[7].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_7_enable_7_qs)
  );

  //   F[read_access_7]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_7_read_access_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_7_gated_we),
    .wd     (range_perm_7_read_access_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[7].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_7_read_access_7_qs)
  );

  //   F[write_access_7]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_7_write_access_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_7_gated_we),
    .wd     (range_perm_7_write_access_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[7].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_7_write_access_7_qs)
  );

  //   F[execute_access_7]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_7_execute_access_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_7_gated_we),
    .wd     (range_perm_7_execute_access_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[7].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_7_execute_access_7_qs)
  );

  //   F[log_denied_access_7]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_7_log_denied_access_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_7_gated_we),
    .wd     (range_perm_7_log_denied_access_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[7].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_7_log_denied_access_7_qs)
  );


  // Subregister 8 of Multireg range_perm
  // R[range_perm_8]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_8_gated_we;
  assign range_perm_8_gated_we =
    range_perm_8_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_8_qs));
  //   F[enable_8]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_8_enable_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_8_gated_we),
    .wd     (range_perm_8_enable_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[8].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_8_enable_8_qs)
  );

  //   F[read_access_8]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_8_read_access_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_8_gated_we),
    .wd     (range_perm_8_read_access_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[8].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_8_read_access_8_qs)
  );

  //   F[write_access_8]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_8_write_access_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_8_gated_we),
    .wd     (range_perm_8_write_access_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[8].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_8_write_access_8_qs)
  );

  //   F[execute_access_8]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_8_execute_access_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_8_gated_we),
    .wd     (range_perm_8_execute_access_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[8].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_8_execute_access_8_qs)
  );

  //   F[log_denied_access_8]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_8_log_denied_access_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_8_gated_we),
    .wd     (range_perm_8_log_denied_access_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[8].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_8_log_denied_access_8_qs)
  );


  // Subregister 9 of Multireg range_perm
  // R[range_perm_9]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_9_gated_we;
  assign range_perm_9_gated_we =
    range_perm_9_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_9_qs));
  //   F[enable_9]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_9_enable_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_9_gated_we),
    .wd     (range_perm_9_enable_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[9].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_9_enable_9_qs)
  );

  //   F[read_access_9]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_9_read_access_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_9_gated_we),
    .wd     (range_perm_9_read_access_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[9].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_9_read_access_9_qs)
  );

  //   F[write_access_9]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_9_write_access_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_9_gated_we),
    .wd     (range_perm_9_write_access_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[9].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_9_write_access_9_qs)
  );

  //   F[execute_access_9]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_9_execute_access_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_9_gated_we),
    .wd     (range_perm_9_execute_access_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[9].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_9_execute_access_9_qs)
  );

  //   F[log_denied_access_9]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_9_log_denied_access_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_9_gated_we),
    .wd     (range_perm_9_log_denied_access_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[9].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_9_log_denied_access_9_qs)
  );


  // Subregister 10 of Multireg range_perm
  // R[range_perm_10]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_10_gated_we;
  assign range_perm_10_gated_we =
    range_perm_10_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_10_qs));
  //   F[enable_10]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_10_enable_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_10_gated_we),
    .wd     (range_perm_10_enable_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[10].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_10_enable_10_qs)
  );

  //   F[read_access_10]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_10_read_access_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_10_gated_we),
    .wd     (range_perm_10_read_access_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[10].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_10_read_access_10_qs)
  );

  //   F[write_access_10]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_10_write_access_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_10_gated_we),
    .wd     (range_perm_10_write_access_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[10].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_10_write_access_10_qs)
  );

  //   F[execute_access_10]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_10_execute_access_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_10_gated_we),
    .wd     (range_perm_10_execute_access_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[10].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_10_execute_access_10_qs)
  );

  //   F[log_denied_access_10]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_10_log_denied_access_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_10_gated_we),
    .wd     (range_perm_10_log_denied_access_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[10].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_10_log_denied_access_10_qs)
  );


  // Subregister 11 of Multireg range_perm
  // R[range_perm_11]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_11_gated_we;
  assign range_perm_11_gated_we =
    range_perm_11_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_11_qs));
  //   F[enable_11]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_11_enable_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_11_gated_we),
    .wd     (range_perm_11_enable_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[11].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_11_enable_11_qs)
  );

  //   F[read_access_11]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_11_read_access_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_11_gated_we),
    .wd     (range_perm_11_read_access_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[11].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_11_read_access_11_qs)
  );

  //   F[write_access_11]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_11_write_access_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_11_gated_we),
    .wd     (range_perm_11_write_access_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[11].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_11_write_access_11_qs)
  );

  //   F[execute_access_11]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_11_execute_access_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_11_gated_we),
    .wd     (range_perm_11_execute_access_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[11].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_11_execute_access_11_qs)
  );

  //   F[log_denied_access_11]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_11_log_denied_access_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_11_gated_we),
    .wd     (range_perm_11_log_denied_access_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[11].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_11_log_denied_access_11_qs)
  );


  // Subregister 12 of Multireg range_perm
  // R[range_perm_12]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_12_gated_we;
  assign range_perm_12_gated_we =
    range_perm_12_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_12_qs));
  //   F[enable_12]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_12_enable_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_12_gated_we),
    .wd     (range_perm_12_enable_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[12].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_12_enable_12_qs)
  );

  //   F[read_access_12]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_12_read_access_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_12_gated_we),
    .wd     (range_perm_12_read_access_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[12].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_12_read_access_12_qs)
  );

  //   F[write_access_12]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_12_write_access_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_12_gated_we),
    .wd     (range_perm_12_write_access_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[12].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_12_write_access_12_qs)
  );

  //   F[execute_access_12]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_12_execute_access_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_12_gated_we),
    .wd     (range_perm_12_execute_access_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[12].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_12_execute_access_12_qs)
  );

  //   F[log_denied_access_12]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_12_log_denied_access_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_12_gated_we),
    .wd     (range_perm_12_log_denied_access_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[12].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_12_log_denied_access_12_qs)
  );


  // Subregister 13 of Multireg range_perm
  // R[range_perm_13]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_13_gated_we;
  assign range_perm_13_gated_we =
    range_perm_13_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_13_qs));
  //   F[enable_13]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_13_enable_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_13_gated_we),
    .wd     (range_perm_13_enable_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[13].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_13_enable_13_qs)
  );

  //   F[read_access_13]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_13_read_access_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_13_gated_we),
    .wd     (range_perm_13_read_access_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[13].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_13_read_access_13_qs)
  );

  //   F[write_access_13]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_13_write_access_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_13_gated_we),
    .wd     (range_perm_13_write_access_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[13].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_13_write_access_13_qs)
  );

  //   F[execute_access_13]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_13_execute_access_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_13_gated_we),
    .wd     (range_perm_13_execute_access_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[13].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_13_execute_access_13_qs)
  );

  //   F[log_denied_access_13]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_13_log_denied_access_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_13_gated_we),
    .wd     (range_perm_13_log_denied_access_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[13].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_13_log_denied_access_13_qs)
  );


  // Subregister 14 of Multireg range_perm
  // R[range_perm_14]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_14_gated_we;
  assign range_perm_14_gated_we =
    range_perm_14_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_14_qs));
  //   F[enable_14]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_14_enable_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_14_gated_we),
    .wd     (range_perm_14_enable_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[14].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_14_enable_14_qs)
  );

  //   F[read_access_14]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_14_read_access_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_14_gated_we),
    .wd     (range_perm_14_read_access_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[14].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_14_read_access_14_qs)
  );

  //   F[write_access_14]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_14_write_access_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_14_gated_we),
    .wd     (range_perm_14_write_access_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[14].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_14_write_access_14_qs)
  );

  //   F[execute_access_14]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_14_execute_access_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_14_gated_we),
    .wd     (range_perm_14_execute_access_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[14].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_14_execute_access_14_qs)
  );

  //   F[log_denied_access_14]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_14_log_denied_access_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_14_gated_we),
    .wd     (range_perm_14_log_denied_access_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[14].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_14_log_denied_access_14_qs)
  );


  // Subregister 15 of Multireg range_perm
  // R[range_perm_15]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_15_gated_we;
  assign range_perm_15_gated_we =
    range_perm_15_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_15_qs));
  //   F[enable_15]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_15_enable_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_15_gated_we),
    .wd     (range_perm_15_enable_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[15].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_15_enable_15_qs)
  );

  //   F[read_access_15]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_15_read_access_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_15_gated_we),
    .wd     (range_perm_15_read_access_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[15].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_15_read_access_15_qs)
  );

  //   F[write_access_15]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_15_write_access_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_15_gated_we),
    .wd     (range_perm_15_write_access_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[15].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_15_write_access_15_qs)
  );

  //   F[execute_access_15]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_15_execute_access_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_15_gated_we),
    .wd     (range_perm_15_execute_access_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[15].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_15_execute_access_15_qs)
  );

  //   F[log_denied_access_15]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_15_log_denied_access_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_15_gated_we),
    .wd     (range_perm_15_log_denied_access_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[15].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_15_log_denied_access_15_qs)
  );


  // Subregister 16 of Multireg range_perm
  // R[range_perm_16]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_16_gated_we;
  assign range_perm_16_gated_we =
    range_perm_16_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_16_qs));
  //   F[enable_16]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_16_enable_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_16_gated_we),
    .wd     (range_perm_16_enable_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[16].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_16_enable_16_qs)
  );

  //   F[read_access_16]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_16_read_access_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_16_gated_we),
    .wd     (range_perm_16_read_access_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[16].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_16_read_access_16_qs)
  );

  //   F[write_access_16]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_16_write_access_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_16_gated_we),
    .wd     (range_perm_16_write_access_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[16].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_16_write_access_16_qs)
  );

  //   F[execute_access_16]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_16_execute_access_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_16_gated_we),
    .wd     (range_perm_16_execute_access_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[16].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_16_execute_access_16_qs)
  );

  //   F[log_denied_access_16]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_16_log_denied_access_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_16_gated_we),
    .wd     (range_perm_16_log_denied_access_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[16].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_16_log_denied_access_16_qs)
  );


  // Subregister 17 of Multireg range_perm
  // R[range_perm_17]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_17_gated_we;
  assign range_perm_17_gated_we =
    range_perm_17_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_17_qs));
  //   F[enable_17]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_17_enable_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_17_gated_we),
    .wd     (range_perm_17_enable_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[17].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_17_enable_17_qs)
  );

  //   F[read_access_17]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_17_read_access_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_17_gated_we),
    .wd     (range_perm_17_read_access_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[17].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_17_read_access_17_qs)
  );

  //   F[write_access_17]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_17_write_access_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_17_gated_we),
    .wd     (range_perm_17_write_access_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[17].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_17_write_access_17_qs)
  );

  //   F[execute_access_17]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_17_execute_access_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_17_gated_we),
    .wd     (range_perm_17_execute_access_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[17].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_17_execute_access_17_qs)
  );

  //   F[log_denied_access_17]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_17_log_denied_access_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_17_gated_we),
    .wd     (range_perm_17_log_denied_access_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[17].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_17_log_denied_access_17_qs)
  );


  // Subregister 18 of Multireg range_perm
  // R[range_perm_18]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_18_gated_we;
  assign range_perm_18_gated_we =
    range_perm_18_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_18_qs));
  //   F[enable_18]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_18_enable_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_18_gated_we),
    .wd     (range_perm_18_enable_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[18].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_18_enable_18_qs)
  );

  //   F[read_access_18]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_18_read_access_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_18_gated_we),
    .wd     (range_perm_18_read_access_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[18].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_18_read_access_18_qs)
  );

  //   F[write_access_18]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_18_write_access_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_18_gated_we),
    .wd     (range_perm_18_write_access_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[18].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_18_write_access_18_qs)
  );

  //   F[execute_access_18]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_18_execute_access_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_18_gated_we),
    .wd     (range_perm_18_execute_access_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[18].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_18_execute_access_18_qs)
  );

  //   F[log_denied_access_18]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_18_log_denied_access_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_18_gated_we),
    .wd     (range_perm_18_log_denied_access_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[18].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_18_log_denied_access_18_qs)
  );


  // Subregister 19 of Multireg range_perm
  // R[range_perm_19]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_19_gated_we;
  assign range_perm_19_gated_we =
    range_perm_19_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_19_qs));
  //   F[enable_19]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_19_enable_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_19_gated_we),
    .wd     (range_perm_19_enable_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[19].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_19_enable_19_qs)
  );

  //   F[read_access_19]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_19_read_access_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_19_gated_we),
    .wd     (range_perm_19_read_access_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[19].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_19_read_access_19_qs)
  );

  //   F[write_access_19]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_19_write_access_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_19_gated_we),
    .wd     (range_perm_19_write_access_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[19].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_19_write_access_19_qs)
  );

  //   F[execute_access_19]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_19_execute_access_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_19_gated_we),
    .wd     (range_perm_19_execute_access_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[19].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_19_execute_access_19_qs)
  );

  //   F[log_denied_access_19]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_19_log_denied_access_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_19_gated_we),
    .wd     (range_perm_19_log_denied_access_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[19].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_19_log_denied_access_19_qs)
  );


  // Subregister 20 of Multireg range_perm
  // R[range_perm_20]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_20_gated_we;
  assign range_perm_20_gated_we =
    range_perm_20_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_20_qs));
  //   F[enable_20]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_20_enable_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_20_gated_we),
    .wd     (range_perm_20_enable_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[20].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_20_enable_20_qs)
  );

  //   F[read_access_20]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_20_read_access_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_20_gated_we),
    .wd     (range_perm_20_read_access_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[20].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_20_read_access_20_qs)
  );

  //   F[write_access_20]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_20_write_access_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_20_gated_we),
    .wd     (range_perm_20_write_access_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[20].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_20_write_access_20_qs)
  );

  //   F[execute_access_20]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_20_execute_access_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_20_gated_we),
    .wd     (range_perm_20_execute_access_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[20].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_20_execute_access_20_qs)
  );

  //   F[log_denied_access_20]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_20_log_denied_access_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_20_gated_we),
    .wd     (range_perm_20_log_denied_access_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[20].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_20_log_denied_access_20_qs)
  );


  // Subregister 21 of Multireg range_perm
  // R[range_perm_21]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_21_gated_we;
  assign range_perm_21_gated_we =
    range_perm_21_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_21_qs));
  //   F[enable_21]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_21_enable_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_21_gated_we),
    .wd     (range_perm_21_enable_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[21].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_21_enable_21_qs)
  );

  //   F[read_access_21]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_21_read_access_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_21_gated_we),
    .wd     (range_perm_21_read_access_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[21].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_21_read_access_21_qs)
  );

  //   F[write_access_21]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_21_write_access_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_21_gated_we),
    .wd     (range_perm_21_write_access_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[21].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_21_write_access_21_qs)
  );

  //   F[execute_access_21]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_21_execute_access_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_21_gated_we),
    .wd     (range_perm_21_execute_access_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[21].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_21_execute_access_21_qs)
  );

  //   F[log_denied_access_21]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_21_log_denied_access_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_21_gated_we),
    .wd     (range_perm_21_log_denied_access_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[21].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_21_log_denied_access_21_qs)
  );


  // Subregister 22 of Multireg range_perm
  // R[range_perm_22]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_22_gated_we;
  assign range_perm_22_gated_we =
    range_perm_22_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_22_qs));
  //   F[enable_22]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_22_enable_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_22_gated_we),
    .wd     (range_perm_22_enable_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[22].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_22_enable_22_qs)
  );

  //   F[read_access_22]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_22_read_access_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_22_gated_we),
    .wd     (range_perm_22_read_access_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[22].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_22_read_access_22_qs)
  );

  //   F[write_access_22]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_22_write_access_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_22_gated_we),
    .wd     (range_perm_22_write_access_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[22].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_22_write_access_22_qs)
  );

  //   F[execute_access_22]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_22_execute_access_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_22_gated_we),
    .wd     (range_perm_22_execute_access_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[22].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_22_execute_access_22_qs)
  );

  //   F[log_denied_access_22]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_22_log_denied_access_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_22_gated_we),
    .wd     (range_perm_22_log_denied_access_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[22].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_22_log_denied_access_22_qs)
  );


  // Subregister 23 of Multireg range_perm
  // R[range_perm_23]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_23_gated_we;
  assign range_perm_23_gated_we =
    range_perm_23_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_23_qs));
  //   F[enable_23]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_23_enable_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_23_gated_we),
    .wd     (range_perm_23_enable_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[23].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_23_enable_23_qs)
  );

  //   F[read_access_23]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_23_read_access_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_23_gated_we),
    .wd     (range_perm_23_read_access_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[23].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_23_read_access_23_qs)
  );

  //   F[write_access_23]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_23_write_access_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_23_gated_we),
    .wd     (range_perm_23_write_access_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[23].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_23_write_access_23_qs)
  );

  //   F[execute_access_23]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_23_execute_access_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_23_gated_we),
    .wd     (range_perm_23_execute_access_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[23].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_23_execute_access_23_qs)
  );

  //   F[log_denied_access_23]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_23_log_denied_access_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_23_gated_we),
    .wd     (range_perm_23_log_denied_access_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[23].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_23_log_denied_access_23_qs)
  );


  // Subregister 24 of Multireg range_perm
  // R[range_perm_24]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_24_gated_we;
  assign range_perm_24_gated_we =
    range_perm_24_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_24_qs));
  //   F[enable_24]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_24_enable_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_24_gated_we),
    .wd     (range_perm_24_enable_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[24].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_24_enable_24_qs)
  );

  //   F[read_access_24]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_24_read_access_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_24_gated_we),
    .wd     (range_perm_24_read_access_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[24].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_24_read_access_24_qs)
  );

  //   F[write_access_24]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_24_write_access_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_24_gated_we),
    .wd     (range_perm_24_write_access_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[24].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_24_write_access_24_qs)
  );

  //   F[execute_access_24]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_24_execute_access_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_24_gated_we),
    .wd     (range_perm_24_execute_access_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[24].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_24_execute_access_24_qs)
  );

  //   F[log_denied_access_24]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_24_log_denied_access_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_24_gated_we),
    .wd     (range_perm_24_log_denied_access_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[24].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_24_log_denied_access_24_qs)
  );


  // Subregister 25 of Multireg range_perm
  // R[range_perm_25]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_25_gated_we;
  assign range_perm_25_gated_we =
    range_perm_25_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_25_qs));
  //   F[enable_25]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_25_enable_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_25_gated_we),
    .wd     (range_perm_25_enable_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[25].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_25_enable_25_qs)
  );

  //   F[read_access_25]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_25_read_access_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_25_gated_we),
    .wd     (range_perm_25_read_access_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[25].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_25_read_access_25_qs)
  );

  //   F[write_access_25]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_25_write_access_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_25_gated_we),
    .wd     (range_perm_25_write_access_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[25].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_25_write_access_25_qs)
  );

  //   F[execute_access_25]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_25_execute_access_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_25_gated_we),
    .wd     (range_perm_25_execute_access_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[25].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_25_execute_access_25_qs)
  );

  //   F[log_denied_access_25]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_25_log_denied_access_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_25_gated_we),
    .wd     (range_perm_25_log_denied_access_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[25].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_25_log_denied_access_25_qs)
  );


  // Subregister 26 of Multireg range_perm
  // R[range_perm_26]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_26_gated_we;
  assign range_perm_26_gated_we =
    range_perm_26_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_26_qs));
  //   F[enable_26]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_26_enable_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_26_gated_we),
    .wd     (range_perm_26_enable_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[26].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_26_enable_26_qs)
  );

  //   F[read_access_26]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_26_read_access_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_26_gated_we),
    .wd     (range_perm_26_read_access_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[26].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_26_read_access_26_qs)
  );

  //   F[write_access_26]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_26_write_access_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_26_gated_we),
    .wd     (range_perm_26_write_access_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[26].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_26_write_access_26_qs)
  );

  //   F[execute_access_26]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_26_execute_access_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_26_gated_we),
    .wd     (range_perm_26_execute_access_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[26].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_26_execute_access_26_qs)
  );

  //   F[log_denied_access_26]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_26_log_denied_access_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_26_gated_we),
    .wd     (range_perm_26_log_denied_access_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[26].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_26_log_denied_access_26_qs)
  );


  // Subregister 27 of Multireg range_perm
  // R[range_perm_27]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_27_gated_we;
  assign range_perm_27_gated_we =
    range_perm_27_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_27_qs));
  //   F[enable_27]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_27_enable_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_27_gated_we),
    .wd     (range_perm_27_enable_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[27].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_27_enable_27_qs)
  );

  //   F[read_access_27]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_27_read_access_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_27_gated_we),
    .wd     (range_perm_27_read_access_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[27].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_27_read_access_27_qs)
  );

  //   F[write_access_27]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_27_write_access_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_27_gated_we),
    .wd     (range_perm_27_write_access_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[27].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_27_write_access_27_qs)
  );

  //   F[execute_access_27]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_27_execute_access_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_27_gated_we),
    .wd     (range_perm_27_execute_access_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[27].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_27_execute_access_27_qs)
  );

  //   F[log_denied_access_27]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_27_log_denied_access_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_27_gated_we),
    .wd     (range_perm_27_log_denied_access_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[27].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_27_log_denied_access_27_qs)
  );


  // Subregister 28 of Multireg range_perm
  // R[range_perm_28]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_28_gated_we;
  assign range_perm_28_gated_we =
    range_perm_28_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_28_qs));
  //   F[enable_28]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_28_enable_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_28_gated_we),
    .wd     (range_perm_28_enable_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[28].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_28_enable_28_qs)
  );

  //   F[read_access_28]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_28_read_access_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_28_gated_we),
    .wd     (range_perm_28_read_access_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[28].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_28_read_access_28_qs)
  );

  //   F[write_access_28]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_28_write_access_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_28_gated_we),
    .wd     (range_perm_28_write_access_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[28].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_28_write_access_28_qs)
  );

  //   F[execute_access_28]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_28_execute_access_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_28_gated_we),
    .wd     (range_perm_28_execute_access_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[28].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_28_execute_access_28_qs)
  );

  //   F[log_denied_access_28]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_28_log_denied_access_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_28_gated_we),
    .wd     (range_perm_28_log_denied_access_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[28].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_28_log_denied_access_28_qs)
  );


  // Subregister 29 of Multireg range_perm
  // R[range_perm_29]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_29_gated_we;
  assign range_perm_29_gated_we =
    range_perm_29_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_29_qs));
  //   F[enable_29]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_29_enable_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_29_gated_we),
    .wd     (range_perm_29_enable_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[29].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_29_enable_29_qs)
  );

  //   F[read_access_29]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_29_read_access_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_29_gated_we),
    .wd     (range_perm_29_read_access_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[29].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_29_read_access_29_qs)
  );

  //   F[write_access_29]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_29_write_access_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_29_gated_we),
    .wd     (range_perm_29_write_access_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[29].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_29_write_access_29_qs)
  );

  //   F[execute_access_29]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_29_execute_access_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_29_gated_we),
    .wd     (range_perm_29_execute_access_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[29].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_29_execute_access_29_qs)
  );

  //   F[log_denied_access_29]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_29_log_denied_access_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_29_gated_we),
    .wd     (range_perm_29_log_denied_access_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[29].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_29_log_denied_access_29_qs)
  );


  // Subregister 30 of Multireg range_perm
  // R[range_perm_30]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_30_gated_we;
  assign range_perm_30_gated_we =
    range_perm_30_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_30_qs));
  //   F[enable_30]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_30_enable_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_30_gated_we),
    .wd     (range_perm_30_enable_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[30].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_30_enable_30_qs)
  );

  //   F[read_access_30]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_30_read_access_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_30_gated_we),
    .wd     (range_perm_30_read_access_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[30].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_30_read_access_30_qs)
  );

  //   F[write_access_30]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_30_write_access_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_30_gated_we),
    .wd     (range_perm_30_write_access_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[30].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_30_write_access_30_qs)
  );

  //   F[execute_access_30]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_30_execute_access_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_30_gated_we),
    .wd     (range_perm_30_execute_access_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[30].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_30_execute_access_30_qs)
  );

  //   F[log_denied_access_30]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_30_log_denied_access_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_30_gated_we),
    .wd     (range_perm_30_log_denied_access_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[30].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_30_log_denied_access_30_qs)
  );


  // Subregister 31 of Multireg range_perm
  // R[range_perm_31]: V(False)
  // Create REGWEN-gated WE signal
  logic range_perm_31_gated_we;
  assign range_perm_31_gated_we =
    range_perm_31_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_31_qs));
  //   F[enable_31]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_31_enable_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_31_gated_we),
    .wd     (range_perm_31_enable_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[31].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_31_enable_31_qs)
  );

  //   F[read_access_31]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_31_read_access_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_31_gated_we),
    .wd     (range_perm_31_read_access_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[31].read_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_31_read_access_31_qs)
  );

  //   F[write_access_31]: 11:8
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_31_write_access_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_31_gated_we),
    .wd     (range_perm_31_write_access_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[31].write_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_31_write_access_31_qs)
  );

  //   F[execute_access_31]: 15:12
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_range_perm_31_execute_access_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_31_gated_we),
    .wd     (range_perm_31_execute_access_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[31].execute_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_31_execute_access_31_qs)
  );

  //   F[log_denied_access_31]: 19:16
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_perm_31_log_denied_access_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_perm_31_gated_we),
    .wd     (range_perm_31_log_denied_access_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_perm[31].log_denied_access.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_perm_31_log_denied_access_31_qs)
  );


  // Subregister 0 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_0]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_0_gated_we;
  assign range_racl_policy_shadowed_0_gated_we =
    range_racl_policy_shadowed_0_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_0_qs));
  //   F[read_perm_0]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_0_read_perm_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_0_re),
    .we     (range_racl_policy_shadowed_0_gated_we),
    .wd     (range_racl_policy_shadowed_0_read_perm_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[0].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_0_read_perm_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_0_read_perm_0_update_err),
    .err_storage (range_racl_policy_shadowed_0_read_perm_0_storage_err)
  );

  //   F[write_perm_0]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_0_write_perm_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_0_re),
    .we     (range_racl_policy_shadowed_0_gated_we),
    .wd     (range_racl_policy_shadowed_0_write_perm_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[0].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_0_write_perm_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_0_write_perm_0_update_err),
    .err_storage (range_racl_policy_shadowed_0_write_perm_0_storage_err)
  );


  // Subregister 1 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_1]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_1_gated_we;
  assign range_racl_policy_shadowed_1_gated_we =
    range_racl_policy_shadowed_1_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_1_qs));
  //   F[read_perm_1]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_1_read_perm_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_1_re),
    .we     (range_racl_policy_shadowed_1_gated_we),
    .wd     (range_racl_policy_shadowed_1_read_perm_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[1].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_1_read_perm_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_1_read_perm_1_update_err),
    .err_storage (range_racl_policy_shadowed_1_read_perm_1_storage_err)
  );

  //   F[write_perm_1]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_1_write_perm_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_1_re),
    .we     (range_racl_policy_shadowed_1_gated_we),
    .wd     (range_racl_policy_shadowed_1_write_perm_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[1].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_1_write_perm_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_1_write_perm_1_update_err),
    .err_storage (range_racl_policy_shadowed_1_write_perm_1_storage_err)
  );


  // Subregister 2 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_2]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_2_gated_we;
  assign range_racl_policy_shadowed_2_gated_we =
    range_racl_policy_shadowed_2_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_2_qs));
  //   F[read_perm_2]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_2_read_perm_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_2_re),
    .we     (range_racl_policy_shadowed_2_gated_we),
    .wd     (range_racl_policy_shadowed_2_read_perm_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[2].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_2_read_perm_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_2_read_perm_2_update_err),
    .err_storage (range_racl_policy_shadowed_2_read_perm_2_storage_err)
  );

  //   F[write_perm_2]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_2_write_perm_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_2_re),
    .we     (range_racl_policy_shadowed_2_gated_we),
    .wd     (range_racl_policy_shadowed_2_write_perm_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[2].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_2_write_perm_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_2_write_perm_2_update_err),
    .err_storage (range_racl_policy_shadowed_2_write_perm_2_storage_err)
  );


  // Subregister 3 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_3]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_3_gated_we;
  assign range_racl_policy_shadowed_3_gated_we =
    range_racl_policy_shadowed_3_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_3_qs));
  //   F[read_perm_3]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_3_read_perm_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_3_re),
    .we     (range_racl_policy_shadowed_3_gated_we),
    .wd     (range_racl_policy_shadowed_3_read_perm_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[3].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_3_read_perm_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_3_read_perm_3_update_err),
    .err_storage (range_racl_policy_shadowed_3_read_perm_3_storage_err)
  );

  //   F[write_perm_3]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_3_write_perm_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_3_re),
    .we     (range_racl_policy_shadowed_3_gated_we),
    .wd     (range_racl_policy_shadowed_3_write_perm_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[3].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_3_write_perm_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_3_write_perm_3_update_err),
    .err_storage (range_racl_policy_shadowed_3_write_perm_3_storage_err)
  );


  // Subregister 4 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_4]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_4_gated_we;
  assign range_racl_policy_shadowed_4_gated_we =
    range_racl_policy_shadowed_4_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_4_qs));
  //   F[read_perm_4]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_4_read_perm_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_4_re),
    .we     (range_racl_policy_shadowed_4_gated_we),
    .wd     (range_racl_policy_shadowed_4_read_perm_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[4].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_4_read_perm_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_4_read_perm_4_update_err),
    .err_storage (range_racl_policy_shadowed_4_read_perm_4_storage_err)
  );

  //   F[write_perm_4]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_4_write_perm_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_4_re),
    .we     (range_racl_policy_shadowed_4_gated_we),
    .wd     (range_racl_policy_shadowed_4_write_perm_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[4].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_4_write_perm_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_4_write_perm_4_update_err),
    .err_storage (range_racl_policy_shadowed_4_write_perm_4_storage_err)
  );


  // Subregister 5 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_5]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_5_gated_we;
  assign range_racl_policy_shadowed_5_gated_we =
    range_racl_policy_shadowed_5_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_5_qs));
  //   F[read_perm_5]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_5_read_perm_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_5_re),
    .we     (range_racl_policy_shadowed_5_gated_we),
    .wd     (range_racl_policy_shadowed_5_read_perm_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[5].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_5_read_perm_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_5_read_perm_5_update_err),
    .err_storage (range_racl_policy_shadowed_5_read_perm_5_storage_err)
  );

  //   F[write_perm_5]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_5_write_perm_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_5_re),
    .we     (range_racl_policy_shadowed_5_gated_we),
    .wd     (range_racl_policy_shadowed_5_write_perm_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[5].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_5_write_perm_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_5_write_perm_5_update_err),
    .err_storage (range_racl_policy_shadowed_5_write_perm_5_storage_err)
  );


  // Subregister 6 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_6]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_6_gated_we;
  assign range_racl_policy_shadowed_6_gated_we =
    range_racl_policy_shadowed_6_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_6_qs));
  //   F[read_perm_6]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_6_read_perm_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_6_re),
    .we     (range_racl_policy_shadowed_6_gated_we),
    .wd     (range_racl_policy_shadowed_6_read_perm_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[6].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_6_read_perm_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_6_read_perm_6_update_err),
    .err_storage (range_racl_policy_shadowed_6_read_perm_6_storage_err)
  );

  //   F[write_perm_6]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_6_write_perm_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_6_re),
    .we     (range_racl_policy_shadowed_6_gated_we),
    .wd     (range_racl_policy_shadowed_6_write_perm_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[6].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_6_write_perm_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_6_write_perm_6_update_err),
    .err_storage (range_racl_policy_shadowed_6_write_perm_6_storage_err)
  );


  // Subregister 7 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_7]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_7_gated_we;
  assign range_racl_policy_shadowed_7_gated_we =
    range_racl_policy_shadowed_7_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_7_qs));
  //   F[read_perm_7]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_7_read_perm_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_7_re),
    .we     (range_racl_policy_shadowed_7_gated_we),
    .wd     (range_racl_policy_shadowed_7_read_perm_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[7].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_7_read_perm_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_7_read_perm_7_update_err),
    .err_storage (range_racl_policy_shadowed_7_read_perm_7_storage_err)
  );

  //   F[write_perm_7]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_7_write_perm_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_7_re),
    .we     (range_racl_policy_shadowed_7_gated_we),
    .wd     (range_racl_policy_shadowed_7_write_perm_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[7].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_7_write_perm_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_7_write_perm_7_update_err),
    .err_storage (range_racl_policy_shadowed_7_write_perm_7_storage_err)
  );


  // Subregister 8 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_8]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_8_gated_we;
  assign range_racl_policy_shadowed_8_gated_we =
    range_racl_policy_shadowed_8_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_8_qs));
  //   F[read_perm_8]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_8_read_perm_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_8_re),
    .we     (range_racl_policy_shadowed_8_gated_we),
    .wd     (range_racl_policy_shadowed_8_read_perm_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[8].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_8_read_perm_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_8_read_perm_8_update_err),
    .err_storage (range_racl_policy_shadowed_8_read_perm_8_storage_err)
  );

  //   F[write_perm_8]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_8_write_perm_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_8_re),
    .we     (range_racl_policy_shadowed_8_gated_we),
    .wd     (range_racl_policy_shadowed_8_write_perm_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[8].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_8_write_perm_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_8_write_perm_8_update_err),
    .err_storage (range_racl_policy_shadowed_8_write_perm_8_storage_err)
  );


  // Subregister 9 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_9]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_9_gated_we;
  assign range_racl_policy_shadowed_9_gated_we =
    range_racl_policy_shadowed_9_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_9_qs));
  //   F[read_perm_9]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_9_read_perm_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_9_re),
    .we     (range_racl_policy_shadowed_9_gated_we),
    .wd     (range_racl_policy_shadowed_9_read_perm_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[9].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_9_read_perm_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_9_read_perm_9_update_err),
    .err_storage (range_racl_policy_shadowed_9_read_perm_9_storage_err)
  );

  //   F[write_perm_9]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_9_write_perm_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_9_re),
    .we     (range_racl_policy_shadowed_9_gated_we),
    .wd     (range_racl_policy_shadowed_9_write_perm_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[9].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_9_write_perm_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_9_write_perm_9_update_err),
    .err_storage (range_racl_policy_shadowed_9_write_perm_9_storage_err)
  );


  // Subregister 10 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_10]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_10_gated_we;
  assign range_racl_policy_shadowed_10_gated_we =
    range_racl_policy_shadowed_10_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_10_qs));
  //   F[read_perm_10]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_10_read_perm_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_10_re),
    .we     (range_racl_policy_shadowed_10_gated_we),
    .wd     (range_racl_policy_shadowed_10_read_perm_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[10].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_10_read_perm_10_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_10_read_perm_10_update_err),
    .err_storage (range_racl_policy_shadowed_10_read_perm_10_storage_err)
  );

  //   F[write_perm_10]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_10_write_perm_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_10_re),
    .we     (range_racl_policy_shadowed_10_gated_we),
    .wd     (range_racl_policy_shadowed_10_write_perm_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[10].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_10_write_perm_10_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_10_write_perm_10_update_err),
    .err_storage (range_racl_policy_shadowed_10_write_perm_10_storage_err)
  );


  // Subregister 11 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_11]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_11_gated_we;
  assign range_racl_policy_shadowed_11_gated_we =
    range_racl_policy_shadowed_11_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_11_qs));
  //   F[read_perm_11]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_11_read_perm_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_11_re),
    .we     (range_racl_policy_shadowed_11_gated_we),
    .wd     (range_racl_policy_shadowed_11_read_perm_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[11].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_11_read_perm_11_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_11_read_perm_11_update_err),
    .err_storage (range_racl_policy_shadowed_11_read_perm_11_storage_err)
  );

  //   F[write_perm_11]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_11_write_perm_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_11_re),
    .we     (range_racl_policy_shadowed_11_gated_we),
    .wd     (range_racl_policy_shadowed_11_write_perm_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[11].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_11_write_perm_11_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_11_write_perm_11_update_err),
    .err_storage (range_racl_policy_shadowed_11_write_perm_11_storage_err)
  );


  // Subregister 12 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_12]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_12_gated_we;
  assign range_racl_policy_shadowed_12_gated_we =
    range_racl_policy_shadowed_12_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_12_qs));
  //   F[read_perm_12]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_12_read_perm_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_12_re),
    .we     (range_racl_policy_shadowed_12_gated_we),
    .wd     (range_racl_policy_shadowed_12_read_perm_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[12].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_12_read_perm_12_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_12_read_perm_12_update_err),
    .err_storage (range_racl_policy_shadowed_12_read_perm_12_storage_err)
  );

  //   F[write_perm_12]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_12_write_perm_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_12_re),
    .we     (range_racl_policy_shadowed_12_gated_we),
    .wd     (range_racl_policy_shadowed_12_write_perm_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[12].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_12_write_perm_12_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_12_write_perm_12_update_err),
    .err_storage (range_racl_policy_shadowed_12_write_perm_12_storage_err)
  );


  // Subregister 13 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_13]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_13_gated_we;
  assign range_racl_policy_shadowed_13_gated_we =
    range_racl_policy_shadowed_13_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_13_qs));
  //   F[read_perm_13]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_13_read_perm_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_13_re),
    .we     (range_racl_policy_shadowed_13_gated_we),
    .wd     (range_racl_policy_shadowed_13_read_perm_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[13].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_13_read_perm_13_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_13_read_perm_13_update_err),
    .err_storage (range_racl_policy_shadowed_13_read_perm_13_storage_err)
  );

  //   F[write_perm_13]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_13_write_perm_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_13_re),
    .we     (range_racl_policy_shadowed_13_gated_we),
    .wd     (range_racl_policy_shadowed_13_write_perm_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[13].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_13_write_perm_13_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_13_write_perm_13_update_err),
    .err_storage (range_racl_policy_shadowed_13_write_perm_13_storage_err)
  );


  // Subregister 14 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_14]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_14_gated_we;
  assign range_racl_policy_shadowed_14_gated_we =
    range_racl_policy_shadowed_14_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_14_qs));
  //   F[read_perm_14]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_14_read_perm_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_14_re),
    .we     (range_racl_policy_shadowed_14_gated_we),
    .wd     (range_racl_policy_shadowed_14_read_perm_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[14].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_14_read_perm_14_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_14_read_perm_14_update_err),
    .err_storage (range_racl_policy_shadowed_14_read_perm_14_storage_err)
  );

  //   F[write_perm_14]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_14_write_perm_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_14_re),
    .we     (range_racl_policy_shadowed_14_gated_we),
    .wd     (range_racl_policy_shadowed_14_write_perm_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[14].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_14_write_perm_14_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_14_write_perm_14_update_err),
    .err_storage (range_racl_policy_shadowed_14_write_perm_14_storage_err)
  );


  // Subregister 15 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_15]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_15_gated_we;
  assign range_racl_policy_shadowed_15_gated_we =
    range_racl_policy_shadowed_15_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_15_qs));
  //   F[read_perm_15]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_15_read_perm_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_15_re),
    .we     (range_racl_policy_shadowed_15_gated_we),
    .wd     (range_racl_policy_shadowed_15_read_perm_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[15].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_15_read_perm_15_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_15_read_perm_15_update_err),
    .err_storage (range_racl_policy_shadowed_15_read_perm_15_storage_err)
  );

  //   F[write_perm_15]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_15_write_perm_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_15_re),
    .we     (range_racl_policy_shadowed_15_gated_we),
    .wd     (range_racl_policy_shadowed_15_write_perm_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[15].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_15_write_perm_15_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_15_write_perm_15_update_err),
    .err_storage (range_racl_policy_shadowed_15_write_perm_15_storage_err)
  );


  // Subregister 16 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_16]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_16_gated_we;
  assign range_racl_policy_shadowed_16_gated_we =
    range_racl_policy_shadowed_16_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_16_qs));
  //   F[read_perm_16]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_16_read_perm_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_16_re),
    .we     (range_racl_policy_shadowed_16_gated_we),
    .wd     (range_racl_policy_shadowed_16_read_perm_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[16].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_16_read_perm_16_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_16_read_perm_16_update_err),
    .err_storage (range_racl_policy_shadowed_16_read_perm_16_storage_err)
  );

  //   F[write_perm_16]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_16_write_perm_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_16_re),
    .we     (range_racl_policy_shadowed_16_gated_we),
    .wd     (range_racl_policy_shadowed_16_write_perm_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[16].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_16_write_perm_16_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_16_write_perm_16_update_err),
    .err_storage (range_racl_policy_shadowed_16_write_perm_16_storage_err)
  );


  // Subregister 17 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_17]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_17_gated_we;
  assign range_racl_policy_shadowed_17_gated_we =
    range_racl_policy_shadowed_17_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_17_qs));
  //   F[read_perm_17]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_17_read_perm_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_17_re),
    .we     (range_racl_policy_shadowed_17_gated_we),
    .wd     (range_racl_policy_shadowed_17_read_perm_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[17].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_17_read_perm_17_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_17_read_perm_17_update_err),
    .err_storage (range_racl_policy_shadowed_17_read_perm_17_storage_err)
  );

  //   F[write_perm_17]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_17_write_perm_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_17_re),
    .we     (range_racl_policy_shadowed_17_gated_we),
    .wd     (range_racl_policy_shadowed_17_write_perm_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[17].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_17_write_perm_17_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_17_write_perm_17_update_err),
    .err_storage (range_racl_policy_shadowed_17_write_perm_17_storage_err)
  );


  // Subregister 18 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_18]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_18_gated_we;
  assign range_racl_policy_shadowed_18_gated_we =
    range_racl_policy_shadowed_18_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_18_qs));
  //   F[read_perm_18]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_18_read_perm_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_18_re),
    .we     (range_racl_policy_shadowed_18_gated_we),
    .wd     (range_racl_policy_shadowed_18_read_perm_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[18].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_18_read_perm_18_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_18_read_perm_18_update_err),
    .err_storage (range_racl_policy_shadowed_18_read_perm_18_storage_err)
  );

  //   F[write_perm_18]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_18_write_perm_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_18_re),
    .we     (range_racl_policy_shadowed_18_gated_we),
    .wd     (range_racl_policy_shadowed_18_write_perm_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[18].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_18_write_perm_18_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_18_write_perm_18_update_err),
    .err_storage (range_racl_policy_shadowed_18_write_perm_18_storage_err)
  );


  // Subregister 19 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_19]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_19_gated_we;
  assign range_racl_policy_shadowed_19_gated_we =
    range_racl_policy_shadowed_19_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_19_qs));
  //   F[read_perm_19]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_19_read_perm_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_19_re),
    .we     (range_racl_policy_shadowed_19_gated_we),
    .wd     (range_racl_policy_shadowed_19_read_perm_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[19].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_19_read_perm_19_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_19_read_perm_19_update_err),
    .err_storage (range_racl_policy_shadowed_19_read_perm_19_storage_err)
  );

  //   F[write_perm_19]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_19_write_perm_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_19_re),
    .we     (range_racl_policy_shadowed_19_gated_we),
    .wd     (range_racl_policy_shadowed_19_write_perm_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[19].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_19_write_perm_19_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_19_write_perm_19_update_err),
    .err_storage (range_racl_policy_shadowed_19_write_perm_19_storage_err)
  );


  // Subregister 20 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_20]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_20_gated_we;
  assign range_racl_policy_shadowed_20_gated_we =
    range_racl_policy_shadowed_20_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_20_qs));
  //   F[read_perm_20]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_20_read_perm_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_20_re),
    .we     (range_racl_policy_shadowed_20_gated_we),
    .wd     (range_racl_policy_shadowed_20_read_perm_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[20].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_20_read_perm_20_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_20_read_perm_20_update_err),
    .err_storage (range_racl_policy_shadowed_20_read_perm_20_storage_err)
  );

  //   F[write_perm_20]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_20_write_perm_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_20_re),
    .we     (range_racl_policy_shadowed_20_gated_we),
    .wd     (range_racl_policy_shadowed_20_write_perm_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[20].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_20_write_perm_20_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_20_write_perm_20_update_err),
    .err_storage (range_racl_policy_shadowed_20_write_perm_20_storage_err)
  );


  // Subregister 21 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_21]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_21_gated_we;
  assign range_racl_policy_shadowed_21_gated_we =
    range_racl_policy_shadowed_21_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_21_qs));
  //   F[read_perm_21]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_21_read_perm_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_21_re),
    .we     (range_racl_policy_shadowed_21_gated_we),
    .wd     (range_racl_policy_shadowed_21_read_perm_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[21].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_21_read_perm_21_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_21_read_perm_21_update_err),
    .err_storage (range_racl_policy_shadowed_21_read_perm_21_storage_err)
  );

  //   F[write_perm_21]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_21_write_perm_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_21_re),
    .we     (range_racl_policy_shadowed_21_gated_we),
    .wd     (range_racl_policy_shadowed_21_write_perm_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[21].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_21_write_perm_21_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_21_write_perm_21_update_err),
    .err_storage (range_racl_policy_shadowed_21_write_perm_21_storage_err)
  );


  // Subregister 22 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_22]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_22_gated_we;
  assign range_racl_policy_shadowed_22_gated_we =
    range_racl_policy_shadowed_22_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_22_qs));
  //   F[read_perm_22]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_22_read_perm_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_22_re),
    .we     (range_racl_policy_shadowed_22_gated_we),
    .wd     (range_racl_policy_shadowed_22_read_perm_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[22].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_22_read_perm_22_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_22_read_perm_22_update_err),
    .err_storage (range_racl_policy_shadowed_22_read_perm_22_storage_err)
  );

  //   F[write_perm_22]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_22_write_perm_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_22_re),
    .we     (range_racl_policy_shadowed_22_gated_we),
    .wd     (range_racl_policy_shadowed_22_write_perm_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[22].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_22_write_perm_22_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_22_write_perm_22_update_err),
    .err_storage (range_racl_policy_shadowed_22_write_perm_22_storage_err)
  );


  // Subregister 23 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_23]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_23_gated_we;
  assign range_racl_policy_shadowed_23_gated_we =
    range_racl_policy_shadowed_23_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_23_qs));
  //   F[read_perm_23]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_23_read_perm_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_23_re),
    .we     (range_racl_policy_shadowed_23_gated_we),
    .wd     (range_racl_policy_shadowed_23_read_perm_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[23].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_23_read_perm_23_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_23_read_perm_23_update_err),
    .err_storage (range_racl_policy_shadowed_23_read_perm_23_storage_err)
  );

  //   F[write_perm_23]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_23_write_perm_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_23_re),
    .we     (range_racl_policy_shadowed_23_gated_we),
    .wd     (range_racl_policy_shadowed_23_write_perm_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[23].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_23_write_perm_23_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_23_write_perm_23_update_err),
    .err_storage (range_racl_policy_shadowed_23_write_perm_23_storage_err)
  );


  // Subregister 24 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_24]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_24_gated_we;
  assign range_racl_policy_shadowed_24_gated_we =
    range_racl_policy_shadowed_24_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_24_qs));
  //   F[read_perm_24]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_24_read_perm_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_24_re),
    .we     (range_racl_policy_shadowed_24_gated_we),
    .wd     (range_racl_policy_shadowed_24_read_perm_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[24].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_24_read_perm_24_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_24_read_perm_24_update_err),
    .err_storage (range_racl_policy_shadowed_24_read_perm_24_storage_err)
  );

  //   F[write_perm_24]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_24_write_perm_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_24_re),
    .we     (range_racl_policy_shadowed_24_gated_we),
    .wd     (range_racl_policy_shadowed_24_write_perm_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[24].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_24_write_perm_24_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_24_write_perm_24_update_err),
    .err_storage (range_racl_policy_shadowed_24_write_perm_24_storage_err)
  );


  // Subregister 25 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_25]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_25_gated_we;
  assign range_racl_policy_shadowed_25_gated_we =
    range_racl_policy_shadowed_25_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_25_qs));
  //   F[read_perm_25]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_25_read_perm_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_25_re),
    .we     (range_racl_policy_shadowed_25_gated_we),
    .wd     (range_racl_policy_shadowed_25_read_perm_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[25].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_25_read_perm_25_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_25_read_perm_25_update_err),
    .err_storage (range_racl_policy_shadowed_25_read_perm_25_storage_err)
  );

  //   F[write_perm_25]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_25_write_perm_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_25_re),
    .we     (range_racl_policy_shadowed_25_gated_we),
    .wd     (range_racl_policy_shadowed_25_write_perm_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[25].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_25_write_perm_25_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_25_write_perm_25_update_err),
    .err_storage (range_racl_policy_shadowed_25_write_perm_25_storage_err)
  );


  // Subregister 26 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_26]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_26_gated_we;
  assign range_racl_policy_shadowed_26_gated_we =
    range_racl_policy_shadowed_26_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_26_qs));
  //   F[read_perm_26]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_26_read_perm_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_26_re),
    .we     (range_racl_policy_shadowed_26_gated_we),
    .wd     (range_racl_policy_shadowed_26_read_perm_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[26].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_26_read_perm_26_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_26_read_perm_26_update_err),
    .err_storage (range_racl_policy_shadowed_26_read_perm_26_storage_err)
  );

  //   F[write_perm_26]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_26_write_perm_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_26_re),
    .we     (range_racl_policy_shadowed_26_gated_we),
    .wd     (range_racl_policy_shadowed_26_write_perm_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[26].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_26_write_perm_26_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_26_write_perm_26_update_err),
    .err_storage (range_racl_policy_shadowed_26_write_perm_26_storage_err)
  );


  // Subregister 27 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_27]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_27_gated_we;
  assign range_racl_policy_shadowed_27_gated_we =
    range_racl_policy_shadowed_27_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_27_qs));
  //   F[read_perm_27]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_27_read_perm_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_27_re),
    .we     (range_racl_policy_shadowed_27_gated_we),
    .wd     (range_racl_policy_shadowed_27_read_perm_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[27].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_27_read_perm_27_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_27_read_perm_27_update_err),
    .err_storage (range_racl_policy_shadowed_27_read_perm_27_storage_err)
  );

  //   F[write_perm_27]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_27_write_perm_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_27_re),
    .we     (range_racl_policy_shadowed_27_gated_we),
    .wd     (range_racl_policy_shadowed_27_write_perm_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[27].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_27_write_perm_27_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_27_write_perm_27_update_err),
    .err_storage (range_racl_policy_shadowed_27_write_perm_27_storage_err)
  );


  // Subregister 28 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_28]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_28_gated_we;
  assign range_racl_policy_shadowed_28_gated_we =
    range_racl_policy_shadowed_28_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_28_qs));
  //   F[read_perm_28]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_28_read_perm_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_28_re),
    .we     (range_racl_policy_shadowed_28_gated_we),
    .wd     (range_racl_policy_shadowed_28_read_perm_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[28].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_28_read_perm_28_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_28_read_perm_28_update_err),
    .err_storage (range_racl_policy_shadowed_28_read_perm_28_storage_err)
  );

  //   F[write_perm_28]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_28_write_perm_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_28_re),
    .we     (range_racl_policy_shadowed_28_gated_we),
    .wd     (range_racl_policy_shadowed_28_write_perm_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[28].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_28_write_perm_28_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_28_write_perm_28_update_err),
    .err_storage (range_racl_policy_shadowed_28_write_perm_28_storage_err)
  );


  // Subregister 29 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_29]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_29_gated_we;
  assign range_racl_policy_shadowed_29_gated_we =
    range_racl_policy_shadowed_29_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_29_qs));
  //   F[read_perm_29]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_29_read_perm_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_29_re),
    .we     (range_racl_policy_shadowed_29_gated_we),
    .wd     (range_racl_policy_shadowed_29_read_perm_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[29].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_29_read_perm_29_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_29_read_perm_29_update_err),
    .err_storage (range_racl_policy_shadowed_29_read_perm_29_storage_err)
  );

  //   F[write_perm_29]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_29_write_perm_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_29_re),
    .we     (range_racl_policy_shadowed_29_gated_we),
    .wd     (range_racl_policy_shadowed_29_write_perm_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[29].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_29_write_perm_29_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_29_write_perm_29_update_err),
    .err_storage (range_racl_policy_shadowed_29_write_perm_29_storage_err)
  );


  // Subregister 30 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_30]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_30_gated_we;
  assign range_racl_policy_shadowed_30_gated_we =
    range_racl_policy_shadowed_30_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_30_qs));
  //   F[read_perm_30]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_30_read_perm_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_30_re),
    .we     (range_racl_policy_shadowed_30_gated_we),
    .wd     (range_racl_policy_shadowed_30_read_perm_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[30].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_30_read_perm_30_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_30_read_perm_30_update_err),
    .err_storage (range_racl_policy_shadowed_30_read_perm_30_storage_err)
  );

  //   F[write_perm_30]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_30_write_perm_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_30_re),
    .we     (range_racl_policy_shadowed_30_gated_we),
    .wd     (range_racl_policy_shadowed_30_write_perm_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[30].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_30_write_perm_30_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_30_write_perm_30_update_err),
    .err_storage (range_racl_policy_shadowed_30_write_perm_30_storage_err)
  );


  // Subregister 31 of Multireg range_racl_policy_shadowed
  // R[range_racl_policy_shadowed_31]: V(False)
  // Create REGWEN-gated WE signal
  logic range_racl_policy_shadowed_31_gated_we;
  assign range_racl_policy_shadowed_31_gated_we =
    range_racl_policy_shadowed_31_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_regwen_31_qs));
  //   F[read_perm_31]: 15:0
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_31_read_perm_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_31_re),
    .we     (range_racl_policy_shadowed_31_gated_we),
    .wd     (range_racl_policy_shadowed_31_read_perm_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[31].read_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_31_read_perm_31_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_31_read_perm_31_update_err),
    .err_storage (range_racl_policy_shadowed_31_read_perm_31_storage_err)
  );

  //   F[write_perm_31]: 31:16
  prim_subreg_shadow #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_range_racl_policy_shadowed_31_write_perm_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (range_racl_policy_shadowed_31_re),
    .we     (range_racl_policy_shadowed_31_gated_we),
    .wd     (range_racl_policy_shadowed_31_write_perm_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_racl_policy_shadowed[31].write_perm.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_racl_policy_shadowed_31_write_perm_31_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (range_racl_policy_shadowed_31_write_perm_31_update_err),
    .err_storage (range_racl_policy_shadowed_31_write_perm_31_storage_err)
  );



  logic [167:0] addr_hit;
  top_racl_pkg::racl_role_vec_t racl_role_vec;
  top_racl_pkg::racl_role_t racl_role;

  logic [167:0] racl_addr_hit_read;
  logic [167:0] racl_addr_hit_write;

  if (EnableRacl) begin : gen_racl_role_logic
    // Retrieve RACL role from user bits and one-hot encode that for the comparison bitmap
    assign racl_role = top_racl_pkg::tlul_extract_racl_role_bits(tl_i.a_user.rsvd);

    prim_onehot_enc #(
      .OneHotWidth( $bits(top_racl_pkg::racl_role_vec_t) )
    ) u_racl_role_encode (
      .in_i ( racl_role     ),
      .en_i ( 1'b1          ),
      .out_o( racl_role_vec )
    );
  end else begin : gen_no_racl_role_logic
    assign racl_role     = '0;
    assign racl_role_vec = '0;
  end

  always_comb begin
    addr_hit = '0;
    racl_addr_hit_read  = '0;
    racl_addr_hit_write = '0;
    addr_hit[  0] = (reg_addr == AC_RANGE_CHECK_INTR_STATE_OFFSET);
    addr_hit[  1] = (reg_addr == AC_RANGE_CHECK_INTR_ENABLE_OFFSET);
    addr_hit[  2] = (reg_addr == AC_RANGE_CHECK_INTR_TEST_OFFSET);
    addr_hit[  3] = (reg_addr == AC_RANGE_CHECK_ALERT_TEST_OFFSET);
    addr_hit[  4] = (reg_addr == AC_RANGE_CHECK_ALERT_STATUS_OFFSET);
    addr_hit[  5] = (reg_addr == AC_RANGE_CHECK_LOG_CONFIG_OFFSET);
    addr_hit[  6] = (reg_addr == AC_RANGE_CHECK_LOG_STATUS_OFFSET);
    addr_hit[  7] = (reg_addr == AC_RANGE_CHECK_LOG_ADDRESS_OFFSET);
    addr_hit[  8] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_0_OFFSET);
    addr_hit[  9] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_1_OFFSET);
    addr_hit[ 10] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_2_OFFSET);
    addr_hit[ 11] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_3_OFFSET);
    addr_hit[ 12] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_4_OFFSET);
    addr_hit[ 13] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_5_OFFSET);
    addr_hit[ 14] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_6_OFFSET);
    addr_hit[ 15] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_7_OFFSET);
    addr_hit[ 16] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_8_OFFSET);
    addr_hit[ 17] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_9_OFFSET);
    addr_hit[ 18] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_10_OFFSET);
    addr_hit[ 19] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_11_OFFSET);
    addr_hit[ 20] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_12_OFFSET);
    addr_hit[ 21] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_13_OFFSET);
    addr_hit[ 22] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_14_OFFSET);
    addr_hit[ 23] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_15_OFFSET);
    addr_hit[ 24] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_16_OFFSET);
    addr_hit[ 25] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_17_OFFSET);
    addr_hit[ 26] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_18_OFFSET);
    addr_hit[ 27] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_19_OFFSET);
    addr_hit[ 28] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_20_OFFSET);
    addr_hit[ 29] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_21_OFFSET);
    addr_hit[ 30] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_22_OFFSET);
    addr_hit[ 31] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_23_OFFSET);
    addr_hit[ 32] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_24_OFFSET);
    addr_hit[ 33] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_25_OFFSET);
    addr_hit[ 34] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_26_OFFSET);
    addr_hit[ 35] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_27_OFFSET);
    addr_hit[ 36] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_28_OFFSET);
    addr_hit[ 37] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_29_OFFSET);
    addr_hit[ 38] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_30_OFFSET);
    addr_hit[ 39] = (reg_addr == AC_RANGE_CHECK_RANGE_REGWEN_31_OFFSET);
    addr_hit[ 40] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_0_OFFSET);
    addr_hit[ 41] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_1_OFFSET);
    addr_hit[ 42] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_2_OFFSET);
    addr_hit[ 43] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_3_OFFSET);
    addr_hit[ 44] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_4_OFFSET);
    addr_hit[ 45] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_5_OFFSET);
    addr_hit[ 46] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_6_OFFSET);
    addr_hit[ 47] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_7_OFFSET);
    addr_hit[ 48] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_8_OFFSET);
    addr_hit[ 49] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_9_OFFSET);
    addr_hit[ 50] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_10_OFFSET);
    addr_hit[ 51] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_11_OFFSET);
    addr_hit[ 52] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_12_OFFSET);
    addr_hit[ 53] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_13_OFFSET);
    addr_hit[ 54] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_14_OFFSET);
    addr_hit[ 55] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_15_OFFSET);
    addr_hit[ 56] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_16_OFFSET);
    addr_hit[ 57] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_17_OFFSET);
    addr_hit[ 58] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_18_OFFSET);
    addr_hit[ 59] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_19_OFFSET);
    addr_hit[ 60] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_20_OFFSET);
    addr_hit[ 61] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_21_OFFSET);
    addr_hit[ 62] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_22_OFFSET);
    addr_hit[ 63] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_23_OFFSET);
    addr_hit[ 64] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_24_OFFSET);
    addr_hit[ 65] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_25_OFFSET);
    addr_hit[ 66] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_26_OFFSET);
    addr_hit[ 67] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_27_OFFSET);
    addr_hit[ 68] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_28_OFFSET);
    addr_hit[ 69] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_29_OFFSET);
    addr_hit[ 70] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_30_OFFSET);
    addr_hit[ 71] = (reg_addr == AC_RANGE_CHECK_RANGE_BASE_31_OFFSET);
    addr_hit[ 72] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_0_OFFSET);
    addr_hit[ 73] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_1_OFFSET);
    addr_hit[ 74] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_2_OFFSET);
    addr_hit[ 75] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_3_OFFSET);
    addr_hit[ 76] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_4_OFFSET);
    addr_hit[ 77] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_5_OFFSET);
    addr_hit[ 78] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_6_OFFSET);
    addr_hit[ 79] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_7_OFFSET);
    addr_hit[ 80] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_8_OFFSET);
    addr_hit[ 81] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_9_OFFSET);
    addr_hit[ 82] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_10_OFFSET);
    addr_hit[ 83] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_11_OFFSET);
    addr_hit[ 84] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_12_OFFSET);
    addr_hit[ 85] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_13_OFFSET);
    addr_hit[ 86] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_14_OFFSET);
    addr_hit[ 87] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_15_OFFSET);
    addr_hit[ 88] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_16_OFFSET);
    addr_hit[ 89] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_17_OFFSET);
    addr_hit[ 90] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_18_OFFSET);
    addr_hit[ 91] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_19_OFFSET);
    addr_hit[ 92] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_20_OFFSET);
    addr_hit[ 93] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_21_OFFSET);
    addr_hit[ 94] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_22_OFFSET);
    addr_hit[ 95] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_23_OFFSET);
    addr_hit[ 96] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_24_OFFSET);
    addr_hit[ 97] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_25_OFFSET);
    addr_hit[ 98] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_26_OFFSET);
    addr_hit[ 99] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_27_OFFSET);
    addr_hit[100] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_28_OFFSET);
    addr_hit[101] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_29_OFFSET);
    addr_hit[102] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_30_OFFSET);
    addr_hit[103] = (reg_addr == AC_RANGE_CHECK_RANGE_LIMIT_31_OFFSET);
    addr_hit[104] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_0_OFFSET);
    addr_hit[105] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_1_OFFSET);
    addr_hit[106] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_2_OFFSET);
    addr_hit[107] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_3_OFFSET);
    addr_hit[108] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_4_OFFSET);
    addr_hit[109] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_5_OFFSET);
    addr_hit[110] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_6_OFFSET);
    addr_hit[111] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_7_OFFSET);
    addr_hit[112] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_8_OFFSET);
    addr_hit[113] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_9_OFFSET);
    addr_hit[114] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_10_OFFSET);
    addr_hit[115] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_11_OFFSET);
    addr_hit[116] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_12_OFFSET);
    addr_hit[117] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_13_OFFSET);
    addr_hit[118] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_14_OFFSET);
    addr_hit[119] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_15_OFFSET);
    addr_hit[120] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_16_OFFSET);
    addr_hit[121] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_17_OFFSET);
    addr_hit[122] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_18_OFFSET);
    addr_hit[123] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_19_OFFSET);
    addr_hit[124] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_20_OFFSET);
    addr_hit[125] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_21_OFFSET);
    addr_hit[126] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_22_OFFSET);
    addr_hit[127] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_23_OFFSET);
    addr_hit[128] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_24_OFFSET);
    addr_hit[129] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_25_OFFSET);
    addr_hit[130] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_26_OFFSET);
    addr_hit[131] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_27_OFFSET);
    addr_hit[132] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_28_OFFSET);
    addr_hit[133] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_29_OFFSET);
    addr_hit[134] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_30_OFFSET);
    addr_hit[135] = (reg_addr == AC_RANGE_CHECK_RANGE_PERM_31_OFFSET);
    addr_hit[136] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_0_OFFSET);
    addr_hit[137] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_1_OFFSET);
    addr_hit[138] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_2_OFFSET);
    addr_hit[139] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_3_OFFSET);
    addr_hit[140] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_4_OFFSET);
    addr_hit[141] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_5_OFFSET);
    addr_hit[142] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_6_OFFSET);
    addr_hit[143] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_7_OFFSET);
    addr_hit[144] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_8_OFFSET);
    addr_hit[145] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_9_OFFSET);
    addr_hit[146] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_10_OFFSET);
    addr_hit[147] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_11_OFFSET);
    addr_hit[148] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_12_OFFSET);
    addr_hit[149] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_13_OFFSET);
    addr_hit[150] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_14_OFFSET);
    addr_hit[151] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_15_OFFSET);
    addr_hit[152] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_16_OFFSET);
    addr_hit[153] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_17_OFFSET);
    addr_hit[154] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_18_OFFSET);
    addr_hit[155] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_19_OFFSET);
    addr_hit[156] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_20_OFFSET);
    addr_hit[157] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_21_OFFSET);
    addr_hit[158] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_22_OFFSET);
    addr_hit[159] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_23_OFFSET);
    addr_hit[160] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_24_OFFSET);
    addr_hit[161] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_25_OFFSET);
    addr_hit[162] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_26_OFFSET);
    addr_hit[163] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_27_OFFSET);
    addr_hit[164] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_28_OFFSET);
    addr_hit[165] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_29_OFFSET);
    addr_hit[166] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_30_OFFSET);
    addr_hit[167] = (reg_addr == AC_RANGE_CHECK_RANGE_RACL_POLICY_SHADOWED_31_OFFSET);

    if (EnableRacl) begin : gen_racl_hit
      for (int unsigned slice_idx = 0; slice_idx < 168; slice_idx++) begin
        racl_addr_hit_read[slice_idx] =
            addr_hit[slice_idx] & (|(racl_policies_i[RaclPolicySelVec[slice_idx]].read_perm
                                      & racl_role_vec));
        racl_addr_hit_write[slice_idx] =
            addr_hit[slice_idx] & (|(racl_policies_i[RaclPolicySelVec[slice_idx]].write_perm
                                      & racl_role_vec));
      end
    end else begin : gen_no_racl
      racl_addr_hit_read  = addr_hit;
      racl_addr_hit_write = addr_hit;
    end
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
  // A valid address hit, access, but failed the RACL check
  assign racl_error_o.valid = |addr_hit & ((reg_re & ~|racl_addr_hit_read) |
                                           (reg_we & ~|racl_addr_hit_write));
  assign racl_error_o.request_address = top_pkg::TL_AW'(reg_addr);
  assign racl_error_o.racl_role       = racl_role;
  assign racl_error_o.overflow        = 1'b0;

  if (EnableRacl) begin : gen_racl_log
    assign racl_error_o.ctn_uid     = top_racl_pkg::tlul_extract_ctn_uid_bits(tl_i.a_user.rsvd);
    assign racl_error_o.read_access = tl_i.a_opcode == tlul_pkg::Get;
  end else begin : gen_no_racl_log
    assign racl_error_o.ctn_uid     = '0;
    assign racl_error_o.read_access = 1'b0;
  end

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((racl_addr_hit_write[  0] & (|(AC_RANGE_CHECK_PERMIT[  0] & ~reg_be))) |
               (racl_addr_hit_write[  1] & (|(AC_RANGE_CHECK_PERMIT[  1] & ~reg_be))) |
               (racl_addr_hit_write[  2] & (|(AC_RANGE_CHECK_PERMIT[  2] & ~reg_be))) |
               (racl_addr_hit_write[  3] & (|(AC_RANGE_CHECK_PERMIT[  3] & ~reg_be))) |
               (racl_addr_hit_write[  4] & (|(AC_RANGE_CHECK_PERMIT[  4] & ~reg_be))) |
               (racl_addr_hit_write[  5] & (|(AC_RANGE_CHECK_PERMIT[  5] & ~reg_be))) |
               (racl_addr_hit_write[  6] & (|(AC_RANGE_CHECK_PERMIT[  6] & ~reg_be))) |
               (racl_addr_hit_write[  7] & (|(AC_RANGE_CHECK_PERMIT[  7] & ~reg_be))) |
               (racl_addr_hit_write[  8] & (|(AC_RANGE_CHECK_PERMIT[  8] & ~reg_be))) |
               (racl_addr_hit_write[  9] & (|(AC_RANGE_CHECK_PERMIT[  9] & ~reg_be))) |
               (racl_addr_hit_write[ 10] & (|(AC_RANGE_CHECK_PERMIT[ 10] & ~reg_be))) |
               (racl_addr_hit_write[ 11] & (|(AC_RANGE_CHECK_PERMIT[ 11] & ~reg_be))) |
               (racl_addr_hit_write[ 12] & (|(AC_RANGE_CHECK_PERMIT[ 12] & ~reg_be))) |
               (racl_addr_hit_write[ 13] & (|(AC_RANGE_CHECK_PERMIT[ 13] & ~reg_be))) |
               (racl_addr_hit_write[ 14] & (|(AC_RANGE_CHECK_PERMIT[ 14] & ~reg_be))) |
               (racl_addr_hit_write[ 15] & (|(AC_RANGE_CHECK_PERMIT[ 15] & ~reg_be))) |
               (racl_addr_hit_write[ 16] & (|(AC_RANGE_CHECK_PERMIT[ 16] & ~reg_be))) |
               (racl_addr_hit_write[ 17] & (|(AC_RANGE_CHECK_PERMIT[ 17] & ~reg_be))) |
               (racl_addr_hit_write[ 18] & (|(AC_RANGE_CHECK_PERMIT[ 18] & ~reg_be))) |
               (racl_addr_hit_write[ 19] & (|(AC_RANGE_CHECK_PERMIT[ 19] & ~reg_be))) |
               (racl_addr_hit_write[ 20] & (|(AC_RANGE_CHECK_PERMIT[ 20] & ~reg_be))) |
               (racl_addr_hit_write[ 21] & (|(AC_RANGE_CHECK_PERMIT[ 21] & ~reg_be))) |
               (racl_addr_hit_write[ 22] & (|(AC_RANGE_CHECK_PERMIT[ 22] & ~reg_be))) |
               (racl_addr_hit_write[ 23] & (|(AC_RANGE_CHECK_PERMIT[ 23] & ~reg_be))) |
               (racl_addr_hit_write[ 24] & (|(AC_RANGE_CHECK_PERMIT[ 24] & ~reg_be))) |
               (racl_addr_hit_write[ 25] & (|(AC_RANGE_CHECK_PERMIT[ 25] & ~reg_be))) |
               (racl_addr_hit_write[ 26] & (|(AC_RANGE_CHECK_PERMIT[ 26] & ~reg_be))) |
               (racl_addr_hit_write[ 27] & (|(AC_RANGE_CHECK_PERMIT[ 27] & ~reg_be))) |
               (racl_addr_hit_write[ 28] & (|(AC_RANGE_CHECK_PERMIT[ 28] & ~reg_be))) |
               (racl_addr_hit_write[ 29] & (|(AC_RANGE_CHECK_PERMIT[ 29] & ~reg_be))) |
               (racl_addr_hit_write[ 30] & (|(AC_RANGE_CHECK_PERMIT[ 30] & ~reg_be))) |
               (racl_addr_hit_write[ 31] & (|(AC_RANGE_CHECK_PERMIT[ 31] & ~reg_be))) |
               (racl_addr_hit_write[ 32] & (|(AC_RANGE_CHECK_PERMIT[ 32] & ~reg_be))) |
               (racl_addr_hit_write[ 33] & (|(AC_RANGE_CHECK_PERMIT[ 33] & ~reg_be))) |
               (racl_addr_hit_write[ 34] & (|(AC_RANGE_CHECK_PERMIT[ 34] & ~reg_be))) |
               (racl_addr_hit_write[ 35] & (|(AC_RANGE_CHECK_PERMIT[ 35] & ~reg_be))) |
               (racl_addr_hit_write[ 36] & (|(AC_RANGE_CHECK_PERMIT[ 36] & ~reg_be))) |
               (racl_addr_hit_write[ 37] & (|(AC_RANGE_CHECK_PERMIT[ 37] & ~reg_be))) |
               (racl_addr_hit_write[ 38] & (|(AC_RANGE_CHECK_PERMIT[ 38] & ~reg_be))) |
               (racl_addr_hit_write[ 39] & (|(AC_RANGE_CHECK_PERMIT[ 39] & ~reg_be))) |
               (racl_addr_hit_write[ 40] & (|(AC_RANGE_CHECK_PERMIT[ 40] & ~reg_be))) |
               (racl_addr_hit_write[ 41] & (|(AC_RANGE_CHECK_PERMIT[ 41] & ~reg_be))) |
               (racl_addr_hit_write[ 42] & (|(AC_RANGE_CHECK_PERMIT[ 42] & ~reg_be))) |
               (racl_addr_hit_write[ 43] & (|(AC_RANGE_CHECK_PERMIT[ 43] & ~reg_be))) |
               (racl_addr_hit_write[ 44] & (|(AC_RANGE_CHECK_PERMIT[ 44] & ~reg_be))) |
               (racl_addr_hit_write[ 45] & (|(AC_RANGE_CHECK_PERMIT[ 45] & ~reg_be))) |
               (racl_addr_hit_write[ 46] & (|(AC_RANGE_CHECK_PERMIT[ 46] & ~reg_be))) |
               (racl_addr_hit_write[ 47] & (|(AC_RANGE_CHECK_PERMIT[ 47] & ~reg_be))) |
               (racl_addr_hit_write[ 48] & (|(AC_RANGE_CHECK_PERMIT[ 48] & ~reg_be))) |
               (racl_addr_hit_write[ 49] & (|(AC_RANGE_CHECK_PERMIT[ 49] & ~reg_be))) |
               (racl_addr_hit_write[ 50] & (|(AC_RANGE_CHECK_PERMIT[ 50] & ~reg_be))) |
               (racl_addr_hit_write[ 51] & (|(AC_RANGE_CHECK_PERMIT[ 51] & ~reg_be))) |
               (racl_addr_hit_write[ 52] & (|(AC_RANGE_CHECK_PERMIT[ 52] & ~reg_be))) |
               (racl_addr_hit_write[ 53] & (|(AC_RANGE_CHECK_PERMIT[ 53] & ~reg_be))) |
               (racl_addr_hit_write[ 54] & (|(AC_RANGE_CHECK_PERMIT[ 54] & ~reg_be))) |
               (racl_addr_hit_write[ 55] & (|(AC_RANGE_CHECK_PERMIT[ 55] & ~reg_be))) |
               (racl_addr_hit_write[ 56] & (|(AC_RANGE_CHECK_PERMIT[ 56] & ~reg_be))) |
               (racl_addr_hit_write[ 57] & (|(AC_RANGE_CHECK_PERMIT[ 57] & ~reg_be))) |
               (racl_addr_hit_write[ 58] & (|(AC_RANGE_CHECK_PERMIT[ 58] & ~reg_be))) |
               (racl_addr_hit_write[ 59] & (|(AC_RANGE_CHECK_PERMIT[ 59] & ~reg_be))) |
               (racl_addr_hit_write[ 60] & (|(AC_RANGE_CHECK_PERMIT[ 60] & ~reg_be))) |
               (racl_addr_hit_write[ 61] & (|(AC_RANGE_CHECK_PERMIT[ 61] & ~reg_be))) |
               (racl_addr_hit_write[ 62] & (|(AC_RANGE_CHECK_PERMIT[ 62] & ~reg_be))) |
               (racl_addr_hit_write[ 63] & (|(AC_RANGE_CHECK_PERMIT[ 63] & ~reg_be))) |
               (racl_addr_hit_write[ 64] & (|(AC_RANGE_CHECK_PERMIT[ 64] & ~reg_be))) |
               (racl_addr_hit_write[ 65] & (|(AC_RANGE_CHECK_PERMIT[ 65] & ~reg_be))) |
               (racl_addr_hit_write[ 66] & (|(AC_RANGE_CHECK_PERMIT[ 66] & ~reg_be))) |
               (racl_addr_hit_write[ 67] & (|(AC_RANGE_CHECK_PERMIT[ 67] & ~reg_be))) |
               (racl_addr_hit_write[ 68] & (|(AC_RANGE_CHECK_PERMIT[ 68] & ~reg_be))) |
               (racl_addr_hit_write[ 69] & (|(AC_RANGE_CHECK_PERMIT[ 69] & ~reg_be))) |
               (racl_addr_hit_write[ 70] & (|(AC_RANGE_CHECK_PERMIT[ 70] & ~reg_be))) |
               (racl_addr_hit_write[ 71] & (|(AC_RANGE_CHECK_PERMIT[ 71] & ~reg_be))) |
               (racl_addr_hit_write[ 72] & (|(AC_RANGE_CHECK_PERMIT[ 72] & ~reg_be))) |
               (racl_addr_hit_write[ 73] & (|(AC_RANGE_CHECK_PERMIT[ 73] & ~reg_be))) |
               (racl_addr_hit_write[ 74] & (|(AC_RANGE_CHECK_PERMIT[ 74] & ~reg_be))) |
               (racl_addr_hit_write[ 75] & (|(AC_RANGE_CHECK_PERMIT[ 75] & ~reg_be))) |
               (racl_addr_hit_write[ 76] & (|(AC_RANGE_CHECK_PERMIT[ 76] & ~reg_be))) |
               (racl_addr_hit_write[ 77] & (|(AC_RANGE_CHECK_PERMIT[ 77] & ~reg_be))) |
               (racl_addr_hit_write[ 78] & (|(AC_RANGE_CHECK_PERMIT[ 78] & ~reg_be))) |
               (racl_addr_hit_write[ 79] & (|(AC_RANGE_CHECK_PERMIT[ 79] & ~reg_be))) |
               (racl_addr_hit_write[ 80] & (|(AC_RANGE_CHECK_PERMIT[ 80] & ~reg_be))) |
               (racl_addr_hit_write[ 81] & (|(AC_RANGE_CHECK_PERMIT[ 81] & ~reg_be))) |
               (racl_addr_hit_write[ 82] & (|(AC_RANGE_CHECK_PERMIT[ 82] & ~reg_be))) |
               (racl_addr_hit_write[ 83] & (|(AC_RANGE_CHECK_PERMIT[ 83] & ~reg_be))) |
               (racl_addr_hit_write[ 84] & (|(AC_RANGE_CHECK_PERMIT[ 84] & ~reg_be))) |
               (racl_addr_hit_write[ 85] & (|(AC_RANGE_CHECK_PERMIT[ 85] & ~reg_be))) |
               (racl_addr_hit_write[ 86] & (|(AC_RANGE_CHECK_PERMIT[ 86] & ~reg_be))) |
               (racl_addr_hit_write[ 87] & (|(AC_RANGE_CHECK_PERMIT[ 87] & ~reg_be))) |
               (racl_addr_hit_write[ 88] & (|(AC_RANGE_CHECK_PERMIT[ 88] & ~reg_be))) |
               (racl_addr_hit_write[ 89] & (|(AC_RANGE_CHECK_PERMIT[ 89] & ~reg_be))) |
               (racl_addr_hit_write[ 90] & (|(AC_RANGE_CHECK_PERMIT[ 90] & ~reg_be))) |
               (racl_addr_hit_write[ 91] & (|(AC_RANGE_CHECK_PERMIT[ 91] & ~reg_be))) |
               (racl_addr_hit_write[ 92] & (|(AC_RANGE_CHECK_PERMIT[ 92] & ~reg_be))) |
               (racl_addr_hit_write[ 93] & (|(AC_RANGE_CHECK_PERMIT[ 93] & ~reg_be))) |
               (racl_addr_hit_write[ 94] & (|(AC_RANGE_CHECK_PERMIT[ 94] & ~reg_be))) |
               (racl_addr_hit_write[ 95] & (|(AC_RANGE_CHECK_PERMIT[ 95] & ~reg_be))) |
               (racl_addr_hit_write[ 96] & (|(AC_RANGE_CHECK_PERMIT[ 96] & ~reg_be))) |
               (racl_addr_hit_write[ 97] & (|(AC_RANGE_CHECK_PERMIT[ 97] & ~reg_be))) |
               (racl_addr_hit_write[ 98] & (|(AC_RANGE_CHECK_PERMIT[ 98] & ~reg_be))) |
               (racl_addr_hit_write[ 99] & (|(AC_RANGE_CHECK_PERMIT[ 99] & ~reg_be))) |
               (racl_addr_hit_write[100] & (|(AC_RANGE_CHECK_PERMIT[100] & ~reg_be))) |
               (racl_addr_hit_write[101] & (|(AC_RANGE_CHECK_PERMIT[101] & ~reg_be))) |
               (racl_addr_hit_write[102] & (|(AC_RANGE_CHECK_PERMIT[102] & ~reg_be))) |
               (racl_addr_hit_write[103] & (|(AC_RANGE_CHECK_PERMIT[103] & ~reg_be))) |
               (racl_addr_hit_write[104] & (|(AC_RANGE_CHECK_PERMIT[104] & ~reg_be))) |
               (racl_addr_hit_write[105] & (|(AC_RANGE_CHECK_PERMIT[105] & ~reg_be))) |
               (racl_addr_hit_write[106] & (|(AC_RANGE_CHECK_PERMIT[106] & ~reg_be))) |
               (racl_addr_hit_write[107] & (|(AC_RANGE_CHECK_PERMIT[107] & ~reg_be))) |
               (racl_addr_hit_write[108] & (|(AC_RANGE_CHECK_PERMIT[108] & ~reg_be))) |
               (racl_addr_hit_write[109] & (|(AC_RANGE_CHECK_PERMIT[109] & ~reg_be))) |
               (racl_addr_hit_write[110] & (|(AC_RANGE_CHECK_PERMIT[110] & ~reg_be))) |
               (racl_addr_hit_write[111] & (|(AC_RANGE_CHECK_PERMIT[111] & ~reg_be))) |
               (racl_addr_hit_write[112] & (|(AC_RANGE_CHECK_PERMIT[112] & ~reg_be))) |
               (racl_addr_hit_write[113] & (|(AC_RANGE_CHECK_PERMIT[113] & ~reg_be))) |
               (racl_addr_hit_write[114] & (|(AC_RANGE_CHECK_PERMIT[114] & ~reg_be))) |
               (racl_addr_hit_write[115] & (|(AC_RANGE_CHECK_PERMIT[115] & ~reg_be))) |
               (racl_addr_hit_write[116] & (|(AC_RANGE_CHECK_PERMIT[116] & ~reg_be))) |
               (racl_addr_hit_write[117] & (|(AC_RANGE_CHECK_PERMIT[117] & ~reg_be))) |
               (racl_addr_hit_write[118] & (|(AC_RANGE_CHECK_PERMIT[118] & ~reg_be))) |
               (racl_addr_hit_write[119] & (|(AC_RANGE_CHECK_PERMIT[119] & ~reg_be))) |
               (racl_addr_hit_write[120] & (|(AC_RANGE_CHECK_PERMIT[120] & ~reg_be))) |
               (racl_addr_hit_write[121] & (|(AC_RANGE_CHECK_PERMIT[121] & ~reg_be))) |
               (racl_addr_hit_write[122] & (|(AC_RANGE_CHECK_PERMIT[122] & ~reg_be))) |
               (racl_addr_hit_write[123] & (|(AC_RANGE_CHECK_PERMIT[123] & ~reg_be))) |
               (racl_addr_hit_write[124] & (|(AC_RANGE_CHECK_PERMIT[124] & ~reg_be))) |
               (racl_addr_hit_write[125] & (|(AC_RANGE_CHECK_PERMIT[125] & ~reg_be))) |
               (racl_addr_hit_write[126] & (|(AC_RANGE_CHECK_PERMIT[126] & ~reg_be))) |
               (racl_addr_hit_write[127] & (|(AC_RANGE_CHECK_PERMIT[127] & ~reg_be))) |
               (racl_addr_hit_write[128] & (|(AC_RANGE_CHECK_PERMIT[128] & ~reg_be))) |
               (racl_addr_hit_write[129] & (|(AC_RANGE_CHECK_PERMIT[129] & ~reg_be))) |
               (racl_addr_hit_write[130] & (|(AC_RANGE_CHECK_PERMIT[130] & ~reg_be))) |
               (racl_addr_hit_write[131] & (|(AC_RANGE_CHECK_PERMIT[131] & ~reg_be))) |
               (racl_addr_hit_write[132] & (|(AC_RANGE_CHECK_PERMIT[132] & ~reg_be))) |
               (racl_addr_hit_write[133] & (|(AC_RANGE_CHECK_PERMIT[133] & ~reg_be))) |
               (racl_addr_hit_write[134] & (|(AC_RANGE_CHECK_PERMIT[134] & ~reg_be))) |
               (racl_addr_hit_write[135] & (|(AC_RANGE_CHECK_PERMIT[135] & ~reg_be))) |
               (racl_addr_hit_write[136] & (|(AC_RANGE_CHECK_PERMIT[136] & ~reg_be))) |
               (racl_addr_hit_write[137] & (|(AC_RANGE_CHECK_PERMIT[137] & ~reg_be))) |
               (racl_addr_hit_write[138] & (|(AC_RANGE_CHECK_PERMIT[138] & ~reg_be))) |
               (racl_addr_hit_write[139] & (|(AC_RANGE_CHECK_PERMIT[139] & ~reg_be))) |
               (racl_addr_hit_write[140] & (|(AC_RANGE_CHECK_PERMIT[140] & ~reg_be))) |
               (racl_addr_hit_write[141] & (|(AC_RANGE_CHECK_PERMIT[141] & ~reg_be))) |
               (racl_addr_hit_write[142] & (|(AC_RANGE_CHECK_PERMIT[142] & ~reg_be))) |
               (racl_addr_hit_write[143] & (|(AC_RANGE_CHECK_PERMIT[143] & ~reg_be))) |
               (racl_addr_hit_write[144] & (|(AC_RANGE_CHECK_PERMIT[144] & ~reg_be))) |
               (racl_addr_hit_write[145] & (|(AC_RANGE_CHECK_PERMIT[145] & ~reg_be))) |
               (racl_addr_hit_write[146] & (|(AC_RANGE_CHECK_PERMIT[146] & ~reg_be))) |
               (racl_addr_hit_write[147] & (|(AC_RANGE_CHECK_PERMIT[147] & ~reg_be))) |
               (racl_addr_hit_write[148] & (|(AC_RANGE_CHECK_PERMIT[148] & ~reg_be))) |
               (racl_addr_hit_write[149] & (|(AC_RANGE_CHECK_PERMIT[149] & ~reg_be))) |
               (racl_addr_hit_write[150] & (|(AC_RANGE_CHECK_PERMIT[150] & ~reg_be))) |
               (racl_addr_hit_write[151] & (|(AC_RANGE_CHECK_PERMIT[151] & ~reg_be))) |
               (racl_addr_hit_write[152] & (|(AC_RANGE_CHECK_PERMIT[152] & ~reg_be))) |
               (racl_addr_hit_write[153] & (|(AC_RANGE_CHECK_PERMIT[153] & ~reg_be))) |
               (racl_addr_hit_write[154] & (|(AC_RANGE_CHECK_PERMIT[154] & ~reg_be))) |
               (racl_addr_hit_write[155] & (|(AC_RANGE_CHECK_PERMIT[155] & ~reg_be))) |
               (racl_addr_hit_write[156] & (|(AC_RANGE_CHECK_PERMIT[156] & ~reg_be))) |
               (racl_addr_hit_write[157] & (|(AC_RANGE_CHECK_PERMIT[157] & ~reg_be))) |
               (racl_addr_hit_write[158] & (|(AC_RANGE_CHECK_PERMIT[158] & ~reg_be))) |
               (racl_addr_hit_write[159] & (|(AC_RANGE_CHECK_PERMIT[159] & ~reg_be))) |
               (racl_addr_hit_write[160] & (|(AC_RANGE_CHECK_PERMIT[160] & ~reg_be))) |
               (racl_addr_hit_write[161] & (|(AC_RANGE_CHECK_PERMIT[161] & ~reg_be))) |
               (racl_addr_hit_write[162] & (|(AC_RANGE_CHECK_PERMIT[162] & ~reg_be))) |
               (racl_addr_hit_write[163] & (|(AC_RANGE_CHECK_PERMIT[163] & ~reg_be))) |
               (racl_addr_hit_write[164] & (|(AC_RANGE_CHECK_PERMIT[164] & ~reg_be))) |
               (racl_addr_hit_write[165] & (|(AC_RANGE_CHECK_PERMIT[165] & ~reg_be))) |
               (racl_addr_hit_write[166] & (|(AC_RANGE_CHECK_PERMIT[166] & ~reg_be))) |
               (racl_addr_hit_write[167] & (|(AC_RANGE_CHECK_PERMIT[167] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_state_we = racl_addr_hit_write[0] & reg_we & !reg_error;

  assign intr_state_wd = reg_wdata[0];
  assign intr_enable_we = racl_addr_hit_write[1] & reg_we & !reg_error;

  assign intr_enable_wd = reg_wdata[0];
  assign intr_test_we = racl_addr_hit_write[2] & reg_we & !reg_error;

  assign intr_test_wd = reg_wdata[0];
  assign alert_test_we = racl_addr_hit_write[3] & reg_we & !reg_error;

  assign alert_test_recov_ctrl_update_err_wd = reg_wdata[0];

  assign alert_test_fatal_fault_wd = reg_wdata[1];
  assign alert_status_re = racl_addr_hit_read[4] & reg_re & !reg_error;

  assign alert_status_shadowed_update_err_wd = '1;
  assign log_config_we = racl_addr_hit_write[5] & reg_we & !reg_error;

  assign log_config_log_enable_wd = reg_wdata[0];

  assign log_config_log_clear_wd = reg_wdata[1];

  assign log_config_deny_cnt_threshold_wd = reg_wdata[9:2];
  assign range_regwen_0_we = racl_addr_hit_write[8] & reg_we & !reg_error;

  assign range_regwen_0_wd = reg_wdata[3:0];
  assign range_regwen_1_we = racl_addr_hit_write[9] & reg_we & !reg_error;

  assign range_regwen_1_wd = reg_wdata[3:0];
  assign range_regwen_2_we = racl_addr_hit_write[10] & reg_we & !reg_error;

  assign range_regwen_2_wd = reg_wdata[3:0];
  assign range_regwen_3_we = racl_addr_hit_write[11] & reg_we & !reg_error;

  assign range_regwen_3_wd = reg_wdata[3:0];
  assign range_regwen_4_we = racl_addr_hit_write[12] & reg_we & !reg_error;

  assign range_regwen_4_wd = reg_wdata[3:0];
  assign range_regwen_5_we = racl_addr_hit_write[13] & reg_we & !reg_error;

  assign range_regwen_5_wd = reg_wdata[3:0];
  assign range_regwen_6_we = racl_addr_hit_write[14] & reg_we & !reg_error;

  assign range_regwen_6_wd = reg_wdata[3:0];
  assign range_regwen_7_we = racl_addr_hit_write[15] & reg_we & !reg_error;

  assign range_regwen_7_wd = reg_wdata[3:0];
  assign range_regwen_8_we = racl_addr_hit_write[16] & reg_we & !reg_error;

  assign range_regwen_8_wd = reg_wdata[3:0];
  assign range_regwen_9_we = racl_addr_hit_write[17] & reg_we & !reg_error;

  assign range_regwen_9_wd = reg_wdata[3:0];
  assign range_regwen_10_we = racl_addr_hit_write[18] & reg_we & !reg_error;

  assign range_regwen_10_wd = reg_wdata[3:0];
  assign range_regwen_11_we = racl_addr_hit_write[19] & reg_we & !reg_error;

  assign range_regwen_11_wd = reg_wdata[3:0];
  assign range_regwen_12_we = racl_addr_hit_write[20] & reg_we & !reg_error;

  assign range_regwen_12_wd = reg_wdata[3:0];
  assign range_regwen_13_we = racl_addr_hit_write[21] & reg_we & !reg_error;

  assign range_regwen_13_wd = reg_wdata[3:0];
  assign range_regwen_14_we = racl_addr_hit_write[22] & reg_we & !reg_error;

  assign range_regwen_14_wd = reg_wdata[3:0];
  assign range_regwen_15_we = racl_addr_hit_write[23] & reg_we & !reg_error;

  assign range_regwen_15_wd = reg_wdata[3:0];
  assign range_regwen_16_we = racl_addr_hit_write[24] & reg_we & !reg_error;

  assign range_regwen_16_wd = reg_wdata[3:0];
  assign range_regwen_17_we = racl_addr_hit_write[25] & reg_we & !reg_error;

  assign range_regwen_17_wd = reg_wdata[3:0];
  assign range_regwen_18_we = racl_addr_hit_write[26] & reg_we & !reg_error;

  assign range_regwen_18_wd = reg_wdata[3:0];
  assign range_regwen_19_we = racl_addr_hit_write[27] & reg_we & !reg_error;

  assign range_regwen_19_wd = reg_wdata[3:0];
  assign range_regwen_20_we = racl_addr_hit_write[28] & reg_we & !reg_error;

  assign range_regwen_20_wd = reg_wdata[3:0];
  assign range_regwen_21_we = racl_addr_hit_write[29] & reg_we & !reg_error;

  assign range_regwen_21_wd = reg_wdata[3:0];
  assign range_regwen_22_we = racl_addr_hit_write[30] & reg_we & !reg_error;

  assign range_regwen_22_wd = reg_wdata[3:0];
  assign range_regwen_23_we = racl_addr_hit_write[31] & reg_we & !reg_error;

  assign range_regwen_23_wd = reg_wdata[3:0];
  assign range_regwen_24_we = racl_addr_hit_write[32] & reg_we & !reg_error;

  assign range_regwen_24_wd = reg_wdata[3:0];
  assign range_regwen_25_we = racl_addr_hit_write[33] & reg_we & !reg_error;

  assign range_regwen_25_wd = reg_wdata[3:0];
  assign range_regwen_26_we = racl_addr_hit_write[34] & reg_we & !reg_error;

  assign range_regwen_26_wd = reg_wdata[3:0];
  assign range_regwen_27_we = racl_addr_hit_write[35] & reg_we & !reg_error;

  assign range_regwen_27_wd = reg_wdata[3:0];
  assign range_regwen_28_we = racl_addr_hit_write[36] & reg_we & !reg_error;

  assign range_regwen_28_wd = reg_wdata[3:0];
  assign range_regwen_29_we = racl_addr_hit_write[37] & reg_we & !reg_error;

  assign range_regwen_29_wd = reg_wdata[3:0];
  assign range_regwen_30_we = racl_addr_hit_write[38] & reg_we & !reg_error;

  assign range_regwen_30_wd = reg_wdata[3:0];
  assign range_regwen_31_we = racl_addr_hit_write[39] & reg_we & !reg_error;

  assign range_regwen_31_wd = reg_wdata[3:0];
  assign range_base_0_we = racl_addr_hit_write[40] & reg_we & !reg_error;

  assign range_base_0_wd = reg_wdata[31:2];
  assign range_base_1_we = racl_addr_hit_write[41] & reg_we & !reg_error;

  assign range_base_1_wd = reg_wdata[31:2];
  assign range_base_2_we = racl_addr_hit_write[42] & reg_we & !reg_error;

  assign range_base_2_wd = reg_wdata[31:2];
  assign range_base_3_we = racl_addr_hit_write[43] & reg_we & !reg_error;

  assign range_base_3_wd = reg_wdata[31:2];
  assign range_base_4_we = racl_addr_hit_write[44] & reg_we & !reg_error;

  assign range_base_4_wd = reg_wdata[31:2];
  assign range_base_5_we = racl_addr_hit_write[45] & reg_we & !reg_error;

  assign range_base_5_wd = reg_wdata[31:2];
  assign range_base_6_we = racl_addr_hit_write[46] & reg_we & !reg_error;

  assign range_base_6_wd = reg_wdata[31:2];
  assign range_base_7_we = racl_addr_hit_write[47] & reg_we & !reg_error;

  assign range_base_7_wd = reg_wdata[31:2];
  assign range_base_8_we = racl_addr_hit_write[48] & reg_we & !reg_error;

  assign range_base_8_wd = reg_wdata[31:2];
  assign range_base_9_we = racl_addr_hit_write[49] & reg_we & !reg_error;

  assign range_base_9_wd = reg_wdata[31:2];
  assign range_base_10_we = racl_addr_hit_write[50] & reg_we & !reg_error;

  assign range_base_10_wd = reg_wdata[31:2];
  assign range_base_11_we = racl_addr_hit_write[51] & reg_we & !reg_error;

  assign range_base_11_wd = reg_wdata[31:2];
  assign range_base_12_we = racl_addr_hit_write[52] & reg_we & !reg_error;

  assign range_base_12_wd = reg_wdata[31:2];
  assign range_base_13_we = racl_addr_hit_write[53] & reg_we & !reg_error;

  assign range_base_13_wd = reg_wdata[31:2];
  assign range_base_14_we = racl_addr_hit_write[54] & reg_we & !reg_error;

  assign range_base_14_wd = reg_wdata[31:2];
  assign range_base_15_we = racl_addr_hit_write[55] & reg_we & !reg_error;

  assign range_base_15_wd = reg_wdata[31:2];
  assign range_base_16_we = racl_addr_hit_write[56] & reg_we & !reg_error;

  assign range_base_16_wd = reg_wdata[31:2];
  assign range_base_17_we = racl_addr_hit_write[57] & reg_we & !reg_error;

  assign range_base_17_wd = reg_wdata[31:2];
  assign range_base_18_we = racl_addr_hit_write[58] & reg_we & !reg_error;

  assign range_base_18_wd = reg_wdata[31:2];
  assign range_base_19_we = racl_addr_hit_write[59] & reg_we & !reg_error;

  assign range_base_19_wd = reg_wdata[31:2];
  assign range_base_20_we = racl_addr_hit_write[60] & reg_we & !reg_error;

  assign range_base_20_wd = reg_wdata[31:2];
  assign range_base_21_we = racl_addr_hit_write[61] & reg_we & !reg_error;

  assign range_base_21_wd = reg_wdata[31:2];
  assign range_base_22_we = racl_addr_hit_write[62] & reg_we & !reg_error;

  assign range_base_22_wd = reg_wdata[31:2];
  assign range_base_23_we = racl_addr_hit_write[63] & reg_we & !reg_error;

  assign range_base_23_wd = reg_wdata[31:2];
  assign range_base_24_we = racl_addr_hit_write[64] & reg_we & !reg_error;

  assign range_base_24_wd = reg_wdata[31:2];
  assign range_base_25_we = racl_addr_hit_write[65] & reg_we & !reg_error;

  assign range_base_25_wd = reg_wdata[31:2];
  assign range_base_26_we = racl_addr_hit_write[66] & reg_we & !reg_error;

  assign range_base_26_wd = reg_wdata[31:2];
  assign range_base_27_we = racl_addr_hit_write[67] & reg_we & !reg_error;

  assign range_base_27_wd = reg_wdata[31:2];
  assign range_base_28_we = racl_addr_hit_write[68] & reg_we & !reg_error;

  assign range_base_28_wd = reg_wdata[31:2];
  assign range_base_29_we = racl_addr_hit_write[69] & reg_we & !reg_error;

  assign range_base_29_wd = reg_wdata[31:2];
  assign range_base_30_we = racl_addr_hit_write[70] & reg_we & !reg_error;

  assign range_base_30_wd = reg_wdata[31:2];
  assign range_base_31_we = racl_addr_hit_write[71] & reg_we & !reg_error;

  assign range_base_31_wd = reg_wdata[31:2];
  assign range_limit_0_we = racl_addr_hit_write[72] & reg_we & !reg_error;

  assign range_limit_0_wd = reg_wdata[31:2];
  assign range_limit_1_we = racl_addr_hit_write[73] & reg_we & !reg_error;

  assign range_limit_1_wd = reg_wdata[31:2];
  assign range_limit_2_we = racl_addr_hit_write[74] & reg_we & !reg_error;

  assign range_limit_2_wd = reg_wdata[31:2];
  assign range_limit_3_we = racl_addr_hit_write[75] & reg_we & !reg_error;

  assign range_limit_3_wd = reg_wdata[31:2];
  assign range_limit_4_we = racl_addr_hit_write[76] & reg_we & !reg_error;

  assign range_limit_4_wd = reg_wdata[31:2];
  assign range_limit_5_we = racl_addr_hit_write[77] & reg_we & !reg_error;

  assign range_limit_5_wd = reg_wdata[31:2];
  assign range_limit_6_we = racl_addr_hit_write[78] & reg_we & !reg_error;

  assign range_limit_6_wd = reg_wdata[31:2];
  assign range_limit_7_we = racl_addr_hit_write[79] & reg_we & !reg_error;

  assign range_limit_7_wd = reg_wdata[31:2];
  assign range_limit_8_we = racl_addr_hit_write[80] & reg_we & !reg_error;

  assign range_limit_8_wd = reg_wdata[31:2];
  assign range_limit_9_we = racl_addr_hit_write[81] & reg_we & !reg_error;

  assign range_limit_9_wd = reg_wdata[31:2];
  assign range_limit_10_we = racl_addr_hit_write[82] & reg_we & !reg_error;

  assign range_limit_10_wd = reg_wdata[31:2];
  assign range_limit_11_we = racl_addr_hit_write[83] & reg_we & !reg_error;

  assign range_limit_11_wd = reg_wdata[31:2];
  assign range_limit_12_we = racl_addr_hit_write[84] & reg_we & !reg_error;

  assign range_limit_12_wd = reg_wdata[31:2];
  assign range_limit_13_we = racl_addr_hit_write[85] & reg_we & !reg_error;

  assign range_limit_13_wd = reg_wdata[31:2];
  assign range_limit_14_we = racl_addr_hit_write[86] & reg_we & !reg_error;

  assign range_limit_14_wd = reg_wdata[31:2];
  assign range_limit_15_we = racl_addr_hit_write[87] & reg_we & !reg_error;

  assign range_limit_15_wd = reg_wdata[31:2];
  assign range_limit_16_we = racl_addr_hit_write[88] & reg_we & !reg_error;

  assign range_limit_16_wd = reg_wdata[31:2];
  assign range_limit_17_we = racl_addr_hit_write[89] & reg_we & !reg_error;

  assign range_limit_17_wd = reg_wdata[31:2];
  assign range_limit_18_we = racl_addr_hit_write[90] & reg_we & !reg_error;

  assign range_limit_18_wd = reg_wdata[31:2];
  assign range_limit_19_we = racl_addr_hit_write[91] & reg_we & !reg_error;

  assign range_limit_19_wd = reg_wdata[31:2];
  assign range_limit_20_we = racl_addr_hit_write[92] & reg_we & !reg_error;

  assign range_limit_20_wd = reg_wdata[31:2];
  assign range_limit_21_we = racl_addr_hit_write[93] & reg_we & !reg_error;

  assign range_limit_21_wd = reg_wdata[31:2];
  assign range_limit_22_we = racl_addr_hit_write[94] & reg_we & !reg_error;

  assign range_limit_22_wd = reg_wdata[31:2];
  assign range_limit_23_we = racl_addr_hit_write[95] & reg_we & !reg_error;

  assign range_limit_23_wd = reg_wdata[31:2];
  assign range_limit_24_we = racl_addr_hit_write[96] & reg_we & !reg_error;

  assign range_limit_24_wd = reg_wdata[31:2];
  assign range_limit_25_we = racl_addr_hit_write[97] & reg_we & !reg_error;

  assign range_limit_25_wd = reg_wdata[31:2];
  assign range_limit_26_we = racl_addr_hit_write[98] & reg_we & !reg_error;

  assign range_limit_26_wd = reg_wdata[31:2];
  assign range_limit_27_we = racl_addr_hit_write[99] & reg_we & !reg_error;

  assign range_limit_27_wd = reg_wdata[31:2];
  assign range_limit_28_we = racl_addr_hit_write[100] & reg_we & !reg_error;

  assign range_limit_28_wd = reg_wdata[31:2];
  assign range_limit_29_we = racl_addr_hit_write[101] & reg_we & !reg_error;

  assign range_limit_29_wd = reg_wdata[31:2];
  assign range_limit_30_we = racl_addr_hit_write[102] & reg_we & !reg_error;

  assign range_limit_30_wd = reg_wdata[31:2];
  assign range_limit_31_we = racl_addr_hit_write[103] & reg_we & !reg_error;

  assign range_limit_31_wd = reg_wdata[31:2];
  assign range_perm_0_we = racl_addr_hit_write[104] & reg_we & !reg_error;

  assign range_perm_0_enable_0_wd = reg_wdata[3:0];

  assign range_perm_0_read_access_0_wd = reg_wdata[7:4];

  assign range_perm_0_write_access_0_wd = reg_wdata[11:8];

  assign range_perm_0_execute_access_0_wd = reg_wdata[15:12];

  assign range_perm_0_log_denied_access_0_wd = reg_wdata[19:16];
  assign range_perm_1_we = racl_addr_hit_write[105] & reg_we & !reg_error;

  assign range_perm_1_enable_1_wd = reg_wdata[3:0];

  assign range_perm_1_read_access_1_wd = reg_wdata[7:4];

  assign range_perm_1_write_access_1_wd = reg_wdata[11:8];

  assign range_perm_1_execute_access_1_wd = reg_wdata[15:12];

  assign range_perm_1_log_denied_access_1_wd = reg_wdata[19:16];
  assign range_perm_2_we = racl_addr_hit_write[106] & reg_we & !reg_error;

  assign range_perm_2_enable_2_wd = reg_wdata[3:0];

  assign range_perm_2_read_access_2_wd = reg_wdata[7:4];

  assign range_perm_2_write_access_2_wd = reg_wdata[11:8];

  assign range_perm_2_execute_access_2_wd = reg_wdata[15:12];

  assign range_perm_2_log_denied_access_2_wd = reg_wdata[19:16];
  assign range_perm_3_we = racl_addr_hit_write[107] & reg_we & !reg_error;

  assign range_perm_3_enable_3_wd = reg_wdata[3:0];

  assign range_perm_3_read_access_3_wd = reg_wdata[7:4];

  assign range_perm_3_write_access_3_wd = reg_wdata[11:8];

  assign range_perm_3_execute_access_3_wd = reg_wdata[15:12];

  assign range_perm_3_log_denied_access_3_wd = reg_wdata[19:16];
  assign range_perm_4_we = racl_addr_hit_write[108] & reg_we & !reg_error;

  assign range_perm_4_enable_4_wd = reg_wdata[3:0];

  assign range_perm_4_read_access_4_wd = reg_wdata[7:4];

  assign range_perm_4_write_access_4_wd = reg_wdata[11:8];

  assign range_perm_4_execute_access_4_wd = reg_wdata[15:12];

  assign range_perm_4_log_denied_access_4_wd = reg_wdata[19:16];
  assign range_perm_5_we = racl_addr_hit_write[109] & reg_we & !reg_error;

  assign range_perm_5_enable_5_wd = reg_wdata[3:0];

  assign range_perm_5_read_access_5_wd = reg_wdata[7:4];

  assign range_perm_5_write_access_5_wd = reg_wdata[11:8];

  assign range_perm_5_execute_access_5_wd = reg_wdata[15:12];

  assign range_perm_5_log_denied_access_5_wd = reg_wdata[19:16];
  assign range_perm_6_we = racl_addr_hit_write[110] & reg_we & !reg_error;

  assign range_perm_6_enable_6_wd = reg_wdata[3:0];

  assign range_perm_6_read_access_6_wd = reg_wdata[7:4];

  assign range_perm_6_write_access_6_wd = reg_wdata[11:8];

  assign range_perm_6_execute_access_6_wd = reg_wdata[15:12];

  assign range_perm_6_log_denied_access_6_wd = reg_wdata[19:16];
  assign range_perm_7_we = racl_addr_hit_write[111] & reg_we & !reg_error;

  assign range_perm_7_enable_7_wd = reg_wdata[3:0];

  assign range_perm_7_read_access_7_wd = reg_wdata[7:4];

  assign range_perm_7_write_access_7_wd = reg_wdata[11:8];

  assign range_perm_7_execute_access_7_wd = reg_wdata[15:12];

  assign range_perm_7_log_denied_access_7_wd = reg_wdata[19:16];
  assign range_perm_8_we = racl_addr_hit_write[112] & reg_we & !reg_error;

  assign range_perm_8_enable_8_wd = reg_wdata[3:0];

  assign range_perm_8_read_access_8_wd = reg_wdata[7:4];

  assign range_perm_8_write_access_8_wd = reg_wdata[11:8];

  assign range_perm_8_execute_access_8_wd = reg_wdata[15:12];

  assign range_perm_8_log_denied_access_8_wd = reg_wdata[19:16];
  assign range_perm_9_we = racl_addr_hit_write[113] & reg_we & !reg_error;

  assign range_perm_9_enable_9_wd = reg_wdata[3:0];

  assign range_perm_9_read_access_9_wd = reg_wdata[7:4];

  assign range_perm_9_write_access_9_wd = reg_wdata[11:8];

  assign range_perm_9_execute_access_9_wd = reg_wdata[15:12];

  assign range_perm_9_log_denied_access_9_wd = reg_wdata[19:16];
  assign range_perm_10_we = racl_addr_hit_write[114] & reg_we & !reg_error;

  assign range_perm_10_enable_10_wd = reg_wdata[3:0];

  assign range_perm_10_read_access_10_wd = reg_wdata[7:4];

  assign range_perm_10_write_access_10_wd = reg_wdata[11:8];

  assign range_perm_10_execute_access_10_wd = reg_wdata[15:12];

  assign range_perm_10_log_denied_access_10_wd = reg_wdata[19:16];
  assign range_perm_11_we = racl_addr_hit_write[115] & reg_we & !reg_error;

  assign range_perm_11_enable_11_wd = reg_wdata[3:0];

  assign range_perm_11_read_access_11_wd = reg_wdata[7:4];

  assign range_perm_11_write_access_11_wd = reg_wdata[11:8];

  assign range_perm_11_execute_access_11_wd = reg_wdata[15:12];

  assign range_perm_11_log_denied_access_11_wd = reg_wdata[19:16];
  assign range_perm_12_we = racl_addr_hit_write[116] & reg_we & !reg_error;

  assign range_perm_12_enable_12_wd = reg_wdata[3:0];

  assign range_perm_12_read_access_12_wd = reg_wdata[7:4];

  assign range_perm_12_write_access_12_wd = reg_wdata[11:8];

  assign range_perm_12_execute_access_12_wd = reg_wdata[15:12];

  assign range_perm_12_log_denied_access_12_wd = reg_wdata[19:16];
  assign range_perm_13_we = racl_addr_hit_write[117] & reg_we & !reg_error;

  assign range_perm_13_enable_13_wd = reg_wdata[3:0];

  assign range_perm_13_read_access_13_wd = reg_wdata[7:4];

  assign range_perm_13_write_access_13_wd = reg_wdata[11:8];

  assign range_perm_13_execute_access_13_wd = reg_wdata[15:12];

  assign range_perm_13_log_denied_access_13_wd = reg_wdata[19:16];
  assign range_perm_14_we = racl_addr_hit_write[118] & reg_we & !reg_error;

  assign range_perm_14_enable_14_wd = reg_wdata[3:0];

  assign range_perm_14_read_access_14_wd = reg_wdata[7:4];

  assign range_perm_14_write_access_14_wd = reg_wdata[11:8];

  assign range_perm_14_execute_access_14_wd = reg_wdata[15:12];

  assign range_perm_14_log_denied_access_14_wd = reg_wdata[19:16];
  assign range_perm_15_we = racl_addr_hit_write[119] & reg_we & !reg_error;

  assign range_perm_15_enable_15_wd = reg_wdata[3:0];

  assign range_perm_15_read_access_15_wd = reg_wdata[7:4];

  assign range_perm_15_write_access_15_wd = reg_wdata[11:8];

  assign range_perm_15_execute_access_15_wd = reg_wdata[15:12];

  assign range_perm_15_log_denied_access_15_wd = reg_wdata[19:16];
  assign range_perm_16_we = racl_addr_hit_write[120] & reg_we & !reg_error;

  assign range_perm_16_enable_16_wd = reg_wdata[3:0];

  assign range_perm_16_read_access_16_wd = reg_wdata[7:4];

  assign range_perm_16_write_access_16_wd = reg_wdata[11:8];

  assign range_perm_16_execute_access_16_wd = reg_wdata[15:12];

  assign range_perm_16_log_denied_access_16_wd = reg_wdata[19:16];
  assign range_perm_17_we = racl_addr_hit_write[121] & reg_we & !reg_error;

  assign range_perm_17_enable_17_wd = reg_wdata[3:0];

  assign range_perm_17_read_access_17_wd = reg_wdata[7:4];

  assign range_perm_17_write_access_17_wd = reg_wdata[11:8];

  assign range_perm_17_execute_access_17_wd = reg_wdata[15:12];

  assign range_perm_17_log_denied_access_17_wd = reg_wdata[19:16];
  assign range_perm_18_we = racl_addr_hit_write[122] & reg_we & !reg_error;

  assign range_perm_18_enable_18_wd = reg_wdata[3:0];

  assign range_perm_18_read_access_18_wd = reg_wdata[7:4];

  assign range_perm_18_write_access_18_wd = reg_wdata[11:8];

  assign range_perm_18_execute_access_18_wd = reg_wdata[15:12];

  assign range_perm_18_log_denied_access_18_wd = reg_wdata[19:16];
  assign range_perm_19_we = racl_addr_hit_write[123] & reg_we & !reg_error;

  assign range_perm_19_enable_19_wd = reg_wdata[3:0];

  assign range_perm_19_read_access_19_wd = reg_wdata[7:4];

  assign range_perm_19_write_access_19_wd = reg_wdata[11:8];

  assign range_perm_19_execute_access_19_wd = reg_wdata[15:12];

  assign range_perm_19_log_denied_access_19_wd = reg_wdata[19:16];
  assign range_perm_20_we = racl_addr_hit_write[124] & reg_we & !reg_error;

  assign range_perm_20_enable_20_wd = reg_wdata[3:0];

  assign range_perm_20_read_access_20_wd = reg_wdata[7:4];

  assign range_perm_20_write_access_20_wd = reg_wdata[11:8];

  assign range_perm_20_execute_access_20_wd = reg_wdata[15:12];

  assign range_perm_20_log_denied_access_20_wd = reg_wdata[19:16];
  assign range_perm_21_we = racl_addr_hit_write[125] & reg_we & !reg_error;

  assign range_perm_21_enable_21_wd = reg_wdata[3:0];

  assign range_perm_21_read_access_21_wd = reg_wdata[7:4];

  assign range_perm_21_write_access_21_wd = reg_wdata[11:8];

  assign range_perm_21_execute_access_21_wd = reg_wdata[15:12];

  assign range_perm_21_log_denied_access_21_wd = reg_wdata[19:16];
  assign range_perm_22_we = racl_addr_hit_write[126] & reg_we & !reg_error;

  assign range_perm_22_enable_22_wd = reg_wdata[3:0];

  assign range_perm_22_read_access_22_wd = reg_wdata[7:4];

  assign range_perm_22_write_access_22_wd = reg_wdata[11:8];

  assign range_perm_22_execute_access_22_wd = reg_wdata[15:12];

  assign range_perm_22_log_denied_access_22_wd = reg_wdata[19:16];
  assign range_perm_23_we = racl_addr_hit_write[127] & reg_we & !reg_error;

  assign range_perm_23_enable_23_wd = reg_wdata[3:0];

  assign range_perm_23_read_access_23_wd = reg_wdata[7:4];

  assign range_perm_23_write_access_23_wd = reg_wdata[11:8];

  assign range_perm_23_execute_access_23_wd = reg_wdata[15:12];

  assign range_perm_23_log_denied_access_23_wd = reg_wdata[19:16];
  assign range_perm_24_we = racl_addr_hit_write[128] & reg_we & !reg_error;

  assign range_perm_24_enable_24_wd = reg_wdata[3:0];

  assign range_perm_24_read_access_24_wd = reg_wdata[7:4];

  assign range_perm_24_write_access_24_wd = reg_wdata[11:8];

  assign range_perm_24_execute_access_24_wd = reg_wdata[15:12];

  assign range_perm_24_log_denied_access_24_wd = reg_wdata[19:16];
  assign range_perm_25_we = racl_addr_hit_write[129] & reg_we & !reg_error;

  assign range_perm_25_enable_25_wd = reg_wdata[3:0];

  assign range_perm_25_read_access_25_wd = reg_wdata[7:4];

  assign range_perm_25_write_access_25_wd = reg_wdata[11:8];

  assign range_perm_25_execute_access_25_wd = reg_wdata[15:12];

  assign range_perm_25_log_denied_access_25_wd = reg_wdata[19:16];
  assign range_perm_26_we = racl_addr_hit_write[130] & reg_we & !reg_error;

  assign range_perm_26_enable_26_wd = reg_wdata[3:0];

  assign range_perm_26_read_access_26_wd = reg_wdata[7:4];

  assign range_perm_26_write_access_26_wd = reg_wdata[11:8];

  assign range_perm_26_execute_access_26_wd = reg_wdata[15:12];

  assign range_perm_26_log_denied_access_26_wd = reg_wdata[19:16];
  assign range_perm_27_we = racl_addr_hit_write[131] & reg_we & !reg_error;

  assign range_perm_27_enable_27_wd = reg_wdata[3:0];

  assign range_perm_27_read_access_27_wd = reg_wdata[7:4];

  assign range_perm_27_write_access_27_wd = reg_wdata[11:8];

  assign range_perm_27_execute_access_27_wd = reg_wdata[15:12];

  assign range_perm_27_log_denied_access_27_wd = reg_wdata[19:16];
  assign range_perm_28_we = racl_addr_hit_write[132] & reg_we & !reg_error;

  assign range_perm_28_enable_28_wd = reg_wdata[3:0];

  assign range_perm_28_read_access_28_wd = reg_wdata[7:4];

  assign range_perm_28_write_access_28_wd = reg_wdata[11:8];

  assign range_perm_28_execute_access_28_wd = reg_wdata[15:12];

  assign range_perm_28_log_denied_access_28_wd = reg_wdata[19:16];
  assign range_perm_29_we = racl_addr_hit_write[133] & reg_we & !reg_error;

  assign range_perm_29_enable_29_wd = reg_wdata[3:0];

  assign range_perm_29_read_access_29_wd = reg_wdata[7:4];

  assign range_perm_29_write_access_29_wd = reg_wdata[11:8];

  assign range_perm_29_execute_access_29_wd = reg_wdata[15:12];

  assign range_perm_29_log_denied_access_29_wd = reg_wdata[19:16];
  assign range_perm_30_we = racl_addr_hit_write[134] & reg_we & !reg_error;

  assign range_perm_30_enable_30_wd = reg_wdata[3:0];

  assign range_perm_30_read_access_30_wd = reg_wdata[7:4];

  assign range_perm_30_write_access_30_wd = reg_wdata[11:8];

  assign range_perm_30_execute_access_30_wd = reg_wdata[15:12];

  assign range_perm_30_log_denied_access_30_wd = reg_wdata[19:16];
  assign range_perm_31_we = racl_addr_hit_write[135] & reg_we & !reg_error;

  assign range_perm_31_enable_31_wd = reg_wdata[3:0];

  assign range_perm_31_read_access_31_wd = reg_wdata[7:4];

  assign range_perm_31_write_access_31_wd = reg_wdata[11:8];

  assign range_perm_31_execute_access_31_wd = reg_wdata[15:12];

  assign range_perm_31_log_denied_access_31_wd = reg_wdata[19:16];
  assign range_racl_policy_shadowed_0_re = racl_addr_hit_read[136] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_0_we = racl_addr_hit_write[136] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_0_read_perm_0_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_0_write_perm_0_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_1_re = racl_addr_hit_read[137] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_1_we = racl_addr_hit_write[137] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_1_read_perm_1_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_1_write_perm_1_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_2_re = racl_addr_hit_read[138] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_2_we = racl_addr_hit_write[138] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_2_read_perm_2_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_2_write_perm_2_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_3_re = racl_addr_hit_read[139] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_3_we = racl_addr_hit_write[139] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_3_read_perm_3_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_3_write_perm_3_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_4_re = racl_addr_hit_read[140] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_4_we = racl_addr_hit_write[140] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_4_read_perm_4_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_4_write_perm_4_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_5_re = racl_addr_hit_read[141] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_5_we = racl_addr_hit_write[141] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_5_read_perm_5_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_5_write_perm_5_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_6_re = racl_addr_hit_read[142] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_6_we = racl_addr_hit_write[142] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_6_read_perm_6_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_6_write_perm_6_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_7_re = racl_addr_hit_read[143] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_7_we = racl_addr_hit_write[143] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_7_read_perm_7_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_7_write_perm_7_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_8_re = racl_addr_hit_read[144] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_8_we = racl_addr_hit_write[144] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_8_read_perm_8_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_8_write_perm_8_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_9_re = racl_addr_hit_read[145] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_9_we = racl_addr_hit_write[145] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_9_read_perm_9_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_9_write_perm_9_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_10_re = racl_addr_hit_read[146] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_10_we = racl_addr_hit_write[146] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_10_read_perm_10_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_10_write_perm_10_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_11_re = racl_addr_hit_read[147] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_11_we = racl_addr_hit_write[147] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_11_read_perm_11_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_11_write_perm_11_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_12_re = racl_addr_hit_read[148] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_12_we = racl_addr_hit_write[148] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_12_read_perm_12_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_12_write_perm_12_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_13_re = racl_addr_hit_read[149] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_13_we = racl_addr_hit_write[149] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_13_read_perm_13_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_13_write_perm_13_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_14_re = racl_addr_hit_read[150] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_14_we = racl_addr_hit_write[150] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_14_read_perm_14_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_14_write_perm_14_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_15_re = racl_addr_hit_read[151] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_15_we = racl_addr_hit_write[151] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_15_read_perm_15_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_15_write_perm_15_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_16_re = racl_addr_hit_read[152] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_16_we = racl_addr_hit_write[152] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_16_read_perm_16_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_16_write_perm_16_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_17_re = racl_addr_hit_read[153] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_17_we = racl_addr_hit_write[153] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_17_read_perm_17_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_17_write_perm_17_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_18_re = racl_addr_hit_read[154] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_18_we = racl_addr_hit_write[154] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_18_read_perm_18_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_18_write_perm_18_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_19_re = racl_addr_hit_read[155] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_19_we = racl_addr_hit_write[155] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_19_read_perm_19_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_19_write_perm_19_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_20_re = racl_addr_hit_read[156] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_20_we = racl_addr_hit_write[156] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_20_read_perm_20_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_20_write_perm_20_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_21_re = racl_addr_hit_read[157] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_21_we = racl_addr_hit_write[157] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_21_read_perm_21_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_21_write_perm_21_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_22_re = racl_addr_hit_read[158] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_22_we = racl_addr_hit_write[158] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_22_read_perm_22_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_22_write_perm_22_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_23_re = racl_addr_hit_read[159] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_23_we = racl_addr_hit_write[159] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_23_read_perm_23_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_23_write_perm_23_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_24_re = racl_addr_hit_read[160] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_24_we = racl_addr_hit_write[160] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_24_read_perm_24_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_24_write_perm_24_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_25_re = racl_addr_hit_read[161] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_25_we = racl_addr_hit_write[161] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_25_read_perm_25_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_25_write_perm_25_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_26_re = racl_addr_hit_read[162] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_26_we = racl_addr_hit_write[162] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_26_read_perm_26_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_26_write_perm_26_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_27_re = racl_addr_hit_read[163] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_27_we = racl_addr_hit_write[163] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_27_read_perm_27_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_27_write_perm_27_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_28_re = racl_addr_hit_read[164] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_28_we = racl_addr_hit_write[164] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_28_read_perm_28_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_28_write_perm_28_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_29_re = racl_addr_hit_read[165] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_29_we = racl_addr_hit_write[165] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_29_read_perm_29_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_29_write_perm_29_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_30_re = racl_addr_hit_read[166] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_30_we = racl_addr_hit_write[166] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_30_read_perm_30_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_30_write_perm_30_wd = reg_wdata[31:16];
  assign range_racl_policy_shadowed_31_re = racl_addr_hit_read[167] & reg_re & !reg_error;
  assign range_racl_policy_shadowed_31_we = racl_addr_hit_write[167] & reg_we & !reg_error;

  assign range_racl_policy_shadowed_31_read_perm_31_wd = reg_wdata[15:0];

  assign range_racl_policy_shadowed_31_write_perm_31_wd = reg_wdata[31:16];

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = intr_state_we;
    reg_we_check[1] = intr_enable_we;
    reg_we_check[2] = intr_test_we;
    reg_we_check[3] = alert_test_we;
    reg_we_check[4] = 1'b0;
    reg_we_check[5] = log_config_we;
    reg_we_check[6] = 1'b0;
    reg_we_check[7] = 1'b0;
    reg_we_check[8] = range_regwen_0_we;
    reg_we_check[9] = range_regwen_1_we;
    reg_we_check[10] = range_regwen_2_we;
    reg_we_check[11] = range_regwen_3_we;
    reg_we_check[12] = range_regwen_4_we;
    reg_we_check[13] = range_regwen_5_we;
    reg_we_check[14] = range_regwen_6_we;
    reg_we_check[15] = range_regwen_7_we;
    reg_we_check[16] = range_regwen_8_we;
    reg_we_check[17] = range_regwen_9_we;
    reg_we_check[18] = range_regwen_10_we;
    reg_we_check[19] = range_regwen_11_we;
    reg_we_check[20] = range_regwen_12_we;
    reg_we_check[21] = range_regwen_13_we;
    reg_we_check[22] = range_regwen_14_we;
    reg_we_check[23] = range_regwen_15_we;
    reg_we_check[24] = range_regwen_16_we;
    reg_we_check[25] = range_regwen_17_we;
    reg_we_check[26] = range_regwen_18_we;
    reg_we_check[27] = range_regwen_19_we;
    reg_we_check[28] = range_regwen_20_we;
    reg_we_check[29] = range_regwen_21_we;
    reg_we_check[30] = range_regwen_22_we;
    reg_we_check[31] = range_regwen_23_we;
    reg_we_check[32] = range_regwen_24_we;
    reg_we_check[33] = range_regwen_25_we;
    reg_we_check[34] = range_regwen_26_we;
    reg_we_check[35] = range_regwen_27_we;
    reg_we_check[36] = range_regwen_28_we;
    reg_we_check[37] = range_regwen_29_we;
    reg_we_check[38] = range_regwen_30_we;
    reg_we_check[39] = range_regwen_31_we;
    reg_we_check[40] = range_base_0_gated_we;
    reg_we_check[41] = range_base_1_gated_we;
    reg_we_check[42] = range_base_2_gated_we;
    reg_we_check[43] = range_base_3_gated_we;
    reg_we_check[44] = range_base_4_gated_we;
    reg_we_check[45] = range_base_5_gated_we;
    reg_we_check[46] = range_base_6_gated_we;
    reg_we_check[47] = range_base_7_gated_we;
    reg_we_check[48] = range_base_8_gated_we;
    reg_we_check[49] = range_base_9_gated_we;
    reg_we_check[50] = range_base_10_gated_we;
    reg_we_check[51] = range_base_11_gated_we;
    reg_we_check[52] = range_base_12_gated_we;
    reg_we_check[53] = range_base_13_gated_we;
    reg_we_check[54] = range_base_14_gated_we;
    reg_we_check[55] = range_base_15_gated_we;
    reg_we_check[56] = range_base_16_gated_we;
    reg_we_check[57] = range_base_17_gated_we;
    reg_we_check[58] = range_base_18_gated_we;
    reg_we_check[59] = range_base_19_gated_we;
    reg_we_check[60] = range_base_20_gated_we;
    reg_we_check[61] = range_base_21_gated_we;
    reg_we_check[62] = range_base_22_gated_we;
    reg_we_check[63] = range_base_23_gated_we;
    reg_we_check[64] = range_base_24_gated_we;
    reg_we_check[65] = range_base_25_gated_we;
    reg_we_check[66] = range_base_26_gated_we;
    reg_we_check[67] = range_base_27_gated_we;
    reg_we_check[68] = range_base_28_gated_we;
    reg_we_check[69] = range_base_29_gated_we;
    reg_we_check[70] = range_base_30_gated_we;
    reg_we_check[71] = range_base_31_gated_we;
    reg_we_check[72] = range_limit_0_gated_we;
    reg_we_check[73] = range_limit_1_gated_we;
    reg_we_check[74] = range_limit_2_gated_we;
    reg_we_check[75] = range_limit_3_gated_we;
    reg_we_check[76] = range_limit_4_gated_we;
    reg_we_check[77] = range_limit_5_gated_we;
    reg_we_check[78] = range_limit_6_gated_we;
    reg_we_check[79] = range_limit_7_gated_we;
    reg_we_check[80] = range_limit_8_gated_we;
    reg_we_check[81] = range_limit_9_gated_we;
    reg_we_check[82] = range_limit_10_gated_we;
    reg_we_check[83] = range_limit_11_gated_we;
    reg_we_check[84] = range_limit_12_gated_we;
    reg_we_check[85] = range_limit_13_gated_we;
    reg_we_check[86] = range_limit_14_gated_we;
    reg_we_check[87] = range_limit_15_gated_we;
    reg_we_check[88] = range_limit_16_gated_we;
    reg_we_check[89] = range_limit_17_gated_we;
    reg_we_check[90] = range_limit_18_gated_we;
    reg_we_check[91] = range_limit_19_gated_we;
    reg_we_check[92] = range_limit_20_gated_we;
    reg_we_check[93] = range_limit_21_gated_we;
    reg_we_check[94] = range_limit_22_gated_we;
    reg_we_check[95] = range_limit_23_gated_we;
    reg_we_check[96] = range_limit_24_gated_we;
    reg_we_check[97] = range_limit_25_gated_we;
    reg_we_check[98] = range_limit_26_gated_we;
    reg_we_check[99] = range_limit_27_gated_we;
    reg_we_check[100] = range_limit_28_gated_we;
    reg_we_check[101] = range_limit_29_gated_we;
    reg_we_check[102] = range_limit_30_gated_we;
    reg_we_check[103] = range_limit_31_gated_we;
    reg_we_check[104] = range_perm_0_gated_we;
    reg_we_check[105] = range_perm_1_gated_we;
    reg_we_check[106] = range_perm_2_gated_we;
    reg_we_check[107] = range_perm_3_gated_we;
    reg_we_check[108] = range_perm_4_gated_we;
    reg_we_check[109] = range_perm_5_gated_we;
    reg_we_check[110] = range_perm_6_gated_we;
    reg_we_check[111] = range_perm_7_gated_we;
    reg_we_check[112] = range_perm_8_gated_we;
    reg_we_check[113] = range_perm_9_gated_we;
    reg_we_check[114] = range_perm_10_gated_we;
    reg_we_check[115] = range_perm_11_gated_we;
    reg_we_check[116] = range_perm_12_gated_we;
    reg_we_check[117] = range_perm_13_gated_we;
    reg_we_check[118] = range_perm_14_gated_we;
    reg_we_check[119] = range_perm_15_gated_we;
    reg_we_check[120] = range_perm_16_gated_we;
    reg_we_check[121] = range_perm_17_gated_we;
    reg_we_check[122] = range_perm_18_gated_we;
    reg_we_check[123] = range_perm_19_gated_we;
    reg_we_check[124] = range_perm_20_gated_we;
    reg_we_check[125] = range_perm_21_gated_we;
    reg_we_check[126] = range_perm_22_gated_we;
    reg_we_check[127] = range_perm_23_gated_we;
    reg_we_check[128] = range_perm_24_gated_we;
    reg_we_check[129] = range_perm_25_gated_we;
    reg_we_check[130] = range_perm_26_gated_we;
    reg_we_check[131] = range_perm_27_gated_we;
    reg_we_check[132] = range_perm_28_gated_we;
    reg_we_check[133] = range_perm_29_gated_we;
    reg_we_check[134] = range_perm_30_gated_we;
    reg_we_check[135] = range_perm_31_gated_we;
    reg_we_check[136] = range_racl_policy_shadowed_0_gated_we;
    reg_we_check[137] = range_racl_policy_shadowed_1_gated_we;
    reg_we_check[138] = range_racl_policy_shadowed_2_gated_we;
    reg_we_check[139] = range_racl_policy_shadowed_3_gated_we;
    reg_we_check[140] = range_racl_policy_shadowed_4_gated_we;
    reg_we_check[141] = range_racl_policy_shadowed_5_gated_we;
    reg_we_check[142] = range_racl_policy_shadowed_6_gated_we;
    reg_we_check[143] = range_racl_policy_shadowed_7_gated_we;
    reg_we_check[144] = range_racl_policy_shadowed_8_gated_we;
    reg_we_check[145] = range_racl_policy_shadowed_9_gated_we;
    reg_we_check[146] = range_racl_policy_shadowed_10_gated_we;
    reg_we_check[147] = range_racl_policy_shadowed_11_gated_we;
    reg_we_check[148] = range_racl_policy_shadowed_12_gated_we;
    reg_we_check[149] = range_racl_policy_shadowed_13_gated_we;
    reg_we_check[150] = range_racl_policy_shadowed_14_gated_we;
    reg_we_check[151] = range_racl_policy_shadowed_15_gated_we;
    reg_we_check[152] = range_racl_policy_shadowed_16_gated_we;
    reg_we_check[153] = range_racl_policy_shadowed_17_gated_we;
    reg_we_check[154] = range_racl_policy_shadowed_18_gated_we;
    reg_we_check[155] = range_racl_policy_shadowed_19_gated_we;
    reg_we_check[156] = range_racl_policy_shadowed_20_gated_we;
    reg_we_check[157] = range_racl_policy_shadowed_21_gated_we;
    reg_we_check[158] = range_racl_policy_shadowed_22_gated_we;
    reg_we_check[159] = range_racl_policy_shadowed_23_gated_we;
    reg_we_check[160] = range_racl_policy_shadowed_24_gated_we;
    reg_we_check[161] = range_racl_policy_shadowed_25_gated_we;
    reg_we_check[162] = range_racl_policy_shadowed_26_gated_we;
    reg_we_check[163] = range_racl_policy_shadowed_27_gated_we;
    reg_we_check[164] = range_racl_policy_shadowed_28_gated_we;
    reg_we_check[165] = range_racl_policy_shadowed_29_gated_we;
    reg_we_check[166] = range_racl_policy_shadowed_30_gated_we;
    reg_we_check[167] = range_racl_policy_shadowed_31_gated_we;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      racl_addr_hit_read[0]: begin
        reg_rdata_next[0] = intr_state_qs;
      end

      racl_addr_hit_read[1]: begin
        reg_rdata_next[0] = intr_enable_qs;
      end

      racl_addr_hit_read[2]: begin
        reg_rdata_next[0] = '0;
      end

      racl_addr_hit_read[3]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      racl_addr_hit_read[4]: begin
        reg_rdata_next[0] = alert_status_shadowed_update_err_qs;
        reg_rdata_next[1] = alert_status_shadowed_storage_err_qs;
        reg_rdata_next[2] = alert_status_reg_intg_err_qs;
        reg_rdata_next[3] = alert_status_counter_err_qs;
      end

      racl_addr_hit_read[5]: begin
        reg_rdata_next[0] = log_config_log_enable_qs;
        reg_rdata_next[1] = log_config_log_clear_qs;
        reg_rdata_next[9:2] = log_config_deny_cnt_threshold_qs;
      end

      racl_addr_hit_read[6]: begin
        reg_rdata_next[7:0] = log_status_deny_cnt_qs;
        reg_rdata_next[8] = log_status_denied_read_access_qs;
        reg_rdata_next[9] = log_status_denied_write_access_qs;
        reg_rdata_next[10] = log_status_denied_execute_access_qs;
        reg_rdata_next[11] = log_status_denied_no_match_qs;
        reg_rdata_next[12] = log_status_denied_racl_read_qs;
        reg_rdata_next[13] = log_status_denied_racl_write_qs;
        reg_rdata_next[17:14] = log_status_denied_source_role_qs;
        reg_rdata_next[22:18] = log_status_denied_ctn_uid_qs;
        reg_rdata_next[27:23] = log_status_deny_range_index_qs;
      end

      racl_addr_hit_read[7]: begin
        reg_rdata_next[31:0] = log_address_qs;
      end

      racl_addr_hit_read[8]: begin
        reg_rdata_next[3:0] = range_regwen_0_qs;
      end

      racl_addr_hit_read[9]: begin
        reg_rdata_next[3:0] = range_regwen_1_qs;
      end

      racl_addr_hit_read[10]: begin
        reg_rdata_next[3:0] = range_regwen_2_qs;
      end

      racl_addr_hit_read[11]: begin
        reg_rdata_next[3:0] = range_regwen_3_qs;
      end

      racl_addr_hit_read[12]: begin
        reg_rdata_next[3:0] = range_regwen_4_qs;
      end

      racl_addr_hit_read[13]: begin
        reg_rdata_next[3:0] = range_regwen_5_qs;
      end

      racl_addr_hit_read[14]: begin
        reg_rdata_next[3:0] = range_regwen_6_qs;
      end

      racl_addr_hit_read[15]: begin
        reg_rdata_next[3:0] = range_regwen_7_qs;
      end

      racl_addr_hit_read[16]: begin
        reg_rdata_next[3:0] = range_regwen_8_qs;
      end

      racl_addr_hit_read[17]: begin
        reg_rdata_next[3:0] = range_regwen_9_qs;
      end

      racl_addr_hit_read[18]: begin
        reg_rdata_next[3:0] = range_regwen_10_qs;
      end

      racl_addr_hit_read[19]: begin
        reg_rdata_next[3:0] = range_regwen_11_qs;
      end

      racl_addr_hit_read[20]: begin
        reg_rdata_next[3:0] = range_regwen_12_qs;
      end

      racl_addr_hit_read[21]: begin
        reg_rdata_next[3:0] = range_regwen_13_qs;
      end

      racl_addr_hit_read[22]: begin
        reg_rdata_next[3:0] = range_regwen_14_qs;
      end

      racl_addr_hit_read[23]: begin
        reg_rdata_next[3:0] = range_regwen_15_qs;
      end

      racl_addr_hit_read[24]: begin
        reg_rdata_next[3:0] = range_regwen_16_qs;
      end

      racl_addr_hit_read[25]: begin
        reg_rdata_next[3:0] = range_regwen_17_qs;
      end

      racl_addr_hit_read[26]: begin
        reg_rdata_next[3:0] = range_regwen_18_qs;
      end

      racl_addr_hit_read[27]: begin
        reg_rdata_next[3:0] = range_regwen_19_qs;
      end

      racl_addr_hit_read[28]: begin
        reg_rdata_next[3:0] = range_regwen_20_qs;
      end

      racl_addr_hit_read[29]: begin
        reg_rdata_next[3:0] = range_regwen_21_qs;
      end

      racl_addr_hit_read[30]: begin
        reg_rdata_next[3:0] = range_regwen_22_qs;
      end

      racl_addr_hit_read[31]: begin
        reg_rdata_next[3:0] = range_regwen_23_qs;
      end

      racl_addr_hit_read[32]: begin
        reg_rdata_next[3:0] = range_regwen_24_qs;
      end

      racl_addr_hit_read[33]: begin
        reg_rdata_next[3:0] = range_regwen_25_qs;
      end

      racl_addr_hit_read[34]: begin
        reg_rdata_next[3:0] = range_regwen_26_qs;
      end

      racl_addr_hit_read[35]: begin
        reg_rdata_next[3:0] = range_regwen_27_qs;
      end

      racl_addr_hit_read[36]: begin
        reg_rdata_next[3:0] = range_regwen_28_qs;
      end

      racl_addr_hit_read[37]: begin
        reg_rdata_next[3:0] = range_regwen_29_qs;
      end

      racl_addr_hit_read[38]: begin
        reg_rdata_next[3:0] = range_regwen_30_qs;
      end

      racl_addr_hit_read[39]: begin
        reg_rdata_next[3:0] = range_regwen_31_qs;
      end

      racl_addr_hit_read[40]: begin
        reg_rdata_next[31:2] = range_base_0_qs;
      end

      racl_addr_hit_read[41]: begin
        reg_rdata_next[31:2] = range_base_1_qs;
      end

      racl_addr_hit_read[42]: begin
        reg_rdata_next[31:2] = range_base_2_qs;
      end

      racl_addr_hit_read[43]: begin
        reg_rdata_next[31:2] = range_base_3_qs;
      end

      racl_addr_hit_read[44]: begin
        reg_rdata_next[31:2] = range_base_4_qs;
      end

      racl_addr_hit_read[45]: begin
        reg_rdata_next[31:2] = range_base_5_qs;
      end

      racl_addr_hit_read[46]: begin
        reg_rdata_next[31:2] = range_base_6_qs;
      end

      racl_addr_hit_read[47]: begin
        reg_rdata_next[31:2] = range_base_7_qs;
      end

      racl_addr_hit_read[48]: begin
        reg_rdata_next[31:2] = range_base_8_qs;
      end

      racl_addr_hit_read[49]: begin
        reg_rdata_next[31:2] = range_base_9_qs;
      end

      racl_addr_hit_read[50]: begin
        reg_rdata_next[31:2] = range_base_10_qs;
      end

      racl_addr_hit_read[51]: begin
        reg_rdata_next[31:2] = range_base_11_qs;
      end

      racl_addr_hit_read[52]: begin
        reg_rdata_next[31:2] = range_base_12_qs;
      end

      racl_addr_hit_read[53]: begin
        reg_rdata_next[31:2] = range_base_13_qs;
      end

      racl_addr_hit_read[54]: begin
        reg_rdata_next[31:2] = range_base_14_qs;
      end

      racl_addr_hit_read[55]: begin
        reg_rdata_next[31:2] = range_base_15_qs;
      end

      racl_addr_hit_read[56]: begin
        reg_rdata_next[31:2] = range_base_16_qs;
      end

      racl_addr_hit_read[57]: begin
        reg_rdata_next[31:2] = range_base_17_qs;
      end

      racl_addr_hit_read[58]: begin
        reg_rdata_next[31:2] = range_base_18_qs;
      end

      racl_addr_hit_read[59]: begin
        reg_rdata_next[31:2] = range_base_19_qs;
      end

      racl_addr_hit_read[60]: begin
        reg_rdata_next[31:2] = range_base_20_qs;
      end

      racl_addr_hit_read[61]: begin
        reg_rdata_next[31:2] = range_base_21_qs;
      end

      racl_addr_hit_read[62]: begin
        reg_rdata_next[31:2] = range_base_22_qs;
      end

      racl_addr_hit_read[63]: begin
        reg_rdata_next[31:2] = range_base_23_qs;
      end

      racl_addr_hit_read[64]: begin
        reg_rdata_next[31:2] = range_base_24_qs;
      end

      racl_addr_hit_read[65]: begin
        reg_rdata_next[31:2] = range_base_25_qs;
      end

      racl_addr_hit_read[66]: begin
        reg_rdata_next[31:2] = range_base_26_qs;
      end

      racl_addr_hit_read[67]: begin
        reg_rdata_next[31:2] = range_base_27_qs;
      end

      racl_addr_hit_read[68]: begin
        reg_rdata_next[31:2] = range_base_28_qs;
      end

      racl_addr_hit_read[69]: begin
        reg_rdata_next[31:2] = range_base_29_qs;
      end

      racl_addr_hit_read[70]: begin
        reg_rdata_next[31:2] = range_base_30_qs;
      end

      racl_addr_hit_read[71]: begin
        reg_rdata_next[31:2] = range_base_31_qs;
      end

      racl_addr_hit_read[72]: begin
        reg_rdata_next[31:2] = range_limit_0_qs;
      end

      racl_addr_hit_read[73]: begin
        reg_rdata_next[31:2] = range_limit_1_qs;
      end

      racl_addr_hit_read[74]: begin
        reg_rdata_next[31:2] = range_limit_2_qs;
      end

      racl_addr_hit_read[75]: begin
        reg_rdata_next[31:2] = range_limit_3_qs;
      end

      racl_addr_hit_read[76]: begin
        reg_rdata_next[31:2] = range_limit_4_qs;
      end

      racl_addr_hit_read[77]: begin
        reg_rdata_next[31:2] = range_limit_5_qs;
      end

      racl_addr_hit_read[78]: begin
        reg_rdata_next[31:2] = range_limit_6_qs;
      end

      racl_addr_hit_read[79]: begin
        reg_rdata_next[31:2] = range_limit_7_qs;
      end

      racl_addr_hit_read[80]: begin
        reg_rdata_next[31:2] = range_limit_8_qs;
      end

      racl_addr_hit_read[81]: begin
        reg_rdata_next[31:2] = range_limit_9_qs;
      end

      racl_addr_hit_read[82]: begin
        reg_rdata_next[31:2] = range_limit_10_qs;
      end

      racl_addr_hit_read[83]: begin
        reg_rdata_next[31:2] = range_limit_11_qs;
      end

      racl_addr_hit_read[84]: begin
        reg_rdata_next[31:2] = range_limit_12_qs;
      end

      racl_addr_hit_read[85]: begin
        reg_rdata_next[31:2] = range_limit_13_qs;
      end

      racl_addr_hit_read[86]: begin
        reg_rdata_next[31:2] = range_limit_14_qs;
      end

      racl_addr_hit_read[87]: begin
        reg_rdata_next[31:2] = range_limit_15_qs;
      end

      racl_addr_hit_read[88]: begin
        reg_rdata_next[31:2] = range_limit_16_qs;
      end

      racl_addr_hit_read[89]: begin
        reg_rdata_next[31:2] = range_limit_17_qs;
      end

      racl_addr_hit_read[90]: begin
        reg_rdata_next[31:2] = range_limit_18_qs;
      end

      racl_addr_hit_read[91]: begin
        reg_rdata_next[31:2] = range_limit_19_qs;
      end

      racl_addr_hit_read[92]: begin
        reg_rdata_next[31:2] = range_limit_20_qs;
      end

      racl_addr_hit_read[93]: begin
        reg_rdata_next[31:2] = range_limit_21_qs;
      end

      racl_addr_hit_read[94]: begin
        reg_rdata_next[31:2] = range_limit_22_qs;
      end

      racl_addr_hit_read[95]: begin
        reg_rdata_next[31:2] = range_limit_23_qs;
      end

      racl_addr_hit_read[96]: begin
        reg_rdata_next[31:2] = range_limit_24_qs;
      end

      racl_addr_hit_read[97]: begin
        reg_rdata_next[31:2] = range_limit_25_qs;
      end

      racl_addr_hit_read[98]: begin
        reg_rdata_next[31:2] = range_limit_26_qs;
      end

      racl_addr_hit_read[99]: begin
        reg_rdata_next[31:2] = range_limit_27_qs;
      end

      racl_addr_hit_read[100]: begin
        reg_rdata_next[31:2] = range_limit_28_qs;
      end

      racl_addr_hit_read[101]: begin
        reg_rdata_next[31:2] = range_limit_29_qs;
      end

      racl_addr_hit_read[102]: begin
        reg_rdata_next[31:2] = range_limit_30_qs;
      end

      racl_addr_hit_read[103]: begin
        reg_rdata_next[31:2] = range_limit_31_qs;
      end

      racl_addr_hit_read[104]: begin
        reg_rdata_next[3:0] = range_perm_0_enable_0_qs;
        reg_rdata_next[7:4] = range_perm_0_read_access_0_qs;
        reg_rdata_next[11:8] = range_perm_0_write_access_0_qs;
        reg_rdata_next[15:12] = range_perm_0_execute_access_0_qs;
        reg_rdata_next[19:16] = range_perm_0_log_denied_access_0_qs;
      end

      racl_addr_hit_read[105]: begin
        reg_rdata_next[3:0] = range_perm_1_enable_1_qs;
        reg_rdata_next[7:4] = range_perm_1_read_access_1_qs;
        reg_rdata_next[11:8] = range_perm_1_write_access_1_qs;
        reg_rdata_next[15:12] = range_perm_1_execute_access_1_qs;
        reg_rdata_next[19:16] = range_perm_1_log_denied_access_1_qs;
      end

      racl_addr_hit_read[106]: begin
        reg_rdata_next[3:0] = range_perm_2_enable_2_qs;
        reg_rdata_next[7:4] = range_perm_2_read_access_2_qs;
        reg_rdata_next[11:8] = range_perm_2_write_access_2_qs;
        reg_rdata_next[15:12] = range_perm_2_execute_access_2_qs;
        reg_rdata_next[19:16] = range_perm_2_log_denied_access_2_qs;
      end

      racl_addr_hit_read[107]: begin
        reg_rdata_next[3:0] = range_perm_3_enable_3_qs;
        reg_rdata_next[7:4] = range_perm_3_read_access_3_qs;
        reg_rdata_next[11:8] = range_perm_3_write_access_3_qs;
        reg_rdata_next[15:12] = range_perm_3_execute_access_3_qs;
        reg_rdata_next[19:16] = range_perm_3_log_denied_access_3_qs;
      end

      racl_addr_hit_read[108]: begin
        reg_rdata_next[3:0] = range_perm_4_enable_4_qs;
        reg_rdata_next[7:4] = range_perm_4_read_access_4_qs;
        reg_rdata_next[11:8] = range_perm_4_write_access_4_qs;
        reg_rdata_next[15:12] = range_perm_4_execute_access_4_qs;
        reg_rdata_next[19:16] = range_perm_4_log_denied_access_4_qs;
      end

      racl_addr_hit_read[109]: begin
        reg_rdata_next[3:0] = range_perm_5_enable_5_qs;
        reg_rdata_next[7:4] = range_perm_5_read_access_5_qs;
        reg_rdata_next[11:8] = range_perm_5_write_access_5_qs;
        reg_rdata_next[15:12] = range_perm_5_execute_access_5_qs;
        reg_rdata_next[19:16] = range_perm_5_log_denied_access_5_qs;
      end

      racl_addr_hit_read[110]: begin
        reg_rdata_next[3:0] = range_perm_6_enable_6_qs;
        reg_rdata_next[7:4] = range_perm_6_read_access_6_qs;
        reg_rdata_next[11:8] = range_perm_6_write_access_6_qs;
        reg_rdata_next[15:12] = range_perm_6_execute_access_6_qs;
        reg_rdata_next[19:16] = range_perm_6_log_denied_access_6_qs;
      end

      racl_addr_hit_read[111]: begin
        reg_rdata_next[3:0] = range_perm_7_enable_7_qs;
        reg_rdata_next[7:4] = range_perm_7_read_access_7_qs;
        reg_rdata_next[11:8] = range_perm_7_write_access_7_qs;
        reg_rdata_next[15:12] = range_perm_7_execute_access_7_qs;
        reg_rdata_next[19:16] = range_perm_7_log_denied_access_7_qs;
      end

      racl_addr_hit_read[112]: begin
        reg_rdata_next[3:0] = range_perm_8_enable_8_qs;
        reg_rdata_next[7:4] = range_perm_8_read_access_8_qs;
        reg_rdata_next[11:8] = range_perm_8_write_access_8_qs;
        reg_rdata_next[15:12] = range_perm_8_execute_access_8_qs;
        reg_rdata_next[19:16] = range_perm_8_log_denied_access_8_qs;
      end

      racl_addr_hit_read[113]: begin
        reg_rdata_next[3:0] = range_perm_9_enable_9_qs;
        reg_rdata_next[7:4] = range_perm_9_read_access_9_qs;
        reg_rdata_next[11:8] = range_perm_9_write_access_9_qs;
        reg_rdata_next[15:12] = range_perm_9_execute_access_9_qs;
        reg_rdata_next[19:16] = range_perm_9_log_denied_access_9_qs;
      end

      racl_addr_hit_read[114]: begin
        reg_rdata_next[3:0] = range_perm_10_enable_10_qs;
        reg_rdata_next[7:4] = range_perm_10_read_access_10_qs;
        reg_rdata_next[11:8] = range_perm_10_write_access_10_qs;
        reg_rdata_next[15:12] = range_perm_10_execute_access_10_qs;
        reg_rdata_next[19:16] = range_perm_10_log_denied_access_10_qs;
      end

      racl_addr_hit_read[115]: begin
        reg_rdata_next[3:0] = range_perm_11_enable_11_qs;
        reg_rdata_next[7:4] = range_perm_11_read_access_11_qs;
        reg_rdata_next[11:8] = range_perm_11_write_access_11_qs;
        reg_rdata_next[15:12] = range_perm_11_execute_access_11_qs;
        reg_rdata_next[19:16] = range_perm_11_log_denied_access_11_qs;
      end

      racl_addr_hit_read[116]: begin
        reg_rdata_next[3:0] = range_perm_12_enable_12_qs;
        reg_rdata_next[7:4] = range_perm_12_read_access_12_qs;
        reg_rdata_next[11:8] = range_perm_12_write_access_12_qs;
        reg_rdata_next[15:12] = range_perm_12_execute_access_12_qs;
        reg_rdata_next[19:16] = range_perm_12_log_denied_access_12_qs;
      end

      racl_addr_hit_read[117]: begin
        reg_rdata_next[3:0] = range_perm_13_enable_13_qs;
        reg_rdata_next[7:4] = range_perm_13_read_access_13_qs;
        reg_rdata_next[11:8] = range_perm_13_write_access_13_qs;
        reg_rdata_next[15:12] = range_perm_13_execute_access_13_qs;
        reg_rdata_next[19:16] = range_perm_13_log_denied_access_13_qs;
      end

      racl_addr_hit_read[118]: begin
        reg_rdata_next[3:0] = range_perm_14_enable_14_qs;
        reg_rdata_next[7:4] = range_perm_14_read_access_14_qs;
        reg_rdata_next[11:8] = range_perm_14_write_access_14_qs;
        reg_rdata_next[15:12] = range_perm_14_execute_access_14_qs;
        reg_rdata_next[19:16] = range_perm_14_log_denied_access_14_qs;
      end

      racl_addr_hit_read[119]: begin
        reg_rdata_next[3:0] = range_perm_15_enable_15_qs;
        reg_rdata_next[7:4] = range_perm_15_read_access_15_qs;
        reg_rdata_next[11:8] = range_perm_15_write_access_15_qs;
        reg_rdata_next[15:12] = range_perm_15_execute_access_15_qs;
        reg_rdata_next[19:16] = range_perm_15_log_denied_access_15_qs;
      end

      racl_addr_hit_read[120]: begin
        reg_rdata_next[3:0] = range_perm_16_enable_16_qs;
        reg_rdata_next[7:4] = range_perm_16_read_access_16_qs;
        reg_rdata_next[11:8] = range_perm_16_write_access_16_qs;
        reg_rdata_next[15:12] = range_perm_16_execute_access_16_qs;
        reg_rdata_next[19:16] = range_perm_16_log_denied_access_16_qs;
      end

      racl_addr_hit_read[121]: begin
        reg_rdata_next[3:0] = range_perm_17_enable_17_qs;
        reg_rdata_next[7:4] = range_perm_17_read_access_17_qs;
        reg_rdata_next[11:8] = range_perm_17_write_access_17_qs;
        reg_rdata_next[15:12] = range_perm_17_execute_access_17_qs;
        reg_rdata_next[19:16] = range_perm_17_log_denied_access_17_qs;
      end

      racl_addr_hit_read[122]: begin
        reg_rdata_next[3:0] = range_perm_18_enable_18_qs;
        reg_rdata_next[7:4] = range_perm_18_read_access_18_qs;
        reg_rdata_next[11:8] = range_perm_18_write_access_18_qs;
        reg_rdata_next[15:12] = range_perm_18_execute_access_18_qs;
        reg_rdata_next[19:16] = range_perm_18_log_denied_access_18_qs;
      end

      racl_addr_hit_read[123]: begin
        reg_rdata_next[3:0] = range_perm_19_enable_19_qs;
        reg_rdata_next[7:4] = range_perm_19_read_access_19_qs;
        reg_rdata_next[11:8] = range_perm_19_write_access_19_qs;
        reg_rdata_next[15:12] = range_perm_19_execute_access_19_qs;
        reg_rdata_next[19:16] = range_perm_19_log_denied_access_19_qs;
      end

      racl_addr_hit_read[124]: begin
        reg_rdata_next[3:0] = range_perm_20_enable_20_qs;
        reg_rdata_next[7:4] = range_perm_20_read_access_20_qs;
        reg_rdata_next[11:8] = range_perm_20_write_access_20_qs;
        reg_rdata_next[15:12] = range_perm_20_execute_access_20_qs;
        reg_rdata_next[19:16] = range_perm_20_log_denied_access_20_qs;
      end

      racl_addr_hit_read[125]: begin
        reg_rdata_next[3:0] = range_perm_21_enable_21_qs;
        reg_rdata_next[7:4] = range_perm_21_read_access_21_qs;
        reg_rdata_next[11:8] = range_perm_21_write_access_21_qs;
        reg_rdata_next[15:12] = range_perm_21_execute_access_21_qs;
        reg_rdata_next[19:16] = range_perm_21_log_denied_access_21_qs;
      end

      racl_addr_hit_read[126]: begin
        reg_rdata_next[3:0] = range_perm_22_enable_22_qs;
        reg_rdata_next[7:4] = range_perm_22_read_access_22_qs;
        reg_rdata_next[11:8] = range_perm_22_write_access_22_qs;
        reg_rdata_next[15:12] = range_perm_22_execute_access_22_qs;
        reg_rdata_next[19:16] = range_perm_22_log_denied_access_22_qs;
      end

      racl_addr_hit_read[127]: begin
        reg_rdata_next[3:0] = range_perm_23_enable_23_qs;
        reg_rdata_next[7:4] = range_perm_23_read_access_23_qs;
        reg_rdata_next[11:8] = range_perm_23_write_access_23_qs;
        reg_rdata_next[15:12] = range_perm_23_execute_access_23_qs;
        reg_rdata_next[19:16] = range_perm_23_log_denied_access_23_qs;
      end

      racl_addr_hit_read[128]: begin
        reg_rdata_next[3:0] = range_perm_24_enable_24_qs;
        reg_rdata_next[7:4] = range_perm_24_read_access_24_qs;
        reg_rdata_next[11:8] = range_perm_24_write_access_24_qs;
        reg_rdata_next[15:12] = range_perm_24_execute_access_24_qs;
        reg_rdata_next[19:16] = range_perm_24_log_denied_access_24_qs;
      end

      racl_addr_hit_read[129]: begin
        reg_rdata_next[3:0] = range_perm_25_enable_25_qs;
        reg_rdata_next[7:4] = range_perm_25_read_access_25_qs;
        reg_rdata_next[11:8] = range_perm_25_write_access_25_qs;
        reg_rdata_next[15:12] = range_perm_25_execute_access_25_qs;
        reg_rdata_next[19:16] = range_perm_25_log_denied_access_25_qs;
      end

      racl_addr_hit_read[130]: begin
        reg_rdata_next[3:0] = range_perm_26_enable_26_qs;
        reg_rdata_next[7:4] = range_perm_26_read_access_26_qs;
        reg_rdata_next[11:8] = range_perm_26_write_access_26_qs;
        reg_rdata_next[15:12] = range_perm_26_execute_access_26_qs;
        reg_rdata_next[19:16] = range_perm_26_log_denied_access_26_qs;
      end

      racl_addr_hit_read[131]: begin
        reg_rdata_next[3:0] = range_perm_27_enable_27_qs;
        reg_rdata_next[7:4] = range_perm_27_read_access_27_qs;
        reg_rdata_next[11:8] = range_perm_27_write_access_27_qs;
        reg_rdata_next[15:12] = range_perm_27_execute_access_27_qs;
        reg_rdata_next[19:16] = range_perm_27_log_denied_access_27_qs;
      end

      racl_addr_hit_read[132]: begin
        reg_rdata_next[3:0] = range_perm_28_enable_28_qs;
        reg_rdata_next[7:4] = range_perm_28_read_access_28_qs;
        reg_rdata_next[11:8] = range_perm_28_write_access_28_qs;
        reg_rdata_next[15:12] = range_perm_28_execute_access_28_qs;
        reg_rdata_next[19:16] = range_perm_28_log_denied_access_28_qs;
      end

      racl_addr_hit_read[133]: begin
        reg_rdata_next[3:0] = range_perm_29_enable_29_qs;
        reg_rdata_next[7:4] = range_perm_29_read_access_29_qs;
        reg_rdata_next[11:8] = range_perm_29_write_access_29_qs;
        reg_rdata_next[15:12] = range_perm_29_execute_access_29_qs;
        reg_rdata_next[19:16] = range_perm_29_log_denied_access_29_qs;
      end

      racl_addr_hit_read[134]: begin
        reg_rdata_next[3:0] = range_perm_30_enable_30_qs;
        reg_rdata_next[7:4] = range_perm_30_read_access_30_qs;
        reg_rdata_next[11:8] = range_perm_30_write_access_30_qs;
        reg_rdata_next[15:12] = range_perm_30_execute_access_30_qs;
        reg_rdata_next[19:16] = range_perm_30_log_denied_access_30_qs;
      end

      racl_addr_hit_read[135]: begin
        reg_rdata_next[3:0] = range_perm_31_enable_31_qs;
        reg_rdata_next[7:4] = range_perm_31_read_access_31_qs;
        reg_rdata_next[11:8] = range_perm_31_write_access_31_qs;
        reg_rdata_next[15:12] = range_perm_31_execute_access_31_qs;
        reg_rdata_next[19:16] = range_perm_31_log_denied_access_31_qs;
      end

      racl_addr_hit_read[136]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_0_read_perm_0_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_0_write_perm_0_qs;
      end

      racl_addr_hit_read[137]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_1_read_perm_1_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_1_write_perm_1_qs;
      end

      racl_addr_hit_read[138]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_2_read_perm_2_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_2_write_perm_2_qs;
      end

      racl_addr_hit_read[139]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_3_read_perm_3_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_3_write_perm_3_qs;
      end

      racl_addr_hit_read[140]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_4_read_perm_4_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_4_write_perm_4_qs;
      end

      racl_addr_hit_read[141]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_5_read_perm_5_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_5_write_perm_5_qs;
      end

      racl_addr_hit_read[142]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_6_read_perm_6_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_6_write_perm_6_qs;
      end

      racl_addr_hit_read[143]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_7_read_perm_7_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_7_write_perm_7_qs;
      end

      racl_addr_hit_read[144]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_8_read_perm_8_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_8_write_perm_8_qs;
      end

      racl_addr_hit_read[145]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_9_read_perm_9_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_9_write_perm_9_qs;
      end

      racl_addr_hit_read[146]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_10_read_perm_10_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_10_write_perm_10_qs;
      end

      racl_addr_hit_read[147]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_11_read_perm_11_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_11_write_perm_11_qs;
      end

      racl_addr_hit_read[148]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_12_read_perm_12_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_12_write_perm_12_qs;
      end

      racl_addr_hit_read[149]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_13_read_perm_13_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_13_write_perm_13_qs;
      end

      racl_addr_hit_read[150]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_14_read_perm_14_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_14_write_perm_14_qs;
      end

      racl_addr_hit_read[151]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_15_read_perm_15_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_15_write_perm_15_qs;
      end

      racl_addr_hit_read[152]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_16_read_perm_16_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_16_write_perm_16_qs;
      end

      racl_addr_hit_read[153]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_17_read_perm_17_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_17_write_perm_17_qs;
      end

      racl_addr_hit_read[154]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_18_read_perm_18_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_18_write_perm_18_qs;
      end

      racl_addr_hit_read[155]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_19_read_perm_19_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_19_write_perm_19_qs;
      end

      racl_addr_hit_read[156]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_20_read_perm_20_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_20_write_perm_20_qs;
      end

      racl_addr_hit_read[157]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_21_read_perm_21_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_21_write_perm_21_qs;
      end

      racl_addr_hit_read[158]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_22_read_perm_22_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_22_write_perm_22_qs;
      end

      racl_addr_hit_read[159]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_23_read_perm_23_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_23_write_perm_23_qs;
      end

      racl_addr_hit_read[160]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_24_read_perm_24_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_24_write_perm_24_qs;
      end

      racl_addr_hit_read[161]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_25_read_perm_25_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_25_write_perm_25_qs;
      end

      racl_addr_hit_read[162]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_26_read_perm_26_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_26_write_perm_26_qs;
      end

      racl_addr_hit_read[163]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_27_read_perm_27_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_27_write_perm_27_qs;
      end

      racl_addr_hit_read[164]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_28_read_perm_28_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_28_write_perm_28_qs;
      end

      racl_addr_hit_read[165]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_29_read_perm_29_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_29_write_perm_29_qs;
      end

      racl_addr_hit_read[166]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_30_read_perm_30_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_30_write_perm_30_qs;
      end

      racl_addr_hit_read[167]: begin
        reg_rdata_next[15:0] = range_racl_policy_shadowed_31_read_perm_31_qs;
        reg_rdata_next[31:16] = range_racl_policy_shadowed_31_write_perm_31_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  logic rst_done;
  logic shadow_rst_done;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      rst_done <= '0;
    end else begin
      rst_done <= 1'b1;
    end
  end

  always_ff @(posedge clk_i or negedge rst_shadowed_ni) begin
    if (!rst_shadowed_ni) begin
      shadow_rst_done <= '0;
    end else begin
      shadow_rst_done <= 1'b1;
    end
  end

  // both shadow and normal resets have been released
  assign shadow_busy = ~(rst_done & shadow_rst_done);

  // Collect up storage and update errors
  assign shadowed_storage_err_o = |{
    range_racl_policy_shadowed_0_read_perm_0_storage_err,
    range_racl_policy_shadowed_0_write_perm_0_storage_err,
    range_racl_policy_shadowed_1_read_perm_1_storage_err,
    range_racl_policy_shadowed_1_write_perm_1_storage_err,
    range_racl_policy_shadowed_2_read_perm_2_storage_err,
    range_racl_policy_shadowed_2_write_perm_2_storage_err,
    range_racl_policy_shadowed_3_read_perm_3_storage_err,
    range_racl_policy_shadowed_3_write_perm_3_storage_err,
    range_racl_policy_shadowed_4_read_perm_4_storage_err,
    range_racl_policy_shadowed_4_write_perm_4_storage_err,
    range_racl_policy_shadowed_5_read_perm_5_storage_err,
    range_racl_policy_shadowed_5_write_perm_5_storage_err,
    range_racl_policy_shadowed_6_read_perm_6_storage_err,
    range_racl_policy_shadowed_6_write_perm_6_storage_err,
    range_racl_policy_shadowed_7_read_perm_7_storage_err,
    range_racl_policy_shadowed_7_write_perm_7_storage_err,
    range_racl_policy_shadowed_8_read_perm_8_storage_err,
    range_racl_policy_shadowed_8_write_perm_8_storage_err,
    range_racl_policy_shadowed_9_read_perm_9_storage_err,
    range_racl_policy_shadowed_9_write_perm_9_storage_err,
    range_racl_policy_shadowed_10_read_perm_10_storage_err,
    range_racl_policy_shadowed_10_write_perm_10_storage_err,
    range_racl_policy_shadowed_11_read_perm_11_storage_err,
    range_racl_policy_shadowed_11_write_perm_11_storage_err,
    range_racl_policy_shadowed_12_read_perm_12_storage_err,
    range_racl_policy_shadowed_12_write_perm_12_storage_err,
    range_racl_policy_shadowed_13_read_perm_13_storage_err,
    range_racl_policy_shadowed_13_write_perm_13_storage_err,
    range_racl_policy_shadowed_14_read_perm_14_storage_err,
    range_racl_policy_shadowed_14_write_perm_14_storage_err,
    range_racl_policy_shadowed_15_read_perm_15_storage_err,
    range_racl_policy_shadowed_15_write_perm_15_storage_err,
    range_racl_policy_shadowed_16_read_perm_16_storage_err,
    range_racl_policy_shadowed_16_write_perm_16_storage_err,
    range_racl_policy_shadowed_17_read_perm_17_storage_err,
    range_racl_policy_shadowed_17_write_perm_17_storage_err,
    range_racl_policy_shadowed_18_read_perm_18_storage_err,
    range_racl_policy_shadowed_18_write_perm_18_storage_err,
    range_racl_policy_shadowed_19_read_perm_19_storage_err,
    range_racl_policy_shadowed_19_write_perm_19_storage_err,
    range_racl_policy_shadowed_20_read_perm_20_storage_err,
    range_racl_policy_shadowed_20_write_perm_20_storage_err,
    range_racl_policy_shadowed_21_read_perm_21_storage_err,
    range_racl_policy_shadowed_21_write_perm_21_storage_err,
    range_racl_policy_shadowed_22_read_perm_22_storage_err,
    range_racl_policy_shadowed_22_write_perm_22_storage_err,
    range_racl_policy_shadowed_23_read_perm_23_storage_err,
    range_racl_policy_shadowed_23_write_perm_23_storage_err,
    range_racl_policy_shadowed_24_read_perm_24_storage_err,
    range_racl_policy_shadowed_24_write_perm_24_storage_err,
    range_racl_policy_shadowed_25_read_perm_25_storage_err,
    range_racl_policy_shadowed_25_write_perm_25_storage_err,
    range_racl_policy_shadowed_26_read_perm_26_storage_err,
    range_racl_policy_shadowed_26_write_perm_26_storage_err,
    range_racl_policy_shadowed_27_read_perm_27_storage_err,
    range_racl_policy_shadowed_27_write_perm_27_storage_err,
    range_racl_policy_shadowed_28_read_perm_28_storage_err,
    range_racl_policy_shadowed_28_write_perm_28_storage_err,
    range_racl_policy_shadowed_29_read_perm_29_storage_err,
    range_racl_policy_shadowed_29_write_perm_29_storage_err,
    range_racl_policy_shadowed_30_read_perm_30_storage_err,
    range_racl_policy_shadowed_30_write_perm_30_storage_err,
    range_racl_policy_shadowed_31_read_perm_31_storage_err,
    range_racl_policy_shadowed_31_write_perm_31_storage_err
  };
  assign shadowed_update_err_o = |{
    range_racl_policy_shadowed_0_read_perm_0_update_err,
    range_racl_policy_shadowed_0_write_perm_0_update_err,
    range_racl_policy_shadowed_1_read_perm_1_update_err,
    range_racl_policy_shadowed_1_write_perm_1_update_err,
    range_racl_policy_shadowed_2_read_perm_2_update_err,
    range_racl_policy_shadowed_2_write_perm_2_update_err,
    range_racl_policy_shadowed_3_read_perm_3_update_err,
    range_racl_policy_shadowed_3_write_perm_3_update_err,
    range_racl_policy_shadowed_4_read_perm_4_update_err,
    range_racl_policy_shadowed_4_write_perm_4_update_err,
    range_racl_policy_shadowed_5_read_perm_5_update_err,
    range_racl_policy_shadowed_5_write_perm_5_update_err,
    range_racl_policy_shadowed_6_read_perm_6_update_err,
    range_racl_policy_shadowed_6_write_perm_6_update_err,
    range_racl_policy_shadowed_7_read_perm_7_update_err,
    range_racl_policy_shadowed_7_write_perm_7_update_err,
    range_racl_policy_shadowed_8_read_perm_8_update_err,
    range_racl_policy_shadowed_8_write_perm_8_update_err,
    range_racl_policy_shadowed_9_read_perm_9_update_err,
    range_racl_policy_shadowed_9_write_perm_9_update_err,
    range_racl_policy_shadowed_10_read_perm_10_update_err,
    range_racl_policy_shadowed_10_write_perm_10_update_err,
    range_racl_policy_shadowed_11_read_perm_11_update_err,
    range_racl_policy_shadowed_11_write_perm_11_update_err,
    range_racl_policy_shadowed_12_read_perm_12_update_err,
    range_racl_policy_shadowed_12_write_perm_12_update_err,
    range_racl_policy_shadowed_13_read_perm_13_update_err,
    range_racl_policy_shadowed_13_write_perm_13_update_err,
    range_racl_policy_shadowed_14_read_perm_14_update_err,
    range_racl_policy_shadowed_14_write_perm_14_update_err,
    range_racl_policy_shadowed_15_read_perm_15_update_err,
    range_racl_policy_shadowed_15_write_perm_15_update_err,
    range_racl_policy_shadowed_16_read_perm_16_update_err,
    range_racl_policy_shadowed_16_write_perm_16_update_err,
    range_racl_policy_shadowed_17_read_perm_17_update_err,
    range_racl_policy_shadowed_17_write_perm_17_update_err,
    range_racl_policy_shadowed_18_read_perm_18_update_err,
    range_racl_policy_shadowed_18_write_perm_18_update_err,
    range_racl_policy_shadowed_19_read_perm_19_update_err,
    range_racl_policy_shadowed_19_write_perm_19_update_err,
    range_racl_policy_shadowed_20_read_perm_20_update_err,
    range_racl_policy_shadowed_20_write_perm_20_update_err,
    range_racl_policy_shadowed_21_read_perm_21_update_err,
    range_racl_policy_shadowed_21_write_perm_21_update_err,
    range_racl_policy_shadowed_22_read_perm_22_update_err,
    range_racl_policy_shadowed_22_write_perm_22_update_err,
    range_racl_policy_shadowed_23_read_perm_23_update_err,
    range_racl_policy_shadowed_23_write_perm_23_update_err,
    range_racl_policy_shadowed_24_read_perm_24_update_err,
    range_racl_policy_shadowed_24_write_perm_24_update_err,
    range_racl_policy_shadowed_25_read_perm_25_update_err,
    range_racl_policy_shadowed_25_write_perm_25_update_err,
    range_racl_policy_shadowed_26_read_perm_26_update_err,
    range_racl_policy_shadowed_26_write_perm_26_update_err,
    range_racl_policy_shadowed_27_read_perm_27_update_err,
    range_racl_policy_shadowed_27_write_perm_27_update_err,
    range_racl_policy_shadowed_28_read_perm_28_update_err,
    range_racl_policy_shadowed_28_write_perm_28_update_err,
    range_racl_policy_shadowed_29_read_perm_29_update_err,
    range_racl_policy_shadowed_29_write_perm_29_update_err,
    range_racl_policy_shadowed_30_read_perm_30_update_err,
    range_racl_policy_shadowed_30_write_perm_30_update_err,
    range_racl_policy_shadowed_31_read_perm_31_update_err,
    range_racl_policy_shadowed_31_write_perm_31_update_err
  };

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;
  logic unused_policy_sel;
  assign unused_policy_sel = ^racl_policies_i;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
