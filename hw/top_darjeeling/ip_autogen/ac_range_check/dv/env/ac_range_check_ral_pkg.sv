// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// UVM Registers auto-generated by `reggen` containing data structure
package ac_range_check_ral_pkg;
  // dep packages
  import uvm_pkg::*;
  import dv_base_reg_pkg::*;

  // macro includes
  `include "uvm_macros.svh"

  // Forward declare all register/memory/block classes
  typedef class ac_range_check_reg_intr_state;
  typedef class ac_range_check_reg_intr_enable;
  typedef class ac_range_check_reg_intr_test;
  typedef class ac_range_check_reg_alert_test;
  typedef class ac_range_check_reg_log_config;
  typedef class ac_range_check_reg_log_status;
  typedef class ac_range_check_reg_log_address;
  typedef class ac_range_check_reg_range_regwen;
  typedef class ac_range_check_reg_range_base;
  typedef class ac_range_check_reg_range_limit;
  typedef class ac_range_check_reg_range_perm;
  typedef class ac_range_check_reg_range_racl_policy_shadowed;
  typedef class ac_range_check_reg_block;

  class ac_range_check_reg_intr_state extends dv_base_reg;
    // fields
    rand dv_base_reg_field deny_cnt_reached;

    `uvm_object_utils(ac_range_check_reg_intr_state)

    function new(string       name = "ac_range_check_reg_intr_state",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      deny_cnt_reached =
          (dv_base_reg_field::
           type_id::create("deny_cnt_reached"));
      deny_cnt_reached.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("W1C"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      deny_cnt_reached.set_original_access("W1C");
    endfunction : build
  endclass : ac_range_check_reg_intr_state

  class ac_range_check_reg_intr_enable extends dv_base_reg;
    // fields
    rand dv_base_reg_field deny_cnt_reached;

    `uvm_object_utils(ac_range_check_reg_intr_enable)

    function new(string       name = "ac_range_check_reg_intr_enable",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      deny_cnt_reached =
          (dv_base_reg_field::
           type_id::create("deny_cnt_reached"));
      deny_cnt_reached.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("RW"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      deny_cnt_reached.set_original_access("RW");
    endfunction : build
  endclass : ac_range_check_reg_intr_enable

  class ac_range_check_reg_intr_test extends dv_base_reg;
    // fields
    rand dv_base_reg_field deny_cnt_reached;

    `uvm_object_utils(ac_range_check_reg_intr_test)

    function new(string       name = "ac_range_check_reg_intr_test",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      deny_cnt_reached =
          (dv_base_reg_field::
           type_id::create("deny_cnt_reached"));
      deny_cnt_reached.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("WO"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      deny_cnt_reached.set_original_access("WO");
      set_is_ext_reg(1);
    endfunction : build
  endclass : ac_range_check_reg_intr_test

  class ac_range_check_reg_alert_test extends dv_base_reg;
    // fields
    rand dv_base_reg_field recov_ctrl_update_err;
    rand dv_base_reg_field fatal_fault;

    `uvm_object_utils(ac_range_check_reg_alert_test)

    function new(string       name = "ac_range_check_reg_alert_test",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      recov_ctrl_update_err =
          (dv_base_reg_field::
           type_id::create("recov_ctrl_update_err"));
      recov_ctrl_update_err.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("WO"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      recov_ctrl_update_err.set_original_access("WO");
      fatal_fault =
          (dv_base_reg_field::
           type_id::create("fatal_fault"));
      fatal_fault.configure(
        .parent(this),
        .size(1),
        .lsb_pos(1),
        .access("WO"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      fatal_fault.set_original_access("WO");
      set_is_ext_reg(1);
    endfunction : build
  endclass : ac_range_check_reg_alert_test

  class ac_range_check_reg_log_config extends dv_base_reg;
    // fields
    rand dv_base_reg_field log_enable;
    rand dv_base_reg_field log_clear;
    rand dv_base_reg_field deny_cnt_threshold;

    `uvm_object_utils(ac_range_check_reg_log_config)

    function new(string       name = "ac_range_check_reg_log_config",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      log_enable =
          (dv_base_reg_field::
           type_id::create("log_enable"));
      log_enable.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("RW"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      log_enable.set_original_access("RW");
      log_clear =
          (dv_base_reg_field::
           type_id::create("log_clear"));
      log_clear.configure(
        .parent(this),
        .size(1),
        .lsb_pos(1),
        .access("RW"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      log_clear.set_original_access("RW");
      deny_cnt_threshold =
          (dv_base_reg_field::
           type_id::create("deny_cnt_threshold"));
      deny_cnt_threshold.configure(
        .parent(this),
        .size(8),
        .lsb_pos(2),
        .access("RW"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      deny_cnt_threshold.set_original_access("RW");
    endfunction : build
  endclass : ac_range_check_reg_log_config

  class ac_range_check_reg_log_status extends dv_base_reg;
    // fields
    rand dv_base_reg_field deny_cnt;
    rand dv_base_reg_field denied_read_access;
    rand dv_base_reg_field denied_write_access;
    rand dv_base_reg_field denied_execute_access;
    rand dv_base_reg_field denied_no_match;
    rand dv_base_reg_field denied_racl_read;
    rand dv_base_reg_field denied_racl_write;
    rand dv_base_reg_field denied_source_role;
    rand dv_base_reg_field denied_ctn_uid;
    rand dv_base_reg_field deny_range_index;

    `uvm_object_utils(ac_range_check_reg_log_status)

    function new(string       name = "ac_range_check_reg_log_status",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      deny_cnt =
          (dv_base_reg_field::
           type_id::create("deny_cnt"));
      deny_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      deny_cnt.set_original_access("RO");
      denied_read_access =
          (dv_base_reg_field::
           type_id::create("denied_read_access"));
      denied_read_access.configure(
        .parent(this),
        .size(1),
        .lsb_pos(8),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      denied_read_access.set_original_access("RO");
      denied_write_access =
          (dv_base_reg_field::
           type_id::create("denied_write_access"));
      denied_write_access.configure(
        .parent(this),
        .size(1),
        .lsb_pos(9),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      denied_write_access.set_original_access("RO");
      denied_execute_access =
          (dv_base_reg_field::
           type_id::create("denied_execute_access"));
      denied_execute_access.configure(
        .parent(this),
        .size(1),
        .lsb_pos(10),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      denied_execute_access.set_original_access("RO");
      denied_no_match =
          (dv_base_reg_field::
           type_id::create("denied_no_match"));
      denied_no_match.configure(
        .parent(this),
        .size(1),
        .lsb_pos(11),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      denied_no_match.set_original_access("RO");
      denied_racl_read =
          (dv_base_reg_field::
           type_id::create("denied_racl_read"));
      denied_racl_read.configure(
        .parent(this),
        .size(1),
        .lsb_pos(12),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      denied_racl_read.set_original_access("RO");
      denied_racl_write =
          (dv_base_reg_field::
           type_id::create("denied_racl_write"));
      denied_racl_write.configure(
        .parent(this),
        .size(1),
        .lsb_pos(13),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      denied_racl_write.set_original_access("RO");
      denied_source_role =
          (dv_base_reg_field::
           type_id::create("denied_source_role"));
      denied_source_role.configure(
        .parent(this),
        .size(4),
        .lsb_pos(14),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      denied_source_role.set_original_access("RO");
      denied_ctn_uid =
          (dv_base_reg_field::
           type_id::create("denied_ctn_uid"));
      denied_ctn_uid.configure(
        .parent(this),
        .size(5),
        .lsb_pos(18),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      denied_ctn_uid.set_original_access("RO");
      deny_range_index =
          (dv_base_reg_field::
           type_id::create("deny_range_index"));
      deny_range_index.configure(
        .parent(this),
        .size(5),
        .lsb_pos(23),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      deny_range_index.set_original_access("RO");
    endfunction : build
  endclass : ac_range_check_reg_log_status

  class ac_range_check_reg_log_address extends dv_base_reg;
    // fields
    rand dv_base_reg_field log_address;

    `uvm_object_utils(ac_range_check_reg_log_address)

    function new(string       name = "ac_range_check_reg_log_address",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      log_address =
          (dv_base_reg_field::
           type_id::create("log_address"));
      log_address.configure(
        .parent(this),
        .size(32),
        .lsb_pos(0),
        .access("RO"),
        .mubi_access("NONE"),
        .volatile(1),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      log_address.set_original_access("RO");
    endfunction : build
  endclass : ac_range_check_reg_log_address

  class ac_range_check_reg_range_regwen extends dv_base_reg;
    // fields
    rand dv_base_reg_field regwen;

    `uvm_object_utils(ac_range_check_reg_range_regwen)

    function new(string       name = "ac_range_check_reg_range_regwen",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      regwen =
          (dv_base_reg_field::
           type_id::create("regwen"));
      regwen.configure(
        .parent(this),
        .size(4),
        .lsb_pos(0),
        .access("RW"),
        .mubi_access("W0C"),
        .volatile(0),
        .reset(32'h6),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      regwen.set_original_access("RW");
      regwen.set_mubi_width(4);
    endfunction : build
  endclass : ac_range_check_reg_range_regwen

  class ac_range_check_reg_range_base extends dv_base_reg;
    // fields
    rand dv_base_reg_field base;

    `uvm_object_utils(ac_range_check_reg_range_base)

    function new(string       name = "ac_range_check_reg_range_base",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      base =
          (dv_base_reg_field::
           type_id::create("base"));
      base.configure(
        .parent(this),
        .size(30),
        .lsb_pos(2),
        .access("RW"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      base.set_original_access("RW");
    endfunction : build
  endclass : ac_range_check_reg_range_base

  class ac_range_check_reg_range_limit extends dv_base_reg;
    // fields
    rand dv_base_reg_field limit;

    `uvm_object_utils(ac_range_check_reg_range_limit)

    function new(string       name = "ac_range_check_reg_range_limit",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      limit =
          (dv_base_reg_field::
           type_id::create("limit"));
      limit.configure(
        .parent(this),
        .size(30),
        .lsb_pos(2),
        .access("RW"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      limit.set_original_access("RW");
    endfunction : build
  endclass : ac_range_check_reg_range_limit

  class ac_range_check_reg_range_perm extends dv_base_reg;
    // fields
    rand dv_base_reg_field enable;
    rand dv_base_reg_field read_access;
    rand dv_base_reg_field write_access;
    rand dv_base_reg_field execute_access;
    rand dv_base_reg_field log_denied_access;

    `uvm_object_utils(ac_range_check_reg_range_perm)

    function new(string       name = "ac_range_check_reg_range_perm",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      enable =
          (dv_base_reg_field::
           type_id::create("enable"));
      enable.configure(
        .parent(this),
        .size(4),
        .lsb_pos(0),
        .access("RW"),
        .mubi_access("RW"),
        .volatile(0),
        .reset(32'h9),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      enable.set_original_access("RW");
      enable.set_mubi_width(4);
      read_access =
          (dv_base_reg_field::
           type_id::create("read_access"));
      read_access.configure(
        .parent(this),
        .size(4),
        .lsb_pos(4),
        .access("RW"),
        .mubi_access("RW"),
        .volatile(0),
        .reset(32'h9),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      read_access.set_original_access("RW");
      read_access.set_mubi_width(4);
      write_access =
          (dv_base_reg_field::
           type_id::create("write_access"));
      write_access.configure(
        .parent(this),
        .size(4),
        .lsb_pos(8),
        .access("RW"),
        .mubi_access("RW"),
        .volatile(0),
        .reset(32'h9),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      write_access.set_original_access("RW");
      write_access.set_mubi_width(4);
      execute_access =
          (dv_base_reg_field::
           type_id::create("execute_access"));
      execute_access.configure(
        .parent(this),
        .size(4),
        .lsb_pos(12),
        .access("RW"),
        .mubi_access("RW"),
        .volatile(0),
        .reset(32'h9),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      execute_access.set_original_access("RW");
      execute_access.set_mubi_width(4);
      log_denied_access =
          (dv_base_reg_field::
           type_id::create("log_denied_access"));
      log_denied_access.configure(
        .parent(this),
        .size(4),
        .lsb_pos(16),
        .access("RW"),
        .mubi_access("RW"),
        .volatile(0),
        .reset(32'h6),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      log_denied_access.set_original_access("RW");
      log_denied_access.set_mubi_width(4);
    endfunction : build
  endclass : ac_range_check_reg_range_perm

  class ac_range_check_reg_range_racl_policy_shadowed extends dv_base_reg;
    // fields
    rand dv_base_reg_field read_perm;
    rand dv_base_reg_field write_perm;

    `uvm_object_utils(ac_range_check_reg_range_racl_policy_shadowed)

    function new(string       name = "ac_range_check_reg_range_racl_policy_shadowed",
                 int unsigned n_bits = 32,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      read_perm =
          (dv_base_reg_field::
           type_id::create("read_perm"));
      read_perm.configure(
        .parent(this),
        .size(16),
        .lsb_pos(0),
        .access("RW"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      read_perm.set_original_access("RW");
      write_perm =
          (dv_base_reg_field::
           type_id::create("write_perm"));
      write_perm.configure(
        .parent(this),
        .size(16),
        .lsb_pos(16),
        .access("RW"),
        .mubi_access("NONE"),
        .volatile(0),
        .reset(32'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      write_perm.set_original_access("RW");
    endfunction : build
  endclass : ac_range_check_reg_range_racl_policy_shadowed

  class ac_range_check_reg_block extends dv_base_reg_block;
    // registers
    rand ac_range_check_reg_intr_state intr_state;
    rand ac_range_check_reg_intr_enable intr_enable;
    rand ac_range_check_reg_intr_test intr_test;
    rand ac_range_check_reg_alert_test alert_test;
    rand ac_range_check_reg_log_config log_config;
    rand ac_range_check_reg_log_status log_status;
    rand ac_range_check_reg_log_address log_address;
    rand ac_range_check_reg_range_regwen range_regwen[32];
    rand ac_range_check_reg_range_base range_base[32];
    rand ac_range_check_reg_range_limit range_limit[32];
    rand ac_range_check_reg_range_perm range_perm[32];
    rand ac_range_check_reg_range_racl_policy_shadowed range_racl_policy_shadowed[32];

    `uvm_object_utils(ac_range_check_reg_block)

    function new(string name = "ac_range_check_reg_block",
                 int    has_coverage = UVM_NO_COVERAGE);
      super.new(name, has_coverage);
    endfunction : new

    virtual function void build(uvm_reg_addr_t base_addr,
                                csr_excl_item csr_excl = null);
      // create default map
      this.default_map = create_map(.name("default_map"),
                                    .base_addr(base_addr),
                                    .n_bytes(4),
                                    .endian(UVM_LITTLE_ENDIAN));
      if (csr_excl == null) begin
        csr_excl = csr_excl_item::type_id::create("csr_excl");
        this.csr_excl = csr_excl;
      end
      set_hdl_path_root("tb.dut", "BkdrRegPathRtl");
      set_hdl_path_root("tb.dut", "BkdrRegPathRtlShadow");
      // create registers
      intr_state =
          (ac_range_check_reg_intr_state::
           type_id::create("intr_state"));
      intr_state.configure(.blk_parent(this));
      intr_state.build(csr_excl);
      default_map.add_reg(.rg(intr_state),
                          .offset(32'h0));
      intr_state.add_hdl_path_slice(
          "u_ac_range_check_reg.u_intr_state.q",
          0, 1, 0, "BkdrRegPathRtl");

      // create register tags
      csr_excl.add_excl(intr_state.get_full_name(),
                        CsrExclAll, CsrAllTests);
      intr_enable =
          (ac_range_check_reg_intr_enable::
           type_id::create("intr_enable"));
      intr_enable.configure(.blk_parent(this));
      intr_enable.build(csr_excl);
      default_map.add_reg(.rg(intr_enable),
                          .offset(32'h4));
      intr_enable.add_hdl_path_slice(
          "u_ac_range_check_reg.u_intr_enable.q",
          0, 1, 0, "BkdrRegPathRtl");

      intr_test =
          (ac_range_check_reg_intr_test::
           type_id::create("intr_test"));
      intr_test.configure(.blk_parent(this));
      intr_test.build(csr_excl);
      default_map.add_reg(.rg(intr_test),
                          .offset(32'h8));
      intr_test.add_hdl_path_slice(
          "u_ac_range_check_reg.u_intr_test.qs",
          0, 1, 0, "BkdrRegPathRtl");

      // create register tags
      csr_excl.add_excl(intr_test.get_full_name(),
                        CsrExclWrite, CsrNonInitTests);
      alert_test =
          (ac_range_check_reg_alert_test::
           type_id::create("alert_test"));
      alert_test.configure(.blk_parent(this));
      alert_test.build(csr_excl);
      default_map.add_reg(.rg(alert_test),
                          .offset(32'hc));
      alert_test.add_hdl_path_slice(
          "u_ac_range_check_reg.u_alert_test_recov_ctrl_update_err.qs",
          0, 1, 0, "BkdrRegPathRtl");
      alert_test.add_hdl_path_slice(
          "u_ac_range_check_reg.u_alert_test_fatal_fault.qs",
          1, 1, 0, "BkdrRegPathRtl");

      log_config =
          (ac_range_check_reg_log_config::
           type_id::create("log_config"));
      log_config.configure(.blk_parent(this));
      log_config.build(csr_excl);
      default_map.add_reg(.rg(log_config),
                          .offset(32'h10));
      log_config.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_config_log_enable.q",
          0, 1, 0, "BkdrRegPathRtl");
      log_config.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_config_log_clear.q",
          1, 1, 0, "BkdrRegPathRtl");
      log_config.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_config_deny_cnt_threshold.q",
          2, 8, 0, "BkdrRegPathRtl");

      log_status =
          (ac_range_check_reg_log_status::
           type_id::create("log_status"));
      log_status.configure(.blk_parent(this));
      log_status.build(csr_excl);
      default_map.add_reg(.rg(log_status),
                          .offset(32'h14));
      log_status.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_status_deny_cnt.q",
          0, 8, 0, "BkdrRegPathRtl");
      log_status.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_status_denied_read_access.q",
          8, 1, 0, "BkdrRegPathRtl");
      log_status.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_status_denied_write_access.q",
          9, 1, 0, "BkdrRegPathRtl");
      log_status.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_status_denied_execute_access.q",
          10, 1, 0, "BkdrRegPathRtl");
      log_status.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_status_denied_no_match.q",
          11, 1, 0, "BkdrRegPathRtl");
      log_status.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_status_denied_racl_read.q",
          12, 1, 0, "BkdrRegPathRtl");
      log_status.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_status_denied_racl_write.q",
          13, 1, 0, "BkdrRegPathRtl");
      log_status.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_status_denied_source_role.q",
          14, 4, 0, "BkdrRegPathRtl");
      log_status.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_status_denied_ctn_uid.q",
          18, 5, 0, "BkdrRegPathRtl");
      log_status.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_status_deny_range_index.q",
          23, 5, 0, "BkdrRegPathRtl");

      log_address =
          (ac_range_check_reg_log_address::
           type_id::create("log_address"));
      log_address.configure(.blk_parent(this));
      log_address.build(csr_excl);
      default_map.add_reg(.rg(log_address),
                          .offset(32'h18));
      log_address.add_hdl_path_slice(
          "u_ac_range_check_reg.u_log_address.q",
          0, 32, 0, "BkdrRegPathRtl");

      range_regwen[0] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_0"));
      range_regwen[0].configure(.blk_parent(this));
      range_regwen[0].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[0]),
                          .offset(32'h1c));
      range_regwen[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_0.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[1] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_1"));
      range_regwen[1].configure(.blk_parent(this));
      range_regwen[1].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[1]),
                          .offset(32'h20));
      range_regwen[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_1.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[2] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_2"));
      range_regwen[2].configure(.blk_parent(this));
      range_regwen[2].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[2]),
                          .offset(32'h24));
      range_regwen[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_2.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[3] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_3"));
      range_regwen[3].configure(.blk_parent(this));
      range_regwen[3].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[3]),
                          .offset(32'h28));
      range_regwen[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_3.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[4] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_4"));
      range_regwen[4].configure(.blk_parent(this));
      range_regwen[4].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[4]),
                          .offset(32'h2c));
      range_regwen[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_4.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[5] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_5"));
      range_regwen[5].configure(.blk_parent(this));
      range_regwen[5].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[5]),
                          .offset(32'h30));
      range_regwen[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_5.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[6] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_6"));
      range_regwen[6].configure(.blk_parent(this));
      range_regwen[6].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[6]),
                          .offset(32'h34));
      range_regwen[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_6.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[7] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_7"));
      range_regwen[7].configure(.blk_parent(this));
      range_regwen[7].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[7]),
                          .offset(32'h38));
      range_regwen[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_7.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[8] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_8"));
      range_regwen[8].configure(.blk_parent(this));
      range_regwen[8].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[8]),
                          .offset(32'h3c));
      range_regwen[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_8.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[9] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_9"));
      range_regwen[9].configure(.blk_parent(this));
      range_regwen[9].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[9]),
                          .offset(32'h40));
      range_regwen[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_9.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[10] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_10"));
      range_regwen[10].configure(.blk_parent(this));
      range_regwen[10].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[10]),
                          .offset(32'h44));
      range_regwen[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_10.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[11] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_11"));
      range_regwen[11].configure(.blk_parent(this));
      range_regwen[11].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[11]),
                          .offset(32'h48));
      range_regwen[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_11.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[12] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_12"));
      range_regwen[12].configure(.blk_parent(this));
      range_regwen[12].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[12]),
                          .offset(32'h4c));
      range_regwen[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_12.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[13] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_13"));
      range_regwen[13].configure(.blk_parent(this));
      range_regwen[13].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[13]),
                          .offset(32'h50));
      range_regwen[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_13.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[14] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_14"));
      range_regwen[14].configure(.blk_parent(this));
      range_regwen[14].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[14]),
                          .offset(32'h54));
      range_regwen[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_14.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[15] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_15"));
      range_regwen[15].configure(.blk_parent(this));
      range_regwen[15].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[15]),
                          .offset(32'h58));
      range_regwen[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_15.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[16] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_16"));
      range_regwen[16].configure(.blk_parent(this));
      range_regwen[16].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[16]),
                          .offset(32'h5c));
      range_regwen[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_16.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[17] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_17"));
      range_regwen[17].configure(.blk_parent(this));
      range_regwen[17].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[17]),
                          .offset(32'h60));
      range_regwen[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_17.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[18] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_18"));
      range_regwen[18].configure(.blk_parent(this));
      range_regwen[18].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[18]),
                          .offset(32'h64));
      range_regwen[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_18.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[19] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_19"));
      range_regwen[19].configure(.blk_parent(this));
      range_regwen[19].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[19]),
                          .offset(32'h68));
      range_regwen[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_19.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[20] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_20"));
      range_regwen[20].configure(.blk_parent(this));
      range_regwen[20].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[20]),
                          .offset(32'h6c));
      range_regwen[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_20.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[21] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_21"));
      range_regwen[21].configure(.blk_parent(this));
      range_regwen[21].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[21]),
                          .offset(32'h70));
      range_regwen[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_21.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[22] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_22"));
      range_regwen[22].configure(.blk_parent(this));
      range_regwen[22].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[22]),
                          .offset(32'h74));
      range_regwen[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_22.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[23] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_23"));
      range_regwen[23].configure(.blk_parent(this));
      range_regwen[23].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[23]),
                          .offset(32'h78));
      range_regwen[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_23.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[24] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_24"));
      range_regwen[24].configure(.blk_parent(this));
      range_regwen[24].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[24]),
                          .offset(32'h7c));
      range_regwen[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_24.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[25] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_25"));
      range_regwen[25].configure(.blk_parent(this));
      range_regwen[25].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[25]),
                          .offset(32'h80));
      range_regwen[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_25.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[26] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_26"));
      range_regwen[26].configure(.blk_parent(this));
      range_regwen[26].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[26]),
                          .offset(32'h84));
      range_regwen[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_26.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[27] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_27"));
      range_regwen[27].configure(.blk_parent(this));
      range_regwen[27].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[27]),
                          .offset(32'h88));
      range_regwen[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_27.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[28] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_28"));
      range_regwen[28].configure(.blk_parent(this));
      range_regwen[28].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[28]),
                          .offset(32'h8c));
      range_regwen[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_28.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[29] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_29"));
      range_regwen[29].configure(.blk_parent(this));
      range_regwen[29].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[29]),
                          .offset(32'h90));
      range_regwen[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_29.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[30] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_30"));
      range_regwen[30].configure(.blk_parent(this));
      range_regwen[30].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[30]),
                          .offset(32'h94));
      range_regwen[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_30.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_regwen[31] =
          (ac_range_check_reg_range_regwen::
           type_id::create("range_regwen_31"));
      range_regwen[31].configure(.blk_parent(this));
      range_regwen[31].build(csr_excl);
      default_map.add_reg(.rg(range_regwen[31]),
                          .offset(32'h98));
      range_regwen[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_regwen_31.q",
          0, 4, 0, "BkdrRegPathRtl");

      range_base[0] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_0"));
      range_base[0].configure(.blk_parent(this));
      range_base[0].build(csr_excl);
      default_map.add_reg(.rg(range_base[0]),
                          .offset(32'h9c));
      range_base[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_0.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[1] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_1"));
      range_base[1].configure(.blk_parent(this));
      range_base[1].build(csr_excl);
      default_map.add_reg(.rg(range_base[1]),
                          .offset(32'ha0));
      range_base[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_1.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[2] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_2"));
      range_base[2].configure(.blk_parent(this));
      range_base[2].build(csr_excl);
      default_map.add_reg(.rg(range_base[2]),
                          .offset(32'ha4));
      range_base[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_2.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[3] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_3"));
      range_base[3].configure(.blk_parent(this));
      range_base[3].build(csr_excl);
      default_map.add_reg(.rg(range_base[3]),
                          .offset(32'ha8));
      range_base[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_3.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[4] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_4"));
      range_base[4].configure(.blk_parent(this));
      range_base[4].build(csr_excl);
      default_map.add_reg(.rg(range_base[4]),
                          .offset(32'hac));
      range_base[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_4.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[5] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_5"));
      range_base[5].configure(.blk_parent(this));
      range_base[5].build(csr_excl);
      default_map.add_reg(.rg(range_base[5]),
                          .offset(32'hb0));
      range_base[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_5.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[6] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_6"));
      range_base[6].configure(.blk_parent(this));
      range_base[6].build(csr_excl);
      default_map.add_reg(.rg(range_base[6]),
                          .offset(32'hb4));
      range_base[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_6.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[7] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_7"));
      range_base[7].configure(.blk_parent(this));
      range_base[7].build(csr_excl);
      default_map.add_reg(.rg(range_base[7]),
                          .offset(32'hb8));
      range_base[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_7.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[8] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_8"));
      range_base[8].configure(.blk_parent(this));
      range_base[8].build(csr_excl);
      default_map.add_reg(.rg(range_base[8]),
                          .offset(32'hbc));
      range_base[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_8.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[9] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_9"));
      range_base[9].configure(.blk_parent(this));
      range_base[9].build(csr_excl);
      default_map.add_reg(.rg(range_base[9]),
                          .offset(32'hc0));
      range_base[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_9.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[10] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_10"));
      range_base[10].configure(.blk_parent(this));
      range_base[10].build(csr_excl);
      default_map.add_reg(.rg(range_base[10]),
                          .offset(32'hc4));
      range_base[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_10.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[11] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_11"));
      range_base[11].configure(.blk_parent(this));
      range_base[11].build(csr_excl);
      default_map.add_reg(.rg(range_base[11]),
                          .offset(32'hc8));
      range_base[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_11.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[12] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_12"));
      range_base[12].configure(.blk_parent(this));
      range_base[12].build(csr_excl);
      default_map.add_reg(.rg(range_base[12]),
                          .offset(32'hcc));
      range_base[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_12.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[13] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_13"));
      range_base[13].configure(.blk_parent(this));
      range_base[13].build(csr_excl);
      default_map.add_reg(.rg(range_base[13]),
                          .offset(32'hd0));
      range_base[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_13.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[14] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_14"));
      range_base[14].configure(.blk_parent(this));
      range_base[14].build(csr_excl);
      default_map.add_reg(.rg(range_base[14]),
                          .offset(32'hd4));
      range_base[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_14.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[15] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_15"));
      range_base[15].configure(.blk_parent(this));
      range_base[15].build(csr_excl);
      default_map.add_reg(.rg(range_base[15]),
                          .offset(32'hd8));
      range_base[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_15.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[16] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_16"));
      range_base[16].configure(.blk_parent(this));
      range_base[16].build(csr_excl);
      default_map.add_reg(.rg(range_base[16]),
                          .offset(32'hdc));
      range_base[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_16.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[17] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_17"));
      range_base[17].configure(.blk_parent(this));
      range_base[17].build(csr_excl);
      default_map.add_reg(.rg(range_base[17]),
                          .offset(32'he0));
      range_base[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_17.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[18] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_18"));
      range_base[18].configure(.blk_parent(this));
      range_base[18].build(csr_excl);
      default_map.add_reg(.rg(range_base[18]),
                          .offset(32'he4));
      range_base[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_18.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[19] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_19"));
      range_base[19].configure(.blk_parent(this));
      range_base[19].build(csr_excl);
      default_map.add_reg(.rg(range_base[19]),
                          .offset(32'he8));
      range_base[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_19.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[20] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_20"));
      range_base[20].configure(.blk_parent(this));
      range_base[20].build(csr_excl);
      default_map.add_reg(.rg(range_base[20]),
                          .offset(32'hec));
      range_base[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_20.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[21] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_21"));
      range_base[21].configure(.blk_parent(this));
      range_base[21].build(csr_excl);
      default_map.add_reg(.rg(range_base[21]),
                          .offset(32'hf0));
      range_base[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_21.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[22] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_22"));
      range_base[22].configure(.blk_parent(this));
      range_base[22].build(csr_excl);
      default_map.add_reg(.rg(range_base[22]),
                          .offset(32'hf4));
      range_base[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_22.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[23] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_23"));
      range_base[23].configure(.blk_parent(this));
      range_base[23].build(csr_excl);
      default_map.add_reg(.rg(range_base[23]),
                          .offset(32'hf8));
      range_base[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_23.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[24] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_24"));
      range_base[24].configure(.blk_parent(this));
      range_base[24].build(csr_excl);
      default_map.add_reg(.rg(range_base[24]),
                          .offset(32'hfc));
      range_base[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_24.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[25] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_25"));
      range_base[25].configure(.blk_parent(this));
      range_base[25].build(csr_excl);
      default_map.add_reg(.rg(range_base[25]),
                          .offset(32'h100));
      range_base[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_25.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[26] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_26"));
      range_base[26].configure(.blk_parent(this));
      range_base[26].build(csr_excl);
      default_map.add_reg(.rg(range_base[26]),
                          .offset(32'h104));
      range_base[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_26.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[27] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_27"));
      range_base[27].configure(.blk_parent(this));
      range_base[27].build(csr_excl);
      default_map.add_reg(.rg(range_base[27]),
                          .offset(32'h108));
      range_base[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_27.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[28] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_28"));
      range_base[28].configure(.blk_parent(this));
      range_base[28].build(csr_excl);
      default_map.add_reg(.rg(range_base[28]),
                          .offset(32'h10c));
      range_base[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_28.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[29] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_29"));
      range_base[29].configure(.blk_parent(this));
      range_base[29].build(csr_excl);
      default_map.add_reg(.rg(range_base[29]),
                          .offset(32'h110));
      range_base[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_29.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[30] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_30"));
      range_base[30].configure(.blk_parent(this));
      range_base[30].build(csr_excl);
      default_map.add_reg(.rg(range_base[30]),
                          .offset(32'h114));
      range_base[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_30.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_base[31] =
          (ac_range_check_reg_range_base::
           type_id::create("range_base_31"));
      range_base[31].configure(.blk_parent(this));
      range_base[31].build(csr_excl);
      default_map.add_reg(.rg(range_base[31]),
                          .offset(32'h118));
      range_base[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_base_31.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[0] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_0"));
      range_limit[0].configure(.blk_parent(this));
      range_limit[0].build(csr_excl);
      default_map.add_reg(.rg(range_limit[0]),
                          .offset(32'h11c));
      range_limit[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_0.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[1] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_1"));
      range_limit[1].configure(.blk_parent(this));
      range_limit[1].build(csr_excl);
      default_map.add_reg(.rg(range_limit[1]),
                          .offset(32'h120));
      range_limit[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_1.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[2] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_2"));
      range_limit[2].configure(.blk_parent(this));
      range_limit[2].build(csr_excl);
      default_map.add_reg(.rg(range_limit[2]),
                          .offset(32'h124));
      range_limit[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_2.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[3] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_3"));
      range_limit[3].configure(.blk_parent(this));
      range_limit[3].build(csr_excl);
      default_map.add_reg(.rg(range_limit[3]),
                          .offset(32'h128));
      range_limit[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_3.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[4] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_4"));
      range_limit[4].configure(.blk_parent(this));
      range_limit[4].build(csr_excl);
      default_map.add_reg(.rg(range_limit[4]),
                          .offset(32'h12c));
      range_limit[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_4.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[5] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_5"));
      range_limit[5].configure(.blk_parent(this));
      range_limit[5].build(csr_excl);
      default_map.add_reg(.rg(range_limit[5]),
                          .offset(32'h130));
      range_limit[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_5.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[6] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_6"));
      range_limit[6].configure(.blk_parent(this));
      range_limit[6].build(csr_excl);
      default_map.add_reg(.rg(range_limit[6]),
                          .offset(32'h134));
      range_limit[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_6.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[7] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_7"));
      range_limit[7].configure(.blk_parent(this));
      range_limit[7].build(csr_excl);
      default_map.add_reg(.rg(range_limit[7]),
                          .offset(32'h138));
      range_limit[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_7.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[8] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_8"));
      range_limit[8].configure(.blk_parent(this));
      range_limit[8].build(csr_excl);
      default_map.add_reg(.rg(range_limit[8]),
                          .offset(32'h13c));
      range_limit[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_8.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[9] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_9"));
      range_limit[9].configure(.blk_parent(this));
      range_limit[9].build(csr_excl);
      default_map.add_reg(.rg(range_limit[9]),
                          .offset(32'h140));
      range_limit[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_9.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[10] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_10"));
      range_limit[10].configure(.blk_parent(this));
      range_limit[10].build(csr_excl);
      default_map.add_reg(.rg(range_limit[10]),
                          .offset(32'h144));
      range_limit[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_10.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[11] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_11"));
      range_limit[11].configure(.blk_parent(this));
      range_limit[11].build(csr_excl);
      default_map.add_reg(.rg(range_limit[11]),
                          .offset(32'h148));
      range_limit[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_11.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[12] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_12"));
      range_limit[12].configure(.blk_parent(this));
      range_limit[12].build(csr_excl);
      default_map.add_reg(.rg(range_limit[12]),
                          .offset(32'h14c));
      range_limit[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_12.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[13] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_13"));
      range_limit[13].configure(.blk_parent(this));
      range_limit[13].build(csr_excl);
      default_map.add_reg(.rg(range_limit[13]),
                          .offset(32'h150));
      range_limit[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_13.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[14] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_14"));
      range_limit[14].configure(.blk_parent(this));
      range_limit[14].build(csr_excl);
      default_map.add_reg(.rg(range_limit[14]),
                          .offset(32'h154));
      range_limit[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_14.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[15] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_15"));
      range_limit[15].configure(.blk_parent(this));
      range_limit[15].build(csr_excl);
      default_map.add_reg(.rg(range_limit[15]),
                          .offset(32'h158));
      range_limit[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_15.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[16] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_16"));
      range_limit[16].configure(.blk_parent(this));
      range_limit[16].build(csr_excl);
      default_map.add_reg(.rg(range_limit[16]),
                          .offset(32'h15c));
      range_limit[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_16.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[17] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_17"));
      range_limit[17].configure(.blk_parent(this));
      range_limit[17].build(csr_excl);
      default_map.add_reg(.rg(range_limit[17]),
                          .offset(32'h160));
      range_limit[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_17.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[18] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_18"));
      range_limit[18].configure(.blk_parent(this));
      range_limit[18].build(csr_excl);
      default_map.add_reg(.rg(range_limit[18]),
                          .offset(32'h164));
      range_limit[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_18.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[19] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_19"));
      range_limit[19].configure(.blk_parent(this));
      range_limit[19].build(csr_excl);
      default_map.add_reg(.rg(range_limit[19]),
                          .offset(32'h168));
      range_limit[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_19.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[20] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_20"));
      range_limit[20].configure(.blk_parent(this));
      range_limit[20].build(csr_excl);
      default_map.add_reg(.rg(range_limit[20]),
                          .offset(32'h16c));
      range_limit[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_20.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[21] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_21"));
      range_limit[21].configure(.blk_parent(this));
      range_limit[21].build(csr_excl);
      default_map.add_reg(.rg(range_limit[21]),
                          .offset(32'h170));
      range_limit[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_21.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[22] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_22"));
      range_limit[22].configure(.blk_parent(this));
      range_limit[22].build(csr_excl);
      default_map.add_reg(.rg(range_limit[22]),
                          .offset(32'h174));
      range_limit[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_22.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[23] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_23"));
      range_limit[23].configure(.blk_parent(this));
      range_limit[23].build(csr_excl);
      default_map.add_reg(.rg(range_limit[23]),
                          .offset(32'h178));
      range_limit[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_23.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[24] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_24"));
      range_limit[24].configure(.blk_parent(this));
      range_limit[24].build(csr_excl);
      default_map.add_reg(.rg(range_limit[24]),
                          .offset(32'h17c));
      range_limit[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_24.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[25] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_25"));
      range_limit[25].configure(.blk_parent(this));
      range_limit[25].build(csr_excl);
      default_map.add_reg(.rg(range_limit[25]),
                          .offset(32'h180));
      range_limit[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_25.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[26] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_26"));
      range_limit[26].configure(.blk_parent(this));
      range_limit[26].build(csr_excl);
      default_map.add_reg(.rg(range_limit[26]),
                          .offset(32'h184));
      range_limit[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_26.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[27] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_27"));
      range_limit[27].configure(.blk_parent(this));
      range_limit[27].build(csr_excl);
      default_map.add_reg(.rg(range_limit[27]),
                          .offset(32'h188));
      range_limit[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_27.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[28] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_28"));
      range_limit[28].configure(.blk_parent(this));
      range_limit[28].build(csr_excl);
      default_map.add_reg(.rg(range_limit[28]),
                          .offset(32'h18c));
      range_limit[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_28.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[29] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_29"));
      range_limit[29].configure(.blk_parent(this));
      range_limit[29].build(csr_excl);
      default_map.add_reg(.rg(range_limit[29]),
                          .offset(32'h190));
      range_limit[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_29.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[30] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_30"));
      range_limit[30].configure(.blk_parent(this));
      range_limit[30].build(csr_excl);
      default_map.add_reg(.rg(range_limit[30]),
                          .offset(32'h194));
      range_limit[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_30.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_limit[31] =
          (ac_range_check_reg_range_limit::
           type_id::create("range_limit_31"));
      range_limit[31].configure(.blk_parent(this));
      range_limit[31].build(csr_excl);
      default_map.add_reg(.rg(range_limit[31]),
                          .offset(32'h198));
      range_limit[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_limit_31.q",
          2, 30, 0, "BkdrRegPathRtl");

      range_perm[0] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_0"));
      range_perm[0].configure(.blk_parent(this));
      range_perm[0].build(csr_excl);
      default_map.add_reg(.rg(range_perm[0]),
                          .offset(32'h19c));
      range_perm[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_0_enable_0.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_0_read_access_0.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_0_write_access_0.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_0_execute_access_0.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_0_log_denied_access_0.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[1] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_1"));
      range_perm[1].configure(.blk_parent(this));
      range_perm[1].build(csr_excl);
      default_map.add_reg(.rg(range_perm[1]),
                          .offset(32'h1a0));
      range_perm[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_1_enable_1.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_1_read_access_1.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_1_write_access_1.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_1_execute_access_1.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_1_log_denied_access_1.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[2] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_2"));
      range_perm[2].configure(.blk_parent(this));
      range_perm[2].build(csr_excl);
      default_map.add_reg(.rg(range_perm[2]),
                          .offset(32'h1a4));
      range_perm[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_2_enable_2.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_2_read_access_2.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_2_write_access_2.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_2_execute_access_2.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_2_log_denied_access_2.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[3] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_3"));
      range_perm[3].configure(.blk_parent(this));
      range_perm[3].build(csr_excl);
      default_map.add_reg(.rg(range_perm[3]),
                          .offset(32'h1a8));
      range_perm[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_3_enable_3.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_3_read_access_3.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_3_write_access_3.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_3_execute_access_3.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_3_log_denied_access_3.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[4] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_4"));
      range_perm[4].configure(.blk_parent(this));
      range_perm[4].build(csr_excl);
      default_map.add_reg(.rg(range_perm[4]),
                          .offset(32'h1ac));
      range_perm[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_4_enable_4.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_4_read_access_4.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_4_write_access_4.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_4_execute_access_4.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_4_log_denied_access_4.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[5] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_5"));
      range_perm[5].configure(.blk_parent(this));
      range_perm[5].build(csr_excl);
      default_map.add_reg(.rg(range_perm[5]),
                          .offset(32'h1b0));
      range_perm[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_5_enable_5.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_5_read_access_5.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_5_write_access_5.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_5_execute_access_5.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_5_log_denied_access_5.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[6] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_6"));
      range_perm[6].configure(.blk_parent(this));
      range_perm[6].build(csr_excl);
      default_map.add_reg(.rg(range_perm[6]),
                          .offset(32'h1b4));
      range_perm[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_6_enable_6.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_6_read_access_6.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_6_write_access_6.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_6_execute_access_6.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_6_log_denied_access_6.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[7] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_7"));
      range_perm[7].configure(.blk_parent(this));
      range_perm[7].build(csr_excl);
      default_map.add_reg(.rg(range_perm[7]),
                          .offset(32'h1b8));
      range_perm[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_7_enable_7.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_7_read_access_7.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_7_write_access_7.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_7_execute_access_7.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_7_log_denied_access_7.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[8] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_8"));
      range_perm[8].configure(.blk_parent(this));
      range_perm[8].build(csr_excl);
      default_map.add_reg(.rg(range_perm[8]),
                          .offset(32'h1bc));
      range_perm[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_8_enable_8.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_8_read_access_8.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_8_write_access_8.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_8_execute_access_8.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_8_log_denied_access_8.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[9] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_9"));
      range_perm[9].configure(.blk_parent(this));
      range_perm[9].build(csr_excl);
      default_map.add_reg(.rg(range_perm[9]),
                          .offset(32'h1c0));
      range_perm[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_9_enable_9.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_9_read_access_9.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_9_write_access_9.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_9_execute_access_9.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_9_log_denied_access_9.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[10] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_10"));
      range_perm[10].configure(.blk_parent(this));
      range_perm[10].build(csr_excl);
      default_map.add_reg(.rg(range_perm[10]),
                          .offset(32'h1c4));
      range_perm[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_10_enable_10.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_10_read_access_10.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_10_write_access_10.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_10_execute_access_10.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_10_log_denied_access_10.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[11] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_11"));
      range_perm[11].configure(.blk_parent(this));
      range_perm[11].build(csr_excl);
      default_map.add_reg(.rg(range_perm[11]),
                          .offset(32'h1c8));
      range_perm[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_11_enable_11.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_11_read_access_11.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_11_write_access_11.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_11_execute_access_11.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_11_log_denied_access_11.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[12] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_12"));
      range_perm[12].configure(.blk_parent(this));
      range_perm[12].build(csr_excl);
      default_map.add_reg(.rg(range_perm[12]),
                          .offset(32'h1cc));
      range_perm[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_12_enable_12.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_12_read_access_12.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_12_write_access_12.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_12_execute_access_12.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_12_log_denied_access_12.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[13] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_13"));
      range_perm[13].configure(.blk_parent(this));
      range_perm[13].build(csr_excl);
      default_map.add_reg(.rg(range_perm[13]),
                          .offset(32'h1d0));
      range_perm[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_13_enable_13.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_13_read_access_13.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_13_write_access_13.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_13_execute_access_13.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_13_log_denied_access_13.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[14] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_14"));
      range_perm[14].configure(.blk_parent(this));
      range_perm[14].build(csr_excl);
      default_map.add_reg(.rg(range_perm[14]),
                          .offset(32'h1d4));
      range_perm[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_14_enable_14.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_14_read_access_14.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_14_write_access_14.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_14_execute_access_14.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_14_log_denied_access_14.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[15] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_15"));
      range_perm[15].configure(.blk_parent(this));
      range_perm[15].build(csr_excl);
      default_map.add_reg(.rg(range_perm[15]),
                          .offset(32'h1d8));
      range_perm[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_15_enable_15.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_15_read_access_15.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_15_write_access_15.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_15_execute_access_15.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_15_log_denied_access_15.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[16] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_16"));
      range_perm[16].configure(.blk_parent(this));
      range_perm[16].build(csr_excl);
      default_map.add_reg(.rg(range_perm[16]),
                          .offset(32'h1dc));
      range_perm[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_16_enable_16.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_16_read_access_16.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_16_write_access_16.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_16_execute_access_16.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_16_log_denied_access_16.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[17] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_17"));
      range_perm[17].configure(.blk_parent(this));
      range_perm[17].build(csr_excl);
      default_map.add_reg(.rg(range_perm[17]),
                          .offset(32'h1e0));
      range_perm[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_17_enable_17.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_17_read_access_17.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_17_write_access_17.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_17_execute_access_17.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_17_log_denied_access_17.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[18] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_18"));
      range_perm[18].configure(.blk_parent(this));
      range_perm[18].build(csr_excl);
      default_map.add_reg(.rg(range_perm[18]),
                          .offset(32'h1e4));
      range_perm[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_18_enable_18.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_18_read_access_18.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_18_write_access_18.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_18_execute_access_18.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_18_log_denied_access_18.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[19] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_19"));
      range_perm[19].configure(.blk_parent(this));
      range_perm[19].build(csr_excl);
      default_map.add_reg(.rg(range_perm[19]),
                          .offset(32'h1e8));
      range_perm[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_19_enable_19.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_19_read_access_19.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_19_write_access_19.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_19_execute_access_19.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_19_log_denied_access_19.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[20] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_20"));
      range_perm[20].configure(.blk_parent(this));
      range_perm[20].build(csr_excl);
      default_map.add_reg(.rg(range_perm[20]),
                          .offset(32'h1ec));
      range_perm[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_20_enable_20.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_20_read_access_20.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_20_write_access_20.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_20_execute_access_20.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_20_log_denied_access_20.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[21] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_21"));
      range_perm[21].configure(.blk_parent(this));
      range_perm[21].build(csr_excl);
      default_map.add_reg(.rg(range_perm[21]),
                          .offset(32'h1f0));
      range_perm[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_21_enable_21.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_21_read_access_21.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_21_write_access_21.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_21_execute_access_21.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_21_log_denied_access_21.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[22] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_22"));
      range_perm[22].configure(.blk_parent(this));
      range_perm[22].build(csr_excl);
      default_map.add_reg(.rg(range_perm[22]),
                          .offset(32'h1f4));
      range_perm[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_22_enable_22.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_22_read_access_22.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_22_write_access_22.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_22_execute_access_22.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_22_log_denied_access_22.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[23] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_23"));
      range_perm[23].configure(.blk_parent(this));
      range_perm[23].build(csr_excl);
      default_map.add_reg(.rg(range_perm[23]),
                          .offset(32'h1f8));
      range_perm[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_23_enable_23.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_23_read_access_23.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_23_write_access_23.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_23_execute_access_23.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_23_log_denied_access_23.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[24] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_24"));
      range_perm[24].configure(.blk_parent(this));
      range_perm[24].build(csr_excl);
      default_map.add_reg(.rg(range_perm[24]),
                          .offset(32'h1fc));
      range_perm[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_24_enable_24.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_24_read_access_24.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_24_write_access_24.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_24_execute_access_24.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_24_log_denied_access_24.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[25] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_25"));
      range_perm[25].configure(.blk_parent(this));
      range_perm[25].build(csr_excl);
      default_map.add_reg(.rg(range_perm[25]),
                          .offset(32'h200));
      range_perm[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_25_enable_25.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_25_read_access_25.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_25_write_access_25.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_25_execute_access_25.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_25_log_denied_access_25.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[26] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_26"));
      range_perm[26].configure(.blk_parent(this));
      range_perm[26].build(csr_excl);
      default_map.add_reg(.rg(range_perm[26]),
                          .offset(32'h204));
      range_perm[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_26_enable_26.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_26_read_access_26.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_26_write_access_26.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_26_execute_access_26.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_26_log_denied_access_26.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[27] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_27"));
      range_perm[27].configure(.blk_parent(this));
      range_perm[27].build(csr_excl);
      default_map.add_reg(.rg(range_perm[27]),
                          .offset(32'h208));
      range_perm[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_27_enable_27.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_27_read_access_27.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_27_write_access_27.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_27_execute_access_27.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_27_log_denied_access_27.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[28] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_28"));
      range_perm[28].configure(.blk_parent(this));
      range_perm[28].build(csr_excl);
      default_map.add_reg(.rg(range_perm[28]),
                          .offset(32'h20c));
      range_perm[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_28_enable_28.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_28_read_access_28.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_28_write_access_28.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_28_execute_access_28.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_28_log_denied_access_28.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[29] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_29"));
      range_perm[29].configure(.blk_parent(this));
      range_perm[29].build(csr_excl);
      default_map.add_reg(.rg(range_perm[29]),
                          .offset(32'h210));
      range_perm[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_29_enable_29.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_29_read_access_29.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_29_write_access_29.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_29_execute_access_29.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_29_log_denied_access_29.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[30] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_30"));
      range_perm[30].configure(.blk_parent(this));
      range_perm[30].build(csr_excl);
      default_map.add_reg(.rg(range_perm[30]),
                          .offset(32'h214));
      range_perm[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_30_enable_30.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_30_read_access_30.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_30_write_access_30.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_30_execute_access_30.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_30_log_denied_access_30.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_perm[31] =
          (ac_range_check_reg_range_perm::
           type_id::create("range_perm_31"));
      range_perm[31].configure(.blk_parent(this));
      range_perm[31].build(csr_excl);
      default_map.add_reg(.rg(range_perm[31]),
                          .offset(32'h218));
      range_perm[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_31_enable_31.q",
          0, 4, 0, "BkdrRegPathRtl");
      range_perm[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_31_read_access_31.q",
          4, 4, 0, "BkdrRegPathRtl");
      range_perm[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_31_write_access_31.q",
          8, 4, 0, "BkdrRegPathRtl");
      range_perm[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_31_execute_access_31.q",
          12, 4, 0, "BkdrRegPathRtl");
      range_perm[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_perm_31_log_denied_access_31.q",
          16, 4, 0, "BkdrRegPathRtl");

      range_racl_policy_shadowed[0] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_0"));
      range_racl_policy_shadowed[0].configure(.blk_parent(this));
      range_racl_policy_shadowed[0].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[0]),
                          .offset(32'h21c));
      range_racl_policy_shadowed[0].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[0].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_0_read_perm_0.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_0_read_perm_0.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_0_write_perm_0.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[0].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_0_write_perm_0.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[0].set_is_shadowed();
      range_racl_policy_shadowed[1] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_1"));
      range_racl_policy_shadowed[1].configure(.blk_parent(this));
      range_racl_policy_shadowed[1].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[1]),
                          .offset(32'h220));
      range_racl_policy_shadowed[1].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[1].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_1_read_perm_1.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_1_read_perm_1.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_1_write_perm_1.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[1].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_1_write_perm_1.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[1].set_is_shadowed();
      range_racl_policy_shadowed[2] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_2"));
      range_racl_policy_shadowed[2].configure(.blk_parent(this));
      range_racl_policy_shadowed[2].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[2]),
                          .offset(32'h224));
      range_racl_policy_shadowed[2].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[2].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_2_read_perm_2.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_2_read_perm_2.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_2_write_perm_2.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[2].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_2_write_perm_2.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[2].set_is_shadowed();
      range_racl_policy_shadowed[3] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_3"));
      range_racl_policy_shadowed[3].configure(.blk_parent(this));
      range_racl_policy_shadowed[3].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[3]),
                          .offset(32'h228));
      range_racl_policy_shadowed[3].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[3].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_3_read_perm_3.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_3_read_perm_3.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_3_write_perm_3.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[3].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_3_write_perm_3.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[3].set_is_shadowed();
      range_racl_policy_shadowed[4] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_4"));
      range_racl_policy_shadowed[4].configure(.blk_parent(this));
      range_racl_policy_shadowed[4].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[4]),
                          .offset(32'h22c));
      range_racl_policy_shadowed[4].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[4].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_4_read_perm_4.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_4_read_perm_4.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_4_write_perm_4.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[4].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_4_write_perm_4.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[4].set_is_shadowed();
      range_racl_policy_shadowed[5] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_5"));
      range_racl_policy_shadowed[5].configure(.blk_parent(this));
      range_racl_policy_shadowed[5].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[5]),
                          .offset(32'h230));
      range_racl_policy_shadowed[5].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[5].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_5_read_perm_5.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_5_read_perm_5.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_5_write_perm_5.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[5].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_5_write_perm_5.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[5].set_is_shadowed();
      range_racl_policy_shadowed[6] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_6"));
      range_racl_policy_shadowed[6].configure(.blk_parent(this));
      range_racl_policy_shadowed[6].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[6]),
                          .offset(32'h234));
      range_racl_policy_shadowed[6].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[6].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_6_read_perm_6.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_6_read_perm_6.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_6_write_perm_6.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[6].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_6_write_perm_6.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[6].set_is_shadowed();
      range_racl_policy_shadowed[7] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_7"));
      range_racl_policy_shadowed[7].configure(.blk_parent(this));
      range_racl_policy_shadowed[7].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[7]),
                          .offset(32'h238));
      range_racl_policy_shadowed[7].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[7].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_7_read_perm_7.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_7_read_perm_7.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_7_write_perm_7.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[7].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_7_write_perm_7.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[7].set_is_shadowed();
      range_racl_policy_shadowed[8] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_8"));
      range_racl_policy_shadowed[8].configure(.blk_parent(this));
      range_racl_policy_shadowed[8].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[8]),
                          .offset(32'h23c));
      range_racl_policy_shadowed[8].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[8].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_8_read_perm_8.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_8_read_perm_8.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_8_write_perm_8.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[8].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_8_write_perm_8.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[8].set_is_shadowed();
      range_racl_policy_shadowed[9] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_9"));
      range_racl_policy_shadowed[9].configure(.blk_parent(this));
      range_racl_policy_shadowed[9].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[9]),
                          .offset(32'h240));
      range_racl_policy_shadowed[9].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[9].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_9_read_perm_9.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_9_read_perm_9.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_9_write_perm_9.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[9].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_9_write_perm_9.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[9].set_is_shadowed();
      range_racl_policy_shadowed[10] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_10"));
      range_racl_policy_shadowed[10].configure(.blk_parent(this));
      range_racl_policy_shadowed[10].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[10]),
                          .offset(32'h244));
      range_racl_policy_shadowed[10].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[10].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_10_read_perm_10.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_10_read_perm_10.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_10_write_perm_10.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[10].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_10_write_perm_10.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[10].set_is_shadowed();
      range_racl_policy_shadowed[11] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_11"));
      range_racl_policy_shadowed[11].configure(.blk_parent(this));
      range_racl_policy_shadowed[11].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[11]),
                          .offset(32'h248));
      range_racl_policy_shadowed[11].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[11].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_11_read_perm_11.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_11_read_perm_11.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_11_write_perm_11.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[11].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_11_write_perm_11.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[11].set_is_shadowed();
      range_racl_policy_shadowed[12] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_12"));
      range_racl_policy_shadowed[12].configure(.blk_parent(this));
      range_racl_policy_shadowed[12].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[12]),
                          .offset(32'h24c));
      range_racl_policy_shadowed[12].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[12].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_12_read_perm_12.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_12_read_perm_12.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_12_write_perm_12.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[12].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_12_write_perm_12.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[12].set_is_shadowed();
      range_racl_policy_shadowed[13] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_13"));
      range_racl_policy_shadowed[13].configure(.blk_parent(this));
      range_racl_policy_shadowed[13].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[13]),
                          .offset(32'h250));
      range_racl_policy_shadowed[13].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[13].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_13_read_perm_13.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_13_read_perm_13.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_13_write_perm_13.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[13].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_13_write_perm_13.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[13].set_is_shadowed();
      range_racl_policy_shadowed[14] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_14"));
      range_racl_policy_shadowed[14].configure(.blk_parent(this));
      range_racl_policy_shadowed[14].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[14]),
                          .offset(32'h254));
      range_racl_policy_shadowed[14].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[14].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_14_read_perm_14.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_14_read_perm_14.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_14_write_perm_14.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[14].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_14_write_perm_14.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[14].set_is_shadowed();
      range_racl_policy_shadowed[15] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_15"));
      range_racl_policy_shadowed[15].configure(.blk_parent(this));
      range_racl_policy_shadowed[15].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[15]),
                          .offset(32'h258));
      range_racl_policy_shadowed[15].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[15].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_15_read_perm_15.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_15_read_perm_15.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_15_write_perm_15.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[15].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_15_write_perm_15.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[15].set_is_shadowed();
      range_racl_policy_shadowed[16] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_16"));
      range_racl_policy_shadowed[16].configure(.blk_parent(this));
      range_racl_policy_shadowed[16].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[16]),
                          .offset(32'h25c));
      range_racl_policy_shadowed[16].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[16].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_16_read_perm_16.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_16_read_perm_16.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_16_write_perm_16.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[16].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_16_write_perm_16.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[16].set_is_shadowed();
      range_racl_policy_shadowed[17] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_17"));
      range_racl_policy_shadowed[17].configure(.blk_parent(this));
      range_racl_policy_shadowed[17].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[17]),
                          .offset(32'h260));
      range_racl_policy_shadowed[17].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[17].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_17_read_perm_17.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_17_read_perm_17.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_17_write_perm_17.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[17].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_17_write_perm_17.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[17].set_is_shadowed();
      range_racl_policy_shadowed[18] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_18"));
      range_racl_policy_shadowed[18].configure(.blk_parent(this));
      range_racl_policy_shadowed[18].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[18]),
                          .offset(32'h264));
      range_racl_policy_shadowed[18].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[18].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_18_read_perm_18.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_18_read_perm_18.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_18_write_perm_18.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[18].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_18_write_perm_18.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[18].set_is_shadowed();
      range_racl_policy_shadowed[19] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_19"));
      range_racl_policy_shadowed[19].configure(.blk_parent(this));
      range_racl_policy_shadowed[19].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[19]),
                          .offset(32'h268));
      range_racl_policy_shadowed[19].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[19].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_19_read_perm_19.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_19_read_perm_19.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_19_write_perm_19.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[19].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_19_write_perm_19.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[19].set_is_shadowed();
      range_racl_policy_shadowed[20] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_20"));
      range_racl_policy_shadowed[20].configure(.blk_parent(this));
      range_racl_policy_shadowed[20].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[20]),
                          .offset(32'h26c));
      range_racl_policy_shadowed[20].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[20].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_20_read_perm_20.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_20_read_perm_20.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_20_write_perm_20.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[20].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_20_write_perm_20.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[20].set_is_shadowed();
      range_racl_policy_shadowed[21] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_21"));
      range_racl_policy_shadowed[21].configure(.blk_parent(this));
      range_racl_policy_shadowed[21].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[21]),
                          .offset(32'h270));
      range_racl_policy_shadowed[21].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[21].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_21_read_perm_21.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_21_read_perm_21.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_21_write_perm_21.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[21].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_21_write_perm_21.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[21].set_is_shadowed();
      range_racl_policy_shadowed[22] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_22"));
      range_racl_policy_shadowed[22].configure(.blk_parent(this));
      range_racl_policy_shadowed[22].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[22]),
                          .offset(32'h274));
      range_racl_policy_shadowed[22].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[22].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_22_read_perm_22.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_22_read_perm_22.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_22_write_perm_22.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[22].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_22_write_perm_22.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[22].set_is_shadowed();
      range_racl_policy_shadowed[23] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_23"));
      range_racl_policy_shadowed[23].configure(.blk_parent(this));
      range_racl_policy_shadowed[23].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[23]),
                          .offset(32'h278));
      range_racl_policy_shadowed[23].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[23].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_23_read_perm_23.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_23_read_perm_23.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_23_write_perm_23.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[23].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_23_write_perm_23.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[23].set_is_shadowed();
      range_racl_policy_shadowed[24] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_24"));
      range_racl_policy_shadowed[24].configure(.blk_parent(this));
      range_racl_policy_shadowed[24].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[24]),
                          .offset(32'h27c));
      range_racl_policy_shadowed[24].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[24].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_24_read_perm_24.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_24_read_perm_24.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_24_write_perm_24.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[24].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_24_write_perm_24.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[24].set_is_shadowed();
      range_racl_policy_shadowed[25] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_25"));
      range_racl_policy_shadowed[25].configure(.blk_parent(this));
      range_racl_policy_shadowed[25].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[25]),
                          .offset(32'h280));
      range_racl_policy_shadowed[25].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[25].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_25_read_perm_25.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_25_read_perm_25.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_25_write_perm_25.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[25].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_25_write_perm_25.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[25].set_is_shadowed();
      range_racl_policy_shadowed[26] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_26"));
      range_racl_policy_shadowed[26].configure(.blk_parent(this));
      range_racl_policy_shadowed[26].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[26]),
                          .offset(32'h284));
      range_racl_policy_shadowed[26].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[26].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_26_read_perm_26.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_26_read_perm_26.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_26_write_perm_26.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[26].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_26_write_perm_26.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[26].set_is_shadowed();
      range_racl_policy_shadowed[27] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_27"));
      range_racl_policy_shadowed[27].configure(.blk_parent(this));
      range_racl_policy_shadowed[27].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[27]),
                          .offset(32'h288));
      range_racl_policy_shadowed[27].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[27].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_27_read_perm_27.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_27_read_perm_27.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_27_write_perm_27.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[27].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_27_write_perm_27.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[27].set_is_shadowed();
      range_racl_policy_shadowed[28] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_28"));
      range_racl_policy_shadowed[28].configure(.blk_parent(this));
      range_racl_policy_shadowed[28].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[28]),
                          .offset(32'h28c));
      range_racl_policy_shadowed[28].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[28].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_28_read_perm_28.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_28_read_perm_28.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_28_write_perm_28.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[28].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_28_write_perm_28.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[28].set_is_shadowed();
      range_racl_policy_shadowed[29] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_29"));
      range_racl_policy_shadowed[29].configure(.blk_parent(this));
      range_racl_policy_shadowed[29].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[29]),
                          .offset(32'h290));
      range_racl_policy_shadowed[29].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[29].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_29_read_perm_29.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_29_read_perm_29.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_29_write_perm_29.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[29].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_29_write_perm_29.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[29].set_is_shadowed();
      range_racl_policy_shadowed[30] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_30"));
      range_racl_policy_shadowed[30].configure(.blk_parent(this));
      range_racl_policy_shadowed[30].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[30]),
                          .offset(32'h294));
      range_racl_policy_shadowed[30].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[30].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_30_read_perm_30.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_30_read_perm_30.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_30_write_perm_30.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[30].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_30_write_perm_30.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[30].set_is_shadowed();
      range_racl_policy_shadowed[31] =
          (ac_range_check_reg_range_racl_policy_shadowed::
           type_id::create("range_racl_policy_shadowed_31"));
      range_racl_policy_shadowed[31].configure(.blk_parent(this));
      range_racl_policy_shadowed[31].build(csr_excl);
      default_map.add_reg(.rg(range_racl_policy_shadowed[31]),
                          .offset(32'h298));
      range_racl_policy_shadowed[31].add_update_err_alert("recov_ctrl_update_err");

      range_racl_policy_shadowed[31].add_storage_err_alert("fatal_fault");

      range_racl_policy_shadowed[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_31_read_perm_31.committed_reg.q",
          0, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_31_read_perm_31.shadow_reg.q",
          0, 16, 0, "BkdrRegPathRtlShadow");
      range_racl_policy_shadowed[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_31_write_perm_31.committed_reg.q",
          16, 16, 0, "BkdrRegPathRtl");
      range_racl_policy_shadowed[31].add_hdl_path_slice(
          "u_ac_range_check_reg.u_range_racl_policy_shadowed_31_write_perm_31.shadow_reg.q",
          16, 16, 0, "BkdrRegPathRtlShadow");

      range_racl_policy_shadowed[31].set_is_shadowed();
      // assign locked reg to its regwen reg
      range_regwen[0].add_lockable_reg_or_fld(range_base[0]);
      range_regwen[1].add_lockable_reg_or_fld(range_base[1]);
      range_regwen[2].add_lockable_reg_or_fld(range_base[2]);
      range_regwen[3].add_lockable_reg_or_fld(range_base[3]);
      range_regwen[4].add_lockable_reg_or_fld(range_base[4]);
      range_regwen[5].add_lockable_reg_or_fld(range_base[5]);
      range_regwen[6].add_lockable_reg_or_fld(range_base[6]);
      range_regwen[7].add_lockable_reg_or_fld(range_base[7]);
      range_regwen[8].add_lockable_reg_or_fld(range_base[8]);
      range_regwen[9].add_lockable_reg_or_fld(range_base[9]);
      range_regwen[10].add_lockable_reg_or_fld(range_base[10]);
      range_regwen[11].add_lockable_reg_or_fld(range_base[11]);
      range_regwen[12].add_lockable_reg_or_fld(range_base[12]);
      range_regwen[13].add_lockable_reg_or_fld(range_base[13]);
      range_regwen[14].add_lockable_reg_or_fld(range_base[14]);
      range_regwen[15].add_lockable_reg_or_fld(range_base[15]);
      range_regwen[16].add_lockable_reg_or_fld(range_base[16]);
      range_regwen[17].add_lockable_reg_or_fld(range_base[17]);
      range_regwen[18].add_lockable_reg_or_fld(range_base[18]);
      range_regwen[19].add_lockable_reg_or_fld(range_base[19]);
      range_regwen[20].add_lockable_reg_or_fld(range_base[20]);
      range_regwen[21].add_lockable_reg_or_fld(range_base[21]);
      range_regwen[22].add_lockable_reg_or_fld(range_base[22]);
      range_regwen[23].add_lockable_reg_or_fld(range_base[23]);
      range_regwen[24].add_lockable_reg_or_fld(range_base[24]);
      range_regwen[25].add_lockable_reg_or_fld(range_base[25]);
      range_regwen[26].add_lockable_reg_or_fld(range_base[26]);
      range_regwen[27].add_lockable_reg_or_fld(range_base[27]);
      range_regwen[28].add_lockable_reg_or_fld(range_base[28]);
      range_regwen[29].add_lockable_reg_or_fld(range_base[29]);
      range_regwen[30].add_lockable_reg_or_fld(range_base[30]);
      range_regwen[31].add_lockable_reg_or_fld(range_base[31]);
      range_regwen[0].add_lockable_reg_or_fld(range_limit[0]);
      range_regwen[1].add_lockable_reg_or_fld(range_limit[1]);
      range_regwen[2].add_lockable_reg_or_fld(range_limit[2]);
      range_regwen[3].add_lockable_reg_or_fld(range_limit[3]);
      range_regwen[4].add_lockable_reg_or_fld(range_limit[4]);
      range_regwen[5].add_lockable_reg_or_fld(range_limit[5]);
      range_regwen[6].add_lockable_reg_or_fld(range_limit[6]);
      range_regwen[7].add_lockable_reg_or_fld(range_limit[7]);
      range_regwen[8].add_lockable_reg_or_fld(range_limit[8]);
      range_regwen[9].add_lockable_reg_or_fld(range_limit[9]);
      range_regwen[10].add_lockable_reg_or_fld(range_limit[10]);
      range_regwen[11].add_lockable_reg_or_fld(range_limit[11]);
      range_regwen[12].add_lockable_reg_or_fld(range_limit[12]);
      range_regwen[13].add_lockable_reg_or_fld(range_limit[13]);
      range_regwen[14].add_lockable_reg_or_fld(range_limit[14]);
      range_regwen[15].add_lockable_reg_or_fld(range_limit[15]);
      range_regwen[16].add_lockable_reg_or_fld(range_limit[16]);
      range_regwen[17].add_lockable_reg_or_fld(range_limit[17]);
      range_regwen[18].add_lockable_reg_or_fld(range_limit[18]);
      range_regwen[19].add_lockable_reg_or_fld(range_limit[19]);
      range_regwen[20].add_lockable_reg_or_fld(range_limit[20]);
      range_regwen[21].add_lockable_reg_or_fld(range_limit[21]);
      range_regwen[22].add_lockable_reg_or_fld(range_limit[22]);
      range_regwen[23].add_lockable_reg_or_fld(range_limit[23]);
      range_regwen[24].add_lockable_reg_or_fld(range_limit[24]);
      range_regwen[25].add_lockable_reg_or_fld(range_limit[25]);
      range_regwen[26].add_lockable_reg_or_fld(range_limit[26]);
      range_regwen[27].add_lockable_reg_or_fld(range_limit[27]);
      range_regwen[28].add_lockable_reg_or_fld(range_limit[28]);
      range_regwen[29].add_lockable_reg_or_fld(range_limit[29]);
      range_regwen[30].add_lockable_reg_or_fld(range_limit[30]);
      range_regwen[31].add_lockable_reg_or_fld(range_limit[31]);
      range_regwen[0].add_lockable_reg_or_fld(range_perm[0]);
      range_regwen[1].add_lockable_reg_or_fld(range_perm[1]);
      range_regwen[2].add_lockable_reg_or_fld(range_perm[2]);
      range_regwen[3].add_lockable_reg_or_fld(range_perm[3]);
      range_regwen[4].add_lockable_reg_or_fld(range_perm[4]);
      range_regwen[5].add_lockable_reg_or_fld(range_perm[5]);
      range_regwen[6].add_lockable_reg_or_fld(range_perm[6]);
      range_regwen[7].add_lockable_reg_or_fld(range_perm[7]);
      range_regwen[8].add_lockable_reg_or_fld(range_perm[8]);
      range_regwen[9].add_lockable_reg_or_fld(range_perm[9]);
      range_regwen[10].add_lockable_reg_or_fld(range_perm[10]);
      range_regwen[11].add_lockable_reg_or_fld(range_perm[11]);
      range_regwen[12].add_lockable_reg_or_fld(range_perm[12]);
      range_regwen[13].add_lockable_reg_or_fld(range_perm[13]);
      range_regwen[14].add_lockable_reg_or_fld(range_perm[14]);
      range_regwen[15].add_lockable_reg_or_fld(range_perm[15]);
      range_regwen[16].add_lockable_reg_or_fld(range_perm[16]);
      range_regwen[17].add_lockable_reg_or_fld(range_perm[17]);
      range_regwen[18].add_lockable_reg_or_fld(range_perm[18]);
      range_regwen[19].add_lockable_reg_or_fld(range_perm[19]);
      range_regwen[20].add_lockable_reg_or_fld(range_perm[20]);
      range_regwen[21].add_lockable_reg_or_fld(range_perm[21]);
      range_regwen[22].add_lockable_reg_or_fld(range_perm[22]);
      range_regwen[23].add_lockable_reg_or_fld(range_perm[23]);
      range_regwen[24].add_lockable_reg_or_fld(range_perm[24]);
      range_regwen[25].add_lockable_reg_or_fld(range_perm[25]);
      range_regwen[26].add_lockable_reg_or_fld(range_perm[26]);
      range_regwen[27].add_lockable_reg_or_fld(range_perm[27]);
      range_regwen[28].add_lockable_reg_or_fld(range_perm[28]);
      range_regwen[29].add_lockable_reg_or_fld(range_perm[29]);
      range_regwen[30].add_lockable_reg_or_fld(range_perm[30]);
      range_regwen[31].add_lockable_reg_or_fld(range_perm[31]);
      range_regwen[0].add_lockable_reg_or_fld(range_racl_policy_shadowed[0]);
      range_regwen[1].add_lockable_reg_or_fld(range_racl_policy_shadowed[1]);
      range_regwen[2].add_lockable_reg_or_fld(range_racl_policy_shadowed[2]);
      range_regwen[3].add_lockable_reg_or_fld(range_racl_policy_shadowed[3]);
      range_regwen[4].add_lockable_reg_or_fld(range_racl_policy_shadowed[4]);
      range_regwen[5].add_lockable_reg_or_fld(range_racl_policy_shadowed[5]);
      range_regwen[6].add_lockable_reg_or_fld(range_racl_policy_shadowed[6]);
      range_regwen[7].add_lockable_reg_or_fld(range_racl_policy_shadowed[7]);
      range_regwen[8].add_lockable_reg_or_fld(range_racl_policy_shadowed[8]);
      range_regwen[9].add_lockable_reg_or_fld(range_racl_policy_shadowed[9]);
      range_regwen[10].add_lockable_reg_or_fld(range_racl_policy_shadowed[10]);
      range_regwen[11].add_lockable_reg_or_fld(range_racl_policy_shadowed[11]);
      range_regwen[12].add_lockable_reg_or_fld(range_racl_policy_shadowed[12]);
      range_regwen[13].add_lockable_reg_or_fld(range_racl_policy_shadowed[13]);
      range_regwen[14].add_lockable_reg_or_fld(range_racl_policy_shadowed[14]);
      range_regwen[15].add_lockable_reg_or_fld(range_racl_policy_shadowed[15]);
      range_regwen[16].add_lockable_reg_or_fld(range_racl_policy_shadowed[16]);
      range_regwen[17].add_lockable_reg_or_fld(range_racl_policy_shadowed[17]);
      range_regwen[18].add_lockable_reg_or_fld(range_racl_policy_shadowed[18]);
      range_regwen[19].add_lockable_reg_or_fld(range_racl_policy_shadowed[19]);
      range_regwen[20].add_lockable_reg_or_fld(range_racl_policy_shadowed[20]);
      range_regwen[21].add_lockable_reg_or_fld(range_racl_policy_shadowed[21]);
      range_regwen[22].add_lockable_reg_or_fld(range_racl_policy_shadowed[22]);
      range_regwen[23].add_lockable_reg_or_fld(range_racl_policy_shadowed[23]);
      range_regwen[24].add_lockable_reg_or_fld(range_racl_policy_shadowed[24]);
      range_regwen[25].add_lockable_reg_or_fld(range_racl_policy_shadowed[25]);
      range_regwen[26].add_lockable_reg_or_fld(range_racl_policy_shadowed[26]);
      range_regwen[27].add_lockable_reg_or_fld(range_racl_policy_shadowed[27]);
      range_regwen[28].add_lockable_reg_or_fld(range_racl_policy_shadowed[28]);
      range_regwen[29].add_lockable_reg_or_fld(range_racl_policy_shadowed[29]);
      range_regwen[30].add_lockable_reg_or_fld(range_racl_policy_shadowed[30]);
      range_regwen[31].add_lockable_reg_or_fld(range_racl_policy_shadowed[31]);


      // Create functional coverage for comportable IP-specific specialized registers.
      // This function can only be called if it is a root block to get the correct gating condition
      // and avoid creating duplicated cov.
      if (this.get_parent() == null && en_dv_reg_cov) create_cov();
    endfunction : build
  endclass : ac_range_check_reg_block

endpackage

