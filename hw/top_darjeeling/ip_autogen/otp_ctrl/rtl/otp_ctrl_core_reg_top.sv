// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module otp_ctrl_core_reg_top (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,

  // Output port for window
  output tlul_pkg::tl_h2d_t tl_win_o,
  input  tlul_pkg::tl_d2h_t tl_win_i,

  // To HW
  output otp_ctrl_reg_pkg::otp_ctrl_core_reg2hw_t reg2hw, // Write
  input  otp_ctrl_reg_pkg::otp_ctrl_core_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o
);

  import otp_ctrl_reg_pkg::* ;

  localparam int AW = 15;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [94:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(95)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  tlul_pkg::tl_h2d_t tl_socket_h2d [2];
  tlul_pkg::tl_d2h_t tl_socket_d2h [2];

  logic [0:0] reg_steer;

  // socket_1n connection
  assign tl_reg_h2d = tl_socket_h2d[1];
  assign tl_socket_d2h[1] = tl_reg_d2h;

  assign tl_win_o = tl_socket_h2d[0];
  assign tl_socket_d2h[0] = tl_win_i;

  // Create Socket_1n
  tlul_socket_1n #(
    .N            (2),
    .HReqPass     (1'b1),
    .HRspPass     (1'b1),
    .DReqPass     ({2{1'b1}}),
    .DRspPass     ({2{1'b1}}),
    .HReqDepth    (4'h0),
    .HRspDepth    (4'h0),
    .DReqDepth    ({2{4'h0}}),
    .DRspDepth    ({2{4'h0}}),
    .ExplicitErrs (1'b0)
  ) u_socket (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .tl_h_i (tl_i),
    .tl_h_o (tl_o_pre),
    .tl_d_o (tl_socket_h2d),
    .tl_d_i (tl_socket_d2h),
    .dev_select_i (reg_steer)
  );

  // Create steering logic
  always_comb begin
    reg_steer =
        tl_i.a_address[AW-1:0] inside {[16384:32767]} ? 1'd0 :
        // Default set to register
        1'd1;

    // Override this in case of an integrity error
    if (intg_err) begin
      reg_steer = 1'd1;
    end
  end

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic intr_state_otp_operation_done_qs;
  logic intr_state_otp_operation_done_wd;
  logic intr_state_otp_error_qs;
  logic intr_state_otp_error_wd;
  logic intr_enable_we;
  logic intr_enable_otp_operation_done_qs;
  logic intr_enable_otp_operation_done_wd;
  logic intr_enable_otp_error_qs;
  logic intr_enable_otp_error_wd;
  logic intr_test_we;
  logic intr_test_otp_operation_done_wd;
  logic intr_test_otp_error_wd;
  logic alert_test_we;
  logic alert_test_fatal_macro_error_wd;
  logic alert_test_fatal_check_error_wd;
  logic alert_test_fatal_bus_integ_error_wd;
  logic alert_test_fatal_prim_otp_alert_wd;
  logic alert_test_recov_prim_otp_alert_wd;
  logic status_re;
  logic status_vendor_test_error_qs;
  logic status_creator_sw_cfg_error_qs;
  logic status_owner_sw_cfg_error_qs;
  logic status_ownership_slot_state_error_qs;
  logic status_rot_creator_auth_error_qs;
  logic status_rot_owner_auth_slot0_error_qs;
  logic status_rot_owner_auth_slot1_error_qs;
  logic status_plat_integ_auth_slot0_error_qs;
  logic status_plat_integ_auth_slot1_error_qs;
  logic status_plat_owner_auth_slot0_error_qs;
  logic status_plat_owner_auth_slot1_error_qs;
  logic status_plat_owner_auth_slot2_error_qs;
  logic status_plat_owner_auth_slot3_error_qs;
  logic status_ext_nvm_error_qs;
  logic status_rom_patch_error_qs;
  logic status_hw_cfg0_error_qs;
  logic status_hw_cfg1_error_qs;
  logic status_secret0_error_qs;
  logic status_secret1_error_qs;
  logic status_secret2_error_qs;
  logic status_secret3_error_qs;
  logic status_life_cycle_error_qs;
  logic status_dai_error_qs;
  logic status_lci_error_qs;
  logic status_timeout_error_qs;
  logic status_lfsr_fsm_error_qs;
  logic status_scrambling_fsm_error_qs;
  logic status_key_deriv_fsm_error_qs;
  logic status_bus_integ_error_qs;
  logic status_dai_idle_qs;
  logic status_check_pending_qs;
  logic err_code_0_re;
  logic [2:0] err_code_0_qs;
  logic err_code_1_re;
  logic [2:0] err_code_1_qs;
  logic err_code_2_re;
  logic [2:0] err_code_2_qs;
  logic err_code_3_re;
  logic [2:0] err_code_3_qs;
  logic err_code_4_re;
  logic [2:0] err_code_4_qs;
  logic err_code_5_re;
  logic [2:0] err_code_5_qs;
  logic err_code_6_re;
  logic [2:0] err_code_6_qs;
  logic err_code_7_re;
  logic [2:0] err_code_7_qs;
  logic err_code_8_re;
  logic [2:0] err_code_8_qs;
  logic err_code_9_re;
  logic [2:0] err_code_9_qs;
  logic err_code_10_re;
  logic [2:0] err_code_10_qs;
  logic err_code_11_re;
  logic [2:0] err_code_11_qs;
  logic err_code_12_re;
  logic [2:0] err_code_12_qs;
  logic err_code_13_re;
  logic [2:0] err_code_13_qs;
  logic err_code_14_re;
  logic [2:0] err_code_14_qs;
  logic err_code_15_re;
  logic [2:0] err_code_15_qs;
  logic err_code_16_re;
  logic [2:0] err_code_16_qs;
  logic err_code_17_re;
  logic [2:0] err_code_17_qs;
  logic err_code_18_re;
  logic [2:0] err_code_18_qs;
  logic err_code_19_re;
  logic [2:0] err_code_19_qs;
  logic err_code_20_re;
  logic [2:0] err_code_20_qs;
  logic err_code_21_re;
  logic [2:0] err_code_21_qs;
  logic err_code_22_re;
  logic [2:0] err_code_22_qs;
  logic err_code_23_re;
  logic [2:0] err_code_23_qs;
  logic direct_access_regwen_re;
  logic direct_access_regwen_we;
  logic direct_access_regwen_qs;
  logic direct_access_regwen_wd;
  logic direct_access_cmd_we;
  logic direct_access_cmd_rd_wd;
  logic direct_access_cmd_wr_wd;
  logic direct_access_cmd_digest_wd;
  logic direct_access_address_we;
  logic [13:0] direct_access_address_qs;
  logic [13:0] direct_access_address_wd;
  logic direct_access_wdata_0_we;
  logic [31:0] direct_access_wdata_0_qs;
  logic [31:0] direct_access_wdata_0_wd;
  logic direct_access_wdata_1_we;
  logic [31:0] direct_access_wdata_1_qs;
  logic [31:0] direct_access_wdata_1_wd;
  logic direct_access_rdata_0_re;
  logic [31:0] direct_access_rdata_0_qs;
  logic direct_access_rdata_1_re;
  logic [31:0] direct_access_rdata_1_qs;
  logic check_trigger_regwen_we;
  logic check_trigger_regwen_qs;
  logic check_trigger_regwen_wd;
  logic check_trigger_we;
  logic check_trigger_integrity_wd;
  logic check_trigger_consistency_wd;
  logic check_regwen_we;
  logic check_regwen_qs;
  logic check_regwen_wd;
  logic check_timeout_we;
  logic [31:0] check_timeout_qs;
  logic [31:0] check_timeout_wd;
  logic integrity_check_period_we;
  logic [31:0] integrity_check_period_qs;
  logic [31:0] integrity_check_period_wd;
  logic consistency_check_period_we;
  logic [31:0] consistency_check_period_qs;
  logic [31:0] consistency_check_period_wd;
  logic vendor_test_read_lock_we;
  logic vendor_test_read_lock_qs;
  logic vendor_test_read_lock_wd;
  logic creator_sw_cfg_read_lock_we;
  logic creator_sw_cfg_read_lock_qs;
  logic creator_sw_cfg_read_lock_wd;
  logic owner_sw_cfg_read_lock_we;
  logic owner_sw_cfg_read_lock_qs;
  logic owner_sw_cfg_read_lock_wd;
  logic ownership_slot_state_read_lock_we;
  logic ownership_slot_state_read_lock_qs;
  logic ownership_slot_state_read_lock_wd;
  logic rot_creator_auth_read_lock_we;
  logic rot_creator_auth_read_lock_qs;
  logic rot_creator_auth_read_lock_wd;
  logic rot_owner_auth_slot0_read_lock_we;
  logic rot_owner_auth_slot0_read_lock_qs;
  logic rot_owner_auth_slot0_read_lock_wd;
  logic rot_owner_auth_slot1_read_lock_we;
  logic rot_owner_auth_slot1_read_lock_qs;
  logic rot_owner_auth_slot1_read_lock_wd;
  logic plat_integ_auth_slot0_read_lock_we;
  logic plat_integ_auth_slot0_read_lock_qs;
  logic plat_integ_auth_slot0_read_lock_wd;
  logic plat_integ_auth_slot1_read_lock_we;
  logic plat_integ_auth_slot1_read_lock_qs;
  logic plat_integ_auth_slot1_read_lock_wd;
  logic plat_owner_auth_slot0_read_lock_we;
  logic plat_owner_auth_slot0_read_lock_qs;
  logic plat_owner_auth_slot0_read_lock_wd;
  logic plat_owner_auth_slot1_read_lock_we;
  logic plat_owner_auth_slot1_read_lock_qs;
  logic plat_owner_auth_slot1_read_lock_wd;
  logic plat_owner_auth_slot2_read_lock_we;
  logic plat_owner_auth_slot2_read_lock_qs;
  logic plat_owner_auth_slot2_read_lock_wd;
  logic plat_owner_auth_slot3_read_lock_we;
  logic plat_owner_auth_slot3_read_lock_qs;
  logic plat_owner_auth_slot3_read_lock_wd;
  logic ext_nvm_read_lock_we;
  logic ext_nvm_read_lock_qs;
  logic ext_nvm_read_lock_wd;
  logic rom_patch_read_lock_we;
  logic rom_patch_read_lock_qs;
  logic rom_patch_read_lock_wd;
  logic vendor_test_digest_0_re;
  logic [31:0] vendor_test_digest_0_qs;
  logic vendor_test_digest_1_re;
  logic [31:0] vendor_test_digest_1_qs;
  logic creator_sw_cfg_digest_0_re;
  logic [31:0] creator_sw_cfg_digest_0_qs;
  logic creator_sw_cfg_digest_1_re;
  logic [31:0] creator_sw_cfg_digest_1_qs;
  logic owner_sw_cfg_digest_0_re;
  logic [31:0] owner_sw_cfg_digest_0_qs;
  logic owner_sw_cfg_digest_1_re;
  logic [31:0] owner_sw_cfg_digest_1_qs;
  logic rot_creator_auth_digest_0_re;
  logic [31:0] rot_creator_auth_digest_0_qs;
  logic rot_creator_auth_digest_1_re;
  logic [31:0] rot_creator_auth_digest_1_qs;
  logic rot_owner_auth_slot0_digest_0_re;
  logic [31:0] rot_owner_auth_slot0_digest_0_qs;
  logic rot_owner_auth_slot0_digest_1_re;
  logic [31:0] rot_owner_auth_slot0_digest_1_qs;
  logic rot_owner_auth_slot1_digest_0_re;
  logic [31:0] rot_owner_auth_slot1_digest_0_qs;
  logic rot_owner_auth_slot1_digest_1_re;
  logic [31:0] rot_owner_auth_slot1_digest_1_qs;
  logic plat_integ_auth_slot0_digest_0_re;
  logic [31:0] plat_integ_auth_slot0_digest_0_qs;
  logic plat_integ_auth_slot0_digest_1_re;
  logic [31:0] plat_integ_auth_slot0_digest_1_qs;
  logic plat_integ_auth_slot1_digest_0_re;
  logic [31:0] plat_integ_auth_slot1_digest_0_qs;
  logic plat_integ_auth_slot1_digest_1_re;
  logic [31:0] plat_integ_auth_slot1_digest_1_qs;
  logic plat_owner_auth_slot0_digest_0_re;
  logic [31:0] plat_owner_auth_slot0_digest_0_qs;
  logic plat_owner_auth_slot0_digest_1_re;
  logic [31:0] plat_owner_auth_slot0_digest_1_qs;
  logic plat_owner_auth_slot1_digest_0_re;
  logic [31:0] plat_owner_auth_slot1_digest_0_qs;
  logic plat_owner_auth_slot1_digest_1_re;
  logic [31:0] plat_owner_auth_slot1_digest_1_qs;
  logic plat_owner_auth_slot2_digest_0_re;
  logic [31:0] plat_owner_auth_slot2_digest_0_qs;
  logic plat_owner_auth_slot2_digest_1_re;
  logic [31:0] plat_owner_auth_slot2_digest_1_qs;
  logic plat_owner_auth_slot3_digest_0_re;
  logic [31:0] plat_owner_auth_slot3_digest_0_qs;
  logic plat_owner_auth_slot3_digest_1_re;
  logic [31:0] plat_owner_auth_slot3_digest_1_qs;
  logic rom_patch_digest_0_re;
  logic [31:0] rom_patch_digest_0_qs;
  logic rom_patch_digest_1_re;
  logic [31:0] rom_patch_digest_1_qs;
  logic hw_cfg0_digest_0_re;
  logic [31:0] hw_cfg0_digest_0_qs;
  logic hw_cfg0_digest_1_re;
  logic [31:0] hw_cfg0_digest_1_qs;
  logic hw_cfg1_digest_0_re;
  logic [31:0] hw_cfg1_digest_0_qs;
  logic hw_cfg1_digest_1_re;
  logic [31:0] hw_cfg1_digest_1_qs;
  logic secret0_digest_0_re;
  logic [31:0] secret0_digest_0_qs;
  logic secret0_digest_1_re;
  logic [31:0] secret0_digest_1_qs;
  logic secret1_digest_0_re;
  logic [31:0] secret1_digest_0_qs;
  logic secret1_digest_1_re;
  logic [31:0] secret1_digest_1_qs;
  logic secret2_digest_0_re;
  logic [31:0] secret2_digest_0_qs;
  logic secret2_digest_1_re;
  logic [31:0] secret2_digest_1_qs;
  logic secret3_digest_0_re;
  logic [31:0] secret3_digest_0_qs;
  logic secret3_digest_1_re;
  logic [31:0] secret3_digest_1_qs;

  // Register instances
  // R[intr_state]: V(False)
  //   F[otp_operation_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_otp_operation_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_otp_operation_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.otp_operation_done.de),
    .d      (hw2reg.intr_state.otp_operation_done.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.otp_operation_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_otp_operation_done_qs)
  );

  //   F[otp_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_otp_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_otp_error_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.otp_error.de),
    .d      (hw2reg.intr_state.otp_error.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.otp_error.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_otp_error_qs)
  );


  // R[intr_enable]: V(False)
  //   F[otp_operation_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_otp_operation_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_otp_operation_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.otp_operation_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_otp_operation_done_qs)
  );

  //   F[otp_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_otp_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_otp_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.otp_error.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_otp_error_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [1:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  //   F[otp_operation_done]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_otp_operation_done (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_otp_operation_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.otp_operation_done.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.otp_operation_done.qe = intr_test_qe;

  //   F[otp_error]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_otp_error (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_otp_error_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[1]),
    .q      (reg2hw.intr_test.otp_error.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.otp_error.qe = intr_test_qe;


  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [4:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  //   F[fatal_macro_error]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_macro_error (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_macro_error_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.fatal_macro_error.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_macro_error.qe = alert_test_qe;

  //   F[fatal_check_error]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_check_error (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_check_error_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[1]),
    .q      (reg2hw.alert_test.fatal_check_error.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_check_error.qe = alert_test_qe;

  //   F[fatal_bus_integ_error]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_bus_integ_error (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_bus_integ_error_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[2]),
    .q      (reg2hw.alert_test.fatal_bus_integ_error.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_bus_integ_error.qe = alert_test_qe;

  //   F[fatal_prim_otp_alert]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_prim_otp_alert (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_prim_otp_alert_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[3]),
    .q      (reg2hw.alert_test.fatal_prim_otp_alert.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_prim_otp_alert.qe = alert_test_qe;

  //   F[recov_prim_otp_alert]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_recov_prim_otp_alert (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_recov_prim_otp_alert_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[4]),
    .q      (reg2hw.alert_test.recov_prim_otp_alert.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.recov_prim_otp_alert.qe = alert_test_qe;


  // R[status]: V(True)
  //   F[vendor_test_error]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_vendor_test_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.vendor_test_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_vendor_test_error_qs)
  );

  //   F[creator_sw_cfg_error]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_creator_sw_cfg_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.creator_sw_cfg_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_creator_sw_cfg_error_qs)
  );

  //   F[owner_sw_cfg_error]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_owner_sw_cfg_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.owner_sw_cfg_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_owner_sw_cfg_error_qs)
  );

  //   F[ownership_slot_state_error]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_ownership_slot_state_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.ownership_slot_state_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_ownership_slot_state_error_qs)
  );

  //   F[rot_creator_auth_error]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rot_creator_auth_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rot_creator_auth_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_rot_creator_auth_error_qs)
  );

  //   F[rot_owner_auth_slot0_error]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rot_owner_auth_slot0_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rot_owner_auth_slot0_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_rot_owner_auth_slot0_error_qs)
  );

  //   F[rot_owner_auth_slot1_error]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rot_owner_auth_slot1_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rot_owner_auth_slot1_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_rot_owner_auth_slot1_error_qs)
  );

  //   F[plat_integ_auth_slot0_error]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_plat_integ_auth_slot0_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.plat_integ_auth_slot0_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_plat_integ_auth_slot0_error_qs)
  );

  //   F[plat_integ_auth_slot1_error]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_plat_integ_auth_slot1_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.plat_integ_auth_slot1_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_plat_integ_auth_slot1_error_qs)
  );

  //   F[plat_owner_auth_slot0_error]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_plat_owner_auth_slot0_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.plat_owner_auth_slot0_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_plat_owner_auth_slot0_error_qs)
  );

  //   F[plat_owner_auth_slot1_error]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_plat_owner_auth_slot1_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.plat_owner_auth_slot1_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_plat_owner_auth_slot1_error_qs)
  );

  //   F[plat_owner_auth_slot2_error]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_plat_owner_auth_slot2_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.plat_owner_auth_slot2_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_plat_owner_auth_slot2_error_qs)
  );

  //   F[plat_owner_auth_slot3_error]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_plat_owner_auth_slot3_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.plat_owner_auth_slot3_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_plat_owner_auth_slot3_error_qs)
  );

  //   F[ext_nvm_error]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_ext_nvm_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.ext_nvm_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_ext_nvm_error_qs)
  );

  //   F[rom_patch_error]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rom_patch_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rom_patch_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_rom_patch_error_qs)
  );

  //   F[hw_cfg0_error]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_hw_cfg0_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.hw_cfg0_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_hw_cfg0_error_qs)
  );

  //   F[hw_cfg1_error]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_hw_cfg1_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.hw_cfg1_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_hw_cfg1_error_qs)
  );

  //   F[secret0_error]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_secret0_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.secret0_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_secret0_error_qs)
  );

  //   F[secret1_error]: 18:18
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_secret1_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.secret1_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_secret1_error_qs)
  );

  //   F[secret2_error]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_secret2_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.secret2_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_secret2_error_qs)
  );

  //   F[secret3_error]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_secret3_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.secret3_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_secret3_error_qs)
  );

  //   F[life_cycle_error]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_life_cycle_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.life_cycle_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_life_cycle_error_qs)
  );

  //   F[dai_error]: 22:22
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_dai_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.dai_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_dai_error_qs)
  );

  //   F[lci_error]: 23:23
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_lci_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.lci_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_lci_error_qs)
  );

  //   F[timeout_error]: 24:24
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_timeout_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.timeout_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_timeout_error_qs)
  );

  //   F[lfsr_fsm_error]: 25:25
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_lfsr_fsm_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.lfsr_fsm_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_lfsr_fsm_error_qs)
  );

  //   F[scrambling_fsm_error]: 26:26
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_scrambling_fsm_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.scrambling_fsm_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_scrambling_fsm_error_qs)
  );

  //   F[key_deriv_fsm_error]: 27:27
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_key_deriv_fsm_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.key_deriv_fsm_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_key_deriv_fsm_error_qs)
  );

  //   F[bus_integ_error]: 28:28
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_bus_integ_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.bus_integ_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_bus_integ_error_qs)
  );

  //   F[dai_idle]: 29:29
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_dai_idle (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.dai_idle.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_dai_idle_qs)
  );

  //   F[check_pending]: 30:30
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_check_pending (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.check_pending.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_check_pending_qs)
  );


  // Subregister 0 of Multireg err_code
  // R[err_code_0]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_0 (
    .re     (err_code_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_0_qs)
  );


  // Subregister 1 of Multireg err_code
  // R[err_code_1]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_1 (
    .re     (err_code_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_1_qs)
  );


  // Subregister 2 of Multireg err_code
  // R[err_code_2]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_2 (
    .re     (err_code_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_2_qs)
  );


  // Subregister 3 of Multireg err_code
  // R[err_code_3]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_3 (
    .re     (err_code_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_3_qs)
  );


  // Subregister 4 of Multireg err_code
  // R[err_code_4]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_4 (
    .re     (err_code_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_4_qs)
  );


  // Subregister 5 of Multireg err_code
  // R[err_code_5]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_5 (
    .re     (err_code_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_5_qs)
  );


  // Subregister 6 of Multireg err_code
  // R[err_code_6]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_6 (
    .re     (err_code_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_6_qs)
  );


  // Subregister 7 of Multireg err_code
  // R[err_code_7]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_7 (
    .re     (err_code_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_7_qs)
  );


  // Subregister 8 of Multireg err_code
  // R[err_code_8]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_8 (
    .re     (err_code_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[8].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_8_qs)
  );


  // Subregister 9 of Multireg err_code
  // R[err_code_9]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_9 (
    .re     (err_code_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[9].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_9_qs)
  );


  // Subregister 10 of Multireg err_code
  // R[err_code_10]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_10 (
    .re     (err_code_10_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[10].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_10_qs)
  );


  // Subregister 11 of Multireg err_code
  // R[err_code_11]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_11 (
    .re     (err_code_11_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[11].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_11_qs)
  );


  // Subregister 12 of Multireg err_code
  // R[err_code_12]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_12 (
    .re     (err_code_12_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[12].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_12_qs)
  );


  // Subregister 13 of Multireg err_code
  // R[err_code_13]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_13 (
    .re     (err_code_13_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[13].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_13_qs)
  );


  // Subregister 14 of Multireg err_code
  // R[err_code_14]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_14 (
    .re     (err_code_14_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[14].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_14_qs)
  );


  // Subregister 15 of Multireg err_code
  // R[err_code_15]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_15 (
    .re     (err_code_15_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[15].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_15_qs)
  );


  // Subregister 16 of Multireg err_code
  // R[err_code_16]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_16 (
    .re     (err_code_16_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[16].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_16_qs)
  );


  // Subregister 17 of Multireg err_code
  // R[err_code_17]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_17 (
    .re     (err_code_17_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[17].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_17_qs)
  );


  // Subregister 18 of Multireg err_code
  // R[err_code_18]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_18 (
    .re     (err_code_18_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[18].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_18_qs)
  );


  // Subregister 19 of Multireg err_code
  // R[err_code_19]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_19 (
    .re     (err_code_19_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[19].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_19_qs)
  );


  // Subregister 20 of Multireg err_code
  // R[err_code_20]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_20 (
    .re     (err_code_20_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[20].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_20_qs)
  );


  // Subregister 21 of Multireg err_code
  // R[err_code_21]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_21 (
    .re     (err_code_21_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[21].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_21_qs)
  );


  // Subregister 22 of Multireg err_code
  // R[err_code_22]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_22 (
    .re     (err_code_22_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[22].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_22_qs)
  );


  // Subregister 23 of Multireg err_code
  // R[err_code_23]: V(True)
  prim_subreg_ext #(
    .DW    (3)
  ) u_err_code_23 (
    .re     (err_code_23_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.err_code[23].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (err_code_23_qs)
  );


  // R[direct_access_regwen]: V(True)
  logic direct_access_regwen_qe;
  logic [0:0] direct_access_regwen_flds_we;
  assign direct_access_regwen_qe = &direct_access_regwen_flds_we;
  prim_subreg_ext #(
    .DW    (1)
  ) u_direct_access_regwen (
    .re     (direct_access_regwen_re),
    .we     (direct_access_regwen_we),
    .wd     (direct_access_regwen_wd),
    .d      (hw2reg.direct_access_regwen.d),
    .qre    (),
    .qe     (direct_access_regwen_flds_we[0]),
    .q      (reg2hw.direct_access_regwen.q),
    .ds     (),
    .qs     (direct_access_regwen_qs)
  );
  assign reg2hw.direct_access_regwen.qe = direct_access_regwen_qe;


  // R[direct_access_cmd]: V(True)
  logic direct_access_cmd_qe;
  logic [2:0] direct_access_cmd_flds_we;
  assign direct_access_cmd_qe = &direct_access_cmd_flds_we;
  // Create REGWEN-gated WE signal
  logic direct_access_cmd_gated_we;
  assign direct_access_cmd_gated_we = direct_access_cmd_we & direct_access_regwen_qs;
  //   F[rd]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_direct_access_cmd_rd (
    .re     (1'b0),
    .we     (direct_access_cmd_gated_we),
    .wd     (direct_access_cmd_rd_wd),
    .d      ('0),
    .qre    (),
    .qe     (direct_access_cmd_flds_we[0]),
    .q      (reg2hw.direct_access_cmd.rd.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.direct_access_cmd.rd.qe = direct_access_cmd_qe;

  //   F[wr]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_direct_access_cmd_wr (
    .re     (1'b0),
    .we     (direct_access_cmd_gated_we),
    .wd     (direct_access_cmd_wr_wd),
    .d      ('0),
    .qre    (),
    .qe     (direct_access_cmd_flds_we[1]),
    .q      (reg2hw.direct_access_cmd.wr.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.direct_access_cmd.wr.qe = direct_access_cmd_qe;

  //   F[digest]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_direct_access_cmd_digest (
    .re     (1'b0),
    .we     (direct_access_cmd_gated_we),
    .wd     (direct_access_cmd_digest_wd),
    .d      ('0),
    .qre    (),
    .qe     (direct_access_cmd_flds_we[2]),
    .q      (reg2hw.direct_access_cmd.digest.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.direct_access_cmd.digest.qe = direct_access_cmd_qe;


  // R[direct_access_address]: V(False)
  // Create REGWEN-gated WE signal
  logic direct_access_address_gated_we;
  assign direct_access_address_gated_we = direct_access_address_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (14),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (14'h0),
    .Mubi    (1'b0)
  ) u_direct_access_address (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (direct_access_address_gated_we),
    .wd     (direct_access_address_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.direct_access_address.q),
    .ds     (),

    // to register interface (read)
    .qs     (direct_access_address_qs)
  );


  // Subregister 0 of Multireg direct_access_wdata
  // R[direct_access_wdata_0]: V(False)
  // Create REGWEN-gated WE signal
  logic direct_access_wdata_0_gated_we;
  assign direct_access_wdata_0_gated_we = direct_access_wdata_0_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_direct_access_wdata_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (direct_access_wdata_0_gated_we),
    .wd     (direct_access_wdata_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.direct_access_wdata[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (direct_access_wdata_0_qs)
  );


  // Subregister 1 of Multireg direct_access_wdata
  // R[direct_access_wdata_1]: V(False)
  // Create REGWEN-gated WE signal
  logic direct_access_wdata_1_gated_we;
  assign direct_access_wdata_1_gated_we = direct_access_wdata_1_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_direct_access_wdata_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (direct_access_wdata_1_gated_we),
    .wd     (direct_access_wdata_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.direct_access_wdata[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (direct_access_wdata_1_qs)
  );


  // Subregister 0 of Multireg direct_access_rdata
  // R[direct_access_rdata_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_direct_access_rdata_0 (
    .re     (direct_access_rdata_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.direct_access_rdata[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (direct_access_rdata_0_qs)
  );


  // Subregister 1 of Multireg direct_access_rdata
  // R[direct_access_rdata_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_direct_access_rdata_1 (
    .re     (direct_access_rdata_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.direct_access_rdata[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (direct_access_rdata_1_qs)
  );


  // R[check_trigger_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_check_trigger_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (check_trigger_regwen_we),
    .wd     (check_trigger_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (check_trigger_regwen_qs)
  );


  // R[check_trigger]: V(True)
  logic check_trigger_qe;
  logic [1:0] check_trigger_flds_we;
  assign check_trigger_qe = &check_trigger_flds_we;
  // Create REGWEN-gated WE signal
  logic check_trigger_gated_we;
  assign check_trigger_gated_we = check_trigger_we & check_trigger_regwen_qs;
  //   F[integrity]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_check_trigger_integrity (
    .re     (1'b0),
    .we     (check_trigger_gated_we),
    .wd     (check_trigger_integrity_wd),
    .d      ('0),
    .qre    (),
    .qe     (check_trigger_flds_we[0]),
    .q      (reg2hw.check_trigger.integrity.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.check_trigger.integrity.qe = check_trigger_qe;

  //   F[consistency]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_check_trigger_consistency (
    .re     (1'b0),
    .we     (check_trigger_gated_we),
    .wd     (check_trigger_consistency_wd),
    .d      ('0),
    .qre    (),
    .qe     (check_trigger_flds_we[1]),
    .q      (reg2hw.check_trigger.consistency.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.check_trigger.consistency.qe = check_trigger_qe;


  // R[check_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_check_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (check_regwen_we),
    .wd     (check_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (check_regwen_qs)
  );


  // R[check_timeout]: V(False)
  // Create REGWEN-gated WE signal
  logic check_timeout_gated_we;
  assign check_timeout_gated_we = check_timeout_we & check_regwen_qs;
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_check_timeout (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (check_timeout_gated_we),
    .wd     (check_timeout_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.check_timeout.q),
    .ds     (),

    // to register interface (read)
    .qs     (check_timeout_qs)
  );


  // R[integrity_check_period]: V(False)
  // Create REGWEN-gated WE signal
  logic integrity_check_period_gated_we;
  assign integrity_check_period_gated_we = integrity_check_period_we & check_regwen_qs;
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_integrity_check_period (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (integrity_check_period_gated_we),
    .wd     (integrity_check_period_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.integrity_check_period.q),
    .ds     (),

    // to register interface (read)
    .qs     (integrity_check_period_qs)
  );


  // R[consistency_check_period]: V(False)
  // Create REGWEN-gated WE signal
  logic consistency_check_period_gated_we;
  assign consistency_check_period_gated_we = consistency_check_period_we & check_regwen_qs;
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_consistency_check_period (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (consistency_check_period_gated_we),
    .wd     (consistency_check_period_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.consistency_check_period.q),
    .ds     (),

    // to register interface (read)
    .qs     (consistency_check_period_qs)
  );


  // R[vendor_test_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic vendor_test_read_lock_gated_we;
  assign vendor_test_read_lock_gated_we = vendor_test_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_vendor_test_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (vendor_test_read_lock_gated_we),
    .wd     (vendor_test_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.vendor_test_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (vendor_test_read_lock_qs)
  );


  // R[creator_sw_cfg_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic creator_sw_cfg_read_lock_gated_we;
  assign creator_sw_cfg_read_lock_gated_we = creator_sw_cfg_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_creator_sw_cfg_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (creator_sw_cfg_read_lock_gated_we),
    .wd     (creator_sw_cfg_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.creator_sw_cfg_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (creator_sw_cfg_read_lock_qs)
  );


  // R[owner_sw_cfg_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic owner_sw_cfg_read_lock_gated_we;
  assign owner_sw_cfg_read_lock_gated_we = owner_sw_cfg_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_owner_sw_cfg_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (owner_sw_cfg_read_lock_gated_we),
    .wd     (owner_sw_cfg_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.owner_sw_cfg_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (owner_sw_cfg_read_lock_qs)
  );


  // R[ownership_slot_state_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic ownership_slot_state_read_lock_gated_we;
  assign ownership_slot_state_read_lock_gated_we =
    ownership_slot_state_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_ownership_slot_state_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ownership_slot_state_read_lock_gated_we),
    .wd     (ownership_slot_state_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ownership_slot_state_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (ownership_slot_state_read_lock_qs)
  );


  // R[rot_creator_auth_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic rot_creator_auth_read_lock_gated_we;
  assign rot_creator_auth_read_lock_gated_we =
    rot_creator_auth_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_rot_creator_auth_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rot_creator_auth_read_lock_gated_we),
    .wd     (rot_creator_auth_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rot_creator_auth_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (rot_creator_auth_read_lock_qs)
  );


  // R[rot_owner_auth_slot0_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic rot_owner_auth_slot0_read_lock_gated_we;
  assign rot_owner_auth_slot0_read_lock_gated_we =
    rot_owner_auth_slot0_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_rot_owner_auth_slot0_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rot_owner_auth_slot0_read_lock_gated_we),
    .wd     (rot_owner_auth_slot0_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rot_owner_auth_slot0_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (rot_owner_auth_slot0_read_lock_qs)
  );


  // R[rot_owner_auth_slot1_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic rot_owner_auth_slot1_read_lock_gated_we;
  assign rot_owner_auth_slot1_read_lock_gated_we =
    rot_owner_auth_slot1_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_rot_owner_auth_slot1_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rot_owner_auth_slot1_read_lock_gated_we),
    .wd     (rot_owner_auth_slot1_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rot_owner_auth_slot1_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (rot_owner_auth_slot1_read_lock_qs)
  );


  // R[plat_integ_auth_slot0_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic plat_integ_auth_slot0_read_lock_gated_we;
  assign plat_integ_auth_slot0_read_lock_gated_we =
    plat_integ_auth_slot0_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_plat_integ_auth_slot0_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (plat_integ_auth_slot0_read_lock_gated_we),
    .wd     (plat_integ_auth_slot0_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.plat_integ_auth_slot0_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (plat_integ_auth_slot0_read_lock_qs)
  );


  // R[plat_integ_auth_slot1_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic plat_integ_auth_slot1_read_lock_gated_we;
  assign plat_integ_auth_slot1_read_lock_gated_we =
    plat_integ_auth_slot1_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_plat_integ_auth_slot1_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (plat_integ_auth_slot1_read_lock_gated_we),
    .wd     (plat_integ_auth_slot1_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.plat_integ_auth_slot1_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (plat_integ_auth_slot1_read_lock_qs)
  );


  // R[plat_owner_auth_slot0_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic plat_owner_auth_slot0_read_lock_gated_we;
  assign plat_owner_auth_slot0_read_lock_gated_we =
    plat_owner_auth_slot0_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_plat_owner_auth_slot0_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (plat_owner_auth_slot0_read_lock_gated_we),
    .wd     (plat_owner_auth_slot0_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.plat_owner_auth_slot0_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (plat_owner_auth_slot0_read_lock_qs)
  );


  // R[plat_owner_auth_slot1_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic plat_owner_auth_slot1_read_lock_gated_we;
  assign plat_owner_auth_slot1_read_lock_gated_we =
    plat_owner_auth_slot1_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_plat_owner_auth_slot1_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (plat_owner_auth_slot1_read_lock_gated_we),
    .wd     (plat_owner_auth_slot1_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.plat_owner_auth_slot1_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (plat_owner_auth_slot1_read_lock_qs)
  );


  // R[plat_owner_auth_slot2_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic plat_owner_auth_slot2_read_lock_gated_we;
  assign plat_owner_auth_slot2_read_lock_gated_we =
    plat_owner_auth_slot2_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_plat_owner_auth_slot2_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (plat_owner_auth_slot2_read_lock_gated_we),
    .wd     (plat_owner_auth_slot2_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.plat_owner_auth_slot2_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (plat_owner_auth_slot2_read_lock_qs)
  );


  // R[plat_owner_auth_slot3_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic plat_owner_auth_slot3_read_lock_gated_we;
  assign plat_owner_auth_slot3_read_lock_gated_we =
    plat_owner_auth_slot3_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_plat_owner_auth_slot3_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (plat_owner_auth_slot3_read_lock_gated_we),
    .wd     (plat_owner_auth_slot3_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.plat_owner_auth_slot3_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (plat_owner_auth_slot3_read_lock_qs)
  );


  // R[ext_nvm_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic ext_nvm_read_lock_gated_we;
  assign ext_nvm_read_lock_gated_we = ext_nvm_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_ext_nvm_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ext_nvm_read_lock_gated_we),
    .wd     (ext_nvm_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ext_nvm_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (ext_nvm_read_lock_qs)
  );


  // R[rom_patch_read_lock]: V(False)
  // Create REGWEN-gated WE signal
  logic rom_patch_read_lock_gated_we;
  assign rom_patch_read_lock_gated_we = rom_patch_read_lock_we & direct_access_regwen_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_rom_patch_read_lock (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rom_patch_read_lock_gated_we),
    .wd     (rom_patch_read_lock_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.rom_patch_read_lock.q),
    .ds     (),

    // to register interface (read)
    .qs     (rom_patch_read_lock_qs)
  );


  // Subregister 0 of Multireg vendor_test_digest
  // R[vendor_test_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_vendor_test_digest_0 (
    .re     (vendor_test_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.vendor_test_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (vendor_test_digest_0_qs)
  );


  // Subregister 1 of Multireg vendor_test_digest
  // R[vendor_test_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_vendor_test_digest_1 (
    .re     (vendor_test_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.vendor_test_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (vendor_test_digest_1_qs)
  );


  // Subregister 0 of Multireg creator_sw_cfg_digest
  // R[creator_sw_cfg_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_creator_sw_cfg_digest_0 (
    .re     (creator_sw_cfg_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.creator_sw_cfg_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (creator_sw_cfg_digest_0_qs)
  );


  // Subregister 1 of Multireg creator_sw_cfg_digest
  // R[creator_sw_cfg_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_creator_sw_cfg_digest_1 (
    .re     (creator_sw_cfg_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.creator_sw_cfg_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (creator_sw_cfg_digest_1_qs)
  );


  // Subregister 0 of Multireg owner_sw_cfg_digest
  // R[owner_sw_cfg_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_owner_sw_cfg_digest_0 (
    .re     (owner_sw_cfg_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.owner_sw_cfg_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (owner_sw_cfg_digest_0_qs)
  );


  // Subregister 1 of Multireg owner_sw_cfg_digest
  // R[owner_sw_cfg_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_owner_sw_cfg_digest_1 (
    .re     (owner_sw_cfg_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.owner_sw_cfg_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (owner_sw_cfg_digest_1_qs)
  );


  // Subregister 0 of Multireg rot_creator_auth_digest
  // R[rot_creator_auth_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rot_creator_auth_digest_0 (
    .re     (rot_creator_auth_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rot_creator_auth_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (rot_creator_auth_digest_0_qs)
  );


  // Subregister 1 of Multireg rot_creator_auth_digest
  // R[rot_creator_auth_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rot_creator_auth_digest_1 (
    .re     (rot_creator_auth_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rot_creator_auth_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (rot_creator_auth_digest_1_qs)
  );


  // Subregister 0 of Multireg rot_owner_auth_slot0_digest
  // R[rot_owner_auth_slot0_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rot_owner_auth_slot0_digest_0 (
    .re     (rot_owner_auth_slot0_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rot_owner_auth_slot0_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (rot_owner_auth_slot0_digest_0_qs)
  );


  // Subregister 1 of Multireg rot_owner_auth_slot0_digest
  // R[rot_owner_auth_slot0_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rot_owner_auth_slot0_digest_1 (
    .re     (rot_owner_auth_slot0_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rot_owner_auth_slot0_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (rot_owner_auth_slot0_digest_1_qs)
  );


  // Subregister 0 of Multireg rot_owner_auth_slot1_digest
  // R[rot_owner_auth_slot1_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rot_owner_auth_slot1_digest_0 (
    .re     (rot_owner_auth_slot1_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rot_owner_auth_slot1_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (rot_owner_auth_slot1_digest_0_qs)
  );


  // Subregister 1 of Multireg rot_owner_auth_slot1_digest
  // R[rot_owner_auth_slot1_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rot_owner_auth_slot1_digest_1 (
    .re     (rot_owner_auth_slot1_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rot_owner_auth_slot1_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (rot_owner_auth_slot1_digest_1_qs)
  );


  // Subregister 0 of Multireg plat_integ_auth_slot0_digest
  // R[plat_integ_auth_slot0_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_integ_auth_slot0_digest_0 (
    .re     (plat_integ_auth_slot0_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_integ_auth_slot0_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_integ_auth_slot0_digest_0_qs)
  );


  // Subregister 1 of Multireg plat_integ_auth_slot0_digest
  // R[plat_integ_auth_slot0_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_integ_auth_slot0_digest_1 (
    .re     (plat_integ_auth_slot0_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_integ_auth_slot0_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_integ_auth_slot0_digest_1_qs)
  );


  // Subregister 0 of Multireg plat_integ_auth_slot1_digest
  // R[plat_integ_auth_slot1_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_integ_auth_slot1_digest_0 (
    .re     (plat_integ_auth_slot1_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_integ_auth_slot1_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_integ_auth_slot1_digest_0_qs)
  );


  // Subregister 1 of Multireg plat_integ_auth_slot1_digest
  // R[plat_integ_auth_slot1_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_integ_auth_slot1_digest_1 (
    .re     (plat_integ_auth_slot1_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_integ_auth_slot1_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_integ_auth_slot1_digest_1_qs)
  );


  // Subregister 0 of Multireg plat_owner_auth_slot0_digest
  // R[plat_owner_auth_slot0_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_owner_auth_slot0_digest_0 (
    .re     (plat_owner_auth_slot0_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_owner_auth_slot0_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_owner_auth_slot0_digest_0_qs)
  );


  // Subregister 1 of Multireg plat_owner_auth_slot0_digest
  // R[plat_owner_auth_slot0_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_owner_auth_slot0_digest_1 (
    .re     (plat_owner_auth_slot0_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_owner_auth_slot0_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_owner_auth_slot0_digest_1_qs)
  );


  // Subregister 0 of Multireg plat_owner_auth_slot1_digest
  // R[plat_owner_auth_slot1_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_owner_auth_slot1_digest_0 (
    .re     (plat_owner_auth_slot1_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_owner_auth_slot1_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_owner_auth_slot1_digest_0_qs)
  );


  // Subregister 1 of Multireg plat_owner_auth_slot1_digest
  // R[plat_owner_auth_slot1_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_owner_auth_slot1_digest_1 (
    .re     (plat_owner_auth_slot1_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_owner_auth_slot1_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_owner_auth_slot1_digest_1_qs)
  );


  // Subregister 0 of Multireg plat_owner_auth_slot2_digest
  // R[plat_owner_auth_slot2_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_owner_auth_slot2_digest_0 (
    .re     (plat_owner_auth_slot2_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_owner_auth_slot2_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_owner_auth_slot2_digest_0_qs)
  );


  // Subregister 1 of Multireg plat_owner_auth_slot2_digest
  // R[plat_owner_auth_slot2_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_owner_auth_slot2_digest_1 (
    .re     (plat_owner_auth_slot2_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_owner_auth_slot2_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_owner_auth_slot2_digest_1_qs)
  );


  // Subregister 0 of Multireg plat_owner_auth_slot3_digest
  // R[plat_owner_auth_slot3_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_owner_auth_slot3_digest_0 (
    .re     (plat_owner_auth_slot3_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_owner_auth_slot3_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_owner_auth_slot3_digest_0_qs)
  );


  // Subregister 1 of Multireg plat_owner_auth_slot3_digest
  // R[plat_owner_auth_slot3_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_plat_owner_auth_slot3_digest_1 (
    .re     (plat_owner_auth_slot3_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.plat_owner_auth_slot3_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (plat_owner_auth_slot3_digest_1_qs)
  );


  // Subregister 0 of Multireg rom_patch_digest
  // R[rom_patch_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rom_patch_digest_0 (
    .re     (rom_patch_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rom_patch_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (rom_patch_digest_0_qs)
  );


  // Subregister 1 of Multireg rom_patch_digest
  // R[rom_patch_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_rom_patch_digest_1 (
    .re     (rom_patch_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rom_patch_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (rom_patch_digest_1_qs)
  );


  // Subregister 0 of Multireg hw_cfg0_digest
  // R[hw_cfg0_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_hw_cfg0_digest_0 (
    .re     (hw_cfg0_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hw_cfg0_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (hw_cfg0_digest_0_qs)
  );


  // Subregister 1 of Multireg hw_cfg0_digest
  // R[hw_cfg0_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_hw_cfg0_digest_1 (
    .re     (hw_cfg0_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hw_cfg0_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (hw_cfg0_digest_1_qs)
  );


  // Subregister 0 of Multireg hw_cfg1_digest
  // R[hw_cfg1_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_hw_cfg1_digest_0 (
    .re     (hw_cfg1_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hw_cfg1_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (hw_cfg1_digest_0_qs)
  );


  // Subregister 1 of Multireg hw_cfg1_digest
  // R[hw_cfg1_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_hw_cfg1_digest_1 (
    .re     (hw_cfg1_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.hw_cfg1_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (hw_cfg1_digest_1_qs)
  );


  // Subregister 0 of Multireg secret0_digest
  // R[secret0_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_secret0_digest_0 (
    .re     (secret0_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.secret0_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (secret0_digest_0_qs)
  );


  // Subregister 1 of Multireg secret0_digest
  // R[secret0_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_secret0_digest_1 (
    .re     (secret0_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.secret0_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (secret0_digest_1_qs)
  );


  // Subregister 0 of Multireg secret1_digest
  // R[secret1_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_secret1_digest_0 (
    .re     (secret1_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.secret1_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (secret1_digest_0_qs)
  );


  // Subregister 1 of Multireg secret1_digest
  // R[secret1_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_secret1_digest_1 (
    .re     (secret1_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.secret1_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (secret1_digest_1_qs)
  );


  // Subregister 0 of Multireg secret2_digest
  // R[secret2_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_secret2_digest_0 (
    .re     (secret2_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.secret2_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (secret2_digest_0_qs)
  );


  // Subregister 1 of Multireg secret2_digest
  // R[secret2_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_secret2_digest_1 (
    .re     (secret2_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.secret2_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (secret2_digest_1_qs)
  );


  // Subregister 0 of Multireg secret3_digest
  // R[secret3_digest_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_secret3_digest_0 (
    .re     (secret3_digest_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.secret3_digest[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (secret3_digest_0_qs)
  );


  // Subregister 1 of Multireg secret3_digest
  // R[secret3_digest_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_secret3_digest_1 (
    .re     (secret3_digest_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.secret3_digest[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (secret3_digest_1_qs)
  );



  logic [94:0] addr_hit;
  always_comb begin
    addr_hit[ 0] = (reg_addr == OTP_CTRL_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == OTP_CTRL_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == OTP_CTRL_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == OTP_CTRL_ALERT_TEST_OFFSET);
    addr_hit[ 4] = (reg_addr == OTP_CTRL_STATUS_OFFSET);
    addr_hit[ 5] = (reg_addr == OTP_CTRL_ERR_CODE_0_OFFSET);
    addr_hit[ 6] = (reg_addr == OTP_CTRL_ERR_CODE_1_OFFSET);
    addr_hit[ 7] = (reg_addr == OTP_CTRL_ERR_CODE_2_OFFSET);
    addr_hit[ 8] = (reg_addr == OTP_CTRL_ERR_CODE_3_OFFSET);
    addr_hit[ 9] = (reg_addr == OTP_CTRL_ERR_CODE_4_OFFSET);
    addr_hit[10] = (reg_addr == OTP_CTRL_ERR_CODE_5_OFFSET);
    addr_hit[11] = (reg_addr == OTP_CTRL_ERR_CODE_6_OFFSET);
    addr_hit[12] = (reg_addr == OTP_CTRL_ERR_CODE_7_OFFSET);
    addr_hit[13] = (reg_addr == OTP_CTRL_ERR_CODE_8_OFFSET);
    addr_hit[14] = (reg_addr == OTP_CTRL_ERR_CODE_9_OFFSET);
    addr_hit[15] = (reg_addr == OTP_CTRL_ERR_CODE_10_OFFSET);
    addr_hit[16] = (reg_addr == OTP_CTRL_ERR_CODE_11_OFFSET);
    addr_hit[17] = (reg_addr == OTP_CTRL_ERR_CODE_12_OFFSET);
    addr_hit[18] = (reg_addr == OTP_CTRL_ERR_CODE_13_OFFSET);
    addr_hit[19] = (reg_addr == OTP_CTRL_ERR_CODE_14_OFFSET);
    addr_hit[20] = (reg_addr == OTP_CTRL_ERR_CODE_15_OFFSET);
    addr_hit[21] = (reg_addr == OTP_CTRL_ERR_CODE_16_OFFSET);
    addr_hit[22] = (reg_addr == OTP_CTRL_ERR_CODE_17_OFFSET);
    addr_hit[23] = (reg_addr == OTP_CTRL_ERR_CODE_18_OFFSET);
    addr_hit[24] = (reg_addr == OTP_CTRL_ERR_CODE_19_OFFSET);
    addr_hit[25] = (reg_addr == OTP_CTRL_ERR_CODE_20_OFFSET);
    addr_hit[26] = (reg_addr == OTP_CTRL_ERR_CODE_21_OFFSET);
    addr_hit[27] = (reg_addr == OTP_CTRL_ERR_CODE_22_OFFSET);
    addr_hit[28] = (reg_addr == OTP_CTRL_ERR_CODE_23_OFFSET);
    addr_hit[29] = (reg_addr == OTP_CTRL_DIRECT_ACCESS_REGWEN_OFFSET);
    addr_hit[30] = (reg_addr == OTP_CTRL_DIRECT_ACCESS_CMD_OFFSET);
    addr_hit[31] = (reg_addr == OTP_CTRL_DIRECT_ACCESS_ADDRESS_OFFSET);
    addr_hit[32] = (reg_addr == OTP_CTRL_DIRECT_ACCESS_WDATA_0_OFFSET);
    addr_hit[33] = (reg_addr == OTP_CTRL_DIRECT_ACCESS_WDATA_1_OFFSET);
    addr_hit[34] = (reg_addr == OTP_CTRL_DIRECT_ACCESS_RDATA_0_OFFSET);
    addr_hit[35] = (reg_addr == OTP_CTRL_DIRECT_ACCESS_RDATA_1_OFFSET);
    addr_hit[36] = (reg_addr == OTP_CTRL_CHECK_TRIGGER_REGWEN_OFFSET);
    addr_hit[37] = (reg_addr == OTP_CTRL_CHECK_TRIGGER_OFFSET);
    addr_hit[38] = (reg_addr == OTP_CTRL_CHECK_REGWEN_OFFSET);
    addr_hit[39] = (reg_addr == OTP_CTRL_CHECK_TIMEOUT_OFFSET);
    addr_hit[40] = (reg_addr == OTP_CTRL_INTEGRITY_CHECK_PERIOD_OFFSET);
    addr_hit[41] = (reg_addr == OTP_CTRL_CONSISTENCY_CHECK_PERIOD_OFFSET);
    addr_hit[42] = (reg_addr == OTP_CTRL_VENDOR_TEST_READ_LOCK_OFFSET);
    addr_hit[43] = (reg_addr == OTP_CTRL_CREATOR_SW_CFG_READ_LOCK_OFFSET);
    addr_hit[44] = (reg_addr == OTP_CTRL_OWNER_SW_CFG_READ_LOCK_OFFSET);
    addr_hit[45] = (reg_addr == OTP_CTRL_OWNERSHIP_SLOT_STATE_READ_LOCK_OFFSET);
    addr_hit[46] = (reg_addr == OTP_CTRL_ROT_CREATOR_AUTH_READ_LOCK_OFFSET);
    addr_hit[47] = (reg_addr == OTP_CTRL_ROT_OWNER_AUTH_SLOT0_READ_LOCK_OFFSET);
    addr_hit[48] = (reg_addr == OTP_CTRL_ROT_OWNER_AUTH_SLOT1_READ_LOCK_OFFSET);
    addr_hit[49] = (reg_addr == OTP_CTRL_PLAT_INTEG_AUTH_SLOT0_READ_LOCK_OFFSET);
    addr_hit[50] = (reg_addr == OTP_CTRL_PLAT_INTEG_AUTH_SLOT1_READ_LOCK_OFFSET);
    addr_hit[51] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT0_READ_LOCK_OFFSET);
    addr_hit[52] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT1_READ_LOCK_OFFSET);
    addr_hit[53] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT2_READ_LOCK_OFFSET);
    addr_hit[54] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT3_READ_LOCK_OFFSET);
    addr_hit[55] = (reg_addr == OTP_CTRL_EXT_NVM_READ_LOCK_OFFSET);
    addr_hit[56] = (reg_addr == OTP_CTRL_ROM_PATCH_READ_LOCK_OFFSET);
    addr_hit[57] = (reg_addr == OTP_CTRL_VENDOR_TEST_DIGEST_0_OFFSET);
    addr_hit[58] = (reg_addr == OTP_CTRL_VENDOR_TEST_DIGEST_1_OFFSET);
    addr_hit[59] = (reg_addr == OTP_CTRL_CREATOR_SW_CFG_DIGEST_0_OFFSET);
    addr_hit[60] = (reg_addr == OTP_CTRL_CREATOR_SW_CFG_DIGEST_1_OFFSET);
    addr_hit[61] = (reg_addr == OTP_CTRL_OWNER_SW_CFG_DIGEST_0_OFFSET);
    addr_hit[62] = (reg_addr == OTP_CTRL_OWNER_SW_CFG_DIGEST_1_OFFSET);
    addr_hit[63] = (reg_addr == OTP_CTRL_ROT_CREATOR_AUTH_DIGEST_0_OFFSET);
    addr_hit[64] = (reg_addr == OTP_CTRL_ROT_CREATOR_AUTH_DIGEST_1_OFFSET);
    addr_hit[65] = (reg_addr == OTP_CTRL_ROT_OWNER_AUTH_SLOT0_DIGEST_0_OFFSET);
    addr_hit[66] = (reg_addr == OTP_CTRL_ROT_OWNER_AUTH_SLOT0_DIGEST_1_OFFSET);
    addr_hit[67] = (reg_addr == OTP_CTRL_ROT_OWNER_AUTH_SLOT1_DIGEST_0_OFFSET);
    addr_hit[68] = (reg_addr == OTP_CTRL_ROT_OWNER_AUTH_SLOT1_DIGEST_1_OFFSET);
    addr_hit[69] = (reg_addr == OTP_CTRL_PLAT_INTEG_AUTH_SLOT0_DIGEST_0_OFFSET);
    addr_hit[70] = (reg_addr == OTP_CTRL_PLAT_INTEG_AUTH_SLOT0_DIGEST_1_OFFSET);
    addr_hit[71] = (reg_addr == OTP_CTRL_PLAT_INTEG_AUTH_SLOT1_DIGEST_0_OFFSET);
    addr_hit[72] = (reg_addr == OTP_CTRL_PLAT_INTEG_AUTH_SLOT1_DIGEST_1_OFFSET);
    addr_hit[73] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT0_DIGEST_0_OFFSET);
    addr_hit[74] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT0_DIGEST_1_OFFSET);
    addr_hit[75] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT1_DIGEST_0_OFFSET);
    addr_hit[76] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT1_DIGEST_1_OFFSET);
    addr_hit[77] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT2_DIGEST_0_OFFSET);
    addr_hit[78] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT2_DIGEST_1_OFFSET);
    addr_hit[79] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT3_DIGEST_0_OFFSET);
    addr_hit[80] = (reg_addr == OTP_CTRL_PLAT_OWNER_AUTH_SLOT3_DIGEST_1_OFFSET);
    addr_hit[81] = (reg_addr == OTP_CTRL_ROM_PATCH_DIGEST_0_OFFSET);
    addr_hit[82] = (reg_addr == OTP_CTRL_ROM_PATCH_DIGEST_1_OFFSET);
    addr_hit[83] = (reg_addr == OTP_CTRL_HW_CFG0_DIGEST_0_OFFSET);
    addr_hit[84] = (reg_addr == OTP_CTRL_HW_CFG0_DIGEST_1_OFFSET);
    addr_hit[85] = (reg_addr == OTP_CTRL_HW_CFG1_DIGEST_0_OFFSET);
    addr_hit[86] = (reg_addr == OTP_CTRL_HW_CFG1_DIGEST_1_OFFSET);
    addr_hit[87] = (reg_addr == OTP_CTRL_SECRET0_DIGEST_0_OFFSET);
    addr_hit[88] = (reg_addr == OTP_CTRL_SECRET0_DIGEST_1_OFFSET);
    addr_hit[89] = (reg_addr == OTP_CTRL_SECRET1_DIGEST_0_OFFSET);
    addr_hit[90] = (reg_addr == OTP_CTRL_SECRET1_DIGEST_1_OFFSET);
    addr_hit[91] = (reg_addr == OTP_CTRL_SECRET2_DIGEST_0_OFFSET);
    addr_hit[92] = (reg_addr == OTP_CTRL_SECRET2_DIGEST_1_OFFSET);
    addr_hit[93] = (reg_addr == OTP_CTRL_SECRET3_DIGEST_0_OFFSET);
    addr_hit[94] = (reg_addr == OTP_CTRL_SECRET3_DIGEST_1_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(OTP_CTRL_CORE_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(OTP_CTRL_CORE_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(OTP_CTRL_CORE_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(OTP_CTRL_CORE_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(OTP_CTRL_CORE_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(OTP_CTRL_CORE_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(OTP_CTRL_CORE_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(OTP_CTRL_CORE_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(OTP_CTRL_CORE_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(OTP_CTRL_CORE_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(OTP_CTRL_CORE_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(OTP_CTRL_CORE_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(OTP_CTRL_CORE_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(OTP_CTRL_CORE_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(OTP_CTRL_CORE_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(OTP_CTRL_CORE_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(OTP_CTRL_CORE_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(OTP_CTRL_CORE_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(OTP_CTRL_CORE_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(OTP_CTRL_CORE_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(OTP_CTRL_CORE_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(OTP_CTRL_CORE_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(OTP_CTRL_CORE_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(OTP_CTRL_CORE_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(OTP_CTRL_CORE_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(OTP_CTRL_CORE_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(OTP_CTRL_CORE_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(OTP_CTRL_CORE_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(OTP_CTRL_CORE_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(OTP_CTRL_CORE_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(OTP_CTRL_CORE_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(OTP_CTRL_CORE_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(OTP_CTRL_CORE_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(OTP_CTRL_CORE_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(OTP_CTRL_CORE_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(OTP_CTRL_CORE_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(OTP_CTRL_CORE_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(OTP_CTRL_CORE_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(OTP_CTRL_CORE_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(OTP_CTRL_CORE_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(OTP_CTRL_CORE_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(OTP_CTRL_CORE_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(OTP_CTRL_CORE_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(OTP_CTRL_CORE_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(OTP_CTRL_CORE_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(OTP_CTRL_CORE_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(OTP_CTRL_CORE_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(OTP_CTRL_CORE_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(OTP_CTRL_CORE_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(OTP_CTRL_CORE_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(OTP_CTRL_CORE_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(OTP_CTRL_CORE_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(OTP_CTRL_CORE_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(OTP_CTRL_CORE_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(OTP_CTRL_CORE_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(OTP_CTRL_CORE_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(OTP_CTRL_CORE_PERMIT[56] & ~reg_be))) |
               (addr_hit[57] & (|(OTP_CTRL_CORE_PERMIT[57] & ~reg_be))) |
               (addr_hit[58] & (|(OTP_CTRL_CORE_PERMIT[58] & ~reg_be))) |
               (addr_hit[59] & (|(OTP_CTRL_CORE_PERMIT[59] & ~reg_be))) |
               (addr_hit[60] & (|(OTP_CTRL_CORE_PERMIT[60] & ~reg_be))) |
               (addr_hit[61] & (|(OTP_CTRL_CORE_PERMIT[61] & ~reg_be))) |
               (addr_hit[62] & (|(OTP_CTRL_CORE_PERMIT[62] & ~reg_be))) |
               (addr_hit[63] & (|(OTP_CTRL_CORE_PERMIT[63] & ~reg_be))) |
               (addr_hit[64] & (|(OTP_CTRL_CORE_PERMIT[64] & ~reg_be))) |
               (addr_hit[65] & (|(OTP_CTRL_CORE_PERMIT[65] & ~reg_be))) |
               (addr_hit[66] & (|(OTP_CTRL_CORE_PERMIT[66] & ~reg_be))) |
               (addr_hit[67] & (|(OTP_CTRL_CORE_PERMIT[67] & ~reg_be))) |
               (addr_hit[68] & (|(OTP_CTRL_CORE_PERMIT[68] & ~reg_be))) |
               (addr_hit[69] & (|(OTP_CTRL_CORE_PERMIT[69] & ~reg_be))) |
               (addr_hit[70] & (|(OTP_CTRL_CORE_PERMIT[70] & ~reg_be))) |
               (addr_hit[71] & (|(OTP_CTRL_CORE_PERMIT[71] & ~reg_be))) |
               (addr_hit[72] & (|(OTP_CTRL_CORE_PERMIT[72] & ~reg_be))) |
               (addr_hit[73] & (|(OTP_CTRL_CORE_PERMIT[73] & ~reg_be))) |
               (addr_hit[74] & (|(OTP_CTRL_CORE_PERMIT[74] & ~reg_be))) |
               (addr_hit[75] & (|(OTP_CTRL_CORE_PERMIT[75] & ~reg_be))) |
               (addr_hit[76] & (|(OTP_CTRL_CORE_PERMIT[76] & ~reg_be))) |
               (addr_hit[77] & (|(OTP_CTRL_CORE_PERMIT[77] & ~reg_be))) |
               (addr_hit[78] & (|(OTP_CTRL_CORE_PERMIT[78] & ~reg_be))) |
               (addr_hit[79] & (|(OTP_CTRL_CORE_PERMIT[79] & ~reg_be))) |
               (addr_hit[80] & (|(OTP_CTRL_CORE_PERMIT[80] & ~reg_be))) |
               (addr_hit[81] & (|(OTP_CTRL_CORE_PERMIT[81] & ~reg_be))) |
               (addr_hit[82] & (|(OTP_CTRL_CORE_PERMIT[82] & ~reg_be))) |
               (addr_hit[83] & (|(OTP_CTRL_CORE_PERMIT[83] & ~reg_be))) |
               (addr_hit[84] & (|(OTP_CTRL_CORE_PERMIT[84] & ~reg_be))) |
               (addr_hit[85] & (|(OTP_CTRL_CORE_PERMIT[85] & ~reg_be))) |
               (addr_hit[86] & (|(OTP_CTRL_CORE_PERMIT[86] & ~reg_be))) |
               (addr_hit[87] & (|(OTP_CTRL_CORE_PERMIT[87] & ~reg_be))) |
               (addr_hit[88] & (|(OTP_CTRL_CORE_PERMIT[88] & ~reg_be))) |
               (addr_hit[89] & (|(OTP_CTRL_CORE_PERMIT[89] & ~reg_be))) |
               (addr_hit[90] & (|(OTP_CTRL_CORE_PERMIT[90] & ~reg_be))) |
               (addr_hit[91] & (|(OTP_CTRL_CORE_PERMIT[91] & ~reg_be))) |
               (addr_hit[92] & (|(OTP_CTRL_CORE_PERMIT[92] & ~reg_be))) |
               (addr_hit[93] & (|(OTP_CTRL_CORE_PERMIT[93] & ~reg_be))) |
               (addr_hit[94] & (|(OTP_CTRL_CORE_PERMIT[94] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;

  assign intr_state_otp_operation_done_wd = reg_wdata[0];

  assign intr_state_otp_error_wd = reg_wdata[1];
  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;

  assign intr_enable_otp_operation_done_wd = reg_wdata[0];

  assign intr_enable_otp_error_wd = reg_wdata[1];
  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;

  assign intr_test_otp_operation_done_wd = reg_wdata[0];

  assign intr_test_otp_error_wd = reg_wdata[1];
  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;

  assign alert_test_fatal_macro_error_wd = reg_wdata[0];

  assign alert_test_fatal_check_error_wd = reg_wdata[1];

  assign alert_test_fatal_bus_integ_error_wd = reg_wdata[2];

  assign alert_test_fatal_prim_otp_alert_wd = reg_wdata[3];

  assign alert_test_recov_prim_otp_alert_wd = reg_wdata[4];
  assign status_re = addr_hit[4] & reg_re & !reg_error;
  assign err_code_0_re = addr_hit[5] & reg_re & !reg_error;
  assign err_code_1_re = addr_hit[6] & reg_re & !reg_error;
  assign err_code_2_re = addr_hit[7] & reg_re & !reg_error;
  assign err_code_3_re = addr_hit[8] & reg_re & !reg_error;
  assign err_code_4_re = addr_hit[9] & reg_re & !reg_error;
  assign err_code_5_re = addr_hit[10] & reg_re & !reg_error;
  assign err_code_6_re = addr_hit[11] & reg_re & !reg_error;
  assign err_code_7_re = addr_hit[12] & reg_re & !reg_error;
  assign err_code_8_re = addr_hit[13] & reg_re & !reg_error;
  assign err_code_9_re = addr_hit[14] & reg_re & !reg_error;
  assign err_code_10_re = addr_hit[15] & reg_re & !reg_error;
  assign err_code_11_re = addr_hit[16] & reg_re & !reg_error;
  assign err_code_12_re = addr_hit[17] & reg_re & !reg_error;
  assign err_code_13_re = addr_hit[18] & reg_re & !reg_error;
  assign err_code_14_re = addr_hit[19] & reg_re & !reg_error;
  assign err_code_15_re = addr_hit[20] & reg_re & !reg_error;
  assign err_code_16_re = addr_hit[21] & reg_re & !reg_error;
  assign err_code_17_re = addr_hit[22] & reg_re & !reg_error;
  assign err_code_18_re = addr_hit[23] & reg_re & !reg_error;
  assign err_code_19_re = addr_hit[24] & reg_re & !reg_error;
  assign err_code_20_re = addr_hit[25] & reg_re & !reg_error;
  assign err_code_21_re = addr_hit[26] & reg_re & !reg_error;
  assign err_code_22_re = addr_hit[27] & reg_re & !reg_error;
  assign err_code_23_re = addr_hit[28] & reg_re & !reg_error;
  assign direct_access_regwen_re = addr_hit[29] & reg_re & !reg_error;
  assign direct_access_regwen_we = addr_hit[29] & reg_we & !reg_error;

  assign direct_access_regwen_wd = reg_wdata[0];
  assign direct_access_cmd_we = addr_hit[30] & reg_we & !reg_error;

  assign direct_access_cmd_rd_wd = reg_wdata[0];

  assign direct_access_cmd_wr_wd = reg_wdata[1];

  assign direct_access_cmd_digest_wd = reg_wdata[2];
  assign direct_access_address_we = addr_hit[31] & reg_we & !reg_error;

  assign direct_access_address_wd = reg_wdata[13:0];
  assign direct_access_wdata_0_we = addr_hit[32] & reg_we & !reg_error;

  assign direct_access_wdata_0_wd = reg_wdata[31:0];
  assign direct_access_wdata_1_we = addr_hit[33] & reg_we & !reg_error;

  assign direct_access_wdata_1_wd = reg_wdata[31:0];
  assign direct_access_rdata_0_re = addr_hit[34] & reg_re & !reg_error;
  assign direct_access_rdata_1_re = addr_hit[35] & reg_re & !reg_error;
  assign check_trigger_regwen_we = addr_hit[36] & reg_we & !reg_error;

  assign check_trigger_regwen_wd = reg_wdata[0];
  assign check_trigger_we = addr_hit[37] & reg_we & !reg_error;

  assign check_trigger_integrity_wd = reg_wdata[0];

  assign check_trigger_consistency_wd = reg_wdata[1];
  assign check_regwen_we = addr_hit[38] & reg_we & !reg_error;

  assign check_regwen_wd = reg_wdata[0];
  assign check_timeout_we = addr_hit[39] & reg_we & !reg_error;

  assign check_timeout_wd = reg_wdata[31:0];
  assign integrity_check_period_we = addr_hit[40] & reg_we & !reg_error;

  assign integrity_check_period_wd = reg_wdata[31:0];
  assign consistency_check_period_we = addr_hit[41] & reg_we & !reg_error;

  assign consistency_check_period_wd = reg_wdata[31:0];
  assign vendor_test_read_lock_we = addr_hit[42] & reg_we & !reg_error;

  assign vendor_test_read_lock_wd = reg_wdata[0];
  assign creator_sw_cfg_read_lock_we = addr_hit[43] & reg_we & !reg_error;

  assign creator_sw_cfg_read_lock_wd = reg_wdata[0];
  assign owner_sw_cfg_read_lock_we = addr_hit[44] & reg_we & !reg_error;

  assign owner_sw_cfg_read_lock_wd = reg_wdata[0];
  assign ownership_slot_state_read_lock_we = addr_hit[45] & reg_we & !reg_error;

  assign ownership_slot_state_read_lock_wd = reg_wdata[0];
  assign rot_creator_auth_read_lock_we = addr_hit[46] & reg_we & !reg_error;

  assign rot_creator_auth_read_lock_wd = reg_wdata[0];
  assign rot_owner_auth_slot0_read_lock_we = addr_hit[47] & reg_we & !reg_error;

  assign rot_owner_auth_slot0_read_lock_wd = reg_wdata[0];
  assign rot_owner_auth_slot1_read_lock_we = addr_hit[48] & reg_we & !reg_error;

  assign rot_owner_auth_slot1_read_lock_wd = reg_wdata[0];
  assign plat_integ_auth_slot0_read_lock_we = addr_hit[49] & reg_we & !reg_error;

  assign plat_integ_auth_slot0_read_lock_wd = reg_wdata[0];
  assign plat_integ_auth_slot1_read_lock_we = addr_hit[50] & reg_we & !reg_error;

  assign plat_integ_auth_slot1_read_lock_wd = reg_wdata[0];
  assign plat_owner_auth_slot0_read_lock_we = addr_hit[51] & reg_we & !reg_error;

  assign plat_owner_auth_slot0_read_lock_wd = reg_wdata[0];
  assign plat_owner_auth_slot1_read_lock_we = addr_hit[52] & reg_we & !reg_error;

  assign plat_owner_auth_slot1_read_lock_wd = reg_wdata[0];
  assign plat_owner_auth_slot2_read_lock_we = addr_hit[53] & reg_we & !reg_error;

  assign plat_owner_auth_slot2_read_lock_wd = reg_wdata[0];
  assign plat_owner_auth_slot3_read_lock_we = addr_hit[54] & reg_we & !reg_error;

  assign plat_owner_auth_slot3_read_lock_wd = reg_wdata[0];
  assign ext_nvm_read_lock_we = addr_hit[55] & reg_we & !reg_error;

  assign ext_nvm_read_lock_wd = reg_wdata[0];
  assign rom_patch_read_lock_we = addr_hit[56] & reg_we & !reg_error;

  assign rom_patch_read_lock_wd = reg_wdata[0];
  assign vendor_test_digest_0_re = addr_hit[57] & reg_re & !reg_error;
  assign vendor_test_digest_1_re = addr_hit[58] & reg_re & !reg_error;
  assign creator_sw_cfg_digest_0_re = addr_hit[59] & reg_re & !reg_error;
  assign creator_sw_cfg_digest_1_re = addr_hit[60] & reg_re & !reg_error;
  assign owner_sw_cfg_digest_0_re = addr_hit[61] & reg_re & !reg_error;
  assign owner_sw_cfg_digest_1_re = addr_hit[62] & reg_re & !reg_error;
  assign rot_creator_auth_digest_0_re = addr_hit[63] & reg_re & !reg_error;
  assign rot_creator_auth_digest_1_re = addr_hit[64] & reg_re & !reg_error;
  assign rot_owner_auth_slot0_digest_0_re = addr_hit[65] & reg_re & !reg_error;
  assign rot_owner_auth_slot0_digest_1_re = addr_hit[66] & reg_re & !reg_error;
  assign rot_owner_auth_slot1_digest_0_re = addr_hit[67] & reg_re & !reg_error;
  assign rot_owner_auth_slot1_digest_1_re = addr_hit[68] & reg_re & !reg_error;
  assign plat_integ_auth_slot0_digest_0_re = addr_hit[69] & reg_re & !reg_error;
  assign plat_integ_auth_slot0_digest_1_re = addr_hit[70] & reg_re & !reg_error;
  assign plat_integ_auth_slot1_digest_0_re = addr_hit[71] & reg_re & !reg_error;
  assign plat_integ_auth_slot1_digest_1_re = addr_hit[72] & reg_re & !reg_error;
  assign plat_owner_auth_slot0_digest_0_re = addr_hit[73] & reg_re & !reg_error;
  assign plat_owner_auth_slot0_digest_1_re = addr_hit[74] & reg_re & !reg_error;
  assign plat_owner_auth_slot1_digest_0_re = addr_hit[75] & reg_re & !reg_error;
  assign plat_owner_auth_slot1_digest_1_re = addr_hit[76] & reg_re & !reg_error;
  assign plat_owner_auth_slot2_digest_0_re = addr_hit[77] & reg_re & !reg_error;
  assign plat_owner_auth_slot2_digest_1_re = addr_hit[78] & reg_re & !reg_error;
  assign plat_owner_auth_slot3_digest_0_re = addr_hit[79] & reg_re & !reg_error;
  assign plat_owner_auth_slot3_digest_1_re = addr_hit[80] & reg_re & !reg_error;
  assign rom_patch_digest_0_re = addr_hit[81] & reg_re & !reg_error;
  assign rom_patch_digest_1_re = addr_hit[82] & reg_re & !reg_error;
  assign hw_cfg0_digest_0_re = addr_hit[83] & reg_re & !reg_error;
  assign hw_cfg0_digest_1_re = addr_hit[84] & reg_re & !reg_error;
  assign hw_cfg1_digest_0_re = addr_hit[85] & reg_re & !reg_error;
  assign hw_cfg1_digest_1_re = addr_hit[86] & reg_re & !reg_error;
  assign secret0_digest_0_re = addr_hit[87] & reg_re & !reg_error;
  assign secret0_digest_1_re = addr_hit[88] & reg_re & !reg_error;
  assign secret1_digest_0_re = addr_hit[89] & reg_re & !reg_error;
  assign secret1_digest_1_re = addr_hit[90] & reg_re & !reg_error;
  assign secret2_digest_0_re = addr_hit[91] & reg_re & !reg_error;
  assign secret2_digest_1_re = addr_hit[92] & reg_re & !reg_error;
  assign secret3_digest_0_re = addr_hit[93] & reg_re & !reg_error;
  assign secret3_digest_1_re = addr_hit[94] & reg_re & !reg_error;

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check[0] = intr_state_we;
    reg_we_check[1] = intr_enable_we;
    reg_we_check[2] = intr_test_we;
    reg_we_check[3] = alert_test_we;
    reg_we_check[4] = 1'b0;
    reg_we_check[5] = 1'b0;
    reg_we_check[6] = 1'b0;
    reg_we_check[7] = 1'b0;
    reg_we_check[8] = 1'b0;
    reg_we_check[9] = 1'b0;
    reg_we_check[10] = 1'b0;
    reg_we_check[11] = 1'b0;
    reg_we_check[12] = 1'b0;
    reg_we_check[13] = 1'b0;
    reg_we_check[14] = 1'b0;
    reg_we_check[15] = 1'b0;
    reg_we_check[16] = 1'b0;
    reg_we_check[17] = 1'b0;
    reg_we_check[18] = 1'b0;
    reg_we_check[19] = 1'b0;
    reg_we_check[20] = 1'b0;
    reg_we_check[21] = 1'b0;
    reg_we_check[22] = 1'b0;
    reg_we_check[23] = 1'b0;
    reg_we_check[24] = 1'b0;
    reg_we_check[25] = 1'b0;
    reg_we_check[26] = 1'b0;
    reg_we_check[27] = 1'b0;
    reg_we_check[28] = 1'b0;
    reg_we_check[29] = direct_access_regwen_we;
    reg_we_check[30] = direct_access_cmd_gated_we;
    reg_we_check[31] = direct_access_address_gated_we;
    reg_we_check[32] = direct_access_wdata_0_gated_we;
    reg_we_check[33] = direct_access_wdata_1_gated_we;
    reg_we_check[34] = 1'b0;
    reg_we_check[35] = 1'b0;
    reg_we_check[36] = check_trigger_regwen_we;
    reg_we_check[37] = check_trigger_gated_we;
    reg_we_check[38] = check_regwen_we;
    reg_we_check[39] = check_timeout_gated_we;
    reg_we_check[40] = integrity_check_period_gated_we;
    reg_we_check[41] = consistency_check_period_gated_we;
    reg_we_check[42] = vendor_test_read_lock_gated_we;
    reg_we_check[43] = creator_sw_cfg_read_lock_gated_we;
    reg_we_check[44] = owner_sw_cfg_read_lock_gated_we;
    reg_we_check[45] = ownership_slot_state_read_lock_gated_we;
    reg_we_check[46] = rot_creator_auth_read_lock_gated_we;
    reg_we_check[47] = rot_owner_auth_slot0_read_lock_gated_we;
    reg_we_check[48] = rot_owner_auth_slot1_read_lock_gated_we;
    reg_we_check[49] = plat_integ_auth_slot0_read_lock_gated_we;
    reg_we_check[50] = plat_integ_auth_slot1_read_lock_gated_we;
    reg_we_check[51] = plat_owner_auth_slot0_read_lock_gated_we;
    reg_we_check[52] = plat_owner_auth_slot1_read_lock_gated_we;
    reg_we_check[53] = plat_owner_auth_slot2_read_lock_gated_we;
    reg_we_check[54] = plat_owner_auth_slot3_read_lock_gated_we;
    reg_we_check[55] = ext_nvm_read_lock_gated_we;
    reg_we_check[56] = rom_patch_read_lock_gated_we;
    reg_we_check[57] = 1'b0;
    reg_we_check[58] = 1'b0;
    reg_we_check[59] = 1'b0;
    reg_we_check[60] = 1'b0;
    reg_we_check[61] = 1'b0;
    reg_we_check[62] = 1'b0;
    reg_we_check[63] = 1'b0;
    reg_we_check[64] = 1'b0;
    reg_we_check[65] = 1'b0;
    reg_we_check[66] = 1'b0;
    reg_we_check[67] = 1'b0;
    reg_we_check[68] = 1'b0;
    reg_we_check[69] = 1'b0;
    reg_we_check[70] = 1'b0;
    reg_we_check[71] = 1'b0;
    reg_we_check[72] = 1'b0;
    reg_we_check[73] = 1'b0;
    reg_we_check[74] = 1'b0;
    reg_we_check[75] = 1'b0;
    reg_we_check[76] = 1'b0;
    reg_we_check[77] = 1'b0;
    reg_we_check[78] = 1'b0;
    reg_we_check[79] = 1'b0;
    reg_we_check[80] = 1'b0;
    reg_we_check[81] = 1'b0;
    reg_we_check[82] = 1'b0;
    reg_we_check[83] = 1'b0;
    reg_we_check[84] = 1'b0;
    reg_we_check[85] = 1'b0;
    reg_we_check[86] = 1'b0;
    reg_we_check[87] = 1'b0;
    reg_we_check[88] = 1'b0;
    reg_we_check[89] = 1'b0;
    reg_we_check[90] = 1'b0;
    reg_we_check[91] = 1'b0;
    reg_we_check[92] = 1'b0;
    reg_we_check[93] = 1'b0;
    reg_we_check[94] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_otp_operation_done_qs;
        reg_rdata_next[1] = intr_state_otp_error_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_otp_operation_done_qs;
        reg_rdata_next[1] = intr_enable_otp_error_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = status_vendor_test_error_qs;
        reg_rdata_next[1] = status_creator_sw_cfg_error_qs;
        reg_rdata_next[2] = status_owner_sw_cfg_error_qs;
        reg_rdata_next[3] = status_ownership_slot_state_error_qs;
        reg_rdata_next[4] = status_rot_creator_auth_error_qs;
        reg_rdata_next[5] = status_rot_owner_auth_slot0_error_qs;
        reg_rdata_next[6] = status_rot_owner_auth_slot1_error_qs;
        reg_rdata_next[7] = status_plat_integ_auth_slot0_error_qs;
        reg_rdata_next[8] = status_plat_integ_auth_slot1_error_qs;
        reg_rdata_next[9] = status_plat_owner_auth_slot0_error_qs;
        reg_rdata_next[10] = status_plat_owner_auth_slot1_error_qs;
        reg_rdata_next[11] = status_plat_owner_auth_slot2_error_qs;
        reg_rdata_next[12] = status_plat_owner_auth_slot3_error_qs;
        reg_rdata_next[13] = status_ext_nvm_error_qs;
        reg_rdata_next[14] = status_rom_patch_error_qs;
        reg_rdata_next[15] = status_hw_cfg0_error_qs;
        reg_rdata_next[16] = status_hw_cfg1_error_qs;
        reg_rdata_next[17] = status_secret0_error_qs;
        reg_rdata_next[18] = status_secret1_error_qs;
        reg_rdata_next[19] = status_secret2_error_qs;
        reg_rdata_next[20] = status_secret3_error_qs;
        reg_rdata_next[21] = status_life_cycle_error_qs;
        reg_rdata_next[22] = status_dai_error_qs;
        reg_rdata_next[23] = status_lci_error_qs;
        reg_rdata_next[24] = status_timeout_error_qs;
        reg_rdata_next[25] = status_lfsr_fsm_error_qs;
        reg_rdata_next[26] = status_scrambling_fsm_error_qs;
        reg_rdata_next[27] = status_key_deriv_fsm_error_qs;
        reg_rdata_next[28] = status_bus_integ_error_qs;
        reg_rdata_next[29] = status_dai_idle_qs;
        reg_rdata_next[30] = status_check_pending_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[2:0] = err_code_0_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[2:0] = err_code_1_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[2:0] = err_code_2_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[2:0] = err_code_3_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[2:0] = err_code_4_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[2:0] = err_code_5_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[2:0] = err_code_6_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[2:0] = err_code_7_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[2:0] = err_code_8_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[2:0] = err_code_9_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[2:0] = err_code_10_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[2:0] = err_code_11_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[2:0] = err_code_12_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[2:0] = err_code_13_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[2:0] = err_code_14_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[2:0] = err_code_15_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[2:0] = err_code_16_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[2:0] = err_code_17_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[2:0] = err_code_18_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[2:0] = err_code_19_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[2:0] = err_code_20_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[2:0] = err_code_21_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[2:0] = err_code_22_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[2:0] = err_code_23_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = direct_access_regwen_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
      end

      addr_hit[31]: begin
        reg_rdata_next[13:0] = direct_access_address_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = direct_access_wdata_0_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = direct_access_wdata_1_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = direct_access_rdata_0_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = direct_access_rdata_1_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = check_trigger_regwen_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = check_regwen_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = check_timeout_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = integrity_check_period_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = consistency_check_period_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = vendor_test_read_lock_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[0] = creator_sw_cfg_read_lock_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[0] = owner_sw_cfg_read_lock_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[0] = ownership_slot_state_read_lock_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = rot_creator_auth_read_lock_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[0] = rot_owner_auth_slot0_read_lock_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = rot_owner_auth_slot1_read_lock_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[0] = plat_integ_auth_slot0_read_lock_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = plat_integ_auth_slot1_read_lock_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[0] = plat_owner_auth_slot0_read_lock_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[0] = plat_owner_auth_slot1_read_lock_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[0] = plat_owner_auth_slot2_read_lock_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[0] = plat_owner_auth_slot3_read_lock_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[0] = ext_nvm_read_lock_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = rom_patch_read_lock_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[31:0] = vendor_test_digest_0_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[31:0] = vendor_test_digest_1_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[31:0] = creator_sw_cfg_digest_0_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[31:0] = creator_sw_cfg_digest_1_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[31:0] = owner_sw_cfg_digest_0_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[31:0] = owner_sw_cfg_digest_1_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = rot_creator_auth_digest_0_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[31:0] = rot_creator_auth_digest_1_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = rot_owner_auth_slot0_digest_0_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[31:0] = rot_owner_auth_slot0_digest_1_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = rot_owner_auth_slot1_digest_0_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[31:0] = rot_owner_auth_slot1_digest_1_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[31:0] = plat_integ_auth_slot0_digest_0_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[31:0] = plat_integ_auth_slot0_digest_1_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[31:0] = plat_integ_auth_slot1_digest_0_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[31:0] = plat_integ_auth_slot1_digest_1_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[31:0] = plat_owner_auth_slot0_digest_0_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[31:0] = plat_owner_auth_slot0_digest_1_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[31:0] = plat_owner_auth_slot1_digest_0_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[31:0] = plat_owner_auth_slot1_digest_1_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[31:0] = plat_owner_auth_slot2_digest_0_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[31:0] = plat_owner_auth_slot2_digest_1_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[31:0] = plat_owner_auth_slot3_digest_0_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[31:0] = plat_owner_auth_slot3_digest_1_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[31:0] = rom_patch_digest_0_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[31:0] = rom_patch_digest_1_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[31:0] = hw_cfg0_digest_0_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[31:0] = hw_cfg0_digest_1_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[31:0] = hw_cfg1_digest_0_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[31:0] = hw_cfg1_digest_1_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[31:0] = secret0_digest_0_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[31:0] = secret0_digest_1_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[31:0] = secret1_digest_0_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[31:0] = secret1_digest_1_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[31:0] = secret2_digest_0_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[31:0] = secret2_digest_1_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[31:0] = secret3_digest_0_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[31:0] = secret3_digest_1_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
