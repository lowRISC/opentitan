// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module gpio_reg_top
  # (
    parameter bit          EnableRacl           = 1'b0,
    parameter bit          RaclErrorRsp         = 1'b1,
    parameter top_racl_pkg::racl_policy_sel_t RaclPolicySelVec[gpio_reg_pkg::NumRegs] =
      '{gpio_reg_pkg::NumRegs{0}}
  ) (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output gpio_reg_pkg::gpio_reg2hw_t reg2hw, // Write
  input  gpio_reg_pkg::gpio_hw2reg_t hw2reg, // Read

  // RACL interface
  input  top_racl_pkg::racl_policy_vec_t racl_policies_i,
  output top_racl_pkg::racl_error_log_t  racl_error_o,

  // Integrity check errors
  output logic intg_err_o
);

  import gpio_reg_pkg::* ;

  localparam int AW = 8;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [33:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(34)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    // Translate RACL error to TLUL error if enabled
    .error_i (reg_error | (RaclErrorRsp & racl_error_o.valid))
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic [31:0] intr_state_qs;
  logic [31:0] intr_state_wd;
  logic intr_enable_we;
  logic [31:0] intr_enable_qs;
  logic [31:0] intr_enable_wd;
  logic intr_test_we;
  logic [31:0] intr_test_wd;
  logic alert_test_we;
  logic alert_test_wd;
  logic [31:0] data_in_qs;
  logic direct_out_re;
  logic direct_out_we;
  logic [31:0] direct_out_qs;
  logic [31:0] direct_out_wd;
  logic masked_out_lower_re;
  logic masked_out_lower_we;
  logic [15:0] masked_out_lower_data_qs;
  logic [15:0] masked_out_lower_data_wd;
  logic [15:0] masked_out_lower_mask_wd;
  logic masked_out_upper_re;
  logic masked_out_upper_we;
  logic [15:0] masked_out_upper_data_qs;
  logic [15:0] masked_out_upper_data_wd;
  logic [15:0] masked_out_upper_mask_wd;
  logic direct_oe_re;
  logic direct_oe_we;
  logic [31:0] direct_oe_qs;
  logic [31:0] direct_oe_wd;
  logic masked_oe_lower_re;
  logic masked_oe_lower_we;
  logic [15:0] masked_oe_lower_data_qs;
  logic [15:0] masked_oe_lower_data_wd;
  logic [15:0] masked_oe_lower_mask_qs;
  logic [15:0] masked_oe_lower_mask_wd;
  logic masked_oe_upper_re;
  logic masked_oe_upper_we;
  logic [15:0] masked_oe_upper_data_qs;
  logic [15:0] masked_oe_upper_data_wd;
  logic [15:0] masked_oe_upper_mask_qs;
  logic [15:0] masked_oe_upper_mask_wd;
  logic intr_ctrl_en_rising_we;
  logic [31:0] intr_ctrl_en_rising_qs;
  logic [31:0] intr_ctrl_en_rising_wd;
  logic intr_ctrl_en_falling_we;
  logic [31:0] intr_ctrl_en_falling_qs;
  logic [31:0] intr_ctrl_en_falling_wd;
  logic intr_ctrl_en_lvlhigh_we;
  logic [31:0] intr_ctrl_en_lvlhigh_qs;
  logic [31:0] intr_ctrl_en_lvlhigh_wd;
  logic intr_ctrl_en_lvllow_we;
  logic [31:0] intr_ctrl_en_lvllow_qs;
  logic [31:0] intr_ctrl_en_lvllow_wd;
  logic ctrl_en_input_filter_we;
  logic [31:0] ctrl_en_input_filter_qs;
  logic [31:0] ctrl_en_input_filter_wd;
  logic hw_straps_data_in_valid_qs;
  logic [31:0] hw_straps_data_in_qs;
  logic inp_prd_cnt_ctrl_0_we;
  logic inp_prd_cnt_ctrl_0_enable_0_qs;
  logic inp_prd_cnt_ctrl_0_enable_0_wd;
  logic inp_prd_cnt_ctrl_0_continuous_mode_0_qs;
  logic inp_prd_cnt_ctrl_0_continuous_mode_0_wd;
  logic inp_prd_cnt_ctrl_0_polarity_0_qs;
  logic inp_prd_cnt_ctrl_0_polarity_0_wd;
  logic [7:0] inp_prd_cnt_ctrl_0_input_select_0_qs;
  logic [7:0] inp_prd_cnt_ctrl_0_input_select_0_wd;
  logic [7:0] inp_prd_cnt_ctrl_0_prescaler_0_qs;
  logic [7:0] inp_prd_cnt_ctrl_0_prescaler_0_wd;
  logic inp_prd_cnt_ctrl_1_we;
  logic inp_prd_cnt_ctrl_1_enable_1_qs;
  logic inp_prd_cnt_ctrl_1_enable_1_wd;
  logic inp_prd_cnt_ctrl_1_continuous_mode_1_qs;
  logic inp_prd_cnt_ctrl_1_continuous_mode_1_wd;
  logic inp_prd_cnt_ctrl_1_polarity_1_qs;
  logic inp_prd_cnt_ctrl_1_polarity_1_wd;
  logic [7:0] inp_prd_cnt_ctrl_1_input_select_1_qs;
  logic [7:0] inp_prd_cnt_ctrl_1_input_select_1_wd;
  logic [7:0] inp_prd_cnt_ctrl_1_prescaler_1_qs;
  logic [7:0] inp_prd_cnt_ctrl_1_prescaler_1_wd;
  logic inp_prd_cnt_ctrl_2_we;
  logic inp_prd_cnt_ctrl_2_enable_2_qs;
  logic inp_prd_cnt_ctrl_2_enable_2_wd;
  logic inp_prd_cnt_ctrl_2_continuous_mode_2_qs;
  logic inp_prd_cnt_ctrl_2_continuous_mode_2_wd;
  logic inp_prd_cnt_ctrl_2_polarity_2_qs;
  logic inp_prd_cnt_ctrl_2_polarity_2_wd;
  logic [7:0] inp_prd_cnt_ctrl_2_input_select_2_qs;
  logic [7:0] inp_prd_cnt_ctrl_2_input_select_2_wd;
  logic [7:0] inp_prd_cnt_ctrl_2_prescaler_2_qs;
  logic [7:0] inp_prd_cnt_ctrl_2_prescaler_2_wd;
  logic inp_prd_cnt_ctrl_3_we;
  logic inp_prd_cnt_ctrl_3_enable_3_qs;
  logic inp_prd_cnt_ctrl_3_enable_3_wd;
  logic inp_prd_cnt_ctrl_3_continuous_mode_3_qs;
  logic inp_prd_cnt_ctrl_3_continuous_mode_3_wd;
  logic inp_prd_cnt_ctrl_3_polarity_3_qs;
  logic inp_prd_cnt_ctrl_3_polarity_3_wd;
  logic [7:0] inp_prd_cnt_ctrl_3_input_select_3_qs;
  logic [7:0] inp_prd_cnt_ctrl_3_input_select_3_wd;
  logic [7:0] inp_prd_cnt_ctrl_3_prescaler_3_qs;
  logic [7:0] inp_prd_cnt_ctrl_3_prescaler_3_wd;
  logic inp_prd_cnt_ctrl_4_we;
  logic inp_prd_cnt_ctrl_4_enable_4_qs;
  logic inp_prd_cnt_ctrl_4_enable_4_wd;
  logic inp_prd_cnt_ctrl_4_continuous_mode_4_qs;
  logic inp_prd_cnt_ctrl_4_continuous_mode_4_wd;
  logic inp_prd_cnt_ctrl_4_polarity_4_qs;
  logic inp_prd_cnt_ctrl_4_polarity_4_wd;
  logic [7:0] inp_prd_cnt_ctrl_4_input_select_4_qs;
  logic [7:0] inp_prd_cnt_ctrl_4_input_select_4_wd;
  logic [7:0] inp_prd_cnt_ctrl_4_prescaler_4_qs;
  logic [7:0] inp_prd_cnt_ctrl_4_prescaler_4_wd;
  logic inp_prd_cnt_ctrl_5_we;
  logic inp_prd_cnt_ctrl_5_enable_5_qs;
  logic inp_prd_cnt_ctrl_5_enable_5_wd;
  logic inp_prd_cnt_ctrl_5_continuous_mode_5_qs;
  logic inp_prd_cnt_ctrl_5_continuous_mode_5_wd;
  logic inp_prd_cnt_ctrl_5_polarity_5_qs;
  logic inp_prd_cnt_ctrl_5_polarity_5_wd;
  logic [7:0] inp_prd_cnt_ctrl_5_input_select_5_qs;
  logic [7:0] inp_prd_cnt_ctrl_5_input_select_5_wd;
  logic [7:0] inp_prd_cnt_ctrl_5_prescaler_5_qs;
  logic [7:0] inp_prd_cnt_ctrl_5_prescaler_5_wd;
  logic inp_prd_cnt_ctrl_6_we;
  logic inp_prd_cnt_ctrl_6_enable_6_qs;
  logic inp_prd_cnt_ctrl_6_enable_6_wd;
  logic inp_prd_cnt_ctrl_6_continuous_mode_6_qs;
  logic inp_prd_cnt_ctrl_6_continuous_mode_6_wd;
  logic inp_prd_cnt_ctrl_6_polarity_6_qs;
  logic inp_prd_cnt_ctrl_6_polarity_6_wd;
  logic [7:0] inp_prd_cnt_ctrl_6_input_select_6_qs;
  logic [7:0] inp_prd_cnt_ctrl_6_input_select_6_wd;
  logic [7:0] inp_prd_cnt_ctrl_6_prescaler_6_qs;
  logic [7:0] inp_prd_cnt_ctrl_6_prescaler_6_wd;
  logic inp_prd_cnt_ctrl_7_we;
  logic inp_prd_cnt_ctrl_7_enable_7_qs;
  logic inp_prd_cnt_ctrl_7_enable_7_wd;
  logic inp_prd_cnt_ctrl_7_continuous_mode_7_qs;
  logic inp_prd_cnt_ctrl_7_continuous_mode_7_wd;
  logic inp_prd_cnt_ctrl_7_polarity_7_qs;
  logic inp_prd_cnt_ctrl_7_polarity_7_wd;
  logic [7:0] inp_prd_cnt_ctrl_7_input_select_7_qs;
  logic [7:0] inp_prd_cnt_ctrl_7_input_select_7_wd;
  logic [7:0] inp_prd_cnt_ctrl_7_prescaler_7_qs;
  logic [7:0] inp_prd_cnt_ctrl_7_prescaler_7_wd;
  logic inp_prd_cnt_val_0_re;
  logic [31:0] inp_prd_cnt_val_0_qs;
  logic [31:0] inp_prd_cnt_val_0_wd;
  logic inp_prd_cnt_val_1_re;
  logic [31:0] inp_prd_cnt_val_1_qs;
  logic [31:0] inp_prd_cnt_val_1_wd;
  logic inp_prd_cnt_val_2_re;
  logic [31:0] inp_prd_cnt_val_2_qs;
  logic [31:0] inp_prd_cnt_val_2_wd;
  logic inp_prd_cnt_val_3_re;
  logic [31:0] inp_prd_cnt_val_3_qs;
  logic [31:0] inp_prd_cnt_val_3_wd;
  logic inp_prd_cnt_val_4_re;
  logic [31:0] inp_prd_cnt_val_4_qs;
  logic [31:0] inp_prd_cnt_val_4_wd;
  logic inp_prd_cnt_val_5_re;
  logic [31:0] inp_prd_cnt_val_5_qs;
  logic [31:0] inp_prd_cnt_val_5_wd;
  logic inp_prd_cnt_val_6_re;
  logic [31:0] inp_prd_cnt_val_6_qs;
  logic [31:0] inp_prd_cnt_val_6_wd;
  logic inp_prd_cnt_val_7_re;
  logic [31:0] inp_prd_cnt_val_7_qs;
  logic [31:0] inp_prd_cnt_val_7_wd;

  // Register instances
  // R[intr_state]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_intr_state (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.de),
    .d      (hw2reg.intr_state.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_qs)
  );


  // R[intr_enable]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_intr_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [0:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_intr_test (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.qe = intr_test_qe;


  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [0:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.qe = alert_test_qe;


  // R[data_in]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_data_in (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.data_in.de),
    .d      (hw2reg.data_in.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (data_in_qs)
  );


  // R[direct_out]: V(True)
  logic direct_out_qe;
  logic [0:0] direct_out_flds_we;
  assign direct_out_qe = &direct_out_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_direct_out (
    .re     (direct_out_re),
    .we     (direct_out_we),
    .wd     (direct_out_wd),
    .d      (hw2reg.direct_out.d),
    .qre    (),
    .qe     (direct_out_flds_we[0]),
    .q      (reg2hw.direct_out.q),
    .ds     (),
    .qs     (direct_out_qs)
  );
  assign reg2hw.direct_out.qe = direct_out_qe;


  // R[masked_out_lower]: V(True)
  logic masked_out_lower_qe;
  logic [1:0] masked_out_lower_flds_we;
  assign masked_out_lower_qe = &masked_out_lower_flds_we;
  //   F[data]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_masked_out_lower_data (
    .re     (masked_out_lower_re),
    .we     (masked_out_lower_we),
    .wd     (masked_out_lower_data_wd),
    .d      (hw2reg.masked_out_lower.data.d),
    .qre    (),
    .qe     (masked_out_lower_flds_we[0]),
    .q      (reg2hw.masked_out_lower.data.q),
    .ds     (),
    .qs     (masked_out_lower_data_qs)
  );
  assign reg2hw.masked_out_lower.data.qe = masked_out_lower_qe;

  //   F[mask]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_masked_out_lower_mask (
    .re     (1'b0),
    .we     (masked_out_lower_we),
    .wd     (masked_out_lower_mask_wd),
    .d      (hw2reg.masked_out_lower.mask.d),
    .qre    (),
    .qe     (masked_out_lower_flds_we[1]),
    .q      (reg2hw.masked_out_lower.mask.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.masked_out_lower.mask.qe = masked_out_lower_qe;


  // R[masked_out_upper]: V(True)
  logic masked_out_upper_qe;
  logic [1:0] masked_out_upper_flds_we;
  assign masked_out_upper_qe = &masked_out_upper_flds_we;
  //   F[data]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_masked_out_upper_data (
    .re     (masked_out_upper_re),
    .we     (masked_out_upper_we),
    .wd     (masked_out_upper_data_wd),
    .d      (hw2reg.masked_out_upper.data.d),
    .qre    (),
    .qe     (masked_out_upper_flds_we[0]),
    .q      (reg2hw.masked_out_upper.data.q),
    .ds     (),
    .qs     (masked_out_upper_data_qs)
  );
  assign reg2hw.masked_out_upper.data.qe = masked_out_upper_qe;

  //   F[mask]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_masked_out_upper_mask (
    .re     (1'b0),
    .we     (masked_out_upper_we),
    .wd     (masked_out_upper_mask_wd),
    .d      (hw2reg.masked_out_upper.mask.d),
    .qre    (),
    .qe     (masked_out_upper_flds_we[1]),
    .q      (reg2hw.masked_out_upper.mask.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.masked_out_upper.mask.qe = masked_out_upper_qe;


  // R[direct_oe]: V(True)
  logic direct_oe_qe;
  logic [0:0] direct_oe_flds_we;
  assign direct_oe_qe = &direct_oe_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_direct_oe (
    .re     (direct_oe_re),
    .we     (direct_oe_we),
    .wd     (direct_oe_wd),
    .d      (hw2reg.direct_oe.d),
    .qre    (),
    .qe     (direct_oe_flds_we[0]),
    .q      (reg2hw.direct_oe.q),
    .ds     (),
    .qs     (direct_oe_qs)
  );
  assign reg2hw.direct_oe.qe = direct_oe_qe;


  // R[masked_oe_lower]: V(True)
  logic masked_oe_lower_qe;
  logic [1:0] masked_oe_lower_flds_we;
  assign masked_oe_lower_qe = &masked_oe_lower_flds_we;
  //   F[data]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_masked_oe_lower_data (
    .re     (masked_oe_lower_re),
    .we     (masked_oe_lower_we),
    .wd     (masked_oe_lower_data_wd),
    .d      (hw2reg.masked_oe_lower.data.d),
    .qre    (),
    .qe     (masked_oe_lower_flds_we[0]),
    .q      (reg2hw.masked_oe_lower.data.q),
    .ds     (),
    .qs     (masked_oe_lower_data_qs)
  );
  assign reg2hw.masked_oe_lower.data.qe = masked_oe_lower_qe;

  //   F[mask]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_masked_oe_lower_mask (
    .re     (masked_oe_lower_re),
    .we     (masked_oe_lower_we),
    .wd     (masked_oe_lower_mask_wd),
    .d      (hw2reg.masked_oe_lower.mask.d),
    .qre    (),
    .qe     (masked_oe_lower_flds_we[1]),
    .q      (reg2hw.masked_oe_lower.mask.q),
    .ds     (),
    .qs     (masked_oe_lower_mask_qs)
  );
  assign reg2hw.masked_oe_lower.mask.qe = masked_oe_lower_qe;


  // R[masked_oe_upper]: V(True)
  logic masked_oe_upper_qe;
  logic [1:0] masked_oe_upper_flds_we;
  assign masked_oe_upper_qe = &masked_oe_upper_flds_we;
  //   F[data]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_masked_oe_upper_data (
    .re     (masked_oe_upper_re),
    .we     (masked_oe_upper_we),
    .wd     (masked_oe_upper_data_wd),
    .d      (hw2reg.masked_oe_upper.data.d),
    .qre    (),
    .qe     (masked_oe_upper_flds_we[0]),
    .q      (reg2hw.masked_oe_upper.data.q),
    .ds     (),
    .qs     (masked_oe_upper_data_qs)
  );
  assign reg2hw.masked_oe_upper.data.qe = masked_oe_upper_qe;

  //   F[mask]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_masked_oe_upper_mask (
    .re     (masked_oe_upper_re),
    .we     (masked_oe_upper_we),
    .wd     (masked_oe_upper_mask_wd),
    .d      (hw2reg.masked_oe_upper.mask.d),
    .qre    (),
    .qe     (masked_oe_upper_flds_we[1]),
    .q      (reg2hw.masked_oe_upper.mask.q),
    .ds     (),
    .qs     (masked_oe_upper_mask_qs)
  );
  assign reg2hw.masked_oe_upper.mask.qe = masked_oe_upper_qe;


  // R[intr_ctrl_en_rising]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_intr_ctrl_en_rising (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_ctrl_en_rising_we),
    .wd     (intr_ctrl_en_rising_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_ctrl_en_rising.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_ctrl_en_rising_qs)
  );


  // R[intr_ctrl_en_falling]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_intr_ctrl_en_falling (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_ctrl_en_falling_we),
    .wd     (intr_ctrl_en_falling_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_ctrl_en_falling.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_ctrl_en_falling_qs)
  );


  // R[intr_ctrl_en_lvlhigh]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_intr_ctrl_en_lvlhigh (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_ctrl_en_lvlhigh_we),
    .wd     (intr_ctrl_en_lvlhigh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_ctrl_en_lvlhigh.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_ctrl_en_lvlhigh_qs)
  );


  // R[intr_ctrl_en_lvllow]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_intr_ctrl_en_lvllow (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_ctrl_en_lvllow_we),
    .wd     (intr_ctrl_en_lvllow_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_ctrl_en_lvllow.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_ctrl_en_lvllow_qs)
  );


  // R[ctrl_en_input_filter]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_ctrl_en_input_filter (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_en_input_filter_we),
    .wd     (ctrl_en_input_filter_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl_en_input_filter.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_en_input_filter_qs)
  );


  // R[hw_straps_data_in_valid]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_hw_straps_data_in_valid (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.hw_straps_data_in_valid.de),
    .d      (hw2reg.hw_straps_data_in_valid.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hw_straps_data_in_valid.q),
    .ds     (),

    // to register interface (read)
    .qs     (hw_straps_data_in_valid_qs)
  );


  // R[hw_straps_data_in]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_hw_straps_data_in (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.hw_straps_data_in.de),
    .d      (hw2reg.hw_straps_data_in.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.hw_straps_data_in.q),
    .ds     (),

    // to register interface (read)
    .qs     (hw_straps_data_in_qs)
  );


  // Subregister 0 of Multireg inp_prd_cnt_ctrl
  // R[inp_prd_cnt_ctrl_0]: V(False)
  //   F[enable_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_0_enable_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_0_we),
    .wd     (inp_prd_cnt_ctrl_0_enable_0_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[0].enable.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[0].enable.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[0].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_0_enable_0_qs)
  );

  //   F[continuous_mode_0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_0_continuous_mode_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_0_we),
    .wd     (inp_prd_cnt_ctrl_0_continuous_mode_0_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[0].continuous_mode.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[0].continuous_mode.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[0].continuous_mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_0_continuous_mode_0_qs)
  );

  //   F[polarity_0]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_0_polarity_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_0_we),
    .wd     (inp_prd_cnt_ctrl_0_polarity_0_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[0].polarity.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[0].polarity.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[0].polarity.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_0_polarity_0_qs)
  );

  //   F[input_select_0]: 15:8
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_0_input_select_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_0_we),
    .wd     (inp_prd_cnt_ctrl_0_input_select_0_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[0].input_select.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[0].input_select.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[0].input_select.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_0_input_select_0_qs)
  );

  //   F[prescaler_0]: 23:16
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_0_prescaler_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_0_we),
    .wd     (inp_prd_cnt_ctrl_0_prescaler_0_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[0].prescaler.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[0].prescaler.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[0].prescaler.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_0_prescaler_0_qs)
  );


  // Subregister 1 of Multireg inp_prd_cnt_ctrl
  // R[inp_prd_cnt_ctrl_1]: V(False)
  //   F[enable_1]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_1_enable_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_1_we),
    .wd     (inp_prd_cnt_ctrl_1_enable_1_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[1].enable.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[1].enable.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[1].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_1_enable_1_qs)
  );

  //   F[continuous_mode_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_1_continuous_mode_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_1_we),
    .wd     (inp_prd_cnt_ctrl_1_continuous_mode_1_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[1].continuous_mode.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[1].continuous_mode.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[1].continuous_mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_1_continuous_mode_1_qs)
  );

  //   F[polarity_1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_1_polarity_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_1_we),
    .wd     (inp_prd_cnt_ctrl_1_polarity_1_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[1].polarity.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[1].polarity.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[1].polarity.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_1_polarity_1_qs)
  );

  //   F[input_select_1]: 15:8
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_1_input_select_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_1_we),
    .wd     (inp_prd_cnt_ctrl_1_input_select_1_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[1].input_select.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[1].input_select.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[1].input_select.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_1_input_select_1_qs)
  );

  //   F[prescaler_1]: 23:16
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_1_prescaler_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_1_we),
    .wd     (inp_prd_cnt_ctrl_1_prescaler_1_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[1].prescaler.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[1].prescaler.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[1].prescaler.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_1_prescaler_1_qs)
  );


  // Subregister 2 of Multireg inp_prd_cnt_ctrl
  // R[inp_prd_cnt_ctrl_2]: V(False)
  //   F[enable_2]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_2_enable_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_2_we),
    .wd     (inp_prd_cnt_ctrl_2_enable_2_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[2].enable.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[2].enable.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[2].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_2_enable_2_qs)
  );

  //   F[continuous_mode_2]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_2_continuous_mode_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_2_we),
    .wd     (inp_prd_cnt_ctrl_2_continuous_mode_2_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[2].continuous_mode.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[2].continuous_mode.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[2].continuous_mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_2_continuous_mode_2_qs)
  );

  //   F[polarity_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_2_polarity_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_2_we),
    .wd     (inp_prd_cnt_ctrl_2_polarity_2_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[2].polarity.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[2].polarity.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[2].polarity.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_2_polarity_2_qs)
  );

  //   F[input_select_2]: 15:8
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_2_input_select_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_2_we),
    .wd     (inp_prd_cnt_ctrl_2_input_select_2_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[2].input_select.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[2].input_select.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[2].input_select.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_2_input_select_2_qs)
  );

  //   F[prescaler_2]: 23:16
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_2_prescaler_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_2_we),
    .wd     (inp_prd_cnt_ctrl_2_prescaler_2_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[2].prescaler.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[2].prescaler.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[2].prescaler.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_2_prescaler_2_qs)
  );


  // Subregister 3 of Multireg inp_prd_cnt_ctrl
  // R[inp_prd_cnt_ctrl_3]: V(False)
  //   F[enable_3]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_3_enable_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_3_we),
    .wd     (inp_prd_cnt_ctrl_3_enable_3_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[3].enable.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[3].enable.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[3].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_3_enable_3_qs)
  );

  //   F[continuous_mode_3]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_3_continuous_mode_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_3_we),
    .wd     (inp_prd_cnt_ctrl_3_continuous_mode_3_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[3].continuous_mode.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[3].continuous_mode.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[3].continuous_mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_3_continuous_mode_3_qs)
  );

  //   F[polarity_3]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_3_polarity_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_3_we),
    .wd     (inp_prd_cnt_ctrl_3_polarity_3_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[3].polarity.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[3].polarity.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[3].polarity.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_3_polarity_3_qs)
  );

  //   F[input_select_3]: 15:8
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_3_input_select_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_3_we),
    .wd     (inp_prd_cnt_ctrl_3_input_select_3_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[3].input_select.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[3].input_select.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[3].input_select.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_3_input_select_3_qs)
  );

  //   F[prescaler_3]: 23:16
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_3_prescaler_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_3_we),
    .wd     (inp_prd_cnt_ctrl_3_prescaler_3_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[3].prescaler.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[3].prescaler.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[3].prescaler.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_3_prescaler_3_qs)
  );


  // Subregister 4 of Multireg inp_prd_cnt_ctrl
  // R[inp_prd_cnt_ctrl_4]: V(False)
  //   F[enable_4]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_4_enable_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_4_we),
    .wd     (inp_prd_cnt_ctrl_4_enable_4_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[4].enable.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[4].enable.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[4].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_4_enable_4_qs)
  );

  //   F[continuous_mode_4]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_4_continuous_mode_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_4_we),
    .wd     (inp_prd_cnt_ctrl_4_continuous_mode_4_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[4].continuous_mode.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[4].continuous_mode.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[4].continuous_mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_4_continuous_mode_4_qs)
  );

  //   F[polarity_4]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_4_polarity_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_4_we),
    .wd     (inp_prd_cnt_ctrl_4_polarity_4_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[4].polarity.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[4].polarity.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[4].polarity.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_4_polarity_4_qs)
  );

  //   F[input_select_4]: 15:8
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_4_input_select_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_4_we),
    .wd     (inp_prd_cnt_ctrl_4_input_select_4_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[4].input_select.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[4].input_select.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[4].input_select.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_4_input_select_4_qs)
  );

  //   F[prescaler_4]: 23:16
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_4_prescaler_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_4_we),
    .wd     (inp_prd_cnt_ctrl_4_prescaler_4_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[4].prescaler.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[4].prescaler.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[4].prescaler.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_4_prescaler_4_qs)
  );


  // Subregister 5 of Multireg inp_prd_cnt_ctrl
  // R[inp_prd_cnt_ctrl_5]: V(False)
  //   F[enable_5]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_5_enable_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_5_we),
    .wd     (inp_prd_cnt_ctrl_5_enable_5_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[5].enable.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[5].enable.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[5].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_5_enable_5_qs)
  );

  //   F[continuous_mode_5]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_5_continuous_mode_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_5_we),
    .wd     (inp_prd_cnt_ctrl_5_continuous_mode_5_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[5].continuous_mode.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[5].continuous_mode.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[5].continuous_mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_5_continuous_mode_5_qs)
  );

  //   F[polarity_5]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_5_polarity_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_5_we),
    .wd     (inp_prd_cnt_ctrl_5_polarity_5_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[5].polarity.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[5].polarity.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[5].polarity.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_5_polarity_5_qs)
  );

  //   F[input_select_5]: 15:8
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_5_input_select_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_5_we),
    .wd     (inp_prd_cnt_ctrl_5_input_select_5_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[5].input_select.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[5].input_select.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[5].input_select.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_5_input_select_5_qs)
  );

  //   F[prescaler_5]: 23:16
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_5_prescaler_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_5_we),
    .wd     (inp_prd_cnt_ctrl_5_prescaler_5_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[5].prescaler.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[5].prescaler.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[5].prescaler.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_5_prescaler_5_qs)
  );


  // Subregister 6 of Multireg inp_prd_cnt_ctrl
  // R[inp_prd_cnt_ctrl_6]: V(False)
  //   F[enable_6]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_6_enable_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_6_we),
    .wd     (inp_prd_cnt_ctrl_6_enable_6_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[6].enable.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[6].enable.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[6].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_6_enable_6_qs)
  );

  //   F[continuous_mode_6]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_6_continuous_mode_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_6_we),
    .wd     (inp_prd_cnt_ctrl_6_continuous_mode_6_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[6].continuous_mode.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[6].continuous_mode.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[6].continuous_mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_6_continuous_mode_6_qs)
  );

  //   F[polarity_6]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_6_polarity_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_6_we),
    .wd     (inp_prd_cnt_ctrl_6_polarity_6_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[6].polarity.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[6].polarity.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[6].polarity.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_6_polarity_6_qs)
  );

  //   F[input_select_6]: 15:8
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_6_input_select_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_6_we),
    .wd     (inp_prd_cnt_ctrl_6_input_select_6_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[6].input_select.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[6].input_select.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[6].input_select.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_6_input_select_6_qs)
  );

  //   F[prescaler_6]: 23:16
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_6_prescaler_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_6_we),
    .wd     (inp_prd_cnt_ctrl_6_prescaler_6_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[6].prescaler.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[6].prescaler.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[6].prescaler.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_6_prescaler_6_qs)
  );


  // Subregister 7 of Multireg inp_prd_cnt_ctrl
  // R[inp_prd_cnt_ctrl_7]: V(False)
  //   F[enable_7]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_7_enable_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_7_we),
    .wd     (inp_prd_cnt_ctrl_7_enable_7_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[7].enable.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[7].enable.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[7].enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_7_enable_7_qs)
  );

  //   F[continuous_mode_7]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_7_continuous_mode_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_7_we),
    .wd     (inp_prd_cnt_ctrl_7_continuous_mode_7_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[7].continuous_mode.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[7].continuous_mode.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[7].continuous_mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_7_continuous_mode_7_qs)
  );

  //   F[polarity_7]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_7_polarity_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_7_we),
    .wd     (inp_prd_cnt_ctrl_7_polarity_7_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[7].polarity.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[7].polarity.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[7].polarity.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_7_polarity_7_qs)
  );

  //   F[input_select_7]: 15:8
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_7_input_select_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_7_we),
    .wd     (inp_prd_cnt_ctrl_7_input_select_7_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[7].input_select.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[7].input_select.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[7].input_select.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_7_input_select_7_qs)
  );

  //   F[prescaler_7]: 23:16
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_ctrl_7_prescaler_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_ctrl_7_we),
    .wd     (inp_prd_cnt_ctrl_7_prescaler_7_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_ctrl[7].prescaler.de),
    .d      (hw2reg.inp_prd_cnt_ctrl[7].prescaler.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.inp_prd_cnt_ctrl[7].prescaler.q),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_ctrl_7_prescaler_7_qs)
  );


  // Subregister 0 of Multireg inp_prd_cnt_val
  // R[inp_prd_cnt_val_0]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRC),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_val_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_val_0_re),
    .wd     (inp_prd_cnt_val_0_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_val[0].de),
    .d      (hw2reg.inp_prd_cnt_val[0].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_val_0_qs)
  );


  // Subregister 1 of Multireg inp_prd_cnt_val
  // R[inp_prd_cnt_val_1]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRC),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_val_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_val_1_re),
    .wd     (inp_prd_cnt_val_1_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_val[1].de),
    .d      (hw2reg.inp_prd_cnt_val[1].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_val_1_qs)
  );


  // Subregister 2 of Multireg inp_prd_cnt_val
  // R[inp_prd_cnt_val_2]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRC),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_val_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_val_2_re),
    .wd     (inp_prd_cnt_val_2_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_val[2].de),
    .d      (hw2reg.inp_prd_cnt_val[2].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_val_2_qs)
  );


  // Subregister 3 of Multireg inp_prd_cnt_val
  // R[inp_prd_cnt_val_3]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRC),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_val_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_val_3_re),
    .wd     (inp_prd_cnt_val_3_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_val[3].de),
    .d      (hw2reg.inp_prd_cnt_val[3].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_val_3_qs)
  );


  // Subregister 4 of Multireg inp_prd_cnt_val
  // R[inp_prd_cnt_val_4]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRC),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_val_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_val_4_re),
    .wd     (inp_prd_cnt_val_4_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_val[4].de),
    .d      (hw2reg.inp_prd_cnt_val[4].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_val_4_qs)
  );


  // Subregister 5 of Multireg inp_prd_cnt_val
  // R[inp_prd_cnt_val_5]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRC),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_val_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_val_5_re),
    .wd     (inp_prd_cnt_val_5_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_val[5].de),
    .d      (hw2reg.inp_prd_cnt_val[5].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_val_5_qs)
  );


  // Subregister 6 of Multireg inp_prd_cnt_val
  // R[inp_prd_cnt_val_6]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRC),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_val_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_val_6_re),
    .wd     (inp_prd_cnt_val_6_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_val[6].de),
    .d      (hw2reg.inp_prd_cnt_val[6].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_val_6_qs)
  );


  // Subregister 7 of Multireg inp_prd_cnt_val
  // R[inp_prd_cnt_val_7]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRC),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_inp_prd_cnt_val_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (inp_prd_cnt_val_7_re),
    .wd     (inp_prd_cnt_val_7_wd),

    // from internal hardware
    .de     (hw2reg.inp_prd_cnt_val[7].de),
    .d      (hw2reg.inp_prd_cnt_val[7].d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (inp_prd_cnt_val_7_qs)
  );



  logic [33:0] addr_hit;
  top_racl_pkg::racl_role_vec_t racl_role_vec;
  top_racl_pkg::racl_role_t racl_role;

  logic [33:0] racl_addr_hit_read;
  logic [33:0] racl_addr_hit_write;

  if (EnableRacl) begin : gen_racl_role_logic
    // Retrieve RACL role from user bits and one-hot encode that for the comparison bitmap
    assign racl_role = top_racl_pkg::tlul_extract_racl_role_bits(tl_i.a_user.rsvd);

    prim_onehot_enc #(
      .OneHotWidth( $bits(top_racl_pkg::racl_role_vec_t) )
    ) u_racl_role_encode (
      .in_i ( racl_role     ),
      .en_i ( 1'b1          ),
      .out_o( racl_role_vec )
    );
  end else begin : gen_no_racl_role_logic
    assign racl_role     = '0;
    assign racl_role_vec = '0;
  end

  always_comb begin
    addr_hit = '0;
    racl_addr_hit_read  = '0;
    racl_addr_hit_write = '0;
    addr_hit[ 0] = (reg_addr == GPIO_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == GPIO_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == GPIO_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == GPIO_ALERT_TEST_OFFSET);
    addr_hit[ 4] = (reg_addr == GPIO_DATA_IN_OFFSET);
    addr_hit[ 5] = (reg_addr == GPIO_DIRECT_OUT_OFFSET);
    addr_hit[ 6] = (reg_addr == GPIO_MASKED_OUT_LOWER_OFFSET);
    addr_hit[ 7] = (reg_addr == GPIO_MASKED_OUT_UPPER_OFFSET);
    addr_hit[ 8] = (reg_addr == GPIO_DIRECT_OE_OFFSET);
    addr_hit[ 9] = (reg_addr == GPIO_MASKED_OE_LOWER_OFFSET);
    addr_hit[10] = (reg_addr == GPIO_MASKED_OE_UPPER_OFFSET);
    addr_hit[11] = (reg_addr == GPIO_INTR_CTRL_EN_RISING_OFFSET);
    addr_hit[12] = (reg_addr == GPIO_INTR_CTRL_EN_FALLING_OFFSET);
    addr_hit[13] = (reg_addr == GPIO_INTR_CTRL_EN_LVLHIGH_OFFSET);
    addr_hit[14] = (reg_addr == GPIO_INTR_CTRL_EN_LVLLOW_OFFSET);
    addr_hit[15] = (reg_addr == GPIO_CTRL_EN_INPUT_FILTER_OFFSET);
    addr_hit[16] = (reg_addr == GPIO_HW_STRAPS_DATA_IN_VALID_OFFSET);
    addr_hit[17] = (reg_addr == GPIO_HW_STRAPS_DATA_IN_OFFSET);
    addr_hit[18] = (reg_addr == GPIO_INP_PRD_CNT_CTRL_0_OFFSET);
    addr_hit[19] = (reg_addr == GPIO_INP_PRD_CNT_CTRL_1_OFFSET);
    addr_hit[20] = (reg_addr == GPIO_INP_PRD_CNT_CTRL_2_OFFSET);
    addr_hit[21] = (reg_addr == GPIO_INP_PRD_CNT_CTRL_3_OFFSET);
    addr_hit[22] = (reg_addr == GPIO_INP_PRD_CNT_CTRL_4_OFFSET);
    addr_hit[23] = (reg_addr == GPIO_INP_PRD_CNT_CTRL_5_OFFSET);
    addr_hit[24] = (reg_addr == GPIO_INP_PRD_CNT_CTRL_6_OFFSET);
    addr_hit[25] = (reg_addr == GPIO_INP_PRD_CNT_CTRL_7_OFFSET);
    addr_hit[26] = (reg_addr == GPIO_INP_PRD_CNT_VAL_0_OFFSET);
    addr_hit[27] = (reg_addr == GPIO_INP_PRD_CNT_VAL_1_OFFSET);
    addr_hit[28] = (reg_addr == GPIO_INP_PRD_CNT_VAL_2_OFFSET);
    addr_hit[29] = (reg_addr == GPIO_INP_PRD_CNT_VAL_3_OFFSET);
    addr_hit[30] = (reg_addr == GPIO_INP_PRD_CNT_VAL_4_OFFSET);
    addr_hit[31] = (reg_addr == GPIO_INP_PRD_CNT_VAL_5_OFFSET);
    addr_hit[32] = (reg_addr == GPIO_INP_PRD_CNT_VAL_6_OFFSET);
    addr_hit[33] = (reg_addr == GPIO_INP_PRD_CNT_VAL_7_OFFSET);

    if (EnableRacl) begin : gen_racl_hit
      for (int unsigned slice_idx = 0; slice_idx < 34; slice_idx++) begin
        racl_addr_hit_read[slice_idx] =
            addr_hit[slice_idx] & (|(racl_policies_i[RaclPolicySelVec[slice_idx]].read_perm
                                      & racl_role_vec));
        racl_addr_hit_write[slice_idx] =
            addr_hit[slice_idx] & (|(racl_policies_i[RaclPolicySelVec[slice_idx]].write_perm
                                      & racl_role_vec));
      end
    end else begin : gen_no_racl
      racl_addr_hit_read  = addr_hit;
      racl_addr_hit_write = addr_hit;
    end
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
  // A valid address hit, access, but failed the RACL check
  assign racl_error_o.valid = |addr_hit & ((reg_re & ~|racl_addr_hit_read) |
                                           (reg_we & ~|racl_addr_hit_write));
  assign racl_error_o.request_address = top_pkg::TL_AW'(reg_addr);
  assign racl_error_o.racl_role       = racl_role;
  assign racl_error_o.overflow        = 1'b0;

  if (EnableRacl) begin : gen_racl_log
    assign racl_error_o.ctn_uid     = top_racl_pkg::tlul_extract_ctn_uid_bits(tl_i.a_user.rsvd);
    assign racl_error_o.read_access = tl_i.a_opcode == tlul_pkg::Get;
  end else begin : gen_no_racl_log
    assign racl_error_o.ctn_uid     = '0;
    assign racl_error_o.read_access = 1'b0;
  end

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((racl_addr_hit_write[ 0] & (|(GPIO_PERMIT[ 0] & ~reg_be))) |
               (racl_addr_hit_write[ 1] & (|(GPIO_PERMIT[ 1] & ~reg_be))) |
               (racl_addr_hit_write[ 2] & (|(GPIO_PERMIT[ 2] & ~reg_be))) |
               (racl_addr_hit_write[ 3] & (|(GPIO_PERMIT[ 3] & ~reg_be))) |
               (racl_addr_hit_write[ 4] & (|(GPIO_PERMIT[ 4] & ~reg_be))) |
               (racl_addr_hit_write[ 5] & (|(GPIO_PERMIT[ 5] & ~reg_be))) |
               (racl_addr_hit_write[ 6] & (|(GPIO_PERMIT[ 6] & ~reg_be))) |
               (racl_addr_hit_write[ 7] & (|(GPIO_PERMIT[ 7] & ~reg_be))) |
               (racl_addr_hit_write[ 8] & (|(GPIO_PERMIT[ 8] & ~reg_be))) |
               (racl_addr_hit_write[ 9] & (|(GPIO_PERMIT[ 9] & ~reg_be))) |
               (racl_addr_hit_write[10] & (|(GPIO_PERMIT[10] & ~reg_be))) |
               (racl_addr_hit_write[11] & (|(GPIO_PERMIT[11] & ~reg_be))) |
               (racl_addr_hit_write[12] & (|(GPIO_PERMIT[12] & ~reg_be))) |
               (racl_addr_hit_write[13] & (|(GPIO_PERMIT[13] & ~reg_be))) |
               (racl_addr_hit_write[14] & (|(GPIO_PERMIT[14] & ~reg_be))) |
               (racl_addr_hit_write[15] & (|(GPIO_PERMIT[15] & ~reg_be))) |
               (racl_addr_hit_write[16] & (|(GPIO_PERMIT[16] & ~reg_be))) |
               (racl_addr_hit_write[17] & (|(GPIO_PERMIT[17] & ~reg_be))) |
               (racl_addr_hit_write[18] & (|(GPIO_PERMIT[18] & ~reg_be))) |
               (racl_addr_hit_write[19] & (|(GPIO_PERMIT[19] & ~reg_be))) |
               (racl_addr_hit_write[20] & (|(GPIO_PERMIT[20] & ~reg_be))) |
               (racl_addr_hit_write[21] & (|(GPIO_PERMIT[21] & ~reg_be))) |
               (racl_addr_hit_write[22] & (|(GPIO_PERMIT[22] & ~reg_be))) |
               (racl_addr_hit_write[23] & (|(GPIO_PERMIT[23] & ~reg_be))) |
               (racl_addr_hit_write[24] & (|(GPIO_PERMIT[24] & ~reg_be))) |
               (racl_addr_hit_write[25] & (|(GPIO_PERMIT[25] & ~reg_be))) |
               (racl_addr_hit_write[26] & (|(GPIO_PERMIT[26] & ~reg_be))) |
               (racl_addr_hit_write[27] & (|(GPIO_PERMIT[27] & ~reg_be))) |
               (racl_addr_hit_write[28] & (|(GPIO_PERMIT[28] & ~reg_be))) |
               (racl_addr_hit_write[29] & (|(GPIO_PERMIT[29] & ~reg_be))) |
               (racl_addr_hit_write[30] & (|(GPIO_PERMIT[30] & ~reg_be))) |
               (racl_addr_hit_write[31] & (|(GPIO_PERMIT[31] & ~reg_be))) |
               (racl_addr_hit_write[32] & (|(GPIO_PERMIT[32] & ~reg_be))) |
               (racl_addr_hit_write[33] & (|(GPIO_PERMIT[33] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_state_we = racl_addr_hit_write[0] & reg_we & !reg_error;

  assign intr_state_wd = reg_wdata[31:0];
  assign intr_enable_we = racl_addr_hit_write[1] & reg_we & !reg_error;

  assign intr_enable_wd = reg_wdata[31:0];
  assign intr_test_we = racl_addr_hit_write[2] & reg_we & !reg_error;

  assign intr_test_wd = reg_wdata[31:0];
  assign alert_test_we = racl_addr_hit_write[3] & reg_we & !reg_error;

  assign alert_test_wd = reg_wdata[0];
  assign direct_out_re = racl_addr_hit_read[5] & reg_re & !reg_error;
  assign direct_out_we = racl_addr_hit_write[5] & reg_we & !reg_error;

  assign direct_out_wd = reg_wdata[31:0];
  assign masked_out_lower_re = racl_addr_hit_read[6] & reg_re & !reg_error;
  assign masked_out_lower_we = racl_addr_hit_write[6] & reg_we & !reg_error;

  assign masked_out_lower_data_wd = reg_wdata[15:0];

  assign masked_out_lower_mask_wd = reg_wdata[31:16];
  assign masked_out_upper_re = racl_addr_hit_read[7] & reg_re & !reg_error;
  assign masked_out_upper_we = racl_addr_hit_write[7] & reg_we & !reg_error;

  assign masked_out_upper_data_wd = reg_wdata[15:0];

  assign masked_out_upper_mask_wd = reg_wdata[31:16];
  assign direct_oe_re = racl_addr_hit_read[8] & reg_re & !reg_error;
  assign direct_oe_we = racl_addr_hit_write[8] & reg_we & !reg_error;

  assign direct_oe_wd = reg_wdata[31:0];
  assign masked_oe_lower_re = racl_addr_hit_read[9] & reg_re & !reg_error;
  assign masked_oe_lower_we = racl_addr_hit_write[9] & reg_we & !reg_error;

  assign masked_oe_lower_data_wd = reg_wdata[15:0];

  assign masked_oe_lower_mask_wd = reg_wdata[31:16];
  assign masked_oe_upper_re = racl_addr_hit_read[10] & reg_re & !reg_error;
  assign masked_oe_upper_we = racl_addr_hit_write[10] & reg_we & !reg_error;

  assign masked_oe_upper_data_wd = reg_wdata[15:0];

  assign masked_oe_upper_mask_wd = reg_wdata[31:16];
  assign intr_ctrl_en_rising_we = racl_addr_hit_write[11] & reg_we & !reg_error;

  assign intr_ctrl_en_rising_wd = reg_wdata[31:0];
  assign intr_ctrl_en_falling_we = racl_addr_hit_write[12] & reg_we & !reg_error;

  assign intr_ctrl_en_falling_wd = reg_wdata[31:0];
  assign intr_ctrl_en_lvlhigh_we = racl_addr_hit_write[13] & reg_we & !reg_error;

  assign intr_ctrl_en_lvlhigh_wd = reg_wdata[31:0];
  assign intr_ctrl_en_lvllow_we = racl_addr_hit_write[14] & reg_we & !reg_error;

  assign intr_ctrl_en_lvllow_wd = reg_wdata[31:0];
  assign ctrl_en_input_filter_we = racl_addr_hit_write[15] & reg_we & !reg_error;

  assign ctrl_en_input_filter_wd = reg_wdata[31:0];
  assign inp_prd_cnt_ctrl_0_we = racl_addr_hit_write[18] & reg_we & !reg_error;

  assign inp_prd_cnt_ctrl_0_enable_0_wd = reg_wdata[0];

  assign inp_prd_cnt_ctrl_0_continuous_mode_0_wd = reg_wdata[1];

  assign inp_prd_cnt_ctrl_0_polarity_0_wd = reg_wdata[2];

  assign inp_prd_cnt_ctrl_0_input_select_0_wd = reg_wdata[15:8];

  assign inp_prd_cnt_ctrl_0_prescaler_0_wd = reg_wdata[23:16];
  assign inp_prd_cnt_ctrl_1_we = racl_addr_hit_write[19] & reg_we & !reg_error;

  assign inp_prd_cnt_ctrl_1_enable_1_wd = reg_wdata[0];

  assign inp_prd_cnt_ctrl_1_continuous_mode_1_wd = reg_wdata[1];

  assign inp_prd_cnt_ctrl_1_polarity_1_wd = reg_wdata[2];

  assign inp_prd_cnt_ctrl_1_input_select_1_wd = reg_wdata[15:8];

  assign inp_prd_cnt_ctrl_1_prescaler_1_wd = reg_wdata[23:16];
  assign inp_prd_cnt_ctrl_2_we = racl_addr_hit_write[20] & reg_we & !reg_error;

  assign inp_prd_cnt_ctrl_2_enable_2_wd = reg_wdata[0];

  assign inp_prd_cnt_ctrl_2_continuous_mode_2_wd = reg_wdata[1];

  assign inp_prd_cnt_ctrl_2_polarity_2_wd = reg_wdata[2];

  assign inp_prd_cnt_ctrl_2_input_select_2_wd = reg_wdata[15:8];

  assign inp_prd_cnt_ctrl_2_prescaler_2_wd = reg_wdata[23:16];
  assign inp_prd_cnt_ctrl_3_we = racl_addr_hit_write[21] & reg_we & !reg_error;

  assign inp_prd_cnt_ctrl_3_enable_3_wd = reg_wdata[0];

  assign inp_prd_cnt_ctrl_3_continuous_mode_3_wd = reg_wdata[1];

  assign inp_prd_cnt_ctrl_3_polarity_3_wd = reg_wdata[2];

  assign inp_prd_cnt_ctrl_3_input_select_3_wd = reg_wdata[15:8];

  assign inp_prd_cnt_ctrl_3_prescaler_3_wd = reg_wdata[23:16];
  assign inp_prd_cnt_ctrl_4_we = racl_addr_hit_write[22] & reg_we & !reg_error;

  assign inp_prd_cnt_ctrl_4_enable_4_wd = reg_wdata[0];

  assign inp_prd_cnt_ctrl_4_continuous_mode_4_wd = reg_wdata[1];

  assign inp_prd_cnt_ctrl_4_polarity_4_wd = reg_wdata[2];

  assign inp_prd_cnt_ctrl_4_input_select_4_wd = reg_wdata[15:8];

  assign inp_prd_cnt_ctrl_4_prescaler_4_wd = reg_wdata[23:16];
  assign inp_prd_cnt_ctrl_5_we = racl_addr_hit_write[23] & reg_we & !reg_error;

  assign inp_prd_cnt_ctrl_5_enable_5_wd = reg_wdata[0];

  assign inp_prd_cnt_ctrl_5_continuous_mode_5_wd = reg_wdata[1];

  assign inp_prd_cnt_ctrl_5_polarity_5_wd = reg_wdata[2];

  assign inp_prd_cnt_ctrl_5_input_select_5_wd = reg_wdata[15:8];

  assign inp_prd_cnt_ctrl_5_prescaler_5_wd = reg_wdata[23:16];
  assign inp_prd_cnt_ctrl_6_we = racl_addr_hit_write[24] & reg_we & !reg_error;

  assign inp_prd_cnt_ctrl_6_enable_6_wd = reg_wdata[0];

  assign inp_prd_cnt_ctrl_6_continuous_mode_6_wd = reg_wdata[1];

  assign inp_prd_cnt_ctrl_6_polarity_6_wd = reg_wdata[2];

  assign inp_prd_cnt_ctrl_6_input_select_6_wd = reg_wdata[15:8];

  assign inp_prd_cnt_ctrl_6_prescaler_6_wd = reg_wdata[23:16];
  assign inp_prd_cnt_ctrl_7_we = racl_addr_hit_write[25] & reg_we & !reg_error;

  assign inp_prd_cnt_ctrl_7_enable_7_wd = reg_wdata[0];

  assign inp_prd_cnt_ctrl_7_continuous_mode_7_wd = reg_wdata[1];

  assign inp_prd_cnt_ctrl_7_polarity_7_wd = reg_wdata[2];

  assign inp_prd_cnt_ctrl_7_input_select_7_wd = reg_wdata[15:8];

  assign inp_prd_cnt_ctrl_7_prescaler_7_wd = reg_wdata[23:16];
  assign inp_prd_cnt_val_0_re = racl_addr_hit_read[26] & reg_re & !reg_error;

  assign inp_prd_cnt_val_0_wd = '1;
  assign inp_prd_cnt_val_1_re = racl_addr_hit_read[27] & reg_re & !reg_error;

  assign inp_prd_cnt_val_1_wd = '1;
  assign inp_prd_cnt_val_2_re = racl_addr_hit_read[28] & reg_re & !reg_error;

  assign inp_prd_cnt_val_2_wd = '1;
  assign inp_prd_cnt_val_3_re = racl_addr_hit_read[29] & reg_re & !reg_error;

  assign inp_prd_cnt_val_3_wd = '1;
  assign inp_prd_cnt_val_4_re = racl_addr_hit_read[30] & reg_re & !reg_error;

  assign inp_prd_cnt_val_4_wd = '1;
  assign inp_prd_cnt_val_5_re = racl_addr_hit_read[31] & reg_re & !reg_error;

  assign inp_prd_cnt_val_5_wd = '1;
  assign inp_prd_cnt_val_6_re = racl_addr_hit_read[32] & reg_re & !reg_error;

  assign inp_prd_cnt_val_6_wd = '1;
  assign inp_prd_cnt_val_7_re = racl_addr_hit_read[33] & reg_re & !reg_error;

  assign inp_prd_cnt_val_7_wd = '1;

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = intr_state_we;
    reg_we_check[1] = intr_enable_we;
    reg_we_check[2] = intr_test_we;
    reg_we_check[3] = alert_test_we;
    reg_we_check[4] = 1'b0;
    reg_we_check[5] = direct_out_we;
    reg_we_check[6] = masked_out_lower_we;
    reg_we_check[7] = masked_out_upper_we;
    reg_we_check[8] = direct_oe_we;
    reg_we_check[9] = masked_oe_lower_we;
    reg_we_check[10] = masked_oe_upper_we;
    reg_we_check[11] = intr_ctrl_en_rising_we;
    reg_we_check[12] = intr_ctrl_en_falling_we;
    reg_we_check[13] = intr_ctrl_en_lvlhigh_we;
    reg_we_check[14] = intr_ctrl_en_lvllow_we;
    reg_we_check[15] = ctrl_en_input_filter_we;
    reg_we_check[16] = 1'b0;
    reg_we_check[17] = 1'b0;
    reg_we_check[18] = inp_prd_cnt_ctrl_0_we;
    reg_we_check[19] = inp_prd_cnt_ctrl_1_we;
    reg_we_check[20] = inp_prd_cnt_ctrl_2_we;
    reg_we_check[21] = inp_prd_cnt_ctrl_3_we;
    reg_we_check[22] = inp_prd_cnt_ctrl_4_we;
    reg_we_check[23] = inp_prd_cnt_ctrl_5_we;
    reg_we_check[24] = inp_prd_cnt_ctrl_6_we;
    reg_we_check[25] = inp_prd_cnt_ctrl_7_we;
    reg_we_check[26] = 1'b0;
    reg_we_check[27] = 1'b0;
    reg_we_check[28] = 1'b0;
    reg_we_check[29] = 1'b0;
    reg_we_check[30] = 1'b0;
    reg_we_check[31] = 1'b0;
    reg_we_check[32] = 1'b0;
    reg_we_check[33] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      racl_addr_hit_read[0]: begin
        reg_rdata_next[31:0] = intr_state_qs;
      end

      racl_addr_hit_read[1]: begin
        reg_rdata_next[31:0] = intr_enable_qs;
      end

      racl_addr_hit_read[2]: begin
        reg_rdata_next[31:0] = '0;
      end

      racl_addr_hit_read[3]: begin
        reg_rdata_next[0] = '0;
      end

      racl_addr_hit_read[4]: begin
        reg_rdata_next[31:0] = data_in_qs;
      end

      racl_addr_hit_read[5]: begin
        reg_rdata_next[31:0] = direct_out_qs;
      end

      racl_addr_hit_read[6]: begin
        reg_rdata_next[15:0] = masked_out_lower_data_qs;
        reg_rdata_next[31:16] = '0;
      end

      racl_addr_hit_read[7]: begin
        reg_rdata_next[15:0] = masked_out_upper_data_qs;
        reg_rdata_next[31:16] = '0;
      end

      racl_addr_hit_read[8]: begin
        reg_rdata_next[31:0] = direct_oe_qs;
      end

      racl_addr_hit_read[9]: begin
        reg_rdata_next[15:0] = masked_oe_lower_data_qs;
        reg_rdata_next[31:16] = masked_oe_lower_mask_qs;
      end

      racl_addr_hit_read[10]: begin
        reg_rdata_next[15:0] = masked_oe_upper_data_qs;
        reg_rdata_next[31:16] = masked_oe_upper_mask_qs;
      end

      racl_addr_hit_read[11]: begin
        reg_rdata_next[31:0] = intr_ctrl_en_rising_qs;
      end

      racl_addr_hit_read[12]: begin
        reg_rdata_next[31:0] = intr_ctrl_en_falling_qs;
      end

      racl_addr_hit_read[13]: begin
        reg_rdata_next[31:0] = intr_ctrl_en_lvlhigh_qs;
      end

      racl_addr_hit_read[14]: begin
        reg_rdata_next[31:0] = intr_ctrl_en_lvllow_qs;
      end

      racl_addr_hit_read[15]: begin
        reg_rdata_next[31:0] = ctrl_en_input_filter_qs;
      end

      racl_addr_hit_read[16]: begin
        reg_rdata_next[0] = hw_straps_data_in_valid_qs;
      end

      racl_addr_hit_read[17]: begin
        reg_rdata_next[31:0] = hw_straps_data_in_qs;
      end

      racl_addr_hit_read[18]: begin
        reg_rdata_next[0] = inp_prd_cnt_ctrl_0_enable_0_qs;
        reg_rdata_next[1] = inp_prd_cnt_ctrl_0_continuous_mode_0_qs;
        reg_rdata_next[2] = inp_prd_cnt_ctrl_0_polarity_0_qs;
        reg_rdata_next[15:8] = inp_prd_cnt_ctrl_0_input_select_0_qs;
        reg_rdata_next[23:16] = inp_prd_cnt_ctrl_0_prescaler_0_qs;
      end

      racl_addr_hit_read[19]: begin
        reg_rdata_next[0] = inp_prd_cnt_ctrl_1_enable_1_qs;
        reg_rdata_next[1] = inp_prd_cnt_ctrl_1_continuous_mode_1_qs;
        reg_rdata_next[2] = inp_prd_cnt_ctrl_1_polarity_1_qs;
        reg_rdata_next[15:8] = inp_prd_cnt_ctrl_1_input_select_1_qs;
        reg_rdata_next[23:16] = inp_prd_cnt_ctrl_1_prescaler_1_qs;
      end

      racl_addr_hit_read[20]: begin
        reg_rdata_next[0] = inp_prd_cnt_ctrl_2_enable_2_qs;
        reg_rdata_next[1] = inp_prd_cnt_ctrl_2_continuous_mode_2_qs;
        reg_rdata_next[2] = inp_prd_cnt_ctrl_2_polarity_2_qs;
        reg_rdata_next[15:8] = inp_prd_cnt_ctrl_2_input_select_2_qs;
        reg_rdata_next[23:16] = inp_prd_cnt_ctrl_2_prescaler_2_qs;
      end

      racl_addr_hit_read[21]: begin
        reg_rdata_next[0] = inp_prd_cnt_ctrl_3_enable_3_qs;
        reg_rdata_next[1] = inp_prd_cnt_ctrl_3_continuous_mode_3_qs;
        reg_rdata_next[2] = inp_prd_cnt_ctrl_3_polarity_3_qs;
        reg_rdata_next[15:8] = inp_prd_cnt_ctrl_3_input_select_3_qs;
        reg_rdata_next[23:16] = inp_prd_cnt_ctrl_3_prescaler_3_qs;
      end

      racl_addr_hit_read[22]: begin
        reg_rdata_next[0] = inp_prd_cnt_ctrl_4_enable_4_qs;
        reg_rdata_next[1] = inp_prd_cnt_ctrl_4_continuous_mode_4_qs;
        reg_rdata_next[2] = inp_prd_cnt_ctrl_4_polarity_4_qs;
        reg_rdata_next[15:8] = inp_prd_cnt_ctrl_4_input_select_4_qs;
        reg_rdata_next[23:16] = inp_prd_cnt_ctrl_4_prescaler_4_qs;
      end

      racl_addr_hit_read[23]: begin
        reg_rdata_next[0] = inp_prd_cnt_ctrl_5_enable_5_qs;
        reg_rdata_next[1] = inp_prd_cnt_ctrl_5_continuous_mode_5_qs;
        reg_rdata_next[2] = inp_prd_cnt_ctrl_5_polarity_5_qs;
        reg_rdata_next[15:8] = inp_prd_cnt_ctrl_5_input_select_5_qs;
        reg_rdata_next[23:16] = inp_prd_cnt_ctrl_5_prescaler_5_qs;
      end

      racl_addr_hit_read[24]: begin
        reg_rdata_next[0] = inp_prd_cnt_ctrl_6_enable_6_qs;
        reg_rdata_next[1] = inp_prd_cnt_ctrl_6_continuous_mode_6_qs;
        reg_rdata_next[2] = inp_prd_cnt_ctrl_6_polarity_6_qs;
        reg_rdata_next[15:8] = inp_prd_cnt_ctrl_6_input_select_6_qs;
        reg_rdata_next[23:16] = inp_prd_cnt_ctrl_6_prescaler_6_qs;
      end

      racl_addr_hit_read[25]: begin
        reg_rdata_next[0] = inp_prd_cnt_ctrl_7_enable_7_qs;
        reg_rdata_next[1] = inp_prd_cnt_ctrl_7_continuous_mode_7_qs;
        reg_rdata_next[2] = inp_prd_cnt_ctrl_7_polarity_7_qs;
        reg_rdata_next[15:8] = inp_prd_cnt_ctrl_7_input_select_7_qs;
        reg_rdata_next[23:16] = inp_prd_cnt_ctrl_7_prescaler_7_qs;
      end

      racl_addr_hit_read[26]: begin
        reg_rdata_next[31:0] = inp_prd_cnt_val_0_qs;
      end

      racl_addr_hit_read[27]: begin
        reg_rdata_next[31:0] = inp_prd_cnt_val_1_qs;
      end

      racl_addr_hit_read[28]: begin
        reg_rdata_next[31:0] = inp_prd_cnt_val_2_qs;
      end

      racl_addr_hit_read[29]: begin
        reg_rdata_next[31:0] = inp_prd_cnt_val_3_qs;
      end

      racl_addr_hit_read[30]: begin
        reg_rdata_next[31:0] = inp_prd_cnt_val_4_qs;
      end

      racl_addr_hit_read[31]: begin
        reg_rdata_next[31:0] = inp_prd_cnt_val_5_qs;
      end

      racl_addr_hit_read[32]: begin
        reg_rdata_next[31:0] = inp_prd_cnt_val_6_qs;
      end

      racl_addr_hit_read[33]: begin
        reg_rdata_next[31:0] = inp_prd_cnt_val_7_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;
  logic unused_policy_sel;
  assign unused_policy_sel = ^racl_policies_i;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
