// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

{
  name:               "soc_proxy"
  human_name:         "SoC Proxy"
  one_line_desc:      "Facilitates the breakout of signals and buses internal to OpenTitan"
  cip_id:             "38" // unique comportable IP identifier defined under KNOWN_CIP_IDS in the regtool
  design_spec:        "../doc"
  dv_doc:             "../doc/dv"
  hw_checklist:       "../doc/checklist"
  sw_checklist:       "/sw/ip/soc_proxy/dif/dif_soc_proxy"

  param_list: [
    { name:     "NumExternalIrqs"
      type:     "int unsigned"
      default:  "32"
      desc:     "Number of external interrupt requests"
      local:    "true"
    }
  ]

  revisions: [
    {
      version:            "1.0.0"
      life_stage:         "L1"
      design_stage:       "D0"
      verification_stage: "N/A" // block-level verification not planned
      notes:              "Verified at the top-level."
    }
  ]

  clocking: [
    { clock: "clk_i", reset: "rst_ni", primary: true }
    { clock: "clk_aon_i", reset: "rst_aon_ni" }
  ]

  bus_interfaces: [
    { protocol: "tlul", direction: "device", name: "core" }
    { protocol: "tlul", direction: "device", name: "ctn" }
  ]

  available_input_list: [
    { name: "soc_gpi", width: 16, desc: "soc general purpose input" }
  ],
  available_output_list: [
    { name: "soc_gpo", width: 16, desc: "soc general purpose output" }
  ],

  alert_list: [
    { name: "fatal_alert_intg"
      desc: "Fatal bus integrity alert"
    }
    { name: "fatal_alert_external_0"
      desc: "Fatal external alert channel 0"
    }
    { name: "fatal_alert_external_1"
      desc: "Fatal external alert channel 1"
    }
    { name: "fatal_alert_external_2"
      desc: "Fatal external alert channel 2"
    }
    { name: "fatal_alert_external_3"
      desc: "Fatal external alert channel 3"
    }
    { name: "fatal_alert_external_4"
      desc: "Fatal external alert channel 4"
    }
    { name: "fatal_alert_external_5"
      desc: "Fatal external alert channel 5"
    }
    { name: "fatal_alert_external_6"
      desc: "Fatal external alert channel 6"
    }
    { name: "fatal_alert_external_7"
      desc: "Fatal external alert channel 7"
    }
    { name: "recov_alert_external_0"
      desc: "Recoverable external alert channel 0"
    }
    { name: "recov_alert_external_1"
      desc: "Recoverable external alert channel 1"
    }
    { name: "recov_alert_external_2"
      desc: "Recoverable external alert channel 2"
    }
    { name: "recov_alert_external_3"
      desc: "Recoverable external alert channel 3"
    }
    { name: "recov_alert_external_4"
      desc: "Recoverable external alert channel 4"
    }
    { name: "recov_alert_external_5"
      desc: "Recoverable external alert channel 5"
    }
    { name: "recov_alert_external_6"
      desc: "Recoverable external alert channel 6"
    }
    { name: "recov_alert_external_7"
      desc: "Recoverable external alert channel 7"
    }
  ]

  wakeup_list: [
    { name: "wkup_internal_req"
      desc: "Internal wakeup request, should be asserted whenever an external alert or IRQ is seen"
    }
    { name: "wkup_external_req"
      desc: "External wakeup request"
    }
  ]

  interrupt_list: [
    { name: "external"
      desc: "External interrupt request"
      width: 32 // keep equal to `NumExternalIrqs`
    }
  ]

  reset_request_list: [
    { name: "rst_req_external"
      desc: "External reset request"
    }
  ]

  inter_signal_list: [
    { struct:  "logic"
      type:    "uni"
      name:    "wkup_internal_req"
      act:     "req"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "wkup_external_req"
      act:     "req"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "rst_req_external"
      act:     "req"
    }
    { struct:  "tl_h2d"
      package: "tlul_pkg"
      type:    "uni"
      name:    "ctn_tl_h2d"
      act:     "req"
      desc:    "TL-UL host port for egress into CTN (request part), synchronous"
    }
    { struct:  "tl_d2h"
      package: "tlul_pkg"
      type:    "uni"
      name:    "ctn_tl_d2h"
      act:     "rcv"
      desc:    "TL-UL host port for egress into CTN (response part), synchronous"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "i2c_lsio_trigger"
      act:     "rcv"
      desc:    "LSIO trigger signal from I2C"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "spi_host_lsio_trigger"
      act:     "rcv"
      desc:    "LSIO trigger signal from SPI Host"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "uart_lsio_trigger"
      act:     "rcv"
      desc:    "LSIO trigger signal from UART"
    }
    { struct:  "logic"
      width:   8
      type:    "uni"
      name:    "soc_lsio_trigger"
      act:     "rcv"
      desc:    "LSIO trigger signal from SoC, synchronous"
    }
    { struct:  "lsio_trigger"
      package: "dma_pkg"
      type:    "uni"
      name:    "dma_lsio_trigger"
      act:     "req"
      desc:    "Collated LSIO trigger signals for DMA"
    }
    { struct:  "soc_alert"
      package: "soc_proxy_pkg"
      type:    "req_rsp"
      name:    "soc_fatal_alert"
      act:     "rsp"
      desc:    "Differential fatal alert from SoC, synchronous"
      width:   8
    }
    { struct:  "soc_alert"
      package: "soc_proxy_pkg"
      type:    "req_rsp"
      name:    "soc_recov_alert"
      act:     "rsp"
      desc:    "Differential recoverable alert from SoC, synchronous"
      width:   8
    }
    { struct:  "logic"
      type:    "uni"
      name:    "soc_wkup_async"
      act:     "rcv"
      desc:    "Wakeup request from SoC, asynchronous, level-encoded"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "soc_rst_req_async"
      act:     "rcv"
      desc:    "Reset request from SoC, asynchronous, level-encoded"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "soc_intr_async"
      act:     "rcv"
      width:   32 // keep equal to `NumExternalIrqs`
      desc:    "Interrupt request from SoC, asynchronous, level-encoded"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "soc_gpi_async"
      act:     "req"
      width:   16 // keep equal to `NumSocGpio`
      desc:    "GPI from SoC, async"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "soc_gpo_async"
      act:     "rcv"
      width:   16 // keep equal to `NumSocGpio`
      desc:    "GPO from SoC, async"
    }
  ]

  regwidth: "32"

  registers: {
    core: [
      // no CSRs defined yet
    ]
    ctn: [
      // no CSRs defined here
    ]
  }
}
