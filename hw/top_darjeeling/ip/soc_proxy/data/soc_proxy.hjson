// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

{
  name:               "soc_proxy"
  human_name:         "SoC Proxy"
  one_line_desc:      "Facilitates the breakout of signals and buses internal to OpenTitan"
  cip_id:             "38" // unique comportable IP identifier defined under KNOWN_CIP_IDS in the regtool
  design_spec:        "../doc"
  dv_doc:             "../doc/dv"
  hw_checklist:       "../doc/checklist"
  sw_checklist:       "/sw/ip/soc_proxy/dif/dif_soc_proxy"

  revisions: [
    {
      version:            "1.0.0"
      life_stage:         "L1"
      design_stage:       "D0"
      verification_stage: "N/A" // block-level verification not planned
      notes:              "Verified at the top-level."
    }
  ]

  clocking: [
    { clock: "clk_i", reset: "rst_ni" }
  ]

  bus_interfaces: [
    { protocol: "tlul", direction: "device", name: "core" }
    { protocol: "tlul", direction: "device", name: "ctn" }
  ]

  alert_list: [
    { name: "fatal_alert_intg"
      desc: "Fatal bus integrity alert"
    }
    // { name: "fatal_alert_external_0"
    //   desc: "Fatal external alert channel 0"
    // }
    // { name: "fatal_alert_external_1"
    //   desc: "Fatal external alert channel 1"
    // }
    // { name: "fatal_alert_external_2"
    //   desc: "Fatal external alert channel 2"
    // }
    // { name: "fatal_alert_external_3"
    //   desc: "Fatal external alert channel 3"
    // }
    // { name: "recov_alert_external_0"
    //   desc: "Recoverable external alert channel 0"
    // }
    // { name: "recov_alert_external_1"
    //   desc: "Recoverable external alert channel 1"
    // }
    // { name: "recov_alert_external_2"
    //   desc: "Recoverable external alert channel 2"
    // }
    // { name: "recov_alert_external_3"
    //   desc: "Recoverable external alert channel 3"
    // }
  ]

  wakeup_list: [
    { name: "wkup_internal_req"
      desc: "Internal wakeup request, should be asserted whenever an external alert or IRQ is seen"
    }
    { name: "wkup_external_req"
      desc: "External wakeup request"
    }
  ]

  interrupt_list: [
    // { name: "external"
    //   desc: "External interrupt request"
    //   width: 4
    // }
  ]

  inter_signal_list: [
    { struct:  "logic"
      type:    "uni"
      name:    "wkup_internal_req"
      act:     "req"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "wkup_external_req"
      act:     "req"
    }
    { struct:  "tl_h2d"
      package: "tlul_pkg"
      type:    "uni"
      name:    "ctn_tl_h2d"
      act:     "req"
      desc:    "TL-UL host port for egress into CTN (request part), synchronous"
    }
    { struct:  "lsio_trigger"
      package: "dma_pkg"
      type:    "uni"
      name:    "dma_lsio_trigger"
      act:     "req"
      desc:    "Collated LSIO trigger signals for DMA"
    }
    { struct:  "tl_d2h"
      package: "tlul_pkg"
      type:    "uni"
      name:    "ctn_tl_d2h"
      act:     "rcv"
      desc:    "TL-UL host port for egress into CTN (response part), synchronous"
    }
    { struct:  "alert_tx"
      package: "prim_alert_pkg"
      type:    "uni"
      name:    "soc_alert_req"
      act:     "rcv"
      desc:    "Differential fatal alert from SoC (input port), synchronous"
      width:   4
    }
    { struct:  "alert_ack"
      package: "prim_alert_pkg"
      type:    "uni"
      name:    "soc_alert_ack"
      act:     "req"
      desc:    "Differential fatal alert from SoC (acknowledge port), synchronous"
      width:   4
    }
    { struct:  "logic"
      type:    "uni"
      name:    "soc_wkup_async"
      act:     "rcv"
      desc:    "Wakeup request from SoC, asynchronous, level-encoded"
    }
    { struct:  "logic"
      type:    "uni"
      name:    "soc_intr_async"
      act:     "rcv"
      width:   4
      desc:    "Interrupt request from SoC, asynchronous, level-encoded"
    }
  ]

  regwidth: "32"

  registers: {
    core: [
      // no CSRs defined yet
    ]
    ctn: [
      // no CSRs defined here
    ]
  }
}
