// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect
// rv_core_ibex.corei
//   -> s1n_48
//     -> sm1_49
//       -> rom_ctrl0.rom
//     -> sm1_50
//       -> rom_ctrl1.rom
//     -> sm1_51
//       -> rv_dm.mem
//     -> sm1_52
//       -> sram_ctrl_main.ram
//     -> sm1_53
//       -> soc_proxy.ctn
// rv_core_ibex.cored
//   -> s1n_54
//     -> sm1_49
//       -> rom_ctrl0.rom
//     -> sm1_55
//       -> rom_ctrl0.regs
//     -> sm1_50
//       -> rom_ctrl1.rom
//     -> sm1_56
//       -> rom_ctrl1.regs
//     -> sm1_51
//       -> rv_dm.mem
//     -> sm1_57
//       -> rv_dm.regs
//     -> sm1_52
//       -> sram_ctrl_main.ram
//     -> sm1_59
//       -> asf_58
//         -> peri
//     -> sm1_60
//       -> aes
//     -> sm1_61
//       -> csrng
//     -> sm1_62
//       -> edn0
//     -> sm1_63
//       -> edn1
//     -> sm1_64
//       -> hmac
//     -> sm1_65
//       -> rv_plic
//     -> sm1_66
//       -> otbn
//     -> sm1_67
//       -> keymgr_dpe
//     -> sm1_68
//       -> kmac
//     -> sm1_69
//       -> sram_ctrl_main.regs
//     -> sm1_70
//       -> rv_core_ibex.cfg
//     -> sm1_71
//       -> sram_ctrl_mbox.ram
//     -> sm1_72
//       -> sram_ctrl_mbox.regs
//     -> sm1_53
//       -> soc_proxy.ctn
//     -> sm1_73
//       -> soc_proxy.core
//     -> sm1_74
//       -> dma
//     -> sm1_75
//       -> mbx0.core
//     -> sm1_76
//       -> mbx1.core
//     -> sm1_77
//       -> mbx2.core
//     -> sm1_78
//       -> mbx3.core
//     -> sm1_79
//       -> mbx4.core
//     -> sm1_80
//       -> mbx5.core
//     -> sm1_81
//       -> mbx6.core
//     -> sm1_82
//       -> mbx_jtag.core
//     -> sm1_83
//       -> mbx_pcie0.core
//     -> sm1_84
//       -> mbx_pcie1.core
// rv_dm.sba
//   -> s1n_85
//     -> sm1_49
//       -> rom_ctrl0.rom
//     -> sm1_55
//       -> rom_ctrl0.regs
//     -> sm1_50
//       -> rom_ctrl1.rom
//     -> sm1_56
//       -> rom_ctrl1.regs
//     -> sm1_51
//       -> rv_dm.mem
//     -> sm1_57
//       -> rv_dm.regs
//     -> sm1_52
//       -> sram_ctrl_main.ram
//     -> sm1_59
//       -> asf_58
//         -> peri
//     -> sm1_60
//       -> aes
//     -> sm1_61
//       -> csrng
//     -> sm1_62
//       -> edn0
//     -> sm1_63
//       -> edn1
//     -> sm1_64
//       -> hmac
//     -> sm1_65
//       -> rv_plic
//     -> sm1_66
//       -> otbn
//     -> sm1_67
//       -> keymgr_dpe
//     -> sm1_68
//       -> kmac
//     -> sm1_69
//       -> sram_ctrl_main.regs
//     -> sm1_70
//       -> rv_core_ibex.cfg
//     -> sm1_71
//       -> sram_ctrl_mbox.ram
//     -> sm1_72
//       -> sram_ctrl_mbox.regs
//     -> sm1_53
//       -> soc_proxy.ctn
//     -> sm1_73
//       -> soc_proxy.core
//     -> sm1_74
//       -> dma
//     -> sm1_75
//       -> mbx0.core
//     -> sm1_76
//       -> mbx1.core
//     -> sm1_77
//       -> mbx2.core
//     -> sm1_78
//       -> mbx3.core
//     -> sm1_79
//       -> mbx4.core
//     -> sm1_80
//       -> mbx5.core
//     -> sm1_81
//       -> mbx6.core
//     -> sm1_82
//       -> mbx_jtag.core
//     -> sm1_83
//       -> mbx_pcie0.core
//     -> sm1_84
//       -> mbx_pcie1.core
// dma.host
//   -> s1n_86
//     -> sm1_52
//       -> sram_ctrl_main.ram
//     -> sm1_71
//       -> sram_ctrl_mbox.ram
//     -> sm1_60
//       -> aes
//     -> sm1_64
//       -> hmac
//     -> sm1_66
//       -> otbn
//     -> sm1_67
//       -> keymgr_dpe
//     -> sm1_68
//       -> kmac
//     -> sm1_53
//       -> soc_proxy.ctn
//     -> sm1_59
//       -> asf_58
//         -> peri
// mbx0.sram
//   -> sm1_71
//     -> sram_ctrl_mbox.ram
// mbx1.sram
//   -> sm1_71
//     -> sram_ctrl_mbox.ram
// mbx2.sram
//   -> sm1_71
//     -> sram_ctrl_mbox.ram
// mbx3.sram
//   -> sm1_71
//     -> sram_ctrl_mbox.ram
// mbx4.sram
//   -> sm1_71
//     -> sram_ctrl_mbox.ram
// mbx5.sram
//   -> sm1_71
//     -> sram_ctrl_mbox.ram
// mbx6.sram
//   -> sm1_71
//     -> sram_ctrl_mbox.ram
// mbx_jtag.sram
//   -> sm1_71
//     -> sram_ctrl_mbox.ram
// mbx_pcie0.sram
//   -> sm1_71
//     -> sram_ctrl_mbox.ram
// mbx_pcie1.sram
//   -> sm1_71
//     -> sram_ctrl_mbox.ram

module xbar_main (
  input clk_main_i,
  input clk_fixed_i,
  input clk_usb_i,
  input rst_main_ni,
  input rst_fixed_ni,
  input rst_usb_ni,

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_rv_core_ibex__corei_i,
  output tlul_pkg::tl_d2h_t tl_rv_core_ibex__corei_o,
  input  tlul_pkg::tl_h2d_t tl_rv_core_ibex__cored_i,
  output tlul_pkg::tl_d2h_t tl_rv_core_ibex__cored_o,
  input  tlul_pkg::tl_h2d_t tl_rv_dm__sba_i,
  output tlul_pkg::tl_d2h_t tl_rv_dm__sba_o,
  input  tlul_pkg::tl_h2d_t tl_dma__host_i,
  output tlul_pkg::tl_d2h_t tl_dma__host_o,
  input  tlul_pkg::tl_h2d_t tl_mbx0__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx0__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx1__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx1__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx2__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx2__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx3__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx3__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx4__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx4__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx5__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx5__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx6__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx6__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx_jtag__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx_jtag__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx_pcie0__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx_pcie0__sram_o,
  input  tlul_pkg::tl_h2d_t tl_mbx_pcie1__sram_i,
  output tlul_pkg::tl_d2h_t tl_mbx_pcie1__sram_o,

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_rv_dm__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rv_dm__regs_i,
  output tlul_pkg::tl_h2d_t tl_rv_dm__mem_o,
  input  tlul_pkg::tl_d2h_t tl_rv_dm__mem_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl0__rom_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl0__rom_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl0__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl0__regs_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl1__rom_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl1__rom_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl1__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl1__regs_i,
  output tlul_pkg::tl_h2d_t tl_peri_o,
  input  tlul_pkg::tl_d2h_t tl_peri_i,
  output tlul_pkg::tl_h2d_t tl_soc_proxy__core_o,
  input  tlul_pkg::tl_d2h_t tl_soc_proxy__core_i,
  output tlul_pkg::tl_h2d_t tl_soc_proxy__ctn_o,
  input  tlul_pkg::tl_d2h_t tl_soc_proxy__ctn_i,
  output tlul_pkg::tl_h2d_t tl_hmac_o,
  input  tlul_pkg::tl_d2h_t tl_hmac_i,
  output tlul_pkg::tl_h2d_t tl_kmac_o,
  input  tlul_pkg::tl_d2h_t tl_kmac_i,
  output tlul_pkg::tl_h2d_t tl_aes_o,
  input  tlul_pkg::tl_d2h_t tl_aes_i,
  output tlul_pkg::tl_h2d_t tl_csrng_o,
  input  tlul_pkg::tl_d2h_t tl_csrng_i,
  output tlul_pkg::tl_h2d_t tl_edn0_o,
  input  tlul_pkg::tl_d2h_t tl_edn0_i,
  output tlul_pkg::tl_h2d_t tl_edn1_o,
  input  tlul_pkg::tl_d2h_t tl_edn1_i,
  output tlul_pkg::tl_h2d_t tl_rv_plic_o,
  input  tlul_pkg::tl_d2h_t tl_rv_plic_i,
  output tlul_pkg::tl_h2d_t tl_otbn_o,
  input  tlul_pkg::tl_d2h_t tl_otbn_i,
  output tlul_pkg::tl_h2d_t tl_keymgr_dpe_o,
  input  tlul_pkg::tl_d2h_t tl_keymgr_dpe_i,
  output tlul_pkg::tl_h2d_t tl_rv_core_ibex__cfg_o,
  input  tlul_pkg::tl_d2h_t tl_rv_core_ibex__cfg_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_main__regs_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_main__regs_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_main__ram_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_main__ram_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_mbox__regs_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_mbox__regs_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_mbox__ram_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_mbox__ram_i,
  output tlul_pkg::tl_h2d_t tl_dma_o,
  input  tlul_pkg::tl_d2h_t tl_dma_i,
  output tlul_pkg::tl_h2d_t tl_mbx0__core_o,
  input  tlul_pkg::tl_d2h_t tl_mbx0__core_i,
  output tlul_pkg::tl_h2d_t tl_mbx1__core_o,
  input  tlul_pkg::tl_d2h_t tl_mbx1__core_i,
  output tlul_pkg::tl_h2d_t tl_mbx2__core_o,
  input  tlul_pkg::tl_d2h_t tl_mbx2__core_i,
  output tlul_pkg::tl_h2d_t tl_mbx3__core_o,
  input  tlul_pkg::tl_d2h_t tl_mbx3__core_i,
  output tlul_pkg::tl_h2d_t tl_mbx4__core_o,
  input  tlul_pkg::tl_d2h_t tl_mbx4__core_i,
  output tlul_pkg::tl_h2d_t tl_mbx5__core_o,
  input  tlul_pkg::tl_d2h_t tl_mbx5__core_i,
  output tlul_pkg::tl_h2d_t tl_mbx6__core_o,
  input  tlul_pkg::tl_d2h_t tl_mbx6__core_i,
  output tlul_pkg::tl_h2d_t tl_mbx_jtag__core_o,
  input  tlul_pkg::tl_d2h_t tl_mbx_jtag__core_i,
  output tlul_pkg::tl_h2d_t tl_mbx_pcie0__core_o,
  input  tlul_pkg::tl_d2h_t tl_mbx_pcie0__core_i,
  output tlul_pkg::tl_h2d_t tl_mbx_pcie1__core_o,
  input  tlul_pkg::tl_d2h_t tl_mbx_pcie1__core_i,

  input prim_mubi_pkg::mubi4_t scanmode_i
);

  import tlul_pkg::*;
  import tl_main_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
  logic unused_scanmode;
  assign unused_scanmode = ^scanmode_i;

  tl_h2d_t tl_s1n_48_us_h2d ;
  tl_d2h_t tl_s1n_48_us_d2h ;


  tl_h2d_t tl_s1n_48_ds_h2d [5];
  tl_d2h_t tl_s1n_48_ds_d2h [5];

  // Create steering signal
  logic [2:0] dev_sel_s1n_48;


  tl_h2d_t tl_sm1_49_us_h2d [3];
  tl_d2h_t tl_sm1_49_us_d2h [3];

  tl_h2d_t tl_sm1_49_ds_h2d ;
  tl_d2h_t tl_sm1_49_ds_d2h ;


  tl_h2d_t tl_sm1_50_us_h2d [3];
  tl_d2h_t tl_sm1_50_us_d2h [3];

  tl_h2d_t tl_sm1_50_ds_h2d ;
  tl_d2h_t tl_sm1_50_ds_d2h ;


  tl_h2d_t tl_sm1_51_us_h2d [3];
  tl_d2h_t tl_sm1_51_us_d2h [3];

  tl_h2d_t tl_sm1_51_ds_h2d ;
  tl_d2h_t tl_sm1_51_ds_d2h ;


  tl_h2d_t tl_sm1_52_us_h2d [4];
  tl_d2h_t tl_sm1_52_us_d2h [4];

  tl_h2d_t tl_sm1_52_ds_h2d ;
  tl_d2h_t tl_sm1_52_ds_d2h ;


  tl_h2d_t tl_sm1_53_us_h2d [4];
  tl_d2h_t tl_sm1_53_us_d2h [4];

  tl_h2d_t tl_sm1_53_ds_h2d ;
  tl_d2h_t tl_sm1_53_ds_d2h ;

  tl_h2d_t tl_s1n_54_us_h2d ;
  tl_d2h_t tl_s1n_54_us_d2h ;


  tl_h2d_t tl_s1n_54_ds_h2d [34];
  tl_d2h_t tl_s1n_54_ds_d2h [34];

  // Create steering signal
  logic [5:0] dev_sel_s1n_54;


  tl_h2d_t tl_sm1_55_us_h2d [2];
  tl_d2h_t tl_sm1_55_us_d2h [2];

  tl_h2d_t tl_sm1_55_ds_h2d ;
  tl_d2h_t tl_sm1_55_ds_d2h ;


  tl_h2d_t tl_sm1_56_us_h2d [2];
  tl_d2h_t tl_sm1_56_us_d2h [2];

  tl_h2d_t tl_sm1_56_ds_h2d ;
  tl_d2h_t tl_sm1_56_ds_d2h ;


  tl_h2d_t tl_sm1_57_us_h2d [2];
  tl_d2h_t tl_sm1_57_us_d2h [2];

  tl_h2d_t tl_sm1_57_ds_h2d ;
  tl_d2h_t tl_sm1_57_ds_d2h ;

  tl_h2d_t tl_asf_58_us_h2d ;
  tl_d2h_t tl_asf_58_us_d2h ;
  tl_h2d_t tl_asf_58_ds_h2d ;
  tl_d2h_t tl_asf_58_ds_d2h ;


  tl_h2d_t tl_sm1_59_us_h2d [3];
  tl_d2h_t tl_sm1_59_us_d2h [3];

  tl_h2d_t tl_sm1_59_ds_h2d ;
  tl_d2h_t tl_sm1_59_ds_d2h ;


  tl_h2d_t tl_sm1_60_us_h2d [3];
  tl_d2h_t tl_sm1_60_us_d2h [3];

  tl_h2d_t tl_sm1_60_ds_h2d ;
  tl_d2h_t tl_sm1_60_ds_d2h ;


  tl_h2d_t tl_sm1_61_us_h2d [2];
  tl_d2h_t tl_sm1_61_us_d2h [2];

  tl_h2d_t tl_sm1_61_ds_h2d ;
  tl_d2h_t tl_sm1_61_ds_d2h ;


  tl_h2d_t tl_sm1_62_us_h2d [2];
  tl_d2h_t tl_sm1_62_us_d2h [2];

  tl_h2d_t tl_sm1_62_ds_h2d ;
  tl_d2h_t tl_sm1_62_ds_d2h ;


  tl_h2d_t tl_sm1_63_us_h2d [2];
  tl_d2h_t tl_sm1_63_us_d2h [2];

  tl_h2d_t tl_sm1_63_ds_h2d ;
  tl_d2h_t tl_sm1_63_ds_d2h ;


  tl_h2d_t tl_sm1_64_us_h2d [3];
  tl_d2h_t tl_sm1_64_us_d2h [3];

  tl_h2d_t tl_sm1_64_ds_h2d ;
  tl_d2h_t tl_sm1_64_ds_d2h ;


  tl_h2d_t tl_sm1_65_us_h2d [2];
  tl_d2h_t tl_sm1_65_us_d2h [2];

  tl_h2d_t tl_sm1_65_ds_h2d ;
  tl_d2h_t tl_sm1_65_ds_d2h ;


  tl_h2d_t tl_sm1_66_us_h2d [3];
  tl_d2h_t tl_sm1_66_us_d2h [3];

  tl_h2d_t tl_sm1_66_ds_h2d ;
  tl_d2h_t tl_sm1_66_ds_d2h ;


  tl_h2d_t tl_sm1_67_us_h2d [3];
  tl_d2h_t tl_sm1_67_us_d2h [3];

  tl_h2d_t tl_sm1_67_ds_h2d ;
  tl_d2h_t tl_sm1_67_ds_d2h ;


  tl_h2d_t tl_sm1_68_us_h2d [3];
  tl_d2h_t tl_sm1_68_us_d2h [3];

  tl_h2d_t tl_sm1_68_ds_h2d ;
  tl_d2h_t tl_sm1_68_ds_d2h ;


  tl_h2d_t tl_sm1_69_us_h2d [2];
  tl_d2h_t tl_sm1_69_us_d2h [2];

  tl_h2d_t tl_sm1_69_ds_h2d ;
  tl_d2h_t tl_sm1_69_ds_d2h ;


  tl_h2d_t tl_sm1_70_us_h2d [2];
  tl_d2h_t tl_sm1_70_us_d2h [2];

  tl_h2d_t tl_sm1_70_ds_h2d ;
  tl_d2h_t tl_sm1_70_ds_d2h ;


  tl_h2d_t tl_sm1_71_us_h2d [13];
  tl_d2h_t tl_sm1_71_us_d2h [13];

  tl_h2d_t tl_sm1_71_ds_h2d ;
  tl_d2h_t tl_sm1_71_ds_d2h ;


  tl_h2d_t tl_sm1_72_us_h2d [2];
  tl_d2h_t tl_sm1_72_us_d2h [2];

  tl_h2d_t tl_sm1_72_ds_h2d ;
  tl_d2h_t tl_sm1_72_ds_d2h ;


  tl_h2d_t tl_sm1_73_us_h2d [2];
  tl_d2h_t tl_sm1_73_us_d2h [2];

  tl_h2d_t tl_sm1_73_ds_h2d ;
  tl_d2h_t tl_sm1_73_ds_d2h ;


  tl_h2d_t tl_sm1_74_us_h2d [2];
  tl_d2h_t tl_sm1_74_us_d2h [2];

  tl_h2d_t tl_sm1_74_ds_h2d ;
  tl_d2h_t tl_sm1_74_ds_d2h ;


  tl_h2d_t tl_sm1_75_us_h2d [2];
  tl_d2h_t tl_sm1_75_us_d2h [2];

  tl_h2d_t tl_sm1_75_ds_h2d ;
  tl_d2h_t tl_sm1_75_ds_d2h ;


  tl_h2d_t tl_sm1_76_us_h2d [2];
  tl_d2h_t tl_sm1_76_us_d2h [2];

  tl_h2d_t tl_sm1_76_ds_h2d ;
  tl_d2h_t tl_sm1_76_ds_d2h ;


  tl_h2d_t tl_sm1_77_us_h2d [2];
  tl_d2h_t tl_sm1_77_us_d2h [2];

  tl_h2d_t tl_sm1_77_ds_h2d ;
  tl_d2h_t tl_sm1_77_ds_d2h ;


  tl_h2d_t tl_sm1_78_us_h2d [2];
  tl_d2h_t tl_sm1_78_us_d2h [2];

  tl_h2d_t tl_sm1_78_ds_h2d ;
  tl_d2h_t tl_sm1_78_ds_d2h ;


  tl_h2d_t tl_sm1_79_us_h2d [2];
  tl_d2h_t tl_sm1_79_us_d2h [2];

  tl_h2d_t tl_sm1_79_ds_h2d ;
  tl_d2h_t tl_sm1_79_ds_d2h ;


  tl_h2d_t tl_sm1_80_us_h2d [2];
  tl_d2h_t tl_sm1_80_us_d2h [2];

  tl_h2d_t tl_sm1_80_ds_h2d ;
  tl_d2h_t tl_sm1_80_ds_d2h ;


  tl_h2d_t tl_sm1_81_us_h2d [2];
  tl_d2h_t tl_sm1_81_us_d2h [2];

  tl_h2d_t tl_sm1_81_ds_h2d ;
  tl_d2h_t tl_sm1_81_ds_d2h ;


  tl_h2d_t tl_sm1_82_us_h2d [2];
  tl_d2h_t tl_sm1_82_us_d2h [2];

  tl_h2d_t tl_sm1_82_ds_h2d ;
  tl_d2h_t tl_sm1_82_ds_d2h ;


  tl_h2d_t tl_sm1_83_us_h2d [2];
  tl_d2h_t tl_sm1_83_us_d2h [2];

  tl_h2d_t tl_sm1_83_ds_h2d ;
  tl_d2h_t tl_sm1_83_ds_d2h ;


  tl_h2d_t tl_sm1_84_us_h2d [2];
  tl_d2h_t tl_sm1_84_us_d2h [2];

  tl_h2d_t tl_sm1_84_ds_h2d ;
  tl_d2h_t tl_sm1_84_ds_d2h ;

  tl_h2d_t tl_s1n_85_us_h2d ;
  tl_d2h_t tl_s1n_85_us_d2h ;


  tl_h2d_t tl_s1n_85_ds_h2d [34];
  tl_d2h_t tl_s1n_85_ds_d2h [34];

  // Create steering signal
  logic [5:0] dev_sel_s1n_85;

  tl_h2d_t tl_s1n_86_us_h2d ;
  tl_d2h_t tl_s1n_86_us_d2h ;


  tl_h2d_t tl_s1n_86_ds_h2d [9];
  tl_d2h_t tl_s1n_86_ds_d2h [9];

  // Create steering signal
  logic [3:0] dev_sel_s1n_86;



  assign tl_sm1_49_us_h2d[0] = tl_s1n_48_ds_h2d[0];
  assign tl_s1n_48_ds_d2h[0] = tl_sm1_49_us_d2h[0];

  assign tl_sm1_50_us_h2d[0] = tl_s1n_48_ds_h2d[1];
  assign tl_s1n_48_ds_d2h[1] = tl_sm1_50_us_d2h[0];

  assign tl_sm1_51_us_h2d[0] = tl_s1n_48_ds_h2d[2];
  assign tl_s1n_48_ds_d2h[2] = tl_sm1_51_us_d2h[0];

  assign tl_sm1_52_us_h2d[0] = tl_s1n_48_ds_h2d[3];
  assign tl_s1n_48_ds_d2h[3] = tl_sm1_52_us_d2h[0];

  assign tl_sm1_53_us_h2d[0] = tl_s1n_48_ds_h2d[4];
  assign tl_s1n_48_ds_d2h[4] = tl_sm1_53_us_d2h[0];

  assign tl_sm1_49_us_h2d[1] = tl_s1n_54_ds_h2d[0];
  assign tl_s1n_54_ds_d2h[0] = tl_sm1_49_us_d2h[1];

  assign tl_sm1_55_us_h2d[0] = tl_s1n_54_ds_h2d[1];
  assign tl_s1n_54_ds_d2h[1] = tl_sm1_55_us_d2h[0];

  assign tl_sm1_50_us_h2d[1] = tl_s1n_54_ds_h2d[2];
  assign tl_s1n_54_ds_d2h[2] = tl_sm1_50_us_d2h[1];

  assign tl_sm1_56_us_h2d[0] = tl_s1n_54_ds_h2d[3];
  assign tl_s1n_54_ds_d2h[3] = tl_sm1_56_us_d2h[0];

  assign tl_sm1_51_us_h2d[1] = tl_s1n_54_ds_h2d[4];
  assign tl_s1n_54_ds_d2h[4] = tl_sm1_51_us_d2h[1];

  assign tl_sm1_57_us_h2d[0] = tl_s1n_54_ds_h2d[5];
  assign tl_s1n_54_ds_d2h[5] = tl_sm1_57_us_d2h[0];

  assign tl_sm1_52_us_h2d[1] = tl_s1n_54_ds_h2d[6];
  assign tl_s1n_54_ds_d2h[6] = tl_sm1_52_us_d2h[1];

  assign tl_sm1_59_us_h2d[0] = tl_s1n_54_ds_h2d[7];
  assign tl_s1n_54_ds_d2h[7] = tl_sm1_59_us_d2h[0];

  assign tl_sm1_60_us_h2d[0] = tl_s1n_54_ds_h2d[8];
  assign tl_s1n_54_ds_d2h[8] = tl_sm1_60_us_d2h[0];

  assign tl_sm1_61_us_h2d[0] = tl_s1n_54_ds_h2d[9];
  assign tl_s1n_54_ds_d2h[9] = tl_sm1_61_us_d2h[0];

  assign tl_sm1_62_us_h2d[0] = tl_s1n_54_ds_h2d[10];
  assign tl_s1n_54_ds_d2h[10] = tl_sm1_62_us_d2h[0];

  assign tl_sm1_63_us_h2d[0] = tl_s1n_54_ds_h2d[11];
  assign tl_s1n_54_ds_d2h[11] = tl_sm1_63_us_d2h[0];

  assign tl_sm1_64_us_h2d[0] = tl_s1n_54_ds_h2d[12];
  assign tl_s1n_54_ds_d2h[12] = tl_sm1_64_us_d2h[0];

  assign tl_sm1_65_us_h2d[0] = tl_s1n_54_ds_h2d[13];
  assign tl_s1n_54_ds_d2h[13] = tl_sm1_65_us_d2h[0];

  assign tl_sm1_66_us_h2d[0] = tl_s1n_54_ds_h2d[14];
  assign tl_s1n_54_ds_d2h[14] = tl_sm1_66_us_d2h[0];

  assign tl_sm1_67_us_h2d[0] = tl_s1n_54_ds_h2d[15];
  assign tl_s1n_54_ds_d2h[15] = tl_sm1_67_us_d2h[0];

  assign tl_sm1_68_us_h2d[0] = tl_s1n_54_ds_h2d[16];
  assign tl_s1n_54_ds_d2h[16] = tl_sm1_68_us_d2h[0];

  assign tl_sm1_69_us_h2d[0] = tl_s1n_54_ds_h2d[17];
  assign tl_s1n_54_ds_d2h[17] = tl_sm1_69_us_d2h[0];

  assign tl_sm1_70_us_h2d[0] = tl_s1n_54_ds_h2d[18];
  assign tl_s1n_54_ds_d2h[18] = tl_sm1_70_us_d2h[0];

  assign tl_sm1_71_us_h2d[0] = tl_s1n_54_ds_h2d[19];
  assign tl_s1n_54_ds_d2h[19] = tl_sm1_71_us_d2h[0];

  assign tl_sm1_72_us_h2d[0] = tl_s1n_54_ds_h2d[20];
  assign tl_s1n_54_ds_d2h[20] = tl_sm1_72_us_d2h[0];

  assign tl_sm1_53_us_h2d[1] = tl_s1n_54_ds_h2d[21];
  assign tl_s1n_54_ds_d2h[21] = tl_sm1_53_us_d2h[1];

  assign tl_sm1_73_us_h2d[0] = tl_s1n_54_ds_h2d[22];
  assign tl_s1n_54_ds_d2h[22] = tl_sm1_73_us_d2h[0];

  assign tl_sm1_74_us_h2d[0] = tl_s1n_54_ds_h2d[23];
  assign tl_s1n_54_ds_d2h[23] = tl_sm1_74_us_d2h[0];

  assign tl_sm1_75_us_h2d[0] = tl_s1n_54_ds_h2d[24];
  assign tl_s1n_54_ds_d2h[24] = tl_sm1_75_us_d2h[0];

  assign tl_sm1_76_us_h2d[0] = tl_s1n_54_ds_h2d[25];
  assign tl_s1n_54_ds_d2h[25] = tl_sm1_76_us_d2h[0];

  assign tl_sm1_77_us_h2d[0] = tl_s1n_54_ds_h2d[26];
  assign tl_s1n_54_ds_d2h[26] = tl_sm1_77_us_d2h[0];

  assign tl_sm1_78_us_h2d[0] = tl_s1n_54_ds_h2d[27];
  assign tl_s1n_54_ds_d2h[27] = tl_sm1_78_us_d2h[0];

  assign tl_sm1_79_us_h2d[0] = tl_s1n_54_ds_h2d[28];
  assign tl_s1n_54_ds_d2h[28] = tl_sm1_79_us_d2h[0];

  assign tl_sm1_80_us_h2d[0] = tl_s1n_54_ds_h2d[29];
  assign tl_s1n_54_ds_d2h[29] = tl_sm1_80_us_d2h[0];

  assign tl_sm1_81_us_h2d[0] = tl_s1n_54_ds_h2d[30];
  assign tl_s1n_54_ds_d2h[30] = tl_sm1_81_us_d2h[0];

  assign tl_sm1_82_us_h2d[0] = tl_s1n_54_ds_h2d[31];
  assign tl_s1n_54_ds_d2h[31] = tl_sm1_82_us_d2h[0];

  assign tl_sm1_83_us_h2d[0] = tl_s1n_54_ds_h2d[32];
  assign tl_s1n_54_ds_d2h[32] = tl_sm1_83_us_d2h[0];

  assign tl_sm1_84_us_h2d[0] = tl_s1n_54_ds_h2d[33];
  assign tl_s1n_54_ds_d2h[33] = tl_sm1_84_us_d2h[0];

  assign tl_sm1_49_us_h2d[2] = tl_s1n_85_ds_h2d[0];
  assign tl_s1n_85_ds_d2h[0] = tl_sm1_49_us_d2h[2];

  assign tl_sm1_55_us_h2d[1] = tl_s1n_85_ds_h2d[1];
  assign tl_s1n_85_ds_d2h[1] = tl_sm1_55_us_d2h[1];

  assign tl_sm1_50_us_h2d[2] = tl_s1n_85_ds_h2d[2];
  assign tl_s1n_85_ds_d2h[2] = tl_sm1_50_us_d2h[2];

  assign tl_sm1_56_us_h2d[1] = tl_s1n_85_ds_h2d[3];
  assign tl_s1n_85_ds_d2h[3] = tl_sm1_56_us_d2h[1];

  assign tl_sm1_51_us_h2d[2] = tl_s1n_85_ds_h2d[4];
  assign tl_s1n_85_ds_d2h[4] = tl_sm1_51_us_d2h[2];

  assign tl_sm1_57_us_h2d[1] = tl_s1n_85_ds_h2d[5];
  assign tl_s1n_85_ds_d2h[5] = tl_sm1_57_us_d2h[1];

  assign tl_sm1_52_us_h2d[2] = tl_s1n_85_ds_h2d[6];
  assign tl_s1n_85_ds_d2h[6] = tl_sm1_52_us_d2h[2];

  assign tl_sm1_59_us_h2d[1] = tl_s1n_85_ds_h2d[7];
  assign tl_s1n_85_ds_d2h[7] = tl_sm1_59_us_d2h[1];

  assign tl_sm1_60_us_h2d[1] = tl_s1n_85_ds_h2d[8];
  assign tl_s1n_85_ds_d2h[8] = tl_sm1_60_us_d2h[1];

  assign tl_sm1_61_us_h2d[1] = tl_s1n_85_ds_h2d[9];
  assign tl_s1n_85_ds_d2h[9] = tl_sm1_61_us_d2h[1];

  assign tl_sm1_62_us_h2d[1] = tl_s1n_85_ds_h2d[10];
  assign tl_s1n_85_ds_d2h[10] = tl_sm1_62_us_d2h[1];

  assign tl_sm1_63_us_h2d[1] = tl_s1n_85_ds_h2d[11];
  assign tl_s1n_85_ds_d2h[11] = tl_sm1_63_us_d2h[1];

  assign tl_sm1_64_us_h2d[1] = tl_s1n_85_ds_h2d[12];
  assign tl_s1n_85_ds_d2h[12] = tl_sm1_64_us_d2h[1];

  assign tl_sm1_65_us_h2d[1] = tl_s1n_85_ds_h2d[13];
  assign tl_s1n_85_ds_d2h[13] = tl_sm1_65_us_d2h[1];

  assign tl_sm1_66_us_h2d[1] = tl_s1n_85_ds_h2d[14];
  assign tl_s1n_85_ds_d2h[14] = tl_sm1_66_us_d2h[1];

  assign tl_sm1_67_us_h2d[1] = tl_s1n_85_ds_h2d[15];
  assign tl_s1n_85_ds_d2h[15] = tl_sm1_67_us_d2h[1];

  assign tl_sm1_68_us_h2d[1] = tl_s1n_85_ds_h2d[16];
  assign tl_s1n_85_ds_d2h[16] = tl_sm1_68_us_d2h[1];

  assign tl_sm1_69_us_h2d[1] = tl_s1n_85_ds_h2d[17];
  assign tl_s1n_85_ds_d2h[17] = tl_sm1_69_us_d2h[1];

  assign tl_sm1_70_us_h2d[1] = tl_s1n_85_ds_h2d[18];
  assign tl_s1n_85_ds_d2h[18] = tl_sm1_70_us_d2h[1];

  assign tl_sm1_71_us_h2d[1] = tl_s1n_85_ds_h2d[19];
  assign tl_s1n_85_ds_d2h[19] = tl_sm1_71_us_d2h[1];

  assign tl_sm1_72_us_h2d[1] = tl_s1n_85_ds_h2d[20];
  assign tl_s1n_85_ds_d2h[20] = tl_sm1_72_us_d2h[1];

  assign tl_sm1_53_us_h2d[2] = tl_s1n_85_ds_h2d[21];
  assign tl_s1n_85_ds_d2h[21] = tl_sm1_53_us_d2h[2];

  assign tl_sm1_73_us_h2d[1] = tl_s1n_85_ds_h2d[22];
  assign tl_s1n_85_ds_d2h[22] = tl_sm1_73_us_d2h[1];

  assign tl_sm1_74_us_h2d[1] = tl_s1n_85_ds_h2d[23];
  assign tl_s1n_85_ds_d2h[23] = tl_sm1_74_us_d2h[1];

  assign tl_sm1_75_us_h2d[1] = tl_s1n_85_ds_h2d[24];
  assign tl_s1n_85_ds_d2h[24] = tl_sm1_75_us_d2h[1];

  assign tl_sm1_76_us_h2d[1] = tl_s1n_85_ds_h2d[25];
  assign tl_s1n_85_ds_d2h[25] = tl_sm1_76_us_d2h[1];

  assign tl_sm1_77_us_h2d[1] = tl_s1n_85_ds_h2d[26];
  assign tl_s1n_85_ds_d2h[26] = tl_sm1_77_us_d2h[1];

  assign tl_sm1_78_us_h2d[1] = tl_s1n_85_ds_h2d[27];
  assign tl_s1n_85_ds_d2h[27] = tl_sm1_78_us_d2h[1];

  assign tl_sm1_79_us_h2d[1] = tl_s1n_85_ds_h2d[28];
  assign tl_s1n_85_ds_d2h[28] = tl_sm1_79_us_d2h[1];

  assign tl_sm1_80_us_h2d[1] = tl_s1n_85_ds_h2d[29];
  assign tl_s1n_85_ds_d2h[29] = tl_sm1_80_us_d2h[1];

  assign tl_sm1_81_us_h2d[1] = tl_s1n_85_ds_h2d[30];
  assign tl_s1n_85_ds_d2h[30] = tl_sm1_81_us_d2h[1];

  assign tl_sm1_82_us_h2d[1] = tl_s1n_85_ds_h2d[31];
  assign tl_s1n_85_ds_d2h[31] = tl_sm1_82_us_d2h[1];

  assign tl_sm1_83_us_h2d[1] = tl_s1n_85_ds_h2d[32];
  assign tl_s1n_85_ds_d2h[32] = tl_sm1_83_us_d2h[1];

  assign tl_sm1_84_us_h2d[1] = tl_s1n_85_ds_h2d[33];
  assign tl_s1n_85_ds_d2h[33] = tl_sm1_84_us_d2h[1];

  assign tl_sm1_52_us_h2d[3] = tl_s1n_86_ds_h2d[0];
  assign tl_s1n_86_ds_d2h[0] = tl_sm1_52_us_d2h[3];

  assign tl_sm1_71_us_h2d[2] = tl_s1n_86_ds_h2d[1];
  assign tl_s1n_86_ds_d2h[1] = tl_sm1_71_us_d2h[2];

  assign tl_sm1_60_us_h2d[2] = tl_s1n_86_ds_h2d[2];
  assign tl_s1n_86_ds_d2h[2] = tl_sm1_60_us_d2h[2];

  assign tl_sm1_64_us_h2d[2] = tl_s1n_86_ds_h2d[3];
  assign tl_s1n_86_ds_d2h[3] = tl_sm1_64_us_d2h[2];

  assign tl_sm1_66_us_h2d[2] = tl_s1n_86_ds_h2d[4];
  assign tl_s1n_86_ds_d2h[4] = tl_sm1_66_us_d2h[2];

  assign tl_sm1_67_us_h2d[2] = tl_s1n_86_ds_h2d[5];
  assign tl_s1n_86_ds_d2h[5] = tl_sm1_67_us_d2h[2];

  assign tl_sm1_68_us_h2d[2] = tl_s1n_86_ds_h2d[6];
  assign tl_s1n_86_ds_d2h[6] = tl_sm1_68_us_d2h[2];

  assign tl_sm1_53_us_h2d[3] = tl_s1n_86_ds_h2d[7];
  assign tl_s1n_86_ds_d2h[7] = tl_sm1_53_us_d2h[3];

  assign tl_sm1_59_us_h2d[2] = tl_s1n_86_ds_h2d[8];
  assign tl_s1n_86_ds_d2h[8] = tl_sm1_59_us_d2h[2];

  assign tl_sm1_71_us_h2d[3] = tl_mbx0__sram_i;
  assign tl_mbx0__sram_o = tl_sm1_71_us_d2h[3];

  assign tl_sm1_71_us_h2d[4] = tl_mbx1__sram_i;
  assign tl_mbx1__sram_o = tl_sm1_71_us_d2h[4];

  assign tl_sm1_71_us_h2d[5] = tl_mbx2__sram_i;
  assign tl_mbx2__sram_o = tl_sm1_71_us_d2h[5];

  assign tl_sm1_71_us_h2d[6] = tl_mbx3__sram_i;
  assign tl_mbx3__sram_o = tl_sm1_71_us_d2h[6];

  assign tl_sm1_71_us_h2d[7] = tl_mbx4__sram_i;
  assign tl_mbx4__sram_o = tl_sm1_71_us_d2h[7];

  assign tl_sm1_71_us_h2d[8] = tl_mbx5__sram_i;
  assign tl_mbx5__sram_o = tl_sm1_71_us_d2h[8];

  assign tl_sm1_71_us_h2d[9] = tl_mbx6__sram_i;
  assign tl_mbx6__sram_o = tl_sm1_71_us_d2h[9];

  assign tl_sm1_71_us_h2d[10] = tl_mbx_jtag__sram_i;
  assign tl_mbx_jtag__sram_o = tl_sm1_71_us_d2h[10];

  assign tl_sm1_71_us_h2d[11] = tl_mbx_pcie0__sram_i;
  assign tl_mbx_pcie0__sram_o = tl_sm1_71_us_d2h[11];

  assign tl_sm1_71_us_h2d[12] = tl_mbx_pcie1__sram_i;
  assign tl_mbx_pcie1__sram_o = tl_sm1_71_us_d2h[12];

  assign tl_s1n_48_us_h2d = tl_rv_core_ibex__corei_i;
  assign tl_rv_core_ibex__corei_o = tl_s1n_48_us_d2h;

  assign tl_rom_ctrl0__rom_o = tl_sm1_49_ds_h2d;
  assign tl_sm1_49_ds_d2h = tl_rom_ctrl0__rom_i;

  assign tl_rom_ctrl1__rom_o = tl_sm1_50_ds_h2d;
  assign tl_sm1_50_ds_d2h = tl_rom_ctrl1__rom_i;

  assign tl_rv_dm__mem_o = tl_sm1_51_ds_h2d;
  assign tl_sm1_51_ds_d2h = tl_rv_dm__mem_i;

  assign tl_sram_ctrl_main__ram_o = tl_sm1_52_ds_h2d;
  assign tl_sm1_52_ds_d2h = tl_sram_ctrl_main__ram_i;

  assign tl_soc_proxy__ctn_o = tl_sm1_53_ds_h2d;
  assign tl_sm1_53_ds_d2h = tl_soc_proxy__ctn_i;

  assign tl_s1n_54_us_h2d = tl_rv_core_ibex__cored_i;
  assign tl_rv_core_ibex__cored_o = tl_s1n_54_us_d2h;

  assign tl_rom_ctrl0__regs_o = tl_sm1_55_ds_h2d;
  assign tl_sm1_55_ds_d2h = tl_rom_ctrl0__regs_i;

  assign tl_rom_ctrl1__regs_o = tl_sm1_56_ds_h2d;
  assign tl_sm1_56_ds_d2h = tl_rom_ctrl1__regs_i;

  assign tl_rv_dm__regs_o = tl_sm1_57_ds_h2d;
  assign tl_sm1_57_ds_d2h = tl_rv_dm__regs_i;

  assign tl_peri_o = tl_asf_58_ds_h2d;
  assign tl_asf_58_ds_d2h = tl_peri_i;

  assign tl_asf_58_us_h2d = tl_sm1_59_ds_h2d;
  assign tl_sm1_59_ds_d2h = tl_asf_58_us_d2h;

  assign tl_aes_o = tl_sm1_60_ds_h2d;
  assign tl_sm1_60_ds_d2h = tl_aes_i;

  assign tl_csrng_o = tl_sm1_61_ds_h2d;
  assign tl_sm1_61_ds_d2h = tl_csrng_i;

  assign tl_edn0_o = tl_sm1_62_ds_h2d;
  assign tl_sm1_62_ds_d2h = tl_edn0_i;

  assign tl_edn1_o = tl_sm1_63_ds_h2d;
  assign tl_sm1_63_ds_d2h = tl_edn1_i;

  assign tl_hmac_o = tl_sm1_64_ds_h2d;
  assign tl_sm1_64_ds_d2h = tl_hmac_i;

  assign tl_rv_plic_o = tl_sm1_65_ds_h2d;
  assign tl_sm1_65_ds_d2h = tl_rv_plic_i;

  assign tl_otbn_o = tl_sm1_66_ds_h2d;
  assign tl_sm1_66_ds_d2h = tl_otbn_i;

  assign tl_keymgr_dpe_o = tl_sm1_67_ds_h2d;
  assign tl_sm1_67_ds_d2h = tl_keymgr_dpe_i;

  assign tl_kmac_o = tl_sm1_68_ds_h2d;
  assign tl_sm1_68_ds_d2h = tl_kmac_i;

  assign tl_sram_ctrl_main__regs_o = tl_sm1_69_ds_h2d;
  assign tl_sm1_69_ds_d2h = tl_sram_ctrl_main__regs_i;

  assign tl_rv_core_ibex__cfg_o = tl_sm1_70_ds_h2d;
  assign tl_sm1_70_ds_d2h = tl_rv_core_ibex__cfg_i;

  assign tl_sram_ctrl_mbox__ram_o = tl_sm1_71_ds_h2d;
  assign tl_sm1_71_ds_d2h = tl_sram_ctrl_mbox__ram_i;

  assign tl_sram_ctrl_mbox__regs_o = tl_sm1_72_ds_h2d;
  assign tl_sm1_72_ds_d2h = tl_sram_ctrl_mbox__regs_i;

  assign tl_soc_proxy__core_o = tl_sm1_73_ds_h2d;
  assign tl_sm1_73_ds_d2h = tl_soc_proxy__core_i;

  assign tl_dma_o = tl_sm1_74_ds_h2d;
  assign tl_sm1_74_ds_d2h = tl_dma_i;

  assign tl_mbx0__core_o = tl_sm1_75_ds_h2d;
  assign tl_sm1_75_ds_d2h = tl_mbx0__core_i;

  assign tl_mbx1__core_o = tl_sm1_76_ds_h2d;
  assign tl_sm1_76_ds_d2h = tl_mbx1__core_i;

  assign tl_mbx2__core_o = tl_sm1_77_ds_h2d;
  assign tl_sm1_77_ds_d2h = tl_mbx2__core_i;

  assign tl_mbx3__core_o = tl_sm1_78_ds_h2d;
  assign tl_sm1_78_ds_d2h = tl_mbx3__core_i;

  assign tl_mbx4__core_o = tl_sm1_79_ds_h2d;
  assign tl_sm1_79_ds_d2h = tl_mbx4__core_i;

  assign tl_mbx5__core_o = tl_sm1_80_ds_h2d;
  assign tl_sm1_80_ds_d2h = tl_mbx5__core_i;

  assign tl_mbx6__core_o = tl_sm1_81_ds_h2d;
  assign tl_sm1_81_ds_d2h = tl_mbx6__core_i;

  assign tl_mbx_jtag__core_o = tl_sm1_82_ds_h2d;
  assign tl_sm1_82_ds_d2h = tl_mbx_jtag__core_i;

  assign tl_mbx_pcie0__core_o = tl_sm1_83_ds_h2d;
  assign tl_sm1_83_ds_d2h = tl_mbx_pcie0__core_i;

  assign tl_mbx_pcie1__core_o = tl_sm1_84_ds_h2d;
  assign tl_sm1_84_ds_d2h = tl_mbx_pcie1__core_i;

  assign tl_s1n_85_us_h2d = tl_rv_dm__sba_i;
  assign tl_rv_dm__sba_o = tl_s1n_85_us_d2h;

  assign tl_s1n_86_us_h2d = tl_dma__host_i;
  assign tl_dma__host_o = tl_s1n_86_us_d2h;

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_48 = 3'd5;
    if ((tl_s1n_48_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL0__ROM)) == ADDR_SPACE_ROM_CTRL0__ROM) begin
      dev_sel_s1n_48 = 3'd0;

    end else if ((tl_s1n_48_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__ROM)) == ADDR_SPACE_ROM_CTRL1__ROM) begin
      dev_sel_s1n_48 = 3'd1;

    end else if ((tl_s1n_48_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__MEM)) == ADDR_SPACE_RV_DM__MEM) begin
      dev_sel_s1n_48 = 3'd2;

    end else if ((tl_s1n_48_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_s1n_48 = 3'd3;

    end else if ((tl_s1n_48_us_h2d.a_address &
                  ~(ADDR_MASK_SOC_PROXY__CTN)) == ADDR_SPACE_SOC_PROXY__CTN) begin
      dev_sel_s1n_48 = 3'd4;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_54 = 6'd34;
    if ((tl_s1n_54_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL0__ROM)) == ADDR_SPACE_ROM_CTRL0__ROM) begin
      dev_sel_s1n_54 = 6'd0;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL0__REGS)) == ADDR_SPACE_ROM_CTRL0__REGS) begin
      dev_sel_s1n_54 = 6'd1;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__ROM)) == ADDR_SPACE_ROM_CTRL1__ROM) begin
      dev_sel_s1n_54 = 6'd2;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__REGS)) == ADDR_SPACE_ROM_CTRL1__REGS) begin
      dev_sel_s1n_54 = 6'd3;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__MEM)) == ADDR_SPACE_RV_DM__MEM) begin
      dev_sel_s1n_54 = 6'd4;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__REGS)) == ADDR_SPACE_RV_DM__REGS) begin
      dev_sel_s1n_54 = 6'd5;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_s1n_54 = 6'd6;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_PERI)) == ADDR_SPACE_PERI) begin
      dev_sel_s1n_54 = 6'd7;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_AES)) == ADDR_SPACE_AES) begin
      dev_sel_s1n_54 = 6'd8;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_CSRNG)) == ADDR_SPACE_CSRNG) begin
      dev_sel_s1n_54 = 6'd9;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_EDN0)) == ADDR_SPACE_EDN0) begin
      dev_sel_s1n_54 = 6'd10;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_EDN1)) == ADDR_SPACE_EDN1) begin
      dev_sel_s1n_54 = 6'd11;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_HMAC)) == ADDR_SPACE_HMAC) begin
      dev_sel_s1n_54 = 6'd12;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_RV_PLIC)) == ADDR_SPACE_RV_PLIC) begin
      dev_sel_s1n_54 = 6'd13;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_OTBN)) == ADDR_SPACE_OTBN) begin
      dev_sel_s1n_54 = 6'd14;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_KEYMGR_DPE)) == ADDR_SPACE_KEYMGR_DPE) begin
      dev_sel_s1n_54 = 6'd15;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_KMAC)) == ADDR_SPACE_KMAC) begin
      dev_sel_s1n_54 = 6'd16;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__REGS)) == ADDR_SPACE_SRAM_CTRL_MAIN__REGS) begin
      dev_sel_s1n_54 = 6'd17;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_RV_CORE_IBEX__CFG)) == ADDR_SPACE_RV_CORE_IBEX__CFG) begin
      dev_sel_s1n_54 = 6'd18;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_54 = 6'd19;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MBOX__REGS)) == ADDR_SPACE_SRAM_CTRL_MBOX__REGS) begin
      dev_sel_s1n_54 = 6'd20;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_SOC_PROXY__CTN)) == ADDR_SPACE_SOC_PROXY__CTN) begin
      dev_sel_s1n_54 = 6'd21;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_SOC_PROXY__CORE)) == ADDR_SPACE_SOC_PROXY__CORE) begin
      dev_sel_s1n_54 = 6'd22;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_DMA)) == ADDR_SPACE_DMA) begin
      dev_sel_s1n_54 = 6'd23;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_MBX0__CORE)) == ADDR_SPACE_MBX0__CORE) begin
      dev_sel_s1n_54 = 6'd24;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_MBX1__CORE)) == ADDR_SPACE_MBX1__CORE) begin
      dev_sel_s1n_54 = 6'd25;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_MBX2__CORE)) == ADDR_SPACE_MBX2__CORE) begin
      dev_sel_s1n_54 = 6'd26;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_MBX3__CORE)) == ADDR_SPACE_MBX3__CORE) begin
      dev_sel_s1n_54 = 6'd27;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_MBX4__CORE)) == ADDR_SPACE_MBX4__CORE) begin
      dev_sel_s1n_54 = 6'd28;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_MBX5__CORE)) == ADDR_SPACE_MBX5__CORE) begin
      dev_sel_s1n_54 = 6'd29;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_MBX6__CORE)) == ADDR_SPACE_MBX6__CORE) begin
      dev_sel_s1n_54 = 6'd30;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_MBX_JTAG__CORE)) == ADDR_SPACE_MBX_JTAG__CORE) begin
      dev_sel_s1n_54 = 6'd31;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_MBX_PCIE0__CORE)) == ADDR_SPACE_MBX_PCIE0__CORE) begin
      dev_sel_s1n_54 = 6'd32;

    end else if ((tl_s1n_54_us_h2d.a_address &
                  ~(ADDR_MASK_MBX_PCIE1__CORE)) == ADDR_SPACE_MBX_PCIE1__CORE) begin
      dev_sel_s1n_54 = 6'd33;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_85 = 6'd34;
    if ((tl_s1n_85_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL0__ROM)) == ADDR_SPACE_ROM_CTRL0__ROM) begin
      dev_sel_s1n_85 = 6'd0;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL0__REGS)) == ADDR_SPACE_ROM_CTRL0__REGS) begin
      dev_sel_s1n_85 = 6'd1;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__ROM)) == ADDR_SPACE_ROM_CTRL1__ROM) begin
      dev_sel_s1n_85 = 6'd2;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL1__REGS)) == ADDR_SPACE_ROM_CTRL1__REGS) begin
      dev_sel_s1n_85 = 6'd3;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__MEM)) == ADDR_SPACE_RV_DM__MEM) begin
      dev_sel_s1n_85 = 6'd4;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__REGS)) == ADDR_SPACE_RV_DM__REGS) begin
      dev_sel_s1n_85 = 6'd5;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_s1n_85 = 6'd6;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_PERI)) == ADDR_SPACE_PERI) begin
      dev_sel_s1n_85 = 6'd7;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_AES)) == ADDR_SPACE_AES) begin
      dev_sel_s1n_85 = 6'd8;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_CSRNG)) == ADDR_SPACE_CSRNG) begin
      dev_sel_s1n_85 = 6'd9;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_EDN0)) == ADDR_SPACE_EDN0) begin
      dev_sel_s1n_85 = 6'd10;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_EDN1)) == ADDR_SPACE_EDN1) begin
      dev_sel_s1n_85 = 6'd11;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_HMAC)) == ADDR_SPACE_HMAC) begin
      dev_sel_s1n_85 = 6'd12;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_RV_PLIC)) == ADDR_SPACE_RV_PLIC) begin
      dev_sel_s1n_85 = 6'd13;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_OTBN)) == ADDR_SPACE_OTBN) begin
      dev_sel_s1n_85 = 6'd14;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_KEYMGR_DPE)) == ADDR_SPACE_KEYMGR_DPE) begin
      dev_sel_s1n_85 = 6'd15;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_KMAC)) == ADDR_SPACE_KMAC) begin
      dev_sel_s1n_85 = 6'd16;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__REGS)) == ADDR_SPACE_SRAM_CTRL_MAIN__REGS) begin
      dev_sel_s1n_85 = 6'd17;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_RV_CORE_IBEX__CFG)) == ADDR_SPACE_RV_CORE_IBEX__CFG) begin
      dev_sel_s1n_85 = 6'd18;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_85 = 6'd19;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MBOX__REGS)) == ADDR_SPACE_SRAM_CTRL_MBOX__REGS) begin
      dev_sel_s1n_85 = 6'd20;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_SOC_PROXY__CTN)) == ADDR_SPACE_SOC_PROXY__CTN) begin
      dev_sel_s1n_85 = 6'd21;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_SOC_PROXY__CORE)) == ADDR_SPACE_SOC_PROXY__CORE) begin
      dev_sel_s1n_85 = 6'd22;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_DMA)) == ADDR_SPACE_DMA) begin
      dev_sel_s1n_85 = 6'd23;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_MBX0__CORE)) == ADDR_SPACE_MBX0__CORE) begin
      dev_sel_s1n_85 = 6'd24;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_MBX1__CORE)) == ADDR_SPACE_MBX1__CORE) begin
      dev_sel_s1n_85 = 6'd25;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_MBX2__CORE)) == ADDR_SPACE_MBX2__CORE) begin
      dev_sel_s1n_85 = 6'd26;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_MBX3__CORE)) == ADDR_SPACE_MBX3__CORE) begin
      dev_sel_s1n_85 = 6'd27;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_MBX4__CORE)) == ADDR_SPACE_MBX4__CORE) begin
      dev_sel_s1n_85 = 6'd28;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_MBX5__CORE)) == ADDR_SPACE_MBX5__CORE) begin
      dev_sel_s1n_85 = 6'd29;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_MBX6__CORE)) == ADDR_SPACE_MBX6__CORE) begin
      dev_sel_s1n_85 = 6'd30;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_MBX_JTAG__CORE)) == ADDR_SPACE_MBX_JTAG__CORE) begin
      dev_sel_s1n_85 = 6'd31;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_MBX_PCIE0__CORE)) == ADDR_SPACE_MBX_PCIE0__CORE) begin
      dev_sel_s1n_85 = 6'd32;

    end else if ((tl_s1n_85_us_h2d.a_address &
                  ~(ADDR_MASK_MBX_PCIE1__CORE)) == ADDR_SPACE_MBX_PCIE1__CORE) begin
      dev_sel_s1n_85 = 6'd33;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_86 = 4'd9;
    if ((tl_s1n_86_us_h2d.a_address &
         ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_s1n_86 = 4'd0;

    end else if ((tl_s1n_86_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MBOX__RAM)) == ADDR_SPACE_SRAM_CTRL_MBOX__RAM) begin
      dev_sel_s1n_86 = 4'd1;

    end else if ((tl_s1n_86_us_h2d.a_address &
                  ~(ADDR_MASK_AES)) == ADDR_SPACE_AES) begin
      dev_sel_s1n_86 = 4'd2;

    end else if ((tl_s1n_86_us_h2d.a_address &
                  ~(ADDR_MASK_HMAC)) == ADDR_SPACE_HMAC) begin
      dev_sel_s1n_86 = 4'd3;

    end else if ((tl_s1n_86_us_h2d.a_address &
                  ~(ADDR_MASK_OTBN)) == ADDR_SPACE_OTBN) begin
      dev_sel_s1n_86 = 4'd4;

    end else if ((tl_s1n_86_us_h2d.a_address &
                  ~(ADDR_MASK_KEYMGR_DPE)) == ADDR_SPACE_KEYMGR_DPE) begin
      dev_sel_s1n_86 = 4'd5;

    end else if ((tl_s1n_86_us_h2d.a_address &
                  ~(ADDR_MASK_KMAC)) == ADDR_SPACE_KMAC) begin
      dev_sel_s1n_86 = 4'd6;

    end else if ((tl_s1n_86_us_h2d.a_address &
                  ~(ADDR_MASK_SOC_PROXY__CTN)) == ADDR_SPACE_SOC_PROXY__CTN) begin
      dev_sel_s1n_86 = 4'd7;

    end else if ((tl_s1n_86_us_h2d.a_address &
                  ~(ADDR_MASK_PERI)) == ADDR_SPACE_PERI) begin
      dev_sel_s1n_86 = 4'd8;
end
  end


  // Instantiation phase
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (20'h0),
    .DRspDepth (20'h0),
    .N         (5)
  ) u_s1n_48 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_48_us_h2d),
    .tl_h_o       (tl_s1n_48_us_d2h),
    .tl_d_o       (tl_s1n_48_ds_h2d),
    .tl_d_i       (tl_s1n_48_ds_d2h),
    .dev_select_i (dev_sel_s1n_48)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_49 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_49_us_h2d),
    .tl_h_o       (tl_sm1_49_us_d2h),
    .tl_d_o       (tl_sm1_49_ds_h2d),
    .tl_d_i       (tl_sm1_49_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_50 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_50_us_h2d),
    .tl_h_o       (tl_sm1_50_us_d2h),
    .tl_d_o       (tl_sm1_50_ds_h2d),
    .tl_d_i       (tl_sm1_50_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_51 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_51_us_h2d),
    .tl_h_o       (tl_sm1_51_us_d2h),
    .tl_d_o       (tl_sm1_51_ds_h2d),
    .tl_d_i       (tl_sm1_51_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (16'h0),
    .HRspDepth (16'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (4)
  ) u_sm1_52 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_52_us_h2d),
    .tl_h_o       (tl_sm1_52_us_d2h),
    .tl_d_o       (tl_sm1_52_ds_h2d),
    .tl_d_i       (tl_sm1_52_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (16'h0),
    .HRspDepth (16'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (4)
  ) u_sm1_53 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_53_us_h2d),
    .tl_h_o       (tl_sm1_53_us_d2h),
    .tl_d_o       (tl_sm1_53_ds_h2d),
    .tl_d_i       (tl_sm1_53_ds_d2h)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (136'h0),
    .DRspDepth (136'h0),
    .N         (34)
  ) u_s1n_54 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_54_us_h2d),
    .tl_h_o       (tl_s1n_54_us_d2h),
    .tl_d_o       (tl_s1n_54_ds_h2d),
    .tl_d_i       (tl_s1n_54_ds_d2h),
    .dev_select_i (dev_sel_s1n_54)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_55 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_55_us_h2d),
    .tl_h_o       (tl_sm1_55_us_d2h),
    .tl_d_o       (tl_sm1_55_ds_h2d),
    .tl_d_i       (tl_sm1_55_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_56 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_56_us_h2d),
    .tl_h_o       (tl_sm1_56_us_d2h),
    .tl_d_o       (tl_sm1_56_ds_h2d),
    .tl_d_i       (tl_sm1_56_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_57 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_57_us_h2d),
    .tl_h_o       (tl_sm1_57_us_d2h),
    .tl_d_o       (tl_sm1_57_ds_h2d),
    .tl_d_i       (tl_sm1_57_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (1),
    .RspDepth        (1)
  ) u_asf_58 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_fixed_i),
    .rst_d_ni     (rst_fixed_ni),
    .tl_h_i       (tl_asf_58_us_h2d),
    .tl_h_o       (tl_asf_58_us_d2h),
    .tl_d_o       (tl_asf_58_ds_h2d),
    .tl_d_i       (tl_asf_58_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (3)
  ) u_sm1_59 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_59_us_h2d),
    .tl_h_o       (tl_sm1_59_us_d2h),
    .tl_d_o       (tl_sm1_59_ds_h2d),
    .tl_d_i       (tl_sm1_59_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_60 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_60_us_h2d),
    .tl_h_o       (tl_sm1_60_us_d2h),
    .tl_d_o       (tl_sm1_60_ds_h2d),
    .tl_d_i       (tl_sm1_60_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_61 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_61_us_h2d),
    .tl_h_o       (tl_sm1_61_us_d2h),
    .tl_d_o       (tl_sm1_61_ds_h2d),
    .tl_d_i       (tl_sm1_61_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_62 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_62_us_h2d),
    .tl_h_o       (tl_sm1_62_us_d2h),
    .tl_d_o       (tl_sm1_62_ds_h2d),
    .tl_d_i       (tl_sm1_62_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_63 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_63_us_h2d),
    .tl_h_o       (tl_sm1_63_us_d2h),
    .tl_d_o       (tl_sm1_63_ds_h2d),
    .tl_d_i       (tl_sm1_63_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_64 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_64_us_h2d),
    .tl_h_o       (tl_sm1_64_us_d2h),
    .tl_d_o       (tl_sm1_64_ds_h2d),
    .tl_d_i       (tl_sm1_64_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_65 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_65_us_h2d),
    .tl_h_o       (tl_sm1_65_us_d2h),
    .tl_d_o       (tl_sm1_65_ds_h2d),
    .tl_d_i       (tl_sm1_65_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_66 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_66_us_h2d),
    .tl_h_o       (tl_sm1_66_us_d2h),
    .tl_d_o       (tl_sm1_66_ds_h2d),
    .tl_d_i       (tl_sm1_66_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_67 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_67_us_h2d),
    .tl_h_o       (tl_sm1_67_us_d2h),
    .tl_d_o       (tl_sm1_67_ds_h2d),
    .tl_d_i       (tl_sm1_67_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_68 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_68_us_h2d),
    .tl_h_o       (tl_sm1_68_us_d2h),
    .tl_d_o       (tl_sm1_68_ds_h2d),
    .tl_d_i       (tl_sm1_68_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_69 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_69_us_h2d),
    .tl_h_o       (tl_sm1_69_us_d2h),
    .tl_d_o       (tl_sm1_69_ds_h2d),
    .tl_d_i       (tl_sm1_69_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_70 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_70_us_h2d),
    .tl_h_o       (tl_sm1_70_us_d2h),
    .tl_d_o       (tl_sm1_70_ds_h2d),
    .tl_d_i       (tl_sm1_70_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (52'h0),
    .HRspDepth (52'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (13)
  ) u_sm1_71 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_71_us_h2d),
    .tl_h_o       (tl_sm1_71_us_d2h),
    .tl_d_o       (tl_sm1_71_ds_h2d),
    .tl_d_i       (tl_sm1_71_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_72 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_72_us_h2d),
    .tl_h_o       (tl_sm1_72_us_d2h),
    .tl_d_o       (tl_sm1_72_ds_h2d),
    .tl_d_i       (tl_sm1_72_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_73 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_73_us_h2d),
    .tl_h_o       (tl_sm1_73_us_d2h),
    .tl_d_o       (tl_sm1_73_ds_h2d),
    .tl_d_i       (tl_sm1_73_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_74 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_74_us_h2d),
    .tl_h_o       (tl_sm1_74_us_d2h),
    .tl_d_o       (tl_sm1_74_ds_h2d),
    .tl_d_i       (tl_sm1_74_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_75 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_75_us_h2d),
    .tl_h_o       (tl_sm1_75_us_d2h),
    .tl_d_o       (tl_sm1_75_ds_h2d),
    .tl_d_i       (tl_sm1_75_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_76 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_76_us_h2d),
    .tl_h_o       (tl_sm1_76_us_d2h),
    .tl_d_o       (tl_sm1_76_ds_h2d),
    .tl_d_i       (tl_sm1_76_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_77 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_77_us_h2d),
    .tl_h_o       (tl_sm1_77_us_d2h),
    .tl_d_o       (tl_sm1_77_ds_h2d),
    .tl_d_i       (tl_sm1_77_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_78 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_78_us_h2d),
    .tl_h_o       (tl_sm1_78_us_d2h),
    .tl_d_o       (tl_sm1_78_ds_h2d),
    .tl_d_i       (tl_sm1_78_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_79 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_79_us_h2d),
    .tl_h_o       (tl_sm1_79_us_d2h),
    .tl_d_o       (tl_sm1_79_ds_h2d),
    .tl_d_i       (tl_sm1_79_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_80 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_80_us_h2d),
    .tl_h_o       (tl_sm1_80_us_d2h),
    .tl_d_o       (tl_sm1_80_ds_h2d),
    .tl_d_i       (tl_sm1_80_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_81 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_81_us_h2d),
    .tl_h_o       (tl_sm1_81_us_d2h),
    .tl_d_o       (tl_sm1_81_ds_h2d),
    .tl_d_i       (tl_sm1_81_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_82 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_82_us_h2d),
    .tl_h_o       (tl_sm1_82_us_d2h),
    .tl_d_o       (tl_sm1_82_ds_h2d),
    .tl_d_i       (tl_sm1_82_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_83 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_83_us_h2d),
    .tl_h_o       (tl_sm1_83_us_d2h),
    .tl_d_o       (tl_sm1_83_ds_h2d),
    .tl_d_i       (tl_sm1_83_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_84 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_84_us_h2d),
    .tl_h_o       (tl_sm1_84_us_d2h),
    .tl_d_o       (tl_sm1_84_ds_h2d),
    .tl_d_i       (tl_sm1_84_ds_d2h)
  );
  tlul_socket_1n #(
    .HReqPass  (1'b0),
    .HRspPass  (1'b0),
    .DReqDepth (136'h0),
    .DRspDepth (136'h0),
    .N         (34)
  ) u_s1n_85 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_85_us_h2d),
    .tl_h_o       (tl_s1n_85_us_d2h),
    .tl_d_o       (tl_s1n_85_ds_h2d),
    .tl_d_i       (tl_s1n_85_ds_d2h),
    .dev_select_i (dev_sel_s1n_85)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (36'h0),
    .DRspDepth (36'h0),
    .N         (9)
  ) u_s1n_86 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_86_us_h2d),
    .tl_h_o       (tl_s1n_86_us_d2h),
    .tl_d_o       (tl_s1n_86_ds_h2d),
    .tl_d_i       (tl_s1n_86_ds_d2h),
    .dev_select_i (dev_sel_s1n_86)
  );

endmodule
