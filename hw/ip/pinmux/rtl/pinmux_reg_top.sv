// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module pinmux_reg_top (
  input clk_i,
  input rst_ni,
  input clk_aon_i,
  input rst_aon_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output pinmux_reg_pkg::pinmux_reg2hw_t reg2hw, // Write
  input  pinmux_reg_pkg::pinmux_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import pinmux_reg_pkg::* ;

  localparam int AW = 11;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [413:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(414)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic alert_test_we;
  logic alert_test_wd;
  logic mio_periph_insel_regwen_0_we;
  logic mio_periph_insel_regwen_0_qs;
  logic mio_periph_insel_regwen_0_wd;
  logic mio_periph_insel_regwen_1_we;
  logic mio_periph_insel_regwen_1_qs;
  logic mio_periph_insel_regwen_1_wd;
  logic mio_periph_insel_regwen_2_we;
  logic mio_periph_insel_regwen_2_qs;
  logic mio_periph_insel_regwen_2_wd;
  logic mio_periph_insel_regwen_3_we;
  logic mio_periph_insel_regwen_3_qs;
  logic mio_periph_insel_regwen_3_wd;
  logic mio_periph_insel_regwen_4_we;
  logic mio_periph_insel_regwen_4_qs;
  logic mio_periph_insel_regwen_4_wd;
  logic mio_periph_insel_regwen_5_we;
  logic mio_periph_insel_regwen_5_qs;
  logic mio_periph_insel_regwen_5_wd;
  logic mio_periph_insel_regwen_6_we;
  logic mio_periph_insel_regwen_6_qs;
  logic mio_periph_insel_regwen_6_wd;
  logic mio_periph_insel_regwen_7_we;
  logic mio_periph_insel_regwen_7_qs;
  logic mio_periph_insel_regwen_7_wd;
  logic mio_periph_insel_regwen_8_we;
  logic mio_periph_insel_regwen_8_qs;
  logic mio_periph_insel_regwen_8_wd;
  logic mio_periph_insel_regwen_9_we;
  logic mio_periph_insel_regwen_9_qs;
  logic mio_periph_insel_regwen_9_wd;
  logic mio_periph_insel_regwen_10_we;
  logic mio_periph_insel_regwen_10_qs;
  logic mio_periph_insel_regwen_10_wd;
  logic mio_periph_insel_regwen_11_we;
  logic mio_periph_insel_regwen_11_qs;
  logic mio_periph_insel_regwen_11_wd;
  logic mio_periph_insel_regwen_12_we;
  logic mio_periph_insel_regwen_12_qs;
  logic mio_periph_insel_regwen_12_wd;
  logic mio_periph_insel_regwen_13_we;
  logic mio_periph_insel_regwen_13_qs;
  logic mio_periph_insel_regwen_13_wd;
  logic mio_periph_insel_regwen_14_we;
  logic mio_periph_insel_regwen_14_qs;
  logic mio_periph_insel_regwen_14_wd;
  logic mio_periph_insel_regwen_15_we;
  logic mio_periph_insel_regwen_15_qs;
  logic mio_periph_insel_regwen_15_wd;
  logic mio_periph_insel_regwen_16_we;
  logic mio_periph_insel_regwen_16_qs;
  logic mio_periph_insel_regwen_16_wd;
  logic mio_periph_insel_regwen_17_we;
  logic mio_periph_insel_regwen_17_qs;
  logic mio_periph_insel_regwen_17_wd;
  logic mio_periph_insel_regwen_18_we;
  logic mio_periph_insel_regwen_18_qs;
  logic mio_periph_insel_regwen_18_wd;
  logic mio_periph_insel_regwen_19_we;
  logic mio_periph_insel_regwen_19_qs;
  logic mio_periph_insel_regwen_19_wd;
  logic mio_periph_insel_regwen_20_we;
  logic mio_periph_insel_regwen_20_qs;
  logic mio_periph_insel_regwen_20_wd;
  logic mio_periph_insel_regwen_21_we;
  logic mio_periph_insel_regwen_21_qs;
  logic mio_periph_insel_regwen_21_wd;
  logic mio_periph_insel_regwen_22_we;
  logic mio_periph_insel_regwen_22_qs;
  logic mio_periph_insel_regwen_22_wd;
  logic mio_periph_insel_regwen_23_we;
  logic mio_periph_insel_regwen_23_qs;
  logic mio_periph_insel_regwen_23_wd;
  logic mio_periph_insel_regwen_24_we;
  logic mio_periph_insel_regwen_24_qs;
  logic mio_periph_insel_regwen_24_wd;
  logic mio_periph_insel_regwen_25_we;
  logic mio_periph_insel_regwen_25_qs;
  logic mio_periph_insel_regwen_25_wd;
  logic mio_periph_insel_regwen_26_we;
  logic mio_periph_insel_regwen_26_qs;
  logic mio_periph_insel_regwen_26_wd;
  logic mio_periph_insel_regwen_27_we;
  logic mio_periph_insel_regwen_27_qs;
  logic mio_periph_insel_regwen_27_wd;
  logic mio_periph_insel_regwen_28_we;
  logic mio_periph_insel_regwen_28_qs;
  logic mio_periph_insel_regwen_28_wd;
  logic mio_periph_insel_regwen_29_we;
  logic mio_periph_insel_regwen_29_qs;
  logic mio_periph_insel_regwen_29_wd;
  logic mio_periph_insel_regwen_30_we;
  logic mio_periph_insel_regwen_30_qs;
  logic mio_periph_insel_regwen_30_wd;
  logic mio_periph_insel_regwen_31_we;
  logic mio_periph_insel_regwen_31_qs;
  logic mio_periph_insel_regwen_31_wd;
  logic mio_periph_insel_regwen_32_we;
  logic mio_periph_insel_regwen_32_qs;
  logic mio_periph_insel_regwen_32_wd;
  logic mio_periph_insel_0_we;
  logic [5:0] mio_periph_insel_0_qs;
  logic [5:0] mio_periph_insel_0_wd;
  logic mio_periph_insel_1_we;
  logic [5:0] mio_periph_insel_1_qs;
  logic [5:0] mio_periph_insel_1_wd;
  logic mio_periph_insel_2_we;
  logic [5:0] mio_periph_insel_2_qs;
  logic [5:0] mio_periph_insel_2_wd;
  logic mio_periph_insel_3_we;
  logic [5:0] mio_periph_insel_3_qs;
  logic [5:0] mio_periph_insel_3_wd;
  logic mio_periph_insel_4_we;
  logic [5:0] mio_periph_insel_4_qs;
  logic [5:0] mio_periph_insel_4_wd;
  logic mio_periph_insel_5_we;
  logic [5:0] mio_periph_insel_5_qs;
  logic [5:0] mio_periph_insel_5_wd;
  logic mio_periph_insel_6_we;
  logic [5:0] mio_periph_insel_6_qs;
  logic [5:0] mio_periph_insel_6_wd;
  logic mio_periph_insel_7_we;
  logic [5:0] mio_periph_insel_7_qs;
  logic [5:0] mio_periph_insel_7_wd;
  logic mio_periph_insel_8_we;
  logic [5:0] mio_periph_insel_8_qs;
  logic [5:0] mio_periph_insel_8_wd;
  logic mio_periph_insel_9_we;
  logic [5:0] mio_periph_insel_9_qs;
  logic [5:0] mio_periph_insel_9_wd;
  logic mio_periph_insel_10_we;
  logic [5:0] mio_periph_insel_10_qs;
  logic [5:0] mio_periph_insel_10_wd;
  logic mio_periph_insel_11_we;
  logic [5:0] mio_periph_insel_11_qs;
  logic [5:0] mio_periph_insel_11_wd;
  logic mio_periph_insel_12_we;
  logic [5:0] mio_periph_insel_12_qs;
  logic [5:0] mio_periph_insel_12_wd;
  logic mio_periph_insel_13_we;
  logic [5:0] mio_periph_insel_13_qs;
  logic [5:0] mio_periph_insel_13_wd;
  logic mio_periph_insel_14_we;
  logic [5:0] mio_periph_insel_14_qs;
  logic [5:0] mio_periph_insel_14_wd;
  logic mio_periph_insel_15_we;
  logic [5:0] mio_periph_insel_15_qs;
  logic [5:0] mio_periph_insel_15_wd;
  logic mio_periph_insel_16_we;
  logic [5:0] mio_periph_insel_16_qs;
  logic [5:0] mio_periph_insel_16_wd;
  logic mio_periph_insel_17_we;
  logic [5:0] mio_periph_insel_17_qs;
  logic [5:0] mio_periph_insel_17_wd;
  logic mio_periph_insel_18_we;
  logic [5:0] mio_periph_insel_18_qs;
  logic [5:0] mio_periph_insel_18_wd;
  logic mio_periph_insel_19_we;
  logic [5:0] mio_periph_insel_19_qs;
  logic [5:0] mio_periph_insel_19_wd;
  logic mio_periph_insel_20_we;
  logic [5:0] mio_periph_insel_20_qs;
  logic [5:0] mio_periph_insel_20_wd;
  logic mio_periph_insel_21_we;
  logic [5:0] mio_periph_insel_21_qs;
  logic [5:0] mio_periph_insel_21_wd;
  logic mio_periph_insel_22_we;
  logic [5:0] mio_periph_insel_22_qs;
  logic [5:0] mio_periph_insel_22_wd;
  logic mio_periph_insel_23_we;
  logic [5:0] mio_periph_insel_23_qs;
  logic [5:0] mio_periph_insel_23_wd;
  logic mio_periph_insel_24_we;
  logic [5:0] mio_periph_insel_24_qs;
  logic [5:0] mio_periph_insel_24_wd;
  logic mio_periph_insel_25_we;
  logic [5:0] mio_periph_insel_25_qs;
  logic [5:0] mio_periph_insel_25_wd;
  logic mio_periph_insel_26_we;
  logic [5:0] mio_periph_insel_26_qs;
  logic [5:0] mio_periph_insel_26_wd;
  logic mio_periph_insel_27_we;
  logic [5:0] mio_periph_insel_27_qs;
  logic [5:0] mio_periph_insel_27_wd;
  logic mio_periph_insel_28_we;
  logic [5:0] mio_periph_insel_28_qs;
  logic [5:0] mio_periph_insel_28_wd;
  logic mio_periph_insel_29_we;
  logic [5:0] mio_periph_insel_29_qs;
  logic [5:0] mio_periph_insel_29_wd;
  logic mio_periph_insel_30_we;
  logic [5:0] mio_periph_insel_30_qs;
  logic [5:0] mio_periph_insel_30_wd;
  logic mio_periph_insel_31_we;
  logic [5:0] mio_periph_insel_31_qs;
  logic [5:0] mio_periph_insel_31_wd;
  logic mio_periph_insel_32_we;
  logic [5:0] mio_periph_insel_32_qs;
  logic [5:0] mio_periph_insel_32_wd;
  logic mio_outsel_regwen_0_we;
  logic mio_outsel_regwen_0_qs;
  logic mio_outsel_regwen_0_wd;
  logic mio_outsel_regwen_1_we;
  logic mio_outsel_regwen_1_qs;
  logic mio_outsel_regwen_1_wd;
  logic mio_outsel_regwen_2_we;
  logic mio_outsel_regwen_2_qs;
  logic mio_outsel_regwen_2_wd;
  logic mio_outsel_regwen_3_we;
  logic mio_outsel_regwen_3_qs;
  logic mio_outsel_regwen_3_wd;
  logic mio_outsel_regwen_4_we;
  logic mio_outsel_regwen_4_qs;
  logic mio_outsel_regwen_4_wd;
  logic mio_outsel_regwen_5_we;
  logic mio_outsel_regwen_5_qs;
  logic mio_outsel_regwen_5_wd;
  logic mio_outsel_regwen_6_we;
  logic mio_outsel_regwen_6_qs;
  logic mio_outsel_regwen_6_wd;
  logic mio_outsel_regwen_7_we;
  logic mio_outsel_regwen_7_qs;
  logic mio_outsel_regwen_7_wd;
  logic mio_outsel_regwen_8_we;
  logic mio_outsel_regwen_8_qs;
  logic mio_outsel_regwen_8_wd;
  logic mio_outsel_regwen_9_we;
  logic mio_outsel_regwen_9_qs;
  logic mio_outsel_regwen_9_wd;
  logic mio_outsel_regwen_10_we;
  logic mio_outsel_regwen_10_qs;
  logic mio_outsel_regwen_10_wd;
  logic mio_outsel_regwen_11_we;
  logic mio_outsel_regwen_11_qs;
  logic mio_outsel_regwen_11_wd;
  logic mio_outsel_regwen_12_we;
  logic mio_outsel_regwen_12_qs;
  logic mio_outsel_regwen_12_wd;
  logic mio_outsel_regwen_13_we;
  logic mio_outsel_regwen_13_qs;
  logic mio_outsel_regwen_13_wd;
  logic mio_outsel_regwen_14_we;
  logic mio_outsel_regwen_14_qs;
  logic mio_outsel_regwen_14_wd;
  logic mio_outsel_regwen_15_we;
  logic mio_outsel_regwen_15_qs;
  logic mio_outsel_regwen_15_wd;
  logic mio_outsel_regwen_16_we;
  logic mio_outsel_regwen_16_qs;
  logic mio_outsel_regwen_16_wd;
  logic mio_outsel_regwen_17_we;
  logic mio_outsel_regwen_17_qs;
  logic mio_outsel_regwen_17_wd;
  logic mio_outsel_regwen_18_we;
  logic mio_outsel_regwen_18_qs;
  logic mio_outsel_regwen_18_wd;
  logic mio_outsel_regwen_19_we;
  logic mio_outsel_regwen_19_qs;
  logic mio_outsel_regwen_19_wd;
  logic mio_outsel_regwen_20_we;
  logic mio_outsel_regwen_20_qs;
  logic mio_outsel_regwen_20_wd;
  logic mio_outsel_regwen_21_we;
  logic mio_outsel_regwen_21_qs;
  logic mio_outsel_regwen_21_wd;
  logic mio_outsel_regwen_22_we;
  logic mio_outsel_regwen_22_qs;
  logic mio_outsel_regwen_22_wd;
  logic mio_outsel_regwen_23_we;
  logic mio_outsel_regwen_23_qs;
  logic mio_outsel_regwen_23_wd;
  logic mio_outsel_regwen_24_we;
  logic mio_outsel_regwen_24_qs;
  logic mio_outsel_regwen_24_wd;
  logic mio_outsel_regwen_25_we;
  logic mio_outsel_regwen_25_qs;
  logic mio_outsel_regwen_25_wd;
  logic mio_outsel_regwen_26_we;
  logic mio_outsel_regwen_26_qs;
  logic mio_outsel_regwen_26_wd;
  logic mio_outsel_regwen_27_we;
  logic mio_outsel_regwen_27_qs;
  logic mio_outsel_regwen_27_wd;
  logic mio_outsel_regwen_28_we;
  logic mio_outsel_regwen_28_qs;
  logic mio_outsel_regwen_28_wd;
  logic mio_outsel_regwen_29_we;
  logic mio_outsel_regwen_29_qs;
  logic mio_outsel_regwen_29_wd;
  logic mio_outsel_regwen_30_we;
  logic mio_outsel_regwen_30_qs;
  logic mio_outsel_regwen_30_wd;
  logic mio_outsel_regwen_31_we;
  logic mio_outsel_regwen_31_qs;
  logic mio_outsel_regwen_31_wd;
  logic mio_outsel_0_we;
  logic [5:0] mio_outsel_0_qs;
  logic [5:0] mio_outsel_0_wd;
  logic mio_outsel_1_we;
  logic [5:0] mio_outsel_1_qs;
  logic [5:0] mio_outsel_1_wd;
  logic mio_outsel_2_we;
  logic [5:0] mio_outsel_2_qs;
  logic [5:0] mio_outsel_2_wd;
  logic mio_outsel_3_we;
  logic [5:0] mio_outsel_3_qs;
  logic [5:0] mio_outsel_3_wd;
  logic mio_outsel_4_we;
  logic [5:0] mio_outsel_4_qs;
  logic [5:0] mio_outsel_4_wd;
  logic mio_outsel_5_we;
  logic [5:0] mio_outsel_5_qs;
  logic [5:0] mio_outsel_5_wd;
  logic mio_outsel_6_we;
  logic [5:0] mio_outsel_6_qs;
  logic [5:0] mio_outsel_6_wd;
  logic mio_outsel_7_we;
  logic [5:0] mio_outsel_7_qs;
  logic [5:0] mio_outsel_7_wd;
  logic mio_outsel_8_we;
  logic [5:0] mio_outsel_8_qs;
  logic [5:0] mio_outsel_8_wd;
  logic mio_outsel_9_we;
  logic [5:0] mio_outsel_9_qs;
  logic [5:0] mio_outsel_9_wd;
  logic mio_outsel_10_we;
  logic [5:0] mio_outsel_10_qs;
  logic [5:0] mio_outsel_10_wd;
  logic mio_outsel_11_we;
  logic [5:0] mio_outsel_11_qs;
  logic [5:0] mio_outsel_11_wd;
  logic mio_outsel_12_we;
  logic [5:0] mio_outsel_12_qs;
  logic [5:0] mio_outsel_12_wd;
  logic mio_outsel_13_we;
  logic [5:0] mio_outsel_13_qs;
  logic [5:0] mio_outsel_13_wd;
  logic mio_outsel_14_we;
  logic [5:0] mio_outsel_14_qs;
  logic [5:0] mio_outsel_14_wd;
  logic mio_outsel_15_we;
  logic [5:0] mio_outsel_15_qs;
  logic [5:0] mio_outsel_15_wd;
  logic mio_outsel_16_we;
  logic [5:0] mio_outsel_16_qs;
  logic [5:0] mio_outsel_16_wd;
  logic mio_outsel_17_we;
  logic [5:0] mio_outsel_17_qs;
  logic [5:0] mio_outsel_17_wd;
  logic mio_outsel_18_we;
  logic [5:0] mio_outsel_18_qs;
  logic [5:0] mio_outsel_18_wd;
  logic mio_outsel_19_we;
  logic [5:0] mio_outsel_19_qs;
  logic [5:0] mio_outsel_19_wd;
  logic mio_outsel_20_we;
  logic [5:0] mio_outsel_20_qs;
  logic [5:0] mio_outsel_20_wd;
  logic mio_outsel_21_we;
  logic [5:0] mio_outsel_21_qs;
  logic [5:0] mio_outsel_21_wd;
  logic mio_outsel_22_we;
  logic [5:0] mio_outsel_22_qs;
  logic [5:0] mio_outsel_22_wd;
  logic mio_outsel_23_we;
  logic [5:0] mio_outsel_23_qs;
  logic [5:0] mio_outsel_23_wd;
  logic mio_outsel_24_we;
  logic [5:0] mio_outsel_24_qs;
  logic [5:0] mio_outsel_24_wd;
  logic mio_outsel_25_we;
  logic [5:0] mio_outsel_25_qs;
  logic [5:0] mio_outsel_25_wd;
  logic mio_outsel_26_we;
  logic [5:0] mio_outsel_26_qs;
  logic [5:0] mio_outsel_26_wd;
  logic mio_outsel_27_we;
  logic [5:0] mio_outsel_27_qs;
  logic [5:0] mio_outsel_27_wd;
  logic mio_outsel_28_we;
  logic [5:0] mio_outsel_28_qs;
  logic [5:0] mio_outsel_28_wd;
  logic mio_outsel_29_we;
  logic [5:0] mio_outsel_29_qs;
  logic [5:0] mio_outsel_29_wd;
  logic mio_outsel_30_we;
  logic [5:0] mio_outsel_30_qs;
  logic [5:0] mio_outsel_30_wd;
  logic mio_outsel_31_we;
  logic [5:0] mio_outsel_31_qs;
  logic [5:0] mio_outsel_31_wd;
  logic mio_pad_attr_regwen_0_we;
  logic mio_pad_attr_regwen_0_qs;
  logic mio_pad_attr_regwen_0_wd;
  logic mio_pad_attr_regwen_1_we;
  logic mio_pad_attr_regwen_1_qs;
  logic mio_pad_attr_regwen_1_wd;
  logic mio_pad_attr_regwen_2_we;
  logic mio_pad_attr_regwen_2_qs;
  logic mio_pad_attr_regwen_2_wd;
  logic mio_pad_attr_regwen_3_we;
  logic mio_pad_attr_regwen_3_qs;
  logic mio_pad_attr_regwen_3_wd;
  logic mio_pad_attr_regwen_4_we;
  logic mio_pad_attr_regwen_4_qs;
  logic mio_pad_attr_regwen_4_wd;
  logic mio_pad_attr_regwen_5_we;
  logic mio_pad_attr_regwen_5_qs;
  logic mio_pad_attr_regwen_5_wd;
  logic mio_pad_attr_regwen_6_we;
  logic mio_pad_attr_regwen_6_qs;
  logic mio_pad_attr_regwen_6_wd;
  logic mio_pad_attr_regwen_7_we;
  logic mio_pad_attr_regwen_7_qs;
  logic mio_pad_attr_regwen_7_wd;
  logic mio_pad_attr_regwen_8_we;
  logic mio_pad_attr_regwen_8_qs;
  logic mio_pad_attr_regwen_8_wd;
  logic mio_pad_attr_regwen_9_we;
  logic mio_pad_attr_regwen_9_qs;
  logic mio_pad_attr_regwen_9_wd;
  logic mio_pad_attr_regwen_10_we;
  logic mio_pad_attr_regwen_10_qs;
  logic mio_pad_attr_regwen_10_wd;
  logic mio_pad_attr_regwen_11_we;
  logic mio_pad_attr_regwen_11_qs;
  logic mio_pad_attr_regwen_11_wd;
  logic mio_pad_attr_regwen_12_we;
  logic mio_pad_attr_regwen_12_qs;
  logic mio_pad_attr_regwen_12_wd;
  logic mio_pad_attr_regwen_13_we;
  logic mio_pad_attr_regwen_13_qs;
  logic mio_pad_attr_regwen_13_wd;
  logic mio_pad_attr_regwen_14_we;
  logic mio_pad_attr_regwen_14_qs;
  logic mio_pad_attr_regwen_14_wd;
  logic mio_pad_attr_regwen_15_we;
  logic mio_pad_attr_regwen_15_qs;
  logic mio_pad_attr_regwen_15_wd;
  logic mio_pad_attr_regwen_16_we;
  logic mio_pad_attr_regwen_16_qs;
  logic mio_pad_attr_regwen_16_wd;
  logic mio_pad_attr_regwen_17_we;
  logic mio_pad_attr_regwen_17_qs;
  logic mio_pad_attr_regwen_17_wd;
  logic mio_pad_attr_regwen_18_we;
  logic mio_pad_attr_regwen_18_qs;
  logic mio_pad_attr_regwen_18_wd;
  logic mio_pad_attr_regwen_19_we;
  logic mio_pad_attr_regwen_19_qs;
  logic mio_pad_attr_regwen_19_wd;
  logic mio_pad_attr_regwen_20_we;
  logic mio_pad_attr_regwen_20_qs;
  logic mio_pad_attr_regwen_20_wd;
  logic mio_pad_attr_regwen_21_we;
  logic mio_pad_attr_regwen_21_qs;
  logic mio_pad_attr_regwen_21_wd;
  logic mio_pad_attr_regwen_22_we;
  logic mio_pad_attr_regwen_22_qs;
  logic mio_pad_attr_regwen_22_wd;
  logic mio_pad_attr_regwen_23_we;
  logic mio_pad_attr_regwen_23_qs;
  logic mio_pad_attr_regwen_23_wd;
  logic mio_pad_attr_regwen_24_we;
  logic mio_pad_attr_regwen_24_qs;
  logic mio_pad_attr_regwen_24_wd;
  logic mio_pad_attr_regwen_25_we;
  logic mio_pad_attr_regwen_25_qs;
  logic mio_pad_attr_regwen_25_wd;
  logic mio_pad_attr_regwen_26_we;
  logic mio_pad_attr_regwen_26_qs;
  logic mio_pad_attr_regwen_26_wd;
  logic mio_pad_attr_regwen_27_we;
  logic mio_pad_attr_regwen_27_qs;
  logic mio_pad_attr_regwen_27_wd;
  logic mio_pad_attr_regwen_28_we;
  logic mio_pad_attr_regwen_28_qs;
  logic mio_pad_attr_regwen_28_wd;
  logic mio_pad_attr_regwen_29_we;
  logic mio_pad_attr_regwen_29_qs;
  logic mio_pad_attr_regwen_29_wd;
  logic mio_pad_attr_regwen_30_we;
  logic mio_pad_attr_regwen_30_qs;
  logic mio_pad_attr_regwen_30_wd;
  logic mio_pad_attr_regwen_31_we;
  logic mio_pad_attr_regwen_31_qs;
  logic mio_pad_attr_regwen_31_wd;
  logic mio_pad_attr_0_re;
  logic mio_pad_attr_0_we;
  logic mio_pad_attr_0_invert_0_qs;
  logic mio_pad_attr_0_invert_0_wd;
  logic mio_pad_attr_0_virtual_od_en_0_qs;
  logic mio_pad_attr_0_virtual_od_en_0_wd;
  logic mio_pad_attr_0_pull_en_0_qs;
  logic mio_pad_attr_0_pull_en_0_wd;
  logic mio_pad_attr_0_pull_select_0_qs;
  logic mio_pad_attr_0_pull_select_0_wd;
  logic mio_pad_attr_0_keeper_en_0_qs;
  logic mio_pad_attr_0_keeper_en_0_wd;
  logic mio_pad_attr_0_schmitt_en_0_qs;
  logic mio_pad_attr_0_schmitt_en_0_wd;
  logic mio_pad_attr_0_od_en_0_qs;
  logic mio_pad_attr_0_od_en_0_wd;
  logic [1:0] mio_pad_attr_0_slew_rate_0_qs;
  logic [1:0] mio_pad_attr_0_slew_rate_0_wd;
  logic [3:0] mio_pad_attr_0_drive_strength_0_qs;
  logic [3:0] mio_pad_attr_0_drive_strength_0_wd;
  logic mio_pad_attr_1_re;
  logic mio_pad_attr_1_we;
  logic mio_pad_attr_1_invert_1_qs;
  logic mio_pad_attr_1_invert_1_wd;
  logic mio_pad_attr_1_virtual_od_en_1_qs;
  logic mio_pad_attr_1_virtual_od_en_1_wd;
  logic mio_pad_attr_1_pull_en_1_qs;
  logic mio_pad_attr_1_pull_en_1_wd;
  logic mio_pad_attr_1_pull_select_1_qs;
  logic mio_pad_attr_1_pull_select_1_wd;
  logic mio_pad_attr_1_keeper_en_1_qs;
  logic mio_pad_attr_1_keeper_en_1_wd;
  logic mio_pad_attr_1_schmitt_en_1_qs;
  logic mio_pad_attr_1_schmitt_en_1_wd;
  logic mio_pad_attr_1_od_en_1_qs;
  logic mio_pad_attr_1_od_en_1_wd;
  logic [1:0] mio_pad_attr_1_slew_rate_1_qs;
  logic [1:0] mio_pad_attr_1_slew_rate_1_wd;
  logic [3:0] mio_pad_attr_1_drive_strength_1_qs;
  logic [3:0] mio_pad_attr_1_drive_strength_1_wd;
  logic mio_pad_attr_2_re;
  logic mio_pad_attr_2_we;
  logic mio_pad_attr_2_invert_2_qs;
  logic mio_pad_attr_2_invert_2_wd;
  logic mio_pad_attr_2_virtual_od_en_2_qs;
  logic mio_pad_attr_2_virtual_od_en_2_wd;
  logic mio_pad_attr_2_pull_en_2_qs;
  logic mio_pad_attr_2_pull_en_2_wd;
  logic mio_pad_attr_2_pull_select_2_qs;
  logic mio_pad_attr_2_pull_select_2_wd;
  logic mio_pad_attr_2_keeper_en_2_qs;
  logic mio_pad_attr_2_keeper_en_2_wd;
  logic mio_pad_attr_2_schmitt_en_2_qs;
  logic mio_pad_attr_2_schmitt_en_2_wd;
  logic mio_pad_attr_2_od_en_2_qs;
  logic mio_pad_attr_2_od_en_2_wd;
  logic [1:0] mio_pad_attr_2_slew_rate_2_qs;
  logic [1:0] mio_pad_attr_2_slew_rate_2_wd;
  logic [3:0] mio_pad_attr_2_drive_strength_2_qs;
  logic [3:0] mio_pad_attr_2_drive_strength_2_wd;
  logic mio_pad_attr_3_re;
  logic mio_pad_attr_3_we;
  logic mio_pad_attr_3_invert_3_qs;
  logic mio_pad_attr_3_invert_3_wd;
  logic mio_pad_attr_3_virtual_od_en_3_qs;
  logic mio_pad_attr_3_virtual_od_en_3_wd;
  logic mio_pad_attr_3_pull_en_3_qs;
  logic mio_pad_attr_3_pull_en_3_wd;
  logic mio_pad_attr_3_pull_select_3_qs;
  logic mio_pad_attr_3_pull_select_3_wd;
  logic mio_pad_attr_3_keeper_en_3_qs;
  logic mio_pad_attr_3_keeper_en_3_wd;
  logic mio_pad_attr_3_schmitt_en_3_qs;
  logic mio_pad_attr_3_schmitt_en_3_wd;
  logic mio_pad_attr_3_od_en_3_qs;
  logic mio_pad_attr_3_od_en_3_wd;
  logic [1:0] mio_pad_attr_3_slew_rate_3_qs;
  logic [1:0] mio_pad_attr_3_slew_rate_3_wd;
  logic [3:0] mio_pad_attr_3_drive_strength_3_qs;
  logic [3:0] mio_pad_attr_3_drive_strength_3_wd;
  logic mio_pad_attr_4_re;
  logic mio_pad_attr_4_we;
  logic mio_pad_attr_4_invert_4_qs;
  logic mio_pad_attr_4_invert_4_wd;
  logic mio_pad_attr_4_virtual_od_en_4_qs;
  logic mio_pad_attr_4_virtual_od_en_4_wd;
  logic mio_pad_attr_4_pull_en_4_qs;
  logic mio_pad_attr_4_pull_en_4_wd;
  logic mio_pad_attr_4_pull_select_4_qs;
  logic mio_pad_attr_4_pull_select_4_wd;
  logic mio_pad_attr_4_keeper_en_4_qs;
  logic mio_pad_attr_4_keeper_en_4_wd;
  logic mio_pad_attr_4_schmitt_en_4_qs;
  logic mio_pad_attr_4_schmitt_en_4_wd;
  logic mio_pad_attr_4_od_en_4_qs;
  logic mio_pad_attr_4_od_en_4_wd;
  logic [1:0] mio_pad_attr_4_slew_rate_4_qs;
  logic [1:0] mio_pad_attr_4_slew_rate_4_wd;
  logic [3:0] mio_pad_attr_4_drive_strength_4_qs;
  logic [3:0] mio_pad_attr_4_drive_strength_4_wd;
  logic mio_pad_attr_5_re;
  logic mio_pad_attr_5_we;
  logic mio_pad_attr_5_invert_5_qs;
  logic mio_pad_attr_5_invert_5_wd;
  logic mio_pad_attr_5_virtual_od_en_5_qs;
  logic mio_pad_attr_5_virtual_od_en_5_wd;
  logic mio_pad_attr_5_pull_en_5_qs;
  logic mio_pad_attr_5_pull_en_5_wd;
  logic mio_pad_attr_5_pull_select_5_qs;
  logic mio_pad_attr_5_pull_select_5_wd;
  logic mio_pad_attr_5_keeper_en_5_qs;
  logic mio_pad_attr_5_keeper_en_5_wd;
  logic mio_pad_attr_5_schmitt_en_5_qs;
  logic mio_pad_attr_5_schmitt_en_5_wd;
  logic mio_pad_attr_5_od_en_5_qs;
  logic mio_pad_attr_5_od_en_5_wd;
  logic [1:0] mio_pad_attr_5_slew_rate_5_qs;
  logic [1:0] mio_pad_attr_5_slew_rate_5_wd;
  logic [3:0] mio_pad_attr_5_drive_strength_5_qs;
  logic [3:0] mio_pad_attr_5_drive_strength_5_wd;
  logic mio_pad_attr_6_re;
  logic mio_pad_attr_6_we;
  logic mio_pad_attr_6_invert_6_qs;
  logic mio_pad_attr_6_invert_6_wd;
  logic mio_pad_attr_6_virtual_od_en_6_qs;
  logic mio_pad_attr_6_virtual_od_en_6_wd;
  logic mio_pad_attr_6_pull_en_6_qs;
  logic mio_pad_attr_6_pull_en_6_wd;
  logic mio_pad_attr_6_pull_select_6_qs;
  logic mio_pad_attr_6_pull_select_6_wd;
  logic mio_pad_attr_6_keeper_en_6_qs;
  logic mio_pad_attr_6_keeper_en_6_wd;
  logic mio_pad_attr_6_schmitt_en_6_qs;
  logic mio_pad_attr_6_schmitt_en_6_wd;
  logic mio_pad_attr_6_od_en_6_qs;
  logic mio_pad_attr_6_od_en_6_wd;
  logic [1:0] mio_pad_attr_6_slew_rate_6_qs;
  logic [1:0] mio_pad_attr_6_slew_rate_6_wd;
  logic [3:0] mio_pad_attr_6_drive_strength_6_qs;
  logic [3:0] mio_pad_attr_6_drive_strength_6_wd;
  logic mio_pad_attr_7_re;
  logic mio_pad_attr_7_we;
  logic mio_pad_attr_7_invert_7_qs;
  logic mio_pad_attr_7_invert_7_wd;
  logic mio_pad_attr_7_virtual_od_en_7_qs;
  logic mio_pad_attr_7_virtual_od_en_7_wd;
  logic mio_pad_attr_7_pull_en_7_qs;
  logic mio_pad_attr_7_pull_en_7_wd;
  logic mio_pad_attr_7_pull_select_7_qs;
  logic mio_pad_attr_7_pull_select_7_wd;
  logic mio_pad_attr_7_keeper_en_7_qs;
  logic mio_pad_attr_7_keeper_en_7_wd;
  logic mio_pad_attr_7_schmitt_en_7_qs;
  logic mio_pad_attr_7_schmitt_en_7_wd;
  logic mio_pad_attr_7_od_en_7_qs;
  logic mio_pad_attr_7_od_en_7_wd;
  logic [1:0] mio_pad_attr_7_slew_rate_7_qs;
  logic [1:0] mio_pad_attr_7_slew_rate_7_wd;
  logic [3:0] mio_pad_attr_7_drive_strength_7_qs;
  logic [3:0] mio_pad_attr_7_drive_strength_7_wd;
  logic mio_pad_attr_8_re;
  logic mio_pad_attr_8_we;
  logic mio_pad_attr_8_invert_8_qs;
  logic mio_pad_attr_8_invert_8_wd;
  logic mio_pad_attr_8_virtual_od_en_8_qs;
  logic mio_pad_attr_8_virtual_od_en_8_wd;
  logic mio_pad_attr_8_pull_en_8_qs;
  logic mio_pad_attr_8_pull_en_8_wd;
  logic mio_pad_attr_8_pull_select_8_qs;
  logic mio_pad_attr_8_pull_select_8_wd;
  logic mio_pad_attr_8_keeper_en_8_qs;
  logic mio_pad_attr_8_keeper_en_8_wd;
  logic mio_pad_attr_8_schmitt_en_8_qs;
  logic mio_pad_attr_8_schmitt_en_8_wd;
  logic mio_pad_attr_8_od_en_8_qs;
  logic mio_pad_attr_8_od_en_8_wd;
  logic [1:0] mio_pad_attr_8_slew_rate_8_qs;
  logic [1:0] mio_pad_attr_8_slew_rate_8_wd;
  logic [3:0] mio_pad_attr_8_drive_strength_8_qs;
  logic [3:0] mio_pad_attr_8_drive_strength_8_wd;
  logic mio_pad_attr_9_re;
  logic mio_pad_attr_9_we;
  logic mio_pad_attr_9_invert_9_qs;
  logic mio_pad_attr_9_invert_9_wd;
  logic mio_pad_attr_9_virtual_od_en_9_qs;
  logic mio_pad_attr_9_virtual_od_en_9_wd;
  logic mio_pad_attr_9_pull_en_9_qs;
  logic mio_pad_attr_9_pull_en_9_wd;
  logic mio_pad_attr_9_pull_select_9_qs;
  logic mio_pad_attr_9_pull_select_9_wd;
  logic mio_pad_attr_9_keeper_en_9_qs;
  logic mio_pad_attr_9_keeper_en_9_wd;
  logic mio_pad_attr_9_schmitt_en_9_qs;
  logic mio_pad_attr_9_schmitt_en_9_wd;
  logic mio_pad_attr_9_od_en_9_qs;
  logic mio_pad_attr_9_od_en_9_wd;
  logic [1:0] mio_pad_attr_9_slew_rate_9_qs;
  logic [1:0] mio_pad_attr_9_slew_rate_9_wd;
  logic [3:0] mio_pad_attr_9_drive_strength_9_qs;
  logic [3:0] mio_pad_attr_9_drive_strength_9_wd;
  logic mio_pad_attr_10_re;
  logic mio_pad_attr_10_we;
  logic mio_pad_attr_10_invert_10_qs;
  logic mio_pad_attr_10_invert_10_wd;
  logic mio_pad_attr_10_virtual_od_en_10_qs;
  logic mio_pad_attr_10_virtual_od_en_10_wd;
  logic mio_pad_attr_10_pull_en_10_qs;
  logic mio_pad_attr_10_pull_en_10_wd;
  logic mio_pad_attr_10_pull_select_10_qs;
  logic mio_pad_attr_10_pull_select_10_wd;
  logic mio_pad_attr_10_keeper_en_10_qs;
  logic mio_pad_attr_10_keeper_en_10_wd;
  logic mio_pad_attr_10_schmitt_en_10_qs;
  logic mio_pad_attr_10_schmitt_en_10_wd;
  logic mio_pad_attr_10_od_en_10_qs;
  logic mio_pad_attr_10_od_en_10_wd;
  logic [1:0] mio_pad_attr_10_slew_rate_10_qs;
  logic [1:0] mio_pad_attr_10_slew_rate_10_wd;
  logic [3:0] mio_pad_attr_10_drive_strength_10_qs;
  logic [3:0] mio_pad_attr_10_drive_strength_10_wd;
  logic mio_pad_attr_11_re;
  logic mio_pad_attr_11_we;
  logic mio_pad_attr_11_invert_11_qs;
  logic mio_pad_attr_11_invert_11_wd;
  logic mio_pad_attr_11_virtual_od_en_11_qs;
  logic mio_pad_attr_11_virtual_od_en_11_wd;
  logic mio_pad_attr_11_pull_en_11_qs;
  logic mio_pad_attr_11_pull_en_11_wd;
  logic mio_pad_attr_11_pull_select_11_qs;
  logic mio_pad_attr_11_pull_select_11_wd;
  logic mio_pad_attr_11_keeper_en_11_qs;
  logic mio_pad_attr_11_keeper_en_11_wd;
  logic mio_pad_attr_11_schmitt_en_11_qs;
  logic mio_pad_attr_11_schmitt_en_11_wd;
  logic mio_pad_attr_11_od_en_11_qs;
  logic mio_pad_attr_11_od_en_11_wd;
  logic [1:0] mio_pad_attr_11_slew_rate_11_qs;
  logic [1:0] mio_pad_attr_11_slew_rate_11_wd;
  logic [3:0] mio_pad_attr_11_drive_strength_11_qs;
  logic [3:0] mio_pad_attr_11_drive_strength_11_wd;
  logic mio_pad_attr_12_re;
  logic mio_pad_attr_12_we;
  logic mio_pad_attr_12_invert_12_qs;
  logic mio_pad_attr_12_invert_12_wd;
  logic mio_pad_attr_12_virtual_od_en_12_qs;
  logic mio_pad_attr_12_virtual_od_en_12_wd;
  logic mio_pad_attr_12_pull_en_12_qs;
  logic mio_pad_attr_12_pull_en_12_wd;
  logic mio_pad_attr_12_pull_select_12_qs;
  logic mio_pad_attr_12_pull_select_12_wd;
  logic mio_pad_attr_12_keeper_en_12_qs;
  logic mio_pad_attr_12_keeper_en_12_wd;
  logic mio_pad_attr_12_schmitt_en_12_qs;
  logic mio_pad_attr_12_schmitt_en_12_wd;
  logic mio_pad_attr_12_od_en_12_qs;
  logic mio_pad_attr_12_od_en_12_wd;
  logic [1:0] mio_pad_attr_12_slew_rate_12_qs;
  logic [1:0] mio_pad_attr_12_slew_rate_12_wd;
  logic [3:0] mio_pad_attr_12_drive_strength_12_qs;
  logic [3:0] mio_pad_attr_12_drive_strength_12_wd;
  logic mio_pad_attr_13_re;
  logic mio_pad_attr_13_we;
  logic mio_pad_attr_13_invert_13_qs;
  logic mio_pad_attr_13_invert_13_wd;
  logic mio_pad_attr_13_virtual_od_en_13_qs;
  logic mio_pad_attr_13_virtual_od_en_13_wd;
  logic mio_pad_attr_13_pull_en_13_qs;
  logic mio_pad_attr_13_pull_en_13_wd;
  logic mio_pad_attr_13_pull_select_13_qs;
  logic mio_pad_attr_13_pull_select_13_wd;
  logic mio_pad_attr_13_keeper_en_13_qs;
  logic mio_pad_attr_13_keeper_en_13_wd;
  logic mio_pad_attr_13_schmitt_en_13_qs;
  logic mio_pad_attr_13_schmitt_en_13_wd;
  logic mio_pad_attr_13_od_en_13_qs;
  logic mio_pad_attr_13_od_en_13_wd;
  logic [1:0] mio_pad_attr_13_slew_rate_13_qs;
  logic [1:0] mio_pad_attr_13_slew_rate_13_wd;
  logic [3:0] mio_pad_attr_13_drive_strength_13_qs;
  logic [3:0] mio_pad_attr_13_drive_strength_13_wd;
  logic mio_pad_attr_14_re;
  logic mio_pad_attr_14_we;
  logic mio_pad_attr_14_invert_14_qs;
  logic mio_pad_attr_14_invert_14_wd;
  logic mio_pad_attr_14_virtual_od_en_14_qs;
  logic mio_pad_attr_14_virtual_od_en_14_wd;
  logic mio_pad_attr_14_pull_en_14_qs;
  logic mio_pad_attr_14_pull_en_14_wd;
  logic mio_pad_attr_14_pull_select_14_qs;
  logic mio_pad_attr_14_pull_select_14_wd;
  logic mio_pad_attr_14_keeper_en_14_qs;
  logic mio_pad_attr_14_keeper_en_14_wd;
  logic mio_pad_attr_14_schmitt_en_14_qs;
  logic mio_pad_attr_14_schmitt_en_14_wd;
  logic mio_pad_attr_14_od_en_14_qs;
  logic mio_pad_attr_14_od_en_14_wd;
  logic [1:0] mio_pad_attr_14_slew_rate_14_qs;
  logic [1:0] mio_pad_attr_14_slew_rate_14_wd;
  logic [3:0] mio_pad_attr_14_drive_strength_14_qs;
  logic [3:0] mio_pad_attr_14_drive_strength_14_wd;
  logic mio_pad_attr_15_re;
  logic mio_pad_attr_15_we;
  logic mio_pad_attr_15_invert_15_qs;
  logic mio_pad_attr_15_invert_15_wd;
  logic mio_pad_attr_15_virtual_od_en_15_qs;
  logic mio_pad_attr_15_virtual_od_en_15_wd;
  logic mio_pad_attr_15_pull_en_15_qs;
  logic mio_pad_attr_15_pull_en_15_wd;
  logic mio_pad_attr_15_pull_select_15_qs;
  logic mio_pad_attr_15_pull_select_15_wd;
  logic mio_pad_attr_15_keeper_en_15_qs;
  logic mio_pad_attr_15_keeper_en_15_wd;
  logic mio_pad_attr_15_schmitt_en_15_qs;
  logic mio_pad_attr_15_schmitt_en_15_wd;
  logic mio_pad_attr_15_od_en_15_qs;
  logic mio_pad_attr_15_od_en_15_wd;
  logic [1:0] mio_pad_attr_15_slew_rate_15_qs;
  logic [1:0] mio_pad_attr_15_slew_rate_15_wd;
  logic [3:0] mio_pad_attr_15_drive_strength_15_qs;
  logic [3:0] mio_pad_attr_15_drive_strength_15_wd;
  logic mio_pad_attr_16_re;
  logic mio_pad_attr_16_we;
  logic mio_pad_attr_16_invert_16_qs;
  logic mio_pad_attr_16_invert_16_wd;
  logic mio_pad_attr_16_virtual_od_en_16_qs;
  logic mio_pad_attr_16_virtual_od_en_16_wd;
  logic mio_pad_attr_16_pull_en_16_qs;
  logic mio_pad_attr_16_pull_en_16_wd;
  logic mio_pad_attr_16_pull_select_16_qs;
  logic mio_pad_attr_16_pull_select_16_wd;
  logic mio_pad_attr_16_keeper_en_16_qs;
  logic mio_pad_attr_16_keeper_en_16_wd;
  logic mio_pad_attr_16_schmitt_en_16_qs;
  logic mio_pad_attr_16_schmitt_en_16_wd;
  logic mio_pad_attr_16_od_en_16_qs;
  logic mio_pad_attr_16_od_en_16_wd;
  logic [1:0] mio_pad_attr_16_slew_rate_16_qs;
  logic [1:0] mio_pad_attr_16_slew_rate_16_wd;
  logic [3:0] mio_pad_attr_16_drive_strength_16_qs;
  logic [3:0] mio_pad_attr_16_drive_strength_16_wd;
  logic mio_pad_attr_17_re;
  logic mio_pad_attr_17_we;
  logic mio_pad_attr_17_invert_17_qs;
  logic mio_pad_attr_17_invert_17_wd;
  logic mio_pad_attr_17_virtual_od_en_17_qs;
  logic mio_pad_attr_17_virtual_od_en_17_wd;
  logic mio_pad_attr_17_pull_en_17_qs;
  logic mio_pad_attr_17_pull_en_17_wd;
  logic mio_pad_attr_17_pull_select_17_qs;
  logic mio_pad_attr_17_pull_select_17_wd;
  logic mio_pad_attr_17_keeper_en_17_qs;
  logic mio_pad_attr_17_keeper_en_17_wd;
  logic mio_pad_attr_17_schmitt_en_17_qs;
  logic mio_pad_attr_17_schmitt_en_17_wd;
  logic mio_pad_attr_17_od_en_17_qs;
  logic mio_pad_attr_17_od_en_17_wd;
  logic [1:0] mio_pad_attr_17_slew_rate_17_qs;
  logic [1:0] mio_pad_attr_17_slew_rate_17_wd;
  logic [3:0] mio_pad_attr_17_drive_strength_17_qs;
  logic [3:0] mio_pad_attr_17_drive_strength_17_wd;
  logic mio_pad_attr_18_re;
  logic mio_pad_attr_18_we;
  logic mio_pad_attr_18_invert_18_qs;
  logic mio_pad_attr_18_invert_18_wd;
  logic mio_pad_attr_18_virtual_od_en_18_qs;
  logic mio_pad_attr_18_virtual_od_en_18_wd;
  logic mio_pad_attr_18_pull_en_18_qs;
  logic mio_pad_attr_18_pull_en_18_wd;
  logic mio_pad_attr_18_pull_select_18_qs;
  logic mio_pad_attr_18_pull_select_18_wd;
  logic mio_pad_attr_18_keeper_en_18_qs;
  logic mio_pad_attr_18_keeper_en_18_wd;
  logic mio_pad_attr_18_schmitt_en_18_qs;
  logic mio_pad_attr_18_schmitt_en_18_wd;
  logic mio_pad_attr_18_od_en_18_qs;
  logic mio_pad_attr_18_od_en_18_wd;
  logic [1:0] mio_pad_attr_18_slew_rate_18_qs;
  logic [1:0] mio_pad_attr_18_slew_rate_18_wd;
  logic [3:0] mio_pad_attr_18_drive_strength_18_qs;
  logic [3:0] mio_pad_attr_18_drive_strength_18_wd;
  logic mio_pad_attr_19_re;
  logic mio_pad_attr_19_we;
  logic mio_pad_attr_19_invert_19_qs;
  logic mio_pad_attr_19_invert_19_wd;
  logic mio_pad_attr_19_virtual_od_en_19_qs;
  logic mio_pad_attr_19_virtual_od_en_19_wd;
  logic mio_pad_attr_19_pull_en_19_qs;
  logic mio_pad_attr_19_pull_en_19_wd;
  logic mio_pad_attr_19_pull_select_19_qs;
  logic mio_pad_attr_19_pull_select_19_wd;
  logic mio_pad_attr_19_keeper_en_19_qs;
  logic mio_pad_attr_19_keeper_en_19_wd;
  logic mio_pad_attr_19_schmitt_en_19_qs;
  logic mio_pad_attr_19_schmitt_en_19_wd;
  logic mio_pad_attr_19_od_en_19_qs;
  logic mio_pad_attr_19_od_en_19_wd;
  logic [1:0] mio_pad_attr_19_slew_rate_19_qs;
  logic [1:0] mio_pad_attr_19_slew_rate_19_wd;
  logic [3:0] mio_pad_attr_19_drive_strength_19_qs;
  logic [3:0] mio_pad_attr_19_drive_strength_19_wd;
  logic mio_pad_attr_20_re;
  logic mio_pad_attr_20_we;
  logic mio_pad_attr_20_invert_20_qs;
  logic mio_pad_attr_20_invert_20_wd;
  logic mio_pad_attr_20_virtual_od_en_20_qs;
  logic mio_pad_attr_20_virtual_od_en_20_wd;
  logic mio_pad_attr_20_pull_en_20_qs;
  logic mio_pad_attr_20_pull_en_20_wd;
  logic mio_pad_attr_20_pull_select_20_qs;
  logic mio_pad_attr_20_pull_select_20_wd;
  logic mio_pad_attr_20_keeper_en_20_qs;
  logic mio_pad_attr_20_keeper_en_20_wd;
  logic mio_pad_attr_20_schmitt_en_20_qs;
  logic mio_pad_attr_20_schmitt_en_20_wd;
  logic mio_pad_attr_20_od_en_20_qs;
  logic mio_pad_attr_20_od_en_20_wd;
  logic [1:0] mio_pad_attr_20_slew_rate_20_qs;
  logic [1:0] mio_pad_attr_20_slew_rate_20_wd;
  logic [3:0] mio_pad_attr_20_drive_strength_20_qs;
  logic [3:0] mio_pad_attr_20_drive_strength_20_wd;
  logic mio_pad_attr_21_re;
  logic mio_pad_attr_21_we;
  logic mio_pad_attr_21_invert_21_qs;
  logic mio_pad_attr_21_invert_21_wd;
  logic mio_pad_attr_21_virtual_od_en_21_qs;
  logic mio_pad_attr_21_virtual_od_en_21_wd;
  logic mio_pad_attr_21_pull_en_21_qs;
  logic mio_pad_attr_21_pull_en_21_wd;
  logic mio_pad_attr_21_pull_select_21_qs;
  logic mio_pad_attr_21_pull_select_21_wd;
  logic mio_pad_attr_21_keeper_en_21_qs;
  logic mio_pad_attr_21_keeper_en_21_wd;
  logic mio_pad_attr_21_schmitt_en_21_qs;
  logic mio_pad_attr_21_schmitt_en_21_wd;
  logic mio_pad_attr_21_od_en_21_qs;
  logic mio_pad_attr_21_od_en_21_wd;
  logic [1:0] mio_pad_attr_21_slew_rate_21_qs;
  logic [1:0] mio_pad_attr_21_slew_rate_21_wd;
  logic [3:0] mio_pad_attr_21_drive_strength_21_qs;
  logic [3:0] mio_pad_attr_21_drive_strength_21_wd;
  logic mio_pad_attr_22_re;
  logic mio_pad_attr_22_we;
  logic mio_pad_attr_22_invert_22_qs;
  logic mio_pad_attr_22_invert_22_wd;
  logic mio_pad_attr_22_virtual_od_en_22_qs;
  logic mio_pad_attr_22_virtual_od_en_22_wd;
  logic mio_pad_attr_22_pull_en_22_qs;
  logic mio_pad_attr_22_pull_en_22_wd;
  logic mio_pad_attr_22_pull_select_22_qs;
  logic mio_pad_attr_22_pull_select_22_wd;
  logic mio_pad_attr_22_keeper_en_22_qs;
  logic mio_pad_attr_22_keeper_en_22_wd;
  logic mio_pad_attr_22_schmitt_en_22_qs;
  logic mio_pad_attr_22_schmitt_en_22_wd;
  logic mio_pad_attr_22_od_en_22_qs;
  logic mio_pad_attr_22_od_en_22_wd;
  logic [1:0] mio_pad_attr_22_slew_rate_22_qs;
  logic [1:0] mio_pad_attr_22_slew_rate_22_wd;
  logic [3:0] mio_pad_attr_22_drive_strength_22_qs;
  logic [3:0] mio_pad_attr_22_drive_strength_22_wd;
  logic mio_pad_attr_23_re;
  logic mio_pad_attr_23_we;
  logic mio_pad_attr_23_invert_23_qs;
  logic mio_pad_attr_23_invert_23_wd;
  logic mio_pad_attr_23_virtual_od_en_23_qs;
  logic mio_pad_attr_23_virtual_od_en_23_wd;
  logic mio_pad_attr_23_pull_en_23_qs;
  logic mio_pad_attr_23_pull_en_23_wd;
  logic mio_pad_attr_23_pull_select_23_qs;
  logic mio_pad_attr_23_pull_select_23_wd;
  logic mio_pad_attr_23_keeper_en_23_qs;
  logic mio_pad_attr_23_keeper_en_23_wd;
  logic mio_pad_attr_23_schmitt_en_23_qs;
  logic mio_pad_attr_23_schmitt_en_23_wd;
  logic mio_pad_attr_23_od_en_23_qs;
  logic mio_pad_attr_23_od_en_23_wd;
  logic [1:0] mio_pad_attr_23_slew_rate_23_qs;
  logic [1:0] mio_pad_attr_23_slew_rate_23_wd;
  logic [3:0] mio_pad_attr_23_drive_strength_23_qs;
  logic [3:0] mio_pad_attr_23_drive_strength_23_wd;
  logic mio_pad_attr_24_re;
  logic mio_pad_attr_24_we;
  logic mio_pad_attr_24_invert_24_qs;
  logic mio_pad_attr_24_invert_24_wd;
  logic mio_pad_attr_24_virtual_od_en_24_qs;
  logic mio_pad_attr_24_virtual_od_en_24_wd;
  logic mio_pad_attr_24_pull_en_24_qs;
  logic mio_pad_attr_24_pull_en_24_wd;
  logic mio_pad_attr_24_pull_select_24_qs;
  logic mio_pad_attr_24_pull_select_24_wd;
  logic mio_pad_attr_24_keeper_en_24_qs;
  logic mio_pad_attr_24_keeper_en_24_wd;
  logic mio_pad_attr_24_schmitt_en_24_qs;
  logic mio_pad_attr_24_schmitt_en_24_wd;
  logic mio_pad_attr_24_od_en_24_qs;
  logic mio_pad_attr_24_od_en_24_wd;
  logic [1:0] mio_pad_attr_24_slew_rate_24_qs;
  logic [1:0] mio_pad_attr_24_slew_rate_24_wd;
  logic [3:0] mio_pad_attr_24_drive_strength_24_qs;
  logic [3:0] mio_pad_attr_24_drive_strength_24_wd;
  logic mio_pad_attr_25_re;
  logic mio_pad_attr_25_we;
  logic mio_pad_attr_25_invert_25_qs;
  logic mio_pad_attr_25_invert_25_wd;
  logic mio_pad_attr_25_virtual_od_en_25_qs;
  logic mio_pad_attr_25_virtual_od_en_25_wd;
  logic mio_pad_attr_25_pull_en_25_qs;
  logic mio_pad_attr_25_pull_en_25_wd;
  logic mio_pad_attr_25_pull_select_25_qs;
  logic mio_pad_attr_25_pull_select_25_wd;
  logic mio_pad_attr_25_keeper_en_25_qs;
  logic mio_pad_attr_25_keeper_en_25_wd;
  logic mio_pad_attr_25_schmitt_en_25_qs;
  logic mio_pad_attr_25_schmitt_en_25_wd;
  logic mio_pad_attr_25_od_en_25_qs;
  logic mio_pad_attr_25_od_en_25_wd;
  logic [1:0] mio_pad_attr_25_slew_rate_25_qs;
  logic [1:0] mio_pad_attr_25_slew_rate_25_wd;
  logic [3:0] mio_pad_attr_25_drive_strength_25_qs;
  logic [3:0] mio_pad_attr_25_drive_strength_25_wd;
  logic mio_pad_attr_26_re;
  logic mio_pad_attr_26_we;
  logic mio_pad_attr_26_invert_26_qs;
  logic mio_pad_attr_26_invert_26_wd;
  logic mio_pad_attr_26_virtual_od_en_26_qs;
  logic mio_pad_attr_26_virtual_od_en_26_wd;
  logic mio_pad_attr_26_pull_en_26_qs;
  logic mio_pad_attr_26_pull_en_26_wd;
  logic mio_pad_attr_26_pull_select_26_qs;
  logic mio_pad_attr_26_pull_select_26_wd;
  logic mio_pad_attr_26_keeper_en_26_qs;
  logic mio_pad_attr_26_keeper_en_26_wd;
  logic mio_pad_attr_26_schmitt_en_26_qs;
  logic mio_pad_attr_26_schmitt_en_26_wd;
  logic mio_pad_attr_26_od_en_26_qs;
  logic mio_pad_attr_26_od_en_26_wd;
  logic [1:0] mio_pad_attr_26_slew_rate_26_qs;
  logic [1:0] mio_pad_attr_26_slew_rate_26_wd;
  logic [3:0] mio_pad_attr_26_drive_strength_26_qs;
  logic [3:0] mio_pad_attr_26_drive_strength_26_wd;
  logic mio_pad_attr_27_re;
  logic mio_pad_attr_27_we;
  logic mio_pad_attr_27_invert_27_qs;
  logic mio_pad_attr_27_invert_27_wd;
  logic mio_pad_attr_27_virtual_od_en_27_qs;
  logic mio_pad_attr_27_virtual_od_en_27_wd;
  logic mio_pad_attr_27_pull_en_27_qs;
  logic mio_pad_attr_27_pull_en_27_wd;
  logic mio_pad_attr_27_pull_select_27_qs;
  logic mio_pad_attr_27_pull_select_27_wd;
  logic mio_pad_attr_27_keeper_en_27_qs;
  logic mio_pad_attr_27_keeper_en_27_wd;
  logic mio_pad_attr_27_schmitt_en_27_qs;
  logic mio_pad_attr_27_schmitt_en_27_wd;
  logic mio_pad_attr_27_od_en_27_qs;
  logic mio_pad_attr_27_od_en_27_wd;
  logic [1:0] mio_pad_attr_27_slew_rate_27_qs;
  logic [1:0] mio_pad_attr_27_slew_rate_27_wd;
  logic [3:0] mio_pad_attr_27_drive_strength_27_qs;
  logic [3:0] mio_pad_attr_27_drive_strength_27_wd;
  logic mio_pad_attr_28_re;
  logic mio_pad_attr_28_we;
  logic mio_pad_attr_28_invert_28_qs;
  logic mio_pad_attr_28_invert_28_wd;
  logic mio_pad_attr_28_virtual_od_en_28_qs;
  logic mio_pad_attr_28_virtual_od_en_28_wd;
  logic mio_pad_attr_28_pull_en_28_qs;
  logic mio_pad_attr_28_pull_en_28_wd;
  logic mio_pad_attr_28_pull_select_28_qs;
  logic mio_pad_attr_28_pull_select_28_wd;
  logic mio_pad_attr_28_keeper_en_28_qs;
  logic mio_pad_attr_28_keeper_en_28_wd;
  logic mio_pad_attr_28_schmitt_en_28_qs;
  logic mio_pad_attr_28_schmitt_en_28_wd;
  logic mio_pad_attr_28_od_en_28_qs;
  logic mio_pad_attr_28_od_en_28_wd;
  logic [1:0] mio_pad_attr_28_slew_rate_28_qs;
  logic [1:0] mio_pad_attr_28_slew_rate_28_wd;
  logic [3:0] mio_pad_attr_28_drive_strength_28_qs;
  logic [3:0] mio_pad_attr_28_drive_strength_28_wd;
  logic mio_pad_attr_29_re;
  logic mio_pad_attr_29_we;
  logic mio_pad_attr_29_invert_29_qs;
  logic mio_pad_attr_29_invert_29_wd;
  logic mio_pad_attr_29_virtual_od_en_29_qs;
  logic mio_pad_attr_29_virtual_od_en_29_wd;
  logic mio_pad_attr_29_pull_en_29_qs;
  logic mio_pad_attr_29_pull_en_29_wd;
  logic mio_pad_attr_29_pull_select_29_qs;
  logic mio_pad_attr_29_pull_select_29_wd;
  logic mio_pad_attr_29_keeper_en_29_qs;
  logic mio_pad_attr_29_keeper_en_29_wd;
  logic mio_pad_attr_29_schmitt_en_29_qs;
  logic mio_pad_attr_29_schmitt_en_29_wd;
  logic mio_pad_attr_29_od_en_29_qs;
  logic mio_pad_attr_29_od_en_29_wd;
  logic [1:0] mio_pad_attr_29_slew_rate_29_qs;
  logic [1:0] mio_pad_attr_29_slew_rate_29_wd;
  logic [3:0] mio_pad_attr_29_drive_strength_29_qs;
  logic [3:0] mio_pad_attr_29_drive_strength_29_wd;
  logic mio_pad_attr_30_re;
  logic mio_pad_attr_30_we;
  logic mio_pad_attr_30_invert_30_qs;
  logic mio_pad_attr_30_invert_30_wd;
  logic mio_pad_attr_30_virtual_od_en_30_qs;
  logic mio_pad_attr_30_virtual_od_en_30_wd;
  logic mio_pad_attr_30_pull_en_30_qs;
  logic mio_pad_attr_30_pull_en_30_wd;
  logic mio_pad_attr_30_pull_select_30_qs;
  logic mio_pad_attr_30_pull_select_30_wd;
  logic mio_pad_attr_30_keeper_en_30_qs;
  logic mio_pad_attr_30_keeper_en_30_wd;
  logic mio_pad_attr_30_schmitt_en_30_qs;
  logic mio_pad_attr_30_schmitt_en_30_wd;
  logic mio_pad_attr_30_od_en_30_qs;
  logic mio_pad_attr_30_od_en_30_wd;
  logic [1:0] mio_pad_attr_30_slew_rate_30_qs;
  logic [1:0] mio_pad_attr_30_slew_rate_30_wd;
  logic [3:0] mio_pad_attr_30_drive_strength_30_qs;
  logic [3:0] mio_pad_attr_30_drive_strength_30_wd;
  logic mio_pad_attr_31_re;
  logic mio_pad_attr_31_we;
  logic mio_pad_attr_31_invert_31_qs;
  logic mio_pad_attr_31_invert_31_wd;
  logic mio_pad_attr_31_virtual_od_en_31_qs;
  logic mio_pad_attr_31_virtual_od_en_31_wd;
  logic mio_pad_attr_31_pull_en_31_qs;
  logic mio_pad_attr_31_pull_en_31_wd;
  logic mio_pad_attr_31_pull_select_31_qs;
  logic mio_pad_attr_31_pull_select_31_wd;
  logic mio_pad_attr_31_keeper_en_31_qs;
  logic mio_pad_attr_31_keeper_en_31_wd;
  logic mio_pad_attr_31_schmitt_en_31_qs;
  logic mio_pad_attr_31_schmitt_en_31_wd;
  logic mio_pad_attr_31_od_en_31_qs;
  logic mio_pad_attr_31_od_en_31_wd;
  logic [1:0] mio_pad_attr_31_slew_rate_31_qs;
  logic [1:0] mio_pad_attr_31_slew_rate_31_wd;
  logic [3:0] mio_pad_attr_31_drive_strength_31_qs;
  logic [3:0] mio_pad_attr_31_drive_strength_31_wd;
  logic dio_pad_attr_regwen_0_we;
  logic dio_pad_attr_regwen_0_qs;
  logic dio_pad_attr_regwen_0_wd;
  logic dio_pad_attr_regwen_1_we;
  logic dio_pad_attr_regwen_1_qs;
  logic dio_pad_attr_regwen_1_wd;
  logic dio_pad_attr_regwen_2_we;
  logic dio_pad_attr_regwen_2_qs;
  logic dio_pad_attr_regwen_2_wd;
  logic dio_pad_attr_regwen_3_we;
  logic dio_pad_attr_regwen_3_qs;
  logic dio_pad_attr_regwen_3_wd;
  logic dio_pad_attr_regwen_4_we;
  logic dio_pad_attr_regwen_4_qs;
  logic dio_pad_attr_regwen_4_wd;
  logic dio_pad_attr_regwen_5_we;
  logic dio_pad_attr_regwen_5_qs;
  logic dio_pad_attr_regwen_5_wd;
  logic dio_pad_attr_regwen_6_we;
  logic dio_pad_attr_regwen_6_qs;
  logic dio_pad_attr_regwen_6_wd;
  logic dio_pad_attr_regwen_7_we;
  logic dio_pad_attr_regwen_7_qs;
  logic dio_pad_attr_regwen_7_wd;
  logic dio_pad_attr_regwen_8_we;
  logic dio_pad_attr_regwen_8_qs;
  logic dio_pad_attr_regwen_8_wd;
  logic dio_pad_attr_regwen_9_we;
  logic dio_pad_attr_regwen_9_qs;
  logic dio_pad_attr_regwen_9_wd;
  logic dio_pad_attr_regwen_10_we;
  logic dio_pad_attr_regwen_10_qs;
  logic dio_pad_attr_regwen_10_wd;
  logic dio_pad_attr_regwen_11_we;
  logic dio_pad_attr_regwen_11_qs;
  logic dio_pad_attr_regwen_11_wd;
  logic dio_pad_attr_regwen_12_we;
  logic dio_pad_attr_regwen_12_qs;
  logic dio_pad_attr_regwen_12_wd;
  logic dio_pad_attr_regwen_13_we;
  logic dio_pad_attr_regwen_13_qs;
  logic dio_pad_attr_regwen_13_wd;
  logic dio_pad_attr_regwen_14_we;
  logic dio_pad_attr_regwen_14_qs;
  logic dio_pad_attr_regwen_14_wd;
  logic dio_pad_attr_regwen_15_we;
  logic dio_pad_attr_regwen_15_qs;
  logic dio_pad_attr_regwen_15_wd;
  logic dio_pad_attr_0_re;
  logic dio_pad_attr_0_we;
  logic dio_pad_attr_0_invert_0_qs;
  logic dio_pad_attr_0_invert_0_wd;
  logic dio_pad_attr_0_virtual_od_en_0_qs;
  logic dio_pad_attr_0_virtual_od_en_0_wd;
  logic dio_pad_attr_0_pull_en_0_qs;
  logic dio_pad_attr_0_pull_en_0_wd;
  logic dio_pad_attr_0_pull_select_0_qs;
  logic dio_pad_attr_0_pull_select_0_wd;
  logic dio_pad_attr_0_keeper_en_0_qs;
  logic dio_pad_attr_0_keeper_en_0_wd;
  logic dio_pad_attr_0_schmitt_en_0_qs;
  logic dio_pad_attr_0_schmitt_en_0_wd;
  logic dio_pad_attr_0_od_en_0_qs;
  logic dio_pad_attr_0_od_en_0_wd;
  logic [1:0] dio_pad_attr_0_slew_rate_0_qs;
  logic [1:0] dio_pad_attr_0_slew_rate_0_wd;
  logic [3:0] dio_pad_attr_0_drive_strength_0_qs;
  logic [3:0] dio_pad_attr_0_drive_strength_0_wd;
  logic dio_pad_attr_1_re;
  logic dio_pad_attr_1_we;
  logic dio_pad_attr_1_invert_1_qs;
  logic dio_pad_attr_1_invert_1_wd;
  logic dio_pad_attr_1_virtual_od_en_1_qs;
  logic dio_pad_attr_1_virtual_od_en_1_wd;
  logic dio_pad_attr_1_pull_en_1_qs;
  logic dio_pad_attr_1_pull_en_1_wd;
  logic dio_pad_attr_1_pull_select_1_qs;
  logic dio_pad_attr_1_pull_select_1_wd;
  logic dio_pad_attr_1_keeper_en_1_qs;
  logic dio_pad_attr_1_keeper_en_1_wd;
  logic dio_pad_attr_1_schmitt_en_1_qs;
  logic dio_pad_attr_1_schmitt_en_1_wd;
  logic dio_pad_attr_1_od_en_1_qs;
  logic dio_pad_attr_1_od_en_1_wd;
  logic [1:0] dio_pad_attr_1_slew_rate_1_qs;
  logic [1:0] dio_pad_attr_1_slew_rate_1_wd;
  logic [3:0] dio_pad_attr_1_drive_strength_1_qs;
  logic [3:0] dio_pad_attr_1_drive_strength_1_wd;
  logic dio_pad_attr_2_re;
  logic dio_pad_attr_2_we;
  logic dio_pad_attr_2_invert_2_qs;
  logic dio_pad_attr_2_invert_2_wd;
  logic dio_pad_attr_2_virtual_od_en_2_qs;
  logic dio_pad_attr_2_virtual_od_en_2_wd;
  logic dio_pad_attr_2_pull_en_2_qs;
  logic dio_pad_attr_2_pull_en_2_wd;
  logic dio_pad_attr_2_pull_select_2_qs;
  logic dio_pad_attr_2_pull_select_2_wd;
  logic dio_pad_attr_2_keeper_en_2_qs;
  logic dio_pad_attr_2_keeper_en_2_wd;
  logic dio_pad_attr_2_schmitt_en_2_qs;
  logic dio_pad_attr_2_schmitt_en_2_wd;
  logic dio_pad_attr_2_od_en_2_qs;
  logic dio_pad_attr_2_od_en_2_wd;
  logic [1:0] dio_pad_attr_2_slew_rate_2_qs;
  logic [1:0] dio_pad_attr_2_slew_rate_2_wd;
  logic [3:0] dio_pad_attr_2_drive_strength_2_qs;
  logic [3:0] dio_pad_attr_2_drive_strength_2_wd;
  logic dio_pad_attr_3_re;
  logic dio_pad_attr_3_we;
  logic dio_pad_attr_3_invert_3_qs;
  logic dio_pad_attr_3_invert_3_wd;
  logic dio_pad_attr_3_virtual_od_en_3_qs;
  logic dio_pad_attr_3_virtual_od_en_3_wd;
  logic dio_pad_attr_3_pull_en_3_qs;
  logic dio_pad_attr_3_pull_en_3_wd;
  logic dio_pad_attr_3_pull_select_3_qs;
  logic dio_pad_attr_3_pull_select_3_wd;
  logic dio_pad_attr_3_keeper_en_3_qs;
  logic dio_pad_attr_3_keeper_en_3_wd;
  logic dio_pad_attr_3_schmitt_en_3_qs;
  logic dio_pad_attr_3_schmitt_en_3_wd;
  logic dio_pad_attr_3_od_en_3_qs;
  logic dio_pad_attr_3_od_en_3_wd;
  logic [1:0] dio_pad_attr_3_slew_rate_3_qs;
  logic [1:0] dio_pad_attr_3_slew_rate_3_wd;
  logic [3:0] dio_pad_attr_3_drive_strength_3_qs;
  logic [3:0] dio_pad_attr_3_drive_strength_3_wd;
  logic dio_pad_attr_4_re;
  logic dio_pad_attr_4_we;
  logic dio_pad_attr_4_invert_4_qs;
  logic dio_pad_attr_4_invert_4_wd;
  logic dio_pad_attr_4_virtual_od_en_4_qs;
  logic dio_pad_attr_4_virtual_od_en_4_wd;
  logic dio_pad_attr_4_pull_en_4_qs;
  logic dio_pad_attr_4_pull_en_4_wd;
  logic dio_pad_attr_4_pull_select_4_qs;
  logic dio_pad_attr_4_pull_select_4_wd;
  logic dio_pad_attr_4_keeper_en_4_qs;
  logic dio_pad_attr_4_keeper_en_4_wd;
  logic dio_pad_attr_4_schmitt_en_4_qs;
  logic dio_pad_attr_4_schmitt_en_4_wd;
  logic dio_pad_attr_4_od_en_4_qs;
  logic dio_pad_attr_4_od_en_4_wd;
  logic [1:0] dio_pad_attr_4_slew_rate_4_qs;
  logic [1:0] dio_pad_attr_4_slew_rate_4_wd;
  logic [3:0] dio_pad_attr_4_drive_strength_4_qs;
  logic [3:0] dio_pad_attr_4_drive_strength_4_wd;
  logic dio_pad_attr_5_re;
  logic dio_pad_attr_5_we;
  logic dio_pad_attr_5_invert_5_qs;
  logic dio_pad_attr_5_invert_5_wd;
  logic dio_pad_attr_5_virtual_od_en_5_qs;
  logic dio_pad_attr_5_virtual_od_en_5_wd;
  logic dio_pad_attr_5_pull_en_5_qs;
  logic dio_pad_attr_5_pull_en_5_wd;
  logic dio_pad_attr_5_pull_select_5_qs;
  logic dio_pad_attr_5_pull_select_5_wd;
  logic dio_pad_attr_5_keeper_en_5_qs;
  logic dio_pad_attr_5_keeper_en_5_wd;
  logic dio_pad_attr_5_schmitt_en_5_qs;
  logic dio_pad_attr_5_schmitt_en_5_wd;
  logic dio_pad_attr_5_od_en_5_qs;
  logic dio_pad_attr_5_od_en_5_wd;
  logic [1:0] dio_pad_attr_5_slew_rate_5_qs;
  logic [1:0] dio_pad_attr_5_slew_rate_5_wd;
  logic [3:0] dio_pad_attr_5_drive_strength_5_qs;
  logic [3:0] dio_pad_attr_5_drive_strength_5_wd;
  logic dio_pad_attr_6_re;
  logic dio_pad_attr_6_we;
  logic dio_pad_attr_6_invert_6_qs;
  logic dio_pad_attr_6_invert_6_wd;
  logic dio_pad_attr_6_virtual_od_en_6_qs;
  logic dio_pad_attr_6_virtual_od_en_6_wd;
  logic dio_pad_attr_6_pull_en_6_qs;
  logic dio_pad_attr_6_pull_en_6_wd;
  logic dio_pad_attr_6_pull_select_6_qs;
  logic dio_pad_attr_6_pull_select_6_wd;
  logic dio_pad_attr_6_keeper_en_6_qs;
  logic dio_pad_attr_6_keeper_en_6_wd;
  logic dio_pad_attr_6_schmitt_en_6_qs;
  logic dio_pad_attr_6_schmitt_en_6_wd;
  logic dio_pad_attr_6_od_en_6_qs;
  logic dio_pad_attr_6_od_en_6_wd;
  logic [1:0] dio_pad_attr_6_slew_rate_6_qs;
  logic [1:0] dio_pad_attr_6_slew_rate_6_wd;
  logic [3:0] dio_pad_attr_6_drive_strength_6_qs;
  logic [3:0] dio_pad_attr_6_drive_strength_6_wd;
  logic dio_pad_attr_7_re;
  logic dio_pad_attr_7_we;
  logic dio_pad_attr_7_invert_7_qs;
  logic dio_pad_attr_7_invert_7_wd;
  logic dio_pad_attr_7_virtual_od_en_7_qs;
  logic dio_pad_attr_7_virtual_od_en_7_wd;
  logic dio_pad_attr_7_pull_en_7_qs;
  logic dio_pad_attr_7_pull_en_7_wd;
  logic dio_pad_attr_7_pull_select_7_qs;
  logic dio_pad_attr_7_pull_select_7_wd;
  logic dio_pad_attr_7_keeper_en_7_qs;
  logic dio_pad_attr_7_keeper_en_7_wd;
  logic dio_pad_attr_7_schmitt_en_7_qs;
  logic dio_pad_attr_7_schmitt_en_7_wd;
  logic dio_pad_attr_7_od_en_7_qs;
  logic dio_pad_attr_7_od_en_7_wd;
  logic [1:0] dio_pad_attr_7_slew_rate_7_qs;
  logic [1:0] dio_pad_attr_7_slew_rate_7_wd;
  logic [3:0] dio_pad_attr_7_drive_strength_7_qs;
  logic [3:0] dio_pad_attr_7_drive_strength_7_wd;
  logic dio_pad_attr_8_re;
  logic dio_pad_attr_8_we;
  logic dio_pad_attr_8_invert_8_qs;
  logic dio_pad_attr_8_invert_8_wd;
  logic dio_pad_attr_8_virtual_od_en_8_qs;
  logic dio_pad_attr_8_virtual_od_en_8_wd;
  logic dio_pad_attr_8_pull_en_8_qs;
  logic dio_pad_attr_8_pull_en_8_wd;
  logic dio_pad_attr_8_pull_select_8_qs;
  logic dio_pad_attr_8_pull_select_8_wd;
  logic dio_pad_attr_8_keeper_en_8_qs;
  logic dio_pad_attr_8_keeper_en_8_wd;
  logic dio_pad_attr_8_schmitt_en_8_qs;
  logic dio_pad_attr_8_schmitt_en_8_wd;
  logic dio_pad_attr_8_od_en_8_qs;
  logic dio_pad_attr_8_od_en_8_wd;
  logic [1:0] dio_pad_attr_8_slew_rate_8_qs;
  logic [1:0] dio_pad_attr_8_slew_rate_8_wd;
  logic [3:0] dio_pad_attr_8_drive_strength_8_qs;
  logic [3:0] dio_pad_attr_8_drive_strength_8_wd;
  logic dio_pad_attr_9_re;
  logic dio_pad_attr_9_we;
  logic dio_pad_attr_9_invert_9_qs;
  logic dio_pad_attr_9_invert_9_wd;
  logic dio_pad_attr_9_virtual_od_en_9_qs;
  logic dio_pad_attr_9_virtual_od_en_9_wd;
  logic dio_pad_attr_9_pull_en_9_qs;
  logic dio_pad_attr_9_pull_en_9_wd;
  logic dio_pad_attr_9_pull_select_9_qs;
  logic dio_pad_attr_9_pull_select_9_wd;
  logic dio_pad_attr_9_keeper_en_9_qs;
  logic dio_pad_attr_9_keeper_en_9_wd;
  logic dio_pad_attr_9_schmitt_en_9_qs;
  logic dio_pad_attr_9_schmitt_en_9_wd;
  logic dio_pad_attr_9_od_en_9_qs;
  logic dio_pad_attr_9_od_en_9_wd;
  logic [1:0] dio_pad_attr_9_slew_rate_9_qs;
  logic [1:0] dio_pad_attr_9_slew_rate_9_wd;
  logic [3:0] dio_pad_attr_9_drive_strength_9_qs;
  logic [3:0] dio_pad_attr_9_drive_strength_9_wd;
  logic dio_pad_attr_10_re;
  logic dio_pad_attr_10_we;
  logic dio_pad_attr_10_invert_10_qs;
  logic dio_pad_attr_10_invert_10_wd;
  logic dio_pad_attr_10_virtual_od_en_10_qs;
  logic dio_pad_attr_10_virtual_od_en_10_wd;
  logic dio_pad_attr_10_pull_en_10_qs;
  logic dio_pad_attr_10_pull_en_10_wd;
  logic dio_pad_attr_10_pull_select_10_qs;
  logic dio_pad_attr_10_pull_select_10_wd;
  logic dio_pad_attr_10_keeper_en_10_qs;
  logic dio_pad_attr_10_keeper_en_10_wd;
  logic dio_pad_attr_10_schmitt_en_10_qs;
  logic dio_pad_attr_10_schmitt_en_10_wd;
  logic dio_pad_attr_10_od_en_10_qs;
  logic dio_pad_attr_10_od_en_10_wd;
  logic [1:0] dio_pad_attr_10_slew_rate_10_qs;
  logic [1:0] dio_pad_attr_10_slew_rate_10_wd;
  logic [3:0] dio_pad_attr_10_drive_strength_10_qs;
  logic [3:0] dio_pad_attr_10_drive_strength_10_wd;
  logic dio_pad_attr_11_re;
  logic dio_pad_attr_11_we;
  logic dio_pad_attr_11_invert_11_qs;
  logic dio_pad_attr_11_invert_11_wd;
  logic dio_pad_attr_11_virtual_od_en_11_qs;
  logic dio_pad_attr_11_virtual_od_en_11_wd;
  logic dio_pad_attr_11_pull_en_11_qs;
  logic dio_pad_attr_11_pull_en_11_wd;
  logic dio_pad_attr_11_pull_select_11_qs;
  logic dio_pad_attr_11_pull_select_11_wd;
  logic dio_pad_attr_11_keeper_en_11_qs;
  logic dio_pad_attr_11_keeper_en_11_wd;
  logic dio_pad_attr_11_schmitt_en_11_qs;
  logic dio_pad_attr_11_schmitt_en_11_wd;
  logic dio_pad_attr_11_od_en_11_qs;
  logic dio_pad_attr_11_od_en_11_wd;
  logic [1:0] dio_pad_attr_11_slew_rate_11_qs;
  logic [1:0] dio_pad_attr_11_slew_rate_11_wd;
  logic [3:0] dio_pad_attr_11_drive_strength_11_qs;
  logic [3:0] dio_pad_attr_11_drive_strength_11_wd;
  logic dio_pad_attr_12_re;
  logic dio_pad_attr_12_we;
  logic dio_pad_attr_12_invert_12_qs;
  logic dio_pad_attr_12_invert_12_wd;
  logic dio_pad_attr_12_virtual_od_en_12_qs;
  logic dio_pad_attr_12_virtual_od_en_12_wd;
  logic dio_pad_attr_12_pull_en_12_qs;
  logic dio_pad_attr_12_pull_en_12_wd;
  logic dio_pad_attr_12_pull_select_12_qs;
  logic dio_pad_attr_12_pull_select_12_wd;
  logic dio_pad_attr_12_keeper_en_12_qs;
  logic dio_pad_attr_12_keeper_en_12_wd;
  logic dio_pad_attr_12_schmitt_en_12_qs;
  logic dio_pad_attr_12_schmitt_en_12_wd;
  logic dio_pad_attr_12_od_en_12_qs;
  logic dio_pad_attr_12_od_en_12_wd;
  logic [1:0] dio_pad_attr_12_slew_rate_12_qs;
  logic [1:0] dio_pad_attr_12_slew_rate_12_wd;
  logic [3:0] dio_pad_attr_12_drive_strength_12_qs;
  logic [3:0] dio_pad_attr_12_drive_strength_12_wd;
  logic dio_pad_attr_13_re;
  logic dio_pad_attr_13_we;
  logic dio_pad_attr_13_invert_13_qs;
  logic dio_pad_attr_13_invert_13_wd;
  logic dio_pad_attr_13_virtual_od_en_13_qs;
  logic dio_pad_attr_13_virtual_od_en_13_wd;
  logic dio_pad_attr_13_pull_en_13_qs;
  logic dio_pad_attr_13_pull_en_13_wd;
  logic dio_pad_attr_13_pull_select_13_qs;
  logic dio_pad_attr_13_pull_select_13_wd;
  logic dio_pad_attr_13_keeper_en_13_qs;
  logic dio_pad_attr_13_keeper_en_13_wd;
  logic dio_pad_attr_13_schmitt_en_13_qs;
  logic dio_pad_attr_13_schmitt_en_13_wd;
  logic dio_pad_attr_13_od_en_13_qs;
  logic dio_pad_attr_13_od_en_13_wd;
  logic [1:0] dio_pad_attr_13_slew_rate_13_qs;
  logic [1:0] dio_pad_attr_13_slew_rate_13_wd;
  logic [3:0] dio_pad_attr_13_drive_strength_13_qs;
  logic [3:0] dio_pad_attr_13_drive_strength_13_wd;
  logic dio_pad_attr_14_re;
  logic dio_pad_attr_14_we;
  logic dio_pad_attr_14_invert_14_qs;
  logic dio_pad_attr_14_invert_14_wd;
  logic dio_pad_attr_14_virtual_od_en_14_qs;
  logic dio_pad_attr_14_virtual_od_en_14_wd;
  logic dio_pad_attr_14_pull_en_14_qs;
  logic dio_pad_attr_14_pull_en_14_wd;
  logic dio_pad_attr_14_pull_select_14_qs;
  logic dio_pad_attr_14_pull_select_14_wd;
  logic dio_pad_attr_14_keeper_en_14_qs;
  logic dio_pad_attr_14_keeper_en_14_wd;
  logic dio_pad_attr_14_schmitt_en_14_qs;
  logic dio_pad_attr_14_schmitt_en_14_wd;
  logic dio_pad_attr_14_od_en_14_qs;
  logic dio_pad_attr_14_od_en_14_wd;
  logic [1:0] dio_pad_attr_14_slew_rate_14_qs;
  logic [1:0] dio_pad_attr_14_slew_rate_14_wd;
  logic [3:0] dio_pad_attr_14_drive_strength_14_qs;
  logic [3:0] dio_pad_attr_14_drive_strength_14_wd;
  logic dio_pad_attr_15_re;
  logic dio_pad_attr_15_we;
  logic dio_pad_attr_15_invert_15_qs;
  logic dio_pad_attr_15_invert_15_wd;
  logic dio_pad_attr_15_virtual_od_en_15_qs;
  logic dio_pad_attr_15_virtual_od_en_15_wd;
  logic dio_pad_attr_15_pull_en_15_qs;
  logic dio_pad_attr_15_pull_en_15_wd;
  logic dio_pad_attr_15_pull_select_15_qs;
  logic dio_pad_attr_15_pull_select_15_wd;
  logic dio_pad_attr_15_keeper_en_15_qs;
  logic dio_pad_attr_15_keeper_en_15_wd;
  logic dio_pad_attr_15_schmitt_en_15_qs;
  logic dio_pad_attr_15_schmitt_en_15_wd;
  logic dio_pad_attr_15_od_en_15_qs;
  logic dio_pad_attr_15_od_en_15_wd;
  logic [1:0] dio_pad_attr_15_slew_rate_15_qs;
  logic [1:0] dio_pad_attr_15_slew_rate_15_wd;
  logic [3:0] dio_pad_attr_15_drive_strength_15_qs;
  logic [3:0] dio_pad_attr_15_drive_strength_15_wd;
  logic mio_pad_sleep_status_we;
  logic mio_pad_sleep_status_en_0_qs;
  logic mio_pad_sleep_status_en_0_wd;
  logic mio_pad_sleep_status_en_1_qs;
  logic mio_pad_sleep_status_en_1_wd;
  logic mio_pad_sleep_status_en_2_qs;
  logic mio_pad_sleep_status_en_2_wd;
  logic mio_pad_sleep_status_en_3_qs;
  logic mio_pad_sleep_status_en_3_wd;
  logic mio_pad_sleep_status_en_4_qs;
  logic mio_pad_sleep_status_en_4_wd;
  logic mio_pad_sleep_status_en_5_qs;
  logic mio_pad_sleep_status_en_5_wd;
  logic mio_pad_sleep_status_en_6_qs;
  logic mio_pad_sleep_status_en_6_wd;
  logic mio_pad_sleep_status_en_7_qs;
  logic mio_pad_sleep_status_en_7_wd;
  logic mio_pad_sleep_status_en_8_qs;
  logic mio_pad_sleep_status_en_8_wd;
  logic mio_pad_sleep_status_en_9_qs;
  logic mio_pad_sleep_status_en_9_wd;
  logic mio_pad_sleep_status_en_10_qs;
  logic mio_pad_sleep_status_en_10_wd;
  logic mio_pad_sleep_status_en_11_qs;
  logic mio_pad_sleep_status_en_11_wd;
  logic mio_pad_sleep_status_en_12_qs;
  logic mio_pad_sleep_status_en_12_wd;
  logic mio_pad_sleep_status_en_13_qs;
  logic mio_pad_sleep_status_en_13_wd;
  logic mio_pad_sleep_status_en_14_qs;
  logic mio_pad_sleep_status_en_14_wd;
  logic mio_pad_sleep_status_en_15_qs;
  logic mio_pad_sleep_status_en_15_wd;
  logic mio_pad_sleep_status_en_16_qs;
  logic mio_pad_sleep_status_en_16_wd;
  logic mio_pad_sleep_status_en_17_qs;
  logic mio_pad_sleep_status_en_17_wd;
  logic mio_pad_sleep_status_en_18_qs;
  logic mio_pad_sleep_status_en_18_wd;
  logic mio_pad_sleep_status_en_19_qs;
  logic mio_pad_sleep_status_en_19_wd;
  logic mio_pad_sleep_status_en_20_qs;
  logic mio_pad_sleep_status_en_20_wd;
  logic mio_pad_sleep_status_en_21_qs;
  logic mio_pad_sleep_status_en_21_wd;
  logic mio_pad_sleep_status_en_22_qs;
  logic mio_pad_sleep_status_en_22_wd;
  logic mio_pad_sleep_status_en_23_qs;
  logic mio_pad_sleep_status_en_23_wd;
  logic mio_pad_sleep_status_en_24_qs;
  logic mio_pad_sleep_status_en_24_wd;
  logic mio_pad_sleep_status_en_25_qs;
  logic mio_pad_sleep_status_en_25_wd;
  logic mio_pad_sleep_status_en_26_qs;
  logic mio_pad_sleep_status_en_26_wd;
  logic mio_pad_sleep_status_en_27_qs;
  logic mio_pad_sleep_status_en_27_wd;
  logic mio_pad_sleep_status_en_28_qs;
  logic mio_pad_sleep_status_en_28_wd;
  logic mio_pad_sleep_status_en_29_qs;
  logic mio_pad_sleep_status_en_29_wd;
  logic mio_pad_sleep_status_en_30_qs;
  logic mio_pad_sleep_status_en_30_wd;
  logic mio_pad_sleep_status_en_31_qs;
  logic mio_pad_sleep_status_en_31_wd;
  logic mio_pad_sleep_regwen_0_we;
  logic mio_pad_sleep_regwen_0_qs;
  logic mio_pad_sleep_regwen_0_wd;
  logic mio_pad_sleep_regwen_1_we;
  logic mio_pad_sleep_regwen_1_qs;
  logic mio_pad_sleep_regwen_1_wd;
  logic mio_pad_sleep_regwen_2_we;
  logic mio_pad_sleep_regwen_2_qs;
  logic mio_pad_sleep_regwen_2_wd;
  logic mio_pad_sleep_regwen_3_we;
  logic mio_pad_sleep_regwen_3_qs;
  logic mio_pad_sleep_regwen_3_wd;
  logic mio_pad_sleep_regwen_4_we;
  logic mio_pad_sleep_regwen_4_qs;
  logic mio_pad_sleep_regwen_4_wd;
  logic mio_pad_sleep_regwen_5_we;
  logic mio_pad_sleep_regwen_5_qs;
  logic mio_pad_sleep_regwen_5_wd;
  logic mio_pad_sleep_regwen_6_we;
  logic mio_pad_sleep_regwen_6_qs;
  logic mio_pad_sleep_regwen_6_wd;
  logic mio_pad_sleep_regwen_7_we;
  logic mio_pad_sleep_regwen_7_qs;
  logic mio_pad_sleep_regwen_7_wd;
  logic mio_pad_sleep_regwen_8_we;
  logic mio_pad_sleep_regwen_8_qs;
  logic mio_pad_sleep_regwen_8_wd;
  logic mio_pad_sleep_regwen_9_we;
  logic mio_pad_sleep_regwen_9_qs;
  logic mio_pad_sleep_regwen_9_wd;
  logic mio_pad_sleep_regwen_10_we;
  logic mio_pad_sleep_regwen_10_qs;
  logic mio_pad_sleep_regwen_10_wd;
  logic mio_pad_sleep_regwen_11_we;
  logic mio_pad_sleep_regwen_11_qs;
  logic mio_pad_sleep_regwen_11_wd;
  logic mio_pad_sleep_regwen_12_we;
  logic mio_pad_sleep_regwen_12_qs;
  logic mio_pad_sleep_regwen_12_wd;
  logic mio_pad_sleep_regwen_13_we;
  logic mio_pad_sleep_regwen_13_qs;
  logic mio_pad_sleep_regwen_13_wd;
  logic mio_pad_sleep_regwen_14_we;
  logic mio_pad_sleep_regwen_14_qs;
  logic mio_pad_sleep_regwen_14_wd;
  logic mio_pad_sleep_regwen_15_we;
  logic mio_pad_sleep_regwen_15_qs;
  logic mio_pad_sleep_regwen_15_wd;
  logic mio_pad_sleep_regwen_16_we;
  logic mio_pad_sleep_regwen_16_qs;
  logic mio_pad_sleep_regwen_16_wd;
  logic mio_pad_sleep_regwen_17_we;
  logic mio_pad_sleep_regwen_17_qs;
  logic mio_pad_sleep_regwen_17_wd;
  logic mio_pad_sleep_regwen_18_we;
  logic mio_pad_sleep_regwen_18_qs;
  logic mio_pad_sleep_regwen_18_wd;
  logic mio_pad_sleep_regwen_19_we;
  logic mio_pad_sleep_regwen_19_qs;
  logic mio_pad_sleep_regwen_19_wd;
  logic mio_pad_sleep_regwen_20_we;
  logic mio_pad_sleep_regwen_20_qs;
  logic mio_pad_sleep_regwen_20_wd;
  logic mio_pad_sleep_regwen_21_we;
  logic mio_pad_sleep_regwen_21_qs;
  logic mio_pad_sleep_regwen_21_wd;
  logic mio_pad_sleep_regwen_22_we;
  logic mio_pad_sleep_regwen_22_qs;
  logic mio_pad_sleep_regwen_22_wd;
  logic mio_pad_sleep_regwen_23_we;
  logic mio_pad_sleep_regwen_23_qs;
  logic mio_pad_sleep_regwen_23_wd;
  logic mio_pad_sleep_regwen_24_we;
  logic mio_pad_sleep_regwen_24_qs;
  logic mio_pad_sleep_regwen_24_wd;
  logic mio_pad_sleep_regwen_25_we;
  logic mio_pad_sleep_regwen_25_qs;
  logic mio_pad_sleep_regwen_25_wd;
  logic mio_pad_sleep_regwen_26_we;
  logic mio_pad_sleep_regwen_26_qs;
  logic mio_pad_sleep_regwen_26_wd;
  logic mio_pad_sleep_regwen_27_we;
  logic mio_pad_sleep_regwen_27_qs;
  logic mio_pad_sleep_regwen_27_wd;
  logic mio_pad_sleep_regwen_28_we;
  logic mio_pad_sleep_regwen_28_qs;
  logic mio_pad_sleep_regwen_28_wd;
  logic mio_pad_sleep_regwen_29_we;
  logic mio_pad_sleep_regwen_29_qs;
  logic mio_pad_sleep_regwen_29_wd;
  logic mio_pad_sleep_regwen_30_we;
  logic mio_pad_sleep_regwen_30_qs;
  logic mio_pad_sleep_regwen_30_wd;
  logic mio_pad_sleep_regwen_31_we;
  logic mio_pad_sleep_regwen_31_qs;
  logic mio_pad_sleep_regwen_31_wd;
  logic mio_pad_sleep_en_0_we;
  logic mio_pad_sleep_en_0_qs;
  logic mio_pad_sleep_en_0_wd;
  logic mio_pad_sleep_en_1_we;
  logic mio_pad_sleep_en_1_qs;
  logic mio_pad_sleep_en_1_wd;
  logic mio_pad_sleep_en_2_we;
  logic mio_pad_sleep_en_2_qs;
  logic mio_pad_sleep_en_2_wd;
  logic mio_pad_sleep_en_3_we;
  logic mio_pad_sleep_en_3_qs;
  logic mio_pad_sleep_en_3_wd;
  logic mio_pad_sleep_en_4_we;
  logic mio_pad_sleep_en_4_qs;
  logic mio_pad_sleep_en_4_wd;
  logic mio_pad_sleep_en_5_we;
  logic mio_pad_sleep_en_5_qs;
  logic mio_pad_sleep_en_5_wd;
  logic mio_pad_sleep_en_6_we;
  logic mio_pad_sleep_en_6_qs;
  logic mio_pad_sleep_en_6_wd;
  logic mio_pad_sleep_en_7_we;
  logic mio_pad_sleep_en_7_qs;
  logic mio_pad_sleep_en_7_wd;
  logic mio_pad_sleep_en_8_we;
  logic mio_pad_sleep_en_8_qs;
  logic mio_pad_sleep_en_8_wd;
  logic mio_pad_sleep_en_9_we;
  logic mio_pad_sleep_en_9_qs;
  logic mio_pad_sleep_en_9_wd;
  logic mio_pad_sleep_en_10_we;
  logic mio_pad_sleep_en_10_qs;
  logic mio_pad_sleep_en_10_wd;
  logic mio_pad_sleep_en_11_we;
  logic mio_pad_sleep_en_11_qs;
  logic mio_pad_sleep_en_11_wd;
  logic mio_pad_sleep_en_12_we;
  logic mio_pad_sleep_en_12_qs;
  logic mio_pad_sleep_en_12_wd;
  logic mio_pad_sleep_en_13_we;
  logic mio_pad_sleep_en_13_qs;
  logic mio_pad_sleep_en_13_wd;
  logic mio_pad_sleep_en_14_we;
  logic mio_pad_sleep_en_14_qs;
  logic mio_pad_sleep_en_14_wd;
  logic mio_pad_sleep_en_15_we;
  logic mio_pad_sleep_en_15_qs;
  logic mio_pad_sleep_en_15_wd;
  logic mio_pad_sleep_en_16_we;
  logic mio_pad_sleep_en_16_qs;
  logic mio_pad_sleep_en_16_wd;
  logic mio_pad_sleep_en_17_we;
  logic mio_pad_sleep_en_17_qs;
  logic mio_pad_sleep_en_17_wd;
  logic mio_pad_sleep_en_18_we;
  logic mio_pad_sleep_en_18_qs;
  logic mio_pad_sleep_en_18_wd;
  logic mio_pad_sleep_en_19_we;
  logic mio_pad_sleep_en_19_qs;
  logic mio_pad_sleep_en_19_wd;
  logic mio_pad_sleep_en_20_we;
  logic mio_pad_sleep_en_20_qs;
  logic mio_pad_sleep_en_20_wd;
  logic mio_pad_sleep_en_21_we;
  logic mio_pad_sleep_en_21_qs;
  logic mio_pad_sleep_en_21_wd;
  logic mio_pad_sleep_en_22_we;
  logic mio_pad_sleep_en_22_qs;
  logic mio_pad_sleep_en_22_wd;
  logic mio_pad_sleep_en_23_we;
  logic mio_pad_sleep_en_23_qs;
  logic mio_pad_sleep_en_23_wd;
  logic mio_pad_sleep_en_24_we;
  logic mio_pad_sleep_en_24_qs;
  logic mio_pad_sleep_en_24_wd;
  logic mio_pad_sleep_en_25_we;
  logic mio_pad_sleep_en_25_qs;
  logic mio_pad_sleep_en_25_wd;
  logic mio_pad_sleep_en_26_we;
  logic mio_pad_sleep_en_26_qs;
  logic mio_pad_sleep_en_26_wd;
  logic mio_pad_sleep_en_27_we;
  logic mio_pad_sleep_en_27_qs;
  logic mio_pad_sleep_en_27_wd;
  logic mio_pad_sleep_en_28_we;
  logic mio_pad_sleep_en_28_qs;
  logic mio_pad_sleep_en_28_wd;
  logic mio_pad_sleep_en_29_we;
  logic mio_pad_sleep_en_29_qs;
  logic mio_pad_sleep_en_29_wd;
  logic mio_pad_sleep_en_30_we;
  logic mio_pad_sleep_en_30_qs;
  logic mio_pad_sleep_en_30_wd;
  logic mio_pad_sleep_en_31_we;
  logic mio_pad_sleep_en_31_qs;
  logic mio_pad_sleep_en_31_wd;
  logic mio_pad_sleep_mode_0_we;
  logic [1:0] mio_pad_sleep_mode_0_qs;
  logic [1:0] mio_pad_sleep_mode_0_wd;
  logic mio_pad_sleep_mode_1_we;
  logic [1:0] mio_pad_sleep_mode_1_qs;
  logic [1:0] mio_pad_sleep_mode_1_wd;
  logic mio_pad_sleep_mode_2_we;
  logic [1:0] mio_pad_sleep_mode_2_qs;
  logic [1:0] mio_pad_sleep_mode_2_wd;
  logic mio_pad_sleep_mode_3_we;
  logic [1:0] mio_pad_sleep_mode_3_qs;
  logic [1:0] mio_pad_sleep_mode_3_wd;
  logic mio_pad_sleep_mode_4_we;
  logic [1:0] mio_pad_sleep_mode_4_qs;
  logic [1:0] mio_pad_sleep_mode_4_wd;
  logic mio_pad_sleep_mode_5_we;
  logic [1:0] mio_pad_sleep_mode_5_qs;
  logic [1:0] mio_pad_sleep_mode_5_wd;
  logic mio_pad_sleep_mode_6_we;
  logic [1:0] mio_pad_sleep_mode_6_qs;
  logic [1:0] mio_pad_sleep_mode_6_wd;
  logic mio_pad_sleep_mode_7_we;
  logic [1:0] mio_pad_sleep_mode_7_qs;
  logic [1:0] mio_pad_sleep_mode_7_wd;
  logic mio_pad_sleep_mode_8_we;
  logic [1:0] mio_pad_sleep_mode_8_qs;
  logic [1:0] mio_pad_sleep_mode_8_wd;
  logic mio_pad_sleep_mode_9_we;
  logic [1:0] mio_pad_sleep_mode_9_qs;
  logic [1:0] mio_pad_sleep_mode_9_wd;
  logic mio_pad_sleep_mode_10_we;
  logic [1:0] mio_pad_sleep_mode_10_qs;
  logic [1:0] mio_pad_sleep_mode_10_wd;
  logic mio_pad_sleep_mode_11_we;
  logic [1:0] mio_pad_sleep_mode_11_qs;
  logic [1:0] mio_pad_sleep_mode_11_wd;
  logic mio_pad_sleep_mode_12_we;
  logic [1:0] mio_pad_sleep_mode_12_qs;
  logic [1:0] mio_pad_sleep_mode_12_wd;
  logic mio_pad_sleep_mode_13_we;
  logic [1:0] mio_pad_sleep_mode_13_qs;
  logic [1:0] mio_pad_sleep_mode_13_wd;
  logic mio_pad_sleep_mode_14_we;
  logic [1:0] mio_pad_sleep_mode_14_qs;
  logic [1:0] mio_pad_sleep_mode_14_wd;
  logic mio_pad_sleep_mode_15_we;
  logic [1:0] mio_pad_sleep_mode_15_qs;
  logic [1:0] mio_pad_sleep_mode_15_wd;
  logic mio_pad_sleep_mode_16_we;
  logic [1:0] mio_pad_sleep_mode_16_qs;
  logic [1:0] mio_pad_sleep_mode_16_wd;
  logic mio_pad_sleep_mode_17_we;
  logic [1:0] mio_pad_sleep_mode_17_qs;
  logic [1:0] mio_pad_sleep_mode_17_wd;
  logic mio_pad_sleep_mode_18_we;
  logic [1:0] mio_pad_sleep_mode_18_qs;
  logic [1:0] mio_pad_sleep_mode_18_wd;
  logic mio_pad_sleep_mode_19_we;
  logic [1:0] mio_pad_sleep_mode_19_qs;
  logic [1:0] mio_pad_sleep_mode_19_wd;
  logic mio_pad_sleep_mode_20_we;
  logic [1:0] mio_pad_sleep_mode_20_qs;
  logic [1:0] mio_pad_sleep_mode_20_wd;
  logic mio_pad_sleep_mode_21_we;
  logic [1:0] mio_pad_sleep_mode_21_qs;
  logic [1:0] mio_pad_sleep_mode_21_wd;
  logic mio_pad_sleep_mode_22_we;
  logic [1:0] mio_pad_sleep_mode_22_qs;
  logic [1:0] mio_pad_sleep_mode_22_wd;
  logic mio_pad_sleep_mode_23_we;
  logic [1:0] mio_pad_sleep_mode_23_qs;
  logic [1:0] mio_pad_sleep_mode_23_wd;
  logic mio_pad_sleep_mode_24_we;
  logic [1:0] mio_pad_sleep_mode_24_qs;
  logic [1:0] mio_pad_sleep_mode_24_wd;
  logic mio_pad_sleep_mode_25_we;
  logic [1:0] mio_pad_sleep_mode_25_qs;
  logic [1:0] mio_pad_sleep_mode_25_wd;
  logic mio_pad_sleep_mode_26_we;
  logic [1:0] mio_pad_sleep_mode_26_qs;
  logic [1:0] mio_pad_sleep_mode_26_wd;
  logic mio_pad_sleep_mode_27_we;
  logic [1:0] mio_pad_sleep_mode_27_qs;
  logic [1:0] mio_pad_sleep_mode_27_wd;
  logic mio_pad_sleep_mode_28_we;
  logic [1:0] mio_pad_sleep_mode_28_qs;
  logic [1:0] mio_pad_sleep_mode_28_wd;
  logic mio_pad_sleep_mode_29_we;
  logic [1:0] mio_pad_sleep_mode_29_qs;
  logic [1:0] mio_pad_sleep_mode_29_wd;
  logic mio_pad_sleep_mode_30_we;
  logic [1:0] mio_pad_sleep_mode_30_qs;
  logic [1:0] mio_pad_sleep_mode_30_wd;
  logic mio_pad_sleep_mode_31_we;
  logic [1:0] mio_pad_sleep_mode_31_qs;
  logic [1:0] mio_pad_sleep_mode_31_wd;
  logic dio_pad_sleep_status_we;
  logic dio_pad_sleep_status_en_0_qs;
  logic dio_pad_sleep_status_en_0_wd;
  logic dio_pad_sleep_status_en_1_qs;
  logic dio_pad_sleep_status_en_1_wd;
  logic dio_pad_sleep_status_en_2_qs;
  logic dio_pad_sleep_status_en_2_wd;
  logic dio_pad_sleep_status_en_3_qs;
  logic dio_pad_sleep_status_en_3_wd;
  logic dio_pad_sleep_status_en_4_qs;
  logic dio_pad_sleep_status_en_4_wd;
  logic dio_pad_sleep_status_en_5_qs;
  logic dio_pad_sleep_status_en_5_wd;
  logic dio_pad_sleep_status_en_6_qs;
  logic dio_pad_sleep_status_en_6_wd;
  logic dio_pad_sleep_status_en_7_qs;
  logic dio_pad_sleep_status_en_7_wd;
  logic dio_pad_sleep_status_en_8_qs;
  logic dio_pad_sleep_status_en_8_wd;
  logic dio_pad_sleep_status_en_9_qs;
  logic dio_pad_sleep_status_en_9_wd;
  logic dio_pad_sleep_status_en_10_qs;
  logic dio_pad_sleep_status_en_10_wd;
  logic dio_pad_sleep_status_en_11_qs;
  logic dio_pad_sleep_status_en_11_wd;
  logic dio_pad_sleep_status_en_12_qs;
  logic dio_pad_sleep_status_en_12_wd;
  logic dio_pad_sleep_status_en_13_qs;
  logic dio_pad_sleep_status_en_13_wd;
  logic dio_pad_sleep_status_en_14_qs;
  logic dio_pad_sleep_status_en_14_wd;
  logic dio_pad_sleep_status_en_15_qs;
  logic dio_pad_sleep_status_en_15_wd;
  logic dio_pad_sleep_regwen_0_we;
  logic dio_pad_sleep_regwen_0_qs;
  logic dio_pad_sleep_regwen_0_wd;
  logic dio_pad_sleep_regwen_1_we;
  logic dio_pad_sleep_regwen_1_qs;
  logic dio_pad_sleep_regwen_1_wd;
  logic dio_pad_sleep_regwen_2_we;
  logic dio_pad_sleep_regwen_2_qs;
  logic dio_pad_sleep_regwen_2_wd;
  logic dio_pad_sleep_regwen_3_we;
  logic dio_pad_sleep_regwen_3_qs;
  logic dio_pad_sleep_regwen_3_wd;
  logic dio_pad_sleep_regwen_4_we;
  logic dio_pad_sleep_regwen_4_qs;
  logic dio_pad_sleep_regwen_4_wd;
  logic dio_pad_sleep_regwen_5_we;
  logic dio_pad_sleep_regwen_5_qs;
  logic dio_pad_sleep_regwen_5_wd;
  logic dio_pad_sleep_regwen_6_we;
  logic dio_pad_sleep_regwen_6_qs;
  logic dio_pad_sleep_regwen_6_wd;
  logic dio_pad_sleep_regwen_7_we;
  logic dio_pad_sleep_regwen_7_qs;
  logic dio_pad_sleep_regwen_7_wd;
  logic dio_pad_sleep_regwen_8_we;
  logic dio_pad_sleep_regwen_8_qs;
  logic dio_pad_sleep_regwen_8_wd;
  logic dio_pad_sleep_regwen_9_we;
  logic dio_pad_sleep_regwen_9_qs;
  logic dio_pad_sleep_regwen_9_wd;
  logic dio_pad_sleep_regwen_10_we;
  logic dio_pad_sleep_regwen_10_qs;
  logic dio_pad_sleep_regwen_10_wd;
  logic dio_pad_sleep_regwen_11_we;
  logic dio_pad_sleep_regwen_11_qs;
  logic dio_pad_sleep_regwen_11_wd;
  logic dio_pad_sleep_regwen_12_we;
  logic dio_pad_sleep_regwen_12_qs;
  logic dio_pad_sleep_regwen_12_wd;
  logic dio_pad_sleep_regwen_13_we;
  logic dio_pad_sleep_regwen_13_qs;
  logic dio_pad_sleep_regwen_13_wd;
  logic dio_pad_sleep_regwen_14_we;
  logic dio_pad_sleep_regwen_14_qs;
  logic dio_pad_sleep_regwen_14_wd;
  logic dio_pad_sleep_regwen_15_we;
  logic dio_pad_sleep_regwen_15_qs;
  logic dio_pad_sleep_regwen_15_wd;
  logic dio_pad_sleep_en_0_we;
  logic dio_pad_sleep_en_0_qs;
  logic dio_pad_sleep_en_0_wd;
  logic dio_pad_sleep_en_1_we;
  logic dio_pad_sleep_en_1_qs;
  logic dio_pad_sleep_en_1_wd;
  logic dio_pad_sleep_en_2_we;
  logic dio_pad_sleep_en_2_qs;
  logic dio_pad_sleep_en_2_wd;
  logic dio_pad_sleep_en_3_we;
  logic dio_pad_sleep_en_3_qs;
  logic dio_pad_sleep_en_3_wd;
  logic dio_pad_sleep_en_4_we;
  logic dio_pad_sleep_en_4_qs;
  logic dio_pad_sleep_en_4_wd;
  logic dio_pad_sleep_en_5_we;
  logic dio_pad_sleep_en_5_qs;
  logic dio_pad_sleep_en_5_wd;
  logic dio_pad_sleep_en_6_we;
  logic dio_pad_sleep_en_6_qs;
  logic dio_pad_sleep_en_6_wd;
  logic dio_pad_sleep_en_7_we;
  logic dio_pad_sleep_en_7_qs;
  logic dio_pad_sleep_en_7_wd;
  logic dio_pad_sleep_en_8_we;
  logic dio_pad_sleep_en_8_qs;
  logic dio_pad_sleep_en_8_wd;
  logic dio_pad_sleep_en_9_we;
  logic dio_pad_sleep_en_9_qs;
  logic dio_pad_sleep_en_9_wd;
  logic dio_pad_sleep_en_10_we;
  logic dio_pad_sleep_en_10_qs;
  logic dio_pad_sleep_en_10_wd;
  logic dio_pad_sleep_en_11_we;
  logic dio_pad_sleep_en_11_qs;
  logic dio_pad_sleep_en_11_wd;
  logic dio_pad_sleep_en_12_we;
  logic dio_pad_sleep_en_12_qs;
  logic dio_pad_sleep_en_12_wd;
  logic dio_pad_sleep_en_13_we;
  logic dio_pad_sleep_en_13_qs;
  logic dio_pad_sleep_en_13_wd;
  logic dio_pad_sleep_en_14_we;
  logic dio_pad_sleep_en_14_qs;
  logic dio_pad_sleep_en_14_wd;
  logic dio_pad_sleep_en_15_we;
  logic dio_pad_sleep_en_15_qs;
  logic dio_pad_sleep_en_15_wd;
  logic dio_pad_sleep_mode_0_we;
  logic [1:0] dio_pad_sleep_mode_0_qs;
  logic [1:0] dio_pad_sleep_mode_0_wd;
  logic dio_pad_sleep_mode_1_we;
  logic [1:0] dio_pad_sleep_mode_1_qs;
  logic [1:0] dio_pad_sleep_mode_1_wd;
  logic dio_pad_sleep_mode_2_we;
  logic [1:0] dio_pad_sleep_mode_2_qs;
  logic [1:0] dio_pad_sleep_mode_2_wd;
  logic dio_pad_sleep_mode_3_we;
  logic [1:0] dio_pad_sleep_mode_3_qs;
  logic [1:0] dio_pad_sleep_mode_3_wd;
  logic dio_pad_sleep_mode_4_we;
  logic [1:0] dio_pad_sleep_mode_4_qs;
  logic [1:0] dio_pad_sleep_mode_4_wd;
  logic dio_pad_sleep_mode_5_we;
  logic [1:0] dio_pad_sleep_mode_5_qs;
  logic [1:0] dio_pad_sleep_mode_5_wd;
  logic dio_pad_sleep_mode_6_we;
  logic [1:0] dio_pad_sleep_mode_6_qs;
  logic [1:0] dio_pad_sleep_mode_6_wd;
  logic dio_pad_sleep_mode_7_we;
  logic [1:0] dio_pad_sleep_mode_7_qs;
  logic [1:0] dio_pad_sleep_mode_7_wd;
  logic dio_pad_sleep_mode_8_we;
  logic [1:0] dio_pad_sleep_mode_8_qs;
  logic [1:0] dio_pad_sleep_mode_8_wd;
  logic dio_pad_sleep_mode_9_we;
  logic [1:0] dio_pad_sleep_mode_9_qs;
  logic [1:0] dio_pad_sleep_mode_9_wd;
  logic dio_pad_sleep_mode_10_we;
  logic [1:0] dio_pad_sleep_mode_10_qs;
  logic [1:0] dio_pad_sleep_mode_10_wd;
  logic dio_pad_sleep_mode_11_we;
  logic [1:0] dio_pad_sleep_mode_11_qs;
  logic [1:0] dio_pad_sleep_mode_11_wd;
  logic dio_pad_sleep_mode_12_we;
  logic [1:0] dio_pad_sleep_mode_12_qs;
  logic [1:0] dio_pad_sleep_mode_12_wd;
  logic dio_pad_sleep_mode_13_we;
  logic [1:0] dio_pad_sleep_mode_13_qs;
  logic [1:0] dio_pad_sleep_mode_13_wd;
  logic dio_pad_sleep_mode_14_we;
  logic [1:0] dio_pad_sleep_mode_14_qs;
  logic [1:0] dio_pad_sleep_mode_14_wd;
  logic dio_pad_sleep_mode_15_we;
  logic [1:0] dio_pad_sleep_mode_15_qs;
  logic [1:0] dio_pad_sleep_mode_15_wd;
  logic wkup_detector_regwen_0_we;
  logic wkup_detector_regwen_0_qs;
  logic wkup_detector_regwen_0_wd;
  logic wkup_detector_regwen_1_we;
  logic wkup_detector_regwen_1_qs;
  logic wkup_detector_regwen_1_wd;
  logic wkup_detector_regwen_2_we;
  logic wkup_detector_regwen_2_qs;
  logic wkup_detector_regwen_2_wd;
  logic wkup_detector_regwen_3_we;
  logic wkup_detector_regwen_3_qs;
  logic wkup_detector_regwen_3_wd;
  logic wkup_detector_regwen_4_we;
  logic wkup_detector_regwen_4_qs;
  logic wkup_detector_regwen_4_wd;
  logic wkup_detector_regwen_5_we;
  logic wkup_detector_regwen_5_qs;
  logic wkup_detector_regwen_5_wd;
  logic wkup_detector_regwen_6_we;
  logic wkup_detector_regwen_6_qs;
  logic wkup_detector_regwen_6_wd;
  logic wkup_detector_regwen_7_we;
  logic wkup_detector_regwen_7_qs;
  logic wkup_detector_regwen_7_wd;
  logic wkup_detector_en_0_we;
  logic [0:0] wkup_detector_en_0_qs;
  logic wkup_detector_en_0_busy;
  logic wkup_detector_en_1_we;
  logic [0:0] wkup_detector_en_1_qs;
  logic wkup_detector_en_1_busy;
  logic wkup_detector_en_2_we;
  logic [0:0] wkup_detector_en_2_qs;
  logic wkup_detector_en_2_busy;
  logic wkup_detector_en_3_we;
  logic [0:0] wkup_detector_en_3_qs;
  logic wkup_detector_en_3_busy;
  logic wkup_detector_en_4_we;
  logic [0:0] wkup_detector_en_4_qs;
  logic wkup_detector_en_4_busy;
  logic wkup_detector_en_5_we;
  logic [0:0] wkup_detector_en_5_qs;
  logic wkup_detector_en_5_busy;
  logic wkup_detector_en_6_we;
  logic [0:0] wkup_detector_en_6_qs;
  logic wkup_detector_en_6_busy;
  logic wkup_detector_en_7_we;
  logic [0:0] wkup_detector_en_7_qs;
  logic wkup_detector_en_7_busy;
  logic wkup_detector_0_we;
  logic [4:0] wkup_detector_0_qs;
  logic wkup_detector_0_busy;
  logic wkup_detector_1_we;
  logic [4:0] wkup_detector_1_qs;
  logic wkup_detector_1_busy;
  logic wkup_detector_2_we;
  logic [4:0] wkup_detector_2_qs;
  logic wkup_detector_2_busy;
  logic wkup_detector_3_we;
  logic [4:0] wkup_detector_3_qs;
  logic wkup_detector_3_busy;
  logic wkup_detector_4_we;
  logic [4:0] wkup_detector_4_qs;
  logic wkup_detector_4_busy;
  logic wkup_detector_5_we;
  logic [4:0] wkup_detector_5_qs;
  logic wkup_detector_5_busy;
  logic wkup_detector_6_we;
  logic [4:0] wkup_detector_6_qs;
  logic wkup_detector_6_busy;
  logic wkup_detector_7_we;
  logic [4:0] wkup_detector_7_qs;
  logic wkup_detector_7_busy;
  logic wkup_detector_cnt_th_0_we;
  logic [7:0] wkup_detector_cnt_th_0_qs;
  logic wkup_detector_cnt_th_0_busy;
  logic wkup_detector_cnt_th_1_we;
  logic [7:0] wkup_detector_cnt_th_1_qs;
  logic wkup_detector_cnt_th_1_busy;
  logic wkup_detector_cnt_th_2_we;
  logic [7:0] wkup_detector_cnt_th_2_qs;
  logic wkup_detector_cnt_th_2_busy;
  logic wkup_detector_cnt_th_3_we;
  logic [7:0] wkup_detector_cnt_th_3_qs;
  logic wkup_detector_cnt_th_3_busy;
  logic wkup_detector_cnt_th_4_we;
  logic [7:0] wkup_detector_cnt_th_4_qs;
  logic wkup_detector_cnt_th_4_busy;
  logic wkup_detector_cnt_th_5_we;
  logic [7:0] wkup_detector_cnt_th_5_qs;
  logic wkup_detector_cnt_th_5_busy;
  logic wkup_detector_cnt_th_6_we;
  logic [7:0] wkup_detector_cnt_th_6_qs;
  logic wkup_detector_cnt_th_6_busy;
  logic wkup_detector_cnt_th_7_we;
  logic [7:0] wkup_detector_cnt_th_7_qs;
  logic wkup_detector_cnt_th_7_busy;
  logic wkup_detector_padsel_0_we;
  logic [5:0] wkup_detector_padsel_0_qs;
  logic [5:0] wkup_detector_padsel_0_wd;
  logic wkup_detector_padsel_1_we;
  logic [5:0] wkup_detector_padsel_1_qs;
  logic [5:0] wkup_detector_padsel_1_wd;
  logic wkup_detector_padsel_2_we;
  logic [5:0] wkup_detector_padsel_2_qs;
  logic [5:0] wkup_detector_padsel_2_wd;
  logic wkup_detector_padsel_3_we;
  logic [5:0] wkup_detector_padsel_3_qs;
  logic [5:0] wkup_detector_padsel_3_wd;
  logic wkup_detector_padsel_4_we;
  logic [5:0] wkup_detector_padsel_4_qs;
  logic [5:0] wkup_detector_padsel_4_wd;
  logic wkup_detector_padsel_5_we;
  logic [5:0] wkup_detector_padsel_5_qs;
  logic [5:0] wkup_detector_padsel_5_wd;
  logic wkup_detector_padsel_6_we;
  logic [5:0] wkup_detector_padsel_6_qs;
  logic [5:0] wkup_detector_padsel_6_wd;
  logic wkup_detector_padsel_7_we;
  logic [5:0] wkup_detector_padsel_7_qs;
  logic [5:0] wkup_detector_padsel_7_wd;
  logic wkup_cause_we;
  logic [7:0] wkup_cause_qs;
  logic wkup_cause_busy;
  // Define register CDC handling.
  // CDC handling is done on a per-reg instead of per-field boundary.

  logic  aon_wkup_detector_en_0_qs_int;
  logic [0:0] aon_wkup_detector_en_0_qs;
  logic [0:0] aon_wkup_detector_en_0_wdata;
  logic aon_wkup_detector_en_0_we;
  logic unused_aon_wkup_detector_en_0_wdata;
  logic aon_wkup_detector_en_0_regwen;

  always_comb begin
    aon_wkup_detector_en_0_qs = 1'h0;
    aon_wkup_detector_en_0_qs = aon_wkup_detector_en_0_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_wkup_detector_en_0_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_0_qs),
    .src_we_i     (wkup_detector_en_0_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (wkup_detector_en_0_busy),
    .src_qs_o     (wkup_detector_en_0_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_en_0_qs),
    .dst_we_o     (aon_wkup_detector_en_0_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_en_0_regwen),
    .dst_wd_o     (aon_wkup_detector_en_0_wdata)
  );
  assign unused_aon_wkup_detector_en_0_wdata =
      ^aon_wkup_detector_en_0_wdata;

  logic  aon_wkup_detector_en_1_qs_int;
  logic [0:0] aon_wkup_detector_en_1_qs;
  logic [0:0] aon_wkup_detector_en_1_wdata;
  logic aon_wkup_detector_en_1_we;
  logic unused_aon_wkup_detector_en_1_wdata;
  logic aon_wkup_detector_en_1_regwen;

  always_comb begin
    aon_wkup_detector_en_1_qs = 1'h0;
    aon_wkup_detector_en_1_qs = aon_wkup_detector_en_1_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_wkup_detector_en_1_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_1_qs),
    .src_we_i     (wkup_detector_en_1_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (wkup_detector_en_1_busy),
    .src_qs_o     (wkup_detector_en_1_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_en_1_qs),
    .dst_we_o     (aon_wkup_detector_en_1_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_en_1_regwen),
    .dst_wd_o     (aon_wkup_detector_en_1_wdata)
  );
  assign unused_aon_wkup_detector_en_1_wdata =
      ^aon_wkup_detector_en_1_wdata;

  logic  aon_wkup_detector_en_2_qs_int;
  logic [0:0] aon_wkup_detector_en_2_qs;
  logic [0:0] aon_wkup_detector_en_2_wdata;
  logic aon_wkup_detector_en_2_we;
  logic unused_aon_wkup_detector_en_2_wdata;
  logic aon_wkup_detector_en_2_regwen;

  always_comb begin
    aon_wkup_detector_en_2_qs = 1'h0;
    aon_wkup_detector_en_2_qs = aon_wkup_detector_en_2_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_wkup_detector_en_2_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_2_qs),
    .src_we_i     (wkup_detector_en_2_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (wkup_detector_en_2_busy),
    .src_qs_o     (wkup_detector_en_2_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_en_2_qs),
    .dst_we_o     (aon_wkup_detector_en_2_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_en_2_regwen),
    .dst_wd_o     (aon_wkup_detector_en_2_wdata)
  );
  assign unused_aon_wkup_detector_en_2_wdata =
      ^aon_wkup_detector_en_2_wdata;

  logic  aon_wkup_detector_en_3_qs_int;
  logic [0:0] aon_wkup_detector_en_3_qs;
  logic [0:0] aon_wkup_detector_en_3_wdata;
  logic aon_wkup_detector_en_3_we;
  logic unused_aon_wkup_detector_en_3_wdata;
  logic aon_wkup_detector_en_3_regwen;

  always_comb begin
    aon_wkup_detector_en_3_qs = 1'h0;
    aon_wkup_detector_en_3_qs = aon_wkup_detector_en_3_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_wkup_detector_en_3_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_3_qs),
    .src_we_i     (wkup_detector_en_3_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (wkup_detector_en_3_busy),
    .src_qs_o     (wkup_detector_en_3_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_en_3_qs),
    .dst_we_o     (aon_wkup_detector_en_3_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_en_3_regwen),
    .dst_wd_o     (aon_wkup_detector_en_3_wdata)
  );
  assign unused_aon_wkup_detector_en_3_wdata =
      ^aon_wkup_detector_en_3_wdata;

  logic  aon_wkup_detector_en_4_qs_int;
  logic [0:0] aon_wkup_detector_en_4_qs;
  logic [0:0] aon_wkup_detector_en_4_wdata;
  logic aon_wkup_detector_en_4_we;
  logic unused_aon_wkup_detector_en_4_wdata;
  logic aon_wkup_detector_en_4_regwen;

  always_comb begin
    aon_wkup_detector_en_4_qs = 1'h0;
    aon_wkup_detector_en_4_qs = aon_wkup_detector_en_4_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_wkup_detector_en_4_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_4_qs),
    .src_we_i     (wkup_detector_en_4_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (wkup_detector_en_4_busy),
    .src_qs_o     (wkup_detector_en_4_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_en_4_qs),
    .dst_we_o     (aon_wkup_detector_en_4_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_en_4_regwen),
    .dst_wd_o     (aon_wkup_detector_en_4_wdata)
  );
  assign unused_aon_wkup_detector_en_4_wdata =
      ^aon_wkup_detector_en_4_wdata;

  logic  aon_wkup_detector_en_5_qs_int;
  logic [0:0] aon_wkup_detector_en_5_qs;
  logic [0:0] aon_wkup_detector_en_5_wdata;
  logic aon_wkup_detector_en_5_we;
  logic unused_aon_wkup_detector_en_5_wdata;
  logic aon_wkup_detector_en_5_regwen;

  always_comb begin
    aon_wkup_detector_en_5_qs = 1'h0;
    aon_wkup_detector_en_5_qs = aon_wkup_detector_en_5_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_wkup_detector_en_5_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_5_qs),
    .src_we_i     (wkup_detector_en_5_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (wkup_detector_en_5_busy),
    .src_qs_o     (wkup_detector_en_5_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_en_5_qs),
    .dst_we_o     (aon_wkup_detector_en_5_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_en_5_regwen),
    .dst_wd_o     (aon_wkup_detector_en_5_wdata)
  );
  assign unused_aon_wkup_detector_en_5_wdata =
      ^aon_wkup_detector_en_5_wdata;

  logic  aon_wkup_detector_en_6_qs_int;
  logic [0:0] aon_wkup_detector_en_6_qs;
  logic [0:0] aon_wkup_detector_en_6_wdata;
  logic aon_wkup_detector_en_6_we;
  logic unused_aon_wkup_detector_en_6_wdata;
  logic aon_wkup_detector_en_6_regwen;

  always_comb begin
    aon_wkup_detector_en_6_qs = 1'h0;
    aon_wkup_detector_en_6_qs = aon_wkup_detector_en_6_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_wkup_detector_en_6_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_6_qs),
    .src_we_i     (wkup_detector_en_6_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (wkup_detector_en_6_busy),
    .src_qs_o     (wkup_detector_en_6_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_en_6_qs),
    .dst_we_o     (aon_wkup_detector_en_6_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_en_6_regwen),
    .dst_wd_o     (aon_wkup_detector_en_6_wdata)
  );
  assign unused_aon_wkup_detector_en_6_wdata =
      ^aon_wkup_detector_en_6_wdata;

  logic  aon_wkup_detector_en_7_qs_int;
  logic [0:0] aon_wkup_detector_en_7_qs;
  logic [0:0] aon_wkup_detector_en_7_wdata;
  logic aon_wkup_detector_en_7_we;
  logic unused_aon_wkup_detector_en_7_wdata;
  logic aon_wkup_detector_en_7_regwen;

  always_comb begin
    aon_wkup_detector_en_7_qs = 1'h0;
    aon_wkup_detector_en_7_qs = aon_wkup_detector_en_7_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(1),
    .ResetVal(1'h0),
    .BitMask(1'h1),
    .DstWrReq(0)
  ) u_wkup_detector_en_7_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_7_qs),
    .src_we_i     (wkup_detector_en_7_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[0:0]),
    .src_busy_o   (wkup_detector_en_7_busy),
    .src_qs_o     (wkup_detector_en_7_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_en_7_qs),
    .dst_we_o     (aon_wkup_detector_en_7_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_en_7_regwen),
    .dst_wd_o     (aon_wkup_detector_en_7_wdata)
  );
  assign unused_aon_wkup_detector_en_7_wdata =
      ^aon_wkup_detector_en_7_wdata;

  logic [2:0]  aon_wkup_detector_0_mode_0_qs_int;
  logic  aon_wkup_detector_0_filter_0_qs_int;
  logic  aon_wkup_detector_0_miodio_0_qs_int;
  logic [4:0] aon_wkup_detector_0_qs;
  logic [4:0] aon_wkup_detector_0_wdata;
  logic aon_wkup_detector_0_we;
  logic unused_aon_wkup_detector_0_wdata;
  logic aon_wkup_detector_0_regwen;

  always_comb begin
    aon_wkup_detector_0_qs = 5'h0;
    aon_wkup_detector_0_qs[2:0] = aon_wkup_detector_0_mode_0_qs_int;
    aon_wkup_detector_0_qs[3] = aon_wkup_detector_0_filter_0_qs_int;
    aon_wkup_detector_0_qs[4] = aon_wkup_detector_0_miodio_0_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_wkup_detector_0_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_0_qs),
    .src_we_i     (wkup_detector_0_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (wkup_detector_0_busy),
    .src_qs_o     (wkup_detector_0_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_0_qs),
    .dst_we_o     (aon_wkup_detector_0_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_0_regwen),
    .dst_wd_o     (aon_wkup_detector_0_wdata)
  );
  assign unused_aon_wkup_detector_0_wdata =
      ^aon_wkup_detector_0_wdata;

  logic [2:0]  aon_wkup_detector_1_mode_1_qs_int;
  logic  aon_wkup_detector_1_filter_1_qs_int;
  logic  aon_wkup_detector_1_miodio_1_qs_int;
  logic [4:0] aon_wkup_detector_1_qs;
  logic [4:0] aon_wkup_detector_1_wdata;
  logic aon_wkup_detector_1_we;
  logic unused_aon_wkup_detector_1_wdata;
  logic aon_wkup_detector_1_regwen;

  always_comb begin
    aon_wkup_detector_1_qs = 5'h0;
    aon_wkup_detector_1_qs[2:0] = aon_wkup_detector_1_mode_1_qs_int;
    aon_wkup_detector_1_qs[3] = aon_wkup_detector_1_filter_1_qs_int;
    aon_wkup_detector_1_qs[4] = aon_wkup_detector_1_miodio_1_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_wkup_detector_1_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_1_qs),
    .src_we_i     (wkup_detector_1_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (wkup_detector_1_busy),
    .src_qs_o     (wkup_detector_1_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_1_qs),
    .dst_we_o     (aon_wkup_detector_1_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_1_regwen),
    .dst_wd_o     (aon_wkup_detector_1_wdata)
  );
  assign unused_aon_wkup_detector_1_wdata =
      ^aon_wkup_detector_1_wdata;

  logic [2:0]  aon_wkup_detector_2_mode_2_qs_int;
  logic  aon_wkup_detector_2_filter_2_qs_int;
  logic  aon_wkup_detector_2_miodio_2_qs_int;
  logic [4:0] aon_wkup_detector_2_qs;
  logic [4:0] aon_wkup_detector_2_wdata;
  logic aon_wkup_detector_2_we;
  logic unused_aon_wkup_detector_2_wdata;
  logic aon_wkup_detector_2_regwen;

  always_comb begin
    aon_wkup_detector_2_qs = 5'h0;
    aon_wkup_detector_2_qs[2:0] = aon_wkup_detector_2_mode_2_qs_int;
    aon_wkup_detector_2_qs[3] = aon_wkup_detector_2_filter_2_qs_int;
    aon_wkup_detector_2_qs[4] = aon_wkup_detector_2_miodio_2_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_wkup_detector_2_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_2_qs),
    .src_we_i     (wkup_detector_2_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (wkup_detector_2_busy),
    .src_qs_o     (wkup_detector_2_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_2_qs),
    .dst_we_o     (aon_wkup_detector_2_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_2_regwen),
    .dst_wd_o     (aon_wkup_detector_2_wdata)
  );
  assign unused_aon_wkup_detector_2_wdata =
      ^aon_wkup_detector_2_wdata;

  logic [2:0]  aon_wkup_detector_3_mode_3_qs_int;
  logic  aon_wkup_detector_3_filter_3_qs_int;
  logic  aon_wkup_detector_3_miodio_3_qs_int;
  logic [4:0] aon_wkup_detector_3_qs;
  logic [4:0] aon_wkup_detector_3_wdata;
  logic aon_wkup_detector_3_we;
  logic unused_aon_wkup_detector_3_wdata;
  logic aon_wkup_detector_3_regwen;

  always_comb begin
    aon_wkup_detector_3_qs = 5'h0;
    aon_wkup_detector_3_qs[2:0] = aon_wkup_detector_3_mode_3_qs_int;
    aon_wkup_detector_3_qs[3] = aon_wkup_detector_3_filter_3_qs_int;
    aon_wkup_detector_3_qs[4] = aon_wkup_detector_3_miodio_3_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_wkup_detector_3_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_3_qs),
    .src_we_i     (wkup_detector_3_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (wkup_detector_3_busy),
    .src_qs_o     (wkup_detector_3_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_3_qs),
    .dst_we_o     (aon_wkup_detector_3_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_3_regwen),
    .dst_wd_o     (aon_wkup_detector_3_wdata)
  );
  assign unused_aon_wkup_detector_3_wdata =
      ^aon_wkup_detector_3_wdata;

  logic [2:0]  aon_wkup_detector_4_mode_4_qs_int;
  logic  aon_wkup_detector_4_filter_4_qs_int;
  logic  aon_wkup_detector_4_miodio_4_qs_int;
  logic [4:0] aon_wkup_detector_4_qs;
  logic [4:0] aon_wkup_detector_4_wdata;
  logic aon_wkup_detector_4_we;
  logic unused_aon_wkup_detector_4_wdata;
  logic aon_wkup_detector_4_regwen;

  always_comb begin
    aon_wkup_detector_4_qs = 5'h0;
    aon_wkup_detector_4_qs[2:0] = aon_wkup_detector_4_mode_4_qs_int;
    aon_wkup_detector_4_qs[3] = aon_wkup_detector_4_filter_4_qs_int;
    aon_wkup_detector_4_qs[4] = aon_wkup_detector_4_miodio_4_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_wkup_detector_4_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_4_qs),
    .src_we_i     (wkup_detector_4_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (wkup_detector_4_busy),
    .src_qs_o     (wkup_detector_4_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_4_qs),
    .dst_we_o     (aon_wkup_detector_4_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_4_regwen),
    .dst_wd_o     (aon_wkup_detector_4_wdata)
  );
  assign unused_aon_wkup_detector_4_wdata =
      ^aon_wkup_detector_4_wdata;

  logic [2:0]  aon_wkup_detector_5_mode_5_qs_int;
  logic  aon_wkup_detector_5_filter_5_qs_int;
  logic  aon_wkup_detector_5_miodio_5_qs_int;
  logic [4:0] aon_wkup_detector_5_qs;
  logic [4:0] aon_wkup_detector_5_wdata;
  logic aon_wkup_detector_5_we;
  logic unused_aon_wkup_detector_5_wdata;
  logic aon_wkup_detector_5_regwen;

  always_comb begin
    aon_wkup_detector_5_qs = 5'h0;
    aon_wkup_detector_5_qs[2:0] = aon_wkup_detector_5_mode_5_qs_int;
    aon_wkup_detector_5_qs[3] = aon_wkup_detector_5_filter_5_qs_int;
    aon_wkup_detector_5_qs[4] = aon_wkup_detector_5_miodio_5_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_wkup_detector_5_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_5_qs),
    .src_we_i     (wkup_detector_5_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (wkup_detector_5_busy),
    .src_qs_o     (wkup_detector_5_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_5_qs),
    .dst_we_o     (aon_wkup_detector_5_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_5_regwen),
    .dst_wd_o     (aon_wkup_detector_5_wdata)
  );
  assign unused_aon_wkup_detector_5_wdata =
      ^aon_wkup_detector_5_wdata;

  logic [2:0]  aon_wkup_detector_6_mode_6_qs_int;
  logic  aon_wkup_detector_6_filter_6_qs_int;
  logic  aon_wkup_detector_6_miodio_6_qs_int;
  logic [4:0] aon_wkup_detector_6_qs;
  logic [4:0] aon_wkup_detector_6_wdata;
  logic aon_wkup_detector_6_we;
  logic unused_aon_wkup_detector_6_wdata;
  logic aon_wkup_detector_6_regwen;

  always_comb begin
    aon_wkup_detector_6_qs = 5'h0;
    aon_wkup_detector_6_qs[2:0] = aon_wkup_detector_6_mode_6_qs_int;
    aon_wkup_detector_6_qs[3] = aon_wkup_detector_6_filter_6_qs_int;
    aon_wkup_detector_6_qs[4] = aon_wkup_detector_6_miodio_6_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_wkup_detector_6_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_6_qs),
    .src_we_i     (wkup_detector_6_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (wkup_detector_6_busy),
    .src_qs_o     (wkup_detector_6_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_6_qs),
    .dst_we_o     (aon_wkup_detector_6_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_6_regwen),
    .dst_wd_o     (aon_wkup_detector_6_wdata)
  );
  assign unused_aon_wkup_detector_6_wdata =
      ^aon_wkup_detector_6_wdata;

  logic [2:0]  aon_wkup_detector_7_mode_7_qs_int;
  logic  aon_wkup_detector_7_filter_7_qs_int;
  logic  aon_wkup_detector_7_miodio_7_qs_int;
  logic [4:0] aon_wkup_detector_7_qs;
  logic [4:0] aon_wkup_detector_7_wdata;
  logic aon_wkup_detector_7_we;
  logic unused_aon_wkup_detector_7_wdata;
  logic aon_wkup_detector_7_regwen;

  always_comb begin
    aon_wkup_detector_7_qs = 5'h0;
    aon_wkup_detector_7_qs[2:0] = aon_wkup_detector_7_mode_7_qs_int;
    aon_wkup_detector_7_qs[3] = aon_wkup_detector_7_filter_7_qs_int;
    aon_wkup_detector_7_qs[4] = aon_wkup_detector_7_miodio_7_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(5),
    .ResetVal(5'h0),
    .BitMask(5'h1f),
    .DstWrReq(0)
  ) u_wkup_detector_7_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_7_qs),
    .src_we_i     (wkup_detector_7_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[4:0]),
    .src_busy_o   (wkup_detector_7_busy),
    .src_qs_o     (wkup_detector_7_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_7_qs),
    .dst_we_o     (aon_wkup_detector_7_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_7_regwen),
    .dst_wd_o     (aon_wkup_detector_7_wdata)
  );
  assign unused_aon_wkup_detector_7_wdata =
      ^aon_wkup_detector_7_wdata;

  logic [7:0]  aon_wkup_detector_cnt_th_0_qs_int;
  logic [7:0] aon_wkup_detector_cnt_th_0_qs;
  logic [7:0] aon_wkup_detector_cnt_th_0_wdata;
  logic aon_wkup_detector_cnt_th_0_we;
  logic unused_aon_wkup_detector_cnt_th_0_wdata;
  logic aon_wkup_detector_cnt_th_0_regwen;

  always_comb begin
    aon_wkup_detector_cnt_th_0_qs = 8'h0;
    aon_wkup_detector_cnt_th_0_qs = aon_wkup_detector_cnt_th_0_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_wkup_detector_cnt_th_0_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_0_qs),
    .src_we_i     (wkup_detector_cnt_th_0_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (wkup_detector_cnt_th_0_busy),
    .src_qs_o     (wkup_detector_cnt_th_0_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_cnt_th_0_qs),
    .dst_we_o     (aon_wkup_detector_cnt_th_0_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_cnt_th_0_regwen),
    .dst_wd_o     (aon_wkup_detector_cnt_th_0_wdata)
  );
  assign unused_aon_wkup_detector_cnt_th_0_wdata =
      ^aon_wkup_detector_cnt_th_0_wdata;

  logic [7:0]  aon_wkup_detector_cnt_th_1_qs_int;
  logic [7:0] aon_wkup_detector_cnt_th_1_qs;
  logic [7:0] aon_wkup_detector_cnt_th_1_wdata;
  logic aon_wkup_detector_cnt_th_1_we;
  logic unused_aon_wkup_detector_cnt_th_1_wdata;
  logic aon_wkup_detector_cnt_th_1_regwen;

  always_comb begin
    aon_wkup_detector_cnt_th_1_qs = 8'h0;
    aon_wkup_detector_cnt_th_1_qs = aon_wkup_detector_cnt_th_1_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_wkup_detector_cnt_th_1_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_1_qs),
    .src_we_i     (wkup_detector_cnt_th_1_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (wkup_detector_cnt_th_1_busy),
    .src_qs_o     (wkup_detector_cnt_th_1_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_cnt_th_1_qs),
    .dst_we_o     (aon_wkup_detector_cnt_th_1_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_cnt_th_1_regwen),
    .dst_wd_o     (aon_wkup_detector_cnt_th_1_wdata)
  );
  assign unused_aon_wkup_detector_cnt_th_1_wdata =
      ^aon_wkup_detector_cnt_th_1_wdata;

  logic [7:0]  aon_wkup_detector_cnt_th_2_qs_int;
  logic [7:0] aon_wkup_detector_cnt_th_2_qs;
  logic [7:0] aon_wkup_detector_cnt_th_2_wdata;
  logic aon_wkup_detector_cnt_th_2_we;
  logic unused_aon_wkup_detector_cnt_th_2_wdata;
  logic aon_wkup_detector_cnt_th_2_regwen;

  always_comb begin
    aon_wkup_detector_cnt_th_2_qs = 8'h0;
    aon_wkup_detector_cnt_th_2_qs = aon_wkup_detector_cnt_th_2_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_wkup_detector_cnt_th_2_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_2_qs),
    .src_we_i     (wkup_detector_cnt_th_2_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (wkup_detector_cnt_th_2_busy),
    .src_qs_o     (wkup_detector_cnt_th_2_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_cnt_th_2_qs),
    .dst_we_o     (aon_wkup_detector_cnt_th_2_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_cnt_th_2_regwen),
    .dst_wd_o     (aon_wkup_detector_cnt_th_2_wdata)
  );
  assign unused_aon_wkup_detector_cnt_th_2_wdata =
      ^aon_wkup_detector_cnt_th_2_wdata;

  logic [7:0]  aon_wkup_detector_cnt_th_3_qs_int;
  logic [7:0] aon_wkup_detector_cnt_th_3_qs;
  logic [7:0] aon_wkup_detector_cnt_th_3_wdata;
  logic aon_wkup_detector_cnt_th_3_we;
  logic unused_aon_wkup_detector_cnt_th_3_wdata;
  logic aon_wkup_detector_cnt_th_3_regwen;

  always_comb begin
    aon_wkup_detector_cnt_th_3_qs = 8'h0;
    aon_wkup_detector_cnt_th_3_qs = aon_wkup_detector_cnt_th_3_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_wkup_detector_cnt_th_3_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_3_qs),
    .src_we_i     (wkup_detector_cnt_th_3_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (wkup_detector_cnt_th_3_busy),
    .src_qs_o     (wkup_detector_cnt_th_3_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_cnt_th_3_qs),
    .dst_we_o     (aon_wkup_detector_cnt_th_3_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_cnt_th_3_regwen),
    .dst_wd_o     (aon_wkup_detector_cnt_th_3_wdata)
  );
  assign unused_aon_wkup_detector_cnt_th_3_wdata =
      ^aon_wkup_detector_cnt_th_3_wdata;

  logic [7:0]  aon_wkup_detector_cnt_th_4_qs_int;
  logic [7:0] aon_wkup_detector_cnt_th_4_qs;
  logic [7:0] aon_wkup_detector_cnt_th_4_wdata;
  logic aon_wkup_detector_cnt_th_4_we;
  logic unused_aon_wkup_detector_cnt_th_4_wdata;
  logic aon_wkup_detector_cnt_th_4_regwen;

  always_comb begin
    aon_wkup_detector_cnt_th_4_qs = 8'h0;
    aon_wkup_detector_cnt_th_4_qs = aon_wkup_detector_cnt_th_4_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_wkup_detector_cnt_th_4_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_4_qs),
    .src_we_i     (wkup_detector_cnt_th_4_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (wkup_detector_cnt_th_4_busy),
    .src_qs_o     (wkup_detector_cnt_th_4_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_cnt_th_4_qs),
    .dst_we_o     (aon_wkup_detector_cnt_th_4_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_cnt_th_4_regwen),
    .dst_wd_o     (aon_wkup_detector_cnt_th_4_wdata)
  );
  assign unused_aon_wkup_detector_cnt_th_4_wdata =
      ^aon_wkup_detector_cnt_th_4_wdata;

  logic [7:0]  aon_wkup_detector_cnt_th_5_qs_int;
  logic [7:0] aon_wkup_detector_cnt_th_5_qs;
  logic [7:0] aon_wkup_detector_cnt_th_5_wdata;
  logic aon_wkup_detector_cnt_th_5_we;
  logic unused_aon_wkup_detector_cnt_th_5_wdata;
  logic aon_wkup_detector_cnt_th_5_regwen;

  always_comb begin
    aon_wkup_detector_cnt_th_5_qs = 8'h0;
    aon_wkup_detector_cnt_th_5_qs = aon_wkup_detector_cnt_th_5_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_wkup_detector_cnt_th_5_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_5_qs),
    .src_we_i     (wkup_detector_cnt_th_5_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (wkup_detector_cnt_th_5_busy),
    .src_qs_o     (wkup_detector_cnt_th_5_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_cnt_th_5_qs),
    .dst_we_o     (aon_wkup_detector_cnt_th_5_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_cnt_th_5_regwen),
    .dst_wd_o     (aon_wkup_detector_cnt_th_5_wdata)
  );
  assign unused_aon_wkup_detector_cnt_th_5_wdata =
      ^aon_wkup_detector_cnt_th_5_wdata;

  logic [7:0]  aon_wkup_detector_cnt_th_6_qs_int;
  logic [7:0] aon_wkup_detector_cnt_th_6_qs;
  logic [7:0] aon_wkup_detector_cnt_th_6_wdata;
  logic aon_wkup_detector_cnt_th_6_we;
  logic unused_aon_wkup_detector_cnt_th_6_wdata;
  logic aon_wkup_detector_cnt_th_6_regwen;

  always_comb begin
    aon_wkup_detector_cnt_th_6_qs = 8'h0;
    aon_wkup_detector_cnt_th_6_qs = aon_wkup_detector_cnt_th_6_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_wkup_detector_cnt_th_6_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_6_qs),
    .src_we_i     (wkup_detector_cnt_th_6_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (wkup_detector_cnt_th_6_busy),
    .src_qs_o     (wkup_detector_cnt_th_6_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_cnt_th_6_qs),
    .dst_we_o     (aon_wkup_detector_cnt_th_6_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_cnt_th_6_regwen),
    .dst_wd_o     (aon_wkup_detector_cnt_th_6_wdata)
  );
  assign unused_aon_wkup_detector_cnt_th_6_wdata =
      ^aon_wkup_detector_cnt_th_6_wdata;

  logic [7:0]  aon_wkup_detector_cnt_th_7_qs_int;
  logic [7:0] aon_wkup_detector_cnt_th_7_qs;
  logic [7:0] aon_wkup_detector_cnt_th_7_wdata;
  logic aon_wkup_detector_cnt_th_7_we;
  logic unused_aon_wkup_detector_cnt_th_7_wdata;
  logic aon_wkup_detector_cnt_th_7_regwen;

  always_comb begin
    aon_wkup_detector_cnt_th_7_qs = 8'h0;
    aon_wkup_detector_cnt_th_7_qs = aon_wkup_detector_cnt_th_7_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(0)
  ) u_wkup_detector_cnt_th_7_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i (wkup_detector_regwen_7_qs),
    .src_we_i     (wkup_detector_cnt_th_7_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (wkup_detector_cnt_th_7_busy),
    .src_qs_o     (wkup_detector_cnt_th_7_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (aon_wkup_detector_cnt_th_7_qs),
    .dst_we_o     (aon_wkup_detector_cnt_th_7_we),
    .dst_re_o     (),
    .dst_regwen_o (aon_wkup_detector_cnt_th_7_regwen),
    .dst_wd_o     (aon_wkup_detector_cnt_th_7_wdata)
  );
  assign unused_aon_wkup_detector_cnt_th_7_wdata =
      ^aon_wkup_detector_cnt_th_7_wdata;

  logic  aon_wkup_cause_cause_0_ds_int;
  logic  aon_wkup_cause_cause_0_qs_int;
  logic  aon_wkup_cause_cause_1_ds_int;
  logic  aon_wkup_cause_cause_1_qs_int;
  logic  aon_wkup_cause_cause_2_ds_int;
  logic  aon_wkup_cause_cause_2_qs_int;
  logic  aon_wkup_cause_cause_3_ds_int;
  logic  aon_wkup_cause_cause_3_qs_int;
  logic  aon_wkup_cause_cause_4_ds_int;
  logic  aon_wkup_cause_cause_4_qs_int;
  logic  aon_wkup_cause_cause_5_ds_int;
  logic  aon_wkup_cause_cause_5_qs_int;
  logic  aon_wkup_cause_cause_6_ds_int;
  logic  aon_wkup_cause_cause_6_qs_int;
  logic  aon_wkup_cause_cause_7_ds_int;
  logic  aon_wkup_cause_cause_7_qs_int;
  logic [7:0] aon_wkup_cause_ds;
  logic aon_wkup_cause_qe;
  logic [7:0] aon_wkup_cause_qs;
  logic [7:0] aon_wkup_cause_wdata;
  logic aon_wkup_cause_we;
  logic unused_aon_wkup_cause_wdata;

  always_comb begin
    aon_wkup_cause_qs = 8'h0;
    aon_wkup_cause_ds = 8'h0;
    aon_wkup_cause_ds[0] = aon_wkup_cause_cause_0_ds_int;
    aon_wkup_cause_qs[0] = aon_wkup_cause_cause_0_qs_int;
    aon_wkup_cause_ds[1] = aon_wkup_cause_cause_1_ds_int;
    aon_wkup_cause_qs[1] = aon_wkup_cause_cause_1_qs_int;
    aon_wkup_cause_ds[2] = aon_wkup_cause_cause_2_ds_int;
    aon_wkup_cause_qs[2] = aon_wkup_cause_cause_2_qs_int;
    aon_wkup_cause_ds[3] = aon_wkup_cause_cause_3_ds_int;
    aon_wkup_cause_qs[3] = aon_wkup_cause_cause_3_qs_int;
    aon_wkup_cause_ds[4] = aon_wkup_cause_cause_4_ds_int;
    aon_wkup_cause_qs[4] = aon_wkup_cause_cause_4_qs_int;
    aon_wkup_cause_ds[5] = aon_wkup_cause_cause_5_ds_int;
    aon_wkup_cause_qs[5] = aon_wkup_cause_cause_5_qs_int;
    aon_wkup_cause_ds[6] = aon_wkup_cause_cause_6_ds_int;
    aon_wkup_cause_qs[6] = aon_wkup_cause_cause_6_qs_int;
    aon_wkup_cause_ds[7] = aon_wkup_cause_cause_7_ds_int;
    aon_wkup_cause_qs[7] = aon_wkup_cause_cause_7_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(8),
    .ResetVal(8'h0),
    .BitMask(8'hff),
    .DstWrReq(1)
  ) u_wkup_cause_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_aon_i),
    .rst_dst_ni   (rst_aon_ni),
    .src_regwen_i ('0),
    .src_we_i     (wkup_cause_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[7:0]),
    .src_busy_o   (wkup_cause_busy),
    .src_qs_o     (wkup_cause_qs), // for software read back
    .dst_update_i (aon_wkup_cause_qe),
    .dst_ds_i     (aon_wkup_cause_ds),
    .dst_qs_i     (aon_wkup_cause_qs),
    .dst_we_o     (aon_wkup_cause_we),
    .dst_re_o     (),
    .dst_regwen_o (),
    .dst_wd_o     (aon_wkup_cause_wdata)
  );
  assign unused_aon_wkup_cause_wdata =
      ^aon_wkup_cause_wdata;

  // Register instances
  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [0:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.qe = alert_test_qe;


  // Subregister 0 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_0_we),
    .wd     (mio_periph_insel_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_0_qs)
  );


  // Subregister 1 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_1_we),
    .wd     (mio_periph_insel_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_1_qs)
  );


  // Subregister 2 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_2_we),
    .wd     (mio_periph_insel_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_2_qs)
  );


  // Subregister 3 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_3_we),
    .wd     (mio_periph_insel_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_3_qs)
  );


  // Subregister 4 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_4_we),
    .wd     (mio_periph_insel_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_4_qs)
  );


  // Subregister 5 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_5_we),
    .wd     (mio_periph_insel_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_5_qs)
  );


  // Subregister 6 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_6_we),
    .wd     (mio_periph_insel_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_6_qs)
  );


  // Subregister 7 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_7_we),
    .wd     (mio_periph_insel_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_7_qs)
  );


  // Subregister 8 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_8]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_8_we),
    .wd     (mio_periph_insel_regwen_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_8_qs)
  );


  // Subregister 9 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_9]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_9_we),
    .wd     (mio_periph_insel_regwen_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_9_qs)
  );


  // Subregister 10 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_10]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_10_we),
    .wd     (mio_periph_insel_regwen_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_10_qs)
  );


  // Subregister 11 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_11]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_11_we),
    .wd     (mio_periph_insel_regwen_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_11_qs)
  );


  // Subregister 12 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_12]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_12_we),
    .wd     (mio_periph_insel_regwen_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_12_qs)
  );


  // Subregister 13 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_13]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_13_we),
    .wd     (mio_periph_insel_regwen_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_13_qs)
  );


  // Subregister 14 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_14]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_14_we),
    .wd     (mio_periph_insel_regwen_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_14_qs)
  );


  // Subregister 15 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_15]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_15_we),
    .wd     (mio_periph_insel_regwen_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_15_qs)
  );


  // Subregister 16 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_16]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_16_we),
    .wd     (mio_periph_insel_regwen_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_16_qs)
  );


  // Subregister 17 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_17]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_17_we),
    .wd     (mio_periph_insel_regwen_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_17_qs)
  );


  // Subregister 18 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_18]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_18_we),
    .wd     (mio_periph_insel_regwen_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_18_qs)
  );


  // Subregister 19 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_19]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_19_we),
    .wd     (mio_periph_insel_regwen_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_19_qs)
  );


  // Subregister 20 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_20]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_20_we),
    .wd     (mio_periph_insel_regwen_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_20_qs)
  );


  // Subregister 21 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_21]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_21_we),
    .wd     (mio_periph_insel_regwen_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_21_qs)
  );


  // Subregister 22 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_22]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_22_we),
    .wd     (mio_periph_insel_regwen_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_22_qs)
  );


  // Subregister 23 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_23]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_23_we),
    .wd     (mio_periph_insel_regwen_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_23_qs)
  );


  // Subregister 24 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_24]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_24_we),
    .wd     (mio_periph_insel_regwen_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_24_qs)
  );


  // Subregister 25 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_25]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_25_we),
    .wd     (mio_periph_insel_regwen_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_25_qs)
  );


  // Subregister 26 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_26]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_26_we),
    .wd     (mio_periph_insel_regwen_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_26_qs)
  );


  // Subregister 27 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_27]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_27_we),
    .wd     (mio_periph_insel_regwen_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_27_qs)
  );


  // Subregister 28 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_28]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_28_we),
    .wd     (mio_periph_insel_regwen_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_28_qs)
  );


  // Subregister 29 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_29]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_29_we),
    .wd     (mio_periph_insel_regwen_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_29_qs)
  );


  // Subregister 30 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_30]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_30_we),
    .wd     (mio_periph_insel_regwen_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_30_qs)
  );


  // Subregister 31 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_31]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_31_we),
    .wd     (mio_periph_insel_regwen_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_31_qs)
  );


  // Subregister 32 of Multireg mio_periph_insel_regwen
  // R[mio_periph_insel_regwen_32]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_periph_insel_regwen_32 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_regwen_32_we),
    .wd     (mio_periph_insel_regwen_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_regwen_32_qs)
  );


  // Subregister 0 of Multireg mio_periph_insel
  // R[mio_periph_insel_0]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_0_gated_we;
  assign mio_periph_insel_0_gated_we = mio_periph_insel_0_we & mio_periph_insel_regwen_0_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_0_gated_we),
    .wd     (mio_periph_insel_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_0_qs)
  );


  // Subregister 1 of Multireg mio_periph_insel
  // R[mio_periph_insel_1]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_1_gated_we;
  assign mio_periph_insel_1_gated_we = mio_periph_insel_1_we & mio_periph_insel_regwen_1_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_1_gated_we),
    .wd     (mio_periph_insel_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_1_qs)
  );


  // Subregister 2 of Multireg mio_periph_insel
  // R[mio_periph_insel_2]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_2_gated_we;
  assign mio_periph_insel_2_gated_we = mio_periph_insel_2_we & mio_periph_insel_regwen_2_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_2_gated_we),
    .wd     (mio_periph_insel_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_2_qs)
  );


  // Subregister 3 of Multireg mio_periph_insel
  // R[mio_periph_insel_3]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_3_gated_we;
  assign mio_periph_insel_3_gated_we = mio_periph_insel_3_we & mio_periph_insel_regwen_3_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_3_gated_we),
    .wd     (mio_periph_insel_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_3_qs)
  );


  // Subregister 4 of Multireg mio_periph_insel
  // R[mio_periph_insel_4]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_4_gated_we;
  assign mio_periph_insel_4_gated_we = mio_periph_insel_4_we & mio_periph_insel_regwen_4_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_4_gated_we),
    .wd     (mio_periph_insel_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_4_qs)
  );


  // Subregister 5 of Multireg mio_periph_insel
  // R[mio_periph_insel_5]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_5_gated_we;
  assign mio_periph_insel_5_gated_we = mio_periph_insel_5_we & mio_periph_insel_regwen_5_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_5_gated_we),
    .wd     (mio_periph_insel_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_5_qs)
  );


  // Subregister 6 of Multireg mio_periph_insel
  // R[mio_periph_insel_6]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_6_gated_we;
  assign mio_periph_insel_6_gated_we = mio_periph_insel_6_we & mio_periph_insel_regwen_6_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_6_gated_we),
    .wd     (mio_periph_insel_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_6_qs)
  );


  // Subregister 7 of Multireg mio_periph_insel
  // R[mio_periph_insel_7]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_7_gated_we;
  assign mio_periph_insel_7_gated_we = mio_periph_insel_7_we & mio_periph_insel_regwen_7_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_7_gated_we),
    .wd     (mio_periph_insel_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_7_qs)
  );


  // Subregister 8 of Multireg mio_periph_insel
  // R[mio_periph_insel_8]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_8_gated_we;
  assign mio_periph_insel_8_gated_we = mio_periph_insel_8_we & mio_periph_insel_regwen_8_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_8_gated_we),
    .wd     (mio_periph_insel_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_8_qs)
  );


  // Subregister 9 of Multireg mio_periph_insel
  // R[mio_periph_insel_9]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_9_gated_we;
  assign mio_periph_insel_9_gated_we = mio_periph_insel_9_we & mio_periph_insel_regwen_9_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_9_gated_we),
    .wd     (mio_periph_insel_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_9_qs)
  );


  // Subregister 10 of Multireg mio_periph_insel
  // R[mio_periph_insel_10]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_10_gated_we;
  assign mio_periph_insel_10_gated_we = mio_periph_insel_10_we & mio_periph_insel_regwen_10_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_10_gated_we),
    .wd     (mio_periph_insel_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_10_qs)
  );


  // Subregister 11 of Multireg mio_periph_insel
  // R[mio_periph_insel_11]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_11_gated_we;
  assign mio_periph_insel_11_gated_we = mio_periph_insel_11_we & mio_periph_insel_regwen_11_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_11_gated_we),
    .wd     (mio_periph_insel_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_11_qs)
  );


  // Subregister 12 of Multireg mio_periph_insel
  // R[mio_periph_insel_12]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_12_gated_we;
  assign mio_periph_insel_12_gated_we = mio_periph_insel_12_we & mio_periph_insel_regwen_12_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_12_gated_we),
    .wd     (mio_periph_insel_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_12_qs)
  );


  // Subregister 13 of Multireg mio_periph_insel
  // R[mio_periph_insel_13]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_13_gated_we;
  assign mio_periph_insel_13_gated_we = mio_periph_insel_13_we & mio_periph_insel_regwen_13_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_13_gated_we),
    .wd     (mio_periph_insel_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_13_qs)
  );


  // Subregister 14 of Multireg mio_periph_insel
  // R[mio_periph_insel_14]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_14_gated_we;
  assign mio_periph_insel_14_gated_we = mio_periph_insel_14_we & mio_periph_insel_regwen_14_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_14_gated_we),
    .wd     (mio_periph_insel_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_14_qs)
  );


  // Subregister 15 of Multireg mio_periph_insel
  // R[mio_periph_insel_15]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_15_gated_we;
  assign mio_periph_insel_15_gated_we = mio_periph_insel_15_we & mio_periph_insel_regwen_15_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_15_gated_we),
    .wd     (mio_periph_insel_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_15_qs)
  );


  // Subregister 16 of Multireg mio_periph_insel
  // R[mio_periph_insel_16]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_16_gated_we;
  assign mio_periph_insel_16_gated_we = mio_periph_insel_16_we & mio_periph_insel_regwen_16_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_16_gated_we),
    .wd     (mio_periph_insel_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_16_qs)
  );


  // Subregister 17 of Multireg mio_periph_insel
  // R[mio_periph_insel_17]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_17_gated_we;
  assign mio_periph_insel_17_gated_we = mio_periph_insel_17_we & mio_periph_insel_regwen_17_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_17_gated_we),
    .wd     (mio_periph_insel_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_17_qs)
  );


  // Subregister 18 of Multireg mio_periph_insel
  // R[mio_periph_insel_18]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_18_gated_we;
  assign mio_periph_insel_18_gated_we = mio_periph_insel_18_we & mio_periph_insel_regwen_18_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_18_gated_we),
    .wd     (mio_periph_insel_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_18_qs)
  );


  // Subregister 19 of Multireg mio_periph_insel
  // R[mio_periph_insel_19]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_19_gated_we;
  assign mio_periph_insel_19_gated_we = mio_periph_insel_19_we & mio_periph_insel_regwen_19_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_19_gated_we),
    .wd     (mio_periph_insel_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_19_qs)
  );


  // Subregister 20 of Multireg mio_periph_insel
  // R[mio_periph_insel_20]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_20_gated_we;
  assign mio_periph_insel_20_gated_we = mio_periph_insel_20_we & mio_periph_insel_regwen_20_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_20_gated_we),
    .wd     (mio_periph_insel_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_20_qs)
  );


  // Subregister 21 of Multireg mio_periph_insel
  // R[mio_periph_insel_21]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_21_gated_we;
  assign mio_periph_insel_21_gated_we = mio_periph_insel_21_we & mio_periph_insel_regwen_21_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_21_gated_we),
    .wd     (mio_periph_insel_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_21_qs)
  );


  // Subregister 22 of Multireg mio_periph_insel
  // R[mio_periph_insel_22]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_22_gated_we;
  assign mio_periph_insel_22_gated_we = mio_periph_insel_22_we & mio_periph_insel_regwen_22_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_22_gated_we),
    .wd     (mio_periph_insel_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_22_qs)
  );


  // Subregister 23 of Multireg mio_periph_insel
  // R[mio_periph_insel_23]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_23_gated_we;
  assign mio_periph_insel_23_gated_we = mio_periph_insel_23_we & mio_periph_insel_regwen_23_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_23_gated_we),
    .wd     (mio_periph_insel_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_23_qs)
  );


  // Subregister 24 of Multireg mio_periph_insel
  // R[mio_periph_insel_24]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_24_gated_we;
  assign mio_periph_insel_24_gated_we = mio_periph_insel_24_we & mio_periph_insel_regwen_24_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_24_gated_we),
    .wd     (mio_periph_insel_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_24_qs)
  );


  // Subregister 25 of Multireg mio_periph_insel
  // R[mio_periph_insel_25]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_25_gated_we;
  assign mio_periph_insel_25_gated_we = mio_periph_insel_25_we & mio_periph_insel_regwen_25_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_25_gated_we),
    .wd     (mio_periph_insel_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_25_qs)
  );


  // Subregister 26 of Multireg mio_periph_insel
  // R[mio_periph_insel_26]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_26_gated_we;
  assign mio_periph_insel_26_gated_we = mio_periph_insel_26_we & mio_periph_insel_regwen_26_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_26_gated_we),
    .wd     (mio_periph_insel_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_26_qs)
  );


  // Subregister 27 of Multireg mio_periph_insel
  // R[mio_periph_insel_27]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_27_gated_we;
  assign mio_periph_insel_27_gated_we = mio_periph_insel_27_we & mio_periph_insel_regwen_27_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_27_gated_we),
    .wd     (mio_periph_insel_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_27_qs)
  );


  // Subregister 28 of Multireg mio_periph_insel
  // R[mio_periph_insel_28]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_28_gated_we;
  assign mio_periph_insel_28_gated_we = mio_periph_insel_28_we & mio_periph_insel_regwen_28_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_28_gated_we),
    .wd     (mio_periph_insel_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_28_qs)
  );


  // Subregister 29 of Multireg mio_periph_insel
  // R[mio_periph_insel_29]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_29_gated_we;
  assign mio_periph_insel_29_gated_we = mio_periph_insel_29_we & mio_periph_insel_regwen_29_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_29_gated_we),
    .wd     (mio_periph_insel_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_29_qs)
  );


  // Subregister 30 of Multireg mio_periph_insel
  // R[mio_periph_insel_30]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_30_gated_we;
  assign mio_periph_insel_30_gated_we = mio_periph_insel_30_we & mio_periph_insel_regwen_30_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_30_gated_we),
    .wd     (mio_periph_insel_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_30_qs)
  );


  // Subregister 31 of Multireg mio_periph_insel
  // R[mio_periph_insel_31]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_31_gated_we;
  assign mio_periph_insel_31_gated_we = mio_periph_insel_31_we & mio_periph_insel_regwen_31_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_31_gated_we),
    .wd     (mio_periph_insel_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_31_qs)
  );


  // Subregister 32 of Multireg mio_periph_insel
  // R[mio_periph_insel_32]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_periph_insel_32_gated_we;
  assign mio_periph_insel_32_gated_we = mio_periph_insel_32_we & mio_periph_insel_regwen_32_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_mio_periph_insel_32 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_periph_insel_32_gated_we),
    .wd     (mio_periph_insel_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_periph_insel[32].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_periph_insel_32_qs)
  );


  // Subregister 0 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_0_we),
    .wd     (mio_outsel_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_0_qs)
  );


  // Subregister 1 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_1_we),
    .wd     (mio_outsel_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_1_qs)
  );


  // Subregister 2 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_2_we),
    .wd     (mio_outsel_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_2_qs)
  );


  // Subregister 3 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_3_we),
    .wd     (mio_outsel_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_3_qs)
  );


  // Subregister 4 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_4_we),
    .wd     (mio_outsel_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_4_qs)
  );


  // Subregister 5 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_5_we),
    .wd     (mio_outsel_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_5_qs)
  );


  // Subregister 6 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_6_we),
    .wd     (mio_outsel_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_6_qs)
  );


  // Subregister 7 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_7_we),
    .wd     (mio_outsel_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_7_qs)
  );


  // Subregister 8 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_8]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_8_we),
    .wd     (mio_outsel_regwen_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_8_qs)
  );


  // Subregister 9 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_9]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_9_we),
    .wd     (mio_outsel_regwen_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_9_qs)
  );


  // Subregister 10 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_10]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_10_we),
    .wd     (mio_outsel_regwen_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_10_qs)
  );


  // Subregister 11 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_11]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_11_we),
    .wd     (mio_outsel_regwen_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_11_qs)
  );


  // Subregister 12 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_12]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_12_we),
    .wd     (mio_outsel_regwen_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_12_qs)
  );


  // Subregister 13 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_13]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_13_we),
    .wd     (mio_outsel_regwen_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_13_qs)
  );


  // Subregister 14 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_14]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_14_we),
    .wd     (mio_outsel_regwen_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_14_qs)
  );


  // Subregister 15 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_15]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_15_we),
    .wd     (mio_outsel_regwen_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_15_qs)
  );


  // Subregister 16 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_16]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_16_we),
    .wd     (mio_outsel_regwen_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_16_qs)
  );


  // Subregister 17 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_17]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_17_we),
    .wd     (mio_outsel_regwen_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_17_qs)
  );


  // Subregister 18 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_18]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_18_we),
    .wd     (mio_outsel_regwen_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_18_qs)
  );


  // Subregister 19 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_19]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_19_we),
    .wd     (mio_outsel_regwen_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_19_qs)
  );


  // Subregister 20 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_20]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_20_we),
    .wd     (mio_outsel_regwen_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_20_qs)
  );


  // Subregister 21 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_21]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_21_we),
    .wd     (mio_outsel_regwen_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_21_qs)
  );


  // Subregister 22 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_22]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_22_we),
    .wd     (mio_outsel_regwen_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_22_qs)
  );


  // Subregister 23 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_23]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_23_we),
    .wd     (mio_outsel_regwen_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_23_qs)
  );


  // Subregister 24 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_24]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_24_we),
    .wd     (mio_outsel_regwen_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_24_qs)
  );


  // Subregister 25 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_25]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_25_we),
    .wd     (mio_outsel_regwen_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_25_qs)
  );


  // Subregister 26 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_26]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_26_we),
    .wd     (mio_outsel_regwen_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_26_qs)
  );


  // Subregister 27 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_27]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_27_we),
    .wd     (mio_outsel_regwen_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_27_qs)
  );


  // Subregister 28 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_28]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_28_we),
    .wd     (mio_outsel_regwen_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_28_qs)
  );


  // Subregister 29 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_29]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_29_we),
    .wd     (mio_outsel_regwen_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_29_qs)
  );


  // Subregister 30 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_30]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_30_we),
    .wd     (mio_outsel_regwen_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_30_qs)
  );


  // Subregister 31 of Multireg mio_outsel_regwen
  // R[mio_outsel_regwen_31]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_outsel_regwen_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_regwen_31_we),
    .wd     (mio_outsel_regwen_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_regwen_31_qs)
  );


  // Subregister 0 of Multireg mio_outsel
  // R[mio_outsel_0]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_0_gated_we;
  assign mio_outsel_0_gated_we = mio_outsel_0_we & mio_outsel_regwen_0_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_0_gated_we),
    .wd     (mio_outsel_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_0_qs)
  );


  // Subregister 1 of Multireg mio_outsel
  // R[mio_outsel_1]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_1_gated_we;
  assign mio_outsel_1_gated_we = mio_outsel_1_we & mio_outsel_regwen_1_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_1_gated_we),
    .wd     (mio_outsel_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_1_qs)
  );


  // Subregister 2 of Multireg mio_outsel
  // R[mio_outsel_2]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_2_gated_we;
  assign mio_outsel_2_gated_we = mio_outsel_2_we & mio_outsel_regwen_2_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_2_gated_we),
    .wd     (mio_outsel_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_2_qs)
  );


  // Subregister 3 of Multireg mio_outsel
  // R[mio_outsel_3]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_3_gated_we;
  assign mio_outsel_3_gated_we = mio_outsel_3_we & mio_outsel_regwen_3_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_3_gated_we),
    .wd     (mio_outsel_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_3_qs)
  );


  // Subregister 4 of Multireg mio_outsel
  // R[mio_outsel_4]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_4_gated_we;
  assign mio_outsel_4_gated_we = mio_outsel_4_we & mio_outsel_regwen_4_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_4_gated_we),
    .wd     (mio_outsel_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_4_qs)
  );


  // Subregister 5 of Multireg mio_outsel
  // R[mio_outsel_5]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_5_gated_we;
  assign mio_outsel_5_gated_we = mio_outsel_5_we & mio_outsel_regwen_5_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_5_gated_we),
    .wd     (mio_outsel_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_5_qs)
  );


  // Subregister 6 of Multireg mio_outsel
  // R[mio_outsel_6]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_6_gated_we;
  assign mio_outsel_6_gated_we = mio_outsel_6_we & mio_outsel_regwen_6_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_6_gated_we),
    .wd     (mio_outsel_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_6_qs)
  );


  // Subregister 7 of Multireg mio_outsel
  // R[mio_outsel_7]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_7_gated_we;
  assign mio_outsel_7_gated_we = mio_outsel_7_we & mio_outsel_regwen_7_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_7_gated_we),
    .wd     (mio_outsel_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_7_qs)
  );


  // Subregister 8 of Multireg mio_outsel
  // R[mio_outsel_8]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_8_gated_we;
  assign mio_outsel_8_gated_we = mio_outsel_8_we & mio_outsel_regwen_8_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_8_gated_we),
    .wd     (mio_outsel_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_8_qs)
  );


  // Subregister 9 of Multireg mio_outsel
  // R[mio_outsel_9]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_9_gated_we;
  assign mio_outsel_9_gated_we = mio_outsel_9_we & mio_outsel_regwen_9_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_9_gated_we),
    .wd     (mio_outsel_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_9_qs)
  );


  // Subregister 10 of Multireg mio_outsel
  // R[mio_outsel_10]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_10_gated_we;
  assign mio_outsel_10_gated_we = mio_outsel_10_we & mio_outsel_regwen_10_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_10_gated_we),
    .wd     (mio_outsel_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_10_qs)
  );


  // Subregister 11 of Multireg mio_outsel
  // R[mio_outsel_11]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_11_gated_we;
  assign mio_outsel_11_gated_we = mio_outsel_11_we & mio_outsel_regwen_11_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_11_gated_we),
    .wd     (mio_outsel_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_11_qs)
  );


  // Subregister 12 of Multireg mio_outsel
  // R[mio_outsel_12]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_12_gated_we;
  assign mio_outsel_12_gated_we = mio_outsel_12_we & mio_outsel_regwen_12_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_12_gated_we),
    .wd     (mio_outsel_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_12_qs)
  );


  // Subregister 13 of Multireg mio_outsel
  // R[mio_outsel_13]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_13_gated_we;
  assign mio_outsel_13_gated_we = mio_outsel_13_we & mio_outsel_regwen_13_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_13_gated_we),
    .wd     (mio_outsel_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_13_qs)
  );


  // Subregister 14 of Multireg mio_outsel
  // R[mio_outsel_14]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_14_gated_we;
  assign mio_outsel_14_gated_we = mio_outsel_14_we & mio_outsel_regwen_14_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_14_gated_we),
    .wd     (mio_outsel_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_14_qs)
  );


  // Subregister 15 of Multireg mio_outsel
  // R[mio_outsel_15]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_15_gated_we;
  assign mio_outsel_15_gated_we = mio_outsel_15_we & mio_outsel_regwen_15_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_15_gated_we),
    .wd     (mio_outsel_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_15_qs)
  );


  // Subregister 16 of Multireg mio_outsel
  // R[mio_outsel_16]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_16_gated_we;
  assign mio_outsel_16_gated_we = mio_outsel_16_we & mio_outsel_regwen_16_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_16_gated_we),
    .wd     (mio_outsel_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_16_qs)
  );


  // Subregister 17 of Multireg mio_outsel
  // R[mio_outsel_17]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_17_gated_we;
  assign mio_outsel_17_gated_we = mio_outsel_17_we & mio_outsel_regwen_17_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_17_gated_we),
    .wd     (mio_outsel_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_17_qs)
  );


  // Subregister 18 of Multireg mio_outsel
  // R[mio_outsel_18]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_18_gated_we;
  assign mio_outsel_18_gated_we = mio_outsel_18_we & mio_outsel_regwen_18_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_18_gated_we),
    .wd     (mio_outsel_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_18_qs)
  );


  // Subregister 19 of Multireg mio_outsel
  // R[mio_outsel_19]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_19_gated_we;
  assign mio_outsel_19_gated_we = mio_outsel_19_we & mio_outsel_regwen_19_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_19_gated_we),
    .wd     (mio_outsel_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_19_qs)
  );


  // Subregister 20 of Multireg mio_outsel
  // R[mio_outsel_20]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_20_gated_we;
  assign mio_outsel_20_gated_we = mio_outsel_20_we & mio_outsel_regwen_20_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_20_gated_we),
    .wd     (mio_outsel_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_20_qs)
  );


  // Subregister 21 of Multireg mio_outsel
  // R[mio_outsel_21]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_21_gated_we;
  assign mio_outsel_21_gated_we = mio_outsel_21_we & mio_outsel_regwen_21_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_21_gated_we),
    .wd     (mio_outsel_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_21_qs)
  );


  // Subregister 22 of Multireg mio_outsel
  // R[mio_outsel_22]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_22_gated_we;
  assign mio_outsel_22_gated_we = mio_outsel_22_we & mio_outsel_regwen_22_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_22_gated_we),
    .wd     (mio_outsel_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_22_qs)
  );


  // Subregister 23 of Multireg mio_outsel
  // R[mio_outsel_23]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_23_gated_we;
  assign mio_outsel_23_gated_we = mio_outsel_23_we & mio_outsel_regwen_23_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_23_gated_we),
    .wd     (mio_outsel_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_23_qs)
  );


  // Subregister 24 of Multireg mio_outsel
  // R[mio_outsel_24]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_24_gated_we;
  assign mio_outsel_24_gated_we = mio_outsel_24_we & mio_outsel_regwen_24_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_24_gated_we),
    .wd     (mio_outsel_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_24_qs)
  );


  // Subregister 25 of Multireg mio_outsel
  // R[mio_outsel_25]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_25_gated_we;
  assign mio_outsel_25_gated_we = mio_outsel_25_we & mio_outsel_regwen_25_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_25_gated_we),
    .wd     (mio_outsel_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_25_qs)
  );


  // Subregister 26 of Multireg mio_outsel
  // R[mio_outsel_26]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_26_gated_we;
  assign mio_outsel_26_gated_we = mio_outsel_26_we & mio_outsel_regwen_26_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_26_gated_we),
    .wd     (mio_outsel_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_26_qs)
  );


  // Subregister 27 of Multireg mio_outsel
  // R[mio_outsel_27]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_27_gated_we;
  assign mio_outsel_27_gated_we = mio_outsel_27_we & mio_outsel_regwen_27_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_27_gated_we),
    .wd     (mio_outsel_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_27_qs)
  );


  // Subregister 28 of Multireg mio_outsel
  // R[mio_outsel_28]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_28_gated_we;
  assign mio_outsel_28_gated_we = mio_outsel_28_we & mio_outsel_regwen_28_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_28_gated_we),
    .wd     (mio_outsel_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_28_qs)
  );


  // Subregister 29 of Multireg mio_outsel
  // R[mio_outsel_29]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_29_gated_we;
  assign mio_outsel_29_gated_we = mio_outsel_29_we & mio_outsel_regwen_29_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_29_gated_we),
    .wd     (mio_outsel_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_29_qs)
  );


  // Subregister 30 of Multireg mio_outsel
  // R[mio_outsel_30]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_30_gated_we;
  assign mio_outsel_30_gated_we = mio_outsel_30_we & mio_outsel_regwen_30_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_30_gated_we),
    .wd     (mio_outsel_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_30_qs)
  );


  // Subregister 31 of Multireg mio_outsel
  // R[mio_outsel_31]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_outsel_31_gated_we;
  assign mio_outsel_31_gated_we = mio_outsel_31_we & mio_outsel_regwen_31_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h2)
  ) u_mio_outsel_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_outsel_31_gated_we),
    .wd     (mio_outsel_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_outsel_31_qs)
  );


  // Subregister 0 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_0_we),
    .wd     (mio_pad_attr_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_0_qs)
  );


  // Subregister 1 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_1_we),
    .wd     (mio_pad_attr_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_1_qs)
  );


  // Subregister 2 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_2_we),
    .wd     (mio_pad_attr_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_2_qs)
  );


  // Subregister 3 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_3_we),
    .wd     (mio_pad_attr_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_3_qs)
  );


  // Subregister 4 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_4_we),
    .wd     (mio_pad_attr_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_4_qs)
  );


  // Subregister 5 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_5_we),
    .wd     (mio_pad_attr_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_5_qs)
  );


  // Subregister 6 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_6_we),
    .wd     (mio_pad_attr_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_6_qs)
  );


  // Subregister 7 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_7_we),
    .wd     (mio_pad_attr_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_7_qs)
  );


  // Subregister 8 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_8]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_8_we),
    .wd     (mio_pad_attr_regwen_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_8_qs)
  );


  // Subregister 9 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_9]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_9_we),
    .wd     (mio_pad_attr_regwen_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_9_qs)
  );


  // Subregister 10 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_10]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_10_we),
    .wd     (mio_pad_attr_regwen_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_10_qs)
  );


  // Subregister 11 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_11]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_11_we),
    .wd     (mio_pad_attr_regwen_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_11_qs)
  );


  // Subregister 12 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_12]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_12_we),
    .wd     (mio_pad_attr_regwen_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_12_qs)
  );


  // Subregister 13 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_13]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_13_we),
    .wd     (mio_pad_attr_regwen_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_13_qs)
  );


  // Subregister 14 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_14]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_14_we),
    .wd     (mio_pad_attr_regwen_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_14_qs)
  );


  // Subregister 15 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_15]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_15_we),
    .wd     (mio_pad_attr_regwen_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_15_qs)
  );


  // Subregister 16 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_16]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_16_we),
    .wd     (mio_pad_attr_regwen_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_16_qs)
  );


  // Subregister 17 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_17]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_17_we),
    .wd     (mio_pad_attr_regwen_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_17_qs)
  );


  // Subregister 18 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_18]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_18_we),
    .wd     (mio_pad_attr_regwen_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_18_qs)
  );


  // Subregister 19 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_19]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_19_we),
    .wd     (mio_pad_attr_regwen_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_19_qs)
  );


  // Subregister 20 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_20]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_20_we),
    .wd     (mio_pad_attr_regwen_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_20_qs)
  );


  // Subregister 21 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_21]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_21_we),
    .wd     (mio_pad_attr_regwen_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_21_qs)
  );


  // Subregister 22 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_22]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_22_we),
    .wd     (mio_pad_attr_regwen_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_22_qs)
  );


  // Subregister 23 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_23]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_23_we),
    .wd     (mio_pad_attr_regwen_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_23_qs)
  );


  // Subregister 24 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_24]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_24_we),
    .wd     (mio_pad_attr_regwen_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_24_qs)
  );


  // Subregister 25 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_25]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_25_we),
    .wd     (mio_pad_attr_regwen_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_25_qs)
  );


  // Subregister 26 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_26]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_26_we),
    .wd     (mio_pad_attr_regwen_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_26_qs)
  );


  // Subregister 27 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_27]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_27_we),
    .wd     (mio_pad_attr_regwen_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_27_qs)
  );


  // Subregister 28 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_28]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_28_we),
    .wd     (mio_pad_attr_regwen_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_28_qs)
  );


  // Subregister 29 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_29]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_29_we),
    .wd     (mio_pad_attr_regwen_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_29_qs)
  );


  // Subregister 30 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_30]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_30_we),
    .wd     (mio_pad_attr_regwen_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_30_qs)
  );


  // Subregister 31 of Multireg mio_pad_attr_regwen
  // R[mio_pad_attr_regwen_31]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_attr_regwen_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_attr_regwen_31_we),
    .wd     (mio_pad_attr_regwen_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_attr_regwen_31_qs)
  );


  // Subregister 0 of Multireg mio_pad_attr
  // R[mio_pad_attr_0]: V(True)
  logic mio_pad_attr_0_qe;
  logic [8:0] mio_pad_attr_0_flds_we;
  assign mio_pad_attr_0_qe = &mio_pad_attr_0_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_0_gated_we;
  assign mio_pad_attr_0_gated_we = mio_pad_attr_0_we & mio_pad_attr_regwen_0_qs;
  //   F[invert_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_0_invert_0 (
    .re     (mio_pad_attr_0_re),
    .we     (mio_pad_attr_0_gated_we),
    .wd     (mio_pad_attr_0_invert_0_wd),
    .d      (hw2reg.mio_pad_attr[0].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_0_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[0].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_0_invert_0_qs)
  );
  assign reg2hw.mio_pad_attr[0].invert.qe = mio_pad_attr_0_qe;

  //   F[virtual_od_en_0]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_0_virtual_od_en_0 (
    .re     (mio_pad_attr_0_re),
    .we     (mio_pad_attr_0_gated_we),
    .wd     (mio_pad_attr_0_virtual_od_en_0_wd),
    .d      (hw2reg.mio_pad_attr[0].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_0_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[0].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_0_virtual_od_en_0_qs)
  );
  assign reg2hw.mio_pad_attr[0].virtual_od_en.qe = mio_pad_attr_0_qe;

  //   F[pull_en_0]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_0_pull_en_0 (
    .re     (mio_pad_attr_0_re),
    .we     (mio_pad_attr_0_gated_we),
    .wd     (mio_pad_attr_0_pull_en_0_wd),
    .d      (hw2reg.mio_pad_attr[0].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_0_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[0].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_0_pull_en_0_qs)
  );
  assign reg2hw.mio_pad_attr[0].pull_en.qe = mio_pad_attr_0_qe;

  //   F[pull_select_0]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_0_pull_select_0 (
    .re     (mio_pad_attr_0_re),
    .we     (mio_pad_attr_0_gated_we),
    .wd     (mio_pad_attr_0_pull_select_0_wd),
    .d      (hw2reg.mio_pad_attr[0].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_0_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[0].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_0_pull_select_0_qs)
  );
  assign reg2hw.mio_pad_attr[0].pull_select.qe = mio_pad_attr_0_qe;

  //   F[keeper_en_0]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_0_keeper_en_0 (
    .re     (mio_pad_attr_0_re),
    .we     (mio_pad_attr_0_gated_we),
    .wd     (mio_pad_attr_0_keeper_en_0_wd),
    .d      (hw2reg.mio_pad_attr[0].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_0_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[0].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_0_keeper_en_0_qs)
  );
  assign reg2hw.mio_pad_attr[0].keeper_en.qe = mio_pad_attr_0_qe;

  //   F[schmitt_en_0]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_0_schmitt_en_0 (
    .re     (mio_pad_attr_0_re),
    .we     (mio_pad_attr_0_gated_we),
    .wd     (mio_pad_attr_0_schmitt_en_0_wd),
    .d      (hw2reg.mio_pad_attr[0].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_0_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[0].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_0_schmitt_en_0_qs)
  );
  assign reg2hw.mio_pad_attr[0].schmitt_en.qe = mio_pad_attr_0_qe;

  //   F[od_en_0]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_0_od_en_0 (
    .re     (mio_pad_attr_0_re),
    .we     (mio_pad_attr_0_gated_we),
    .wd     (mio_pad_attr_0_od_en_0_wd),
    .d      (hw2reg.mio_pad_attr[0].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_0_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[0].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_0_od_en_0_qs)
  );
  assign reg2hw.mio_pad_attr[0].od_en.qe = mio_pad_attr_0_qe;

  //   F[slew_rate_0]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_0_slew_rate_0 (
    .re     (mio_pad_attr_0_re),
    .we     (mio_pad_attr_0_gated_we),
    .wd     (mio_pad_attr_0_slew_rate_0_wd),
    .d      (hw2reg.mio_pad_attr[0].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_0_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[0].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_0_slew_rate_0_qs)
  );
  assign reg2hw.mio_pad_attr[0].slew_rate.qe = mio_pad_attr_0_qe;

  //   F[drive_strength_0]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_0_drive_strength_0 (
    .re     (mio_pad_attr_0_re),
    .we     (mio_pad_attr_0_gated_we),
    .wd     (mio_pad_attr_0_drive_strength_0_wd),
    .d      (hw2reg.mio_pad_attr[0].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_0_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[0].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_0_drive_strength_0_qs)
  );
  assign reg2hw.mio_pad_attr[0].drive_strength.qe = mio_pad_attr_0_qe;


  // Subregister 1 of Multireg mio_pad_attr
  // R[mio_pad_attr_1]: V(True)
  logic mio_pad_attr_1_qe;
  logic [8:0] mio_pad_attr_1_flds_we;
  assign mio_pad_attr_1_qe = &mio_pad_attr_1_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_1_gated_we;
  assign mio_pad_attr_1_gated_we = mio_pad_attr_1_we & mio_pad_attr_regwen_1_qs;
  //   F[invert_1]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_1_invert_1 (
    .re     (mio_pad_attr_1_re),
    .we     (mio_pad_attr_1_gated_we),
    .wd     (mio_pad_attr_1_invert_1_wd),
    .d      (hw2reg.mio_pad_attr[1].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_1_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[1].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_1_invert_1_qs)
  );
  assign reg2hw.mio_pad_attr[1].invert.qe = mio_pad_attr_1_qe;

  //   F[virtual_od_en_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_1_virtual_od_en_1 (
    .re     (mio_pad_attr_1_re),
    .we     (mio_pad_attr_1_gated_we),
    .wd     (mio_pad_attr_1_virtual_od_en_1_wd),
    .d      (hw2reg.mio_pad_attr[1].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_1_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[1].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_1_virtual_od_en_1_qs)
  );
  assign reg2hw.mio_pad_attr[1].virtual_od_en.qe = mio_pad_attr_1_qe;

  //   F[pull_en_1]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_1_pull_en_1 (
    .re     (mio_pad_attr_1_re),
    .we     (mio_pad_attr_1_gated_we),
    .wd     (mio_pad_attr_1_pull_en_1_wd),
    .d      (hw2reg.mio_pad_attr[1].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_1_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[1].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_1_pull_en_1_qs)
  );
  assign reg2hw.mio_pad_attr[1].pull_en.qe = mio_pad_attr_1_qe;

  //   F[pull_select_1]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_1_pull_select_1 (
    .re     (mio_pad_attr_1_re),
    .we     (mio_pad_attr_1_gated_we),
    .wd     (mio_pad_attr_1_pull_select_1_wd),
    .d      (hw2reg.mio_pad_attr[1].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_1_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[1].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_1_pull_select_1_qs)
  );
  assign reg2hw.mio_pad_attr[1].pull_select.qe = mio_pad_attr_1_qe;

  //   F[keeper_en_1]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_1_keeper_en_1 (
    .re     (mio_pad_attr_1_re),
    .we     (mio_pad_attr_1_gated_we),
    .wd     (mio_pad_attr_1_keeper_en_1_wd),
    .d      (hw2reg.mio_pad_attr[1].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_1_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[1].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_1_keeper_en_1_qs)
  );
  assign reg2hw.mio_pad_attr[1].keeper_en.qe = mio_pad_attr_1_qe;

  //   F[schmitt_en_1]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_1_schmitt_en_1 (
    .re     (mio_pad_attr_1_re),
    .we     (mio_pad_attr_1_gated_we),
    .wd     (mio_pad_attr_1_schmitt_en_1_wd),
    .d      (hw2reg.mio_pad_attr[1].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_1_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[1].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_1_schmitt_en_1_qs)
  );
  assign reg2hw.mio_pad_attr[1].schmitt_en.qe = mio_pad_attr_1_qe;

  //   F[od_en_1]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_1_od_en_1 (
    .re     (mio_pad_attr_1_re),
    .we     (mio_pad_attr_1_gated_we),
    .wd     (mio_pad_attr_1_od_en_1_wd),
    .d      (hw2reg.mio_pad_attr[1].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_1_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[1].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_1_od_en_1_qs)
  );
  assign reg2hw.mio_pad_attr[1].od_en.qe = mio_pad_attr_1_qe;

  //   F[slew_rate_1]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_1_slew_rate_1 (
    .re     (mio_pad_attr_1_re),
    .we     (mio_pad_attr_1_gated_we),
    .wd     (mio_pad_attr_1_slew_rate_1_wd),
    .d      (hw2reg.mio_pad_attr[1].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_1_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[1].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_1_slew_rate_1_qs)
  );
  assign reg2hw.mio_pad_attr[1].slew_rate.qe = mio_pad_attr_1_qe;

  //   F[drive_strength_1]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_1_drive_strength_1 (
    .re     (mio_pad_attr_1_re),
    .we     (mio_pad_attr_1_gated_we),
    .wd     (mio_pad_attr_1_drive_strength_1_wd),
    .d      (hw2reg.mio_pad_attr[1].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_1_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[1].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_1_drive_strength_1_qs)
  );
  assign reg2hw.mio_pad_attr[1].drive_strength.qe = mio_pad_attr_1_qe;


  // Subregister 2 of Multireg mio_pad_attr
  // R[mio_pad_attr_2]: V(True)
  logic mio_pad_attr_2_qe;
  logic [8:0] mio_pad_attr_2_flds_we;
  assign mio_pad_attr_2_qe = &mio_pad_attr_2_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_2_gated_we;
  assign mio_pad_attr_2_gated_we = mio_pad_attr_2_we & mio_pad_attr_regwen_2_qs;
  //   F[invert_2]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_2_invert_2 (
    .re     (mio_pad_attr_2_re),
    .we     (mio_pad_attr_2_gated_we),
    .wd     (mio_pad_attr_2_invert_2_wd),
    .d      (hw2reg.mio_pad_attr[2].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_2_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[2].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_2_invert_2_qs)
  );
  assign reg2hw.mio_pad_attr[2].invert.qe = mio_pad_attr_2_qe;

  //   F[virtual_od_en_2]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_2_virtual_od_en_2 (
    .re     (mio_pad_attr_2_re),
    .we     (mio_pad_attr_2_gated_we),
    .wd     (mio_pad_attr_2_virtual_od_en_2_wd),
    .d      (hw2reg.mio_pad_attr[2].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_2_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[2].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_2_virtual_od_en_2_qs)
  );
  assign reg2hw.mio_pad_attr[2].virtual_od_en.qe = mio_pad_attr_2_qe;

  //   F[pull_en_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_2_pull_en_2 (
    .re     (mio_pad_attr_2_re),
    .we     (mio_pad_attr_2_gated_we),
    .wd     (mio_pad_attr_2_pull_en_2_wd),
    .d      (hw2reg.mio_pad_attr[2].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_2_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[2].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_2_pull_en_2_qs)
  );
  assign reg2hw.mio_pad_attr[2].pull_en.qe = mio_pad_attr_2_qe;

  //   F[pull_select_2]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_2_pull_select_2 (
    .re     (mio_pad_attr_2_re),
    .we     (mio_pad_attr_2_gated_we),
    .wd     (mio_pad_attr_2_pull_select_2_wd),
    .d      (hw2reg.mio_pad_attr[2].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_2_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[2].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_2_pull_select_2_qs)
  );
  assign reg2hw.mio_pad_attr[2].pull_select.qe = mio_pad_attr_2_qe;

  //   F[keeper_en_2]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_2_keeper_en_2 (
    .re     (mio_pad_attr_2_re),
    .we     (mio_pad_attr_2_gated_we),
    .wd     (mio_pad_attr_2_keeper_en_2_wd),
    .d      (hw2reg.mio_pad_attr[2].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_2_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[2].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_2_keeper_en_2_qs)
  );
  assign reg2hw.mio_pad_attr[2].keeper_en.qe = mio_pad_attr_2_qe;

  //   F[schmitt_en_2]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_2_schmitt_en_2 (
    .re     (mio_pad_attr_2_re),
    .we     (mio_pad_attr_2_gated_we),
    .wd     (mio_pad_attr_2_schmitt_en_2_wd),
    .d      (hw2reg.mio_pad_attr[2].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_2_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[2].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_2_schmitt_en_2_qs)
  );
  assign reg2hw.mio_pad_attr[2].schmitt_en.qe = mio_pad_attr_2_qe;

  //   F[od_en_2]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_2_od_en_2 (
    .re     (mio_pad_attr_2_re),
    .we     (mio_pad_attr_2_gated_we),
    .wd     (mio_pad_attr_2_od_en_2_wd),
    .d      (hw2reg.mio_pad_attr[2].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_2_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[2].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_2_od_en_2_qs)
  );
  assign reg2hw.mio_pad_attr[2].od_en.qe = mio_pad_attr_2_qe;

  //   F[slew_rate_2]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_2_slew_rate_2 (
    .re     (mio_pad_attr_2_re),
    .we     (mio_pad_attr_2_gated_we),
    .wd     (mio_pad_attr_2_slew_rate_2_wd),
    .d      (hw2reg.mio_pad_attr[2].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_2_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[2].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_2_slew_rate_2_qs)
  );
  assign reg2hw.mio_pad_attr[2].slew_rate.qe = mio_pad_attr_2_qe;

  //   F[drive_strength_2]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_2_drive_strength_2 (
    .re     (mio_pad_attr_2_re),
    .we     (mio_pad_attr_2_gated_we),
    .wd     (mio_pad_attr_2_drive_strength_2_wd),
    .d      (hw2reg.mio_pad_attr[2].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_2_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[2].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_2_drive_strength_2_qs)
  );
  assign reg2hw.mio_pad_attr[2].drive_strength.qe = mio_pad_attr_2_qe;


  // Subregister 3 of Multireg mio_pad_attr
  // R[mio_pad_attr_3]: V(True)
  logic mio_pad_attr_3_qe;
  logic [8:0] mio_pad_attr_3_flds_we;
  assign mio_pad_attr_3_qe = &mio_pad_attr_3_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_3_gated_we;
  assign mio_pad_attr_3_gated_we = mio_pad_attr_3_we & mio_pad_attr_regwen_3_qs;
  //   F[invert_3]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_3_invert_3 (
    .re     (mio_pad_attr_3_re),
    .we     (mio_pad_attr_3_gated_we),
    .wd     (mio_pad_attr_3_invert_3_wd),
    .d      (hw2reg.mio_pad_attr[3].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_3_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[3].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_3_invert_3_qs)
  );
  assign reg2hw.mio_pad_attr[3].invert.qe = mio_pad_attr_3_qe;

  //   F[virtual_od_en_3]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_3_virtual_od_en_3 (
    .re     (mio_pad_attr_3_re),
    .we     (mio_pad_attr_3_gated_we),
    .wd     (mio_pad_attr_3_virtual_od_en_3_wd),
    .d      (hw2reg.mio_pad_attr[3].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_3_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[3].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_3_virtual_od_en_3_qs)
  );
  assign reg2hw.mio_pad_attr[3].virtual_od_en.qe = mio_pad_attr_3_qe;

  //   F[pull_en_3]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_3_pull_en_3 (
    .re     (mio_pad_attr_3_re),
    .we     (mio_pad_attr_3_gated_we),
    .wd     (mio_pad_attr_3_pull_en_3_wd),
    .d      (hw2reg.mio_pad_attr[3].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_3_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[3].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_3_pull_en_3_qs)
  );
  assign reg2hw.mio_pad_attr[3].pull_en.qe = mio_pad_attr_3_qe;

  //   F[pull_select_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_3_pull_select_3 (
    .re     (mio_pad_attr_3_re),
    .we     (mio_pad_attr_3_gated_we),
    .wd     (mio_pad_attr_3_pull_select_3_wd),
    .d      (hw2reg.mio_pad_attr[3].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_3_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[3].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_3_pull_select_3_qs)
  );
  assign reg2hw.mio_pad_attr[3].pull_select.qe = mio_pad_attr_3_qe;

  //   F[keeper_en_3]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_3_keeper_en_3 (
    .re     (mio_pad_attr_3_re),
    .we     (mio_pad_attr_3_gated_we),
    .wd     (mio_pad_attr_3_keeper_en_3_wd),
    .d      (hw2reg.mio_pad_attr[3].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_3_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[3].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_3_keeper_en_3_qs)
  );
  assign reg2hw.mio_pad_attr[3].keeper_en.qe = mio_pad_attr_3_qe;

  //   F[schmitt_en_3]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_3_schmitt_en_3 (
    .re     (mio_pad_attr_3_re),
    .we     (mio_pad_attr_3_gated_we),
    .wd     (mio_pad_attr_3_schmitt_en_3_wd),
    .d      (hw2reg.mio_pad_attr[3].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_3_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[3].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_3_schmitt_en_3_qs)
  );
  assign reg2hw.mio_pad_attr[3].schmitt_en.qe = mio_pad_attr_3_qe;

  //   F[od_en_3]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_3_od_en_3 (
    .re     (mio_pad_attr_3_re),
    .we     (mio_pad_attr_3_gated_we),
    .wd     (mio_pad_attr_3_od_en_3_wd),
    .d      (hw2reg.mio_pad_attr[3].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_3_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[3].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_3_od_en_3_qs)
  );
  assign reg2hw.mio_pad_attr[3].od_en.qe = mio_pad_attr_3_qe;

  //   F[slew_rate_3]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_3_slew_rate_3 (
    .re     (mio_pad_attr_3_re),
    .we     (mio_pad_attr_3_gated_we),
    .wd     (mio_pad_attr_3_slew_rate_3_wd),
    .d      (hw2reg.mio_pad_attr[3].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_3_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[3].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_3_slew_rate_3_qs)
  );
  assign reg2hw.mio_pad_attr[3].slew_rate.qe = mio_pad_attr_3_qe;

  //   F[drive_strength_3]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_3_drive_strength_3 (
    .re     (mio_pad_attr_3_re),
    .we     (mio_pad_attr_3_gated_we),
    .wd     (mio_pad_attr_3_drive_strength_3_wd),
    .d      (hw2reg.mio_pad_attr[3].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_3_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[3].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_3_drive_strength_3_qs)
  );
  assign reg2hw.mio_pad_attr[3].drive_strength.qe = mio_pad_attr_3_qe;


  // Subregister 4 of Multireg mio_pad_attr
  // R[mio_pad_attr_4]: V(True)
  logic mio_pad_attr_4_qe;
  logic [8:0] mio_pad_attr_4_flds_we;
  assign mio_pad_attr_4_qe = &mio_pad_attr_4_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_4_gated_we;
  assign mio_pad_attr_4_gated_we = mio_pad_attr_4_we & mio_pad_attr_regwen_4_qs;
  //   F[invert_4]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_4_invert_4 (
    .re     (mio_pad_attr_4_re),
    .we     (mio_pad_attr_4_gated_we),
    .wd     (mio_pad_attr_4_invert_4_wd),
    .d      (hw2reg.mio_pad_attr[4].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_4_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[4].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_4_invert_4_qs)
  );
  assign reg2hw.mio_pad_attr[4].invert.qe = mio_pad_attr_4_qe;

  //   F[virtual_od_en_4]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_4_virtual_od_en_4 (
    .re     (mio_pad_attr_4_re),
    .we     (mio_pad_attr_4_gated_we),
    .wd     (mio_pad_attr_4_virtual_od_en_4_wd),
    .d      (hw2reg.mio_pad_attr[4].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_4_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[4].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_4_virtual_od_en_4_qs)
  );
  assign reg2hw.mio_pad_attr[4].virtual_od_en.qe = mio_pad_attr_4_qe;

  //   F[pull_en_4]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_4_pull_en_4 (
    .re     (mio_pad_attr_4_re),
    .we     (mio_pad_attr_4_gated_we),
    .wd     (mio_pad_attr_4_pull_en_4_wd),
    .d      (hw2reg.mio_pad_attr[4].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_4_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[4].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_4_pull_en_4_qs)
  );
  assign reg2hw.mio_pad_attr[4].pull_en.qe = mio_pad_attr_4_qe;

  //   F[pull_select_4]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_4_pull_select_4 (
    .re     (mio_pad_attr_4_re),
    .we     (mio_pad_attr_4_gated_we),
    .wd     (mio_pad_attr_4_pull_select_4_wd),
    .d      (hw2reg.mio_pad_attr[4].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_4_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[4].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_4_pull_select_4_qs)
  );
  assign reg2hw.mio_pad_attr[4].pull_select.qe = mio_pad_attr_4_qe;

  //   F[keeper_en_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_4_keeper_en_4 (
    .re     (mio_pad_attr_4_re),
    .we     (mio_pad_attr_4_gated_we),
    .wd     (mio_pad_attr_4_keeper_en_4_wd),
    .d      (hw2reg.mio_pad_attr[4].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_4_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[4].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_4_keeper_en_4_qs)
  );
  assign reg2hw.mio_pad_attr[4].keeper_en.qe = mio_pad_attr_4_qe;

  //   F[schmitt_en_4]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_4_schmitt_en_4 (
    .re     (mio_pad_attr_4_re),
    .we     (mio_pad_attr_4_gated_we),
    .wd     (mio_pad_attr_4_schmitt_en_4_wd),
    .d      (hw2reg.mio_pad_attr[4].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_4_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[4].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_4_schmitt_en_4_qs)
  );
  assign reg2hw.mio_pad_attr[4].schmitt_en.qe = mio_pad_attr_4_qe;

  //   F[od_en_4]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_4_od_en_4 (
    .re     (mio_pad_attr_4_re),
    .we     (mio_pad_attr_4_gated_we),
    .wd     (mio_pad_attr_4_od_en_4_wd),
    .d      (hw2reg.mio_pad_attr[4].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_4_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[4].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_4_od_en_4_qs)
  );
  assign reg2hw.mio_pad_attr[4].od_en.qe = mio_pad_attr_4_qe;

  //   F[slew_rate_4]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_4_slew_rate_4 (
    .re     (mio_pad_attr_4_re),
    .we     (mio_pad_attr_4_gated_we),
    .wd     (mio_pad_attr_4_slew_rate_4_wd),
    .d      (hw2reg.mio_pad_attr[4].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_4_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[4].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_4_slew_rate_4_qs)
  );
  assign reg2hw.mio_pad_attr[4].slew_rate.qe = mio_pad_attr_4_qe;

  //   F[drive_strength_4]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_4_drive_strength_4 (
    .re     (mio_pad_attr_4_re),
    .we     (mio_pad_attr_4_gated_we),
    .wd     (mio_pad_attr_4_drive_strength_4_wd),
    .d      (hw2reg.mio_pad_attr[4].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_4_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[4].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_4_drive_strength_4_qs)
  );
  assign reg2hw.mio_pad_attr[4].drive_strength.qe = mio_pad_attr_4_qe;


  // Subregister 5 of Multireg mio_pad_attr
  // R[mio_pad_attr_5]: V(True)
  logic mio_pad_attr_5_qe;
  logic [8:0] mio_pad_attr_5_flds_we;
  assign mio_pad_attr_5_qe = &mio_pad_attr_5_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_5_gated_we;
  assign mio_pad_attr_5_gated_we = mio_pad_attr_5_we & mio_pad_attr_regwen_5_qs;
  //   F[invert_5]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_5_invert_5 (
    .re     (mio_pad_attr_5_re),
    .we     (mio_pad_attr_5_gated_we),
    .wd     (mio_pad_attr_5_invert_5_wd),
    .d      (hw2reg.mio_pad_attr[5].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_5_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[5].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_5_invert_5_qs)
  );
  assign reg2hw.mio_pad_attr[5].invert.qe = mio_pad_attr_5_qe;

  //   F[virtual_od_en_5]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_5_virtual_od_en_5 (
    .re     (mio_pad_attr_5_re),
    .we     (mio_pad_attr_5_gated_we),
    .wd     (mio_pad_attr_5_virtual_od_en_5_wd),
    .d      (hw2reg.mio_pad_attr[5].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_5_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[5].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_5_virtual_od_en_5_qs)
  );
  assign reg2hw.mio_pad_attr[5].virtual_od_en.qe = mio_pad_attr_5_qe;

  //   F[pull_en_5]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_5_pull_en_5 (
    .re     (mio_pad_attr_5_re),
    .we     (mio_pad_attr_5_gated_we),
    .wd     (mio_pad_attr_5_pull_en_5_wd),
    .d      (hw2reg.mio_pad_attr[5].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_5_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[5].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_5_pull_en_5_qs)
  );
  assign reg2hw.mio_pad_attr[5].pull_en.qe = mio_pad_attr_5_qe;

  //   F[pull_select_5]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_5_pull_select_5 (
    .re     (mio_pad_attr_5_re),
    .we     (mio_pad_attr_5_gated_we),
    .wd     (mio_pad_attr_5_pull_select_5_wd),
    .d      (hw2reg.mio_pad_attr[5].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_5_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[5].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_5_pull_select_5_qs)
  );
  assign reg2hw.mio_pad_attr[5].pull_select.qe = mio_pad_attr_5_qe;

  //   F[keeper_en_5]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_5_keeper_en_5 (
    .re     (mio_pad_attr_5_re),
    .we     (mio_pad_attr_5_gated_we),
    .wd     (mio_pad_attr_5_keeper_en_5_wd),
    .d      (hw2reg.mio_pad_attr[5].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_5_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[5].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_5_keeper_en_5_qs)
  );
  assign reg2hw.mio_pad_attr[5].keeper_en.qe = mio_pad_attr_5_qe;

  //   F[schmitt_en_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_5_schmitt_en_5 (
    .re     (mio_pad_attr_5_re),
    .we     (mio_pad_attr_5_gated_we),
    .wd     (mio_pad_attr_5_schmitt_en_5_wd),
    .d      (hw2reg.mio_pad_attr[5].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_5_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[5].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_5_schmitt_en_5_qs)
  );
  assign reg2hw.mio_pad_attr[5].schmitt_en.qe = mio_pad_attr_5_qe;

  //   F[od_en_5]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_5_od_en_5 (
    .re     (mio_pad_attr_5_re),
    .we     (mio_pad_attr_5_gated_we),
    .wd     (mio_pad_attr_5_od_en_5_wd),
    .d      (hw2reg.mio_pad_attr[5].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_5_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[5].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_5_od_en_5_qs)
  );
  assign reg2hw.mio_pad_attr[5].od_en.qe = mio_pad_attr_5_qe;

  //   F[slew_rate_5]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_5_slew_rate_5 (
    .re     (mio_pad_attr_5_re),
    .we     (mio_pad_attr_5_gated_we),
    .wd     (mio_pad_attr_5_slew_rate_5_wd),
    .d      (hw2reg.mio_pad_attr[5].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_5_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[5].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_5_slew_rate_5_qs)
  );
  assign reg2hw.mio_pad_attr[5].slew_rate.qe = mio_pad_attr_5_qe;

  //   F[drive_strength_5]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_5_drive_strength_5 (
    .re     (mio_pad_attr_5_re),
    .we     (mio_pad_attr_5_gated_we),
    .wd     (mio_pad_attr_5_drive_strength_5_wd),
    .d      (hw2reg.mio_pad_attr[5].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_5_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[5].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_5_drive_strength_5_qs)
  );
  assign reg2hw.mio_pad_attr[5].drive_strength.qe = mio_pad_attr_5_qe;


  // Subregister 6 of Multireg mio_pad_attr
  // R[mio_pad_attr_6]: V(True)
  logic mio_pad_attr_6_qe;
  logic [8:0] mio_pad_attr_6_flds_we;
  assign mio_pad_attr_6_qe = &mio_pad_attr_6_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_6_gated_we;
  assign mio_pad_attr_6_gated_we = mio_pad_attr_6_we & mio_pad_attr_regwen_6_qs;
  //   F[invert_6]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_6_invert_6 (
    .re     (mio_pad_attr_6_re),
    .we     (mio_pad_attr_6_gated_we),
    .wd     (mio_pad_attr_6_invert_6_wd),
    .d      (hw2reg.mio_pad_attr[6].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_6_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[6].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_6_invert_6_qs)
  );
  assign reg2hw.mio_pad_attr[6].invert.qe = mio_pad_attr_6_qe;

  //   F[virtual_od_en_6]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_6_virtual_od_en_6 (
    .re     (mio_pad_attr_6_re),
    .we     (mio_pad_attr_6_gated_we),
    .wd     (mio_pad_attr_6_virtual_od_en_6_wd),
    .d      (hw2reg.mio_pad_attr[6].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_6_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[6].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_6_virtual_od_en_6_qs)
  );
  assign reg2hw.mio_pad_attr[6].virtual_od_en.qe = mio_pad_attr_6_qe;

  //   F[pull_en_6]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_6_pull_en_6 (
    .re     (mio_pad_attr_6_re),
    .we     (mio_pad_attr_6_gated_we),
    .wd     (mio_pad_attr_6_pull_en_6_wd),
    .d      (hw2reg.mio_pad_attr[6].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_6_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[6].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_6_pull_en_6_qs)
  );
  assign reg2hw.mio_pad_attr[6].pull_en.qe = mio_pad_attr_6_qe;

  //   F[pull_select_6]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_6_pull_select_6 (
    .re     (mio_pad_attr_6_re),
    .we     (mio_pad_attr_6_gated_we),
    .wd     (mio_pad_attr_6_pull_select_6_wd),
    .d      (hw2reg.mio_pad_attr[6].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_6_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[6].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_6_pull_select_6_qs)
  );
  assign reg2hw.mio_pad_attr[6].pull_select.qe = mio_pad_attr_6_qe;

  //   F[keeper_en_6]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_6_keeper_en_6 (
    .re     (mio_pad_attr_6_re),
    .we     (mio_pad_attr_6_gated_we),
    .wd     (mio_pad_attr_6_keeper_en_6_wd),
    .d      (hw2reg.mio_pad_attr[6].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_6_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[6].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_6_keeper_en_6_qs)
  );
  assign reg2hw.mio_pad_attr[6].keeper_en.qe = mio_pad_attr_6_qe;

  //   F[schmitt_en_6]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_6_schmitt_en_6 (
    .re     (mio_pad_attr_6_re),
    .we     (mio_pad_attr_6_gated_we),
    .wd     (mio_pad_attr_6_schmitt_en_6_wd),
    .d      (hw2reg.mio_pad_attr[6].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_6_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[6].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_6_schmitt_en_6_qs)
  );
  assign reg2hw.mio_pad_attr[6].schmitt_en.qe = mio_pad_attr_6_qe;

  //   F[od_en_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_6_od_en_6 (
    .re     (mio_pad_attr_6_re),
    .we     (mio_pad_attr_6_gated_we),
    .wd     (mio_pad_attr_6_od_en_6_wd),
    .d      (hw2reg.mio_pad_attr[6].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_6_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[6].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_6_od_en_6_qs)
  );
  assign reg2hw.mio_pad_attr[6].od_en.qe = mio_pad_attr_6_qe;

  //   F[slew_rate_6]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_6_slew_rate_6 (
    .re     (mio_pad_attr_6_re),
    .we     (mio_pad_attr_6_gated_we),
    .wd     (mio_pad_attr_6_slew_rate_6_wd),
    .d      (hw2reg.mio_pad_attr[6].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_6_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[6].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_6_slew_rate_6_qs)
  );
  assign reg2hw.mio_pad_attr[6].slew_rate.qe = mio_pad_attr_6_qe;

  //   F[drive_strength_6]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_6_drive_strength_6 (
    .re     (mio_pad_attr_6_re),
    .we     (mio_pad_attr_6_gated_we),
    .wd     (mio_pad_attr_6_drive_strength_6_wd),
    .d      (hw2reg.mio_pad_attr[6].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_6_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[6].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_6_drive_strength_6_qs)
  );
  assign reg2hw.mio_pad_attr[6].drive_strength.qe = mio_pad_attr_6_qe;


  // Subregister 7 of Multireg mio_pad_attr
  // R[mio_pad_attr_7]: V(True)
  logic mio_pad_attr_7_qe;
  logic [8:0] mio_pad_attr_7_flds_we;
  assign mio_pad_attr_7_qe = &mio_pad_attr_7_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_7_gated_we;
  assign mio_pad_attr_7_gated_we = mio_pad_attr_7_we & mio_pad_attr_regwen_7_qs;
  //   F[invert_7]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_7_invert_7 (
    .re     (mio_pad_attr_7_re),
    .we     (mio_pad_attr_7_gated_we),
    .wd     (mio_pad_attr_7_invert_7_wd),
    .d      (hw2reg.mio_pad_attr[7].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_7_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[7].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_7_invert_7_qs)
  );
  assign reg2hw.mio_pad_attr[7].invert.qe = mio_pad_attr_7_qe;

  //   F[virtual_od_en_7]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_7_virtual_od_en_7 (
    .re     (mio_pad_attr_7_re),
    .we     (mio_pad_attr_7_gated_we),
    .wd     (mio_pad_attr_7_virtual_od_en_7_wd),
    .d      (hw2reg.mio_pad_attr[7].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_7_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[7].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_7_virtual_od_en_7_qs)
  );
  assign reg2hw.mio_pad_attr[7].virtual_od_en.qe = mio_pad_attr_7_qe;

  //   F[pull_en_7]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_7_pull_en_7 (
    .re     (mio_pad_attr_7_re),
    .we     (mio_pad_attr_7_gated_we),
    .wd     (mio_pad_attr_7_pull_en_7_wd),
    .d      (hw2reg.mio_pad_attr[7].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_7_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[7].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_7_pull_en_7_qs)
  );
  assign reg2hw.mio_pad_attr[7].pull_en.qe = mio_pad_attr_7_qe;

  //   F[pull_select_7]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_7_pull_select_7 (
    .re     (mio_pad_attr_7_re),
    .we     (mio_pad_attr_7_gated_we),
    .wd     (mio_pad_attr_7_pull_select_7_wd),
    .d      (hw2reg.mio_pad_attr[7].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_7_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[7].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_7_pull_select_7_qs)
  );
  assign reg2hw.mio_pad_attr[7].pull_select.qe = mio_pad_attr_7_qe;

  //   F[keeper_en_7]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_7_keeper_en_7 (
    .re     (mio_pad_attr_7_re),
    .we     (mio_pad_attr_7_gated_we),
    .wd     (mio_pad_attr_7_keeper_en_7_wd),
    .d      (hw2reg.mio_pad_attr[7].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_7_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[7].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_7_keeper_en_7_qs)
  );
  assign reg2hw.mio_pad_attr[7].keeper_en.qe = mio_pad_attr_7_qe;

  //   F[schmitt_en_7]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_7_schmitt_en_7 (
    .re     (mio_pad_attr_7_re),
    .we     (mio_pad_attr_7_gated_we),
    .wd     (mio_pad_attr_7_schmitt_en_7_wd),
    .d      (hw2reg.mio_pad_attr[7].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_7_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[7].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_7_schmitt_en_7_qs)
  );
  assign reg2hw.mio_pad_attr[7].schmitt_en.qe = mio_pad_attr_7_qe;

  //   F[od_en_7]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_7_od_en_7 (
    .re     (mio_pad_attr_7_re),
    .we     (mio_pad_attr_7_gated_we),
    .wd     (mio_pad_attr_7_od_en_7_wd),
    .d      (hw2reg.mio_pad_attr[7].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_7_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[7].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_7_od_en_7_qs)
  );
  assign reg2hw.mio_pad_attr[7].od_en.qe = mio_pad_attr_7_qe;

  //   F[slew_rate_7]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_7_slew_rate_7 (
    .re     (mio_pad_attr_7_re),
    .we     (mio_pad_attr_7_gated_we),
    .wd     (mio_pad_attr_7_slew_rate_7_wd),
    .d      (hw2reg.mio_pad_attr[7].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_7_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[7].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_7_slew_rate_7_qs)
  );
  assign reg2hw.mio_pad_attr[7].slew_rate.qe = mio_pad_attr_7_qe;

  //   F[drive_strength_7]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_7_drive_strength_7 (
    .re     (mio_pad_attr_7_re),
    .we     (mio_pad_attr_7_gated_we),
    .wd     (mio_pad_attr_7_drive_strength_7_wd),
    .d      (hw2reg.mio_pad_attr[7].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_7_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[7].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_7_drive_strength_7_qs)
  );
  assign reg2hw.mio_pad_attr[7].drive_strength.qe = mio_pad_attr_7_qe;


  // Subregister 8 of Multireg mio_pad_attr
  // R[mio_pad_attr_8]: V(True)
  logic mio_pad_attr_8_qe;
  logic [8:0] mio_pad_attr_8_flds_we;
  assign mio_pad_attr_8_qe = &mio_pad_attr_8_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_8_gated_we;
  assign mio_pad_attr_8_gated_we = mio_pad_attr_8_we & mio_pad_attr_regwen_8_qs;
  //   F[invert_8]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_8_invert_8 (
    .re     (mio_pad_attr_8_re),
    .we     (mio_pad_attr_8_gated_we),
    .wd     (mio_pad_attr_8_invert_8_wd),
    .d      (hw2reg.mio_pad_attr[8].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_8_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[8].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_8_invert_8_qs)
  );
  assign reg2hw.mio_pad_attr[8].invert.qe = mio_pad_attr_8_qe;

  //   F[virtual_od_en_8]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_8_virtual_od_en_8 (
    .re     (mio_pad_attr_8_re),
    .we     (mio_pad_attr_8_gated_we),
    .wd     (mio_pad_attr_8_virtual_od_en_8_wd),
    .d      (hw2reg.mio_pad_attr[8].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_8_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[8].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_8_virtual_od_en_8_qs)
  );
  assign reg2hw.mio_pad_attr[8].virtual_od_en.qe = mio_pad_attr_8_qe;

  //   F[pull_en_8]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_8_pull_en_8 (
    .re     (mio_pad_attr_8_re),
    .we     (mio_pad_attr_8_gated_we),
    .wd     (mio_pad_attr_8_pull_en_8_wd),
    .d      (hw2reg.mio_pad_attr[8].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_8_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[8].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_8_pull_en_8_qs)
  );
  assign reg2hw.mio_pad_attr[8].pull_en.qe = mio_pad_attr_8_qe;

  //   F[pull_select_8]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_8_pull_select_8 (
    .re     (mio_pad_attr_8_re),
    .we     (mio_pad_attr_8_gated_we),
    .wd     (mio_pad_attr_8_pull_select_8_wd),
    .d      (hw2reg.mio_pad_attr[8].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_8_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[8].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_8_pull_select_8_qs)
  );
  assign reg2hw.mio_pad_attr[8].pull_select.qe = mio_pad_attr_8_qe;

  //   F[keeper_en_8]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_8_keeper_en_8 (
    .re     (mio_pad_attr_8_re),
    .we     (mio_pad_attr_8_gated_we),
    .wd     (mio_pad_attr_8_keeper_en_8_wd),
    .d      (hw2reg.mio_pad_attr[8].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_8_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[8].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_8_keeper_en_8_qs)
  );
  assign reg2hw.mio_pad_attr[8].keeper_en.qe = mio_pad_attr_8_qe;

  //   F[schmitt_en_8]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_8_schmitt_en_8 (
    .re     (mio_pad_attr_8_re),
    .we     (mio_pad_attr_8_gated_we),
    .wd     (mio_pad_attr_8_schmitt_en_8_wd),
    .d      (hw2reg.mio_pad_attr[8].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_8_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[8].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_8_schmitt_en_8_qs)
  );
  assign reg2hw.mio_pad_attr[8].schmitt_en.qe = mio_pad_attr_8_qe;

  //   F[od_en_8]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_8_od_en_8 (
    .re     (mio_pad_attr_8_re),
    .we     (mio_pad_attr_8_gated_we),
    .wd     (mio_pad_attr_8_od_en_8_wd),
    .d      (hw2reg.mio_pad_attr[8].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_8_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[8].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_8_od_en_8_qs)
  );
  assign reg2hw.mio_pad_attr[8].od_en.qe = mio_pad_attr_8_qe;

  //   F[slew_rate_8]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_8_slew_rate_8 (
    .re     (mio_pad_attr_8_re),
    .we     (mio_pad_attr_8_gated_we),
    .wd     (mio_pad_attr_8_slew_rate_8_wd),
    .d      (hw2reg.mio_pad_attr[8].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_8_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[8].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_8_slew_rate_8_qs)
  );
  assign reg2hw.mio_pad_attr[8].slew_rate.qe = mio_pad_attr_8_qe;

  //   F[drive_strength_8]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_8_drive_strength_8 (
    .re     (mio_pad_attr_8_re),
    .we     (mio_pad_attr_8_gated_we),
    .wd     (mio_pad_attr_8_drive_strength_8_wd),
    .d      (hw2reg.mio_pad_attr[8].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_8_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[8].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_8_drive_strength_8_qs)
  );
  assign reg2hw.mio_pad_attr[8].drive_strength.qe = mio_pad_attr_8_qe;


  // Subregister 9 of Multireg mio_pad_attr
  // R[mio_pad_attr_9]: V(True)
  logic mio_pad_attr_9_qe;
  logic [8:0] mio_pad_attr_9_flds_we;
  assign mio_pad_attr_9_qe = &mio_pad_attr_9_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_9_gated_we;
  assign mio_pad_attr_9_gated_we = mio_pad_attr_9_we & mio_pad_attr_regwen_9_qs;
  //   F[invert_9]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_9_invert_9 (
    .re     (mio_pad_attr_9_re),
    .we     (mio_pad_attr_9_gated_we),
    .wd     (mio_pad_attr_9_invert_9_wd),
    .d      (hw2reg.mio_pad_attr[9].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_9_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[9].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_9_invert_9_qs)
  );
  assign reg2hw.mio_pad_attr[9].invert.qe = mio_pad_attr_9_qe;

  //   F[virtual_od_en_9]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_9_virtual_od_en_9 (
    .re     (mio_pad_attr_9_re),
    .we     (mio_pad_attr_9_gated_we),
    .wd     (mio_pad_attr_9_virtual_od_en_9_wd),
    .d      (hw2reg.mio_pad_attr[9].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_9_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[9].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_9_virtual_od_en_9_qs)
  );
  assign reg2hw.mio_pad_attr[9].virtual_od_en.qe = mio_pad_attr_9_qe;

  //   F[pull_en_9]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_9_pull_en_9 (
    .re     (mio_pad_attr_9_re),
    .we     (mio_pad_attr_9_gated_we),
    .wd     (mio_pad_attr_9_pull_en_9_wd),
    .d      (hw2reg.mio_pad_attr[9].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_9_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[9].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_9_pull_en_9_qs)
  );
  assign reg2hw.mio_pad_attr[9].pull_en.qe = mio_pad_attr_9_qe;

  //   F[pull_select_9]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_9_pull_select_9 (
    .re     (mio_pad_attr_9_re),
    .we     (mio_pad_attr_9_gated_we),
    .wd     (mio_pad_attr_9_pull_select_9_wd),
    .d      (hw2reg.mio_pad_attr[9].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_9_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[9].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_9_pull_select_9_qs)
  );
  assign reg2hw.mio_pad_attr[9].pull_select.qe = mio_pad_attr_9_qe;

  //   F[keeper_en_9]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_9_keeper_en_9 (
    .re     (mio_pad_attr_9_re),
    .we     (mio_pad_attr_9_gated_we),
    .wd     (mio_pad_attr_9_keeper_en_9_wd),
    .d      (hw2reg.mio_pad_attr[9].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_9_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[9].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_9_keeper_en_9_qs)
  );
  assign reg2hw.mio_pad_attr[9].keeper_en.qe = mio_pad_attr_9_qe;

  //   F[schmitt_en_9]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_9_schmitt_en_9 (
    .re     (mio_pad_attr_9_re),
    .we     (mio_pad_attr_9_gated_we),
    .wd     (mio_pad_attr_9_schmitt_en_9_wd),
    .d      (hw2reg.mio_pad_attr[9].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_9_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[9].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_9_schmitt_en_9_qs)
  );
  assign reg2hw.mio_pad_attr[9].schmitt_en.qe = mio_pad_attr_9_qe;

  //   F[od_en_9]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_9_od_en_9 (
    .re     (mio_pad_attr_9_re),
    .we     (mio_pad_attr_9_gated_we),
    .wd     (mio_pad_attr_9_od_en_9_wd),
    .d      (hw2reg.mio_pad_attr[9].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_9_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[9].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_9_od_en_9_qs)
  );
  assign reg2hw.mio_pad_attr[9].od_en.qe = mio_pad_attr_9_qe;

  //   F[slew_rate_9]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_9_slew_rate_9 (
    .re     (mio_pad_attr_9_re),
    .we     (mio_pad_attr_9_gated_we),
    .wd     (mio_pad_attr_9_slew_rate_9_wd),
    .d      (hw2reg.mio_pad_attr[9].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_9_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[9].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_9_slew_rate_9_qs)
  );
  assign reg2hw.mio_pad_attr[9].slew_rate.qe = mio_pad_attr_9_qe;

  //   F[drive_strength_9]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_9_drive_strength_9 (
    .re     (mio_pad_attr_9_re),
    .we     (mio_pad_attr_9_gated_we),
    .wd     (mio_pad_attr_9_drive_strength_9_wd),
    .d      (hw2reg.mio_pad_attr[9].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_9_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[9].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_9_drive_strength_9_qs)
  );
  assign reg2hw.mio_pad_attr[9].drive_strength.qe = mio_pad_attr_9_qe;


  // Subregister 10 of Multireg mio_pad_attr
  // R[mio_pad_attr_10]: V(True)
  logic mio_pad_attr_10_qe;
  logic [8:0] mio_pad_attr_10_flds_we;
  assign mio_pad_attr_10_qe = &mio_pad_attr_10_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_10_gated_we;
  assign mio_pad_attr_10_gated_we = mio_pad_attr_10_we & mio_pad_attr_regwen_10_qs;
  //   F[invert_10]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_10_invert_10 (
    .re     (mio_pad_attr_10_re),
    .we     (mio_pad_attr_10_gated_we),
    .wd     (mio_pad_attr_10_invert_10_wd),
    .d      (hw2reg.mio_pad_attr[10].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_10_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[10].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_10_invert_10_qs)
  );
  assign reg2hw.mio_pad_attr[10].invert.qe = mio_pad_attr_10_qe;

  //   F[virtual_od_en_10]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_10_virtual_od_en_10 (
    .re     (mio_pad_attr_10_re),
    .we     (mio_pad_attr_10_gated_we),
    .wd     (mio_pad_attr_10_virtual_od_en_10_wd),
    .d      (hw2reg.mio_pad_attr[10].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_10_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[10].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_10_virtual_od_en_10_qs)
  );
  assign reg2hw.mio_pad_attr[10].virtual_od_en.qe = mio_pad_attr_10_qe;

  //   F[pull_en_10]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_10_pull_en_10 (
    .re     (mio_pad_attr_10_re),
    .we     (mio_pad_attr_10_gated_we),
    .wd     (mio_pad_attr_10_pull_en_10_wd),
    .d      (hw2reg.mio_pad_attr[10].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_10_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[10].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_10_pull_en_10_qs)
  );
  assign reg2hw.mio_pad_attr[10].pull_en.qe = mio_pad_attr_10_qe;

  //   F[pull_select_10]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_10_pull_select_10 (
    .re     (mio_pad_attr_10_re),
    .we     (mio_pad_attr_10_gated_we),
    .wd     (mio_pad_attr_10_pull_select_10_wd),
    .d      (hw2reg.mio_pad_attr[10].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_10_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[10].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_10_pull_select_10_qs)
  );
  assign reg2hw.mio_pad_attr[10].pull_select.qe = mio_pad_attr_10_qe;

  //   F[keeper_en_10]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_10_keeper_en_10 (
    .re     (mio_pad_attr_10_re),
    .we     (mio_pad_attr_10_gated_we),
    .wd     (mio_pad_attr_10_keeper_en_10_wd),
    .d      (hw2reg.mio_pad_attr[10].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_10_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[10].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_10_keeper_en_10_qs)
  );
  assign reg2hw.mio_pad_attr[10].keeper_en.qe = mio_pad_attr_10_qe;

  //   F[schmitt_en_10]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_10_schmitt_en_10 (
    .re     (mio_pad_attr_10_re),
    .we     (mio_pad_attr_10_gated_we),
    .wd     (mio_pad_attr_10_schmitt_en_10_wd),
    .d      (hw2reg.mio_pad_attr[10].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_10_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[10].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_10_schmitt_en_10_qs)
  );
  assign reg2hw.mio_pad_attr[10].schmitt_en.qe = mio_pad_attr_10_qe;

  //   F[od_en_10]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_10_od_en_10 (
    .re     (mio_pad_attr_10_re),
    .we     (mio_pad_attr_10_gated_we),
    .wd     (mio_pad_attr_10_od_en_10_wd),
    .d      (hw2reg.mio_pad_attr[10].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_10_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[10].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_10_od_en_10_qs)
  );
  assign reg2hw.mio_pad_attr[10].od_en.qe = mio_pad_attr_10_qe;

  //   F[slew_rate_10]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_10_slew_rate_10 (
    .re     (mio_pad_attr_10_re),
    .we     (mio_pad_attr_10_gated_we),
    .wd     (mio_pad_attr_10_slew_rate_10_wd),
    .d      (hw2reg.mio_pad_attr[10].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_10_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[10].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_10_slew_rate_10_qs)
  );
  assign reg2hw.mio_pad_attr[10].slew_rate.qe = mio_pad_attr_10_qe;

  //   F[drive_strength_10]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_10_drive_strength_10 (
    .re     (mio_pad_attr_10_re),
    .we     (mio_pad_attr_10_gated_we),
    .wd     (mio_pad_attr_10_drive_strength_10_wd),
    .d      (hw2reg.mio_pad_attr[10].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_10_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[10].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_10_drive_strength_10_qs)
  );
  assign reg2hw.mio_pad_attr[10].drive_strength.qe = mio_pad_attr_10_qe;


  // Subregister 11 of Multireg mio_pad_attr
  // R[mio_pad_attr_11]: V(True)
  logic mio_pad_attr_11_qe;
  logic [8:0] mio_pad_attr_11_flds_we;
  assign mio_pad_attr_11_qe = &mio_pad_attr_11_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_11_gated_we;
  assign mio_pad_attr_11_gated_we = mio_pad_attr_11_we & mio_pad_attr_regwen_11_qs;
  //   F[invert_11]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_11_invert_11 (
    .re     (mio_pad_attr_11_re),
    .we     (mio_pad_attr_11_gated_we),
    .wd     (mio_pad_attr_11_invert_11_wd),
    .d      (hw2reg.mio_pad_attr[11].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_11_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[11].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_11_invert_11_qs)
  );
  assign reg2hw.mio_pad_attr[11].invert.qe = mio_pad_attr_11_qe;

  //   F[virtual_od_en_11]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_11_virtual_od_en_11 (
    .re     (mio_pad_attr_11_re),
    .we     (mio_pad_attr_11_gated_we),
    .wd     (mio_pad_attr_11_virtual_od_en_11_wd),
    .d      (hw2reg.mio_pad_attr[11].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_11_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[11].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_11_virtual_od_en_11_qs)
  );
  assign reg2hw.mio_pad_attr[11].virtual_od_en.qe = mio_pad_attr_11_qe;

  //   F[pull_en_11]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_11_pull_en_11 (
    .re     (mio_pad_attr_11_re),
    .we     (mio_pad_attr_11_gated_we),
    .wd     (mio_pad_attr_11_pull_en_11_wd),
    .d      (hw2reg.mio_pad_attr[11].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_11_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[11].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_11_pull_en_11_qs)
  );
  assign reg2hw.mio_pad_attr[11].pull_en.qe = mio_pad_attr_11_qe;

  //   F[pull_select_11]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_11_pull_select_11 (
    .re     (mio_pad_attr_11_re),
    .we     (mio_pad_attr_11_gated_we),
    .wd     (mio_pad_attr_11_pull_select_11_wd),
    .d      (hw2reg.mio_pad_attr[11].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_11_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[11].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_11_pull_select_11_qs)
  );
  assign reg2hw.mio_pad_attr[11].pull_select.qe = mio_pad_attr_11_qe;

  //   F[keeper_en_11]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_11_keeper_en_11 (
    .re     (mio_pad_attr_11_re),
    .we     (mio_pad_attr_11_gated_we),
    .wd     (mio_pad_attr_11_keeper_en_11_wd),
    .d      (hw2reg.mio_pad_attr[11].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_11_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[11].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_11_keeper_en_11_qs)
  );
  assign reg2hw.mio_pad_attr[11].keeper_en.qe = mio_pad_attr_11_qe;

  //   F[schmitt_en_11]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_11_schmitt_en_11 (
    .re     (mio_pad_attr_11_re),
    .we     (mio_pad_attr_11_gated_we),
    .wd     (mio_pad_attr_11_schmitt_en_11_wd),
    .d      (hw2reg.mio_pad_attr[11].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_11_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[11].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_11_schmitt_en_11_qs)
  );
  assign reg2hw.mio_pad_attr[11].schmitt_en.qe = mio_pad_attr_11_qe;

  //   F[od_en_11]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_11_od_en_11 (
    .re     (mio_pad_attr_11_re),
    .we     (mio_pad_attr_11_gated_we),
    .wd     (mio_pad_attr_11_od_en_11_wd),
    .d      (hw2reg.mio_pad_attr[11].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_11_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[11].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_11_od_en_11_qs)
  );
  assign reg2hw.mio_pad_attr[11].od_en.qe = mio_pad_attr_11_qe;

  //   F[slew_rate_11]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_11_slew_rate_11 (
    .re     (mio_pad_attr_11_re),
    .we     (mio_pad_attr_11_gated_we),
    .wd     (mio_pad_attr_11_slew_rate_11_wd),
    .d      (hw2reg.mio_pad_attr[11].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_11_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[11].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_11_slew_rate_11_qs)
  );
  assign reg2hw.mio_pad_attr[11].slew_rate.qe = mio_pad_attr_11_qe;

  //   F[drive_strength_11]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_11_drive_strength_11 (
    .re     (mio_pad_attr_11_re),
    .we     (mio_pad_attr_11_gated_we),
    .wd     (mio_pad_attr_11_drive_strength_11_wd),
    .d      (hw2reg.mio_pad_attr[11].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_11_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[11].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_11_drive_strength_11_qs)
  );
  assign reg2hw.mio_pad_attr[11].drive_strength.qe = mio_pad_attr_11_qe;


  // Subregister 12 of Multireg mio_pad_attr
  // R[mio_pad_attr_12]: V(True)
  logic mio_pad_attr_12_qe;
  logic [8:0] mio_pad_attr_12_flds_we;
  assign mio_pad_attr_12_qe = &mio_pad_attr_12_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_12_gated_we;
  assign mio_pad_attr_12_gated_we = mio_pad_attr_12_we & mio_pad_attr_regwen_12_qs;
  //   F[invert_12]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_12_invert_12 (
    .re     (mio_pad_attr_12_re),
    .we     (mio_pad_attr_12_gated_we),
    .wd     (mio_pad_attr_12_invert_12_wd),
    .d      (hw2reg.mio_pad_attr[12].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_12_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[12].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_12_invert_12_qs)
  );
  assign reg2hw.mio_pad_attr[12].invert.qe = mio_pad_attr_12_qe;

  //   F[virtual_od_en_12]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_12_virtual_od_en_12 (
    .re     (mio_pad_attr_12_re),
    .we     (mio_pad_attr_12_gated_we),
    .wd     (mio_pad_attr_12_virtual_od_en_12_wd),
    .d      (hw2reg.mio_pad_attr[12].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_12_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[12].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_12_virtual_od_en_12_qs)
  );
  assign reg2hw.mio_pad_attr[12].virtual_od_en.qe = mio_pad_attr_12_qe;

  //   F[pull_en_12]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_12_pull_en_12 (
    .re     (mio_pad_attr_12_re),
    .we     (mio_pad_attr_12_gated_we),
    .wd     (mio_pad_attr_12_pull_en_12_wd),
    .d      (hw2reg.mio_pad_attr[12].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_12_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[12].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_12_pull_en_12_qs)
  );
  assign reg2hw.mio_pad_attr[12].pull_en.qe = mio_pad_attr_12_qe;

  //   F[pull_select_12]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_12_pull_select_12 (
    .re     (mio_pad_attr_12_re),
    .we     (mio_pad_attr_12_gated_we),
    .wd     (mio_pad_attr_12_pull_select_12_wd),
    .d      (hw2reg.mio_pad_attr[12].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_12_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[12].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_12_pull_select_12_qs)
  );
  assign reg2hw.mio_pad_attr[12].pull_select.qe = mio_pad_attr_12_qe;

  //   F[keeper_en_12]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_12_keeper_en_12 (
    .re     (mio_pad_attr_12_re),
    .we     (mio_pad_attr_12_gated_we),
    .wd     (mio_pad_attr_12_keeper_en_12_wd),
    .d      (hw2reg.mio_pad_attr[12].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_12_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[12].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_12_keeper_en_12_qs)
  );
  assign reg2hw.mio_pad_attr[12].keeper_en.qe = mio_pad_attr_12_qe;

  //   F[schmitt_en_12]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_12_schmitt_en_12 (
    .re     (mio_pad_attr_12_re),
    .we     (mio_pad_attr_12_gated_we),
    .wd     (mio_pad_attr_12_schmitt_en_12_wd),
    .d      (hw2reg.mio_pad_attr[12].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_12_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[12].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_12_schmitt_en_12_qs)
  );
  assign reg2hw.mio_pad_attr[12].schmitt_en.qe = mio_pad_attr_12_qe;

  //   F[od_en_12]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_12_od_en_12 (
    .re     (mio_pad_attr_12_re),
    .we     (mio_pad_attr_12_gated_we),
    .wd     (mio_pad_attr_12_od_en_12_wd),
    .d      (hw2reg.mio_pad_attr[12].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_12_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[12].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_12_od_en_12_qs)
  );
  assign reg2hw.mio_pad_attr[12].od_en.qe = mio_pad_attr_12_qe;

  //   F[slew_rate_12]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_12_slew_rate_12 (
    .re     (mio_pad_attr_12_re),
    .we     (mio_pad_attr_12_gated_we),
    .wd     (mio_pad_attr_12_slew_rate_12_wd),
    .d      (hw2reg.mio_pad_attr[12].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_12_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[12].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_12_slew_rate_12_qs)
  );
  assign reg2hw.mio_pad_attr[12].slew_rate.qe = mio_pad_attr_12_qe;

  //   F[drive_strength_12]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_12_drive_strength_12 (
    .re     (mio_pad_attr_12_re),
    .we     (mio_pad_attr_12_gated_we),
    .wd     (mio_pad_attr_12_drive_strength_12_wd),
    .d      (hw2reg.mio_pad_attr[12].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_12_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[12].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_12_drive_strength_12_qs)
  );
  assign reg2hw.mio_pad_attr[12].drive_strength.qe = mio_pad_attr_12_qe;


  // Subregister 13 of Multireg mio_pad_attr
  // R[mio_pad_attr_13]: V(True)
  logic mio_pad_attr_13_qe;
  logic [8:0] mio_pad_attr_13_flds_we;
  assign mio_pad_attr_13_qe = &mio_pad_attr_13_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_13_gated_we;
  assign mio_pad_attr_13_gated_we = mio_pad_attr_13_we & mio_pad_attr_regwen_13_qs;
  //   F[invert_13]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_13_invert_13 (
    .re     (mio_pad_attr_13_re),
    .we     (mio_pad_attr_13_gated_we),
    .wd     (mio_pad_attr_13_invert_13_wd),
    .d      (hw2reg.mio_pad_attr[13].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_13_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[13].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_13_invert_13_qs)
  );
  assign reg2hw.mio_pad_attr[13].invert.qe = mio_pad_attr_13_qe;

  //   F[virtual_od_en_13]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_13_virtual_od_en_13 (
    .re     (mio_pad_attr_13_re),
    .we     (mio_pad_attr_13_gated_we),
    .wd     (mio_pad_attr_13_virtual_od_en_13_wd),
    .d      (hw2reg.mio_pad_attr[13].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_13_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[13].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_13_virtual_od_en_13_qs)
  );
  assign reg2hw.mio_pad_attr[13].virtual_od_en.qe = mio_pad_attr_13_qe;

  //   F[pull_en_13]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_13_pull_en_13 (
    .re     (mio_pad_attr_13_re),
    .we     (mio_pad_attr_13_gated_we),
    .wd     (mio_pad_attr_13_pull_en_13_wd),
    .d      (hw2reg.mio_pad_attr[13].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_13_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[13].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_13_pull_en_13_qs)
  );
  assign reg2hw.mio_pad_attr[13].pull_en.qe = mio_pad_attr_13_qe;

  //   F[pull_select_13]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_13_pull_select_13 (
    .re     (mio_pad_attr_13_re),
    .we     (mio_pad_attr_13_gated_we),
    .wd     (mio_pad_attr_13_pull_select_13_wd),
    .d      (hw2reg.mio_pad_attr[13].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_13_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[13].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_13_pull_select_13_qs)
  );
  assign reg2hw.mio_pad_attr[13].pull_select.qe = mio_pad_attr_13_qe;

  //   F[keeper_en_13]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_13_keeper_en_13 (
    .re     (mio_pad_attr_13_re),
    .we     (mio_pad_attr_13_gated_we),
    .wd     (mio_pad_attr_13_keeper_en_13_wd),
    .d      (hw2reg.mio_pad_attr[13].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_13_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[13].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_13_keeper_en_13_qs)
  );
  assign reg2hw.mio_pad_attr[13].keeper_en.qe = mio_pad_attr_13_qe;

  //   F[schmitt_en_13]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_13_schmitt_en_13 (
    .re     (mio_pad_attr_13_re),
    .we     (mio_pad_attr_13_gated_we),
    .wd     (mio_pad_attr_13_schmitt_en_13_wd),
    .d      (hw2reg.mio_pad_attr[13].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_13_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[13].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_13_schmitt_en_13_qs)
  );
  assign reg2hw.mio_pad_attr[13].schmitt_en.qe = mio_pad_attr_13_qe;

  //   F[od_en_13]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_13_od_en_13 (
    .re     (mio_pad_attr_13_re),
    .we     (mio_pad_attr_13_gated_we),
    .wd     (mio_pad_attr_13_od_en_13_wd),
    .d      (hw2reg.mio_pad_attr[13].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_13_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[13].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_13_od_en_13_qs)
  );
  assign reg2hw.mio_pad_attr[13].od_en.qe = mio_pad_attr_13_qe;

  //   F[slew_rate_13]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_13_slew_rate_13 (
    .re     (mio_pad_attr_13_re),
    .we     (mio_pad_attr_13_gated_we),
    .wd     (mio_pad_attr_13_slew_rate_13_wd),
    .d      (hw2reg.mio_pad_attr[13].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_13_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[13].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_13_slew_rate_13_qs)
  );
  assign reg2hw.mio_pad_attr[13].slew_rate.qe = mio_pad_attr_13_qe;

  //   F[drive_strength_13]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_13_drive_strength_13 (
    .re     (mio_pad_attr_13_re),
    .we     (mio_pad_attr_13_gated_we),
    .wd     (mio_pad_attr_13_drive_strength_13_wd),
    .d      (hw2reg.mio_pad_attr[13].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_13_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[13].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_13_drive_strength_13_qs)
  );
  assign reg2hw.mio_pad_attr[13].drive_strength.qe = mio_pad_attr_13_qe;


  // Subregister 14 of Multireg mio_pad_attr
  // R[mio_pad_attr_14]: V(True)
  logic mio_pad_attr_14_qe;
  logic [8:0] mio_pad_attr_14_flds_we;
  assign mio_pad_attr_14_qe = &mio_pad_attr_14_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_14_gated_we;
  assign mio_pad_attr_14_gated_we = mio_pad_attr_14_we & mio_pad_attr_regwen_14_qs;
  //   F[invert_14]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_14_invert_14 (
    .re     (mio_pad_attr_14_re),
    .we     (mio_pad_attr_14_gated_we),
    .wd     (mio_pad_attr_14_invert_14_wd),
    .d      (hw2reg.mio_pad_attr[14].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_14_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[14].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_14_invert_14_qs)
  );
  assign reg2hw.mio_pad_attr[14].invert.qe = mio_pad_attr_14_qe;

  //   F[virtual_od_en_14]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_14_virtual_od_en_14 (
    .re     (mio_pad_attr_14_re),
    .we     (mio_pad_attr_14_gated_we),
    .wd     (mio_pad_attr_14_virtual_od_en_14_wd),
    .d      (hw2reg.mio_pad_attr[14].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_14_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[14].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_14_virtual_od_en_14_qs)
  );
  assign reg2hw.mio_pad_attr[14].virtual_od_en.qe = mio_pad_attr_14_qe;

  //   F[pull_en_14]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_14_pull_en_14 (
    .re     (mio_pad_attr_14_re),
    .we     (mio_pad_attr_14_gated_we),
    .wd     (mio_pad_attr_14_pull_en_14_wd),
    .d      (hw2reg.mio_pad_attr[14].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_14_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[14].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_14_pull_en_14_qs)
  );
  assign reg2hw.mio_pad_attr[14].pull_en.qe = mio_pad_attr_14_qe;

  //   F[pull_select_14]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_14_pull_select_14 (
    .re     (mio_pad_attr_14_re),
    .we     (mio_pad_attr_14_gated_we),
    .wd     (mio_pad_attr_14_pull_select_14_wd),
    .d      (hw2reg.mio_pad_attr[14].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_14_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[14].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_14_pull_select_14_qs)
  );
  assign reg2hw.mio_pad_attr[14].pull_select.qe = mio_pad_attr_14_qe;

  //   F[keeper_en_14]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_14_keeper_en_14 (
    .re     (mio_pad_attr_14_re),
    .we     (mio_pad_attr_14_gated_we),
    .wd     (mio_pad_attr_14_keeper_en_14_wd),
    .d      (hw2reg.mio_pad_attr[14].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_14_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[14].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_14_keeper_en_14_qs)
  );
  assign reg2hw.mio_pad_attr[14].keeper_en.qe = mio_pad_attr_14_qe;

  //   F[schmitt_en_14]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_14_schmitt_en_14 (
    .re     (mio_pad_attr_14_re),
    .we     (mio_pad_attr_14_gated_we),
    .wd     (mio_pad_attr_14_schmitt_en_14_wd),
    .d      (hw2reg.mio_pad_attr[14].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_14_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[14].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_14_schmitt_en_14_qs)
  );
  assign reg2hw.mio_pad_attr[14].schmitt_en.qe = mio_pad_attr_14_qe;

  //   F[od_en_14]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_14_od_en_14 (
    .re     (mio_pad_attr_14_re),
    .we     (mio_pad_attr_14_gated_we),
    .wd     (mio_pad_attr_14_od_en_14_wd),
    .d      (hw2reg.mio_pad_attr[14].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_14_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[14].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_14_od_en_14_qs)
  );
  assign reg2hw.mio_pad_attr[14].od_en.qe = mio_pad_attr_14_qe;

  //   F[slew_rate_14]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_14_slew_rate_14 (
    .re     (mio_pad_attr_14_re),
    .we     (mio_pad_attr_14_gated_we),
    .wd     (mio_pad_attr_14_slew_rate_14_wd),
    .d      (hw2reg.mio_pad_attr[14].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_14_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[14].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_14_slew_rate_14_qs)
  );
  assign reg2hw.mio_pad_attr[14].slew_rate.qe = mio_pad_attr_14_qe;

  //   F[drive_strength_14]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_14_drive_strength_14 (
    .re     (mio_pad_attr_14_re),
    .we     (mio_pad_attr_14_gated_we),
    .wd     (mio_pad_attr_14_drive_strength_14_wd),
    .d      (hw2reg.mio_pad_attr[14].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_14_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[14].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_14_drive_strength_14_qs)
  );
  assign reg2hw.mio_pad_attr[14].drive_strength.qe = mio_pad_attr_14_qe;


  // Subregister 15 of Multireg mio_pad_attr
  // R[mio_pad_attr_15]: V(True)
  logic mio_pad_attr_15_qe;
  logic [8:0] mio_pad_attr_15_flds_we;
  assign mio_pad_attr_15_qe = &mio_pad_attr_15_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_15_gated_we;
  assign mio_pad_attr_15_gated_we = mio_pad_attr_15_we & mio_pad_attr_regwen_15_qs;
  //   F[invert_15]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_15_invert_15 (
    .re     (mio_pad_attr_15_re),
    .we     (mio_pad_attr_15_gated_we),
    .wd     (mio_pad_attr_15_invert_15_wd),
    .d      (hw2reg.mio_pad_attr[15].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_15_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[15].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_15_invert_15_qs)
  );
  assign reg2hw.mio_pad_attr[15].invert.qe = mio_pad_attr_15_qe;

  //   F[virtual_od_en_15]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_15_virtual_od_en_15 (
    .re     (mio_pad_attr_15_re),
    .we     (mio_pad_attr_15_gated_we),
    .wd     (mio_pad_attr_15_virtual_od_en_15_wd),
    .d      (hw2reg.mio_pad_attr[15].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_15_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[15].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_15_virtual_od_en_15_qs)
  );
  assign reg2hw.mio_pad_attr[15].virtual_od_en.qe = mio_pad_attr_15_qe;

  //   F[pull_en_15]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_15_pull_en_15 (
    .re     (mio_pad_attr_15_re),
    .we     (mio_pad_attr_15_gated_we),
    .wd     (mio_pad_attr_15_pull_en_15_wd),
    .d      (hw2reg.mio_pad_attr[15].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_15_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[15].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_15_pull_en_15_qs)
  );
  assign reg2hw.mio_pad_attr[15].pull_en.qe = mio_pad_attr_15_qe;

  //   F[pull_select_15]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_15_pull_select_15 (
    .re     (mio_pad_attr_15_re),
    .we     (mio_pad_attr_15_gated_we),
    .wd     (mio_pad_attr_15_pull_select_15_wd),
    .d      (hw2reg.mio_pad_attr[15].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_15_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[15].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_15_pull_select_15_qs)
  );
  assign reg2hw.mio_pad_attr[15].pull_select.qe = mio_pad_attr_15_qe;

  //   F[keeper_en_15]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_15_keeper_en_15 (
    .re     (mio_pad_attr_15_re),
    .we     (mio_pad_attr_15_gated_we),
    .wd     (mio_pad_attr_15_keeper_en_15_wd),
    .d      (hw2reg.mio_pad_attr[15].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_15_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[15].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_15_keeper_en_15_qs)
  );
  assign reg2hw.mio_pad_attr[15].keeper_en.qe = mio_pad_attr_15_qe;

  //   F[schmitt_en_15]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_15_schmitt_en_15 (
    .re     (mio_pad_attr_15_re),
    .we     (mio_pad_attr_15_gated_we),
    .wd     (mio_pad_attr_15_schmitt_en_15_wd),
    .d      (hw2reg.mio_pad_attr[15].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_15_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[15].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_15_schmitt_en_15_qs)
  );
  assign reg2hw.mio_pad_attr[15].schmitt_en.qe = mio_pad_attr_15_qe;

  //   F[od_en_15]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_15_od_en_15 (
    .re     (mio_pad_attr_15_re),
    .we     (mio_pad_attr_15_gated_we),
    .wd     (mio_pad_attr_15_od_en_15_wd),
    .d      (hw2reg.mio_pad_attr[15].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_15_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[15].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_15_od_en_15_qs)
  );
  assign reg2hw.mio_pad_attr[15].od_en.qe = mio_pad_attr_15_qe;

  //   F[slew_rate_15]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_15_slew_rate_15 (
    .re     (mio_pad_attr_15_re),
    .we     (mio_pad_attr_15_gated_we),
    .wd     (mio_pad_attr_15_slew_rate_15_wd),
    .d      (hw2reg.mio_pad_attr[15].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_15_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[15].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_15_slew_rate_15_qs)
  );
  assign reg2hw.mio_pad_attr[15].slew_rate.qe = mio_pad_attr_15_qe;

  //   F[drive_strength_15]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_15_drive_strength_15 (
    .re     (mio_pad_attr_15_re),
    .we     (mio_pad_attr_15_gated_we),
    .wd     (mio_pad_attr_15_drive_strength_15_wd),
    .d      (hw2reg.mio_pad_attr[15].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_15_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[15].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_15_drive_strength_15_qs)
  );
  assign reg2hw.mio_pad_attr[15].drive_strength.qe = mio_pad_attr_15_qe;


  // Subregister 16 of Multireg mio_pad_attr
  // R[mio_pad_attr_16]: V(True)
  logic mio_pad_attr_16_qe;
  logic [8:0] mio_pad_attr_16_flds_we;
  assign mio_pad_attr_16_qe = &mio_pad_attr_16_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_16_gated_we;
  assign mio_pad_attr_16_gated_we = mio_pad_attr_16_we & mio_pad_attr_regwen_16_qs;
  //   F[invert_16]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_16_invert_16 (
    .re     (mio_pad_attr_16_re),
    .we     (mio_pad_attr_16_gated_we),
    .wd     (mio_pad_attr_16_invert_16_wd),
    .d      (hw2reg.mio_pad_attr[16].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_16_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[16].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_16_invert_16_qs)
  );
  assign reg2hw.mio_pad_attr[16].invert.qe = mio_pad_attr_16_qe;

  //   F[virtual_od_en_16]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_16_virtual_od_en_16 (
    .re     (mio_pad_attr_16_re),
    .we     (mio_pad_attr_16_gated_we),
    .wd     (mio_pad_attr_16_virtual_od_en_16_wd),
    .d      (hw2reg.mio_pad_attr[16].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_16_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[16].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_16_virtual_od_en_16_qs)
  );
  assign reg2hw.mio_pad_attr[16].virtual_od_en.qe = mio_pad_attr_16_qe;

  //   F[pull_en_16]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_16_pull_en_16 (
    .re     (mio_pad_attr_16_re),
    .we     (mio_pad_attr_16_gated_we),
    .wd     (mio_pad_attr_16_pull_en_16_wd),
    .d      (hw2reg.mio_pad_attr[16].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_16_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[16].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_16_pull_en_16_qs)
  );
  assign reg2hw.mio_pad_attr[16].pull_en.qe = mio_pad_attr_16_qe;

  //   F[pull_select_16]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_16_pull_select_16 (
    .re     (mio_pad_attr_16_re),
    .we     (mio_pad_attr_16_gated_we),
    .wd     (mio_pad_attr_16_pull_select_16_wd),
    .d      (hw2reg.mio_pad_attr[16].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_16_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[16].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_16_pull_select_16_qs)
  );
  assign reg2hw.mio_pad_attr[16].pull_select.qe = mio_pad_attr_16_qe;

  //   F[keeper_en_16]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_16_keeper_en_16 (
    .re     (mio_pad_attr_16_re),
    .we     (mio_pad_attr_16_gated_we),
    .wd     (mio_pad_attr_16_keeper_en_16_wd),
    .d      (hw2reg.mio_pad_attr[16].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_16_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[16].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_16_keeper_en_16_qs)
  );
  assign reg2hw.mio_pad_attr[16].keeper_en.qe = mio_pad_attr_16_qe;

  //   F[schmitt_en_16]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_16_schmitt_en_16 (
    .re     (mio_pad_attr_16_re),
    .we     (mio_pad_attr_16_gated_we),
    .wd     (mio_pad_attr_16_schmitt_en_16_wd),
    .d      (hw2reg.mio_pad_attr[16].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_16_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[16].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_16_schmitt_en_16_qs)
  );
  assign reg2hw.mio_pad_attr[16].schmitt_en.qe = mio_pad_attr_16_qe;

  //   F[od_en_16]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_16_od_en_16 (
    .re     (mio_pad_attr_16_re),
    .we     (mio_pad_attr_16_gated_we),
    .wd     (mio_pad_attr_16_od_en_16_wd),
    .d      (hw2reg.mio_pad_attr[16].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_16_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[16].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_16_od_en_16_qs)
  );
  assign reg2hw.mio_pad_attr[16].od_en.qe = mio_pad_attr_16_qe;

  //   F[slew_rate_16]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_16_slew_rate_16 (
    .re     (mio_pad_attr_16_re),
    .we     (mio_pad_attr_16_gated_we),
    .wd     (mio_pad_attr_16_slew_rate_16_wd),
    .d      (hw2reg.mio_pad_attr[16].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_16_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[16].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_16_slew_rate_16_qs)
  );
  assign reg2hw.mio_pad_attr[16].slew_rate.qe = mio_pad_attr_16_qe;

  //   F[drive_strength_16]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_16_drive_strength_16 (
    .re     (mio_pad_attr_16_re),
    .we     (mio_pad_attr_16_gated_we),
    .wd     (mio_pad_attr_16_drive_strength_16_wd),
    .d      (hw2reg.mio_pad_attr[16].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_16_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[16].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_16_drive_strength_16_qs)
  );
  assign reg2hw.mio_pad_attr[16].drive_strength.qe = mio_pad_attr_16_qe;


  // Subregister 17 of Multireg mio_pad_attr
  // R[mio_pad_attr_17]: V(True)
  logic mio_pad_attr_17_qe;
  logic [8:0] mio_pad_attr_17_flds_we;
  assign mio_pad_attr_17_qe = &mio_pad_attr_17_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_17_gated_we;
  assign mio_pad_attr_17_gated_we = mio_pad_attr_17_we & mio_pad_attr_regwen_17_qs;
  //   F[invert_17]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_17_invert_17 (
    .re     (mio_pad_attr_17_re),
    .we     (mio_pad_attr_17_gated_we),
    .wd     (mio_pad_attr_17_invert_17_wd),
    .d      (hw2reg.mio_pad_attr[17].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_17_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[17].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_17_invert_17_qs)
  );
  assign reg2hw.mio_pad_attr[17].invert.qe = mio_pad_attr_17_qe;

  //   F[virtual_od_en_17]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_17_virtual_od_en_17 (
    .re     (mio_pad_attr_17_re),
    .we     (mio_pad_attr_17_gated_we),
    .wd     (mio_pad_attr_17_virtual_od_en_17_wd),
    .d      (hw2reg.mio_pad_attr[17].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_17_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[17].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_17_virtual_od_en_17_qs)
  );
  assign reg2hw.mio_pad_attr[17].virtual_od_en.qe = mio_pad_attr_17_qe;

  //   F[pull_en_17]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_17_pull_en_17 (
    .re     (mio_pad_attr_17_re),
    .we     (mio_pad_attr_17_gated_we),
    .wd     (mio_pad_attr_17_pull_en_17_wd),
    .d      (hw2reg.mio_pad_attr[17].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_17_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[17].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_17_pull_en_17_qs)
  );
  assign reg2hw.mio_pad_attr[17].pull_en.qe = mio_pad_attr_17_qe;

  //   F[pull_select_17]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_17_pull_select_17 (
    .re     (mio_pad_attr_17_re),
    .we     (mio_pad_attr_17_gated_we),
    .wd     (mio_pad_attr_17_pull_select_17_wd),
    .d      (hw2reg.mio_pad_attr[17].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_17_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[17].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_17_pull_select_17_qs)
  );
  assign reg2hw.mio_pad_attr[17].pull_select.qe = mio_pad_attr_17_qe;

  //   F[keeper_en_17]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_17_keeper_en_17 (
    .re     (mio_pad_attr_17_re),
    .we     (mio_pad_attr_17_gated_we),
    .wd     (mio_pad_attr_17_keeper_en_17_wd),
    .d      (hw2reg.mio_pad_attr[17].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_17_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[17].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_17_keeper_en_17_qs)
  );
  assign reg2hw.mio_pad_attr[17].keeper_en.qe = mio_pad_attr_17_qe;

  //   F[schmitt_en_17]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_17_schmitt_en_17 (
    .re     (mio_pad_attr_17_re),
    .we     (mio_pad_attr_17_gated_we),
    .wd     (mio_pad_attr_17_schmitt_en_17_wd),
    .d      (hw2reg.mio_pad_attr[17].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_17_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[17].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_17_schmitt_en_17_qs)
  );
  assign reg2hw.mio_pad_attr[17].schmitt_en.qe = mio_pad_attr_17_qe;

  //   F[od_en_17]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_17_od_en_17 (
    .re     (mio_pad_attr_17_re),
    .we     (mio_pad_attr_17_gated_we),
    .wd     (mio_pad_attr_17_od_en_17_wd),
    .d      (hw2reg.mio_pad_attr[17].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_17_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[17].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_17_od_en_17_qs)
  );
  assign reg2hw.mio_pad_attr[17].od_en.qe = mio_pad_attr_17_qe;

  //   F[slew_rate_17]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_17_slew_rate_17 (
    .re     (mio_pad_attr_17_re),
    .we     (mio_pad_attr_17_gated_we),
    .wd     (mio_pad_attr_17_slew_rate_17_wd),
    .d      (hw2reg.mio_pad_attr[17].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_17_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[17].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_17_slew_rate_17_qs)
  );
  assign reg2hw.mio_pad_attr[17].slew_rate.qe = mio_pad_attr_17_qe;

  //   F[drive_strength_17]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_17_drive_strength_17 (
    .re     (mio_pad_attr_17_re),
    .we     (mio_pad_attr_17_gated_we),
    .wd     (mio_pad_attr_17_drive_strength_17_wd),
    .d      (hw2reg.mio_pad_attr[17].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_17_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[17].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_17_drive_strength_17_qs)
  );
  assign reg2hw.mio_pad_attr[17].drive_strength.qe = mio_pad_attr_17_qe;


  // Subregister 18 of Multireg mio_pad_attr
  // R[mio_pad_attr_18]: V(True)
  logic mio_pad_attr_18_qe;
  logic [8:0] mio_pad_attr_18_flds_we;
  assign mio_pad_attr_18_qe = &mio_pad_attr_18_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_18_gated_we;
  assign mio_pad_attr_18_gated_we = mio_pad_attr_18_we & mio_pad_attr_regwen_18_qs;
  //   F[invert_18]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_18_invert_18 (
    .re     (mio_pad_attr_18_re),
    .we     (mio_pad_attr_18_gated_we),
    .wd     (mio_pad_attr_18_invert_18_wd),
    .d      (hw2reg.mio_pad_attr[18].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_18_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[18].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_18_invert_18_qs)
  );
  assign reg2hw.mio_pad_attr[18].invert.qe = mio_pad_attr_18_qe;

  //   F[virtual_od_en_18]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_18_virtual_od_en_18 (
    .re     (mio_pad_attr_18_re),
    .we     (mio_pad_attr_18_gated_we),
    .wd     (mio_pad_attr_18_virtual_od_en_18_wd),
    .d      (hw2reg.mio_pad_attr[18].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_18_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[18].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_18_virtual_od_en_18_qs)
  );
  assign reg2hw.mio_pad_attr[18].virtual_od_en.qe = mio_pad_attr_18_qe;

  //   F[pull_en_18]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_18_pull_en_18 (
    .re     (mio_pad_attr_18_re),
    .we     (mio_pad_attr_18_gated_we),
    .wd     (mio_pad_attr_18_pull_en_18_wd),
    .d      (hw2reg.mio_pad_attr[18].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_18_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[18].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_18_pull_en_18_qs)
  );
  assign reg2hw.mio_pad_attr[18].pull_en.qe = mio_pad_attr_18_qe;

  //   F[pull_select_18]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_18_pull_select_18 (
    .re     (mio_pad_attr_18_re),
    .we     (mio_pad_attr_18_gated_we),
    .wd     (mio_pad_attr_18_pull_select_18_wd),
    .d      (hw2reg.mio_pad_attr[18].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_18_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[18].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_18_pull_select_18_qs)
  );
  assign reg2hw.mio_pad_attr[18].pull_select.qe = mio_pad_attr_18_qe;

  //   F[keeper_en_18]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_18_keeper_en_18 (
    .re     (mio_pad_attr_18_re),
    .we     (mio_pad_attr_18_gated_we),
    .wd     (mio_pad_attr_18_keeper_en_18_wd),
    .d      (hw2reg.mio_pad_attr[18].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_18_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[18].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_18_keeper_en_18_qs)
  );
  assign reg2hw.mio_pad_attr[18].keeper_en.qe = mio_pad_attr_18_qe;

  //   F[schmitt_en_18]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_18_schmitt_en_18 (
    .re     (mio_pad_attr_18_re),
    .we     (mio_pad_attr_18_gated_we),
    .wd     (mio_pad_attr_18_schmitt_en_18_wd),
    .d      (hw2reg.mio_pad_attr[18].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_18_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[18].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_18_schmitt_en_18_qs)
  );
  assign reg2hw.mio_pad_attr[18].schmitt_en.qe = mio_pad_attr_18_qe;

  //   F[od_en_18]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_18_od_en_18 (
    .re     (mio_pad_attr_18_re),
    .we     (mio_pad_attr_18_gated_we),
    .wd     (mio_pad_attr_18_od_en_18_wd),
    .d      (hw2reg.mio_pad_attr[18].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_18_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[18].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_18_od_en_18_qs)
  );
  assign reg2hw.mio_pad_attr[18].od_en.qe = mio_pad_attr_18_qe;

  //   F[slew_rate_18]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_18_slew_rate_18 (
    .re     (mio_pad_attr_18_re),
    .we     (mio_pad_attr_18_gated_we),
    .wd     (mio_pad_attr_18_slew_rate_18_wd),
    .d      (hw2reg.mio_pad_attr[18].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_18_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[18].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_18_slew_rate_18_qs)
  );
  assign reg2hw.mio_pad_attr[18].slew_rate.qe = mio_pad_attr_18_qe;

  //   F[drive_strength_18]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_18_drive_strength_18 (
    .re     (mio_pad_attr_18_re),
    .we     (mio_pad_attr_18_gated_we),
    .wd     (mio_pad_attr_18_drive_strength_18_wd),
    .d      (hw2reg.mio_pad_attr[18].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_18_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[18].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_18_drive_strength_18_qs)
  );
  assign reg2hw.mio_pad_attr[18].drive_strength.qe = mio_pad_attr_18_qe;


  // Subregister 19 of Multireg mio_pad_attr
  // R[mio_pad_attr_19]: V(True)
  logic mio_pad_attr_19_qe;
  logic [8:0] mio_pad_attr_19_flds_we;
  assign mio_pad_attr_19_qe = &mio_pad_attr_19_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_19_gated_we;
  assign mio_pad_attr_19_gated_we = mio_pad_attr_19_we & mio_pad_attr_regwen_19_qs;
  //   F[invert_19]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_19_invert_19 (
    .re     (mio_pad_attr_19_re),
    .we     (mio_pad_attr_19_gated_we),
    .wd     (mio_pad_attr_19_invert_19_wd),
    .d      (hw2reg.mio_pad_attr[19].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_19_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[19].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_19_invert_19_qs)
  );
  assign reg2hw.mio_pad_attr[19].invert.qe = mio_pad_attr_19_qe;

  //   F[virtual_od_en_19]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_19_virtual_od_en_19 (
    .re     (mio_pad_attr_19_re),
    .we     (mio_pad_attr_19_gated_we),
    .wd     (mio_pad_attr_19_virtual_od_en_19_wd),
    .d      (hw2reg.mio_pad_attr[19].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_19_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[19].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_19_virtual_od_en_19_qs)
  );
  assign reg2hw.mio_pad_attr[19].virtual_od_en.qe = mio_pad_attr_19_qe;

  //   F[pull_en_19]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_19_pull_en_19 (
    .re     (mio_pad_attr_19_re),
    .we     (mio_pad_attr_19_gated_we),
    .wd     (mio_pad_attr_19_pull_en_19_wd),
    .d      (hw2reg.mio_pad_attr[19].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_19_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[19].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_19_pull_en_19_qs)
  );
  assign reg2hw.mio_pad_attr[19].pull_en.qe = mio_pad_attr_19_qe;

  //   F[pull_select_19]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_19_pull_select_19 (
    .re     (mio_pad_attr_19_re),
    .we     (mio_pad_attr_19_gated_we),
    .wd     (mio_pad_attr_19_pull_select_19_wd),
    .d      (hw2reg.mio_pad_attr[19].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_19_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[19].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_19_pull_select_19_qs)
  );
  assign reg2hw.mio_pad_attr[19].pull_select.qe = mio_pad_attr_19_qe;

  //   F[keeper_en_19]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_19_keeper_en_19 (
    .re     (mio_pad_attr_19_re),
    .we     (mio_pad_attr_19_gated_we),
    .wd     (mio_pad_attr_19_keeper_en_19_wd),
    .d      (hw2reg.mio_pad_attr[19].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_19_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[19].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_19_keeper_en_19_qs)
  );
  assign reg2hw.mio_pad_attr[19].keeper_en.qe = mio_pad_attr_19_qe;

  //   F[schmitt_en_19]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_19_schmitt_en_19 (
    .re     (mio_pad_attr_19_re),
    .we     (mio_pad_attr_19_gated_we),
    .wd     (mio_pad_attr_19_schmitt_en_19_wd),
    .d      (hw2reg.mio_pad_attr[19].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_19_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[19].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_19_schmitt_en_19_qs)
  );
  assign reg2hw.mio_pad_attr[19].schmitt_en.qe = mio_pad_attr_19_qe;

  //   F[od_en_19]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_19_od_en_19 (
    .re     (mio_pad_attr_19_re),
    .we     (mio_pad_attr_19_gated_we),
    .wd     (mio_pad_attr_19_od_en_19_wd),
    .d      (hw2reg.mio_pad_attr[19].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_19_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[19].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_19_od_en_19_qs)
  );
  assign reg2hw.mio_pad_attr[19].od_en.qe = mio_pad_attr_19_qe;

  //   F[slew_rate_19]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_19_slew_rate_19 (
    .re     (mio_pad_attr_19_re),
    .we     (mio_pad_attr_19_gated_we),
    .wd     (mio_pad_attr_19_slew_rate_19_wd),
    .d      (hw2reg.mio_pad_attr[19].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_19_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[19].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_19_slew_rate_19_qs)
  );
  assign reg2hw.mio_pad_attr[19].slew_rate.qe = mio_pad_attr_19_qe;

  //   F[drive_strength_19]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_19_drive_strength_19 (
    .re     (mio_pad_attr_19_re),
    .we     (mio_pad_attr_19_gated_we),
    .wd     (mio_pad_attr_19_drive_strength_19_wd),
    .d      (hw2reg.mio_pad_attr[19].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_19_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[19].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_19_drive_strength_19_qs)
  );
  assign reg2hw.mio_pad_attr[19].drive_strength.qe = mio_pad_attr_19_qe;


  // Subregister 20 of Multireg mio_pad_attr
  // R[mio_pad_attr_20]: V(True)
  logic mio_pad_attr_20_qe;
  logic [8:0] mio_pad_attr_20_flds_we;
  assign mio_pad_attr_20_qe = &mio_pad_attr_20_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_20_gated_we;
  assign mio_pad_attr_20_gated_we = mio_pad_attr_20_we & mio_pad_attr_regwen_20_qs;
  //   F[invert_20]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_20_invert_20 (
    .re     (mio_pad_attr_20_re),
    .we     (mio_pad_attr_20_gated_we),
    .wd     (mio_pad_attr_20_invert_20_wd),
    .d      (hw2reg.mio_pad_attr[20].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_20_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[20].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_20_invert_20_qs)
  );
  assign reg2hw.mio_pad_attr[20].invert.qe = mio_pad_attr_20_qe;

  //   F[virtual_od_en_20]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_20_virtual_od_en_20 (
    .re     (mio_pad_attr_20_re),
    .we     (mio_pad_attr_20_gated_we),
    .wd     (mio_pad_attr_20_virtual_od_en_20_wd),
    .d      (hw2reg.mio_pad_attr[20].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_20_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[20].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_20_virtual_od_en_20_qs)
  );
  assign reg2hw.mio_pad_attr[20].virtual_od_en.qe = mio_pad_attr_20_qe;

  //   F[pull_en_20]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_20_pull_en_20 (
    .re     (mio_pad_attr_20_re),
    .we     (mio_pad_attr_20_gated_we),
    .wd     (mio_pad_attr_20_pull_en_20_wd),
    .d      (hw2reg.mio_pad_attr[20].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_20_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[20].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_20_pull_en_20_qs)
  );
  assign reg2hw.mio_pad_attr[20].pull_en.qe = mio_pad_attr_20_qe;

  //   F[pull_select_20]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_20_pull_select_20 (
    .re     (mio_pad_attr_20_re),
    .we     (mio_pad_attr_20_gated_we),
    .wd     (mio_pad_attr_20_pull_select_20_wd),
    .d      (hw2reg.mio_pad_attr[20].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_20_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[20].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_20_pull_select_20_qs)
  );
  assign reg2hw.mio_pad_attr[20].pull_select.qe = mio_pad_attr_20_qe;

  //   F[keeper_en_20]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_20_keeper_en_20 (
    .re     (mio_pad_attr_20_re),
    .we     (mio_pad_attr_20_gated_we),
    .wd     (mio_pad_attr_20_keeper_en_20_wd),
    .d      (hw2reg.mio_pad_attr[20].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_20_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[20].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_20_keeper_en_20_qs)
  );
  assign reg2hw.mio_pad_attr[20].keeper_en.qe = mio_pad_attr_20_qe;

  //   F[schmitt_en_20]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_20_schmitt_en_20 (
    .re     (mio_pad_attr_20_re),
    .we     (mio_pad_attr_20_gated_we),
    .wd     (mio_pad_attr_20_schmitt_en_20_wd),
    .d      (hw2reg.mio_pad_attr[20].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_20_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[20].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_20_schmitt_en_20_qs)
  );
  assign reg2hw.mio_pad_attr[20].schmitt_en.qe = mio_pad_attr_20_qe;

  //   F[od_en_20]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_20_od_en_20 (
    .re     (mio_pad_attr_20_re),
    .we     (mio_pad_attr_20_gated_we),
    .wd     (mio_pad_attr_20_od_en_20_wd),
    .d      (hw2reg.mio_pad_attr[20].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_20_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[20].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_20_od_en_20_qs)
  );
  assign reg2hw.mio_pad_attr[20].od_en.qe = mio_pad_attr_20_qe;

  //   F[slew_rate_20]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_20_slew_rate_20 (
    .re     (mio_pad_attr_20_re),
    .we     (mio_pad_attr_20_gated_we),
    .wd     (mio_pad_attr_20_slew_rate_20_wd),
    .d      (hw2reg.mio_pad_attr[20].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_20_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[20].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_20_slew_rate_20_qs)
  );
  assign reg2hw.mio_pad_attr[20].slew_rate.qe = mio_pad_attr_20_qe;

  //   F[drive_strength_20]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_20_drive_strength_20 (
    .re     (mio_pad_attr_20_re),
    .we     (mio_pad_attr_20_gated_we),
    .wd     (mio_pad_attr_20_drive_strength_20_wd),
    .d      (hw2reg.mio_pad_attr[20].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_20_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[20].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_20_drive_strength_20_qs)
  );
  assign reg2hw.mio_pad_attr[20].drive_strength.qe = mio_pad_attr_20_qe;


  // Subregister 21 of Multireg mio_pad_attr
  // R[mio_pad_attr_21]: V(True)
  logic mio_pad_attr_21_qe;
  logic [8:0] mio_pad_attr_21_flds_we;
  assign mio_pad_attr_21_qe = &mio_pad_attr_21_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_21_gated_we;
  assign mio_pad_attr_21_gated_we = mio_pad_attr_21_we & mio_pad_attr_regwen_21_qs;
  //   F[invert_21]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_21_invert_21 (
    .re     (mio_pad_attr_21_re),
    .we     (mio_pad_attr_21_gated_we),
    .wd     (mio_pad_attr_21_invert_21_wd),
    .d      (hw2reg.mio_pad_attr[21].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_21_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[21].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_21_invert_21_qs)
  );
  assign reg2hw.mio_pad_attr[21].invert.qe = mio_pad_attr_21_qe;

  //   F[virtual_od_en_21]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_21_virtual_od_en_21 (
    .re     (mio_pad_attr_21_re),
    .we     (mio_pad_attr_21_gated_we),
    .wd     (mio_pad_attr_21_virtual_od_en_21_wd),
    .d      (hw2reg.mio_pad_attr[21].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_21_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[21].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_21_virtual_od_en_21_qs)
  );
  assign reg2hw.mio_pad_attr[21].virtual_od_en.qe = mio_pad_attr_21_qe;

  //   F[pull_en_21]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_21_pull_en_21 (
    .re     (mio_pad_attr_21_re),
    .we     (mio_pad_attr_21_gated_we),
    .wd     (mio_pad_attr_21_pull_en_21_wd),
    .d      (hw2reg.mio_pad_attr[21].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_21_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[21].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_21_pull_en_21_qs)
  );
  assign reg2hw.mio_pad_attr[21].pull_en.qe = mio_pad_attr_21_qe;

  //   F[pull_select_21]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_21_pull_select_21 (
    .re     (mio_pad_attr_21_re),
    .we     (mio_pad_attr_21_gated_we),
    .wd     (mio_pad_attr_21_pull_select_21_wd),
    .d      (hw2reg.mio_pad_attr[21].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_21_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[21].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_21_pull_select_21_qs)
  );
  assign reg2hw.mio_pad_attr[21].pull_select.qe = mio_pad_attr_21_qe;

  //   F[keeper_en_21]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_21_keeper_en_21 (
    .re     (mio_pad_attr_21_re),
    .we     (mio_pad_attr_21_gated_we),
    .wd     (mio_pad_attr_21_keeper_en_21_wd),
    .d      (hw2reg.mio_pad_attr[21].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_21_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[21].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_21_keeper_en_21_qs)
  );
  assign reg2hw.mio_pad_attr[21].keeper_en.qe = mio_pad_attr_21_qe;

  //   F[schmitt_en_21]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_21_schmitt_en_21 (
    .re     (mio_pad_attr_21_re),
    .we     (mio_pad_attr_21_gated_we),
    .wd     (mio_pad_attr_21_schmitt_en_21_wd),
    .d      (hw2reg.mio_pad_attr[21].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_21_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[21].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_21_schmitt_en_21_qs)
  );
  assign reg2hw.mio_pad_attr[21].schmitt_en.qe = mio_pad_attr_21_qe;

  //   F[od_en_21]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_21_od_en_21 (
    .re     (mio_pad_attr_21_re),
    .we     (mio_pad_attr_21_gated_we),
    .wd     (mio_pad_attr_21_od_en_21_wd),
    .d      (hw2reg.mio_pad_attr[21].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_21_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[21].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_21_od_en_21_qs)
  );
  assign reg2hw.mio_pad_attr[21].od_en.qe = mio_pad_attr_21_qe;

  //   F[slew_rate_21]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_21_slew_rate_21 (
    .re     (mio_pad_attr_21_re),
    .we     (mio_pad_attr_21_gated_we),
    .wd     (mio_pad_attr_21_slew_rate_21_wd),
    .d      (hw2reg.mio_pad_attr[21].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_21_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[21].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_21_slew_rate_21_qs)
  );
  assign reg2hw.mio_pad_attr[21].slew_rate.qe = mio_pad_attr_21_qe;

  //   F[drive_strength_21]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_21_drive_strength_21 (
    .re     (mio_pad_attr_21_re),
    .we     (mio_pad_attr_21_gated_we),
    .wd     (mio_pad_attr_21_drive_strength_21_wd),
    .d      (hw2reg.mio_pad_attr[21].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_21_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[21].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_21_drive_strength_21_qs)
  );
  assign reg2hw.mio_pad_attr[21].drive_strength.qe = mio_pad_attr_21_qe;


  // Subregister 22 of Multireg mio_pad_attr
  // R[mio_pad_attr_22]: V(True)
  logic mio_pad_attr_22_qe;
  logic [8:0] mio_pad_attr_22_flds_we;
  assign mio_pad_attr_22_qe = &mio_pad_attr_22_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_22_gated_we;
  assign mio_pad_attr_22_gated_we = mio_pad_attr_22_we & mio_pad_attr_regwen_22_qs;
  //   F[invert_22]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_22_invert_22 (
    .re     (mio_pad_attr_22_re),
    .we     (mio_pad_attr_22_gated_we),
    .wd     (mio_pad_attr_22_invert_22_wd),
    .d      (hw2reg.mio_pad_attr[22].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_22_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[22].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_22_invert_22_qs)
  );
  assign reg2hw.mio_pad_attr[22].invert.qe = mio_pad_attr_22_qe;

  //   F[virtual_od_en_22]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_22_virtual_od_en_22 (
    .re     (mio_pad_attr_22_re),
    .we     (mio_pad_attr_22_gated_we),
    .wd     (mio_pad_attr_22_virtual_od_en_22_wd),
    .d      (hw2reg.mio_pad_attr[22].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_22_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[22].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_22_virtual_od_en_22_qs)
  );
  assign reg2hw.mio_pad_attr[22].virtual_od_en.qe = mio_pad_attr_22_qe;

  //   F[pull_en_22]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_22_pull_en_22 (
    .re     (mio_pad_attr_22_re),
    .we     (mio_pad_attr_22_gated_we),
    .wd     (mio_pad_attr_22_pull_en_22_wd),
    .d      (hw2reg.mio_pad_attr[22].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_22_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[22].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_22_pull_en_22_qs)
  );
  assign reg2hw.mio_pad_attr[22].pull_en.qe = mio_pad_attr_22_qe;

  //   F[pull_select_22]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_22_pull_select_22 (
    .re     (mio_pad_attr_22_re),
    .we     (mio_pad_attr_22_gated_we),
    .wd     (mio_pad_attr_22_pull_select_22_wd),
    .d      (hw2reg.mio_pad_attr[22].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_22_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[22].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_22_pull_select_22_qs)
  );
  assign reg2hw.mio_pad_attr[22].pull_select.qe = mio_pad_attr_22_qe;

  //   F[keeper_en_22]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_22_keeper_en_22 (
    .re     (mio_pad_attr_22_re),
    .we     (mio_pad_attr_22_gated_we),
    .wd     (mio_pad_attr_22_keeper_en_22_wd),
    .d      (hw2reg.mio_pad_attr[22].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_22_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[22].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_22_keeper_en_22_qs)
  );
  assign reg2hw.mio_pad_attr[22].keeper_en.qe = mio_pad_attr_22_qe;

  //   F[schmitt_en_22]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_22_schmitt_en_22 (
    .re     (mio_pad_attr_22_re),
    .we     (mio_pad_attr_22_gated_we),
    .wd     (mio_pad_attr_22_schmitt_en_22_wd),
    .d      (hw2reg.mio_pad_attr[22].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_22_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[22].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_22_schmitt_en_22_qs)
  );
  assign reg2hw.mio_pad_attr[22].schmitt_en.qe = mio_pad_attr_22_qe;

  //   F[od_en_22]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_22_od_en_22 (
    .re     (mio_pad_attr_22_re),
    .we     (mio_pad_attr_22_gated_we),
    .wd     (mio_pad_attr_22_od_en_22_wd),
    .d      (hw2reg.mio_pad_attr[22].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_22_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[22].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_22_od_en_22_qs)
  );
  assign reg2hw.mio_pad_attr[22].od_en.qe = mio_pad_attr_22_qe;

  //   F[slew_rate_22]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_22_slew_rate_22 (
    .re     (mio_pad_attr_22_re),
    .we     (mio_pad_attr_22_gated_we),
    .wd     (mio_pad_attr_22_slew_rate_22_wd),
    .d      (hw2reg.mio_pad_attr[22].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_22_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[22].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_22_slew_rate_22_qs)
  );
  assign reg2hw.mio_pad_attr[22].slew_rate.qe = mio_pad_attr_22_qe;

  //   F[drive_strength_22]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_22_drive_strength_22 (
    .re     (mio_pad_attr_22_re),
    .we     (mio_pad_attr_22_gated_we),
    .wd     (mio_pad_attr_22_drive_strength_22_wd),
    .d      (hw2reg.mio_pad_attr[22].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_22_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[22].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_22_drive_strength_22_qs)
  );
  assign reg2hw.mio_pad_attr[22].drive_strength.qe = mio_pad_attr_22_qe;


  // Subregister 23 of Multireg mio_pad_attr
  // R[mio_pad_attr_23]: V(True)
  logic mio_pad_attr_23_qe;
  logic [8:0] mio_pad_attr_23_flds_we;
  assign mio_pad_attr_23_qe = &mio_pad_attr_23_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_23_gated_we;
  assign mio_pad_attr_23_gated_we = mio_pad_attr_23_we & mio_pad_attr_regwen_23_qs;
  //   F[invert_23]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_23_invert_23 (
    .re     (mio_pad_attr_23_re),
    .we     (mio_pad_attr_23_gated_we),
    .wd     (mio_pad_attr_23_invert_23_wd),
    .d      (hw2reg.mio_pad_attr[23].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_23_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[23].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_23_invert_23_qs)
  );
  assign reg2hw.mio_pad_attr[23].invert.qe = mio_pad_attr_23_qe;

  //   F[virtual_od_en_23]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_23_virtual_od_en_23 (
    .re     (mio_pad_attr_23_re),
    .we     (mio_pad_attr_23_gated_we),
    .wd     (mio_pad_attr_23_virtual_od_en_23_wd),
    .d      (hw2reg.mio_pad_attr[23].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_23_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[23].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_23_virtual_od_en_23_qs)
  );
  assign reg2hw.mio_pad_attr[23].virtual_od_en.qe = mio_pad_attr_23_qe;

  //   F[pull_en_23]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_23_pull_en_23 (
    .re     (mio_pad_attr_23_re),
    .we     (mio_pad_attr_23_gated_we),
    .wd     (mio_pad_attr_23_pull_en_23_wd),
    .d      (hw2reg.mio_pad_attr[23].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_23_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[23].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_23_pull_en_23_qs)
  );
  assign reg2hw.mio_pad_attr[23].pull_en.qe = mio_pad_attr_23_qe;

  //   F[pull_select_23]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_23_pull_select_23 (
    .re     (mio_pad_attr_23_re),
    .we     (mio_pad_attr_23_gated_we),
    .wd     (mio_pad_attr_23_pull_select_23_wd),
    .d      (hw2reg.mio_pad_attr[23].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_23_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[23].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_23_pull_select_23_qs)
  );
  assign reg2hw.mio_pad_attr[23].pull_select.qe = mio_pad_attr_23_qe;

  //   F[keeper_en_23]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_23_keeper_en_23 (
    .re     (mio_pad_attr_23_re),
    .we     (mio_pad_attr_23_gated_we),
    .wd     (mio_pad_attr_23_keeper_en_23_wd),
    .d      (hw2reg.mio_pad_attr[23].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_23_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[23].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_23_keeper_en_23_qs)
  );
  assign reg2hw.mio_pad_attr[23].keeper_en.qe = mio_pad_attr_23_qe;

  //   F[schmitt_en_23]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_23_schmitt_en_23 (
    .re     (mio_pad_attr_23_re),
    .we     (mio_pad_attr_23_gated_we),
    .wd     (mio_pad_attr_23_schmitt_en_23_wd),
    .d      (hw2reg.mio_pad_attr[23].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_23_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[23].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_23_schmitt_en_23_qs)
  );
  assign reg2hw.mio_pad_attr[23].schmitt_en.qe = mio_pad_attr_23_qe;

  //   F[od_en_23]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_23_od_en_23 (
    .re     (mio_pad_attr_23_re),
    .we     (mio_pad_attr_23_gated_we),
    .wd     (mio_pad_attr_23_od_en_23_wd),
    .d      (hw2reg.mio_pad_attr[23].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_23_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[23].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_23_od_en_23_qs)
  );
  assign reg2hw.mio_pad_attr[23].od_en.qe = mio_pad_attr_23_qe;

  //   F[slew_rate_23]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_23_slew_rate_23 (
    .re     (mio_pad_attr_23_re),
    .we     (mio_pad_attr_23_gated_we),
    .wd     (mio_pad_attr_23_slew_rate_23_wd),
    .d      (hw2reg.mio_pad_attr[23].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_23_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[23].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_23_slew_rate_23_qs)
  );
  assign reg2hw.mio_pad_attr[23].slew_rate.qe = mio_pad_attr_23_qe;

  //   F[drive_strength_23]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_23_drive_strength_23 (
    .re     (mio_pad_attr_23_re),
    .we     (mio_pad_attr_23_gated_we),
    .wd     (mio_pad_attr_23_drive_strength_23_wd),
    .d      (hw2reg.mio_pad_attr[23].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_23_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[23].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_23_drive_strength_23_qs)
  );
  assign reg2hw.mio_pad_attr[23].drive_strength.qe = mio_pad_attr_23_qe;


  // Subregister 24 of Multireg mio_pad_attr
  // R[mio_pad_attr_24]: V(True)
  logic mio_pad_attr_24_qe;
  logic [8:0] mio_pad_attr_24_flds_we;
  assign mio_pad_attr_24_qe = &mio_pad_attr_24_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_24_gated_we;
  assign mio_pad_attr_24_gated_we = mio_pad_attr_24_we & mio_pad_attr_regwen_24_qs;
  //   F[invert_24]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_24_invert_24 (
    .re     (mio_pad_attr_24_re),
    .we     (mio_pad_attr_24_gated_we),
    .wd     (mio_pad_attr_24_invert_24_wd),
    .d      (hw2reg.mio_pad_attr[24].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_24_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[24].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_24_invert_24_qs)
  );
  assign reg2hw.mio_pad_attr[24].invert.qe = mio_pad_attr_24_qe;

  //   F[virtual_od_en_24]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_24_virtual_od_en_24 (
    .re     (mio_pad_attr_24_re),
    .we     (mio_pad_attr_24_gated_we),
    .wd     (mio_pad_attr_24_virtual_od_en_24_wd),
    .d      (hw2reg.mio_pad_attr[24].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_24_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[24].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_24_virtual_od_en_24_qs)
  );
  assign reg2hw.mio_pad_attr[24].virtual_od_en.qe = mio_pad_attr_24_qe;

  //   F[pull_en_24]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_24_pull_en_24 (
    .re     (mio_pad_attr_24_re),
    .we     (mio_pad_attr_24_gated_we),
    .wd     (mio_pad_attr_24_pull_en_24_wd),
    .d      (hw2reg.mio_pad_attr[24].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_24_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[24].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_24_pull_en_24_qs)
  );
  assign reg2hw.mio_pad_attr[24].pull_en.qe = mio_pad_attr_24_qe;

  //   F[pull_select_24]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_24_pull_select_24 (
    .re     (mio_pad_attr_24_re),
    .we     (mio_pad_attr_24_gated_we),
    .wd     (mio_pad_attr_24_pull_select_24_wd),
    .d      (hw2reg.mio_pad_attr[24].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_24_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[24].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_24_pull_select_24_qs)
  );
  assign reg2hw.mio_pad_attr[24].pull_select.qe = mio_pad_attr_24_qe;

  //   F[keeper_en_24]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_24_keeper_en_24 (
    .re     (mio_pad_attr_24_re),
    .we     (mio_pad_attr_24_gated_we),
    .wd     (mio_pad_attr_24_keeper_en_24_wd),
    .d      (hw2reg.mio_pad_attr[24].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_24_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[24].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_24_keeper_en_24_qs)
  );
  assign reg2hw.mio_pad_attr[24].keeper_en.qe = mio_pad_attr_24_qe;

  //   F[schmitt_en_24]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_24_schmitt_en_24 (
    .re     (mio_pad_attr_24_re),
    .we     (mio_pad_attr_24_gated_we),
    .wd     (mio_pad_attr_24_schmitt_en_24_wd),
    .d      (hw2reg.mio_pad_attr[24].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_24_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[24].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_24_schmitt_en_24_qs)
  );
  assign reg2hw.mio_pad_attr[24].schmitt_en.qe = mio_pad_attr_24_qe;

  //   F[od_en_24]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_24_od_en_24 (
    .re     (mio_pad_attr_24_re),
    .we     (mio_pad_attr_24_gated_we),
    .wd     (mio_pad_attr_24_od_en_24_wd),
    .d      (hw2reg.mio_pad_attr[24].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_24_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[24].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_24_od_en_24_qs)
  );
  assign reg2hw.mio_pad_attr[24].od_en.qe = mio_pad_attr_24_qe;

  //   F[slew_rate_24]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_24_slew_rate_24 (
    .re     (mio_pad_attr_24_re),
    .we     (mio_pad_attr_24_gated_we),
    .wd     (mio_pad_attr_24_slew_rate_24_wd),
    .d      (hw2reg.mio_pad_attr[24].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_24_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[24].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_24_slew_rate_24_qs)
  );
  assign reg2hw.mio_pad_attr[24].slew_rate.qe = mio_pad_attr_24_qe;

  //   F[drive_strength_24]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_24_drive_strength_24 (
    .re     (mio_pad_attr_24_re),
    .we     (mio_pad_attr_24_gated_we),
    .wd     (mio_pad_attr_24_drive_strength_24_wd),
    .d      (hw2reg.mio_pad_attr[24].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_24_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[24].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_24_drive_strength_24_qs)
  );
  assign reg2hw.mio_pad_attr[24].drive_strength.qe = mio_pad_attr_24_qe;


  // Subregister 25 of Multireg mio_pad_attr
  // R[mio_pad_attr_25]: V(True)
  logic mio_pad_attr_25_qe;
  logic [8:0] mio_pad_attr_25_flds_we;
  assign mio_pad_attr_25_qe = &mio_pad_attr_25_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_25_gated_we;
  assign mio_pad_attr_25_gated_we = mio_pad_attr_25_we & mio_pad_attr_regwen_25_qs;
  //   F[invert_25]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_25_invert_25 (
    .re     (mio_pad_attr_25_re),
    .we     (mio_pad_attr_25_gated_we),
    .wd     (mio_pad_attr_25_invert_25_wd),
    .d      (hw2reg.mio_pad_attr[25].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_25_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[25].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_25_invert_25_qs)
  );
  assign reg2hw.mio_pad_attr[25].invert.qe = mio_pad_attr_25_qe;

  //   F[virtual_od_en_25]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_25_virtual_od_en_25 (
    .re     (mio_pad_attr_25_re),
    .we     (mio_pad_attr_25_gated_we),
    .wd     (mio_pad_attr_25_virtual_od_en_25_wd),
    .d      (hw2reg.mio_pad_attr[25].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_25_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[25].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_25_virtual_od_en_25_qs)
  );
  assign reg2hw.mio_pad_attr[25].virtual_od_en.qe = mio_pad_attr_25_qe;

  //   F[pull_en_25]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_25_pull_en_25 (
    .re     (mio_pad_attr_25_re),
    .we     (mio_pad_attr_25_gated_we),
    .wd     (mio_pad_attr_25_pull_en_25_wd),
    .d      (hw2reg.mio_pad_attr[25].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_25_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[25].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_25_pull_en_25_qs)
  );
  assign reg2hw.mio_pad_attr[25].pull_en.qe = mio_pad_attr_25_qe;

  //   F[pull_select_25]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_25_pull_select_25 (
    .re     (mio_pad_attr_25_re),
    .we     (mio_pad_attr_25_gated_we),
    .wd     (mio_pad_attr_25_pull_select_25_wd),
    .d      (hw2reg.mio_pad_attr[25].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_25_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[25].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_25_pull_select_25_qs)
  );
  assign reg2hw.mio_pad_attr[25].pull_select.qe = mio_pad_attr_25_qe;

  //   F[keeper_en_25]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_25_keeper_en_25 (
    .re     (mio_pad_attr_25_re),
    .we     (mio_pad_attr_25_gated_we),
    .wd     (mio_pad_attr_25_keeper_en_25_wd),
    .d      (hw2reg.mio_pad_attr[25].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_25_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[25].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_25_keeper_en_25_qs)
  );
  assign reg2hw.mio_pad_attr[25].keeper_en.qe = mio_pad_attr_25_qe;

  //   F[schmitt_en_25]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_25_schmitt_en_25 (
    .re     (mio_pad_attr_25_re),
    .we     (mio_pad_attr_25_gated_we),
    .wd     (mio_pad_attr_25_schmitt_en_25_wd),
    .d      (hw2reg.mio_pad_attr[25].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_25_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[25].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_25_schmitt_en_25_qs)
  );
  assign reg2hw.mio_pad_attr[25].schmitt_en.qe = mio_pad_attr_25_qe;

  //   F[od_en_25]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_25_od_en_25 (
    .re     (mio_pad_attr_25_re),
    .we     (mio_pad_attr_25_gated_we),
    .wd     (mio_pad_attr_25_od_en_25_wd),
    .d      (hw2reg.mio_pad_attr[25].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_25_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[25].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_25_od_en_25_qs)
  );
  assign reg2hw.mio_pad_attr[25].od_en.qe = mio_pad_attr_25_qe;

  //   F[slew_rate_25]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_25_slew_rate_25 (
    .re     (mio_pad_attr_25_re),
    .we     (mio_pad_attr_25_gated_we),
    .wd     (mio_pad_attr_25_slew_rate_25_wd),
    .d      (hw2reg.mio_pad_attr[25].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_25_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[25].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_25_slew_rate_25_qs)
  );
  assign reg2hw.mio_pad_attr[25].slew_rate.qe = mio_pad_attr_25_qe;

  //   F[drive_strength_25]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_25_drive_strength_25 (
    .re     (mio_pad_attr_25_re),
    .we     (mio_pad_attr_25_gated_we),
    .wd     (mio_pad_attr_25_drive_strength_25_wd),
    .d      (hw2reg.mio_pad_attr[25].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_25_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[25].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_25_drive_strength_25_qs)
  );
  assign reg2hw.mio_pad_attr[25].drive_strength.qe = mio_pad_attr_25_qe;


  // Subregister 26 of Multireg mio_pad_attr
  // R[mio_pad_attr_26]: V(True)
  logic mio_pad_attr_26_qe;
  logic [8:0] mio_pad_attr_26_flds_we;
  assign mio_pad_attr_26_qe = &mio_pad_attr_26_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_26_gated_we;
  assign mio_pad_attr_26_gated_we = mio_pad_attr_26_we & mio_pad_attr_regwen_26_qs;
  //   F[invert_26]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_26_invert_26 (
    .re     (mio_pad_attr_26_re),
    .we     (mio_pad_attr_26_gated_we),
    .wd     (mio_pad_attr_26_invert_26_wd),
    .d      (hw2reg.mio_pad_attr[26].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_26_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[26].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_26_invert_26_qs)
  );
  assign reg2hw.mio_pad_attr[26].invert.qe = mio_pad_attr_26_qe;

  //   F[virtual_od_en_26]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_26_virtual_od_en_26 (
    .re     (mio_pad_attr_26_re),
    .we     (mio_pad_attr_26_gated_we),
    .wd     (mio_pad_attr_26_virtual_od_en_26_wd),
    .d      (hw2reg.mio_pad_attr[26].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_26_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[26].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_26_virtual_od_en_26_qs)
  );
  assign reg2hw.mio_pad_attr[26].virtual_od_en.qe = mio_pad_attr_26_qe;

  //   F[pull_en_26]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_26_pull_en_26 (
    .re     (mio_pad_attr_26_re),
    .we     (mio_pad_attr_26_gated_we),
    .wd     (mio_pad_attr_26_pull_en_26_wd),
    .d      (hw2reg.mio_pad_attr[26].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_26_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[26].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_26_pull_en_26_qs)
  );
  assign reg2hw.mio_pad_attr[26].pull_en.qe = mio_pad_attr_26_qe;

  //   F[pull_select_26]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_26_pull_select_26 (
    .re     (mio_pad_attr_26_re),
    .we     (mio_pad_attr_26_gated_we),
    .wd     (mio_pad_attr_26_pull_select_26_wd),
    .d      (hw2reg.mio_pad_attr[26].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_26_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[26].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_26_pull_select_26_qs)
  );
  assign reg2hw.mio_pad_attr[26].pull_select.qe = mio_pad_attr_26_qe;

  //   F[keeper_en_26]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_26_keeper_en_26 (
    .re     (mio_pad_attr_26_re),
    .we     (mio_pad_attr_26_gated_we),
    .wd     (mio_pad_attr_26_keeper_en_26_wd),
    .d      (hw2reg.mio_pad_attr[26].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_26_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[26].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_26_keeper_en_26_qs)
  );
  assign reg2hw.mio_pad_attr[26].keeper_en.qe = mio_pad_attr_26_qe;

  //   F[schmitt_en_26]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_26_schmitt_en_26 (
    .re     (mio_pad_attr_26_re),
    .we     (mio_pad_attr_26_gated_we),
    .wd     (mio_pad_attr_26_schmitt_en_26_wd),
    .d      (hw2reg.mio_pad_attr[26].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_26_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[26].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_26_schmitt_en_26_qs)
  );
  assign reg2hw.mio_pad_attr[26].schmitt_en.qe = mio_pad_attr_26_qe;

  //   F[od_en_26]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_26_od_en_26 (
    .re     (mio_pad_attr_26_re),
    .we     (mio_pad_attr_26_gated_we),
    .wd     (mio_pad_attr_26_od_en_26_wd),
    .d      (hw2reg.mio_pad_attr[26].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_26_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[26].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_26_od_en_26_qs)
  );
  assign reg2hw.mio_pad_attr[26].od_en.qe = mio_pad_attr_26_qe;

  //   F[slew_rate_26]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_26_slew_rate_26 (
    .re     (mio_pad_attr_26_re),
    .we     (mio_pad_attr_26_gated_we),
    .wd     (mio_pad_attr_26_slew_rate_26_wd),
    .d      (hw2reg.mio_pad_attr[26].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_26_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[26].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_26_slew_rate_26_qs)
  );
  assign reg2hw.mio_pad_attr[26].slew_rate.qe = mio_pad_attr_26_qe;

  //   F[drive_strength_26]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_26_drive_strength_26 (
    .re     (mio_pad_attr_26_re),
    .we     (mio_pad_attr_26_gated_we),
    .wd     (mio_pad_attr_26_drive_strength_26_wd),
    .d      (hw2reg.mio_pad_attr[26].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_26_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[26].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_26_drive_strength_26_qs)
  );
  assign reg2hw.mio_pad_attr[26].drive_strength.qe = mio_pad_attr_26_qe;


  // Subregister 27 of Multireg mio_pad_attr
  // R[mio_pad_attr_27]: V(True)
  logic mio_pad_attr_27_qe;
  logic [8:0] mio_pad_attr_27_flds_we;
  assign mio_pad_attr_27_qe = &mio_pad_attr_27_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_27_gated_we;
  assign mio_pad_attr_27_gated_we = mio_pad_attr_27_we & mio_pad_attr_regwen_27_qs;
  //   F[invert_27]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_27_invert_27 (
    .re     (mio_pad_attr_27_re),
    .we     (mio_pad_attr_27_gated_we),
    .wd     (mio_pad_attr_27_invert_27_wd),
    .d      (hw2reg.mio_pad_attr[27].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_27_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[27].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_27_invert_27_qs)
  );
  assign reg2hw.mio_pad_attr[27].invert.qe = mio_pad_attr_27_qe;

  //   F[virtual_od_en_27]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_27_virtual_od_en_27 (
    .re     (mio_pad_attr_27_re),
    .we     (mio_pad_attr_27_gated_we),
    .wd     (mio_pad_attr_27_virtual_od_en_27_wd),
    .d      (hw2reg.mio_pad_attr[27].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_27_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[27].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_27_virtual_od_en_27_qs)
  );
  assign reg2hw.mio_pad_attr[27].virtual_od_en.qe = mio_pad_attr_27_qe;

  //   F[pull_en_27]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_27_pull_en_27 (
    .re     (mio_pad_attr_27_re),
    .we     (mio_pad_attr_27_gated_we),
    .wd     (mio_pad_attr_27_pull_en_27_wd),
    .d      (hw2reg.mio_pad_attr[27].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_27_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[27].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_27_pull_en_27_qs)
  );
  assign reg2hw.mio_pad_attr[27].pull_en.qe = mio_pad_attr_27_qe;

  //   F[pull_select_27]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_27_pull_select_27 (
    .re     (mio_pad_attr_27_re),
    .we     (mio_pad_attr_27_gated_we),
    .wd     (mio_pad_attr_27_pull_select_27_wd),
    .d      (hw2reg.mio_pad_attr[27].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_27_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[27].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_27_pull_select_27_qs)
  );
  assign reg2hw.mio_pad_attr[27].pull_select.qe = mio_pad_attr_27_qe;

  //   F[keeper_en_27]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_27_keeper_en_27 (
    .re     (mio_pad_attr_27_re),
    .we     (mio_pad_attr_27_gated_we),
    .wd     (mio_pad_attr_27_keeper_en_27_wd),
    .d      (hw2reg.mio_pad_attr[27].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_27_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[27].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_27_keeper_en_27_qs)
  );
  assign reg2hw.mio_pad_attr[27].keeper_en.qe = mio_pad_attr_27_qe;

  //   F[schmitt_en_27]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_27_schmitt_en_27 (
    .re     (mio_pad_attr_27_re),
    .we     (mio_pad_attr_27_gated_we),
    .wd     (mio_pad_attr_27_schmitt_en_27_wd),
    .d      (hw2reg.mio_pad_attr[27].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_27_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[27].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_27_schmitt_en_27_qs)
  );
  assign reg2hw.mio_pad_attr[27].schmitt_en.qe = mio_pad_attr_27_qe;

  //   F[od_en_27]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_27_od_en_27 (
    .re     (mio_pad_attr_27_re),
    .we     (mio_pad_attr_27_gated_we),
    .wd     (mio_pad_attr_27_od_en_27_wd),
    .d      (hw2reg.mio_pad_attr[27].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_27_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[27].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_27_od_en_27_qs)
  );
  assign reg2hw.mio_pad_attr[27].od_en.qe = mio_pad_attr_27_qe;

  //   F[slew_rate_27]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_27_slew_rate_27 (
    .re     (mio_pad_attr_27_re),
    .we     (mio_pad_attr_27_gated_we),
    .wd     (mio_pad_attr_27_slew_rate_27_wd),
    .d      (hw2reg.mio_pad_attr[27].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_27_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[27].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_27_slew_rate_27_qs)
  );
  assign reg2hw.mio_pad_attr[27].slew_rate.qe = mio_pad_attr_27_qe;

  //   F[drive_strength_27]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_27_drive_strength_27 (
    .re     (mio_pad_attr_27_re),
    .we     (mio_pad_attr_27_gated_we),
    .wd     (mio_pad_attr_27_drive_strength_27_wd),
    .d      (hw2reg.mio_pad_attr[27].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_27_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[27].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_27_drive_strength_27_qs)
  );
  assign reg2hw.mio_pad_attr[27].drive_strength.qe = mio_pad_attr_27_qe;


  // Subregister 28 of Multireg mio_pad_attr
  // R[mio_pad_attr_28]: V(True)
  logic mio_pad_attr_28_qe;
  logic [8:0] mio_pad_attr_28_flds_we;
  assign mio_pad_attr_28_qe = &mio_pad_attr_28_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_28_gated_we;
  assign mio_pad_attr_28_gated_we = mio_pad_attr_28_we & mio_pad_attr_regwen_28_qs;
  //   F[invert_28]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_28_invert_28 (
    .re     (mio_pad_attr_28_re),
    .we     (mio_pad_attr_28_gated_we),
    .wd     (mio_pad_attr_28_invert_28_wd),
    .d      (hw2reg.mio_pad_attr[28].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_28_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[28].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_28_invert_28_qs)
  );
  assign reg2hw.mio_pad_attr[28].invert.qe = mio_pad_attr_28_qe;

  //   F[virtual_od_en_28]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_28_virtual_od_en_28 (
    .re     (mio_pad_attr_28_re),
    .we     (mio_pad_attr_28_gated_we),
    .wd     (mio_pad_attr_28_virtual_od_en_28_wd),
    .d      (hw2reg.mio_pad_attr[28].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_28_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[28].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_28_virtual_od_en_28_qs)
  );
  assign reg2hw.mio_pad_attr[28].virtual_od_en.qe = mio_pad_attr_28_qe;

  //   F[pull_en_28]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_28_pull_en_28 (
    .re     (mio_pad_attr_28_re),
    .we     (mio_pad_attr_28_gated_we),
    .wd     (mio_pad_attr_28_pull_en_28_wd),
    .d      (hw2reg.mio_pad_attr[28].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_28_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[28].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_28_pull_en_28_qs)
  );
  assign reg2hw.mio_pad_attr[28].pull_en.qe = mio_pad_attr_28_qe;

  //   F[pull_select_28]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_28_pull_select_28 (
    .re     (mio_pad_attr_28_re),
    .we     (mio_pad_attr_28_gated_we),
    .wd     (mio_pad_attr_28_pull_select_28_wd),
    .d      (hw2reg.mio_pad_attr[28].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_28_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[28].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_28_pull_select_28_qs)
  );
  assign reg2hw.mio_pad_attr[28].pull_select.qe = mio_pad_attr_28_qe;

  //   F[keeper_en_28]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_28_keeper_en_28 (
    .re     (mio_pad_attr_28_re),
    .we     (mio_pad_attr_28_gated_we),
    .wd     (mio_pad_attr_28_keeper_en_28_wd),
    .d      (hw2reg.mio_pad_attr[28].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_28_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[28].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_28_keeper_en_28_qs)
  );
  assign reg2hw.mio_pad_attr[28].keeper_en.qe = mio_pad_attr_28_qe;

  //   F[schmitt_en_28]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_28_schmitt_en_28 (
    .re     (mio_pad_attr_28_re),
    .we     (mio_pad_attr_28_gated_we),
    .wd     (mio_pad_attr_28_schmitt_en_28_wd),
    .d      (hw2reg.mio_pad_attr[28].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_28_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[28].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_28_schmitt_en_28_qs)
  );
  assign reg2hw.mio_pad_attr[28].schmitt_en.qe = mio_pad_attr_28_qe;

  //   F[od_en_28]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_28_od_en_28 (
    .re     (mio_pad_attr_28_re),
    .we     (mio_pad_attr_28_gated_we),
    .wd     (mio_pad_attr_28_od_en_28_wd),
    .d      (hw2reg.mio_pad_attr[28].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_28_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[28].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_28_od_en_28_qs)
  );
  assign reg2hw.mio_pad_attr[28].od_en.qe = mio_pad_attr_28_qe;

  //   F[slew_rate_28]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_28_slew_rate_28 (
    .re     (mio_pad_attr_28_re),
    .we     (mio_pad_attr_28_gated_we),
    .wd     (mio_pad_attr_28_slew_rate_28_wd),
    .d      (hw2reg.mio_pad_attr[28].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_28_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[28].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_28_slew_rate_28_qs)
  );
  assign reg2hw.mio_pad_attr[28].slew_rate.qe = mio_pad_attr_28_qe;

  //   F[drive_strength_28]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_28_drive_strength_28 (
    .re     (mio_pad_attr_28_re),
    .we     (mio_pad_attr_28_gated_we),
    .wd     (mio_pad_attr_28_drive_strength_28_wd),
    .d      (hw2reg.mio_pad_attr[28].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_28_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[28].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_28_drive_strength_28_qs)
  );
  assign reg2hw.mio_pad_attr[28].drive_strength.qe = mio_pad_attr_28_qe;


  // Subregister 29 of Multireg mio_pad_attr
  // R[mio_pad_attr_29]: V(True)
  logic mio_pad_attr_29_qe;
  logic [8:0] mio_pad_attr_29_flds_we;
  assign mio_pad_attr_29_qe = &mio_pad_attr_29_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_29_gated_we;
  assign mio_pad_attr_29_gated_we = mio_pad_attr_29_we & mio_pad_attr_regwen_29_qs;
  //   F[invert_29]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_29_invert_29 (
    .re     (mio_pad_attr_29_re),
    .we     (mio_pad_attr_29_gated_we),
    .wd     (mio_pad_attr_29_invert_29_wd),
    .d      (hw2reg.mio_pad_attr[29].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_29_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[29].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_29_invert_29_qs)
  );
  assign reg2hw.mio_pad_attr[29].invert.qe = mio_pad_attr_29_qe;

  //   F[virtual_od_en_29]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_29_virtual_od_en_29 (
    .re     (mio_pad_attr_29_re),
    .we     (mio_pad_attr_29_gated_we),
    .wd     (mio_pad_attr_29_virtual_od_en_29_wd),
    .d      (hw2reg.mio_pad_attr[29].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_29_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[29].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_29_virtual_od_en_29_qs)
  );
  assign reg2hw.mio_pad_attr[29].virtual_od_en.qe = mio_pad_attr_29_qe;

  //   F[pull_en_29]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_29_pull_en_29 (
    .re     (mio_pad_attr_29_re),
    .we     (mio_pad_attr_29_gated_we),
    .wd     (mio_pad_attr_29_pull_en_29_wd),
    .d      (hw2reg.mio_pad_attr[29].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_29_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[29].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_29_pull_en_29_qs)
  );
  assign reg2hw.mio_pad_attr[29].pull_en.qe = mio_pad_attr_29_qe;

  //   F[pull_select_29]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_29_pull_select_29 (
    .re     (mio_pad_attr_29_re),
    .we     (mio_pad_attr_29_gated_we),
    .wd     (mio_pad_attr_29_pull_select_29_wd),
    .d      (hw2reg.mio_pad_attr[29].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_29_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[29].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_29_pull_select_29_qs)
  );
  assign reg2hw.mio_pad_attr[29].pull_select.qe = mio_pad_attr_29_qe;

  //   F[keeper_en_29]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_29_keeper_en_29 (
    .re     (mio_pad_attr_29_re),
    .we     (mio_pad_attr_29_gated_we),
    .wd     (mio_pad_attr_29_keeper_en_29_wd),
    .d      (hw2reg.mio_pad_attr[29].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_29_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[29].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_29_keeper_en_29_qs)
  );
  assign reg2hw.mio_pad_attr[29].keeper_en.qe = mio_pad_attr_29_qe;

  //   F[schmitt_en_29]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_29_schmitt_en_29 (
    .re     (mio_pad_attr_29_re),
    .we     (mio_pad_attr_29_gated_we),
    .wd     (mio_pad_attr_29_schmitt_en_29_wd),
    .d      (hw2reg.mio_pad_attr[29].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_29_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[29].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_29_schmitt_en_29_qs)
  );
  assign reg2hw.mio_pad_attr[29].schmitt_en.qe = mio_pad_attr_29_qe;

  //   F[od_en_29]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_29_od_en_29 (
    .re     (mio_pad_attr_29_re),
    .we     (mio_pad_attr_29_gated_we),
    .wd     (mio_pad_attr_29_od_en_29_wd),
    .d      (hw2reg.mio_pad_attr[29].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_29_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[29].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_29_od_en_29_qs)
  );
  assign reg2hw.mio_pad_attr[29].od_en.qe = mio_pad_attr_29_qe;

  //   F[slew_rate_29]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_29_slew_rate_29 (
    .re     (mio_pad_attr_29_re),
    .we     (mio_pad_attr_29_gated_we),
    .wd     (mio_pad_attr_29_slew_rate_29_wd),
    .d      (hw2reg.mio_pad_attr[29].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_29_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[29].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_29_slew_rate_29_qs)
  );
  assign reg2hw.mio_pad_attr[29].slew_rate.qe = mio_pad_attr_29_qe;

  //   F[drive_strength_29]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_29_drive_strength_29 (
    .re     (mio_pad_attr_29_re),
    .we     (mio_pad_attr_29_gated_we),
    .wd     (mio_pad_attr_29_drive_strength_29_wd),
    .d      (hw2reg.mio_pad_attr[29].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_29_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[29].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_29_drive_strength_29_qs)
  );
  assign reg2hw.mio_pad_attr[29].drive_strength.qe = mio_pad_attr_29_qe;


  // Subregister 30 of Multireg mio_pad_attr
  // R[mio_pad_attr_30]: V(True)
  logic mio_pad_attr_30_qe;
  logic [8:0] mio_pad_attr_30_flds_we;
  assign mio_pad_attr_30_qe = &mio_pad_attr_30_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_30_gated_we;
  assign mio_pad_attr_30_gated_we = mio_pad_attr_30_we & mio_pad_attr_regwen_30_qs;
  //   F[invert_30]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_30_invert_30 (
    .re     (mio_pad_attr_30_re),
    .we     (mio_pad_attr_30_gated_we),
    .wd     (mio_pad_attr_30_invert_30_wd),
    .d      (hw2reg.mio_pad_attr[30].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_30_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[30].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_30_invert_30_qs)
  );
  assign reg2hw.mio_pad_attr[30].invert.qe = mio_pad_attr_30_qe;

  //   F[virtual_od_en_30]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_30_virtual_od_en_30 (
    .re     (mio_pad_attr_30_re),
    .we     (mio_pad_attr_30_gated_we),
    .wd     (mio_pad_attr_30_virtual_od_en_30_wd),
    .d      (hw2reg.mio_pad_attr[30].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_30_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[30].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_30_virtual_od_en_30_qs)
  );
  assign reg2hw.mio_pad_attr[30].virtual_od_en.qe = mio_pad_attr_30_qe;

  //   F[pull_en_30]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_30_pull_en_30 (
    .re     (mio_pad_attr_30_re),
    .we     (mio_pad_attr_30_gated_we),
    .wd     (mio_pad_attr_30_pull_en_30_wd),
    .d      (hw2reg.mio_pad_attr[30].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_30_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[30].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_30_pull_en_30_qs)
  );
  assign reg2hw.mio_pad_attr[30].pull_en.qe = mio_pad_attr_30_qe;

  //   F[pull_select_30]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_30_pull_select_30 (
    .re     (mio_pad_attr_30_re),
    .we     (mio_pad_attr_30_gated_we),
    .wd     (mio_pad_attr_30_pull_select_30_wd),
    .d      (hw2reg.mio_pad_attr[30].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_30_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[30].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_30_pull_select_30_qs)
  );
  assign reg2hw.mio_pad_attr[30].pull_select.qe = mio_pad_attr_30_qe;

  //   F[keeper_en_30]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_30_keeper_en_30 (
    .re     (mio_pad_attr_30_re),
    .we     (mio_pad_attr_30_gated_we),
    .wd     (mio_pad_attr_30_keeper_en_30_wd),
    .d      (hw2reg.mio_pad_attr[30].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_30_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[30].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_30_keeper_en_30_qs)
  );
  assign reg2hw.mio_pad_attr[30].keeper_en.qe = mio_pad_attr_30_qe;

  //   F[schmitt_en_30]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_30_schmitt_en_30 (
    .re     (mio_pad_attr_30_re),
    .we     (mio_pad_attr_30_gated_we),
    .wd     (mio_pad_attr_30_schmitt_en_30_wd),
    .d      (hw2reg.mio_pad_attr[30].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_30_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[30].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_30_schmitt_en_30_qs)
  );
  assign reg2hw.mio_pad_attr[30].schmitt_en.qe = mio_pad_attr_30_qe;

  //   F[od_en_30]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_30_od_en_30 (
    .re     (mio_pad_attr_30_re),
    .we     (mio_pad_attr_30_gated_we),
    .wd     (mio_pad_attr_30_od_en_30_wd),
    .d      (hw2reg.mio_pad_attr[30].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_30_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[30].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_30_od_en_30_qs)
  );
  assign reg2hw.mio_pad_attr[30].od_en.qe = mio_pad_attr_30_qe;

  //   F[slew_rate_30]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_30_slew_rate_30 (
    .re     (mio_pad_attr_30_re),
    .we     (mio_pad_attr_30_gated_we),
    .wd     (mio_pad_attr_30_slew_rate_30_wd),
    .d      (hw2reg.mio_pad_attr[30].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_30_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[30].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_30_slew_rate_30_qs)
  );
  assign reg2hw.mio_pad_attr[30].slew_rate.qe = mio_pad_attr_30_qe;

  //   F[drive_strength_30]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_30_drive_strength_30 (
    .re     (mio_pad_attr_30_re),
    .we     (mio_pad_attr_30_gated_we),
    .wd     (mio_pad_attr_30_drive_strength_30_wd),
    .d      (hw2reg.mio_pad_attr[30].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_30_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[30].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_30_drive_strength_30_qs)
  );
  assign reg2hw.mio_pad_attr[30].drive_strength.qe = mio_pad_attr_30_qe;


  // Subregister 31 of Multireg mio_pad_attr
  // R[mio_pad_attr_31]: V(True)
  logic mio_pad_attr_31_qe;
  logic [8:0] mio_pad_attr_31_flds_we;
  assign mio_pad_attr_31_qe = &mio_pad_attr_31_flds_we;
  // Create REGWEN-gated WE signal
  logic mio_pad_attr_31_gated_we;
  assign mio_pad_attr_31_gated_we = mio_pad_attr_31_we & mio_pad_attr_regwen_31_qs;
  //   F[invert_31]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_31_invert_31 (
    .re     (mio_pad_attr_31_re),
    .we     (mio_pad_attr_31_gated_we),
    .wd     (mio_pad_attr_31_invert_31_wd),
    .d      (hw2reg.mio_pad_attr[31].invert.d),
    .qre    (),
    .qe     (mio_pad_attr_31_flds_we[0]),
    .q      (reg2hw.mio_pad_attr[31].invert.q),
    .ds     (),
    .qs     (mio_pad_attr_31_invert_31_qs)
  );
  assign reg2hw.mio_pad_attr[31].invert.qe = mio_pad_attr_31_qe;

  //   F[virtual_od_en_31]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_31_virtual_od_en_31 (
    .re     (mio_pad_attr_31_re),
    .we     (mio_pad_attr_31_gated_we),
    .wd     (mio_pad_attr_31_virtual_od_en_31_wd),
    .d      (hw2reg.mio_pad_attr[31].virtual_od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_31_flds_we[1]),
    .q      (reg2hw.mio_pad_attr[31].virtual_od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_31_virtual_od_en_31_qs)
  );
  assign reg2hw.mio_pad_attr[31].virtual_od_en.qe = mio_pad_attr_31_qe;

  //   F[pull_en_31]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_31_pull_en_31 (
    .re     (mio_pad_attr_31_re),
    .we     (mio_pad_attr_31_gated_we),
    .wd     (mio_pad_attr_31_pull_en_31_wd),
    .d      (hw2reg.mio_pad_attr[31].pull_en.d),
    .qre    (),
    .qe     (mio_pad_attr_31_flds_we[2]),
    .q      (reg2hw.mio_pad_attr[31].pull_en.q),
    .ds     (),
    .qs     (mio_pad_attr_31_pull_en_31_qs)
  );
  assign reg2hw.mio_pad_attr[31].pull_en.qe = mio_pad_attr_31_qe;

  //   F[pull_select_31]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_31_pull_select_31 (
    .re     (mio_pad_attr_31_re),
    .we     (mio_pad_attr_31_gated_we),
    .wd     (mio_pad_attr_31_pull_select_31_wd),
    .d      (hw2reg.mio_pad_attr[31].pull_select.d),
    .qre    (),
    .qe     (mio_pad_attr_31_flds_we[3]),
    .q      (reg2hw.mio_pad_attr[31].pull_select.q),
    .ds     (),
    .qs     (mio_pad_attr_31_pull_select_31_qs)
  );
  assign reg2hw.mio_pad_attr[31].pull_select.qe = mio_pad_attr_31_qe;

  //   F[keeper_en_31]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_31_keeper_en_31 (
    .re     (mio_pad_attr_31_re),
    .we     (mio_pad_attr_31_gated_we),
    .wd     (mio_pad_attr_31_keeper_en_31_wd),
    .d      (hw2reg.mio_pad_attr[31].keeper_en.d),
    .qre    (),
    .qe     (mio_pad_attr_31_flds_we[4]),
    .q      (reg2hw.mio_pad_attr[31].keeper_en.q),
    .ds     (),
    .qs     (mio_pad_attr_31_keeper_en_31_qs)
  );
  assign reg2hw.mio_pad_attr[31].keeper_en.qe = mio_pad_attr_31_qe;

  //   F[schmitt_en_31]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_31_schmitt_en_31 (
    .re     (mio_pad_attr_31_re),
    .we     (mio_pad_attr_31_gated_we),
    .wd     (mio_pad_attr_31_schmitt_en_31_wd),
    .d      (hw2reg.mio_pad_attr[31].schmitt_en.d),
    .qre    (),
    .qe     (mio_pad_attr_31_flds_we[5]),
    .q      (reg2hw.mio_pad_attr[31].schmitt_en.q),
    .ds     (),
    .qs     (mio_pad_attr_31_schmitt_en_31_qs)
  );
  assign reg2hw.mio_pad_attr[31].schmitt_en.qe = mio_pad_attr_31_qe;

  //   F[od_en_31]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_mio_pad_attr_31_od_en_31 (
    .re     (mio_pad_attr_31_re),
    .we     (mio_pad_attr_31_gated_we),
    .wd     (mio_pad_attr_31_od_en_31_wd),
    .d      (hw2reg.mio_pad_attr[31].od_en.d),
    .qre    (),
    .qe     (mio_pad_attr_31_flds_we[6]),
    .q      (reg2hw.mio_pad_attr[31].od_en.q),
    .ds     (),
    .qs     (mio_pad_attr_31_od_en_31_qs)
  );
  assign reg2hw.mio_pad_attr[31].od_en.qe = mio_pad_attr_31_qe;

  //   F[slew_rate_31]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_mio_pad_attr_31_slew_rate_31 (
    .re     (mio_pad_attr_31_re),
    .we     (mio_pad_attr_31_gated_we),
    .wd     (mio_pad_attr_31_slew_rate_31_wd),
    .d      (hw2reg.mio_pad_attr[31].slew_rate.d),
    .qre    (),
    .qe     (mio_pad_attr_31_flds_we[7]),
    .q      (reg2hw.mio_pad_attr[31].slew_rate.q),
    .ds     (),
    .qs     (mio_pad_attr_31_slew_rate_31_qs)
  );
  assign reg2hw.mio_pad_attr[31].slew_rate.qe = mio_pad_attr_31_qe;

  //   F[drive_strength_31]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_mio_pad_attr_31_drive_strength_31 (
    .re     (mio_pad_attr_31_re),
    .we     (mio_pad_attr_31_gated_we),
    .wd     (mio_pad_attr_31_drive_strength_31_wd),
    .d      (hw2reg.mio_pad_attr[31].drive_strength.d),
    .qre    (),
    .qe     (mio_pad_attr_31_flds_we[8]),
    .q      (reg2hw.mio_pad_attr[31].drive_strength.q),
    .ds     (),
    .qs     (mio_pad_attr_31_drive_strength_31_qs)
  );
  assign reg2hw.mio_pad_attr[31].drive_strength.qe = mio_pad_attr_31_qe;


  // Subregister 0 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_0_we),
    .wd     (dio_pad_attr_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_0_qs)
  );


  // Subregister 1 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_1_we),
    .wd     (dio_pad_attr_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_1_qs)
  );


  // Subregister 2 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_2_we),
    .wd     (dio_pad_attr_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_2_qs)
  );


  // Subregister 3 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_3_we),
    .wd     (dio_pad_attr_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_3_qs)
  );


  // Subregister 4 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_4_we),
    .wd     (dio_pad_attr_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_4_qs)
  );


  // Subregister 5 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_5_we),
    .wd     (dio_pad_attr_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_5_qs)
  );


  // Subregister 6 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_6_we),
    .wd     (dio_pad_attr_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_6_qs)
  );


  // Subregister 7 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_7_we),
    .wd     (dio_pad_attr_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_7_qs)
  );


  // Subregister 8 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_8]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_8_we),
    .wd     (dio_pad_attr_regwen_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_8_qs)
  );


  // Subregister 9 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_9]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_9_we),
    .wd     (dio_pad_attr_regwen_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_9_qs)
  );


  // Subregister 10 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_10]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_10_we),
    .wd     (dio_pad_attr_regwen_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_10_qs)
  );


  // Subregister 11 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_11]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_11_we),
    .wd     (dio_pad_attr_regwen_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_11_qs)
  );


  // Subregister 12 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_12]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_12_we),
    .wd     (dio_pad_attr_regwen_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_12_qs)
  );


  // Subregister 13 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_13]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_13_we),
    .wd     (dio_pad_attr_regwen_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_13_qs)
  );


  // Subregister 14 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_14]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_14_we),
    .wd     (dio_pad_attr_regwen_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_14_qs)
  );


  // Subregister 15 of Multireg dio_pad_attr_regwen
  // R[dio_pad_attr_regwen_15]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_attr_regwen_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_attr_regwen_15_we),
    .wd     (dio_pad_attr_regwen_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_attr_regwen_15_qs)
  );


  // Subregister 0 of Multireg dio_pad_attr
  // R[dio_pad_attr_0]: V(True)
  logic dio_pad_attr_0_qe;
  logic [8:0] dio_pad_attr_0_flds_we;
  assign dio_pad_attr_0_qe = &dio_pad_attr_0_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_0_gated_we;
  assign dio_pad_attr_0_gated_we = dio_pad_attr_0_we & dio_pad_attr_regwen_0_qs;
  //   F[invert_0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_0_invert_0 (
    .re     (dio_pad_attr_0_re),
    .we     (dio_pad_attr_0_gated_we),
    .wd     (dio_pad_attr_0_invert_0_wd),
    .d      (hw2reg.dio_pad_attr[0].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_0_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[0].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_0_invert_0_qs)
  );
  assign reg2hw.dio_pad_attr[0].invert.qe = dio_pad_attr_0_qe;

  //   F[virtual_od_en_0]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_0_virtual_od_en_0 (
    .re     (dio_pad_attr_0_re),
    .we     (dio_pad_attr_0_gated_we),
    .wd     (dio_pad_attr_0_virtual_od_en_0_wd),
    .d      (hw2reg.dio_pad_attr[0].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_0_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[0].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_0_virtual_od_en_0_qs)
  );
  assign reg2hw.dio_pad_attr[0].virtual_od_en.qe = dio_pad_attr_0_qe;

  //   F[pull_en_0]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_0_pull_en_0 (
    .re     (dio_pad_attr_0_re),
    .we     (dio_pad_attr_0_gated_we),
    .wd     (dio_pad_attr_0_pull_en_0_wd),
    .d      (hw2reg.dio_pad_attr[0].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_0_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[0].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_0_pull_en_0_qs)
  );
  assign reg2hw.dio_pad_attr[0].pull_en.qe = dio_pad_attr_0_qe;

  //   F[pull_select_0]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_0_pull_select_0 (
    .re     (dio_pad_attr_0_re),
    .we     (dio_pad_attr_0_gated_we),
    .wd     (dio_pad_attr_0_pull_select_0_wd),
    .d      (hw2reg.dio_pad_attr[0].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_0_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[0].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_0_pull_select_0_qs)
  );
  assign reg2hw.dio_pad_attr[0].pull_select.qe = dio_pad_attr_0_qe;

  //   F[keeper_en_0]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_0_keeper_en_0 (
    .re     (dio_pad_attr_0_re),
    .we     (dio_pad_attr_0_gated_we),
    .wd     (dio_pad_attr_0_keeper_en_0_wd),
    .d      (hw2reg.dio_pad_attr[0].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_0_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[0].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_0_keeper_en_0_qs)
  );
  assign reg2hw.dio_pad_attr[0].keeper_en.qe = dio_pad_attr_0_qe;

  //   F[schmitt_en_0]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_0_schmitt_en_0 (
    .re     (dio_pad_attr_0_re),
    .we     (dio_pad_attr_0_gated_we),
    .wd     (dio_pad_attr_0_schmitt_en_0_wd),
    .d      (hw2reg.dio_pad_attr[0].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_0_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[0].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_0_schmitt_en_0_qs)
  );
  assign reg2hw.dio_pad_attr[0].schmitt_en.qe = dio_pad_attr_0_qe;

  //   F[od_en_0]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_0_od_en_0 (
    .re     (dio_pad_attr_0_re),
    .we     (dio_pad_attr_0_gated_we),
    .wd     (dio_pad_attr_0_od_en_0_wd),
    .d      (hw2reg.dio_pad_attr[0].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_0_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[0].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_0_od_en_0_qs)
  );
  assign reg2hw.dio_pad_attr[0].od_en.qe = dio_pad_attr_0_qe;

  //   F[slew_rate_0]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_0_slew_rate_0 (
    .re     (dio_pad_attr_0_re),
    .we     (dio_pad_attr_0_gated_we),
    .wd     (dio_pad_attr_0_slew_rate_0_wd),
    .d      (hw2reg.dio_pad_attr[0].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_0_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[0].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_0_slew_rate_0_qs)
  );
  assign reg2hw.dio_pad_attr[0].slew_rate.qe = dio_pad_attr_0_qe;

  //   F[drive_strength_0]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_0_drive_strength_0 (
    .re     (dio_pad_attr_0_re),
    .we     (dio_pad_attr_0_gated_we),
    .wd     (dio_pad_attr_0_drive_strength_0_wd),
    .d      (hw2reg.dio_pad_attr[0].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_0_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[0].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_0_drive_strength_0_qs)
  );
  assign reg2hw.dio_pad_attr[0].drive_strength.qe = dio_pad_attr_0_qe;


  // Subregister 1 of Multireg dio_pad_attr
  // R[dio_pad_attr_1]: V(True)
  logic dio_pad_attr_1_qe;
  logic [8:0] dio_pad_attr_1_flds_we;
  assign dio_pad_attr_1_qe = &dio_pad_attr_1_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_1_gated_we;
  assign dio_pad_attr_1_gated_we = dio_pad_attr_1_we & dio_pad_attr_regwen_1_qs;
  //   F[invert_1]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_1_invert_1 (
    .re     (dio_pad_attr_1_re),
    .we     (dio_pad_attr_1_gated_we),
    .wd     (dio_pad_attr_1_invert_1_wd),
    .d      (hw2reg.dio_pad_attr[1].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_1_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[1].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_1_invert_1_qs)
  );
  assign reg2hw.dio_pad_attr[1].invert.qe = dio_pad_attr_1_qe;

  //   F[virtual_od_en_1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_1_virtual_od_en_1 (
    .re     (dio_pad_attr_1_re),
    .we     (dio_pad_attr_1_gated_we),
    .wd     (dio_pad_attr_1_virtual_od_en_1_wd),
    .d      (hw2reg.dio_pad_attr[1].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_1_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[1].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_1_virtual_od_en_1_qs)
  );
  assign reg2hw.dio_pad_attr[1].virtual_od_en.qe = dio_pad_attr_1_qe;

  //   F[pull_en_1]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_1_pull_en_1 (
    .re     (dio_pad_attr_1_re),
    .we     (dio_pad_attr_1_gated_we),
    .wd     (dio_pad_attr_1_pull_en_1_wd),
    .d      (hw2reg.dio_pad_attr[1].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_1_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[1].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_1_pull_en_1_qs)
  );
  assign reg2hw.dio_pad_attr[1].pull_en.qe = dio_pad_attr_1_qe;

  //   F[pull_select_1]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_1_pull_select_1 (
    .re     (dio_pad_attr_1_re),
    .we     (dio_pad_attr_1_gated_we),
    .wd     (dio_pad_attr_1_pull_select_1_wd),
    .d      (hw2reg.dio_pad_attr[1].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_1_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[1].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_1_pull_select_1_qs)
  );
  assign reg2hw.dio_pad_attr[1].pull_select.qe = dio_pad_attr_1_qe;

  //   F[keeper_en_1]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_1_keeper_en_1 (
    .re     (dio_pad_attr_1_re),
    .we     (dio_pad_attr_1_gated_we),
    .wd     (dio_pad_attr_1_keeper_en_1_wd),
    .d      (hw2reg.dio_pad_attr[1].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_1_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[1].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_1_keeper_en_1_qs)
  );
  assign reg2hw.dio_pad_attr[1].keeper_en.qe = dio_pad_attr_1_qe;

  //   F[schmitt_en_1]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_1_schmitt_en_1 (
    .re     (dio_pad_attr_1_re),
    .we     (dio_pad_attr_1_gated_we),
    .wd     (dio_pad_attr_1_schmitt_en_1_wd),
    .d      (hw2reg.dio_pad_attr[1].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_1_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[1].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_1_schmitt_en_1_qs)
  );
  assign reg2hw.dio_pad_attr[1].schmitt_en.qe = dio_pad_attr_1_qe;

  //   F[od_en_1]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_1_od_en_1 (
    .re     (dio_pad_attr_1_re),
    .we     (dio_pad_attr_1_gated_we),
    .wd     (dio_pad_attr_1_od_en_1_wd),
    .d      (hw2reg.dio_pad_attr[1].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_1_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[1].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_1_od_en_1_qs)
  );
  assign reg2hw.dio_pad_attr[1].od_en.qe = dio_pad_attr_1_qe;

  //   F[slew_rate_1]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_1_slew_rate_1 (
    .re     (dio_pad_attr_1_re),
    .we     (dio_pad_attr_1_gated_we),
    .wd     (dio_pad_attr_1_slew_rate_1_wd),
    .d      (hw2reg.dio_pad_attr[1].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_1_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[1].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_1_slew_rate_1_qs)
  );
  assign reg2hw.dio_pad_attr[1].slew_rate.qe = dio_pad_attr_1_qe;

  //   F[drive_strength_1]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_1_drive_strength_1 (
    .re     (dio_pad_attr_1_re),
    .we     (dio_pad_attr_1_gated_we),
    .wd     (dio_pad_attr_1_drive_strength_1_wd),
    .d      (hw2reg.dio_pad_attr[1].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_1_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[1].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_1_drive_strength_1_qs)
  );
  assign reg2hw.dio_pad_attr[1].drive_strength.qe = dio_pad_attr_1_qe;


  // Subregister 2 of Multireg dio_pad_attr
  // R[dio_pad_attr_2]: V(True)
  logic dio_pad_attr_2_qe;
  logic [8:0] dio_pad_attr_2_flds_we;
  assign dio_pad_attr_2_qe = &dio_pad_attr_2_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_2_gated_we;
  assign dio_pad_attr_2_gated_we = dio_pad_attr_2_we & dio_pad_attr_regwen_2_qs;
  //   F[invert_2]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_2_invert_2 (
    .re     (dio_pad_attr_2_re),
    .we     (dio_pad_attr_2_gated_we),
    .wd     (dio_pad_attr_2_invert_2_wd),
    .d      (hw2reg.dio_pad_attr[2].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_2_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[2].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_2_invert_2_qs)
  );
  assign reg2hw.dio_pad_attr[2].invert.qe = dio_pad_attr_2_qe;

  //   F[virtual_od_en_2]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_2_virtual_od_en_2 (
    .re     (dio_pad_attr_2_re),
    .we     (dio_pad_attr_2_gated_we),
    .wd     (dio_pad_attr_2_virtual_od_en_2_wd),
    .d      (hw2reg.dio_pad_attr[2].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_2_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[2].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_2_virtual_od_en_2_qs)
  );
  assign reg2hw.dio_pad_attr[2].virtual_od_en.qe = dio_pad_attr_2_qe;

  //   F[pull_en_2]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_2_pull_en_2 (
    .re     (dio_pad_attr_2_re),
    .we     (dio_pad_attr_2_gated_we),
    .wd     (dio_pad_attr_2_pull_en_2_wd),
    .d      (hw2reg.dio_pad_attr[2].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_2_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[2].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_2_pull_en_2_qs)
  );
  assign reg2hw.dio_pad_attr[2].pull_en.qe = dio_pad_attr_2_qe;

  //   F[pull_select_2]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_2_pull_select_2 (
    .re     (dio_pad_attr_2_re),
    .we     (dio_pad_attr_2_gated_we),
    .wd     (dio_pad_attr_2_pull_select_2_wd),
    .d      (hw2reg.dio_pad_attr[2].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_2_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[2].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_2_pull_select_2_qs)
  );
  assign reg2hw.dio_pad_attr[2].pull_select.qe = dio_pad_attr_2_qe;

  //   F[keeper_en_2]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_2_keeper_en_2 (
    .re     (dio_pad_attr_2_re),
    .we     (dio_pad_attr_2_gated_we),
    .wd     (dio_pad_attr_2_keeper_en_2_wd),
    .d      (hw2reg.dio_pad_attr[2].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_2_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[2].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_2_keeper_en_2_qs)
  );
  assign reg2hw.dio_pad_attr[2].keeper_en.qe = dio_pad_attr_2_qe;

  //   F[schmitt_en_2]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_2_schmitt_en_2 (
    .re     (dio_pad_attr_2_re),
    .we     (dio_pad_attr_2_gated_we),
    .wd     (dio_pad_attr_2_schmitt_en_2_wd),
    .d      (hw2reg.dio_pad_attr[2].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_2_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[2].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_2_schmitt_en_2_qs)
  );
  assign reg2hw.dio_pad_attr[2].schmitt_en.qe = dio_pad_attr_2_qe;

  //   F[od_en_2]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_2_od_en_2 (
    .re     (dio_pad_attr_2_re),
    .we     (dio_pad_attr_2_gated_we),
    .wd     (dio_pad_attr_2_od_en_2_wd),
    .d      (hw2reg.dio_pad_attr[2].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_2_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[2].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_2_od_en_2_qs)
  );
  assign reg2hw.dio_pad_attr[2].od_en.qe = dio_pad_attr_2_qe;

  //   F[slew_rate_2]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_2_slew_rate_2 (
    .re     (dio_pad_attr_2_re),
    .we     (dio_pad_attr_2_gated_we),
    .wd     (dio_pad_attr_2_slew_rate_2_wd),
    .d      (hw2reg.dio_pad_attr[2].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_2_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[2].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_2_slew_rate_2_qs)
  );
  assign reg2hw.dio_pad_attr[2].slew_rate.qe = dio_pad_attr_2_qe;

  //   F[drive_strength_2]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_2_drive_strength_2 (
    .re     (dio_pad_attr_2_re),
    .we     (dio_pad_attr_2_gated_we),
    .wd     (dio_pad_attr_2_drive_strength_2_wd),
    .d      (hw2reg.dio_pad_attr[2].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_2_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[2].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_2_drive_strength_2_qs)
  );
  assign reg2hw.dio_pad_attr[2].drive_strength.qe = dio_pad_attr_2_qe;


  // Subregister 3 of Multireg dio_pad_attr
  // R[dio_pad_attr_3]: V(True)
  logic dio_pad_attr_3_qe;
  logic [8:0] dio_pad_attr_3_flds_we;
  assign dio_pad_attr_3_qe = &dio_pad_attr_3_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_3_gated_we;
  assign dio_pad_attr_3_gated_we = dio_pad_attr_3_we & dio_pad_attr_regwen_3_qs;
  //   F[invert_3]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_3_invert_3 (
    .re     (dio_pad_attr_3_re),
    .we     (dio_pad_attr_3_gated_we),
    .wd     (dio_pad_attr_3_invert_3_wd),
    .d      (hw2reg.dio_pad_attr[3].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_3_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[3].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_3_invert_3_qs)
  );
  assign reg2hw.dio_pad_attr[3].invert.qe = dio_pad_attr_3_qe;

  //   F[virtual_od_en_3]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_3_virtual_od_en_3 (
    .re     (dio_pad_attr_3_re),
    .we     (dio_pad_attr_3_gated_we),
    .wd     (dio_pad_attr_3_virtual_od_en_3_wd),
    .d      (hw2reg.dio_pad_attr[3].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_3_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[3].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_3_virtual_od_en_3_qs)
  );
  assign reg2hw.dio_pad_attr[3].virtual_od_en.qe = dio_pad_attr_3_qe;

  //   F[pull_en_3]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_3_pull_en_3 (
    .re     (dio_pad_attr_3_re),
    .we     (dio_pad_attr_3_gated_we),
    .wd     (dio_pad_attr_3_pull_en_3_wd),
    .d      (hw2reg.dio_pad_attr[3].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_3_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[3].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_3_pull_en_3_qs)
  );
  assign reg2hw.dio_pad_attr[3].pull_en.qe = dio_pad_attr_3_qe;

  //   F[pull_select_3]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_3_pull_select_3 (
    .re     (dio_pad_attr_3_re),
    .we     (dio_pad_attr_3_gated_we),
    .wd     (dio_pad_attr_3_pull_select_3_wd),
    .d      (hw2reg.dio_pad_attr[3].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_3_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[3].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_3_pull_select_3_qs)
  );
  assign reg2hw.dio_pad_attr[3].pull_select.qe = dio_pad_attr_3_qe;

  //   F[keeper_en_3]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_3_keeper_en_3 (
    .re     (dio_pad_attr_3_re),
    .we     (dio_pad_attr_3_gated_we),
    .wd     (dio_pad_attr_3_keeper_en_3_wd),
    .d      (hw2reg.dio_pad_attr[3].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_3_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[3].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_3_keeper_en_3_qs)
  );
  assign reg2hw.dio_pad_attr[3].keeper_en.qe = dio_pad_attr_3_qe;

  //   F[schmitt_en_3]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_3_schmitt_en_3 (
    .re     (dio_pad_attr_3_re),
    .we     (dio_pad_attr_3_gated_we),
    .wd     (dio_pad_attr_3_schmitt_en_3_wd),
    .d      (hw2reg.dio_pad_attr[3].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_3_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[3].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_3_schmitt_en_3_qs)
  );
  assign reg2hw.dio_pad_attr[3].schmitt_en.qe = dio_pad_attr_3_qe;

  //   F[od_en_3]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_3_od_en_3 (
    .re     (dio_pad_attr_3_re),
    .we     (dio_pad_attr_3_gated_we),
    .wd     (dio_pad_attr_3_od_en_3_wd),
    .d      (hw2reg.dio_pad_attr[3].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_3_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[3].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_3_od_en_3_qs)
  );
  assign reg2hw.dio_pad_attr[3].od_en.qe = dio_pad_attr_3_qe;

  //   F[slew_rate_3]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_3_slew_rate_3 (
    .re     (dio_pad_attr_3_re),
    .we     (dio_pad_attr_3_gated_we),
    .wd     (dio_pad_attr_3_slew_rate_3_wd),
    .d      (hw2reg.dio_pad_attr[3].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_3_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[3].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_3_slew_rate_3_qs)
  );
  assign reg2hw.dio_pad_attr[3].slew_rate.qe = dio_pad_attr_3_qe;

  //   F[drive_strength_3]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_3_drive_strength_3 (
    .re     (dio_pad_attr_3_re),
    .we     (dio_pad_attr_3_gated_we),
    .wd     (dio_pad_attr_3_drive_strength_3_wd),
    .d      (hw2reg.dio_pad_attr[3].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_3_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[3].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_3_drive_strength_3_qs)
  );
  assign reg2hw.dio_pad_attr[3].drive_strength.qe = dio_pad_attr_3_qe;


  // Subregister 4 of Multireg dio_pad_attr
  // R[dio_pad_attr_4]: V(True)
  logic dio_pad_attr_4_qe;
  logic [8:0] dio_pad_attr_4_flds_we;
  assign dio_pad_attr_4_qe = &dio_pad_attr_4_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_4_gated_we;
  assign dio_pad_attr_4_gated_we = dio_pad_attr_4_we & dio_pad_attr_regwen_4_qs;
  //   F[invert_4]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_4_invert_4 (
    .re     (dio_pad_attr_4_re),
    .we     (dio_pad_attr_4_gated_we),
    .wd     (dio_pad_attr_4_invert_4_wd),
    .d      (hw2reg.dio_pad_attr[4].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_4_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[4].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_4_invert_4_qs)
  );
  assign reg2hw.dio_pad_attr[4].invert.qe = dio_pad_attr_4_qe;

  //   F[virtual_od_en_4]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_4_virtual_od_en_4 (
    .re     (dio_pad_attr_4_re),
    .we     (dio_pad_attr_4_gated_we),
    .wd     (dio_pad_attr_4_virtual_od_en_4_wd),
    .d      (hw2reg.dio_pad_attr[4].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_4_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[4].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_4_virtual_od_en_4_qs)
  );
  assign reg2hw.dio_pad_attr[4].virtual_od_en.qe = dio_pad_attr_4_qe;

  //   F[pull_en_4]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_4_pull_en_4 (
    .re     (dio_pad_attr_4_re),
    .we     (dio_pad_attr_4_gated_we),
    .wd     (dio_pad_attr_4_pull_en_4_wd),
    .d      (hw2reg.dio_pad_attr[4].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_4_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[4].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_4_pull_en_4_qs)
  );
  assign reg2hw.dio_pad_attr[4].pull_en.qe = dio_pad_attr_4_qe;

  //   F[pull_select_4]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_4_pull_select_4 (
    .re     (dio_pad_attr_4_re),
    .we     (dio_pad_attr_4_gated_we),
    .wd     (dio_pad_attr_4_pull_select_4_wd),
    .d      (hw2reg.dio_pad_attr[4].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_4_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[4].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_4_pull_select_4_qs)
  );
  assign reg2hw.dio_pad_attr[4].pull_select.qe = dio_pad_attr_4_qe;

  //   F[keeper_en_4]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_4_keeper_en_4 (
    .re     (dio_pad_attr_4_re),
    .we     (dio_pad_attr_4_gated_we),
    .wd     (dio_pad_attr_4_keeper_en_4_wd),
    .d      (hw2reg.dio_pad_attr[4].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_4_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[4].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_4_keeper_en_4_qs)
  );
  assign reg2hw.dio_pad_attr[4].keeper_en.qe = dio_pad_attr_4_qe;

  //   F[schmitt_en_4]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_4_schmitt_en_4 (
    .re     (dio_pad_attr_4_re),
    .we     (dio_pad_attr_4_gated_we),
    .wd     (dio_pad_attr_4_schmitt_en_4_wd),
    .d      (hw2reg.dio_pad_attr[4].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_4_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[4].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_4_schmitt_en_4_qs)
  );
  assign reg2hw.dio_pad_attr[4].schmitt_en.qe = dio_pad_attr_4_qe;

  //   F[od_en_4]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_4_od_en_4 (
    .re     (dio_pad_attr_4_re),
    .we     (dio_pad_attr_4_gated_we),
    .wd     (dio_pad_attr_4_od_en_4_wd),
    .d      (hw2reg.dio_pad_attr[4].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_4_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[4].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_4_od_en_4_qs)
  );
  assign reg2hw.dio_pad_attr[4].od_en.qe = dio_pad_attr_4_qe;

  //   F[slew_rate_4]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_4_slew_rate_4 (
    .re     (dio_pad_attr_4_re),
    .we     (dio_pad_attr_4_gated_we),
    .wd     (dio_pad_attr_4_slew_rate_4_wd),
    .d      (hw2reg.dio_pad_attr[4].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_4_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[4].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_4_slew_rate_4_qs)
  );
  assign reg2hw.dio_pad_attr[4].slew_rate.qe = dio_pad_attr_4_qe;

  //   F[drive_strength_4]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_4_drive_strength_4 (
    .re     (dio_pad_attr_4_re),
    .we     (dio_pad_attr_4_gated_we),
    .wd     (dio_pad_attr_4_drive_strength_4_wd),
    .d      (hw2reg.dio_pad_attr[4].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_4_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[4].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_4_drive_strength_4_qs)
  );
  assign reg2hw.dio_pad_attr[4].drive_strength.qe = dio_pad_attr_4_qe;


  // Subregister 5 of Multireg dio_pad_attr
  // R[dio_pad_attr_5]: V(True)
  logic dio_pad_attr_5_qe;
  logic [8:0] dio_pad_attr_5_flds_we;
  assign dio_pad_attr_5_qe = &dio_pad_attr_5_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_5_gated_we;
  assign dio_pad_attr_5_gated_we = dio_pad_attr_5_we & dio_pad_attr_regwen_5_qs;
  //   F[invert_5]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_5_invert_5 (
    .re     (dio_pad_attr_5_re),
    .we     (dio_pad_attr_5_gated_we),
    .wd     (dio_pad_attr_5_invert_5_wd),
    .d      (hw2reg.dio_pad_attr[5].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_5_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[5].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_5_invert_5_qs)
  );
  assign reg2hw.dio_pad_attr[5].invert.qe = dio_pad_attr_5_qe;

  //   F[virtual_od_en_5]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_5_virtual_od_en_5 (
    .re     (dio_pad_attr_5_re),
    .we     (dio_pad_attr_5_gated_we),
    .wd     (dio_pad_attr_5_virtual_od_en_5_wd),
    .d      (hw2reg.dio_pad_attr[5].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_5_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[5].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_5_virtual_od_en_5_qs)
  );
  assign reg2hw.dio_pad_attr[5].virtual_od_en.qe = dio_pad_attr_5_qe;

  //   F[pull_en_5]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_5_pull_en_5 (
    .re     (dio_pad_attr_5_re),
    .we     (dio_pad_attr_5_gated_we),
    .wd     (dio_pad_attr_5_pull_en_5_wd),
    .d      (hw2reg.dio_pad_attr[5].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_5_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[5].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_5_pull_en_5_qs)
  );
  assign reg2hw.dio_pad_attr[5].pull_en.qe = dio_pad_attr_5_qe;

  //   F[pull_select_5]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_5_pull_select_5 (
    .re     (dio_pad_attr_5_re),
    .we     (dio_pad_attr_5_gated_we),
    .wd     (dio_pad_attr_5_pull_select_5_wd),
    .d      (hw2reg.dio_pad_attr[5].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_5_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[5].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_5_pull_select_5_qs)
  );
  assign reg2hw.dio_pad_attr[5].pull_select.qe = dio_pad_attr_5_qe;

  //   F[keeper_en_5]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_5_keeper_en_5 (
    .re     (dio_pad_attr_5_re),
    .we     (dio_pad_attr_5_gated_we),
    .wd     (dio_pad_attr_5_keeper_en_5_wd),
    .d      (hw2reg.dio_pad_attr[5].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_5_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[5].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_5_keeper_en_5_qs)
  );
  assign reg2hw.dio_pad_attr[5].keeper_en.qe = dio_pad_attr_5_qe;

  //   F[schmitt_en_5]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_5_schmitt_en_5 (
    .re     (dio_pad_attr_5_re),
    .we     (dio_pad_attr_5_gated_we),
    .wd     (dio_pad_attr_5_schmitt_en_5_wd),
    .d      (hw2reg.dio_pad_attr[5].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_5_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[5].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_5_schmitt_en_5_qs)
  );
  assign reg2hw.dio_pad_attr[5].schmitt_en.qe = dio_pad_attr_5_qe;

  //   F[od_en_5]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_5_od_en_5 (
    .re     (dio_pad_attr_5_re),
    .we     (dio_pad_attr_5_gated_we),
    .wd     (dio_pad_attr_5_od_en_5_wd),
    .d      (hw2reg.dio_pad_attr[5].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_5_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[5].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_5_od_en_5_qs)
  );
  assign reg2hw.dio_pad_attr[5].od_en.qe = dio_pad_attr_5_qe;

  //   F[slew_rate_5]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_5_slew_rate_5 (
    .re     (dio_pad_attr_5_re),
    .we     (dio_pad_attr_5_gated_we),
    .wd     (dio_pad_attr_5_slew_rate_5_wd),
    .d      (hw2reg.dio_pad_attr[5].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_5_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[5].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_5_slew_rate_5_qs)
  );
  assign reg2hw.dio_pad_attr[5].slew_rate.qe = dio_pad_attr_5_qe;

  //   F[drive_strength_5]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_5_drive_strength_5 (
    .re     (dio_pad_attr_5_re),
    .we     (dio_pad_attr_5_gated_we),
    .wd     (dio_pad_attr_5_drive_strength_5_wd),
    .d      (hw2reg.dio_pad_attr[5].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_5_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[5].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_5_drive_strength_5_qs)
  );
  assign reg2hw.dio_pad_attr[5].drive_strength.qe = dio_pad_attr_5_qe;


  // Subregister 6 of Multireg dio_pad_attr
  // R[dio_pad_attr_6]: V(True)
  logic dio_pad_attr_6_qe;
  logic [8:0] dio_pad_attr_6_flds_we;
  assign dio_pad_attr_6_qe = &dio_pad_attr_6_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_6_gated_we;
  assign dio_pad_attr_6_gated_we = dio_pad_attr_6_we & dio_pad_attr_regwen_6_qs;
  //   F[invert_6]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_6_invert_6 (
    .re     (dio_pad_attr_6_re),
    .we     (dio_pad_attr_6_gated_we),
    .wd     (dio_pad_attr_6_invert_6_wd),
    .d      (hw2reg.dio_pad_attr[6].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_6_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[6].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_6_invert_6_qs)
  );
  assign reg2hw.dio_pad_attr[6].invert.qe = dio_pad_attr_6_qe;

  //   F[virtual_od_en_6]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_6_virtual_od_en_6 (
    .re     (dio_pad_attr_6_re),
    .we     (dio_pad_attr_6_gated_we),
    .wd     (dio_pad_attr_6_virtual_od_en_6_wd),
    .d      (hw2reg.dio_pad_attr[6].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_6_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[6].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_6_virtual_od_en_6_qs)
  );
  assign reg2hw.dio_pad_attr[6].virtual_od_en.qe = dio_pad_attr_6_qe;

  //   F[pull_en_6]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_6_pull_en_6 (
    .re     (dio_pad_attr_6_re),
    .we     (dio_pad_attr_6_gated_we),
    .wd     (dio_pad_attr_6_pull_en_6_wd),
    .d      (hw2reg.dio_pad_attr[6].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_6_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[6].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_6_pull_en_6_qs)
  );
  assign reg2hw.dio_pad_attr[6].pull_en.qe = dio_pad_attr_6_qe;

  //   F[pull_select_6]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_6_pull_select_6 (
    .re     (dio_pad_attr_6_re),
    .we     (dio_pad_attr_6_gated_we),
    .wd     (dio_pad_attr_6_pull_select_6_wd),
    .d      (hw2reg.dio_pad_attr[6].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_6_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[6].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_6_pull_select_6_qs)
  );
  assign reg2hw.dio_pad_attr[6].pull_select.qe = dio_pad_attr_6_qe;

  //   F[keeper_en_6]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_6_keeper_en_6 (
    .re     (dio_pad_attr_6_re),
    .we     (dio_pad_attr_6_gated_we),
    .wd     (dio_pad_attr_6_keeper_en_6_wd),
    .d      (hw2reg.dio_pad_attr[6].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_6_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[6].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_6_keeper_en_6_qs)
  );
  assign reg2hw.dio_pad_attr[6].keeper_en.qe = dio_pad_attr_6_qe;

  //   F[schmitt_en_6]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_6_schmitt_en_6 (
    .re     (dio_pad_attr_6_re),
    .we     (dio_pad_attr_6_gated_we),
    .wd     (dio_pad_attr_6_schmitt_en_6_wd),
    .d      (hw2reg.dio_pad_attr[6].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_6_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[6].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_6_schmitt_en_6_qs)
  );
  assign reg2hw.dio_pad_attr[6].schmitt_en.qe = dio_pad_attr_6_qe;

  //   F[od_en_6]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_6_od_en_6 (
    .re     (dio_pad_attr_6_re),
    .we     (dio_pad_attr_6_gated_we),
    .wd     (dio_pad_attr_6_od_en_6_wd),
    .d      (hw2reg.dio_pad_attr[6].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_6_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[6].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_6_od_en_6_qs)
  );
  assign reg2hw.dio_pad_attr[6].od_en.qe = dio_pad_attr_6_qe;

  //   F[slew_rate_6]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_6_slew_rate_6 (
    .re     (dio_pad_attr_6_re),
    .we     (dio_pad_attr_6_gated_we),
    .wd     (dio_pad_attr_6_slew_rate_6_wd),
    .d      (hw2reg.dio_pad_attr[6].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_6_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[6].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_6_slew_rate_6_qs)
  );
  assign reg2hw.dio_pad_attr[6].slew_rate.qe = dio_pad_attr_6_qe;

  //   F[drive_strength_6]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_6_drive_strength_6 (
    .re     (dio_pad_attr_6_re),
    .we     (dio_pad_attr_6_gated_we),
    .wd     (dio_pad_attr_6_drive_strength_6_wd),
    .d      (hw2reg.dio_pad_attr[6].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_6_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[6].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_6_drive_strength_6_qs)
  );
  assign reg2hw.dio_pad_attr[6].drive_strength.qe = dio_pad_attr_6_qe;


  // Subregister 7 of Multireg dio_pad_attr
  // R[dio_pad_attr_7]: V(True)
  logic dio_pad_attr_7_qe;
  logic [8:0] dio_pad_attr_7_flds_we;
  assign dio_pad_attr_7_qe = &dio_pad_attr_7_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_7_gated_we;
  assign dio_pad_attr_7_gated_we = dio_pad_attr_7_we & dio_pad_attr_regwen_7_qs;
  //   F[invert_7]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_7_invert_7 (
    .re     (dio_pad_attr_7_re),
    .we     (dio_pad_attr_7_gated_we),
    .wd     (dio_pad_attr_7_invert_7_wd),
    .d      (hw2reg.dio_pad_attr[7].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_7_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[7].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_7_invert_7_qs)
  );
  assign reg2hw.dio_pad_attr[7].invert.qe = dio_pad_attr_7_qe;

  //   F[virtual_od_en_7]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_7_virtual_od_en_7 (
    .re     (dio_pad_attr_7_re),
    .we     (dio_pad_attr_7_gated_we),
    .wd     (dio_pad_attr_7_virtual_od_en_7_wd),
    .d      (hw2reg.dio_pad_attr[7].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_7_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[7].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_7_virtual_od_en_7_qs)
  );
  assign reg2hw.dio_pad_attr[7].virtual_od_en.qe = dio_pad_attr_7_qe;

  //   F[pull_en_7]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_7_pull_en_7 (
    .re     (dio_pad_attr_7_re),
    .we     (dio_pad_attr_7_gated_we),
    .wd     (dio_pad_attr_7_pull_en_7_wd),
    .d      (hw2reg.dio_pad_attr[7].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_7_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[7].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_7_pull_en_7_qs)
  );
  assign reg2hw.dio_pad_attr[7].pull_en.qe = dio_pad_attr_7_qe;

  //   F[pull_select_7]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_7_pull_select_7 (
    .re     (dio_pad_attr_7_re),
    .we     (dio_pad_attr_7_gated_we),
    .wd     (dio_pad_attr_7_pull_select_7_wd),
    .d      (hw2reg.dio_pad_attr[7].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_7_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[7].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_7_pull_select_7_qs)
  );
  assign reg2hw.dio_pad_attr[7].pull_select.qe = dio_pad_attr_7_qe;

  //   F[keeper_en_7]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_7_keeper_en_7 (
    .re     (dio_pad_attr_7_re),
    .we     (dio_pad_attr_7_gated_we),
    .wd     (dio_pad_attr_7_keeper_en_7_wd),
    .d      (hw2reg.dio_pad_attr[7].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_7_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[7].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_7_keeper_en_7_qs)
  );
  assign reg2hw.dio_pad_attr[7].keeper_en.qe = dio_pad_attr_7_qe;

  //   F[schmitt_en_7]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_7_schmitt_en_7 (
    .re     (dio_pad_attr_7_re),
    .we     (dio_pad_attr_7_gated_we),
    .wd     (dio_pad_attr_7_schmitt_en_7_wd),
    .d      (hw2reg.dio_pad_attr[7].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_7_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[7].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_7_schmitt_en_7_qs)
  );
  assign reg2hw.dio_pad_attr[7].schmitt_en.qe = dio_pad_attr_7_qe;

  //   F[od_en_7]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_7_od_en_7 (
    .re     (dio_pad_attr_7_re),
    .we     (dio_pad_attr_7_gated_we),
    .wd     (dio_pad_attr_7_od_en_7_wd),
    .d      (hw2reg.dio_pad_attr[7].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_7_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[7].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_7_od_en_7_qs)
  );
  assign reg2hw.dio_pad_attr[7].od_en.qe = dio_pad_attr_7_qe;

  //   F[slew_rate_7]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_7_slew_rate_7 (
    .re     (dio_pad_attr_7_re),
    .we     (dio_pad_attr_7_gated_we),
    .wd     (dio_pad_attr_7_slew_rate_7_wd),
    .d      (hw2reg.dio_pad_attr[7].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_7_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[7].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_7_slew_rate_7_qs)
  );
  assign reg2hw.dio_pad_attr[7].slew_rate.qe = dio_pad_attr_7_qe;

  //   F[drive_strength_7]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_7_drive_strength_7 (
    .re     (dio_pad_attr_7_re),
    .we     (dio_pad_attr_7_gated_we),
    .wd     (dio_pad_attr_7_drive_strength_7_wd),
    .d      (hw2reg.dio_pad_attr[7].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_7_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[7].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_7_drive_strength_7_qs)
  );
  assign reg2hw.dio_pad_attr[7].drive_strength.qe = dio_pad_attr_7_qe;


  // Subregister 8 of Multireg dio_pad_attr
  // R[dio_pad_attr_8]: V(True)
  logic dio_pad_attr_8_qe;
  logic [8:0] dio_pad_attr_8_flds_we;
  assign dio_pad_attr_8_qe = &dio_pad_attr_8_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_8_gated_we;
  assign dio_pad_attr_8_gated_we = dio_pad_attr_8_we & dio_pad_attr_regwen_8_qs;
  //   F[invert_8]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_8_invert_8 (
    .re     (dio_pad_attr_8_re),
    .we     (dio_pad_attr_8_gated_we),
    .wd     (dio_pad_attr_8_invert_8_wd),
    .d      (hw2reg.dio_pad_attr[8].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_8_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[8].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_8_invert_8_qs)
  );
  assign reg2hw.dio_pad_attr[8].invert.qe = dio_pad_attr_8_qe;

  //   F[virtual_od_en_8]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_8_virtual_od_en_8 (
    .re     (dio_pad_attr_8_re),
    .we     (dio_pad_attr_8_gated_we),
    .wd     (dio_pad_attr_8_virtual_od_en_8_wd),
    .d      (hw2reg.dio_pad_attr[8].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_8_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[8].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_8_virtual_od_en_8_qs)
  );
  assign reg2hw.dio_pad_attr[8].virtual_od_en.qe = dio_pad_attr_8_qe;

  //   F[pull_en_8]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_8_pull_en_8 (
    .re     (dio_pad_attr_8_re),
    .we     (dio_pad_attr_8_gated_we),
    .wd     (dio_pad_attr_8_pull_en_8_wd),
    .d      (hw2reg.dio_pad_attr[8].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_8_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[8].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_8_pull_en_8_qs)
  );
  assign reg2hw.dio_pad_attr[8].pull_en.qe = dio_pad_attr_8_qe;

  //   F[pull_select_8]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_8_pull_select_8 (
    .re     (dio_pad_attr_8_re),
    .we     (dio_pad_attr_8_gated_we),
    .wd     (dio_pad_attr_8_pull_select_8_wd),
    .d      (hw2reg.dio_pad_attr[8].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_8_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[8].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_8_pull_select_8_qs)
  );
  assign reg2hw.dio_pad_attr[8].pull_select.qe = dio_pad_attr_8_qe;

  //   F[keeper_en_8]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_8_keeper_en_8 (
    .re     (dio_pad_attr_8_re),
    .we     (dio_pad_attr_8_gated_we),
    .wd     (dio_pad_attr_8_keeper_en_8_wd),
    .d      (hw2reg.dio_pad_attr[8].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_8_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[8].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_8_keeper_en_8_qs)
  );
  assign reg2hw.dio_pad_attr[8].keeper_en.qe = dio_pad_attr_8_qe;

  //   F[schmitt_en_8]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_8_schmitt_en_8 (
    .re     (dio_pad_attr_8_re),
    .we     (dio_pad_attr_8_gated_we),
    .wd     (dio_pad_attr_8_schmitt_en_8_wd),
    .d      (hw2reg.dio_pad_attr[8].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_8_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[8].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_8_schmitt_en_8_qs)
  );
  assign reg2hw.dio_pad_attr[8].schmitt_en.qe = dio_pad_attr_8_qe;

  //   F[od_en_8]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_8_od_en_8 (
    .re     (dio_pad_attr_8_re),
    .we     (dio_pad_attr_8_gated_we),
    .wd     (dio_pad_attr_8_od_en_8_wd),
    .d      (hw2reg.dio_pad_attr[8].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_8_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[8].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_8_od_en_8_qs)
  );
  assign reg2hw.dio_pad_attr[8].od_en.qe = dio_pad_attr_8_qe;

  //   F[slew_rate_8]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_8_slew_rate_8 (
    .re     (dio_pad_attr_8_re),
    .we     (dio_pad_attr_8_gated_we),
    .wd     (dio_pad_attr_8_slew_rate_8_wd),
    .d      (hw2reg.dio_pad_attr[8].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_8_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[8].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_8_slew_rate_8_qs)
  );
  assign reg2hw.dio_pad_attr[8].slew_rate.qe = dio_pad_attr_8_qe;

  //   F[drive_strength_8]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_8_drive_strength_8 (
    .re     (dio_pad_attr_8_re),
    .we     (dio_pad_attr_8_gated_we),
    .wd     (dio_pad_attr_8_drive_strength_8_wd),
    .d      (hw2reg.dio_pad_attr[8].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_8_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[8].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_8_drive_strength_8_qs)
  );
  assign reg2hw.dio_pad_attr[8].drive_strength.qe = dio_pad_attr_8_qe;


  // Subregister 9 of Multireg dio_pad_attr
  // R[dio_pad_attr_9]: V(True)
  logic dio_pad_attr_9_qe;
  logic [8:0] dio_pad_attr_9_flds_we;
  assign dio_pad_attr_9_qe = &dio_pad_attr_9_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_9_gated_we;
  assign dio_pad_attr_9_gated_we = dio_pad_attr_9_we & dio_pad_attr_regwen_9_qs;
  //   F[invert_9]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_9_invert_9 (
    .re     (dio_pad_attr_9_re),
    .we     (dio_pad_attr_9_gated_we),
    .wd     (dio_pad_attr_9_invert_9_wd),
    .d      (hw2reg.dio_pad_attr[9].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_9_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[9].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_9_invert_9_qs)
  );
  assign reg2hw.dio_pad_attr[9].invert.qe = dio_pad_attr_9_qe;

  //   F[virtual_od_en_9]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_9_virtual_od_en_9 (
    .re     (dio_pad_attr_9_re),
    .we     (dio_pad_attr_9_gated_we),
    .wd     (dio_pad_attr_9_virtual_od_en_9_wd),
    .d      (hw2reg.dio_pad_attr[9].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_9_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[9].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_9_virtual_od_en_9_qs)
  );
  assign reg2hw.dio_pad_attr[9].virtual_od_en.qe = dio_pad_attr_9_qe;

  //   F[pull_en_9]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_9_pull_en_9 (
    .re     (dio_pad_attr_9_re),
    .we     (dio_pad_attr_9_gated_we),
    .wd     (dio_pad_attr_9_pull_en_9_wd),
    .d      (hw2reg.dio_pad_attr[9].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_9_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[9].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_9_pull_en_9_qs)
  );
  assign reg2hw.dio_pad_attr[9].pull_en.qe = dio_pad_attr_9_qe;

  //   F[pull_select_9]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_9_pull_select_9 (
    .re     (dio_pad_attr_9_re),
    .we     (dio_pad_attr_9_gated_we),
    .wd     (dio_pad_attr_9_pull_select_9_wd),
    .d      (hw2reg.dio_pad_attr[9].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_9_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[9].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_9_pull_select_9_qs)
  );
  assign reg2hw.dio_pad_attr[9].pull_select.qe = dio_pad_attr_9_qe;

  //   F[keeper_en_9]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_9_keeper_en_9 (
    .re     (dio_pad_attr_9_re),
    .we     (dio_pad_attr_9_gated_we),
    .wd     (dio_pad_attr_9_keeper_en_9_wd),
    .d      (hw2reg.dio_pad_attr[9].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_9_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[9].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_9_keeper_en_9_qs)
  );
  assign reg2hw.dio_pad_attr[9].keeper_en.qe = dio_pad_attr_9_qe;

  //   F[schmitt_en_9]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_9_schmitt_en_9 (
    .re     (dio_pad_attr_9_re),
    .we     (dio_pad_attr_9_gated_we),
    .wd     (dio_pad_attr_9_schmitt_en_9_wd),
    .d      (hw2reg.dio_pad_attr[9].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_9_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[9].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_9_schmitt_en_9_qs)
  );
  assign reg2hw.dio_pad_attr[9].schmitt_en.qe = dio_pad_attr_9_qe;

  //   F[od_en_9]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_9_od_en_9 (
    .re     (dio_pad_attr_9_re),
    .we     (dio_pad_attr_9_gated_we),
    .wd     (dio_pad_attr_9_od_en_9_wd),
    .d      (hw2reg.dio_pad_attr[9].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_9_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[9].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_9_od_en_9_qs)
  );
  assign reg2hw.dio_pad_attr[9].od_en.qe = dio_pad_attr_9_qe;

  //   F[slew_rate_9]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_9_slew_rate_9 (
    .re     (dio_pad_attr_9_re),
    .we     (dio_pad_attr_9_gated_we),
    .wd     (dio_pad_attr_9_slew_rate_9_wd),
    .d      (hw2reg.dio_pad_attr[9].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_9_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[9].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_9_slew_rate_9_qs)
  );
  assign reg2hw.dio_pad_attr[9].slew_rate.qe = dio_pad_attr_9_qe;

  //   F[drive_strength_9]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_9_drive_strength_9 (
    .re     (dio_pad_attr_9_re),
    .we     (dio_pad_attr_9_gated_we),
    .wd     (dio_pad_attr_9_drive_strength_9_wd),
    .d      (hw2reg.dio_pad_attr[9].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_9_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[9].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_9_drive_strength_9_qs)
  );
  assign reg2hw.dio_pad_attr[9].drive_strength.qe = dio_pad_attr_9_qe;


  // Subregister 10 of Multireg dio_pad_attr
  // R[dio_pad_attr_10]: V(True)
  logic dio_pad_attr_10_qe;
  logic [8:0] dio_pad_attr_10_flds_we;
  assign dio_pad_attr_10_qe = &dio_pad_attr_10_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_10_gated_we;
  assign dio_pad_attr_10_gated_we = dio_pad_attr_10_we & dio_pad_attr_regwen_10_qs;
  //   F[invert_10]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_10_invert_10 (
    .re     (dio_pad_attr_10_re),
    .we     (dio_pad_attr_10_gated_we),
    .wd     (dio_pad_attr_10_invert_10_wd),
    .d      (hw2reg.dio_pad_attr[10].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_10_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[10].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_10_invert_10_qs)
  );
  assign reg2hw.dio_pad_attr[10].invert.qe = dio_pad_attr_10_qe;

  //   F[virtual_od_en_10]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_10_virtual_od_en_10 (
    .re     (dio_pad_attr_10_re),
    .we     (dio_pad_attr_10_gated_we),
    .wd     (dio_pad_attr_10_virtual_od_en_10_wd),
    .d      (hw2reg.dio_pad_attr[10].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_10_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[10].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_10_virtual_od_en_10_qs)
  );
  assign reg2hw.dio_pad_attr[10].virtual_od_en.qe = dio_pad_attr_10_qe;

  //   F[pull_en_10]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_10_pull_en_10 (
    .re     (dio_pad_attr_10_re),
    .we     (dio_pad_attr_10_gated_we),
    .wd     (dio_pad_attr_10_pull_en_10_wd),
    .d      (hw2reg.dio_pad_attr[10].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_10_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[10].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_10_pull_en_10_qs)
  );
  assign reg2hw.dio_pad_attr[10].pull_en.qe = dio_pad_attr_10_qe;

  //   F[pull_select_10]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_10_pull_select_10 (
    .re     (dio_pad_attr_10_re),
    .we     (dio_pad_attr_10_gated_we),
    .wd     (dio_pad_attr_10_pull_select_10_wd),
    .d      (hw2reg.dio_pad_attr[10].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_10_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[10].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_10_pull_select_10_qs)
  );
  assign reg2hw.dio_pad_attr[10].pull_select.qe = dio_pad_attr_10_qe;

  //   F[keeper_en_10]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_10_keeper_en_10 (
    .re     (dio_pad_attr_10_re),
    .we     (dio_pad_attr_10_gated_we),
    .wd     (dio_pad_attr_10_keeper_en_10_wd),
    .d      (hw2reg.dio_pad_attr[10].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_10_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[10].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_10_keeper_en_10_qs)
  );
  assign reg2hw.dio_pad_attr[10].keeper_en.qe = dio_pad_attr_10_qe;

  //   F[schmitt_en_10]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_10_schmitt_en_10 (
    .re     (dio_pad_attr_10_re),
    .we     (dio_pad_attr_10_gated_we),
    .wd     (dio_pad_attr_10_schmitt_en_10_wd),
    .d      (hw2reg.dio_pad_attr[10].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_10_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[10].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_10_schmitt_en_10_qs)
  );
  assign reg2hw.dio_pad_attr[10].schmitt_en.qe = dio_pad_attr_10_qe;

  //   F[od_en_10]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_10_od_en_10 (
    .re     (dio_pad_attr_10_re),
    .we     (dio_pad_attr_10_gated_we),
    .wd     (dio_pad_attr_10_od_en_10_wd),
    .d      (hw2reg.dio_pad_attr[10].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_10_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[10].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_10_od_en_10_qs)
  );
  assign reg2hw.dio_pad_attr[10].od_en.qe = dio_pad_attr_10_qe;

  //   F[slew_rate_10]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_10_slew_rate_10 (
    .re     (dio_pad_attr_10_re),
    .we     (dio_pad_attr_10_gated_we),
    .wd     (dio_pad_attr_10_slew_rate_10_wd),
    .d      (hw2reg.dio_pad_attr[10].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_10_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[10].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_10_slew_rate_10_qs)
  );
  assign reg2hw.dio_pad_attr[10].slew_rate.qe = dio_pad_attr_10_qe;

  //   F[drive_strength_10]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_10_drive_strength_10 (
    .re     (dio_pad_attr_10_re),
    .we     (dio_pad_attr_10_gated_we),
    .wd     (dio_pad_attr_10_drive_strength_10_wd),
    .d      (hw2reg.dio_pad_attr[10].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_10_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[10].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_10_drive_strength_10_qs)
  );
  assign reg2hw.dio_pad_attr[10].drive_strength.qe = dio_pad_attr_10_qe;


  // Subregister 11 of Multireg dio_pad_attr
  // R[dio_pad_attr_11]: V(True)
  logic dio_pad_attr_11_qe;
  logic [8:0] dio_pad_attr_11_flds_we;
  assign dio_pad_attr_11_qe = &dio_pad_attr_11_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_11_gated_we;
  assign dio_pad_attr_11_gated_we = dio_pad_attr_11_we & dio_pad_attr_regwen_11_qs;
  //   F[invert_11]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_11_invert_11 (
    .re     (dio_pad_attr_11_re),
    .we     (dio_pad_attr_11_gated_we),
    .wd     (dio_pad_attr_11_invert_11_wd),
    .d      (hw2reg.dio_pad_attr[11].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_11_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[11].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_11_invert_11_qs)
  );
  assign reg2hw.dio_pad_attr[11].invert.qe = dio_pad_attr_11_qe;

  //   F[virtual_od_en_11]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_11_virtual_od_en_11 (
    .re     (dio_pad_attr_11_re),
    .we     (dio_pad_attr_11_gated_we),
    .wd     (dio_pad_attr_11_virtual_od_en_11_wd),
    .d      (hw2reg.dio_pad_attr[11].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_11_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[11].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_11_virtual_od_en_11_qs)
  );
  assign reg2hw.dio_pad_attr[11].virtual_od_en.qe = dio_pad_attr_11_qe;

  //   F[pull_en_11]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_11_pull_en_11 (
    .re     (dio_pad_attr_11_re),
    .we     (dio_pad_attr_11_gated_we),
    .wd     (dio_pad_attr_11_pull_en_11_wd),
    .d      (hw2reg.dio_pad_attr[11].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_11_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[11].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_11_pull_en_11_qs)
  );
  assign reg2hw.dio_pad_attr[11].pull_en.qe = dio_pad_attr_11_qe;

  //   F[pull_select_11]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_11_pull_select_11 (
    .re     (dio_pad_attr_11_re),
    .we     (dio_pad_attr_11_gated_we),
    .wd     (dio_pad_attr_11_pull_select_11_wd),
    .d      (hw2reg.dio_pad_attr[11].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_11_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[11].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_11_pull_select_11_qs)
  );
  assign reg2hw.dio_pad_attr[11].pull_select.qe = dio_pad_attr_11_qe;

  //   F[keeper_en_11]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_11_keeper_en_11 (
    .re     (dio_pad_attr_11_re),
    .we     (dio_pad_attr_11_gated_we),
    .wd     (dio_pad_attr_11_keeper_en_11_wd),
    .d      (hw2reg.dio_pad_attr[11].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_11_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[11].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_11_keeper_en_11_qs)
  );
  assign reg2hw.dio_pad_attr[11].keeper_en.qe = dio_pad_attr_11_qe;

  //   F[schmitt_en_11]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_11_schmitt_en_11 (
    .re     (dio_pad_attr_11_re),
    .we     (dio_pad_attr_11_gated_we),
    .wd     (dio_pad_attr_11_schmitt_en_11_wd),
    .d      (hw2reg.dio_pad_attr[11].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_11_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[11].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_11_schmitt_en_11_qs)
  );
  assign reg2hw.dio_pad_attr[11].schmitt_en.qe = dio_pad_attr_11_qe;

  //   F[od_en_11]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_11_od_en_11 (
    .re     (dio_pad_attr_11_re),
    .we     (dio_pad_attr_11_gated_we),
    .wd     (dio_pad_attr_11_od_en_11_wd),
    .d      (hw2reg.dio_pad_attr[11].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_11_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[11].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_11_od_en_11_qs)
  );
  assign reg2hw.dio_pad_attr[11].od_en.qe = dio_pad_attr_11_qe;

  //   F[slew_rate_11]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_11_slew_rate_11 (
    .re     (dio_pad_attr_11_re),
    .we     (dio_pad_attr_11_gated_we),
    .wd     (dio_pad_attr_11_slew_rate_11_wd),
    .d      (hw2reg.dio_pad_attr[11].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_11_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[11].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_11_slew_rate_11_qs)
  );
  assign reg2hw.dio_pad_attr[11].slew_rate.qe = dio_pad_attr_11_qe;

  //   F[drive_strength_11]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_11_drive_strength_11 (
    .re     (dio_pad_attr_11_re),
    .we     (dio_pad_attr_11_gated_we),
    .wd     (dio_pad_attr_11_drive_strength_11_wd),
    .d      (hw2reg.dio_pad_attr[11].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_11_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[11].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_11_drive_strength_11_qs)
  );
  assign reg2hw.dio_pad_attr[11].drive_strength.qe = dio_pad_attr_11_qe;


  // Subregister 12 of Multireg dio_pad_attr
  // R[dio_pad_attr_12]: V(True)
  logic dio_pad_attr_12_qe;
  logic [8:0] dio_pad_attr_12_flds_we;
  assign dio_pad_attr_12_qe = &dio_pad_attr_12_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_12_gated_we;
  assign dio_pad_attr_12_gated_we = dio_pad_attr_12_we & dio_pad_attr_regwen_12_qs;
  //   F[invert_12]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_12_invert_12 (
    .re     (dio_pad_attr_12_re),
    .we     (dio_pad_attr_12_gated_we),
    .wd     (dio_pad_attr_12_invert_12_wd),
    .d      (hw2reg.dio_pad_attr[12].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_12_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[12].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_12_invert_12_qs)
  );
  assign reg2hw.dio_pad_attr[12].invert.qe = dio_pad_attr_12_qe;

  //   F[virtual_od_en_12]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_12_virtual_od_en_12 (
    .re     (dio_pad_attr_12_re),
    .we     (dio_pad_attr_12_gated_we),
    .wd     (dio_pad_attr_12_virtual_od_en_12_wd),
    .d      (hw2reg.dio_pad_attr[12].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_12_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[12].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_12_virtual_od_en_12_qs)
  );
  assign reg2hw.dio_pad_attr[12].virtual_od_en.qe = dio_pad_attr_12_qe;

  //   F[pull_en_12]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_12_pull_en_12 (
    .re     (dio_pad_attr_12_re),
    .we     (dio_pad_attr_12_gated_we),
    .wd     (dio_pad_attr_12_pull_en_12_wd),
    .d      (hw2reg.dio_pad_attr[12].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_12_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[12].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_12_pull_en_12_qs)
  );
  assign reg2hw.dio_pad_attr[12].pull_en.qe = dio_pad_attr_12_qe;

  //   F[pull_select_12]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_12_pull_select_12 (
    .re     (dio_pad_attr_12_re),
    .we     (dio_pad_attr_12_gated_we),
    .wd     (dio_pad_attr_12_pull_select_12_wd),
    .d      (hw2reg.dio_pad_attr[12].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_12_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[12].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_12_pull_select_12_qs)
  );
  assign reg2hw.dio_pad_attr[12].pull_select.qe = dio_pad_attr_12_qe;

  //   F[keeper_en_12]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_12_keeper_en_12 (
    .re     (dio_pad_attr_12_re),
    .we     (dio_pad_attr_12_gated_we),
    .wd     (dio_pad_attr_12_keeper_en_12_wd),
    .d      (hw2reg.dio_pad_attr[12].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_12_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[12].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_12_keeper_en_12_qs)
  );
  assign reg2hw.dio_pad_attr[12].keeper_en.qe = dio_pad_attr_12_qe;

  //   F[schmitt_en_12]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_12_schmitt_en_12 (
    .re     (dio_pad_attr_12_re),
    .we     (dio_pad_attr_12_gated_we),
    .wd     (dio_pad_attr_12_schmitt_en_12_wd),
    .d      (hw2reg.dio_pad_attr[12].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_12_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[12].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_12_schmitt_en_12_qs)
  );
  assign reg2hw.dio_pad_attr[12].schmitt_en.qe = dio_pad_attr_12_qe;

  //   F[od_en_12]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_12_od_en_12 (
    .re     (dio_pad_attr_12_re),
    .we     (dio_pad_attr_12_gated_we),
    .wd     (dio_pad_attr_12_od_en_12_wd),
    .d      (hw2reg.dio_pad_attr[12].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_12_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[12].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_12_od_en_12_qs)
  );
  assign reg2hw.dio_pad_attr[12].od_en.qe = dio_pad_attr_12_qe;

  //   F[slew_rate_12]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_12_slew_rate_12 (
    .re     (dio_pad_attr_12_re),
    .we     (dio_pad_attr_12_gated_we),
    .wd     (dio_pad_attr_12_slew_rate_12_wd),
    .d      (hw2reg.dio_pad_attr[12].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_12_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[12].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_12_slew_rate_12_qs)
  );
  assign reg2hw.dio_pad_attr[12].slew_rate.qe = dio_pad_attr_12_qe;

  //   F[drive_strength_12]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_12_drive_strength_12 (
    .re     (dio_pad_attr_12_re),
    .we     (dio_pad_attr_12_gated_we),
    .wd     (dio_pad_attr_12_drive_strength_12_wd),
    .d      (hw2reg.dio_pad_attr[12].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_12_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[12].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_12_drive_strength_12_qs)
  );
  assign reg2hw.dio_pad_attr[12].drive_strength.qe = dio_pad_attr_12_qe;


  // Subregister 13 of Multireg dio_pad_attr
  // R[dio_pad_attr_13]: V(True)
  logic dio_pad_attr_13_qe;
  logic [8:0] dio_pad_attr_13_flds_we;
  assign dio_pad_attr_13_qe = &dio_pad_attr_13_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_13_gated_we;
  assign dio_pad_attr_13_gated_we = dio_pad_attr_13_we & dio_pad_attr_regwen_13_qs;
  //   F[invert_13]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_13_invert_13 (
    .re     (dio_pad_attr_13_re),
    .we     (dio_pad_attr_13_gated_we),
    .wd     (dio_pad_attr_13_invert_13_wd),
    .d      (hw2reg.dio_pad_attr[13].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_13_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[13].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_13_invert_13_qs)
  );
  assign reg2hw.dio_pad_attr[13].invert.qe = dio_pad_attr_13_qe;

  //   F[virtual_od_en_13]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_13_virtual_od_en_13 (
    .re     (dio_pad_attr_13_re),
    .we     (dio_pad_attr_13_gated_we),
    .wd     (dio_pad_attr_13_virtual_od_en_13_wd),
    .d      (hw2reg.dio_pad_attr[13].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_13_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[13].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_13_virtual_od_en_13_qs)
  );
  assign reg2hw.dio_pad_attr[13].virtual_od_en.qe = dio_pad_attr_13_qe;

  //   F[pull_en_13]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_13_pull_en_13 (
    .re     (dio_pad_attr_13_re),
    .we     (dio_pad_attr_13_gated_we),
    .wd     (dio_pad_attr_13_pull_en_13_wd),
    .d      (hw2reg.dio_pad_attr[13].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_13_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[13].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_13_pull_en_13_qs)
  );
  assign reg2hw.dio_pad_attr[13].pull_en.qe = dio_pad_attr_13_qe;

  //   F[pull_select_13]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_13_pull_select_13 (
    .re     (dio_pad_attr_13_re),
    .we     (dio_pad_attr_13_gated_we),
    .wd     (dio_pad_attr_13_pull_select_13_wd),
    .d      (hw2reg.dio_pad_attr[13].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_13_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[13].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_13_pull_select_13_qs)
  );
  assign reg2hw.dio_pad_attr[13].pull_select.qe = dio_pad_attr_13_qe;

  //   F[keeper_en_13]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_13_keeper_en_13 (
    .re     (dio_pad_attr_13_re),
    .we     (dio_pad_attr_13_gated_we),
    .wd     (dio_pad_attr_13_keeper_en_13_wd),
    .d      (hw2reg.dio_pad_attr[13].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_13_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[13].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_13_keeper_en_13_qs)
  );
  assign reg2hw.dio_pad_attr[13].keeper_en.qe = dio_pad_attr_13_qe;

  //   F[schmitt_en_13]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_13_schmitt_en_13 (
    .re     (dio_pad_attr_13_re),
    .we     (dio_pad_attr_13_gated_we),
    .wd     (dio_pad_attr_13_schmitt_en_13_wd),
    .d      (hw2reg.dio_pad_attr[13].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_13_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[13].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_13_schmitt_en_13_qs)
  );
  assign reg2hw.dio_pad_attr[13].schmitt_en.qe = dio_pad_attr_13_qe;

  //   F[od_en_13]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_13_od_en_13 (
    .re     (dio_pad_attr_13_re),
    .we     (dio_pad_attr_13_gated_we),
    .wd     (dio_pad_attr_13_od_en_13_wd),
    .d      (hw2reg.dio_pad_attr[13].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_13_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[13].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_13_od_en_13_qs)
  );
  assign reg2hw.dio_pad_attr[13].od_en.qe = dio_pad_attr_13_qe;

  //   F[slew_rate_13]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_13_slew_rate_13 (
    .re     (dio_pad_attr_13_re),
    .we     (dio_pad_attr_13_gated_we),
    .wd     (dio_pad_attr_13_slew_rate_13_wd),
    .d      (hw2reg.dio_pad_attr[13].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_13_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[13].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_13_slew_rate_13_qs)
  );
  assign reg2hw.dio_pad_attr[13].slew_rate.qe = dio_pad_attr_13_qe;

  //   F[drive_strength_13]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_13_drive_strength_13 (
    .re     (dio_pad_attr_13_re),
    .we     (dio_pad_attr_13_gated_we),
    .wd     (dio_pad_attr_13_drive_strength_13_wd),
    .d      (hw2reg.dio_pad_attr[13].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_13_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[13].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_13_drive_strength_13_qs)
  );
  assign reg2hw.dio_pad_attr[13].drive_strength.qe = dio_pad_attr_13_qe;


  // Subregister 14 of Multireg dio_pad_attr
  // R[dio_pad_attr_14]: V(True)
  logic dio_pad_attr_14_qe;
  logic [8:0] dio_pad_attr_14_flds_we;
  assign dio_pad_attr_14_qe = &dio_pad_attr_14_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_14_gated_we;
  assign dio_pad_attr_14_gated_we = dio_pad_attr_14_we & dio_pad_attr_regwen_14_qs;
  //   F[invert_14]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_14_invert_14 (
    .re     (dio_pad_attr_14_re),
    .we     (dio_pad_attr_14_gated_we),
    .wd     (dio_pad_attr_14_invert_14_wd),
    .d      (hw2reg.dio_pad_attr[14].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_14_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[14].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_14_invert_14_qs)
  );
  assign reg2hw.dio_pad_attr[14].invert.qe = dio_pad_attr_14_qe;

  //   F[virtual_od_en_14]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_14_virtual_od_en_14 (
    .re     (dio_pad_attr_14_re),
    .we     (dio_pad_attr_14_gated_we),
    .wd     (dio_pad_attr_14_virtual_od_en_14_wd),
    .d      (hw2reg.dio_pad_attr[14].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_14_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[14].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_14_virtual_od_en_14_qs)
  );
  assign reg2hw.dio_pad_attr[14].virtual_od_en.qe = dio_pad_attr_14_qe;

  //   F[pull_en_14]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_14_pull_en_14 (
    .re     (dio_pad_attr_14_re),
    .we     (dio_pad_attr_14_gated_we),
    .wd     (dio_pad_attr_14_pull_en_14_wd),
    .d      (hw2reg.dio_pad_attr[14].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_14_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[14].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_14_pull_en_14_qs)
  );
  assign reg2hw.dio_pad_attr[14].pull_en.qe = dio_pad_attr_14_qe;

  //   F[pull_select_14]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_14_pull_select_14 (
    .re     (dio_pad_attr_14_re),
    .we     (dio_pad_attr_14_gated_we),
    .wd     (dio_pad_attr_14_pull_select_14_wd),
    .d      (hw2reg.dio_pad_attr[14].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_14_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[14].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_14_pull_select_14_qs)
  );
  assign reg2hw.dio_pad_attr[14].pull_select.qe = dio_pad_attr_14_qe;

  //   F[keeper_en_14]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_14_keeper_en_14 (
    .re     (dio_pad_attr_14_re),
    .we     (dio_pad_attr_14_gated_we),
    .wd     (dio_pad_attr_14_keeper_en_14_wd),
    .d      (hw2reg.dio_pad_attr[14].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_14_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[14].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_14_keeper_en_14_qs)
  );
  assign reg2hw.dio_pad_attr[14].keeper_en.qe = dio_pad_attr_14_qe;

  //   F[schmitt_en_14]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_14_schmitt_en_14 (
    .re     (dio_pad_attr_14_re),
    .we     (dio_pad_attr_14_gated_we),
    .wd     (dio_pad_attr_14_schmitt_en_14_wd),
    .d      (hw2reg.dio_pad_attr[14].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_14_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[14].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_14_schmitt_en_14_qs)
  );
  assign reg2hw.dio_pad_attr[14].schmitt_en.qe = dio_pad_attr_14_qe;

  //   F[od_en_14]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_14_od_en_14 (
    .re     (dio_pad_attr_14_re),
    .we     (dio_pad_attr_14_gated_we),
    .wd     (dio_pad_attr_14_od_en_14_wd),
    .d      (hw2reg.dio_pad_attr[14].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_14_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[14].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_14_od_en_14_qs)
  );
  assign reg2hw.dio_pad_attr[14].od_en.qe = dio_pad_attr_14_qe;

  //   F[slew_rate_14]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_14_slew_rate_14 (
    .re     (dio_pad_attr_14_re),
    .we     (dio_pad_attr_14_gated_we),
    .wd     (dio_pad_attr_14_slew_rate_14_wd),
    .d      (hw2reg.dio_pad_attr[14].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_14_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[14].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_14_slew_rate_14_qs)
  );
  assign reg2hw.dio_pad_attr[14].slew_rate.qe = dio_pad_attr_14_qe;

  //   F[drive_strength_14]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_14_drive_strength_14 (
    .re     (dio_pad_attr_14_re),
    .we     (dio_pad_attr_14_gated_we),
    .wd     (dio_pad_attr_14_drive_strength_14_wd),
    .d      (hw2reg.dio_pad_attr[14].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_14_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[14].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_14_drive_strength_14_qs)
  );
  assign reg2hw.dio_pad_attr[14].drive_strength.qe = dio_pad_attr_14_qe;


  // Subregister 15 of Multireg dio_pad_attr
  // R[dio_pad_attr_15]: V(True)
  logic dio_pad_attr_15_qe;
  logic [8:0] dio_pad_attr_15_flds_we;
  assign dio_pad_attr_15_qe = &dio_pad_attr_15_flds_we;
  // Create REGWEN-gated WE signal
  logic dio_pad_attr_15_gated_we;
  assign dio_pad_attr_15_gated_we = dio_pad_attr_15_we & dio_pad_attr_regwen_15_qs;
  //   F[invert_15]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_15_invert_15 (
    .re     (dio_pad_attr_15_re),
    .we     (dio_pad_attr_15_gated_we),
    .wd     (dio_pad_attr_15_invert_15_wd),
    .d      (hw2reg.dio_pad_attr[15].invert.d),
    .qre    (),
    .qe     (dio_pad_attr_15_flds_we[0]),
    .q      (reg2hw.dio_pad_attr[15].invert.q),
    .ds     (),
    .qs     (dio_pad_attr_15_invert_15_qs)
  );
  assign reg2hw.dio_pad_attr[15].invert.qe = dio_pad_attr_15_qe;

  //   F[virtual_od_en_15]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_15_virtual_od_en_15 (
    .re     (dio_pad_attr_15_re),
    .we     (dio_pad_attr_15_gated_we),
    .wd     (dio_pad_attr_15_virtual_od_en_15_wd),
    .d      (hw2reg.dio_pad_attr[15].virtual_od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_15_flds_we[1]),
    .q      (reg2hw.dio_pad_attr[15].virtual_od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_15_virtual_od_en_15_qs)
  );
  assign reg2hw.dio_pad_attr[15].virtual_od_en.qe = dio_pad_attr_15_qe;

  //   F[pull_en_15]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_15_pull_en_15 (
    .re     (dio_pad_attr_15_re),
    .we     (dio_pad_attr_15_gated_we),
    .wd     (dio_pad_attr_15_pull_en_15_wd),
    .d      (hw2reg.dio_pad_attr[15].pull_en.d),
    .qre    (),
    .qe     (dio_pad_attr_15_flds_we[2]),
    .q      (reg2hw.dio_pad_attr[15].pull_en.q),
    .ds     (),
    .qs     (dio_pad_attr_15_pull_en_15_qs)
  );
  assign reg2hw.dio_pad_attr[15].pull_en.qe = dio_pad_attr_15_qe;

  //   F[pull_select_15]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_15_pull_select_15 (
    .re     (dio_pad_attr_15_re),
    .we     (dio_pad_attr_15_gated_we),
    .wd     (dio_pad_attr_15_pull_select_15_wd),
    .d      (hw2reg.dio_pad_attr[15].pull_select.d),
    .qre    (),
    .qe     (dio_pad_attr_15_flds_we[3]),
    .q      (reg2hw.dio_pad_attr[15].pull_select.q),
    .ds     (),
    .qs     (dio_pad_attr_15_pull_select_15_qs)
  );
  assign reg2hw.dio_pad_attr[15].pull_select.qe = dio_pad_attr_15_qe;

  //   F[keeper_en_15]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_15_keeper_en_15 (
    .re     (dio_pad_attr_15_re),
    .we     (dio_pad_attr_15_gated_we),
    .wd     (dio_pad_attr_15_keeper_en_15_wd),
    .d      (hw2reg.dio_pad_attr[15].keeper_en.d),
    .qre    (),
    .qe     (dio_pad_attr_15_flds_we[4]),
    .q      (reg2hw.dio_pad_attr[15].keeper_en.q),
    .ds     (),
    .qs     (dio_pad_attr_15_keeper_en_15_qs)
  );
  assign reg2hw.dio_pad_attr[15].keeper_en.qe = dio_pad_attr_15_qe;

  //   F[schmitt_en_15]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_15_schmitt_en_15 (
    .re     (dio_pad_attr_15_re),
    .we     (dio_pad_attr_15_gated_we),
    .wd     (dio_pad_attr_15_schmitt_en_15_wd),
    .d      (hw2reg.dio_pad_attr[15].schmitt_en.d),
    .qre    (),
    .qe     (dio_pad_attr_15_flds_we[5]),
    .q      (reg2hw.dio_pad_attr[15].schmitt_en.q),
    .ds     (),
    .qs     (dio_pad_attr_15_schmitt_en_15_qs)
  );
  assign reg2hw.dio_pad_attr[15].schmitt_en.qe = dio_pad_attr_15_qe;

  //   F[od_en_15]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_dio_pad_attr_15_od_en_15 (
    .re     (dio_pad_attr_15_re),
    .we     (dio_pad_attr_15_gated_we),
    .wd     (dio_pad_attr_15_od_en_15_wd),
    .d      (hw2reg.dio_pad_attr[15].od_en.d),
    .qre    (),
    .qe     (dio_pad_attr_15_flds_we[6]),
    .q      (reg2hw.dio_pad_attr[15].od_en.q),
    .ds     (),
    .qs     (dio_pad_attr_15_od_en_15_qs)
  );
  assign reg2hw.dio_pad_attr[15].od_en.qe = dio_pad_attr_15_qe;

  //   F[slew_rate_15]: 17:16
  prim_subreg_ext #(
    .DW    (2)
  ) u_dio_pad_attr_15_slew_rate_15 (
    .re     (dio_pad_attr_15_re),
    .we     (dio_pad_attr_15_gated_we),
    .wd     (dio_pad_attr_15_slew_rate_15_wd),
    .d      (hw2reg.dio_pad_attr[15].slew_rate.d),
    .qre    (),
    .qe     (dio_pad_attr_15_flds_we[7]),
    .q      (reg2hw.dio_pad_attr[15].slew_rate.q),
    .ds     (),
    .qs     (dio_pad_attr_15_slew_rate_15_qs)
  );
  assign reg2hw.dio_pad_attr[15].slew_rate.qe = dio_pad_attr_15_qe;

  //   F[drive_strength_15]: 23:20
  prim_subreg_ext #(
    .DW    (4)
  ) u_dio_pad_attr_15_drive_strength_15 (
    .re     (dio_pad_attr_15_re),
    .we     (dio_pad_attr_15_gated_we),
    .wd     (dio_pad_attr_15_drive_strength_15_wd),
    .d      (hw2reg.dio_pad_attr[15].drive_strength.d),
    .qre    (),
    .qe     (dio_pad_attr_15_flds_we[8]),
    .q      (reg2hw.dio_pad_attr[15].drive_strength.q),
    .ds     (),
    .qs     (dio_pad_attr_15_drive_strength_15_qs)
  );
  assign reg2hw.dio_pad_attr[15].drive_strength.qe = dio_pad_attr_15_qe;


  // Subregister 0 of Multireg mio_pad_sleep_status
  // R[mio_pad_sleep_status]: V(False)
  //   F[en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_0_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[0].de),
    .d      (hw2reg.mio_pad_sleep_status[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_0_qs)
  );

  //   F[en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_1_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[1].de),
    .d      (hw2reg.mio_pad_sleep_status[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_1_qs)
  );

  //   F[en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_2_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[2].de),
    .d      (hw2reg.mio_pad_sleep_status[2].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_2_qs)
  );

  //   F[en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_3_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[3].de),
    .d      (hw2reg.mio_pad_sleep_status[3].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_3_qs)
  );

  //   F[en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_4_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[4].de),
    .d      (hw2reg.mio_pad_sleep_status[4].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_4_qs)
  );

  //   F[en_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_5_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[5].de),
    .d      (hw2reg.mio_pad_sleep_status[5].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_5_qs)
  );

  //   F[en_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_6_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[6].de),
    .d      (hw2reg.mio_pad_sleep_status[6].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_6_qs)
  );

  //   F[en_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_7_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[7].de),
    .d      (hw2reg.mio_pad_sleep_status[7].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_7_qs)
  );

  //   F[en_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_8_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[8].de),
    .d      (hw2reg.mio_pad_sleep_status[8].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_8_qs)
  );

  //   F[en_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_9_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[9].de),
    .d      (hw2reg.mio_pad_sleep_status[9].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_9_qs)
  );

  //   F[en_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_10_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[10].de),
    .d      (hw2reg.mio_pad_sleep_status[10].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_10_qs)
  );

  //   F[en_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_11_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[11].de),
    .d      (hw2reg.mio_pad_sleep_status[11].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_11_qs)
  );

  //   F[en_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_12_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[12].de),
    .d      (hw2reg.mio_pad_sleep_status[12].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_12_qs)
  );

  //   F[en_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_13_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[13].de),
    .d      (hw2reg.mio_pad_sleep_status[13].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_13_qs)
  );

  //   F[en_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_14_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[14].de),
    .d      (hw2reg.mio_pad_sleep_status[14].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_14_qs)
  );

  //   F[en_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_15_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[15].de),
    .d      (hw2reg.mio_pad_sleep_status[15].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_15_qs)
  );

  //   F[en_16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_16_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[16].de),
    .d      (hw2reg.mio_pad_sleep_status[16].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_16_qs)
  );

  //   F[en_17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_17_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[17].de),
    .d      (hw2reg.mio_pad_sleep_status[17].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_17_qs)
  );

  //   F[en_18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_18_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[18].de),
    .d      (hw2reg.mio_pad_sleep_status[18].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_18_qs)
  );

  //   F[en_19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_19_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[19].de),
    .d      (hw2reg.mio_pad_sleep_status[19].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_19_qs)
  );

  //   F[en_20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_20_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[20].de),
    .d      (hw2reg.mio_pad_sleep_status[20].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_20_qs)
  );

  //   F[en_21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_21_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[21].de),
    .d      (hw2reg.mio_pad_sleep_status[21].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_21_qs)
  );

  //   F[en_22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_22_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[22].de),
    .d      (hw2reg.mio_pad_sleep_status[22].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_22_qs)
  );

  //   F[en_23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_23_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[23].de),
    .d      (hw2reg.mio_pad_sleep_status[23].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_23_qs)
  );

  //   F[en_24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_24_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[24].de),
    .d      (hw2reg.mio_pad_sleep_status[24].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_24_qs)
  );

  //   F[en_25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_25_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[25].de),
    .d      (hw2reg.mio_pad_sleep_status[25].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_25_qs)
  );

  //   F[en_26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_26_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[26].de),
    .d      (hw2reg.mio_pad_sleep_status[26].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_26_qs)
  );

  //   F[en_27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_27_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[27].de),
    .d      (hw2reg.mio_pad_sleep_status[27].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_27_qs)
  );

  //   F[en_28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_28_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[28].de),
    .d      (hw2reg.mio_pad_sleep_status[28].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_28_qs)
  );

  //   F[en_29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_29_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[29].de),
    .d      (hw2reg.mio_pad_sleep_status[29].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_29_qs)
  );

  //   F[en_30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_30_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[30].de),
    .d      (hw2reg.mio_pad_sleep_status[30].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_30_qs)
  );

  //   F[en_31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_status_en_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_status_we),
    .wd     (mio_pad_sleep_status_en_31_wd),

    // from internal hardware
    .de     (hw2reg.mio_pad_sleep_status[31].de),
    .d      (hw2reg.mio_pad_sleep_status[31].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_status[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_status_en_31_qs)
  );


  // Subregister 0 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_0_we),
    .wd     (mio_pad_sleep_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_0_qs)
  );


  // Subregister 1 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_1_we),
    .wd     (mio_pad_sleep_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_1_qs)
  );


  // Subregister 2 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_2_we),
    .wd     (mio_pad_sleep_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_2_qs)
  );


  // Subregister 3 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_3_we),
    .wd     (mio_pad_sleep_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_3_qs)
  );


  // Subregister 4 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_4_we),
    .wd     (mio_pad_sleep_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_4_qs)
  );


  // Subregister 5 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_5_we),
    .wd     (mio_pad_sleep_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_5_qs)
  );


  // Subregister 6 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_6_we),
    .wd     (mio_pad_sleep_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_6_qs)
  );


  // Subregister 7 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_7_we),
    .wd     (mio_pad_sleep_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_7_qs)
  );


  // Subregister 8 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_8]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_8_we),
    .wd     (mio_pad_sleep_regwen_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_8_qs)
  );


  // Subregister 9 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_9]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_9_we),
    .wd     (mio_pad_sleep_regwen_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_9_qs)
  );


  // Subregister 10 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_10]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_10_we),
    .wd     (mio_pad_sleep_regwen_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_10_qs)
  );


  // Subregister 11 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_11]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_11_we),
    .wd     (mio_pad_sleep_regwen_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_11_qs)
  );


  // Subregister 12 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_12]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_12_we),
    .wd     (mio_pad_sleep_regwen_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_12_qs)
  );


  // Subregister 13 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_13]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_13_we),
    .wd     (mio_pad_sleep_regwen_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_13_qs)
  );


  // Subregister 14 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_14]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_14_we),
    .wd     (mio_pad_sleep_regwen_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_14_qs)
  );


  // Subregister 15 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_15]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_15_we),
    .wd     (mio_pad_sleep_regwen_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_15_qs)
  );


  // Subregister 16 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_16]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_16_we),
    .wd     (mio_pad_sleep_regwen_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_16_qs)
  );


  // Subregister 17 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_17]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_17_we),
    .wd     (mio_pad_sleep_regwen_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_17_qs)
  );


  // Subregister 18 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_18]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_18_we),
    .wd     (mio_pad_sleep_regwen_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_18_qs)
  );


  // Subregister 19 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_19]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_19_we),
    .wd     (mio_pad_sleep_regwen_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_19_qs)
  );


  // Subregister 20 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_20]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_20_we),
    .wd     (mio_pad_sleep_regwen_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_20_qs)
  );


  // Subregister 21 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_21]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_21_we),
    .wd     (mio_pad_sleep_regwen_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_21_qs)
  );


  // Subregister 22 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_22]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_22_we),
    .wd     (mio_pad_sleep_regwen_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_22_qs)
  );


  // Subregister 23 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_23]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_23_we),
    .wd     (mio_pad_sleep_regwen_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_23_qs)
  );


  // Subregister 24 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_24]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_24_we),
    .wd     (mio_pad_sleep_regwen_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_24_qs)
  );


  // Subregister 25 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_25]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_25_we),
    .wd     (mio_pad_sleep_regwen_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_25_qs)
  );


  // Subregister 26 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_26]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_26_we),
    .wd     (mio_pad_sleep_regwen_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_26_qs)
  );


  // Subregister 27 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_27]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_27_we),
    .wd     (mio_pad_sleep_regwen_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_27_qs)
  );


  // Subregister 28 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_28]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_28_we),
    .wd     (mio_pad_sleep_regwen_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_28_qs)
  );


  // Subregister 29 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_29]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_29_we),
    .wd     (mio_pad_sleep_regwen_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_29_qs)
  );


  // Subregister 30 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_30]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_30_we),
    .wd     (mio_pad_sleep_regwen_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_30_qs)
  );


  // Subregister 31 of Multireg mio_pad_sleep_regwen
  // R[mio_pad_sleep_regwen_31]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_mio_pad_sleep_regwen_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_regwen_31_we),
    .wd     (mio_pad_sleep_regwen_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_regwen_31_qs)
  );


  // Subregister 0 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_0]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_0_gated_we;
  assign mio_pad_sleep_en_0_gated_we = mio_pad_sleep_en_0_we & mio_pad_sleep_regwen_0_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_0_gated_we),
    .wd     (mio_pad_sleep_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_0_qs)
  );


  // Subregister 1 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_1]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_1_gated_we;
  assign mio_pad_sleep_en_1_gated_we = mio_pad_sleep_en_1_we & mio_pad_sleep_regwen_1_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_1_gated_we),
    .wd     (mio_pad_sleep_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_1_qs)
  );


  // Subregister 2 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_2]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_2_gated_we;
  assign mio_pad_sleep_en_2_gated_we = mio_pad_sleep_en_2_we & mio_pad_sleep_regwen_2_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_2_gated_we),
    .wd     (mio_pad_sleep_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_2_qs)
  );


  // Subregister 3 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_3]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_3_gated_we;
  assign mio_pad_sleep_en_3_gated_we = mio_pad_sleep_en_3_we & mio_pad_sleep_regwen_3_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_3_gated_we),
    .wd     (mio_pad_sleep_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_3_qs)
  );


  // Subregister 4 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_4]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_4_gated_we;
  assign mio_pad_sleep_en_4_gated_we = mio_pad_sleep_en_4_we & mio_pad_sleep_regwen_4_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_4_gated_we),
    .wd     (mio_pad_sleep_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_4_qs)
  );


  // Subregister 5 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_5]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_5_gated_we;
  assign mio_pad_sleep_en_5_gated_we = mio_pad_sleep_en_5_we & mio_pad_sleep_regwen_5_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_5_gated_we),
    .wd     (mio_pad_sleep_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_5_qs)
  );


  // Subregister 6 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_6]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_6_gated_we;
  assign mio_pad_sleep_en_6_gated_we = mio_pad_sleep_en_6_we & mio_pad_sleep_regwen_6_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_6_gated_we),
    .wd     (mio_pad_sleep_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_6_qs)
  );


  // Subregister 7 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_7]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_7_gated_we;
  assign mio_pad_sleep_en_7_gated_we = mio_pad_sleep_en_7_we & mio_pad_sleep_regwen_7_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_7_gated_we),
    .wd     (mio_pad_sleep_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_7_qs)
  );


  // Subregister 8 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_8]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_8_gated_we;
  assign mio_pad_sleep_en_8_gated_we = mio_pad_sleep_en_8_we & mio_pad_sleep_regwen_8_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_8_gated_we),
    .wd     (mio_pad_sleep_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_8_qs)
  );


  // Subregister 9 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_9]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_9_gated_we;
  assign mio_pad_sleep_en_9_gated_we = mio_pad_sleep_en_9_we & mio_pad_sleep_regwen_9_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_9_gated_we),
    .wd     (mio_pad_sleep_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_9_qs)
  );


  // Subregister 10 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_10]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_10_gated_we;
  assign mio_pad_sleep_en_10_gated_we = mio_pad_sleep_en_10_we & mio_pad_sleep_regwen_10_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_10_gated_we),
    .wd     (mio_pad_sleep_en_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_10_qs)
  );


  // Subregister 11 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_11]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_11_gated_we;
  assign mio_pad_sleep_en_11_gated_we = mio_pad_sleep_en_11_we & mio_pad_sleep_regwen_11_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_11_gated_we),
    .wd     (mio_pad_sleep_en_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_11_qs)
  );


  // Subregister 12 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_12]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_12_gated_we;
  assign mio_pad_sleep_en_12_gated_we = mio_pad_sleep_en_12_we & mio_pad_sleep_regwen_12_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_12_gated_we),
    .wd     (mio_pad_sleep_en_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_12_qs)
  );


  // Subregister 13 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_13]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_13_gated_we;
  assign mio_pad_sleep_en_13_gated_we = mio_pad_sleep_en_13_we & mio_pad_sleep_regwen_13_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_13_gated_we),
    .wd     (mio_pad_sleep_en_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_13_qs)
  );


  // Subregister 14 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_14]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_14_gated_we;
  assign mio_pad_sleep_en_14_gated_we = mio_pad_sleep_en_14_we & mio_pad_sleep_regwen_14_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_14_gated_we),
    .wd     (mio_pad_sleep_en_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_14_qs)
  );


  // Subregister 15 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_15]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_15_gated_we;
  assign mio_pad_sleep_en_15_gated_we = mio_pad_sleep_en_15_we & mio_pad_sleep_regwen_15_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_15_gated_we),
    .wd     (mio_pad_sleep_en_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_15_qs)
  );


  // Subregister 16 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_16]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_16_gated_we;
  assign mio_pad_sleep_en_16_gated_we = mio_pad_sleep_en_16_we & mio_pad_sleep_regwen_16_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_16_gated_we),
    .wd     (mio_pad_sleep_en_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_16_qs)
  );


  // Subregister 17 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_17]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_17_gated_we;
  assign mio_pad_sleep_en_17_gated_we = mio_pad_sleep_en_17_we & mio_pad_sleep_regwen_17_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_17_gated_we),
    .wd     (mio_pad_sleep_en_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_17_qs)
  );


  // Subregister 18 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_18]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_18_gated_we;
  assign mio_pad_sleep_en_18_gated_we = mio_pad_sleep_en_18_we & mio_pad_sleep_regwen_18_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_18_gated_we),
    .wd     (mio_pad_sleep_en_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_18_qs)
  );


  // Subregister 19 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_19]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_19_gated_we;
  assign mio_pad_sleep_en_19_gated_we = mio_pad_sleep_en_19_we & mio_pad_sleep_regwen_19_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_19_gated_we),
    .wd     (mio_pad_sleep_en_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_19_qs)
  );


  // Subregister 20 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_20]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_20_gated_we;
  assign mio_pad_sleep_en_20_gated_we = mio_pad_sleep_en_20_we & mio_pad_sleep_regwen_20_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_20_gated_we),
    .wd     (mio_pad_sleep_en_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_20_qs)
  );


  // Subregister 21 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_21]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_21_gated_we;
  assign mio_pad_sleep_en_21_gated_we = mio_pad_sleep_en_21_we & mio_pad_sleep_regwen_21_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_21_gated_we),
    .wd     (mio_pad_sleep_en_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_21_qs)
  );


  // Subregister 22 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_22]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_22_gated_we;
  assign mio_pad_sleep_en_22_gated_we = mio_pad_sleep_en_22_we & mio_pad_sleep_regwen_22_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_22_gated_we),
    .wd     (mio_pad_sleep_en_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_22_qs)
  );


  // Subregister 23 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_23]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_23_gated_we;
  assign mio_pad_sleep_en_23_gated_we = mio_pad_sleep_en_23_we & mio_pad_sleep_regwen_23_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_23_gated_we),
    .wd     (mio_pad_sleep_en_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_23_qs)
  );


  // Subregister 24 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_24]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_24_gated_we;
  assign mio_pad_sleep_en_24_gated_we = mio_pad_sleep_en_24_we & mio_pad_sleep_regwen_24_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_24_gated_we),
    .wd     (mio_pad_sleep_en_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_24_qs)
  );


  // Subregister 25 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_25]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_25_gated_we;
  assign mio_pad_sleep_en_25_gated_we = mio_pad_sleep_en_25_we & mio_pad_sleep_regwen_25_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_25_gated_we),
    .wd     (mio_pad_sleep_en_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_25_qs)
  );


  // Subregister 26 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_26]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_26_gated_we;
  assign mio_pad_sleep_en_26_gated_we = mio_pad_sleep_en_26_we & mio_pad_sleep_regwen_26_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_26_gated_we),
    .wd     (mio_pad_sleep_en_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_26_qs)
  );


  // Subregister 27 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_27]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_27_gated_we;
  assign mio_pad_sleep_en_27_gated_we = mio_pad_sleep_en_27_we & mio_pad_sleep_regwen_27_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_27_gated_we),
    .wd     (mio_pad_sleep_en_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_27_qs)
  );


  // Subregister 28 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_28]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_28_gated_we;
  assign mio_pad_sleep_en_28_gated_we = mio_pad_sleep_en_28_we & mio_pad_sleep_regwen_28_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_28_gated_we),
    .wd     (mio_pad_sleep_en_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_28_qs)
  );


  // Subregister 29 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_29]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_29_gated_we;
  assign mio_pad_sleep_en_29_gated_we = mio_pad_sleep_en_29_we & mio_pad_sleep_regwen_29_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_29_gated_we),
    .wd     (mio_pad_sleep_en_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_29_qs)
  );


  // Subregister 30 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_30]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_30_gated_we;
  assign mio_pad_sleep_en_30_gated_we = mio_pad_sleep_en_30_we & mio_pad_sleep_regwen_30_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_30_gated_we),
    .wd     (mio_pad_sleep_en_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_30_qs)
  );


  // Subregister 31 of Multireg mio_pad_sleep_en
  // R[mio_pad_sleep_en_31]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_en_31_gated_we;
  assign mio_pad_sleep_en_31_gated_we = mio_pad_sleep_en_31_we & mio_pad_sleep_regwen_31_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mio_pad_sleep_en_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_en_31_gated_we),
    .wd     (mio_pad_sleep_en_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_en[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_en_31_qs)
  );


  // Subregister 0 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_0]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_0_gated_we;
  assign mio_pad_sleep_mode_0_gated_we = mio_pad_sleep_mode_0_we & mio_pad_sleep_regwen_0_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_0_gated_we),
    .wd     (mio_pad_sleep_mode_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_0_qs)
  );


  // Subregister 1 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_1]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_1_gated_we;
  assign mio_pad_sleep_mode_1_gated_we = mio_pad_sleep_mode_1_we & mio_pad_sleep_regwen_1_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_1_gated_we),
    .wd     (mio_pad_sleep_mode_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_1_qs)
  );


  // Subregister 2 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_2]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_2_gated_we;
  assign mio_pad_sleep_mode_2_gated_we = mio_pad_sleep_mode_2_we & mio_pad_sleep_regwen_2_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_2_gated_we),
    .wd     (mio_pad_sleep_mode_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_2_qs)
  );


  // Subregister 3 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_3]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_3_gated_we;
  assign mio_pad_sleep_mode_3_gated_we = mio_pad_sleep_mode_3_we & mio_pad_sleep_regwen_3_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_3_gated_we),
    .wd     (mio_pad_sleep_mode_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_3_qs)
  );


  // Subregister 4 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_4]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_4_gated_we;
  assign mio_pad_sleep_mode_4_gated_we = mio_pad_sleep_mode_4_we & mio_pad_sleep_regwen_4_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_4_gated_we),
    .wd     (mio_pad_sleep_mode_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_4_qs)
  );


  // Subregister 5 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_5]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_5_gated_we;
  assign mio_pad_sleep_mode_5_gated_we = mio_pad_sleep_mode_5_we & mio_pad_sleep_regwen_5_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_5_gated_we),
    .wd     (mio_pad_sleep_mode_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_5_qs)
  );


  // Subregister 6 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_6]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_6_gated_we;
  assign mio_pad_sleep_mode_6_gated_we = mio_pad_sleep_mode_6_we & mio_pad_sleep_regwen_6_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_6_gated_we),
    .wd     (mio_pad_sleep_mode_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_6_qs)
  );


  // Subregister 7 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_7]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_7_gated_we;
  assign mio_pad_sleep_mode_7_gated_we = mio_pad_sleep_mode_7_we & mio_pad_sleep_regwen_7_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_7_gated_we),
    .wd     (mio_pad_sleep_mode_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_7_qs)
  );


  // Subregister 8 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_8]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_8_gated_we;
  assign mio_pad_sleep_mode_8_gated_we = mio_pad_sleep_mode_8_we & mio_pad_sleep_regwen_8_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_8_gated_we),
    .wd     (mio_pad_sleep_mode_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_8_qs)
  );


  // Subregister 9 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_9]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_9_gated_we;
  assign mio_pad_sleep_mode_9_gated_we = mio_pad_sleep_mode_9_we & mio_pad_sleep_regwen_9_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_9_gated_we),
    .wd     (mio_pad_sleep_mode_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_9_qs)
  );


  // Subregister 10 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_10]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_10_gated_we;
  assign mio_pad_sleep_mode_10_gated_we = mio_pad_sleep_mode_10_we & mio_pad_sleep_regwen_10_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_10_gated_we),
    .wd     (mio_pad_sleep_mode_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_10_qs)
  );


  // Subregister 11 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_11]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_11_gated_we;
  assign mio_pad_sleep_mode_11_gated_we = mio_pad_sleep_mode_11_we & mio_pad_sleep_regwen_11_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_11_gated_we),
    .wd     (mio_pad_sleep_mode_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_11_qs)
  );


  // Subregister 12 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_12]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_12_gated_we;
  assign mio_pad_sleep_mode_12_gated_we = mio_pad_sleep_mode_12_we & mio_pad_sleep_regwen_12_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_12_gated_we),
    .wd     (mio_pad_sleep_mode_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_12_qs)
  );


  // Subregister 13 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_13]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_13_gated_we;
  assign mio_pad_sleep_mode_13_gated_we = mio_pad_sleep_mode_13_we & mio_pad_sleep_regwen_13_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_13_gated_we),
    .wd     (mio_pad_sleep_mode_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_13_qs)
  );


  // Subregister 14 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_14]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_14_gated_we;
  assign mio_pad_sleep_mode_14_gated_we = mio_pad_sleep_mode_14_we & mio_pad_sleep_regwen_14_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_14_gated_we),
    .wd     (mio_pad_sleep_mode_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_14_qs)
  );


  // Subregister 15 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_15]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_15_gated_we;
  assign mio_pad_sleep_mode_15_gated_we = mio_pad_sleep_mode_15_we & mio_pad_sleep_regwen_15_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_15_gated_we),
    .wd     (mio_pad_sleep_mode_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_15_qs)
  );


  // Subregister 16 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_16]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_16_gated_we;
  assign mio_pad_sleep_mode_16_gated_we = mio_pad_sleep_mode_16_we & mio_pad_sleep_regwen_16_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_16 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_16_gated_we),
    .wd     (mio_pad_sleep_mode_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[16].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_16_qs)
  );


  // Subregister 17 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_17]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_17_gated_we;
  assign mio_pad_sleep_mode_17_gated_we = mio_pad_sleep_mode_17_we & mio_pad_sleep_regwen_17_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_17 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_17_gated_we),
    .wd     (mio_pad_sleep_mode_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[17].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_17_qs)
  );


  // Subregister 18 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_18]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_18_gated_we;
  assign mio_pad_sleep_mode_18_gated_we = mio_pad_sleep_mode_18_we & mio_pad_sleep_regwen_18_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_18 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_18_gated_we),
    .wd     (mio_pad_sleep_mode_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[18].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_18_qs)
  );


  // Subregister 19 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_19]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_19_gated_we;
  assign mio_pad_sleep_mode_19_gated_we = mio_pad_sleep_mode_19_we & mio_pad_sleep_regwen_19_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_19 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_19_gated_we),
    .wd     (mio_pad_sleep_mode_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[19].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_19_qs)
  );


  // Subregister 20 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_20]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_20_gated_we;
  assign mio_pad_sleep_mode_20_gated_we = mio_pad_sleep_mode_20_we & mio_pad_sleep_regwen_20_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_20 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_20_gated_we),
    .wd     (mio_pad_sleep_mode_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[20].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_20_qs)
  );


  // Subregister 21 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_21]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_21_gated_we;
  assign mio_pad_sleep_mode_21_gated_we = mio_pad_sleep_mode_21_we & mio_pad_sleep_regwen_21_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_21 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_21_gated_we),
    .wd     (mio_pad_sleep_mode_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[21].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_21_qs)
  );


  // Subregister 22 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_22]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_22_gated_we;
  assign mio_pad_sleep_mode_22_gated_we = mio_pad_sleep_mode_22_we & mio_pad_sleep_regwen_22_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_22 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_22_gated_we),
    .wd     (mio_pad_sleep_mode_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[22].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_22_qs)
  );


  // Subregister 23 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_23]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_23_gated_we;
  assign mio_pad_sleep_mode_23_gated_we = mio_pad_sleep_mode_23_we & mio_pad_sleep_regwen_23_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_23 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_23_gated_we),
    .wd     (mio_pad_sleep_mode_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[23].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_23_qs)
  );


  // Subregister 24 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_24]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_24_gated_we;
  assign mio_pad_sleep_mode_24_gated_we = mio_pad_sleep_mode_24_we & mio_pad_sleep_regwen_24_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_24 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_24_gated_we),
    .wd     (mio_pad_sleep_mode_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[24].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_24_qs)
  );


  // Subregister 25 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_25]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_25_gated_we;
  assign mio_pad_sleep_mode_25_gated_we = mio_pad_sleep_mode_25_we & mio_pad_sleep_regwen_25_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_25 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_25_gated_we),
    .wd     (mio_pad_sleep_mode_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[25].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_25_qs)
  );


  // Subregister 26 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_26]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_26_gated_we;
  assign mio_pad_sleep_mode_26_gated_we = mio_pad_sleep_mode_26_we & mio_pad_sleep_regwen_26_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_26 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_26_gated_we),
    .wd     (mio_pad_sleep_mode_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[26].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_26_qs)
  );


  // Subregister 27 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_27]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_27_gated_we;
  assign mio_pad_sleep_mode_27_gated_we = mio_pad_sleep_mode_27_we & mio_pad_sleep_regwen_27_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_27 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_27_gated_we),
    .wd     (mio_pad_sleep_mode_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[27].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_27_qs)
  );


  // Subregister 28 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_28]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_28_gated_we;
  assign mio_pad_sleep_mode_28_gated_we = mio_pad_sleep_mode_28_we & mio_pad_sleep_regwen_28_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_28 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_28_gated_we),
    .wd     (mio_pad_sleep_mode_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[28].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_28_qs)
  );


  // Subregister 29 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_29]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_29_gated_we;
  assign mio_pad_sleep_mode_29_gated_we = mio_pad_sleep_mode_29_we & mio_pad_sleep_regwen_29_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_29 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_29_gated_we),
    .wd     (mio_pad_sleep_mode_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[29].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_29_qs)
  );


  // Subregister 30 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_30]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_30_gated_we;
  assign mio_pad_sleep_mode_30_gated_we = mio_pad_sleep_mode_30_we & mio_pad_sleep_regwen_30_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_30 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_30_gated_we),
    .wd     (mio_pad_sleep_mode_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[30].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_30_qs)
  );


  // Subregister 31 of Multireg mio_pad_sleep_mode
  // R[mio_pad_sleep_mode_31]: V(False)
  // Create REGWEN-gated WE signal
  logic mio_pad_sleep_mode_31_gated_we;
  assign mio_pad_sleep_mode_31_gated_we = mio_pad_sleep_mode_31_we & mio_pad_sleep_regwen_31_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_mio_pad_sleep_mode_31 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (mio_pad_sleep_mode_31_gated_we),
    .wd     (mio_pad_sleep_mode_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pad_sleep_mode[31].q),
    .ds     (),

    // to register interface (read)
    .qs     (mio_pad_sleep_mode_31_qs)
  );


  // Subregister 0 of Multireg dio_pad_sleep_status
  // R[dio_pad_sleep_status]: V(False)
  //   F[en_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_0_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[0].de),
    .d      (hw2reg.dio_pad_sleep_status[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_0_qs)
  );

  //   F[en_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_1_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[1].de),
    .d      (hw2reg.dio_pad_sleep_status[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_1_qs)
  );

  //   F[en_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_2_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[2].de),
    .d      (hw2reg.dio_pad_sleep_status[2].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_2_qs)
  );

  //   F[en_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_3_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[3].de),
    .d      (hw2reg.dio_pad_sleep_status[3].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_3_qs)
  );

  //   F[en_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_4_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[4].de),
    .d      (hw2reg.dio_pad_sleep_status[4].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_4_qs)
  );

  //   F[en_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_5_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[5].de),
    .d      (hw2reg.dio_pad_sleep_status[5].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_5_qs)
  );

  //   F[en_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_6_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[6].de),
    .d      (hw2reg.dio_pad_sleep_status[6].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_6_qs)
  );

  //   F[en_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_7_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[7].de),
    .d      (hw2reg.dio_pad_sleep_status[7].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_7_qs)
  );

  //   F[en_8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_8_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[8].de),
    .d      (hw2reg.dio_pad_sleep_status[8].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_8_qs)
  );

  //   F[en_9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_9_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[9].de),
    .d      (hw2reg.dio_pad_sleep_status[9].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_9_qs)
  );

  //   F[en_10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_10_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[10].de),
    .d      (hw2reg.dio_pad_sleep_status[10].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_10_qs)
  );

  //   F[en_11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_11_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[11].de),
    .d      (hw2reg.dio_pad_sleep_status[11].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_11_qs)
  );

  //   F[en_12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_12_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[12].de),
    .d      (hw2reg.dio_pad_sleep_status[12].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_12_qs)
  );

  //   F[en_13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_13_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[13].de),
    .d      (hw2reg.dio_pad_sleep_status[13].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_13_qs)
  );

  //   F[en_14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_14_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[14].de),
    .d      (hw2reg.dio_pad_sleep_status[14].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_14_qs)
  );

  //   F[en_15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_status_en_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_status_we),
    .wd     (dio_pad_sleep_status_en_15_wd),

    // from internal hardware
    .de     (hw2reg.dio_pad_sleep_status[15].de),
    .d      (hw2reg.dio_pad_sleep_status[15].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_status[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_status_en_15_qs)
  );


  // Subregister 0 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_0_we),
    .wd     (dio_pad_sleep_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_0_qs)
  );


  // Subregister 1 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_1_we),
    .wd     (dio_pad_sleep_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_1_qs)
  );


  // Subregister 2 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_2_we),
    .wd     (dio_pad_sleep_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_2_qs)
  );


  // Subregister 3 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_3_we),
    .wd     (dio_pad_sleep_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_3_qs)
  );


  // Subregister 4 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_4_we),
    .wd     (dio_pad_sleep_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_4_qs)
  );


  // Subregister 5 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_5_we),
    .wd     (dio_pad_sleep_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_5_qs)
  );


  // Subregister 6 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_6_we),
    .wd     (dio_pad_sleep_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_6_qs)
  );


  // Subregister 7 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_7_we),
    .wd     (dio_pad_sleep_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_7_qs)
  );


  // Subregister 8 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_8]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_8_we),
    .wd     (dio_pad_sleep_regwen_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_8_qs)
  );


  // Subregister 9 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_9]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_9_we),
    .wd     (dio_pad_sleep_regwen_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_9_qs)
  );


  // Subregister 10 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_10]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_10_we),
    .wd     (dio_pad_sleep_regwen_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_10_qs)
  );


  // Subregister 11 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_11]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_11_we),
    .wd     (dio_pad_sleep_regwen_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_11_qs)
  );


  // Subregister 12 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_12]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_12_we),
    .wd     (dio_pad_sleep_regwen_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_12_qs)
  );


  // Subregister 13 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_13]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_13_we),
    .wd     (dio_pad_sleep_regwen_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_13_qs)
  );


  // Subregister 14 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_14]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_14_we),
    .wd     (dio_pad_sleep_regwen_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_14_qs)
  );


  // Subregister 15 of Multireg dio_pad_sleep_regwen
  // R[dio_pad_sleep_regwen_15]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_dio_pad_sleep_regwen_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_regwen_15_we),
    .wd     (dio_pad_sleep_regwen_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_regwen_15_qs)
  );


  // Subregister 0 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_0]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_0_gated_we;
  assign dio_pad_sleep_en_0_gated_we = dio_pad_sleep_en_0_we & dio_pad_sleep_regwen_0_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_0_gated_we),
    .wd     (dio_pad_sleep_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_0_qs)
  );


  // Subregister 1 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_1]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_1_gated_we;
  assign dio_pad_sleep_en_1_gated_we = dio_pad_sleep_en_1_we & dio_pad_sleep_regwen_1_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_1_gated_we),
    .wd     (dio_pad_sleep_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_1_qs)
  );


  // Subregister 2 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_2]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_2_gated_we;
  assign dio_pad_sleep_en_2_gated_we = dio_pad_sleep_en_2_we & dio_pad_sleep_regwen_2_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_2_gated_we),
    .wd     (dio_pad_sleep_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_2_qs)
  );


  // Subregister 3 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_3]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_3_gated_we;
  assign dio_pad_sleep_en_3_gated_we = dio_pad_sleep_en_3_we & dio_pad_sleep_regwen_3_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_3_gated_we),
    .wd     (dio_pad_sleep_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_3_qs)
  );


  // Subregister 4 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_4]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_4_gated_we;
  assign dio_pad_sleep_en_4_gated_we = dio_pad_sleep_en_4_we & dio_pad_sleep_regwen_4_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_4_gated_we),
    .wd     (dio_pad_sleep_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_4_qs)
  );


  // Subregister 5 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_5]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_5_gated_we;
  assign dio_pad_sleep_en_5_gated_we = dio_pad_sleep_en_5_we & dio_pad_sleep_regwen_5_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_5_gated_we),
    .wd     (dio_pad_sleep_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_5_qs)
  );


  // Subregister 6 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_6]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_6_gated_we;
  assign dio_pad_sleep_en_6_gated_we = dio_pad_sleep_en_6_we & dio_pad_sleep_regwen_6_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_6_gated_we),
    .wd     (dio_pad_sleep_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_6_qs)
  );


  // Subregister 7 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_7]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_7_gated_we;
  assign dio_pad_sleep_en_7_gated_we = dio_pad_sleep_en_7_we & dio_pad_sleep_regwen_7_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_7_gated_we),
    .wd     (dio_pad_sleep_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_7_qs)
  );


  // Subregister 8 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_8]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_8_gated_we;
  assign dio_pad_sleep_en_8_gated_we = dio_pad_sleep_en_8_we & dio_pad_sleep_regwen_8_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_8_gated_we),
    .wd     (dio_pad_sleep_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_8_qs)
  );


  // Subregister 9 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_9]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_9_gated_we;
  assign dio_pad_sleep_en_9_gated_we = dio_pad_sleep_en_9_we & dio_pad_sleep_regwen_9_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_9_gated_we),
    .wd     (dio_pad_sleep_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_9_qs)
  );


  // Subregister 10 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_10]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_10_gated_we;
  assign dio_pad_sleep_en_10_gated_we = dio_pad_sleep_en_10_we & dio_pad_sleep_regwen_10_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_10_gated_we),
    .wd     (dio_pad_sleep_en_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_10_qs)
  );


  // Subregister 11 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_11]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_11_gated_we;
  assign dio_pad_sleep_en_11_gated_we = dio_pad_sleep_en_11_we & dio_pad_sleep_regwen_11_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_11_gated_we),
    .wd     (dio_pad_sleep_en_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_11_qs)
  );


  // Subregister 12 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_12]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_12_gated_we;
  assign dio_pad_sleep_en_12_gated_we = dio_pad_sleep_en_12_we & dio_pad_sleep_regwen_12_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_12_gated_we),
    .wd     (dio_pad_sleep_en_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_12_qs)
  );


  // Subregister 13 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_13]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_13_gated_we;
  assign dio_pad_sleep_en_13_gated_we = dio_pad_sleep_en_13_we & dio_pad_sleep_regwen_13_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_13_gated_we),
    .wd     (dio_pad_sleep_en_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_13_qs)
  );


  // Subregister 14 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_14]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_14_gated_we;
  assign dio_pad_sleep_en_14_gated_we = dio_pad_sleep_en_14_we & dio_pad_sleep_regwen_14_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_14_gated_we),
    .wd     (dio_pad_sleep_en_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_14_qs)
  );


  // Subregister 15 of Multireg dio_pad_sleep_en
  // R[dio_pad_sleep_en_15]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_en_15_gated_we;
  assign dio_pad_sleep_en_15_gated_we = dio_pad_sleep_en_15_we & dio_pad_sleep_regwen_15_qs;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_dio_pad_sleep_en_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_en_15_gated_we),
    .wd     (dio_pad_sleep_en_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_en[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_en_15_qs)
  );


  // Subregister 0 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_0]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_0_gated_we;
  assign dio_pad_sleep_mode_0_gated_we = dio_pad_sleep_mode_0_we & dio_pad_sleep_regwen_0_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_0_gated_we),
    .wd     (dio_pad_sleep_mode_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_0_qs)
  );


  // Subregister 1 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_1]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_1_gated_we;
  assign dio_pad_sleep_mode_1_gated_we = dio_pad_sleep_mode_1_we & dio_pad_sleep_regwen_1_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_1_gated_we),
    .wd     (dio_pad_sleep_mode_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_1_qs)
  );


  // Subregister 2 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_2]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_2_gated_we;
  assign dio_pad_sleep_mode_2_gated_we = dio_pad_sleep_mode_2_we & dio_pad_sleep_regwen_2_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_2_gated_we),
    .wd     (dio_pad_sleep_mode_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_2_qs)
  );


  // Subregister 3 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_3]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_3_gated_we;
  assign dio_pad_sleep_mode_3_gated_we = dio_pad_sleep_mode_3_we & dio_pad_sleep_regwen_3_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_3_gated_we),
    .wd     (dio_pad_sleep_mode_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_3_qs)
  );


  // Subregister 4 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_4]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_4_gated_we;
  assign dio_pad_sleep_mode_4_gated_we = dio_pad_sleep_mode_4_we & dio_pad_sleep_regwen_4_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_4_gated_we),
    .wd     (dio_pad_sleep_mode_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_4_qs)
  );


  // Subregister 5 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_5]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_5_gated_we;
  assign dio_pad_sleep_mode_5_gated_we = dio_pad_sleep_mode_5_we & dio_pad_sleep_regwen_5_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_5_gated_we),
    .wd     (dio_pad_sleep_mode_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_5_qs)
  );


  // Subregister 6 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_6]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_6_gated_we;
  assign dio_pad_sleep_mode_6_gated_we = dio_pad_sleep_mode_6_we & dio_pad_sleep_regwen_6_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_6_gated_we),
    .wd     (dio_pad_sleep_mode_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_6_qs)
  );


  // Subregister 7 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_7]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_7_gated_we;
  assign dio_pad_sleep_mode_7_gated_we = dio_pad_sleep_mode_7_we & dio_pad_sleep_regwen_7_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_7_gated_we),
    .wd     (dio_pad_sleep_mode_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_7_qs)
  );


  // Subregister 8 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_8]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_8_gated_we;
  assign dio_pad_sleep_mode_8_gated_we = dio_pad_sleep_mode_8_we & dio_pad_sleep_regwen_8_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_8_gated_we),
    .wd     (dio_pad_sleep_mode_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_8_qs)
  );


  // Subregister 9 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_9]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_9_gated_we;
  assign dio_pad_sleep_mode_9_gated_we = dio_pad_sleep_mode_9_we & dio_pad_sleep_regwen_9_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_9_gated_we),
    .wd     (dio_pad_sleep_mode_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_9_qs)
  );


  // Subregister 10 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_10]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_10_gated_we;
  assign dio_pad_sleep_mode_10_gated_we = dio_pad_sleep_mode_10_we & dio_pad_sleep_regwen_10_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_10_gated_we),
    .wd     (dio_pad_sleep_mode_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_10_qs)
  );


  // Subregister 11 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_11]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_11_gated_we;
  assign dio_pad_sleep_mode_11_gated_we = dio_pad_sleep_mode_11_we & dio_pad_sleep_regwen_11_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_11_gated_we),
    .wd     (dio_pad_sleep_mode_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_11_qs)
  );


  // Subregister 12 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_12]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_12_gated_we;
  assign dio_pad_sleep_mode_12_gated_we = dio_pad_sleep_mode_12_we & dio_pad_sleep_regwen_12_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_12_gated_we),
    .wd     (dio_pad_sleep_mode_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_12_qs)
  );


  // Subregister 13 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_13]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_13_gated_we;
  assign dio_pad_sleep_mode_13_gated_we = dio_pad_sleep_mode_13_we & dio_pad_sleep_regwen_13_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_13_gated_we),
    .wd     (dio_pad_sleep_mode_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_13_qs)
  );


  // Subregister 14 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_14]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_14_gated_we;
  assign dio_pad_sleep_mode_14_gated_we = dio_pad_sleep_mode_14_we & dio_pad_sleep_regwen_14_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_14_gated_we),
    .wd     (dio_pad_sleep_mode_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_14_qs)
  );


  // Subregister 15 of Multireg dio_pad_sleep_mode
  // R[dio_pad_sleep_mode_15]: V(False)
  // Create REGWEN-gated WE signal
  logic dio_pad_sleep_mode_15_gated_we;
  assign dio_pad_sleep_mode_15_gated_we = dio_pad_sleep_mode_15_we & dio_pad_sleep_regwen_15_qs;
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h2)
  ) u_dio_pad_sleep_mode_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dio_pad_sleep_mode_15_gated_we),
    .wd     (dio_pad_sleep_mode_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pad_sleep_mode[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (dio_pad_sleep_mode_15_qs)
  );


  // Subregister 0 of Multireg wkup_detector_regwen
  // R[wkup_detector_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_wkup_detector_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_regwen_0_we),
    .wd     (wkup_detector_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_regwen_0_qs)
  );


  // Subregister 1 of Multireg wkup_detector_regwen
  // R[wkup_detector_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_wkup_detector_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_regwen_1_we),
    .wd     (wkup_detector_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_regwen_1_qs)
  );


  // Subregister 2 of Multireg wkup_detector_regwen
  // R[wkup_detector_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_wkup_detector_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_regwen_2_we),
    .wd     (wkup_detector_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_regwen_2_qs)
  );


  // Subregister 3 of Multireg wkup_detector_regwen
  // R[wkup_detector_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_wkup_detector_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_regwen_3_we),
    .wd     (wkup_detector_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_regwen_3_qs)
  );


  // Subregister 4 of Multireg wkup_detector_regwen
  // R[wkup_detector_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_wkup_detector_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_regwen_4_we),
    .wd     (wkup_detector_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_regwen_4_qs)
  );


  // Subregister 5 of Multireg wkup_detector_regwen
  // R[wkup_detector_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_wkup_detector_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_regwen_5_we),
    .wd     (wkup_detector_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_regwen_5_qs)
  );


  // Subregister 6 of Multireg wkup_detector_regwen
  // R[wkup_detector_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_wkup_detector_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_regwen_6_we),
    .wd     (wkup_detector_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_regwen_6_qs)
  );


  // Subregister 7 of Multireg wkup_detector_regwen
  // R[wkup_detector_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_wkup_detector_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_regwen_7_we),
    .wd     (wkup_detector_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_regwen_7_qs)
  );


  // Subregister 0 of Multireg wkup_detector_en
  // R[wkup_detector_en_0]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_en_0_gated_we;
  assign aon_wkup_detector_en_0_gated_we =
    aon_wkup_detector_en_0_we & aon_wkup_detector_en_0_regwen;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_en_0 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_en_0_gated_we),
    .wd     (aon_wkup_detector_en_0_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_en[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_en_0_qs_int)
  );


  // Subregister 1 of Multireg wkup_detector_en
  // R[wkup_detector_en_1]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_en_1_gated_we;
  assign aon_wkup_detector_en_1_gated_we =
    aon_wkup_detector_en_1_we & aon_wkup_detector_en_1_regwen;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_en_1 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_en_1_gated_we),
    .wd     (aon_wkup_detector_en_1_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_en[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_en_1_qs_int)
  );


  // Subregister 2 of Multireg wkup_detector_en
  // R[wkup_detector_en_2]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_en_2_gated_we;
  assign aon_wkup_detector_en_2_gated_we =
    aon_wkup_detector_en_2_we & aon_wkup_detector_en_2_regwen;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_en_2 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_en_2_gated_we),
    .wd     (aon_wkup_detector_en_2_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_en[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_en_2_qs_int)
  );


  // Subregister 3 of Multireg wkup_detector_en
  // R[wkup_detector_en_3]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_en_3_gated_we;
  assign aon_wkup_detector_en_3_gated_we =
    aon_wkup_detector_en_3_we & aon_wkup_detector_en_3_regwen;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_en_3 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_en_3_gated_we),
    .wd     (aon_wkup_detector_en_3_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_en[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_en_3_qs_int)
  );


  // Subregister 4 of Multireg wkup_detector_en
  // R[wkup_detector_en_4]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_en_4_gated_we;
  assign aon_wkup_detector_en_4_gated_we =
    aon_wkup_detector_en_4_we & aon_wkup_detector_en_4_regwen;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_en_4 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_en_4_gated_we),
    .wd     (aon_wkup_detector_en_4_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_en[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_en_4_qs_int)
  );


  // Subregister 5 of Multireg wkup_detector_en
  // R[wkup_detector_en_5]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_en_5_gated_we;
  assign aon_wkup_detector_en_5_gated_we =
    aon_wkup_detector_en_5_we & aon_wkup_detector_en_5_regwen;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_en_5 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_en_5_gated_we),
    .wd     (aon_wkup_detector_en_5_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_en[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_en_5_qs_int)
  );


  // Subregister 6 of Multireg wkup_detector_en
  // R[wkup_detector_en_6]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_en_6_gated_we;
  assign aon_wkup_detector_en_6_gated_we =
    aon_wkup_detector_en_6_we & aon_wkup_detector_en_6_regwen;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_en_6 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_en_6_gated_we),
    .wd     (aon_wkup_detector_en_6_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_en[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_en_6_qs_int)
  );


  // Subregister 7 of Multireg wkup_detector_en
  // R[wkup_detector_en_7]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_en_7_gated_we;
  assign aon_wkup_detector_en_7_gated_we =
    aon_wkup_detector_en_7_we & aon_wkup_detector_en_7_regwen;
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_en_7 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_en_7_gated_we),
    .wd     (aon_wkup_detector_en_7_wdata[0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_en[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_en_7_qs_int)
  );


  // Subregister 0 of Multireg wkup_detector
  // R[wkup_detector_0]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_0_gated_we;
  assign aon_wkup_detector_0_gated_we = aon_wkup_detector_0_we & aon_wkup_detector_0_regwen;
  //   F[mode_0]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_wkup_detector_0_mode_0 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_0_gated_we),
    .wd     (aon_wkup_detector_0_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[0].mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_0_mode_0_qs_int)
  );

  //   F[filter_0]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_0_filter_0 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_0_gated_we),
    .wd     (aon_wkup_detector_0_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[0].filter.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_0_filter_0_qs_int)
  );

  //   F[miodio_0]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_0_miodio_0 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_0_gated_we),
    .wd     (aon_wkup_detector_0_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[0].miodio.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_0_miodio_0_qs_int)
  );


  // Subregister 1 of Multireg wkup_detector
  // R[wkup_detector_1]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_1_gated_we;
  assign aon_wkup_detector_1_gated_we = aon_wkup_detector_1_we & aon_wkup_detector_1_regwen;
  //   F[mode_1]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_wkup_detector_1_mode_1 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_1_gated_we),
    .wd     (aon_wkup_detector_1_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[1].mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_1_mode_1_qs_int)
  );

  //   F[filter_1]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_1_filter_1 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_1_gated_we),
    .wd     (aon_wkup_detector_1_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[1].filter.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_1_filter_1_qs_int)
  );

  //   F[miodio_1]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_1_miodio_1 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_1_gated_we),
    .wd     (aon_wkup_detector_1_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[1].miodio.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_1_miodio_1_qs_int)
  );


  // Subregister 2 of Multireg wkup_detector
  // R[wkup_detector_2]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_2_gated_we;
  assign aon_wkup_detector_2_gated_we = aon_wkup_detector_2_we & aon_wkup_detector_2_regwen;
  //   F[mode_2]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_wkup_detector_2_mode_2 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_2_gated_we),
    .wd     (aon_wkup_detector_2_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[2].mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_2_mode_2_qs_int)
  );

  //   F[filter_2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_2_filter_2 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_2_gated_we),
    .wd     (aon_wkup_detector_2_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[2].filter.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_2_filter_2_qs_int)
  );

  //   F[miodio_2]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_2_miodio_2 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_2_gated_we),
    .wd     (aon_wkup_detector_2_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[2].miodio.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_2_miodio_2_qs_int)
  );


  // Subregister 3 of Multireg wkup_detector
  // R[wkup_detector_3]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_3_gated_we;
  assign aon_wkup_detector_3_gated_we = aon_wkup_detector_3_we & aon_wkup_detector_3_regwen;
  //   F[mode_3]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_wkup_detector_3_mode_3 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_3_gated_we),
    .wd     (aon_wkup_detector_3_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[3].mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_3_mode_3_qs_int)
  );

  //   F[filter_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_3_filter_3 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_3_gated_we),
    .wd     (aon_wkup_detector_3_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[3].filter.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_3_filter_3_qs_int)
  );

  //   F[miodio_3]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_3_miodio_3 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_3_gated_we),
    .wd     (aon_wkup_detector_3_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[3].miodio.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_3_miodio_3_qs_int)
  );


  // Subregister 4 of Multireg wkup_detector
  // R[wkup_detector_4]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_4_gated_we;
  assign aon_wkup_detector_4_gated_we = aon_wkup_detector_4_we & aon_wkup_detector_4_regwen;
  //   F[mode_4]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_wkup_detector_4_mode_4 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_4_gated_we),
    .wd     (aon_wkup_detector_4_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[4].mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_4_mode_4_qs_int)
  );

  //   F[filter_4]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_4_filter_4 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_4_gated_we),
    .wd     (aon_wkup_detector_4_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[4].filter.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_4_filter_4_qs_int)
  );

  //   F[miodio_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_4_miodio_4 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_4_gated_we),
    .wd     (aon_wkup_detector_4_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[4].miodio.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_4_miodio_4_qs_int)
  );


  // Subregister 5 of Multireg wkup_detector
  // R[wkup_detector_5]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_5_gated_we;
  assign aon_wkup_detector_5_gated_we = aon_wkup_detector_5_we & aon_wkup_detector_5_regwen;
  //   F[mode_5]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_wkup_detector_5_mode_5 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_5_gated_we),
    .wd     (aon_wkup_detector_5_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[5].mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_5_mode_5_qs_int)
  );

  //   F[filter_5]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_5_filter_5 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_5_gated_we),
    .wd     (aon_wkup_detector_5_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[5].filter.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_5_filter_5_qs_int)
  );

  //   F[miodio_5]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_5_miodio_5 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_5_gated_we),
    .wd     (aon_wkup_detector_5_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[5].miodio.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_5_miodio_5_qs_int)
  );


  // Subregister 6 of Multireg wkup_detector
  // R[wkup_detector_6]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_6_gated_we;
  assign aon_wkup_detector_6_gated_we = aon_wkup_detector_6_we & aon_wkup_detector_6_regwen;
  //   F[mode_6]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_wkup_detector_6_mode_6 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_6_gated_we),
    .wd     (aon_wkup_detector_6_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[6].mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_6_mode_6_qs_int)
  );

  //   F[filter_6]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_6_filter_6 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_6_gated_we),
    .wd     (aon_wkup_detector_6_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[6].filter.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_6_filter_6_qs_int)
  );

  //   F[miodio_6]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_6_miodio_6 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_6_gated_we),
    .wd     (aon_wkup_detector_6_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[6].miodio.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_6_miodio_6_qs_int)
  );


  // Subregister 7 of Multireg wkup_detector
  // R[wkup_detector_7]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_7_gated_we;
  assign aon_wkup_detector_7_gated_we = aon_wkup_detector_7_we & aon_wkup_detector_7_regwen;
  //   F[mode_7]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_wkup_detector_7_mode_7 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_7_gated_we),
    .wd     (aon_wkup_detector_7_wdata[2:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[7].mode.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_7_mode_7_qs_int)
  );

  //   F[filter_7]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_7_filter_7 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_7_gated_we),
    .wd     (aon_wkup_detector_7_wdata[3]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[7].filter.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_7_filter_7_qs_int)
  );

  //   F[miodio_7]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_wkup_detector_7_miodio_7 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_7_gated_we),
    .wd     (aon_wkup_detector_7_wdata[4]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector[7].miodio.q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_7_miodio_7_qs_int)
  );


  // Subregister 0 of Multireg wkup_detector_cnt_th
  // R[wkup_detector_cnt_th_0]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_cnt_th_0_gated_we;
  assign aon_wkup_detector_cnt_th_0_gated_we =
    aon_wkup_detector_cnt_th_0_we & aon_wkup_detector_cnt_th_0_regwen;
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_wkup_detector_cnt_th_0 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_cnt_th_0_gated_we),
    .wd     (aon_wkup_detector_cnt_th_0_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_cnt_th[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_cnt_th_0_qs_int)
  );


  // Subregister 1 of Multireg wkup_detector_cnt_th
  // R[wkup_detector_cnt_th_1]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_cnt_th_1_gated_we;
  assign aon_wkup_detector_cnt_th_1_gated_we =
    aon_wkup_detector_cnt_th_1_we & aon_wkup_detector_cnt_th_1_regwen;
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_wkup_detector_cnt_th_1 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_cnt_th_1_gated_we),
    .wd     (aon_wkup_detector_cnt_th_1_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_cnt_th[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_cnt_th_1_qs_int)
  );


  // Subregister 2 of Multireg wkup_detector_cnt_th
  // R[wkup_detector_cnt_th_2]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_cnt_th_2_gated_we;
  assign aon_wkup_detector_cnt_th_2_gated_we =
    aon_wkup_detector_cnt_th_2_we & aon_wkup_detector_cnt_th_2_regwen;
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_wkup_detector_cnt_th_2 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_cnt_th_2_gated_we),
    .wd     (aon_wkup_detector_cnt_th_2_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_cnt_th[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_cnt_th_2_qs_int)
  );


  // Subregister 3 of Multireg wkup_detector_cnt_th
  // R[wkup_detector_cnt_th_3]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_cnt_th_3_gated_we;
  assign aon_wkup_detector_cnt_th_3_gated_we =
    aon_wkup_detector_cnt_th_3_we & aon_wkup_detector_cnt_th_3_regwen;
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_wkup_detector_cnt_th_3 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_cnt_th_3_gated_we),
    .wd     (aon_wkup_detector_cnt_th_3_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_cnt_th[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_cnt_th_3_qs_int)
  );


  // Subregister 4 of Multireg wkup_detector_cnt_th
  // R[wkup_detector_cnt_th_4]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_cnt_th_4_gated_we;
  assign aon_wkup_detector_cnt_th_4_gated_we =
    aon_wkup_detector_cnt_th_4_we & aon_wkup_detector_cnt_th_4_regwen;
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_wkup_detector_cnt_th_4 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_cnt_th_4_gated_we),
    .wd     (aon_wkup_detector_cnt_th_4_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_cnt_th[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_cnt_th_4_qs_int)
  );


  // Subregister 5 of Multireg wkup_detector_cnt_th
  // R[wkup_detector_cnt_th_5]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_cnt_th_5_gated_we;
  assign aon_wkup_detector_cnt_th_5_gated_we =
    aon_wkup_detector_cnt_th_5_we & aon_wkup_detector_cnt_th_5_regwen;
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_wkup_detector_cnt_th_5 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_cnt_th_5_gated_we),
    .wd     (aon_wkup_detector_cnt_th_5_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_cnt_th[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_cnt_th_5_qs_int)
  );


  // Subregister 6 of Multireg wkup_detector_cnt_th
  // R[wkup_detector_cnt_th_6]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_cnt_th_6_gated_we;
  assign aon_wkup_detector_cnt_th_6_gated_we =
    aon_wkup_detector_cnt_th_6_we & aon_wkup_detector_cnt_th_6_regwen;
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_wkup_detector_cnt_th_6 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_cnt_th_6_gated_we),
    .wd     (aon_wkup_detector_cnt_th_6_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_cnt_th[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_cnt_th_6_qs_int)
  );


  // Subregister 7 of Multireg wkup_detector_cnt_th
  // R[wkup_detector_cnt_th_7]: V(False)
  // Create REGWEN-gated WE signal
  logic aon_wkup_detector_cnt_th_7_gated_we;
  assign aon_wkup_detector_cnt_th_7_gated_we =
    aon_wkup_detector_cnt_th_7_we & aon_wkup_detector_cnt_th_7_regwen;
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_wkup_detector_cnt_th_7 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_detector_cnt_th_7_gated_we),
    .wd     (aon_wkup_detector_cnt_th_7_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_cnt_th[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (aon_wkup_detector_cnt_th_7_qs_int)
  );


  // Subregister 0 of Multireg wkup_detector_padsel
  // R[wkup_detector_padsel_0]: V(False)
  // Create REGWEN-gated WE signal
  logic wkup_detector_padsel_0_gated_we;
  assign wkup_detector_padsel_0_gated_we = wkup_detector_padsel_0_we & wkup_detector_regwen_0_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_wkup_detector_padsel_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_padsel_0_gated_we),
    .wd     (wkup_detector_padsel_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_padsel[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_padsel_0_qs)
  );


  // Subregister 1 of Multireg wkup_detector_padsel
  // R[wkup_detector_padsel_1]: V(False)
  // Create REGWEN-gated WE signal
  logic wkup_detector_padsel_1_gated_we;
  assign wkup_detector_padsel_1_gated_we = wkup_detector_padsel_1_we & wkup_detector_regwen_1_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_wkup_detector_padsel_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_padsel_1_gated_we),
    .wd     (wkup_detector_padsel_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_padsel[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_padsel_1_qs)
  );


  // Subregister 2 of Multireg wkup_detector_padsel
  // R[wkup_detector_padsel_2]: V(False)
  // Create REGWEN-gated WE signal
  logic wkup_detector_padsel_2_gated_we;
  assign wkup_detector_padsel_2_gated_we = wkup_detector_padsel_2_we & wkup_detector_regwen_2_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_wkup_detector_padsel_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_padsel_2_gated_we),
    .wd     (wkup_detector_padsel_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_padsel[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_padsel_2_qs)
  );


  // Subregister 3 of Multireg wkup_detector_padsel
  // R[wkup_detector_padsel_3]: V(False)
  // Create REGWEN-gated WE signal
  logic wkup_detector_padsel_3_gated_we;
  assign wkup_detector_padsel_3_gated_we = wkup_detector_padsel_3_we & wkup_detector_regwen_3_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_wkup_detector_padsel_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_padsel_3_gated_we),
    .wd     (wkup_detector_padsel_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_padsel[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_padsel_3_qs)
  );


  // Subregister 4 of Multireg wkup_detector_padsel
  // R[wkup_detector_padsel_4]: V(False)
  // Create REGWEN-gated WE signal
  logic wkup_detector_padsel_4_gated_we;
  assign wkup_detector_padsel_4_gated_we = wkup_detector_padsel_4_we & wkup_detector_regwen_4_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_wkup_detector_padsel_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_padsel_4_gated_we),
    .wd     (wkup_detector_padsel_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_padsel[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_padsel_4_qs)
  );


  // Subregister 5 of Multireg wkup_detector_padsel
  // R[wkup_detector_padsel_5]: V(False)
  // Create REGWEN-gated WE signal
  logic wkup_detector_padsel_5_gated_we;
  assign wkup_detector_padsel_5_gated_we = wkup_detector_padsel_5_we & wkup_detector_regwen_5_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_wkup_detector_padsel_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_padsel_5_gated_we),
    .wd     (wkup_detector_padsel_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_padsel[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_padsel_5_qs)
  );


  // Subregister 6 of Multireg wkup_detector_padsel
  // R[wkup_detector_padsel_6]: V(False)
  // Create REGWEN-gated WE signal
  logic wkup_detector_padsel_6_gated_we;
  assign wkup_detector_padsel_6_gated_we = wkup_detector_padsel_6_we & wkup_detector_regwen_6_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_wkup_detector_padsel_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_padsel_6_gated_we),
    .wd     (wkup_detector_padsel_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_padsel[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_padsel_6_qs)
  );


  // Subregister 7 of Multireg wkup_detector_padsel
  // R[wkup_detector_padsel_7]: V(False)
  // Create REGWEN-gated WE signal
  logic wkup_detector_padsel_7_gated_we;
  assign wkup_detector_padsel_7_gated_we = wkup_detector_padsel_7_we & wkup_detector_regwen_7_qs;
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_wkup_detector_padsel_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (wkup_detector_padsel_7_gated_we),
    .wd     (wkup_detector_padsel_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.wkup_detector_padsel[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (wkup_detector_padsel_7_qs)
  );


  // Subregister 0 of Multireg wkup_cause
  // R[wkup_cause]: V(False)
  logic [7:0] wkup_cause_flds_we;
  assign aon_wkup_cause_qe = |wkup_cause_flds_we;
  //   F[cause_0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_wkup_cause_cause_0 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_cause_we),
    .wd     (aon_wkup_cause_wdata[0]),

    // from internal hardware
    .de     (hw2reg.wkup_cause[0].de),
    .d      (hw2reg.wkup_cause[0].d),

    // to internal hardware
    .qe     (wkup_cause_flds_we[0]),
    .q      (reg2hw.wkup_cause[0].q),
    .ds     (aon_wkup_cause_cause_0_ds_int),

    // to register interface (read)
    .qs     (aon_wkup_cause_cause_0_qs_int)
  );

  //   F[cause_1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_wkup_cause_cause_1 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_cause_we),
    .wd     (aon_wkup_cause_wdata[1]),

    // from internal hardware
    .de     (hw2reg.wkup_cause[1].de),
    .d      (hw2reg.wkup_cause[1].d),

    // to internal hardware
    .qe     (wkup_cause_flds_we[1]),
    .q      (reg2hw.wkup_cause[1].q),
    .ds     (aon_wkup_cause_cause_1_ds_int),

    // to register interface (read)
    .qs     (aon_wkup_cause_cause_1_qs_int)
  );

  //   F[cause_2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_wkup_cause_cause_2 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_cause_we),
    .wd     (aon_wkup_cause_wdata[2]),

    // from internal hardware
    .de     (hw2reg.wkup_cause[2].de),
    .d      (hw2reg.wkup_cause[2].d),

    // to internal hardware
    .qe     (wkup_cause_flds_we[2]),
    .q      (reg2hw.wkup_cause[2].q),
    .ds     (aon_wkup_cause_cause_2_ds_int),

    // to register interface (read)
    .qs     (aon_wkup_cause_cause_2_qs_int)
  );

  //   F[cause_3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_wkup_cause_cause_3 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_cause_we),
    .wd     (aon_wkup_cause_wdata[3]),

    // from internal hardware
    .de     (hw2reg.wkup_cause[3].de),
    .d      (hw2reg.wkup_cause[3].d),

    // to internal hardware
    .qe     (wkup_cause_flds_we[3]),
    .q      (reg2hw.wkup_cause[3].q),
    .ds     (aon_wkup_cause_cause_3_ds_int),

    // to register interface (read)
    .qs     (aon_wkup_cause_cause_3_qs_int)
  );

  //   F[cause_4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_wkup_cause_cause_4 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_cause_we),
    .wd     (aon_wkup_cause_wdata[4]),

    // from internal hardware
    .de     (hw2reg.wkup_cause[4].de),
    .d      (hw2reg.wkup_cause[4].d),

    // to internal hardware
    .qe     (wkup_cause_flds_we[4]),
    .q      (reg2hw.wkup_cause[4].q),
    .ds     (aon_wkup_cause_cause_4_ds_int),

    // to register interface (read)
    .qs     (aon_wkup_cause_cause_4_qs_int)
  );

  //   F[cause_5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_wkup_cause_cause_5 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_cause_we),
    .wd     (aon_wkup_cause_wdata[5]),

    // from internal hardware
    .de     (hw2reg.wkup_cause[5].de),
    .d      (hw2reg.wkup_cause[5].d),

    // to internal hardware
    .qe     (wkup_cause_flds_we[5]),
    .q      (reg2hw.wkup_cause[5].q),
    .ds     (aon_wkup_cause_cause_5_ds_int),

    // to register interface (read)
    .qs     (aon_wkup_cause_cause_5_qs_int)
  );

  //   F[cause_6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_wkup_cause_cause_6 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_cause_we),
    .wd     (aon_wkup_cause_wdata[6]),

    // from internal hardware
    .de     (hw2reg.wkup_cause[6].de),
    .d      (hw2reg.wkup_cause[6].d),

    // to internal hardware
    .qe     (wkup_cause_flds_we[6]),
    .q      (reg2hw.wkup_cause[6].q),
    .ds     (aon_wkup_cause_cause_6_ds_int),

    // to register interface (read)
    .qs     (aon_wkup_cause_cause_6_qs_int)
  );

  //   F[cause_7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h0)
  ) u_wkup_cause_cause_7 (
    .clk_i   (clk_aon_i),
    .rst_ni  (rst_aon_ni),

    // from register interface
    .we     (aon_wkup_cause_we),
    .wd     (aon_wkup_cause_wdata[7]),

    // from internal hardware
    .de     (hw2reg.wkup_cause[7].de),
    .d      (hw2reg.wkup_cause[7].d),

    // to internal hardware
    .qe     (wkup_cause_flds_we[7]),
    .q      (reg2hw.wkup_cause[7].q),
    .ds     (aon_wkup_cause_cause_7_ds_int),

    // to register interface (read)
    .qs     (aon_wkup_cause_cause_7_qs_int)
  );



  logic [413:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == PINMUX_ALERT_TEST_OFFSET);
    addr_hit[  1] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_0_OFFSET);
    addr_hit[  2] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_1_OFFSET);
    addr_hit[  3] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_2_OFFSET);
    addr_hit[  4] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_3_OFFSET);
    addr_hit[  5] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_4_OFFSET);
    addr_hit[  6] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_5_OFFSET);
    addr_hit[  7] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_6_OFFSET);
    addr_hit[  8] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_7_OFFSET);
    addr_hit[  9] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_8_OFFSET);
    addr_hit[ 10] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_9_OFFSET);
    addr_hit[ 11] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_10_OFFSET);
    addr_hit[ 12] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_11_OFFSET);
    addr_hit[ 13] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_12_OFFSET);
    addr_hit[ 14] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_13_OFFSET);
    addr_hit[ 15] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_14_OFFSET);
    addr_hit[ 16] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_15_OFFSET);
    addr_hit[ 17] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_16_OFFSET);
    addr_hit[ 18] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_17_OFFSET);
    addr_hit[ 19] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_18_OFFSET);
    addr_hit[ 20] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_19_OFFSET);
    addr_hit[ 21] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_20_OFFSET);
    addr_hit[ 22] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_21_OFFSET);
    addr_hit[ 23] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_22_OFFSET);
    addr_hit[ 24] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_23_OFFSET);
    addr_hit[ 25] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_24_OFFSET);
    addr_hit[ 26] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_25_OFFSET);
    addr_hit[ 27] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_26_OFFSET);
    addr_hit[ 28] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_27_OFFSET);
    addr_hit[ 29] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_28_OFFSET);
    addr_hit[ 30] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_29_OFFSET);
    addr_hit[ 31] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_30_OFFSET);
    addr_hit[ 32] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_31_OFFSET);
    addr_hit[ 33] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_REGWEN_32_OFFSET);
    addr_hit[ 34] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_0_OFFSET);
    addr_hit[ 35] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_1_OFFSET);
    addr_hit[ 36] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_2_OFFSET);
    addr_hit[ 37] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_3_OFFSET);
    addr_hit[ 38] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_4_OFFSET);
    addr_hit[ 39] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_5_OFFSET);
    addr_hit[ 40] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_6_OFFSET);
    addr_hit[ 41] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_7_OFFSET);
    addr_hit[ 42] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_8_OFFSET);
    addr_hit[ 43] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_9_OFFSET);
    addr_hit[ 44] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_10_OFFSET);
    addr_hit[ 45] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_11_OFFSET);
    addr_hit[ 46] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_12_OFFSET);
    addr_hit[ 47] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_13_OFFSET);
    addr_hit[ 48] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_14_OFFSET);
    addr_hit[ 49] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_15_OFFSET);
    addr_hit[ 50] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_16_OFFSET);
    addr_hit[ 51] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_17_OFFSET);
    addr_hit[ 52] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_18_OFFSET);
    addr_hit[ 53] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_19_OFFSET);
    addr_hit[ 54] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_20_OFFSET);
    addr_hit[ 55] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_21_OFFSET);
    addr_hit[ 56] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_22_OFFSET);
    addr_hit[ 57] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_23_OFFSET);
    addr_hit[ 58] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_24_OFFSET);
    addr_hit[ 59] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_25_OFFSET);
    addr_hit[ 60] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_26_OFFSET);
    addr_hit[ 61] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_27_OFFSET);
    addr_hit[ 62] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_28_OFFSET);
    addr_hit[ 63] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_29_OFFSET);
    addr_hit[ 64] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_30_OFFSET);
    addr_hit[ 65] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_31_OFFSET);
    addr_hit[ 66] = (reg_addr == PINMUX_MIO_PERIPH_INSEL_32_OFFSET);
    addr_hit[ 67] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_0_OFFSET);
    addr_hit[ 68] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_1_OFFSET);
    addr_hit[ 69] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_2_OFFSET);
    addr_hit[ 70] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_3_OFFSET);
    addr_hit[ 71] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_4_OFFSET);
    addr_hit[ 72] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_5_OFFSET);
    addr_hit[ 73] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_6_OFFSET);
    addr_hit[ 74] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_7_OFFSET);
    addr_hit[ 75] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_8_OFFSET);
    addr_hit[ 76] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_9_OFFSET);
    addr_hit[ 77] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_10_OFFSET);
    addr_hit[ 78] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_11_OFFSET);
    addr_hit[ 79] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_12_OFFSET);
    addr_hit[ 80] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_13_OFFSET);
    addr_hit[ 81] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_14_OFFSET);
    addr_hit[ 82] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_15_OFFSET);
    addr_hit[ 83] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_16_OFFSET);
    addr_hit[ 84] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_17_OFFSET);
    addr_hit[ 85] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_18_OFFSET);
    addr_hit[ 86] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_19_OFFSET);
    addr_hit[ 87] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_20_OFFSET);
    addr_hit[ 88] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_21_OFFSET);
    addr_hit[ 89] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_22_OFFSET);
    addr_hit[ 90] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_23_OFFSET);
    addr_hit[ 91] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_24_OFFSET);
    addr_hit[ 92] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_25_OFFSET);
    addr_hit[ 93] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_26_OFFSET);
    addr_hit[ 94] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_27_OFFSET);
    addr_hit[ 95] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_28_OFFSET);
    addr_hit[ 96] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_29_OFFSET);
    addr_hit[ 97] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_30_OFFSET);
    addr_hit[ 98] = (reg_addr == PINMUX_MIO_OUTSEL_REGWEN_31_OFFSET);
    addr_hit[ 99] = (reg_addr == PINMUX_MIO_OUTSEL_0_OFFSET);
    addr_hit[100] = (reg_addr == PINMUX_MIO_OUTSEL_1_OFFSET);
    addr_hit[101] = (reg_addr == PINMUX_MIO_OUTSEL_2_OFFSET);
    addr_hit[102] = (reg_addr == PINMUX_MIO_OUTSEL_3_OFFSET);
    addr_hit[103] = (reg_addr == PINMUX_MIO_OUTSEL_4_OFFSET);
    addr_hit[104] = (reg_addr == PINMUX_MIO_OUTSEL_5_OFFSET);
    addr_hit[105] = (reg_addr == PINMUX_MIO_OUTSEL_6_OFFSET);
    addr_hit[106] = (reg_addr == PINMUX_MIO_OUTSEL_7_OFFSET);
    addr_hit[107] = (reg_addr == PINMUX_MIO_OUTSEL_8_OFFSET);
    addr_hit[108] = (reg_addr == PINMUX_MIO_OUTSEL_9_OFFSET);
    addr_hit[109] = (reg_addr == PINMUX_MIO_OUTSEL_10_OFFSET);
    addr_hit[110] = (reg_addr == PINMUX_MIO_OUTSEL_11_OFFSET);
    addr_hit[111] = (reg_addr == PINMUX_MIO_OUTSEL_12_OFFSET);
    addr_hit[112] = (reg_addr == PINMUX_MIO_OUTSEL_13_OFFSET);
    addr_hit[113] = (reg_addr == PINMUX_MIO_OUTSEL_14_OFFSET);
    addr_hit[114] = (reg_addr == PINMUX_MIO_OUTSEL_15_OFFSET);
    addr_hit[115] = (reg_addr == PINMUX_MIO_OUTSEL_16_OFFSET);
    addr_hit[116] = (reg_addr == PINMUX_MIO_OUTSEL_17_OFFSET);
    addr_hit[117] = (reg_addr == PINMUX_MIO_OUTSEL_18_OFFSET);
    addr_hit[118] = (reg_addr == PINMUX_MIO_OUTSEL_19_OFFSET);
    addr_hit[119] = (reg_addr == PINMUX_MIO_OUTSEL_20_OFFSET);
    addr_hit[120] = (reg_addr == PINMUX_MIO_OUTSEL_21_OFFSET);
    addr_hit[121] = (reg_addr == PINMUX_MIO_OUTSEL_22_OFFSET);
    addr_hit[122] = (reg_addr == PINMUX_MIO_OUTSEL_23_OFFSET);
    addr_hit[123] = (reg_addr == PINMUX_MIO_OUTSEL_24_OFFSET);
    addr_hit[124] = (reg_addr == PINMUX_MIO_OUTSEL_25_OFFSET);
    addr_hit[125] = (reg_addr == PINMUX_MIO_OUTSEL_26_OFFSET);
    addr_hit[126] = (reg_addr == PINMUX_MIO_OUTSEL_27_OFFSET);
    addr_hit[127] = (reg_addr == PINMUX_MIO_OUTSEL_28_OFFSET);
    addr_hit[128] = (reg_addr == PINMUX_MIO_OUTSEL_29_OFFSET);
    addr_hit[129] = (reg_addr == PINMUX_MIO_OUTSEL_30_OFFSET);
    addr_hit[130] = (reg_addr == PINMUX_MIO_OUTSEL_31_OFFSET);
    addr_hit[131] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_0_OFFSET);
    addr_hit[132] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_1_OFFSET);
    addr_hit[133] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_2_OFFSET);
    addr_hit[134] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_3_OFFSET);
    addr_hit[135] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_4_OFFSET);
    addr_hit[136] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_5_OFFSET);
    addr_hit[137] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_6_OFFSET);
    addr_hit[138] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_7_OFFSET);
    addr_hit[139] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_8_OFFSET);
    addr_hit[140] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_9_OFFSET);
    addr_hit[141] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_10_OFFSET);
    addr_hit[142] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_11_OFFSET);
    addr_hit[143] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_12_OFFSET);
    addr_hit[144] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_13_OFFSET);
    addr_hit[145] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_14_OFFSET);
    addr_hit[146] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_15_OFFSET);
    addr_hit[147] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_16_OFFSET);
    addr_hit[148] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_17_OFFSET);
    addr_hit[149] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_18_OFFSET);
    addr_hit[150] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_19_OFFSET);
    addr_hit[151] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_20_OFFSET);
    addr_hit[152] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_21_OFFSET);
    addr_hit[153] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_22_OFFSET);
    addr_hit[154] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_23_OFFSET);
    addr_hit[155] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_24_OFFSET);
    addr_hit[156] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_25_OFFSET);
    addr_hit[157] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_26_OFFSET);
    addr_hit[158] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_27_OFFSET);
    addr_hit[159] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_28_OFFSET);
    addr_hit[160] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_29_OFFSET);
    addr_hit[161] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_30_OFFSET);
    addr_hit[162] = (reg_addr == PINMUX_MIO_PAD_ATTR_REGWEN_31_OFFSET);
    addr_hit[163] = (reg_addr == PINMUX_MIO_PAD_ATTR_0_OFFSET);
    addr_hit[164] = (reg_addr == PINMUX_MIO_PAD_ATTR_1_OFFSET);
    addr_hit[165] = (reg_addr == PINMUX_MIO_PAD_ATTR_2_OFFSET);
    addr_hit[166] = (reg_addr == PINMUX_MIO_PAD_ATTR_3_OFFSET);
    addr_hit[167] = (reg_addr == PINMUX_MIO_PAD_ATTR_4_OFFSET);
    addr_hit[168] = (reg_addr == PINMUX_MIO_PAD_ATTR_5_OFFSET);
    addr_hit[169] = (reg_addr == PINMUX_MIO_PAD_ATTR_6_OFFSET);
    addr_hit[170] = (reg_addr == PINMUX_MIO_PAD_ATTR_7_OFFSET);
    addr_hit[171] = (reg_addr == PINMUX_MIO_PAD_ATTR_8_OFFSET);
    addr_hit[172] = (reg_addr == PINMUX_MIO_PAD_ATTR_9_OFFSET);
    addr_hit[173] = (reg_addr == PINMUX_MIO_PAD_ATTR_10_OFFSET);
    addr_hit[174] = (reg_addr == PINMUX_MIO_PAD_ATTR_11_OFFSET);
    addr_hit[175] = (reg_addr == PINMUX_MIO_PAD_ATTR_12_OFFSET);
    addr_hit[176] = (reg_addr == PINMUX_MIO_PAD_ATTR_13_OFFSET);
    addr_hit[177] = (reg_addr == PINMUX_MIO_PAD_ATTR_14_OFFSET);
    addr_hit[178] = (reg_addr == PINMUX_MIO_PAD_ATTR_15_OFFSET);
    addr_hit[179] = (reg_addr == PINMUX_MIO_PAD_ATTR_16_OFFSET);
    addr_hit[180] = (reg_addr == PINMUX_MIO_PAD_ATTR_17_OFFSET);
    addr_hit[181] = (reg_addr == PINMUX_MIO_PAD_ATTR_18_OFFSET);
    addr_hit[182] = (reg_addr == PINMUX_MIO_PAD_ATTR_19_OFFSET);
    addr_hit[183] = (reg_addr == PINMUX_MIO_PAD_ATTR_20_OFFSET);
    addr_hit[184] = (reg_addr == PINMUX_MIO_PAD_ATTR_21_OFFSET);
    addr_hit[185] = (reg_addr == PINMUX_MIO_PAD_ATTR_22_OFFSET);
    addr_hit[186] = (reg_addr == PINMUX_MIO_PAD_ATTR_23_OFFSET);
    addr_hit[187] = (reg_addr == PINMUX_MIO_PAD_ATTR_24_OFFSET);
    addr_hit[188] = (reg_addr == PINMUX_MIO_PAD_ATTR_25_OFFSET);
    addr_hit[189] = (reg_addr == PINMUX_MIO_PAD_ATTR_26_OFFSET);
    addr_hit[190] = (reg_addr == PINMUX_MIO_PAD_ATTR_27_OFFSET);
    addr_hit[191] = (reg_addr == PINMUX_MIO_PAD_ATTR_28_OFFSET);
    addr_hit[192] = (reg_addr == PINMUX_MIO_PAD_ATTR_29_OFFSET);
    addr_hit[193] = (reg_addr == PINMUX_MIO_PAD_ATTR_30_OFFSET);
    addr_hit[194] = (reg_addr == PINMUX_MIO_PAD_ATTR_31_OFFSET);
    addr_hit[195] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_0_OFFSET);
    addr_hit[196] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_1_OFFSET);
    addr_hit[197] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_2_OFFSET);
    addr_hit[198] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_3_OFFSET);
    addr_hit[199] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_4_OFFSET);
    addr_hit[200] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_5_OFFSET);
    addr_hit[201] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_6_OFFSET);
    addr_hit[202] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_7_OFFSET);
    addr_hit[203] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_8_OFFSET);
    addr_hit[204] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_9_OFFSET);
    addr_hit[205] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_10_OFFSET);
    addr_hit[206] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_11_OFFSET);
    addr_hit[207] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_12_OFFSET);
    addr_hit[208] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_13_OFFSET);
    addr_hit[209] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_14_OFFSET);
    addr_hit[210] = (reg_addr == PINMUX_DIO_PAD_ATTR_REGWEN_15_OFFSET);
    addr_hit[211] = (reg_addr == PINMUX_DIO_PAD_ATTR_0_OFFSET);
    addr_hit[212] = (reg_addr == PINMUX_DIO_PAD_ATTR_1_OFFSET);
    addr_hit[213] = (reg_addr == PINMUX_DIO_PAD_ATTR_2_OFFSET);
    addr_hit[214] = (reg_addr == PINMUX_DIO_PAD_ATTR_3_OFFSET);
    addr_hit[215] = (reg_addr == PINMUX_DIO_PAD_ATTR_4_OFFSET);
    addr_hit[216] = (reg_addr == PINMUX_DIO_PAD_ATTR_5_OFFSET);
    addr_hit[217] = (reg_addr == PINMUX_DIO_PAD_ATTR_6_OFFSET);
    addr_hit[218] = (reg_addr == PINMUX_DIO_PAD_ATTR_7_OFFSET);
    addr_hit[219] = (reg_addr == PINMUX_DIO_PAD_ATTR_8_OFFSET);
    addr_hit[220] = (reg_addr == PINMUX_DIO_PAD_ATTR_9_OFFSET);
    addr_hit[221] = (reg_addr == PINMUX_DIO_PAD_ATTR_10_OFFSET);
    addr_hit[222] = (reg_addr == PINMUX_DIO_PAD_ATTR_11_OFFSET);
    addr_hit[223] = (reg_addr == PINMUX_DIO_PAD_ATTR_12_OFFSET);
    addr_hit[224] = (reg_addr == PINMUX_DIO_PAD_ATTR_13_OFFSET);
    addr_hit[225] = (reg_addr == PINMUX_DIO_PAD_ATTR_14_OFFSET);
    addr_hit[226] = (reg_addr == PINMUX_DIO_PAD_ATTR_15_OFFSET);
    addr_hit[227] = (reg_addr == PINMUX_MIO_PAD_SLEEP_STATUS_OFFSET);
    addr_hit[228] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_0_OFFSET);
    addr_hit[229] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_1_OFFSET);
    addr_hit[230] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_2_OFFSET);
    addr_hit[231] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_3_OFFSET);
    addr_hit[232] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_4_OFFSET);
    addr_hit[233] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_5_OFFSET);
    addr_hit[234] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_6_OFFSET);
    addr_hit[235] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_7_OFFSET);
    addr_hit[236] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_8_OFFSET);
    addr_hit[237] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_9_OFFSET);
    addr_hit[238] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_10_OFFSET);
    addr_hit[239] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_11_OFFSET);
    addr_hit[240] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_12_OFFSET);
    addr_hit[241] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_13_OFFSET);
    addr_hit[242] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_14_OFFSET);
    addr_hit[243] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_15_OFFSET);
    addr_hit[244] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_16_OFFSET);
    addr_hit[245] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_17_OFFSET);
    addr_hit[246] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_18_OFFSET);
    addr_hit[247] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_19_OFFSET);
    addr_hit[248] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_20_OFFSET);
    addr_hit[249] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_21_OFFSET);
    addr_hit[250] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_22_OFFSET);
    addr_hit[251] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_23_OFFSET);
    addr_hit[252] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_24_OFFSET);
    addr_hit[253] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_25_OFFSET);
    addr_hit[254] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_26_OFFSET);
    addr_hit[255] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_27_OFFSET);
    addr_hit[256] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_28_OFFSET);
    addr_hit[257] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_29_OFFSET);
    addr_hit[258] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_30_OFFSET);
    addr_hit[259] = (reg_addr == PINMUX_MIO_PAD_SLEEP_REGWEN_31_OFFSET);
    addr_hit[260] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_0_OFFSET);
    addr_hit[261] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_1_OFFSET);
    addr_hit[262] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_2_OFFSET);
    addr_hit[263] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_3_OFFSET);
    addr_hit[264] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_4_OFFSET);
    addr_hit[265] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_5_OFFSET);
    addr_hit[266] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_6_OFFSET);
    addr_hit[267] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_7_OFFSET);
    addr_hit[268] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_8_OFFSET);
    addr_hit[269] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_9_OFFSET);
    addr_hit[270] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_10_OFFSET);
    addr_hit[271] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_11_OFFSET);
    addr_hit[272] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_12_OFFSET);
    addr_hit[273] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_13_OFFSET);
    addr_hit[274] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_14_OFFSET);
    addr_hit[275] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_15_OFFSET);
    addr_hit[276] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_16_OFFSET);
    addr_hit[277] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_17_OFFSET);
    addr_hit[278] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_18_OFFSET);
    addr_hit[279] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_19_OFFSET);
    addr_hit[280] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_20_OFFSET);
    addr_hit[281] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_21_OFFSET);
    addr_hit[282] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_22_OFFSET);
    addr_hit[283] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_23_OFFSET);
    addr_hit[284] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_24_OFFSET);
    addr_hit[285] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_25_OFFSET);
    addr_hit[286] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_26_OFFSET);
    addr_hit[287] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_27_OFFSET);
    addr_hit[288] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_28_OFFSET);
    addr_hit[289] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_29_OFFSET);
    addr_hit[290] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_30_OFFSET);
    addr_hit[291] = (reg_addr == PINMUX_MIO_PAD_SLEEP_EN_31_OFFSET);
    addr_hit[292] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_0_OFFSET);
    addr_hit[293] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_1_OFFSET);
    addr_hit[294] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_2_OFFSET);
    addr_hit[295] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_3_OFFSET);
    addr_hit[296] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_4_OFFSET);
    addr_hit[297] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_5_OFFSET);
    addr_hit[298] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_6_OFFSET);
    addr_hit[299] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_7_OFFSET);
    addr_hit[300] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_8_OFFSET);
    addr_hit[301] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_9_OFFSET);
    addr_hit[302] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_10_OFFSET);
    addr_hit[303] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_11_OFFSET);
    addr_hit[304] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_12_OFFSET);
    addr_hit[305] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_13_OFFSET);
    addr_hit[306] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_14_OFFSET);
    addr_hit[307] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_15_OFFSET);
    addr_hit[308] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_16_OFFSET);
    addr_hit[309] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_17_OFFSET);
    addr_hit[310] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_18_OFFSET);
    addr_hit[311] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_19_OFFSET);
    addr_hit[312] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_20_OFFSET);
    addr_hit[313] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_21_OFFSET);
    addr_hit[314] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_22_OFFSET);
    addr_hit[315] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_23_OFFSET);
    addr_hit[316] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_24_OFFSET);
    addr_hit[317] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_25_OFFSET);
    addr_hit[318] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_26_OFFSET);
    addr_hit[319] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_27_OFFSET);
    addr_hit[320] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_28_OFFSET);
    addr_hit[321] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_29_OFFSET);
    addr_hit[322] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_30_OFFSET);
    addr_hit[323] = (reg_addr == PINMUX_MIO_PAD_SLEEP_MODE_31_OFFSET);
    addr_hit[324] = (reg_addr == PINMUX_DIO_PAD_SLEEP_STATUS_OFFSET);
    addr_hit[325] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_0_OFFSET);
    addr_hit[326] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_1_OFFSET);
    addr_hit[327] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_2_OFFSET);
    addr_hit[328] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_3_OFFSET);
    addr_hit[329] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_4_OFFSET);
    addr_hit[330] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_5_OFFSET);
    addr_hit[331] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_6_OFFSET);
    addr_hit[332] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_7_OFFSET);
    addr_hit[333] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_8_OFFSET);
    addr_hit[334] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_9_OFFSET);
    addr_hit[335] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_10_OFFSET);
    addr_hit[336] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_11_OFFSET);
    addr_hit[337] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_12_OFFSET);
    addr_hit[338] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_13_OFFSET);
    addr_hit[339] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_14_OFFSET);
    addr_hit[340] = (reg_addr == PINMUX_DIO_PAD_SLEEP_REGWEN_15_OFFSET);
    addr_hit[341] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_0_OFFSET);
    addr_hit[342] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_1_OFFSET);
    addr_hit[343] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_2_OFFSET);
    addr_hit[344] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_3_OFFSET);
    addr_hit[345] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_4_OFFSET);
    addr_hit[346] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_5_OFFSET);
    addr_hit[347] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_6_OFFSET);
    addr_hit[348] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_7_OFFSET);
    addr_hit[349] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_8_OFFSET);
    addr_hit[350] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_9_OFFSET);
    addr_hit[351] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_10_OFFSET);
    addr_hit[352] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_11_OFFSET);
    addr_hit[353] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_12_OFFSET);
    addr_hit[354] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_13_OFFSET);
    addr_hit[355] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_14_OFFSET);
    addr_hit[356] = (reg_addr == PINMUX_DIO_PAD_SLEEP_EN_15_OFFSET);
    addr_hit[357] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_0_OFFSET);
    addr_hit[358] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_1_OFFSET);
    addr_hit[359] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_2_OFFSET);
    addr_hit[360] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_3_OFFSET);
    addr_hit[361] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_4_OFFSET);
    addr_hit[362] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_5_OFFSET);
    addr_hit[363] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_6_OFFSET);
    addr_hit[364] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_7_OFFSET);
    addr_hit[365] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_8_OFFSET);
    addr_hit[366] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_9_OFFSET);
    addr_hit[367] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_10_OFFSET);
    addr_hit[368] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_11_OFFSET);
    addr_hit[369] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_12_OFFSET);
    addr_hit[370] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_13_OFFSET);
    addr_hit[371] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_14_OFFSET);
    addr_hit[372] = (reg_addr == PINMUX_DIO_PAD_SLEEP_MODE_15_OFFSET);
    addr_hit[373] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_0_OFFSET);
    addr_hit[374] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_1_OFFSET);
    addr_hit[375] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_2_OFFSET);
    addr_hit[376] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_3_OFFSET);
    addr_hit[377] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_4_OFFSET);
    addr_hit[378] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_5_OFFSET);
    addr_hit[379] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_6_OFFSET);
    addr_hit[380] = (reg_addr == PINMUX_WKUP_DETECTOR_REGWEN_7_OFFSET);
    addr_hit[381] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_0_OFFSET);
    addr_hit[382] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_1_OFFSET);
    addr_hit[383] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_2_OFFSET);
    addr_hit[384] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_3_OFFSET);
    addr_hit[385] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_4_OFFSET);
    addr_hit[386] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_5_OFFSET);
    addr_hit[387] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_6_OFFSET);
    addr_hit[388] = (reg_addr == PINMUX_WKUP_DETECTOR_EN_7_OFFSET);
    addr_hit[389] = (reg_addr == PINMUX_WKUP_DETECTOR_0_OFFSET);
    addr_hit[390] = (reg_addr == PINMUX_WKUP_DETECTOR_1_OFFSET);
    addr_hit[391] = (reg_addr == PINMUX_WKUP_DETECTOR_2_OFFSET);
    addr_hit[392] = (reg_addr == PINMUX_WKUP_DETECTOR_3_OFFSET);
    addr_hit[393] = (reg_addr == PINMUX_WKUP_DETECTOR_4_OFFSET);
    addr_hit[394] = (reg_addr == PINMUX_WKUP_DETECTOR_5_OFFSET);
    addr_hit[395] = (reg_addr == PINMUX_WKUP_DETECTOR_6_OFFSET);
    addr_hit[396] = (reg_addr == PINMUX_WKUP_DETECTOR_7_OFFSET);
    addr_hit[397] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_0_OFFSET);
    addr_hit[398] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_1_OFFSET);
    addr_hit[399] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_2_OFFSET);
    addr_hit[400] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_3_OFFSET);
    addr_hit[401] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_4_OFFSET);
    addr_hit[402] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_5_OFFSET);
    addr_hit[403] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_6_OFFSET);
    addr_hit[404] = (reg_addr == PINMUX_WKUP_DETECTOR_CNT_TH_7_OFFSET);
    addr_hit[405] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_0_OFFSET);
    addr_hit[406] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_1_OFFSET);
    addr_hit[407] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_2_OFFSET);
    addr_hit[408] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_3_OFFSET);
    addr_hit[409] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_4_OFFSET);
    addr_hit[410] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_5_OFFSET);
    addr_hit[411] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_6_OFFSET);
    addr_hit[412] = (reg_addr == PINMUX_WKUP_DETECTOR_PADSEL_7_OFFSET);
    addr_hit[413] = (reg_addr == PINMUX_WKUP_CAUSE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(PINMUX_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(PINMUX_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(PINMUX_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(PINMUX_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(PINMUX_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(PINMUX_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(PINMUX_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(PINMUX_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(PINMUX_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(PINMUX_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(PINMUX_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(PINMUX_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(PINMUX_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(PINMUX_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(PINMUX_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(PINMUX_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(PINMUX_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(PINMUX_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(PINMUX_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(PINMUX_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(PINMUX_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(PINMUX_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(PINMUX_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(PINMUX_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(PINMUX_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(PINMUX_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(PINMUX_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(PINMUX_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(PINMUX_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(PINMUX_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(PINMUX_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(PINMUX_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(PINMUX_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(PINMUX_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(PINMUX_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(PINMUX_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(PINMUX_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(PINMUX_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(PINMUX_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(PINMUX_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(PINMUX_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(PINMUX_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(PINMUX_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(PINMUX_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(PINMUX_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(PINMUX_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(PINMUX_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(PINMUX_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(PINMUX_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(PINMUX_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(PINMUX_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(PINMUX_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(PINMUX_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(PINMUX_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(PINMUX_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(PINMUX_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(PINMUX_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(PINMUX_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(PINMUX_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(PINMUX_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(PINMUX_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(PINMUX_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(PINMUX_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(PINMUX_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(PINMUX_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(PINMUX_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(PINMUX_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(PINMUX_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(PINMUX_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(PINMUX_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(PINMUX_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(PINMUX_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(PINMUX_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(PINMUX_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(PINMUX_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(PINMUX_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(PINMUX_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(PINMUX_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(PINMUX_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(PINMUX_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(PINMUX_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(PINMUX_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(PINMUX_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(PINMUX_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(PINMUX_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(PINMUX_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(PINMUX_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(PINMUX_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(PINMUX_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(PINMUX_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(PINMUX_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(PINMUX_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(PINMUX_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(PINMUX_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(PINMUX_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(PINMUX_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(PINMUX_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(PINMUX_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(PINMUX_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(PINMUX_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(PINMUX_PERMIT[100] & ~reg_be))) |
               (addr_hit[101] & (|(PINMUX_PERMIT[101] & ~reg_be))) |
               (addr_hit[102] & (|(PINMUX_PERMIT[102] & ~reg_be))) |
               (addr_hit[103] & (|(PINMUX_PERMIT[103] & ~reg_be))) |
               (addr_hit[104] & (|(PINMUX_PERMIT[104] & ~reg_be))) |
               (addr_hit[105] & (|(PINMUX_PERMIT[105] & ~reg_be))) |
               (addr_hit[106] & (|(PINMUX_PERMIT[106] & ~reg_be))) |
               (addr_hit[107] & (|(PINMUX_PERMIT[107] & ~reg_be))) |
               (addr_hit[108] & (|(PINMUX_PERMIT[108] & ~reg_be))) |
               (addr_hit[109] & (|(PINMUX_PERMIT[109] & ~reg_be))) |
               (addr_hit[110] & (|(PINMUX_PERMIT[110] & ~reg_be))) |
               (addr_hit[111] & (|(PINMUX_PERMIT[111] & ~reg_be))) |
               (addr_hit[112] & (|(PINMUX_PERMIT[112] & ~reg_be))) |
               (addr_hit[113] & (|(PINMUX_PERMIT[113] & ~reg_be))) |
               (addr_hit[114] & (|(PINMUX_PERMIT[114] & ~reg_be))) |
               (addr_hit[115] & (|(PINMUX_PERMIT[115] & ~reg_be))) |
               (addr_hit[116] & (|(PINMUX_PERMIT[116] & ~reg_be))) |
               (addr_hit[117] & (|(PINMUX_PERMIT[117] & ~reg_be))) |
               (addr_hit[118] & (|(PINMUX_PERMIT[118] & ~reg_be))) |
               (addr_hit[119] & (|(PINMUX_PERMIT[119] & ~reg_be))) |
               (addr_hit[120] & (|(PINMUX_PERMIT[120] & ~reg_be))) |
               (addr_hit[121] & (|(PINMUX_PERMIT[121] & ~reg_be))) |
               (addr_hit[122] & (|(PINMUX_PERMIT[122] & ~reg_be))) |
               (addr_hit[123] & (|(PINMUX_PERMIT[123] & ~reg_be))) |
               (addr_hit[124] & (|(PINMUX_PERMIT[124] & ~reg_be))) |
               (addr_hit[125] & (|(PINMUX_PERMIT[125] & ~reg_be))) |
               (addr_hit[126] & (|(PINMUX_PERMIT[126] & ~reg_be))) |
               (addr_hit[127] & (|(PINMUX_PERMIT[127] & ~reg_be))) |
               (addr_hit[128] & (|(PINMUX_PERMIT[128] & ~reg_be))) |
               (addr_hit[129] & (|(PINMUX_PERMIT[129] & ~reg_be))) |
               (addr_hit[130] & (|(PINMUX_PERMIT[130] & ~reg_be))) |
               (addr_hit[131] & (|(PINMUX_PERMIT[131] & ~reg_be))) |
               (addr_hit[132] & (|(PINMUX_PERMIT[132] & ~reg_be))) |
               (addr_hit[133] & (|(PINMUX_PERMIT[133] & ~reg_be))) |
               (addr_hit[134] & (|(PINMUX_PERMIT[134] & ~reg_be))) |
               (addr_hit[135] & (|(PINMUX_PERMIT[135] & ~reg_be))) |
               (addr_hit[136] & (|(PINMUX_PERMIT[136] & ~reg_be))) |
               (addr_hit[137] & (|(PINMUX_PERMIT[137] & ~reg_be))) |
               (addr_hit[138] & (|(PINMUX_PERMIT[138] & ~reg_be))) |
               (addr_hit[139] & (|(PINMUX_PERMIT[139] & ~reg_be))) |
               (addr_hit[140] & (|(PINMUX_PERMIT[140] & ~reg_be))) |
               (addr_hit[141] & (|(PINMUX_PERMIT[141] & ~reg_be))) |
               (addr_hit[142] & (|(PINMUX_PERMIT[142] & ~reg_be))) |
               (addr_hit[143] & (|(PINMUX_PERMIT[143] & ~reg_be))) |
               (addr_hit[144] & (|(PINMUX_PERMIT[144] & ~reg_be))) |
               (addr_hit[145] & (|(PINMUX_PERMIT[145] & ~reg_be))) |
               (addr_hit[146] & (|(PINMUX_PERMIT[146] & ~reg_be))) |
               (addr_hit[147] & (|(PINMUX_PERMIT[147] & ~reg_be))) |
               (addr_hit[148] & (|(PINMUX_PERMIT[148] & ~reg_be))) |
               (addr_hit[149] & (|(PINMUX_PERMIT[149] & ~reg_be))) |
               (addr_hit[150] & (|(PINMUX_PERMIT[150] & ~reg_be))) |
               (addr_hit[151] & (|(PINMUX_PERMIT[151] & ~reg_be))) |
               (addr_hit[152] & (|(PINMUX_PERMIT[152] & ~reg_be))) |
               (addr_hit[153] & (|(PINMUX_PERMIT[153] & ~reg_be))) |
               (addr_hit[154] & (|(PINMUX_PERMIT[154] & ~reg_be))) |
               (addr_hit[155] & (|(PINMUX_PERMIT[155] & ~reg_be))) |
               (addr_hit[156] & (|(PINMUX_PERMIT[156] & ~reg_be))) |
               (addr_hit[157] & (|(PINMUX_PERMIT[157] & ~reg_be))) |
               (addr_hit[158] & (|(PINMUX_PERMIT[158] & ~reg_be))) |
               (addr_hit[159] & (|(PINMUX_PERMIT[159] & ~reg_be))) |
               (addr_hit[160] & (|(PINMUX_PERMIT[160] & ~reg_be))) |
               (addr_hit[161] & (|(PINMUX_PERMIT[161] & ~reg_be))) |
               (addr_hit[162] & (|(PINMUX_PERMIT[162] & ~reg_be))) |
               (addr_hit[163] & (|(PINMUX_PERMIT[163] & ~reg_be))) |
               (addr_hit[164] & (|(PINMUX_PERMIT[164] & ~reg_be))) |
               (addr_hit[165] & (|(PINMUX_PERMIT[165] & ~reg_be))) |
               (addr_hit[166] & (|(PINMUX_PERMIT[166] & ~reg_be))) |
               (addr_hit[167] & (|(PINMUX_PERMIT[167] & ~reg_be))) |
               (addr_hit[168] & (|(PINMUX_PERMIT[168] & ~reg_be))) |
               (addr_hit[169] & (|(PINMUX_PERMIT[169] & ~reg_be))) |
               (addr_hit[170] & (|(PINMUX_PERMIT[170] & ~reg_be))) |
               (addr_hit[171] & (|(PINMUX_PERMIT[171] & ~reg_be))) |
               (addr_hit[172] & (|(PINMUX_PERMIT[172] & ~reg_be))) |
               (addr_hit[173] & (|(PINMUX_PERMIT[173] & ~reg_be))) |
               (addr_hit[174] & (|(PINMUX_PERMIT[174] & ~reg_be))) |
               (addr_hit[175] & (|(PINMUX_PERMIT[175] & ~reg_be))) |
               (addr_hit[176] & (|(PINMUX_PERMIT[176] & ~reg_be))) |
               (addr_hit[177] & (|(PINMUX_PERMIT[177] & ~reg_be))) |
               (addr_hit[178] & (|(PINMUX_PERMIT[178] & ~reg_be))) |
               (addr_hit[179] & (|(PINMUX_PERMIT[179] & ~reg_be))) |
               (addr_hit[180] & (|(PINMUX_PERMIT[180] & ~reg_be))) |
               (addr_hit[181] & (|(PINMUX_PERMIT[181] & ~reg_be))) |
               (addr_hit[182] & (|(PINMUX_PERMIT[182] & ~reg_be))) |
               (addr_hit[183] & (|(PINMUX_PERMIT[183] & ~reg_be))) |
               (addr_hit[184] & (|(PINMUX_PERMIT[184] & ~reg_be))) |
               (addr_hit[185] & (|(PINMUX_PERMIT[185] & ~reg_be))) |
               (addr_hit[186] & (|(PINMUX_PERMIT[186] & ~reg_be))) |
               (addr_hit[187] & (|(PINMUX_PERMIT[187] & ~reg_be))) |
               (addr_hit[188] & (|(PINMUX_PERMIT[188] & ~reg_be))) |
               (addr_hit[189] & (|(PINMUX_PERMIT[189] & ~reg_be))) |
               (addr_hit[190] & (|(PINMUX_PERMIT[190] & ~reg_be))) |
               (addr_hit[191] & (|(PINMUX_PERMIT[191] & ~reg_be))) |
               (addr_hit[192] & (|(PINMUX_PERMIT[192] & ~reg_be))) |
               (addr_hit[193] & (|(PINMUX_PERMIT[193] & ~reg_be))) |
               (addr_hit[194] & (|(PINMUX_PERMIT[194] & ~reg_be))) |
               (addr_hit[195] & (|(PINMUX_PERMIT[195] & ~reg_be))) |
               (addr_hit[196] & (|(PINMUX_PERMIT[196] & ~reg_be))) |
               (addr_hit[197] & (|(PINMUX_PERMIT[197] & ~reg_be))) |
               (addr_hit[198] & (|(PINMUX_PERMIT[198] & ~reg_be))) |
               (addr_hit[199] & (|(PINMUX_PERMIT[199] & ~reg_be))) |
               (addr_hit[200] & (|(PINMUX_PERMIT[200] & ~reg_be))) |
               (addr_hit[201] & (|(PINMUX_PERMIT[201] & ~reg_be))) |
               (addr_hit[202] & (|(PINMUX_PERMIT[202] & ~reg_be))) |
               (addr_hit[203] & (|(PINMUX_PERMIT[203] & ~reg_be))) |
               (addr_hit[204] & (|(PINMUX_PERMIT[204] & ~reg_be))) |
               (addr_hit[205] & (|(PINMUX_PERMIT[205] & ~reg_be))) |
               (addr_hit[206] & (|(PINMUX_PERMIT[206] & ~reg_be))) |
               (addr_hit[207] & (|(PINMUX_PERMIT[207] & ~reg_be))) |
               (addr_hit[208] & (|(PINMUX_PERMIT[208] & ~reg_be))) |
               (addr_hit[209] & (|(PINMUX_PERMIT[209] & ~reg_be))) |
               (addr_hit[210] & (|(PINMUX_PERMIT[210] & ~reg_be))) |
               (addr_hit[211] & (|(PINMUX_PERMIT[211] & ~reg_be))) |
               (addr_hit[212] & (|(PINMUX_PERMIT[212] & ~reg_be))) |
               (addr_hit[213] & (|(PINMUX_PERMIT[213] & ~reg_be))) |
               (addr_hit[214] & (|(PINMUX_PERMIT[214] & ~reg_be))) |
               (addr_hit[215] & (|(PINMUX_PERMIT[215] & ~reg_be))) |
               (addr_hit[216] & (|(PINMUX_PERMIT[216] & ~reg_be))) |
               (addr_hit[217] & (|(PINMUX_PERMIT[217] & ~reg_be))) |
               (addr_hit[218] & (|(PINMUX_PERMIT[218] & ~reg_be))) |
               (addr_hit[219] & (|(PINMUX_PERMIT[219] & ~reg_be))) |
               (addr_hit[220] & (|(PINMUX_PERMIT[220] & ~reg_be))) |
               (addr_hit[221] & (|(PINMUX_PERMIT[221] & ~reg_be))) |
               (addr_hit[222] & (|(PINMUX_PERMIT[222] & ~reg_be))) |
               (addr_hit[223] & (|(PINMUX_PERMIT[223] & ~reg_be))) |
               (addr_hit[224] & (|(PINMUX_PERMIT[224] & ~reg_be))) |
               (addr_hit[225] & (|(PINMUX_PERMIT[225] & ~reg_be))) |
               (addr_hit[226] & (|(PINMUX_PERMIT[226] & ~reg_be))) |
               (addr_hit[227] & (|(PINMUX_PERMIT[227] & ~reg_be))) |
               (addr_hit[228] & (|(PINMUX_PERMIT[228] & ~reg_be))) |
               (addr_hit[229] & (|(PINMUX_PERMIT[229] & ~reg_be))) |
               (addr_hit[230] & (|(PINMUX_PERMIT[230] & ~reg_be))) |
               (addr_hit[231] & (|(PINMUX_PERMIT[231] & ~reg_be))) |
               (addr_hit[232] & (|(PINMUX_PERMIT[232] & ~reg_be))) |
               (addr_hit[233] & (|(PINMUX_PERMIT[233] & ~reg_be))) |
               (addr_hit[234] & (|(PINMUX_PERMIT[234] & ~reg_be))) |
               (addr_hit[235] & (|(PINMUX_PERMIT[235] & ~reg_be))) |
               (addr_hit[236] & (|(PINMUX_PERMIT[236] & ~reg_be))) |
               (addr_hit[237] & (|(PINMUX_PERMIT[237] & ~reg_be))) |
               (addr_hit[238] & (|(PINMUX_PERMIT[238] & ~reg_be))) |
               (addr_hit[239] & (|(PINMUX_PERMIT[239] & ~reg_be))) |
               (addr_hit[240] & (|(PINMUX_PERMIT[240] & ~reg_be))) |
               (addr_hit[241] & (|(PINMUX_PERMIT[241] & ~reg_be))) |
               (addr_hit[242] & (|(PINMUX_PERMIT[242] & ~reg_be))) |
               (addr_hit[243] & (|(PINMUX_PERMIT[243] & ~reg_be))) |
               (addr_hit[244] & (|(PINMUX_PERMIT[244] & ~reg_be))) |
               (addr_hit[245] & (|(PINMUX_PERMIT[245] & ~reg_be))) |
               (addr_hit[246] & (|(PINMUX_PERMIT[246] & ~reg_be))) |
               (addr_hit[247] & (|(PINMUX_PERMIT[247] & ~reg_be))) |
               (addr_hit[248] & (|(PINMUX_PERMIT[248] & ~reg_be))) |
               (addr_hit[249] & (|(PINMUX_PERMIT[249] & ~reg_be))) |
               (addr_hit[250] & (|(PINMUX_PERMIT[250] & ~reg_be))) |
               (addr_hit[251] & (|(PINMUX_PERMIT[251] & ~reg_be))) |
               (addr_hit[252] & (|(PINMUX_PERMIT[252] & ~reg_be))) |
               (addr_hit[253] & (|(PINMUX_PERMIT[253] & ~reg_be))) |
               (addr_hit[254] & (|(PINMUX_PERMIT[254] & ~reg_be))) |
               (addr_hit[255] & (|(PINMUX_PERMIT[255] & ~reg_be))) |
               (addr_hit[256] & (|(PINMUX_PERMIT[256] & ~reg_be))) |
               (addr_hit[257] & (|(PINMUX_PERMIT[257] & ~reg_be))) |
               (addr_hit[258] & (|(PINMUX_PERMIT[258] & ~reg_be))) |
               (addr_hit[259] & (|(PINMUX_PERMIT[259] & ~reg_be))) |
               (addr_hit[260] & (|(PINMUX_PERMIT[260] & ~reg_be))) |
               (addr_hit[261] & (|(PINMUX_PERMIT[261] & ~reg_be))) |
               (addr_hit[262] & (|(PINMUX_PERMIT[262] & ~reg_be))) |
               (addr_hit[263] & (|(PINMUX_PERMIT[263] & ~reg_be))) |
               (addr_hit[264] & (|(PINMUX_PERMIT[264] & ~reg_be))) |
               (addr_hit[265] & (|(PINMUX_PERMIT[265] & ~reg_be))) |
               (addr_hit[266] & (|(PINMUX_PERMIT[266] & ~reg_be))) |
               (addr_hit[267] & (|(PINMUX_PERMIT[267] & ~reg_be))) |
               (addr_hit[268] & (|(PINMUX_PERMIT[268] & ~reg_be))) |
               (addr_hit[269] & (|(PINMUX_PERMIT[269] & ~reg_be))) |
               (addr_hit[270] & (|(PINMUX_PERMIT[270] & ~reg_be))) |
               (addr_hit[271] & (|(PINMUX_PERMIT[271] & ~reg_be))) |
               (addr_hit[272] & (|(PINMUX_PERMIT[272] & ~reg_be))) |
               (addr_hit[273] & (|(PINMUX_PERMIT[273] & ~reg_be))) |
               (addr_hit[274] & (|(PINMUX_PERMIT[274] & ~reg_be))) |
               (addr_hit[275] & (|(PINMUX_PERMIT[275] & ~reg_be))) |
               (addr_hit[276] & (|(PINMUX_PERMIT[276] & ~reg_be))) |
               (addr_hit[277] & (|(PINMUX_PERMIT[277] & ~reg_be))) |
               (addr_hit[278] & (|(PINMUX_PERMIT[278] & ~reg_be))) |
               (addr_hit[279] & (|(PINMUX_PERMIT[279] & ~reg_be))) |
               (addr_hit[280] & (|(PINMUX_PERMIT[280] & ~reg_be))) |
               (addr_hit[281] & (|(PINMUX_PERMIT[281] & ~reg_be))) |
               (addr_hit[282] & (|(PINMUX_PERMIT[282] & ~reg_be))) |
               (addr_hit[283] & (|(PINMUX_PERMIT[283] & ~reg_be))) |
               (addr_hit[284] & (|(PINMUX_PERMIT[284] & ~reg_be))) |
               (addr_hit[285] & (|(PINMUX_PERMIT[285] & ~reg_be))) |
               (addr_hit[286] & (|(PINMUX_PERMIT[286] & ~reg_be))) |
               (addr_hit[287] & (|(PINMUX_PERMIT[287] & ~reg_be))) |
               (addr_hit[288] & (|(PINMUX_PERMIT[288] & ~reg_be))) |
               (addr_hit[289] & (|(PINMUX_PERMIT[289] & ~reg_be))) |
               (addr_hit[290] & (|(PINMUX_PERMIT[290] & ~reg_be))) |
               (addr_hit[291] & (|(PINMUX_PERMIT[291] & ~reg_be))) |
               (addr_hit[292] & (|(PINMUX_PERMIT[292] & ~reg_be))) |
               (addr_hit[293] & (|(PINMUX_PERMIT[293] & ~reg_be))) |
               (addr_hit[294] & (|(PINMUX_PERMIT[294] & ~reg_be))) |
               (addr_hit[295] & (|(PINMUX_PERMIT[295] & ~reg_be))) |
               (addr_hit[296] & (|(PINMUX_PERMIT[296] & ~reg_be))) |
               (addr_hit[297] & (|(PINMUX_PERMIT[297] & ~reg_be))) |
               (addr_hit[298] & (|(PINMUX_PERMIT[298] & ~reg_be))) |
               (addr_hit[299] & (|(PINMUX_PERMIT[299] & ~reg_be))) |
               (addr_hit[300] & (|(PINMUX_PERMIT[300] & ~reg_be))) |
               (addr_hit[301] & (|(PINMUX_PERMIT[301] & ~reg_be))) |
               (addr_hit[302] & (|(PINMUX_PERMIT[302] & ~reg_be))) |
               (addr_hit[303] & (|(PINMUX_PERMIT[303] & ~reg_be))) |
               (addr_hit[304] & (|(PINMUX_PERMIT[304] & ~reg_be))) |
               (addr_hit[305] & (|(PINMUX_PERMIT[305] & ~reg_be))) |
               (addr_hit[306] & (|(PINMUX_PERMIT[306] & ~reg_be))) |
               (addr_hit[307] & (|(PINMUX_PERMIT[307] & ~reg_be))) |
               (addr_hit[308] & (|(PINMUX_PERMIT[308] & ~reg_be))) |
               (addr_hit[309] & (|(PINMUX_PERMIT[309] & ~reg_be))) |
               (addr_hit[310] & (|(PINMUX_PERMIT[310] & ~reg_be))) |
               (addr_hit[311] & (|(PINMUX_PERMIT[311] & ~reg_be))) |
               (addr_hit[312] & (|(PINMUX_PERMIT[312] & ~reg_be))) |
               (addr_hit[313] & (|(PINMUX_PERMIT[313] & ~reg_be))) |
               (addr_hit[314] & (|(PINMUX_PERMIT[314] & ~reg_be))) |
               (addr_hit[315] & (|(PINMUX_PERMIT[315] & ~reg_be))) |
               (addr_hit[316] & (|(PINMUX_PERMIT[316] & ~reg_be))) |
               (addr_hit[317] & (|(PINMUX_PERMIT[317] & ~reg_be))) |
               (addr_hit[318] & (|(PINMUX_PERMIT[318] & ~reg_be))) |
               (addr_hit[319] & (|(PINMUX_PERMIT[319] & ~reg_be))) |
               (addr_hit[320] & (|(PINMUX_PERMIT[320] & ~reg_be))) |
               (addr_hit[321] & (|(PINMUX_PERMIT[321] & ~reg_be))) |
               (addr_hit[322] & (|(PINMUX_PERMIT[322] & ~reg_be))) |
               (addr_hit[323] & (|(PINMUX_PERMIT[323] & ~reg_be))) |
               (addr_hit[324] & (|(PINMUX_PERMIT[324] & ~reg_be))) |
               (addr_hit[325] & (|(PINMUX_PERMIT[325] & ~reg_be))) |
               (addr_hit[326] & (|(PINMUX_PERMIT[326] & ~reg_be))) |
               (addr_hit[327] & (|(PINMUX_PERMIT[327] & ~reg_be))) |
               (addr_hit[328] & (|(PINMUX_PERMIT[328] & ~reg_be))) |
               (addr_hit[329] & (|(PINMUX_PERMIT[329] & ~reg_be))) |
               (addr_hit[330] & (|(PINMUX_PERMIT[330] & ~reg_be))) |
               (addr_hit[331] & (|(PINMUX_PERMIT[331] & ~reg_be))) |
               (addr_hit[332] & (|(PINMUX_PERMIT[332] & ~reg_be))) |
               (addr_hit[333] & (|(PINMUX_PERMIT[333] & ~reg_be))) |
               (addr_hit[334] & (|(PINMUX_PERMIT[334] & ~reg_be))) |
               (addr_hit[335] & (|(PINMUX_PERMIT[335] & ~reg_be))) |
               (addr_hit[336] & (|(PINMUX_PERMIT[336] & ~reg_be))) |
               (addr_hit[337] & (|(PINMUX_PERMIT[337] & ~reg_be))) |
               (addr_hit[338] & (|(PINMUX_PERMIT[338] & ~reg_be))) |
               (addr_hit[339] & (|(PINMUX_PERMIT[339] & ~reg_be))) |
               (addr_hit[340] & (|(PINMUX_PERMIT[340] & ~reg_be))) |
               (addr_hit[341] & (|(PINMUX_PERMIT[341] & ~reg_be))) |
               (addr_hit[342] & (|(PINMUX_PERMIT[342] & ~reg_be))) |
               (addr_hit[343] & (|(PINMUX_PERMIT[343] & ~reg_be))) |
               (addr_hit[344] & (|(PINMUX_PERMIT[344] & ~reg_be))) |
               (addr_hit[345] & (|(PINMUX_PERMIT[345] & ~reg_be))) |
               (addr_hit[346] & (|(PINMUX_PERMIT[346] & ~reg_be))) |
               (addr_hit[347] & (|(PINMUX_PERMIT[347] & ~reg_be))) |
               (addr_hit[348] & (|(PINMUX_PERMIT[348] & ~reg_be))) |
               (addr_hit[349] & (|(PINMUX_PERMIT[349] & ~reg_be))) |
               (addr_hit[350] & (|(PINMUX_PERMIT[350] & ~reg_be))) |
               (addr_hit[351] & (|(PINMUX_PERMIT[351] & ~reg_be))) |
               (addr_hit[352] & (|(PINMUX_PERMIT[352] & ~reg_be))) |
               (addr_hit[353] & (|(PINMUX_PERMIT[353] & ~reg_be))) |
               (addr_hit[354] & (|(PINMUX_PERMIT[354] & ~reg_be))) |
               (addr_hit[355] & (|(PINMUX_PERMIT[355] & ~reg_be))) |
               (addr_hit[356] & (|(PINMUX_PERMIT[356] & ~reg_be))) |
               (addr_hit[357] & (|(PINMUX_PERMIT[357] & ~reg_be))) |
               (addr_hit[358] & (|(PINMUX_PERMIT[358] & ~reg_be))) |
               (addr_hit[359] & (|(PINMUX_PERMIT[359] & ~reg_be))) |
               (addr_hit[360] & (|(PINMUX_PERMIT[360] & ~reg_be))) |
               (addr_hit[361] & (|(PINMUX_PERMIT[361] & ~reg_be))) |
               (addr_hit[362] & (|(PINMUX_PERMIT[362] & ~reg_be))) |
               (addr_hit[363] & (|(PINMUX_PERMIT[363] & ~reg_be))) |
               (addr_hit[364] & (|(PINMUX_PERMIT[364] & ~reg_be))) |
               (addr_hit[365] & (|(PINMUX_PERMIT[365] & ~reg_be))) |
               (addr_hit[366] & (|(PINMUX_PERMIT[366] & ~reg_be))) |
               (addr_hit[367] & (|(PINMUX_PERMIT[367] & ~reg_be))) |
               (addr_hit[368] & (|(PINMUX_PERMIT[368] & ~reg_be))) |
               (addr_hit[369] & (|(PINMUX_PERMIT[369] & ~reg_be))) |
               (addr_hit[370] & (|(PINMUX_PERMIT[370] & ~reg_be))) |
               (addr_hit[371] & (|(PINMUX_PERMIT[371] & ~reg_be))) |
               (addr_hit[372] & (|(PINMUX_PERMIT[372] & ~reg_be))) |
               (addr_hit[373] & (|(PINMUX_PERMIT[373] & ~reg_be))) |
               (addr_hit[374] & (|(PINMUX_PERMIT[374] & ~reg_be))) |
               (addr_hit[375] & (|(PINMUX_PERMIT[375] & ~reg_be))) |
               (addr_hit[376] & (|(PINMUX_PERMIT[376] & ~reg_be))) |
               (addr_hit[377] & (|(PINMUX_PERMIT[377] & ~reg_be))) |
               (addr_hit[378] & (|(PINMUX_PERMIT[378] & ~reg_be))) |
               (addr_hit[379] & (|(PINMUX_PERMIT[379] & ~reg_be))) |
               (addr_hit[380] & (|(PINMUX_PERMIT[380] & ~reg_be))) |
               (addr_hit[381] & (|(PINMUX_PERMIT[381] & ~reg_be))) |
               (addr_hit[382] & (|(PINMUX_PERMIT[382] & ~reg_be))) |
               (addr_hit[383] & (|(PINMUX_PERMIT[383] & ~reg_be))) |
               (addr_hit[384] & (|(PINMUX_PERMIT[384] & ~reg_be))) |
               (addr_hit[385] & (|(PINMUX_PERMIT[385] & ~reg_be))) |
               (addr_hit[386] & (|(PINMUX_PERMIT[386] & ~reg_be))) |
               (addr_hit[387] & (|(PINMUX_PERMIT[387] & ~reg_be))) |
               (addr_hit[388] & (|(PINMUX_PERMIT[388] & ~reg_be))) |
               (addr_hit[389] & (|(PINMUX_PERMIT[389] & ~reg_be))) |
               (addr_hit[390] & (|(PINMUX_PERMIT[390] & ~reg_be))) |
               (addr_hit[391] & (|(PINMUX_PERMIT[391] & ~reg_be))) |
               (addr_hit[392] & (|(PINMUX_PERMIT[392] & ~reg_be))) |
               (addr_hit[393] & (|(PINMUX_PERMIT[393] & ~reg_be))) |
               (addr_hit[394] & (|(PINMUX_PERMIT[394] & ~reg_be))) |
               (addr_hit[395] & (|(PINMUX_PERMIT[395] & ~reg_be))) |
               (addr_hit[396] & (|(PINMUX_PERMIT[396] & ~reg_be))) |
               (addr_hit[397] & (|(PINMUX_PERMIT[397] & ~reg_be))) |
               (addr_hit[398] & (|(PINMUX_PERMIT[398] & ~reg_be))) |
               (addr_hit[399] & (|(PINMUX_PERMIT[399] & ~reg_be))) |
               (addr_hit[400] & (|(PINMUX_PERMIT[400] & ~reg_be))) |
               (addr_hit[401] & (|(PINMUX_PERMIT[401] & ~reg_be))) |
               (addr_hit[402] & (|(PINMUX_PERMIT[402] & ~reg_be))) |
               (addr_hit[403] & (|(PINMUX_PERMIT[403] & ~reg_be))) |
               (addr_hit[404] & (|(PINMUX_PERMIT[404] & ~reg_be))) |
               (addr_hit[405] & (|(PINMUX_PERMIT[405] & ~reg_be))) |
               (addr_hit[406] & (|(PINMUX_PERMIT[406] & ~reg_be))) |
               (addr_hit[407] & (|(PINMUX_PERMIT[407] & ~reg_be))) |
               (addr_hit[408] & (|(PINMUX_PERMIT[408] & ~reg_be))) |
               (addr_hit[409] & (|(PINMUX_PERMIT[409] & ~reg_be))) |
               (addr_hit[410] & (|(PINMUX_PERMIT[410] & ~reg_be))) |
               (addr_hit[411] & (|(PINMUX_PERMIT[411] & ~reg_be))) |
               (addr_hit[412] & (|(PINMUX_PERMIT[412] & ~reg_be))) |
               (addr_hit[413] & (|(PINMUX_PERMIT[413] & ~reg_be)))));
  end

  // Generate write-enables
  assign alert_test_we = addr_hit[0] & reg_we & !reg_error;

  assign alert_test_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_0_we = addr_hit[1] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_0_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_1_we = addr_hit[2] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_1_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_2_we = addr_hit[3] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_2_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_3_we = addr_hit[4] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_3_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_4_we = addr_hit[5] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_4_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_5_we = addr_hit[6] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_5_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_6_we = addr_hit[7] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_6_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_7_we = addr_hit[8] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_7_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_8_we = addr_hit[9] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_8_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_9_we = addr_hit[10] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_9_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_10_we = addr_hit[11] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_10_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_11_we = addr_hit[12] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_11_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_12_we = addr_hit[13] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_12_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_13_we = addr_hit[14] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_13_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_14_we = addr_hit[15] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_14_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_15_we = addr_hit[16] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_15_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_16_we = addr_hit[17] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_16_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_17_we = addr_hit[18] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_17_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_18_we = addr_hit[19] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_18_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_19_we = addr_hit[20] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_19_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_20_we = addr_hit[21] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_20_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_21_we = addr_hit[22] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_21_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_22_we = addr_hit[23] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_22_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_23_we = addr_hit[24] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_23_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_24_we = addr_hit[25] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_24_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_25_we = addr_hit[26] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_25_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_26_we = addr_hit[27] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_26_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_27_we = addr_hit[28] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_27_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_28_we = addr_hit[29] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_28_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_29_we = addr_hit[30] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_29_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_30_we = addr_hit[31] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_30_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_31_we = addr_hit[32] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_31_wd = reg_wdata[0];
  assign mio_periph_insel_regwen_32_we = addr_hit[33] & reg_we & !reg_error;

  assign mio_periph_insel_regwen_32_wd = reg_wdata[0];
  assign mio_periph_insel_0_we = addr_hit[34] & reg_we & !reg_error;

  assign mio_periph_insel_0_wd = reg_wdata[5:0];
  assign mio_periph_insel_1_we = addr_hit[35] & reg_we & !reg_error;

  assign mio_periph_insel_1_wd = reg_wdata[5:0];
  assign mio_periph_insel_2_we = addr_hit[36] & reg_we & !reg_error;

  assign mio_periph_insel_2_wd = reg_wdata[5:0];
  assign mio_periph_insel_3_we = addr_hit[37] & reg_we & !reg_error;

  assign mio_periph_insel_3_wd = reg_wdata[5:0];
  assign mio_periph_insel_4_we = addr_hit[38] & reg_we & !reg_error;

  assign mio_periph_insel_4_wd = reg_wdata[5:0];
  assign mio_periph_insel_5_we = addr_hit[39] & reg_we & !reg_error;

  assign mio_periph_insel_5_wd = reg_wdata[5:0];
  assign mio_periph_insel_6_we = addr_hit[40] & reg_we & !reg_error;

  assign mio_periph_insel_6_wd = reg_wdata[5:0];
  assign mio_periph_insel_7_we = addr_hit[41] & reg_we & !reg_error;

  assign mio_periph_insel_7_wd = reg_wdata[5:0];
  assign mio_periph_insel_8_we = addr_hit[42] & reg_we & !reg_error;

  assign mio_periph_insel_8_wd = reg_wdata[5:0];
  assign mio_periph_insel_9_we = addr_hit[43] & reg_we & !reg_error;

  assign mio_periph_insel_9_wd = reg_wdata[5:0];
  assign mio_periph_insel_10_we = addr_hit[44] & reg_we & !reg_error;

  assign mio_periph_insel_10_wd = reg_wdata[5:0];
  assign mio_periph_insel_11_we = addr_hit[45] & reg_we & !reg_error;

  assign mio_periph_insel_11_wd = reg_wdata[5:0];
  assign mio_periph_insel_12_we = addr_hit[46] & reg_we & !reg_error;

  assign mio_periph_insel_12_wd = reg_wdata[5:0];
  assign mio_periph_insel_13_we = addr_hit[47] & reg_we & !reg_error;

  assign mio_periph_insel_13_wd = reg_wdata[5:0];
  assign mio_periph_insel_14_we = addr_hit[48] & reg_we & !reg_error;

  assign mio_periph_insel_14_wd = reg_wdata[5:0];
  assign mio_periph_insel_15_we = addr_hit[49] & reg_we & !reg_error;

  assign mio_periph_insel_15_wd = reg_wdata[5:0];
  assign mio_periph_insel_16_we = addr_hit[50] & reg_we & !reg_error;

  assign mio_periph_insel_16_wd = reg_wdata[5:0];
  assign mio_periph_insel_17_we = addr_hit[51] & reg_we & !reg_error;

  assign mio_periph_insel_17_wd = reg_wdata[5:0];
  assign mio_periph_insel_18_we = addr_hit[52] & reg_we & !reg_error;

  assign mio_periph_insel_18_wd = reg_wdata[5:0];
  assign mio_periph_insel_19_we = addr_hit[53] & reg_we & !reg_error;

  assign mio_periph_insel_19_wd = reg_wdata[5:0];
  assign mio_periph_insel_20_we = addr_hit[54] & reg_we & !reg_error;

  assign mio_periph_insel_20_wd = reg_wdata[5:0];
  assign mio_periph_insel_21_we = addr_hit[55] & reg_we & !reg_error;

  assign mio_periph_insel_21_wd = reg_wdata[5:0];
  assign mio_periph_insel_22_we = addr_hit[56] & reg_we & !reg_error;

  assign mio_periph_insel_22_wd = reg_wdata[5:0];
  assign mio_periph_insel_23_we = addr_hit[57] & reg_we & !reg_error;

  assign mio_periph_insel_23_wd = reg_wdata[5:0];
  assign mio_periph_insel_24_we = addr_hit[58] & reg_we & !reg_error;

  assign mio_periph_insel_24_wd = reg_wdata[5:0];
  assign mio_periph_insel_25_we = addr_hit[59] & reg_we & !reg_error;

  assign mio_periph_insel_25_wd = reg_wdata[5:0];
  assign mio_periph_insel_26_we = addr_hit[60] & reg_we & !reg_error;

  assign mio_periph_insel_26_wd = reg_wdata[5:0];
  assign mio_periph_insel_27_we = addr_hit[61] & reg_we & !reg_error;

  assign mio_periph_insel_27_wd = reg_wdata[5:0];
  assign mio_periph_insel_28_we = addr_hit[62] & reg_we & !reg_error;

  assign mio_periph_insel_28_wd = reg_wdata[5:0];
  assign mio_periph_insel_29_we = addr_hit[63] & reg_we & !reg_error;

  assign mio_periph_insel_29_wd = reg_wdata[5:0];
  assign mio_periph_insel_30_we = addr_hit[64] & reg_we & !reg_error;

  assign mio_periph_insel_30_wd = reg_wdata[5:0];
  assign mio_periph_insel_31_we = addr_hit[65] & reg_we & !reg_error;

  assign mio_periph_insel_31_wd = reg_wdata[5:0];
  assign mio_periph_insel_32_we = addr_hit[66] & reg_we & !reg_error;

  assign mio_periph_insel_32_wd = reg_wdata[5:0];
  assign mio_outsel_regwen_0_we = addr_hit[67] & reg_we & !reg_error;

  assign mio_outsel_regwen_0_wd = reg_wdata[0];
  assign mio_outsel_regwen_1_we = addr_hit[68] & reg_we & !reg_error;

  assign mio_outsel_regwen_1_wd = reg_wdata[0];
  assign mio_outsel_regwen_2_we = addr_hit[69] & reg_we & !reg_error;

  assign mio_outsel_regwen_2_wd = reg_wdata[0];
  assign mio_outsel_regwen_3_we = addr_hit[70] & reg_we & !reg_error;

  assign mio_outsel_regwen_3_wd = reg_wdata[0];
  assign mio_outsel_regwen_4_we = addr_hit[71] & reg_we & !reg_error;

  assign mio_outsel_regwen_4_wd = reg_wdata[0];
  assign mio_outsel_regwen_5_we = addr_hit[72] & reg_we & !reg_error;

  assign mio_outsel_regwen_5_wd = reg_wdata[0];
  assign mio_outsel_regwen_6_we = addr_hit[73] & reg_we & !reg_error;

  assign mio_outsel_regwen_6_wd = reg_wdata[0];
  assign mio_outsel_regwen_7_we = addr_hit[74] & reg_we & !reg_error;

  assign mio_outsel_regwen_7_wd = reg_wdata[0];
  assign mio_outsel_regwen_8_we = addr_hit[75] & reg_we & !reg_error;

  assign mio_outsel_regwen_8_wd = reg_wdata[0];
  assign mio_outsel_regwen_9_we = addr_hit[76] & reg_we & !reg_error;

  assign mio_outsel_regwen_9_wd = reg_wdata[0];
  assign mio_outsel_regwen_10_we = addr_hit[77] & reg_we & !reg_error;

  assign mio_outsel_regwen_10_wd = reg_wdata[0];
  assign mio_outsel_regwen_11_we = addr_hit[78] & reg_we & !reg_error;

  assign mio_outsel_regwen_11_wd = reg_wdata[0];
  assign mio_outsel_regwen_12_we = addr_hit[79] & reg_we & !reg_error;

  assign mio_outsel_regwen_12_wd = reg_wdata[0];
  assign mio_outsel_regwen_13_we = addr_hit[80] & reg_we & !reg_error;

  assign mio_outsel_regwen_13_wd = reg_wdata[0];
  assign mio_outsel_regwen_14_we = addr_hit[81] & reg_we & !reg_error;

  assign mio_outsel_regwen_14_wd = reg_wdata[0];
  assign mio_outsel_regwen_15_we = addr_hit[82] & reg_we & !reg_error;

  assign mio_outsel_regwen_15_wd = reg_wdata[0];
  assign mio_outsel_regwen_16_we = addr_hit[83] & reg_we & !reg_error;

  assign mio_outsel_regwen_16_wd = reg_wdata[0];
  assign mio_outsel_regwen_17_we = addr_hit[84] & reg_we & !reg_error;

  assign mio_outsel_regwen_17_wd = reg_wdata[0];
  assign mio_outsel_regwen_18_we = addr_hit[85] & reg_we & !reg_error;

  assign mio_outsel_regwen_18_wd = reg_wdata[0];
  assign mio_outsel_regwen_19_we = addr_hit[86] & reg_we & !reg_error;

  assign mio_outsel_regwen_19_wd = reg_wdata[0];
  assign mio_outsel_regwen_20_we = addr_hit[87] & reg_we & !reg_error;

  assign mio_outsel_regwen_20_wd = reg_wdata[0];
  assign mio_outsel_regwen_21_we = addr_hit[88] & reg_we & !reg_error;

  assign mio_outsel_regwen_21_wd = reg_wdata[0];
  assign mio_outsel_regwen_22_we = addr_hit[89] & reg_we & !reg_error;

  assign mio_outsel_regwen_22_wd = reg_wdata[0];
  assign mio_outsel_regwen_23_we = addr_hit[90] & reg_we & !reg_error;

  assign mio_outsel_regwen_23_wd = reg_wdata[0];
  assign mio_outsel_regwen_24_we = addr_hit[91] & reg_we & !reg_error;

  assign mio_outsel_regwen_24_wd = reg_wdata[0];
  assign mio_outsel_regwen_25_we = addr_hit[92] & reg_we & !reg_error;

  assign mio_outsel_regwen_25_wd = reg_wdata[0];
  assign mio_outsel_regwen_26_we = addr_hit[93] & reg_we & !reg_error;

  assign mio_outsel_regwen_26_wd = reg_wdata[0];
  assign mio_outsel_regwen_27_we = addr_hit[94] & reg_we & !reg_error;

  assign mio_outsel_regwen_27_wd = reg_wdata[0];
  assign mio_outsel_regwen_28_we = addr_hit[95] & reg_we & !reg_error;

  assign mio_outsel_regwen_28_wd = reg_wdata[0];
  assign mio_outsel_regwen_29_we = addr_hit[96] & reg_we & !reg_error;

  assign mio_outsel_regwen_29_wd = reg_wdata[0];
  assign mio_outsel_regwen_30_we = addr_hit[97] & reg_we & !reg_error;

  assign mio_outsel_regwen_30_wd = reg_wdata[0];
  assign mio_outsel_regwen_31_we = addr_hit[98] & reg_we & !reg_error;

  assign mio_outsel_regwen_31_wd = reg_wdata[0];
  assign mio_outsel_0_we = addr_hit[99] & reg_we & !reg_error;

  assign mio_outsel_0_wd = reg_wdata[5:0];
  assign mio_outsel_1_we = addr_hit[100] & reg_we & !reg_error;

  assign mio_outsel_1_wd = reg_wdata[5:0];
  assign mio_outsel_2_we = addr_hit[101] & reg_we & !reg_error;

  assign mio_outsel_2_wd = reg_wdata[5:0];
  assign mio_outsel_3_we = addr_hit[102] & reg_we & !reg_error;

  assign mio_outsel_3_wd = reg_wdata[5:0];
  assign mio_outsel_4_we = addr_hit[103] & reg_we & !reg_error;

  assign mio_outsel_4_wd = reg_wdata[5:0];
  assign mio_outsel_5_we = addr_hit[104] & reg_we & !reg_error;

  assign mio_outsel_5_wd = reg_wdata[5:0];
  assign mio_outsel_6_we = addr_hit[105] & reg_we & !reg_error;

  assign mio_outsel_6_wd = reg_wdata[5:0];
  assign mio_outsel_7_we = addr_hit[106] & reg_we & !reg_error;

  assign mio_outsel_7_wd = reg_wdata[5:0];
  assign mio_outsel_8_we = addr_hit[107] & reg_we & !reg_error;

  assign mio_outsel_8_wd = reg_wdata[5:0];
  assign mio_outsel_9_we = addr_hit[108] & reg_we & !reg_error;

  assign mio_outsel_9_wd = reg_wdata[5:0];
  assign mio_outsel_10_we = addr_hit[109] & reg_we & !reg_error;

  assign mio_outsel_10_wd = reg_wdata[5:0];
  assign mio_outsel_11_we = addr_hit[110] & reg_we & !reg_error;

  assign mio_outsel_11_wd = reg_wdata[5:0];
  assign mio_outsel_12_we = addr_hit[111] & reg_we & !reg_error;

  assign mio_outsel_12_wd = reg_wdata[5:0];
  assign mio_outsel_13_we = addr_hit[112] & reg_we & !reg_error;

  assign mio_outsel_13_wd = reg_wdata[5:0];
  assign mio_outsel_14_we = addr_hit[113] & reg_we & !reg_error;

  assign mio_outsel_14_wd = reg_wdata[5:0];
  assign mio_outsel_15_we = addr_hit[114] & reg_we & !reg_error;

  assign mio_outsel_15_wd = reg_wdata[5:0];
  assign mio_outsel_16_we = addr_hit[115] & reg_we & !reg_error;

  assign mio_outsel_16_wd = reg_wdata[5:0];
  assign mio_outsel_17_we = addr_hit[116] & reg_we & !reg_error;

  assign mio_outsel_17_wd = reg_wdata[5:0];
  assign mio_outsel_18_we = addr_hit[117] & reg_we & !reg_error;

  assign mio_outsel_18_wd = reg_wdata[5:0];
  assign mio_outsel_19_we = addr_hit[118] & reg_we & !reg_error;

  assign mio_outsel_19_wd = reg_wdata[5:0];
  assign mio_outsel_20_we = addr_hit[119] & reg_we & !reg_error;

  assign mio_outsel_20_wd = reg_wdata[5:0];
  assign mio_outsel_21_we = addr_hit[120] & reg_we & !reg_error;

  assign mio_outsel_21_wd = reg_wdata[5:0];
  assign mio_outsel_22_we = addr_hit[121] & reg_we & !reg_error;

  assign mio_outsel_22_wd = reg_wdata[5:0];
  assign mio_outsel_23_we = addr_hit[122] & reg_we & !reg_error;

  assign mio_outsel_23_wd = reg_wdata[5:0];
  assign mio_outsel_24_we = addr_hit[123] & reg_we & !reg_error;

  assign mio_outsel_24_wd = reg_wdata[5:0];
  assign mio_outsel_25_we = addr_hit[124] & reg_we & !reg_error;

  assign mio_outsel_25_wd = reg_wdata[5:0];
  assign mio_outsel_26_we = addr_hit[125] & reg_we & !reg_error;

  assign mio_outsel_26_wd = reg_wdata[5:0];
  assign mio_outsel_27_we = addr_hit[126] & reg_we & !reg_error;

  assign mio_outsel_27_wd = reg_wdata[5:0];
  assign mio_outsel_28_we = addr_hit[127] & reg_we & !reg_error;

  assign mio_outsel_28_wd = reg_wdata[5:0];
  assign mio_outsel_29_we = addr_hit[128] & reg_we & !reg_error;

  assign mio_outsel_29_wd = reg_wdata[5:0];
  assign mio_outsel_30_we = addr_hit[129] & reg_we & !reg_error;

  assign mio_outsel_30_wd = reg_wdata[5:0];
  assign mio_outsel_31_we = addr_hit[130] & reg_we & !reg_error;

  assign mio_outsel_31_wd = reg_wdata[5:0];
  assign mio_pad_attr_regwen_0_we = addr_hit[131] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_0_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_1_we = addr_hit[132] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_1_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_2_we = addr_hit[133] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_2_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_3_we = addr_hit[134] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_3_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_4_we = addr_hit[135] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_4_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_5_we = addr_hit[136] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_5_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_6_we = addr_hit[137] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_6_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_7_we = addr_hit[138] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_7_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_8_we = addr_hit[139] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_8_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_9_we = addr_hit[140] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_9_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_10_we = addr_hit[141] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_10_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_11_we = addr_hit[142] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_11_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_12_we = addr_hit[143] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_12_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_13_we = addr_hit[144] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_13_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_14_we = addr_hit[145] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_14_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_15_we = addr_hit[146] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_15_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_16_we = addr_hit[147] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_16_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_17_we = addr_hit[148] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_17_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_18_we = addr_hit[149] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_18_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_19_we = addr_hit[150] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_19_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_20_we = addr_hit[151] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_20_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_21_we = addr_hit[152] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_21_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_22_we = addr_hit[153] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_22_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_23_we = addr_hit[154] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_23_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_24_we = addr_hit[155] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_24_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_25_we = addr_hit[156] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_25_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_26_we = addr_hit[157] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_26_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_27_we = addr_hit[158] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_27_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_28_we = addr_hit[159] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_28_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_29_we = addr_hit[160] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_29_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_30_we = addr_hit[161] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_30_wd = reg_wdata[0];
  assign mio_pad_attr_regwen_31_we = addr_hit[162] & reg_we & !reg_error;

  assign mio_pad_attr_regwen_31_wd = reg_wdata[0];
  assign mio_pad_attr_0_re = addr_hit[163] & reg_re & !reg_error;
  assign mio_pad_attr_0_we = addr_hit[163] & reg_we & !reg_error;

  assign mio_pad_attr_0_invert_0_wd = reg_wdata[0];

  assign mio_pad_attr_0_virtual_od_en_0_wd = reg_wdata[1];

  assign mio_pad_attr_0_pull_en_0_wd = reg_wdata[2];

  assign mio_pad_attr_0_pull_select_0_wd = reg_wdata[3];

  assign mio_pad_attr_0_keeper_en_0_wd = reg_wdata[4];

  assign mio_pad_attr_0_schmitt_en_0_wd = reg_wdata[5];

  assign mio_pad_attr_0_od_en_0_wd = reg_wdata[6];

  assign mio_pad_attr_0_slew_rate_0_wd = reg_wdata[17:16];

  assign mio_pad_attr_0_drive_strength_0_wd = reg_wdata[23:20];
  assign mio_pad_attr_1_re = addr_hit[164] & reg_re & !reg_error;
  assign mio_pad_attr_1_we = addr_hit[164] & reg_we & !reg_error;

  assign mio_pad_attr_1_invert_1_wd = reg_wdata[0];

  assign mio_pad_attr_1_virtual_od_en_1_wd = reg_wdata[1];

  assign mio_pad_attr_1_pull_en_1_wd = reg_wdata[2];

  assign mio_pad_attr_1_pull_select_1_wd = reg_wdata[3];

  assign mio_pad_attr_1_keeper_en_1_wd = reg_wdata[4];

  assign mio_pad_attr_1_schmitt_en_1_wd = reg_wdata[5];

  assign mio_pad_attr_1_od_en_1_wd = reg_wdata[6];

  assign mio_pad_attr_1_slew_rate_1_wd = reg_wdata[17:16];

  assign mio_pad_attr_1_drive_strength_1_wd = reg_wdata[23:20];
  assign mio_pad_attr_2_re = addr_hit[165] & reg_re & !reg_error;
  assign mio_pad_attr_2_we = addr_hit[165] & reg_we & !reg_error;

  assign mio_pad_attr_2_invert_2_wd = reg_wdata[0];

  assign mio_pad_attr_2_virtual_od_en_2_wd = reg_wdata[1];

  assign mio_pad_attr_2_pull_en_2_wd = reg_wdata[2];

  assign mio_pad_attr_2_pull_select_2_wd = reg_wdata[3];

  assign mio_pad_attr_2_keeper_en_2_wd = reg_wdata[4];

  assign mio_pad_attr_2_schmitt_en_2_wd = reg_wdata[5];

  assign mio_pad_attr_2_od_en_2_wd = reg_wdata[6];

  assign mio_pad_attr_2_slew_rate_2_wd = reg_wdata[17:16];

  assign mio_pad_attr_2_drive_strength_2_wd = reg_wdata[23:20];
  assign mio_pad_attr_3_re = addr_hit[166] & reg_re & !reg_error;
  assign mio_pad_attr_3_we = addr_hit[166] & reg_we & !reg_error;

  assign mio_pad_attr_3_invert_3_wd = reg_wdata[0];

  assign mio_pad_attr_3_virtual_od_en_3_wd = reg_wdata[1];

  assign mio_pad_attr_3_pull_en_3_wd = reg_wdata[2];

  assign mio_pad_attr_3_pull_select_3_wd = reg_wdata[3];

  assign mio_pad_attr_3_keeper_en_3_wd = reg_wdata[4];

  assign mio_pad_attr_3_schmitt_en_3_wd = reg_wdata[5];

  assign mio_pad_attr_3_od_en_3_wd = reg_wdata[6];

  assign mio_pad_attr_3_slew_rate_3_wd = reg_wdata[17:16];

  assign mio_pad_attr_3_drive_strength_3_wd = reg_wdata[23:20];
  assign mio_pad_attr_4_re = addr_hit[167] & reg_re & !reg_error;
  assign mio_pad_attr_4_we = addr_hit[167] & reg_we & !reg_error;

  assign mio_pad_attr_4_invert_4_wd = reg_wdata[0];

  assign mio_pad_attr_4_virtual_od_en_4_wd = reg_wdata[1];

  assign mio_pad_attr_4_pull_en_4_wd = reg_wdata[2];

  assign mio_pad_attr_4_pull_select_4_wd = reg_wdata[3];

  assign mio_pad_attr_4_keeper_en_4_wd = reg_wdata[4];

  assign mio_pad_attr_4_schmitt_en_4_wd = reg_wdata[5];

  assign mio_pad_attr_4_od_en_4_wd = reg_wdata[6];

  assign mio_pad_attr_4_slew_rate_4_wd = reg_wdata[17:16];

  assign mio_pad_attr_4_drive_strength_4_wd = reg_wdata[23:20];
  assign mio_pad_attr_5_re = addr_hit[168] & reg_re & !reg_error;
  assign mio_pad_attr_5_we = addr_hit[168] & reg_we & !reg_error;

  assign mio_pad_attr_5_invert_5_wd = reg_wdata[0];

  assign mio_pad_attr_5_virtual_od_en_5_wd = reg_wdata[1];

  assign mio_pad_attr_5_pull_en_5_wd = reg_wdata[2];

  assign mio_pad_attr_5_pull_select_5_wd = reg_wdata[3];

  assign mio_pad_attr_5_keeper_en_5_wd = reg_wdata[4];

  assign mio_pad_attr_5_schmitt_en_5_wd = reg_wdata[5];

  assign mio_pad_attr_5_od_en_5_wd = reg_wdata[6];

  assign mio_pad_attr_5_slew_rate_5_wd = reg_wdata[17:16];

  assign mio_pad_attr_5_drive_strength_5_wd = reg_wdata[23:20];
  assign mio_pad_attr_6_re = addr_hit[169] & reg_re & !reg_error;
  assign mio_pad_attr_6_we = addr_hit[169] & reg_we & !reg_error;

  assign mio_pad_attr_6_invert_6_wd = reg_wdata[0];

  assign mio_pad_attr_6_virtual_od_en_6_wd = reg_wdata[1];

  assign mio_pad_attr_6_pull_en_6_wd = reg_wdata[2];

  assign mio_pad_attr_6_pull_select_6_wd = reg_wdata[3];

  assign mio_pad_attr_6_keeper_en_6_wd = reg_wdata[4];

  assign mio_pad_attr_6_schmitt_en_6_wd = reg_wdata[5];

  assign mio_pad_attr_6_od_en_6_wd = reg_wdata[6];

  assign mio_pad_attr_6_slew_rate_6_wd = reg_wdata[17:16];

  assign mio_pad_attr_6_drive_strength_6_wd = reg_wdata[23:20];
  assign mio_pad_attr_7_re = addr_hit[170] & reg_re & !reg_error;
  assign mio_pad_attr_7_we = addr_hit[170] & reg_we & !reg_error;

  assign mio_pad_attr_7_invert_7_wd = reg_wdata[0];

  assign mio_pad_attr_7_virtual_od_en_7_wd = reg_wdata[1];

  assign mio_pad_attr_7_pull_en_7_wd = reg_wdata[2];

  assign mio_pad_attr_7_pull_select_7_wd = reg_wdata[3];

  assign mio_pad_attr_7_keeper_en_7_wd = reg_wdata[4];

  assign mio_pad_attr_7_schmitt_en_7_wd = reg_wdata[5];

  assign mio_pad_attr_7_od_en_7_wd = reg_wdata[6];

  assign mio_pad_attr_7_slew_rate_7_wd = reg_wdata[17:16];

  assign mio_pad_attr_7_drive_strength_7_wd = reg_wdata[23:20];
  assign mio_pad_attr_8_re = addr_hit[171] & reg_re & !reg_error;
  assign mio_pad_attr_8_we = addr_hit[171] & reg_we & !reg_error;

  assign mio_pad_attr_8_invert_8_wd = reg_wdata[0];

  assign mio_pad_attr_8_virtual_od_en_8_wd = reg_wdata[1];

  assign mio_pad_attr_8_pull_en_8_wd = reg_wdata[2];

  assign mio_pad_attr_8_pull_select_8_wd = reg_wdata[3];

  assign mio_pad_attr_8_keeper_en_8_wd = reg_wdata[4];

  assign mio_pad_attr_8_schmitt_en_8_wd = reg_wdata[5];

  assign mio_pad_attr_8_od_en_8_wd = reg_wdata[6];

  assign mio_pad_attr_8_slew_rate_8_wd = reg_wdata[17:16];

  assign mio_pad_attr_8_drive_strength_8_wd = reg_wdata[23:20];
  assign mio_pad_attr_9_re = addr_hit[172] & reg_re & !reg_error;
  assign mio_pad_attr_9_we = addr_hit[172] & reg_we & !reg_error;

  assign mio_pad_attr_9_invert_9_wd = reg_wdata[0];

  assign mio_pad_attr_9_virtual_od_en_9_wd = reg_wdata[1];

  assign mio_pad_attr_9_pull_en_9_wd = reg_wdata[2];

  assign mio_pad_attr_9_pull_select_9_wd = reg_wdata[3];

  assign mio_pad_attr_9_keeper_en_9_wd = reg_wdata[4];

  assign mio_pad_attr_9_schmitt_en_9_wd = reg_wdata[5];

  assign mio_pad_attr_9_od_en_9_wd = reg_wdata[6];

  assign mio_pad_attr_9_slew_rate_9_wd = reg_wdata[17:16];

  assign mio_pad_attr_9_drive_strength_9_wd = reg_wdata[23:20];
  assign mio_pad_attr_10_re = addr_hit[173] & reg_re & !reg_error;
  assign mio_pad_attr_10_we = addr_hit[173] & reg_we & !reg_error;

  assign mio_pad_attr_10_invert_10_wd = reg_wdata[0];

  assign mio_pad_attr_10_virtual_od_en_10_wd = reg_wdata[1];

  assign mio_pad_attr_10_pull_en_10_wd = reg_wdata[2];

  assign mio_pad_attr_10_pull_select_10_wd = reg_wdata[3];

  assign mio_pad_attr_10_keeper_en_10_wd = reg_wdata[4];

  assign mio_pad_attr_10_schmitt_en_10_wd = reg_wdata[5];

  assign mio_pad_attr_10_od_en_10_wd = reg_wdata[6];

  assign mio_pad_attr_10_slew_rate_10_wd = reg_wdata[17:16];

  assign mio_pad_attr_10_drive_strength_10_wd = reg_wdata[23:20];
  assign mio_pad_attr_11_re = addr_hit[174] & reg_re & !reg_error;
  assign mio_pad_attr_11_we = addr_hit[174] & reg_we & !reg_error;

  assign mio_pad_attr_11_invert_11_wd = reg_wdata[0];

  assign mio_pad_attr_11_virtual_od_en_11_wd = reg_wdata[1];

  assign mio_pad_attr_11_pull_en_11_wd = reg_wdata[2];

  assign mio_pad_attr_11_pull_select_11_wd = reg_wdata[3];

  assign mio_pad_attr_11_keeper_en_11_wd = reg_wdata[4];

  assign mio_pad_attr_11_schmitt_en_11_wd = reg_wdata[5];

  assign mio_pad_attr_11_od_en_11_wd = reg_wdata[6];

  assign mio_pad_attr_11_slew_rate_11_wd = reg_wdata[17:16];

  assign mio_pad_attr_11_drive_strength_11_wd = reg_wdata[23:20];
  assign mio_pad_attr_12_re = addr_hit[175] & reg_re & !reg_error;
  assign mio_pad_attr_12_we = addr_hit[175] & reg_we & !reg_error;

  assign mio_pad_attr_12_invert_12_wd = reg_wdata[0];

  assign mio_pad_attr_12_virtual_od_en_12_wd = reg_wdata[1];

  assign mio_pad_attr_12_pull_en_12_wd = reg_wdata[2];

  assign mio_pad_attr_12_pull_select_12_wd = reg_wdata[3];

  assign mio_pad_attr_12_keeper_en_12_wd = reg_wdata[4];

  assign mio_pad_attr_12_schmitt_en_12_wd = reg_wdata[5];

  assign mio_pad_attr_12_od_en_12_wd = reg_wdata[6];

  assign mio_pad_attr_12_slew_rate_12_wd = reg_wdata[17:16];

  assign mio_pad_attr_12_drive_strength_12_wd = reg_wdata[23:20];
  assign mio_pad_attr_13_re = addr_hit[176] & reg_re & !reg_error;
  assign mio_pad_attr_13_we = addr_hit[176] & reg_we & !reg_error;

  assign mio_pad_attr_13_invert_13_wd = reg_wdata[0];

  assign mio_pad_attr_13_virtual_od_en_13_wd = reg_wdata[1];

  assign mio_pad_attr_13_pull_en_13_wd = reg_wdata[2];

  assign mio_pad_attr_13_pull_select_13_wd = reg_wdata[3];

  assign mio_pad_attr_13_keeper_en_13_wd = reg_wdata[4];

  assign mio_pad_attr_13_schmitt_en_13_wd = reg_wdata[5];

  assign mio_pad_attr_13_od_en_13_wd = reg_wdata[6];

  assign mio_pad_attr_13_slew_rate_13_wd = reg_wdata[17:16];

  assign mio_pad_attr_13_drive_strength_13_wd = reg_wdata[23:20];
  assign mio_pad_attr_14_re = addr_hit[177] & reg_re & !reg_error;
  assign mio_pad_attr_14_we = addr_hit[177] & reg_we & !reg_error;

  assign mio_pad_attr_14_invert_14_wd = reg_wdata[0];

  assign mio_pad_attr_14_virtual_od_en_14_wd = reg_wdata[1];

  assign mio_pad_attr_14_pull_en_14_wd = reg_wdata[2];

  assign mio_pad_attr_14_pull_select_14_wd = reg_wdata[3];

  assign mio_pad_attr_14_keeper_en_14_wd = reg_wdata[4];

  assign mio_pad_attr_14_schmitt_en_14_wd = reg_wdata[5];

  assign mio_pad_attr_14_od_en_14_wd = reg_wdata[6];

  assign mio_pad_attr_14_slew_rate_14_wd = reg_wdata[17:16];

  assign mio_pad_attr_14_drive_strength_14_wd = reg_wdata[23:20];
  assign mio_pad_attr_15_re = addr_hit[178] & reg_re & !reg_error;
  assign mio_pad_attr_15_we = addr_hit[178] & reg_we & !reg_error;

  assign mio_pad_attr_15_invert_15_wd = reg_wdata[0];

  assign mio_pad_attr_15_virtual_od_en_15_wd = reg_wdata[1];

  assign mio_pad_attr_15_pull_en_15_wd = reg_wdata[2];

  assign mio_pad_attr_15_pull_select_15_wd = reg_wdata[3];

  assign mio_pad_attr_15_keeper_en_15_wd = reg_wdata[4];

  assign mio_pad_attr_15_schmitt_en_15_wd = reg_wdata[5];

  assign mio_pad_attr_15_od_en_15_wd = reg_wdata[6];

  assign mio_pad_attr_15_slew_rate_15_wd = reg_wdata[17:16];

  assign mio_pad_attr_15_drive_strength_15_wd = reg_wdata[23:20];
  assign mio_pad_attr_16_re = addr_hit[179] & reg_re & !reg_error;
  assign mio_pad_attr_16_we = addr_hit[179] & reg_we & !reg_error;

  assign mio_pad_attr_16_invert_16_wd = reg_wdata[0];

  assign mio_pad_attr_16_virtual_od_en_16_wd = reg_wdata[1];

  assign mio_pad_attr_16_pull_en_16_wd = reg_wdata[2];

  assign mio_pad_attr_16_pull_select_16_wd = reg_wdata[3];

  assign mio_pad_attr_16_keeper_en_16_wd = reg_wdata[4];

  assign mio_pad_attr_16_schmitt_en_16_wd = reg_wdata[5];

  assign mio_pad_attr_16_od_en_16_wd = reg_wdata[6];

  assign mio_pad_attr_16_slew_rate_16_wd = reg_wdata[17:16];

  assign mio_pad_attr_16_drive_strength_16_wd = reg_wdata[23:20];
  assign mio_pad_attr_17_re = addr_hit[180] & reg_re & !reg_error;
  assign mio_pad_attr_17_we = addr_hit[180] & reg_we & !reg_error;

  assign mio_pad_attr_17_invert_17_wd = reg_wdata[0];

  assign mio_pad_attr_17_virtual_od_en_17_wd = reg_wdata[1];

  assign mio_pad_attr_17_pull_en_17_wd = reg_wdata[2];

  assign mio_pad_attr_17_pull_select_17_wd = reg_wdata[3];

  assign mio_pad_attr_17_keeper_en_17_wd = reg_wdata[4];

  assign mio_pad_attr_17_schmitt_en_17_wd = reg_wdata[5];

  assign mio_pad_attr_17_od_en_17_wd = reg_wdata[6];

  assign mio_pad_attr_17_slew_rate_17_wd = reg_wdata[17:16];

  assign mio_pad_attr_17_drive_strength_17_wd = reg_wdata[23:20];
  assign mio_pad_attr_18_re = addr_hit[181] & reg_re & !reg_error;
  assign mio_pad_attr_18_we = addr_hit[181] & reg_we & !reg_error;

  assign mio_pad_attr_18_invert_18_wd = reg_wdata[0];

  assign mio_pad_attr_18_virtual_od_en_18_wd = reg_wdata[1];

  assign mio_pad_attr_18_pull_en_18_wd = reg_wdata[2];

  assign mio_pad_attr_18_pull_select_18_wd = reg_wdata[3];

  assign mio_pad_attr_18_keeper_en_18_wd = reg_wdata[4];

  assign mio_pad_attr_18_schmitt_en_18_wd = reg_wdata[5];

  assign mio_pad_attr_18_od_en_18_wd = reg_wdata[6];

  assign mio_pad_attr_18_slew_rate_18_wd = reg_wdata[17:16];

  assign mio_pad_attr_18_drive_strength_18_wd = reg_wdata[23:20];
  assign mio_pad_attr_19_re = addr_hit[182] & reg_re & !reg_error;
  assign mio_pad_attr_19_we = addr_hit[182] & reg_we & !reg_error;

  assign mio_pad_attr_19_invert_19_wd = reg_wdata[0];

  assign mio_pad_attr_19_virtual_od_en_19_wd = reg_wdata[1];

  assign mio_pad_attr_19_pull_en_19_wd = reg_wdata[2];

  assign mio_pad_attr_19_pull_select_19_wd = reg_wdata[3];

  assign mio_pad_attr_19_keeper_en_19_wd = reg_wdata[4];

  assign mio_pad_attr_19_schmitt_en_19_wd = reg_wdata[5];

  assign mio_pad_attr_19_od_en_19_wd = reg_wdata[6];

  assign mio_pad_attr_19_slew_rate_19_wd = reg_wdata[17:16];

  assign mio_pad_attr_19_drive_strength_19_wd = reg_wdata[23:20];
  assign mio_pad_attr_20_re = addr_hit[183] & reg_re & !reg_error;
  assign mio_pad_attr_20_we = addr_hit[183] & reg_we & !reg_error;

  assign mio_pad_attr_20_invert_20_wd = reg_wdata[0];

  assign mio_pad_attr_20_virtual_od_en_20_wd = reg_wdata[1];

  assign mio_pad_attr_20_pull_en_20_wd = reg_wdata[2];

  assign mio_pad_attr_20_pull_select_20_wd = reg_wdata[3];

  assign mio_pad_attr_20_keeper_en_20_wd = reg_wdata[4];

  assign mio_pad_attr_20_schmitt_en_20_wd = reg_wdata[5];

  assign mio_pad_attr_20_od_en_20_wd = reg_wdata[6];

  assign mio_pad_attr_20_slew_rate_20_wd = reg_wdata[17:16];

  assign mio_pad_attr_20_drive_strength_20_wd = reg_wdata[23:20];
  assign mio_pad_attr_21_re = addr_hit[184] & reg_re & !reg_error;
  assign mio_pad_attr_21_we = addr_hit[184] & reg_we & !reg_error;

  assign mio_pad_attr_21_invert_21_wd = reg_wdata[0];

  assign mio_pad_attr_21_virtual_od_en_21_wd = reg_wdata[1];

  assign mio_pad_attr_21_pull_en_21_wd = reg_wdata[2];

  assign mio_pad_attr_21_pull_select_21_wd = reg_wdata[3];

  assign mio_pad_attr_21_keeper_en_21_wd = reg_wdata[4];

  assign mio_pad_attr_21_schmitt_en_21_wd = reg_wdata[5];

  assign mio_pad_attr_21_od_en_21_wd = reg_wdata[6];

  assign mio_pad_attr_21_slew_rate_21_wd = reg_wdata[17:16];

  assign mio_pad_attr_21_drive_strength_21_wd = reg_wdata[23:20];
  assign mio_pad_attr_22_re = addr_hit[185] & reg_re & !reg_error;
  assign mio_pad_attr_22_we = addr_hit[185] & reg_we & !reg_error;

  assign mio_pad_attr_22_invert_22_wd = reg_wdata[0];

  assign mio_pad_attr_22_virtual_od_en_22_wd = reg_wdata[1];

  assign mio_pad_attr_22_pull_en_22_wd = reg_wdata[2];

  assign mio_pad_attr_22_pull_select_22_wd = reg_wdata[3];

  assign mio_pad_attr_22_keeper_en_22_wd = reg_wdata[4];

  assign mio_pad_attr_22_schmitt_en_22_wd = reg_wdata[5];

  assign mio_pad_attr_22_od_en_22_wd = reg_wdata[6];

  assign mio_pad_attr_22_slew_rate_22_wd = reg_wdata[17:16];

  assign mio_pad_attr_22_drive_strength_22_wd = reg_wdata[23:20];
  assign mio_pad_attr_23_re = addr_hit[186] & reg_re & !reg_error;
  assign mio_pad_attr_23_we = addr_hit[186] & reg_we & !reg_error;

  assign mio_pad_attr_23_invert_23_wd = reg_wdata[0];

  assign mio_pad_attr_23_virtual_od_en_23_wd = reg_wdata[1];

  assign mio_pad_attr_23_pull_en_23_wd = reg_wdata[2];

  assign mio_pad_attr_23_pull_select_23_wd = reg_wdata[3];

  assign mio_pad_attr_23_keeper_en_23_wd = reg_wdata[4];

  assign mio_pad_attr_23_schmitt_en_23_wd = reg_wdata[5];

  assign mio_pad_attr_23_od_en_23_wd = reg_wdata[6];

  assign mio_pad_attr_23_slew_rate_23_wd = reg_wdata[17:16];

  assign mio_pad_attr_23_drive_strength_23_wd = reg_wdata[23:20];
  assign mio_pad_attr_24_re = addr_hit[187] & reg_re & !reg_error;
  assign mio_pad_attr_24_we = addr_hit[187] & reg_we & !reg_error;

  assign mio_pad_attr_24_invert_24_wd = reg_wdata[0];

  assign mio_pad_attr_24_virtual_od_en_24_wd = reg_wdata[1];

  assign mio_pad_attr_24_pull_en_24_wd = reg_wdata[2];

  assign mio_pad_attr_24_pull_select_24_wd = reg_wdata[3];

  assign mio_pad_attr_24_keeper_en_24_wd = reg_wdata[4];

  assign mio_pad_attr_24_schmitt_en_24_wd = reg_wdata[5];

  assign mio_pad_attr_24_od_en_24_wd = reg_wdata[6];

  assign mio_pad_attr_24_slew_rate_24_wd = reg_wdata[17:16];

  assign mio_pad_attr_24_drive_strength_24_wd = reg_wdata[23:20];
  assign mio_pad_attr_25_re = addr_hit[188] & reg_re & !reg_error;
  assign mio_pad_attr_25_we = addr_hit[188] & reg_we & !reg_error;

  assign mio_pad_attr_25_invert_25_wd = reg_wdata[0];

  assign mio_pad_attr_25_virtual_od_en_25_wd = reg_wdata[1];

  assign mio_pad_attr_25_pull_en_25_wd = reg_wdata[2];

  assign mio_pad_attr_25_pull_select_25_wd = reg_wdata[3];

  assign mio_pad_attr_25_keeper_en_25_wd = reg_wdata[4];

  assign mio_pad_attr_25_schmitt_en_25_wd = reg_wdata[5];

  assign mio_pad_attr_25_od_en_25_wd = reg_wdata[6];

  assign mio_pad_attr_25_slew_rate_25_wd = reg_wdata[17:16];

  assign mio_pad_attr_25_drive_strength_25_wd = reg_wdata[23:20];
  assign mio_pad_attr_26_re = addr_hit[189] & reg_re & !reg_error;
  assign mio_pad_attr_26_we = addr_hit[189] & reg_we & !reg_error;

  assign mio_pad_attr_26_invert_26_wd = reg_wdata[0];

  assign mio_pad_attr_26_virtual_od_en_26_wd = reg_wdata[1];

  assign mio_pad_attr_26_pull_en_26_wd = reg_wdata[2];

  assign mio_pad_attr_26_pull_select_26_wd = reg_wdata[3];

  assign mio_pad_attr_26_keeper_en_26_wd = reg_wdata[4];

  assign mio_pad_attr_26_schmitt_en_26_wd = reg_wdata[5];

  assign mio_pad_attr_26_od_en_26_wd = reg_wdata[6];

  assign mio_pad_attr_26_slew_rate_26_wd = reg_wdata[17:16];

  assign mio_pad_attr_26_drive_strength_26_wd = reg_wdata[23:20];
  assign mio_pad_attr_27_re = addr_hit[190] & reg_re & !reg_error;
  assign mio_pad_attr_27_we = addr_hit[190] & reg_we & !reg_error;

  assign mio_pad_attr_27_invert_27_wd = reg_wdata[0];

  assign mio_pad_attr_27_virtual_od_en_27_wd = reg_wdata[1];

  assign mio_pad_attr_27_pull_en_27_wd = reg_wdata[2];

  assign mio_pad_attr_27_pull_select_27_wd = reg_wdata[3];

  assign mio_pad_attr_27_keeper_en_27_wd = reg_wdata[4];

  assign mio_pad_attr_27_schmitt_en_27_wd = reg_wdata[5];

  assign mio_pad_attr_27_od_en_27_wd = reg_wdata[6];

  assign mio_pad_attr_27_slew_rate_27_wd = reg_wdata[17:16];

  assign mio_pad_attr_27_drive_strength_27_wd = reg_wdata[23:20];
  assign mio_pad_attr_28_re = addr_hit[191] & reg_re & !reg_error;
  assign mio_pad_attr_28_we = addr_hit[191] & reg_we & !reg_error;

  assign mio_pad_attr_28_invert_28_wd = reg_wdata[0];

  assign mio_pad_attr_28_virtual_od_en_28_wd = reg_wdata[1];

  assign mio_pad_attr_28_pull_en_28_wd = reg_wdata[2];

  assign mio_pad_attr_28_pull_select_28_wd = reg_wdata[3];

  assign mio_pad_attr_28_keeper_en_28_wd = reg_wdata[4];

  assign mio_pad_attr_28_schmitt_en_28_wd = reg_wdata[5];

  assign mio_pad_attr_28_od_en_28_wd = reg_wdata[6];

  assign mio_pad_attr_28_slew_rate_28_wd = reg_wdata[17:16];

  assign mio_pad_attr_28_drive_strength_28_wd = reg_wdata[23:20];
  assign mio_pad_attr_29_re = addr_hit[192] & reg_re & !reg_error;
  assign mio_pad_attr_29_we = addr_hit[192] & reg_we & !reg_error;

  assign mio_pad_attr_29_invert_29_wd = reg_wdata[0];

  assign mio_pad_attr_29_virtual_od_en_29_wd = reg_wdata[1];

  assign mio_pad_attr_29_pull_en_29_wd = reg_wdata[2];

  assign mio_pad_attr_29_pull_select_29_wd = reg_wdata[3];

  assign mio_pad_attr_29_keeper_en_29_wd = reg_wdata[4];

  assign mio_pad_attr_29_schmitt_en_29_wd = reg_wdata[5];

  assign mio_pad_attr_29_od_en_29_wd = reg_wdata[6];

  assign mio_pad_attr_29_slew_rate_29_wd = reg_wdata[17:16];

  assign mio_pad_attr_29_drive_strength_29_wd = reg_wdata[23:20];
  assign mio_pad_attr_30_re = addr_hit[193] & reg_re & !reg_error;
  assign mio_pad_attr_30_we = addr_hit[193] & reg_we & !reg_error;

  assign mio_pad_attr_30_invert_30_wd = reg_wdata[0];

  assign mio_pad_attr_30_virtual_od_en_30_wd = reg_wdata[1];

  assign mio_pad_attr_30_pull_en_30_wd = reg_wdata[2];

  assign mio_pad_attr_30_pull_select_30_wd = reg_wdata[3];

  assign mio_pad_attr_30_keeper_en_30_wd = reg_wdata[4];

  assign mio_pad_attr_30_schmitt_en_30_wd = reg_wdata[5];

  assign mio_pad_attr_30_od_en_30_wd = reg_wdata[6];

  assign mio_pad_attr_30_slew_rate_30_wd = reg_wdata[17:16];

  assign mio_pad_attr_30_drive_strength_30_wd = reg_wdata[23:20];
  assign mio_pad_attr_31_re = addr_hit[194] & reg_re & !reg_error;
  assign mio_pad_attr_31_we = addr_hit[194] & reg_we & !reg_error;

  assign mio_pad_attr_31_invert_31_wd = reg_wdata[0];

  assign mio_pad_attr_31_virtual_od_en_31_wd = reg_wdata[1];

  assign mio_pad_attr_31_pull_en_31_wd = reg_wdata[2];

  assign mio_pad_attr_31_pull_select_31_wd = reg_wdata[3];

  assign mio_pad_attr_31_keeper_en_31_wd = reg_wdata[4];

  assign mio_pad_attr_31_schmitt_en_31_wd = reg_wdata[5];

  assign mio_pad_attr_31_od_en_31_wd = reg_wdata[6];

  assign mio_pad_attr_31_slew_rate_31_wd = reg_wdata[17:16];

  assign mio_pad_attr_31_drive_strength_31_wd = reg_wdata[23:20];
  assign dio_pad_attr_regwen_0_we = addr_hit[195] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_0_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_1_we = addr_hit[196] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_1_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_2_we = addr_hit[197] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_2_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_3_we = addr_hit[198] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_3_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_4_we = addr_hit[199] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_4_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_5_we = addr_hit[200] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_5_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_6_we = addr_hit[201] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_6_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_7_we = addr_hit[202] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_7_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_8_we = addr_hit[203] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_8_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_9_we = addr_hit[204] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_9_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_10_we = addr_hit[205] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_10_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_11_we = addr_hit[206] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_11_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_12_we = addr_hit[207] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_12_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_13_we = addr_hit[208] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_13_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_14_we = addr_hit[209] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_14_wd = reg_wdata[0];
  assign dio_pad_attr_regwen_15_we = addr_hit[210] & reg_we & !reg_error;

  assign dio_pad_attr_regwen_15_wd = reg_wdata[0];
  assign dio_pad_attr_0_re = addr_hit[211] & reg_re & !reg_error;
  assign dio_pad_attr_0_we = addr_hit[211] & reg_we & !reg_error;

  assign dio_pad_attr_0_invert_0_wd = reg_wdata[0];

  assign dio_pad_attr_0_virtual_od_en_0_wd = reg_wdata[1];

  assign dio_pad_attr_0_pull_en_0_wd = reg_wdata[2];

  assign dio_pad_attr_0_pull_select_0_wd = reg_wdata[3];

  assign dio_pad_attr_0_keeper_en_0_wd = reg_wdata[4];

  assign dio_pad_attr_0_schmitt_en_0_wd = reg_wdata[5];

  assign dio_pad_attr_0_od_en_0_wd = reg_wdata[6];

  assign dio_pad_attr_0_slew_rate_0_wd = reg_wdata[17:16];

  assign dio_pad_attr_0_drive_strength_0_wd = reg_wdata[23:20];
  assign dio_pad_attr_1_re = addr_hit[212] & reg_re & !reg_error;
  assign dio_pad_attr_1_we = addr_hit[212] & reg_we & !reg_error;

  assign dio_pad_attr_1_invert_1_wd = reg_wdata[0];

  assign dio_pad_attr_1_virtual_od_en_1_wd = reg_wdata[1];

  assign dio_pad_attr_1_pull_en_1_wd = reg_wdata[2];

  assign dio_pad_attr_1_pull_select_1_wd = reg_wdata[3];

  assign dio_pad_attr_1_keeper_en_1_wd = reg_wdata[4];

  assign dio_pad_attr_1_schmitt_en_1_wd = reg_wdata[5];

  assign dio_pad_attr_1_od_en_1_wd = reg_wdata[6];

  assign dio_pad_attr_1_slew_rate_1_wd = reg_wdata[17:16];

  assign dio_pad_attr_1_drive_strength_1_wd = reg_wdata[23:20];
  assign dio_pad_attr_2_re = addr_hit[213] & reg_re & !reg_error;
  assign dio_pad_attr_2_we = addr_hit[213] & reg_we & !reg_error;

  assign dio_pad_attr_2_invert_2_wd = reg_wdata[0];

  assign dio_pad_attr_2_virtual_od_en_2_wd = reg_wdata[1];

  assign dio_pad_attr_2_pull_en_2_wd = reg_wdata[2];

  assign dio_pad_attr_2_pull_select_2_wd = reg_wdata[3];

  assign dio_pad_attr_2_keeper_en_2_wd = reg_wdata[4];

  assign dio_pad_attr_2_schmitt_en_2_wd = reg_wdata[5];

  assign dio_pad_attr_2_od_en_2_wd = reg_wdata[6];

  assign dio_pad_attr_2_slew_rate_2_wd = reg_wdata[17:16];

  assign dio_pad_attr_2_drive_strength_2_wd = reg_wdata[23:20];
  assign dio_pad_attr_3_re = addr_hit[214] & reg_re & !reg_error;
  assign dio_pad_attr_3_we = addr_hit[214] & reg_we & !reg_error;

  assign dio_pad_attr_3_invert_3_wd = reg_wdata[0];

  assign dio_pad_attr_3_virtual_od_en_3_wd = reg_wdata[1];

  assign dio_pad_attr_3_pull_en_3_wd = reg_wdata[2];

  assign dio_pad_attr_3_pull_select_3_wd = reg_wdata[3];

  assign dio_pad_attr_3_keeper_en_3_wd = reg_wdata[4];

  assign dio_pad_attr_3_schmitt_en_3_wd = reg_wdata[5];

  assign dio_pad_attr_3_od_en_3_wd = reg_wdata[6];

  assign dio_pad_attr_3_slew_rate_3_wd = reg_wdata[17:16];

  assign dio_pad_attr_3_drive_strength_3_wd = reg_wdata[23:20];
  assign dio_pad_attr_4_re = addr_hit[215] & reg_re & !reg_error;
  assign dio_pad_attr_4_we = addr_hit[215] & reg_we & !reg_error;

  assign dio_pad_attr_4_invert_4_wd = reg_wdata[0];

  assign dio_pad_attr_4_virtual_od_en_4_wd = reg_wdata[1];

  assign dio_pad_attr_4_pull_en_4_wd = reg_wdata[2];

  assign dio_pad_attr_4_pull_select_4_wd = reg_wdata[3];

  assign dio_pad_attr_4_keeper_en_4_wd = reg_wdata[4];

  assign dio_pad_attr_4_schmitt_en_4_wd = reg_wdata[5];

  assign dio_pad_attr_4_od_en_4_wd = reg_wdata[6];

  assign dio_pad_attr_4_slew_rate_4_wd = reg_wdata[17:16];

  assign dio_pad_attr_4_drive_strength_4_wd = reg_wdata[23:20];
  assign dio_pad_attr_5_re = addr_hit[216] & reg_re & !reg_error;
  assign dio_pad_attr_5_we = addr_hit[216] & reg_we & !reg_error;

  assign dio_pad_attr_5_invert_5_wd = reg_wdata[0];

  assign dio_pad_attr_5_virtual_od_en_5_wd = reg_wdata[1];

  assign dio_pad_attr_5_pull_en_5_wd = reg_wdata[2];

  assign dio_pad_attr_5_pull_select_5_wd = reg_wdata[3];

  assign dio_pad_attr_5_keeper_en_5_wd = reg_wdata[4];

  assign dio_pad_attr_5_schmitt_en_5_wd = reg_wdata[5];

  assign dio_pad_attr_5_od_en_5_wd = reg_wdata[6];

  assign dio_pad_attr_5_slew_rate_5_wd = reg_wdata[17:16];

  assign dio_pad_attr_5_drive_strength_5_wd = reg_wdata[23:20];
  assign dio_pad_attr_6_re = addr_hit[217] & reg_re & !reg_error;
  assign dio_pad_attr_6_we = addr_hit[217] & reg_we & !reg_error;

  assign dio_pad_attr_6_invert_6_wd = reg_wdata[0];

  assign dio_pad_attr_6_virtual_od_en_6_wd = reg_wdata[1];

  assign dio_pad_attr_6_pull_en_6_wd = reg_wdata[2];

  assign dio_pad_attr_6_pull_select_6_wd = reg_wdata[3];

  assign dio_pad_attr_6_keeper_en_6_wd = reg_wdata[4];

  assign dio_pad_attr_6_schmitt_en_6_wd = reg_wdata[5];

  assign dio_pad_attr_6_od_en_6_wd = reg_wdata[6];

  assign dio_pad_attr_6_slew_rate_6_wd = reg_wdata[17:16];

  assign dio_pad_attr_6_drive_strength_6_wd = reg_wdata[23:20];
  assign dio_pad_attr_7_re = addr_hit[218] & reg_re & !reg_error;
  assign dio_pad_attr_7_we = addr_hit[218] & reg_we & !reg_error;

  assign dio_pad_attr_7_invert_7_wd = reg_wdata[0];

  assign dio_pad_attr_7_virtual_od_en_7_wd = reg_wdata[1];

  assign dio_pad_attr_7_pull_en_7_wd = reg_wdata[2];

  assign dio_pad_attr_7_pull_select_7_wd = reg_wdata[3];

  assign dio_pad_attr_7_keeper_en_7_wd = reg_wdata[4];

  assign dio_pad_attr_7_schmitt_en_7_wd = reg_wdata[5];

  assign dio_pad_attr_7_od_en_7_wd = reg_wdata[6];

  assign dio_pad_attr_7_slew_rate_7_wd = reg_wdata[17:16];

  assign dio_pad_attr_7_drive_strength_7_wd = reg_wdata[23:20];
  assign dio_pad_attr_8_re = addr_hit[219] & reg_re & !reg_error;
  assign dio_pad_attr_8_we = addr_hit[219] & reg_we & !reg_error;

  assign dio_pad_attr_8_invert_8_wd = reg_wdata[0];

  assign dio_pad_attr_8_virtual_od_en_8_wd = reg_wdata[1];

  assign dio_pad_attr_8_pull_en_8_wd = reg_wdata[2];

  assign dio_pad_attr_8_pull_select_8_wd = reg_wdata[3];

  assign dio_pad_attr_8_keeper_en_8_wd = reg_wdata[4];

  assign dio_pad_attr_8_schmitt_en_8_wd = reg_wdata[5];

  assign dio_pad_attr_8_od_en_8_wd = reg_wdata[6];

  assign dio_pad_attr_8_slew_rate_8_wd = reg_wdata[17:16];

  assign dio_pad_attr_8_drive_strength_8_wd = reg_wdata[23:20];
  assign dio_pad_attr_9_re = addr_hit[220] & reg_re & !reg_error;
  assign dio_pad_attr_9_we = addr_hit[220] & reg_we & !reg_error;

  assign dio_pad_attr_9_invert_9_wd = reg_wdata[0];

  assign dio_pad_attr_9_virtual_od_en_9_wd = reg_wdata[1];

  assign dio_pad_attr_9_pull_en_9_wd = reg_wdata[2];

  assign dio_pad_attr_9_pull_select_9_wd = reg_wdata[3];

  assign dio_pad_attr_9_keeper_en_9_wd = reg_wdata[4];

  assign dio_pad_attr_9_schmitt_en_9_wd = reg_wdata[5];

  assign dio_pad_attr_9_od_en_9_wd = reg_wdata[6];

  assign dio_pad_attr_9_slew_rate_9_wd = reg_wdata[17:16];

  assign dio_pad_attr_9_drive_strength_9_wd = reg_wdata[23:20];
  assign dio_pad_attr_10_re = addr_hit[221] & reg_re & !reg_error;
  assign dio_pad_attr_10_we = addr_hit[221] & reg_we & !reg_error;

  assign dio_pad_attr_10_invert_10_wd = reg_wdata[0];

  assign dio_pad_attr_10_virtual_od_en_10_wd = reg_wdata[1];

  assign dio_pad_attr_10_pull_en_10_wd = reg_wdata[2];

  assign dio_pad_attr_10_pull_select_10_wd = reg_wdata[3];

  assign dio_pad_attr_10_keeper_en_10_wd = reg_wdata[4];

  assign dio_pad_attr_10_schmitt_en_10_wd = reg_wdata[5];

  assign dio_pad_attr_10_od_en_10_wd = reg_wdata[6];

  assign dio_pad_attr_10_slew_rate_10_wd = reg_wdata[17:16];

  assign dio_pad_attr_10_drive_strength_10_wd = reg_wdata[23:20];
  assign dio_pad_attr_11_re = addr_hit[222] & reg_re & !reg_error;
  assign dio_pad_attr_11_we = addr_hit[222] & reg_we & !reg_error;

  assign dio_pad_attr_11_invert_11_wd = reg_wdata[0];

  assign dio_pad_attr_11_virtual_od_en_11_wd = reg_wdata[1];

  assign dio_pad_attr_11_pull_en_11_wd = reg_wdata[2];

  assign dio_pad_attr_11_pull_select_11_wd = reg_wdata[3];

  assign dio_pad_attr_11_keeper_en_11_wd = reg_wdata[4];

  assign dio_pad_attr_11_schmitt_en_11_wd = reg_wdata[5];

  assign dio_pad_attr_11_od_en_11_wd = reg_wdata[6];

  assign dio_pad_attr_11_slew_rate_11_wd = reg_wdata[17:16];

  assign dio_pad_attr_11_drive_strength_11_wd = reg_wdata[23:20];
  assign dio_pad_attr_12_re = addr_hit[223] & reg_re & !reg_error;
  assign dio_pad_attr_12_we = addr_hit[223] & reg_we & !reg_error;

  assign dio_pad_attr_12_invert_12_wd = reg_wdata[0];

  assign dio_pad_attr_12_virtual_od_en_12_wd = reg_wdata[1];

  assign dio_pad_attr_12_pull_en_12_wd = reg_wdata[2];

  assign dio_pad_attr_12_pull_select_12_wd = reg_wdata[3];

  assign dio_pad_attr_12_keeper_en_12_wd = reg_wdata[4];

  assign dio_pad_attr_12_schmitt_en_12_wd = reg_wdata[5];

  assign dio_pad_attr_12_od_en_12_wd = reg_wdata[6];

  assign dio_pad_attr_12_slew_rate_12_wd = reg_wdata[17:16];

  assign dio_pad_attr_12_drive_strength_12_wd = reg_wdata[23:20];
  assign dio_pad_attr_13_re = addr_hit[224] & reg_re & !reg_error;
  assign dio_pad_attr_13_we = addr_hit[224] & reg_we & !reg_error;

  assign dio_pad_attr_13_invert_13_wd = reg_wdata[0];

  assign dio_pad_attr_13_virtual_od_en_13_wd = reg_wdata[1];

  assign dio_pad_attr_13_pull_en_13_wd = reg_wdata[2];

  assign dio_pad_attr_13_pull_select_13_wd = reg_wdata[3];

  assign dio_pad_attr_13_keeper_en_13_wd = reg_wdata[4];

  assign dio_pad_attr_13_schmitt_en_13_wd = reg_wdata[5];

  assign dio_pad_attr_13_od_en_13_wd = reg_wdata[6];

  assign dio_pad_attr_13_slew_rate_13_wd = reg_wdata[17:16];

  assign dio_pad_attr_13_drive_strength_13_wd = reg_wdata[23:20];
  assign dio_pad_attr_14_re = addr_hit[225] & reg_re & !reg_error;
  assign dio_pad_attr_14_we = addr_hit[225] & reg_we & !reg_error;

  assign dio_pad_attr_14_invert_14_wd = reg_wdata[0];

  assign dio_pad_attr_14_virtual_od_en_14_wd = reg_wdata[1];

  assign dio_pad_attr_14_pull_en_14_wd = reg_wdata[2];

  assign dio_pad_attr_14_pull_select_14_wd = reg_wdata[3];

  assign dio_pad_attr_14_keeper_en_14_wd = reg_wdata[4];

  assign dio_pad_attr_14_schmitt_en_14_wd = reg_wdata[5];

  assign dio_pad_attr_14_od_en_14_wd = reg_wdata[6];

  assign dio_pad_attr_14_slew_rate_14_wd = reg_wdata[17:16];

  assign dio_pad_attr_14_drive_strength_14_wd = reg_wdata[23:20];
  assign dio_pad_attr_15_re = addr_hit[226] & reg_re & !reg_error;
  assign dio_pad_attr_15_we = addr_hit[226] & reg_we & !reg_error;

  assign dio_pad_attr_15_invert_15_wd = reg_wdata[0];

  assign dio_pad_attr_15_virtual_od_en_15_wd = reg_wdata[1];

  assign dio_pad_attr_15_pull_en_15_wd = reg_wdata[2];

  assign dio_pad_attr_15_pull_select_15_wd = reg_wdata[3];

  assign dio_pad_attr_15_keeper_en_15_wd = reg_wdata[4];

  assign dio_pad_attr_15_schmitt_en_15_wd = reg_wdata[5];

  assign dio_pad_attr_15_od_en_15_wd = reg_wdata[6];

  assign dio_pad_attr_15_slew_rate_15_wd = reg_wdata[17:16];

  assign dio_pad_attr_15_drive_strength_15_wd = reg_wdata[23:20];
  assign mio_pad_sleep_status_we = addr_hit[227] & reg_we & !reg_error;

  assign mio_pad_sleep_status_en_0_wd = reg_wdata[0];

  assign mio_pad_sleep_status_en_1_wd = reg_wdata[1];

  assign mio_pad_sleep_status_en_2_wd = reg_wdata[2];

  assign mio_pad_sleep_status_en_3_wd = reg_wdata[3];

  assign mio_pad_sleep_status_en_4_wd = reg_wdata[4];

  assign mio_pad_sleep_status_en_5_wd = reg_wdata[5];

  assign mio_pad_sleep_status_en_6_wd = reg_wdata[6];

  assign mio_pad_sleep_status_en_7_wd = reg_wdata[7];

  assign mio_pad_sleep_status_en_8_wd = reg_wdata[8];

  assign mio_pad_sleep_status_en_9_wd = reg_wdata[9];

  assign mio_pad_sleep_status_en_10_wd = reg_wdata[10];

  assign mio_pad_sleep_status_en_11_wd = reg_wdata[11];

  assign mio_pad_sleep_status_en_12_wd = reg_wdata[12];

  assign mio_pad_sleep_status_en_13_wd = reg_wdata[13];

  assign mio_pad_sleep_status_en_14_wd = reg_wdata[14];

  assign mio_pad_sleep_status_en_15_wd = reg_wdata[15];

  assign mio_pad_sleep_status_en_16_wd = reg_wdata[16];

  assign mio_pad_sleep_status_en_17_wd = reg_wdata[17];

  assign mio_pad_sleep_status_en_18_wd = reg_wdata[18];

  assign mio_pad_sleep_status_en_19_wd = reg_wdata[19];

  assign mio_pad_sleep_status_en_20_wd = reg_wdata[20];

  assign mio_pad_sleep_status_en_21_wd = reg_wdata[21];

  assign mio_pad_sleep_status_en_22_wd = reg_wdata[22];

  assign mio_pad_sleep_status_en_23_wd = reg_wdata[23];

  assign mio_pad_sleep_status_en_24_wd = reg_wdata[24];

  assign mio_pad_sleep_status_en_25_wd = reg_wdata[25];

  assign mio_pad_sleep_status_en_26_wd = reg_wdata[26];

  assign mio_pad_sleep_status_en_27_wd = reg_wdata[27];

  assign mio_pad_sleep_status_en_28_wd = reg_wdata[28];

  assign mio_pad_sleep_status_en_29_wd = reg_wdata[29];

  assign mio_pad_sleep_status_en_30_wd = reg_wdata[30];

  assign mio_pad_sleep_status_en_31_wd = reg_wdata[31];
  assign mio_pad_sleep_regwen_0_we = addr_hit[228] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_0_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_1_we = addr_hit[229] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_1_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_2_we = addr_hit[230] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_2_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_3_we = addr_hit[231] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_3_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_4_we = addr_hit[232] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_4_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_5_we = addr_hit[233] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_5_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_6_we = addr_hit[234] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_6_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_7_we = addr_hit[235] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_7_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_8_we = addr_hit[236] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_8_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_9_we = addr_hit[237] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_9_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_10_we = addr_hit[238] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_10_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_11_we = addr_hit[239] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_11_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_12_we = addr_hit[240] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_12_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_13_we = addr_hit[241] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_13_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_14_we = addr_hit[242] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_14_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_15_we = addr_hit[243] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_15_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_16_we = addr_hit[244] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_16_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_17_we = addr_hit[245] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_17_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_18_we = addr_hit[246] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_18_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_19_we = addr_hit[247] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_19_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_20_we = addr_hit[248] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_20_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_21_we = addr_hit[249] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_21_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_22_we = addr_hit[250] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_22_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_23_we = addr_hit[251] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_23_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_24_we = addr_hit[252] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_24_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_25_we = addr_hit[253] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_25_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_26_we = addr_hit[254] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_26_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_27_we = addr_hit[255] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_27_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_28_we = addr_hit[256] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_28_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_29_we = addr_hit[257] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_29_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_30_we = addr_hit[258] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_30_wd = reg_wdata[0];
  assign mio_pad_sleep_regwen_31_we = addr_hit[259] & reg_we & !reg_error;

  assign mio_pad_sleep_regwen_31_wd = reg_wdata[0];
  assign mio_pad_sleep_en_0_we = addr_hit[260] & reg_we & !reg_error;

  assign mio_pad_sleep_en_0_wd = reg_wdata[0];
  assign mio_pad_sleep_en_1_we = addr_hit[261] & reg_we & !reg_error;

  assign mio_pad_sleep_en_1_wd = reg_wdata[0];
  assign mio_pad_sleep_en_2_we = addr_hit[262] & reg_we & !reg_error;

  assign mio_pad_sleep_en_2_wd = reg_wdata[0];
  assign mio_pad_sleep_en_3_we = addr_hit[263] & reg_we & !reg_error;

  assign mio_pad_sleep_en_3_wd = reg_wdata[0];
  assign mio_pad_sleep_en_4_we = addr_hit[264] & reg_we & !reg_error;

  assign mio_pad_sleep_en_4_wd = reg_wdata[0];
  assign mio_pad_sleep_en_5_we = addr_hit[265] & reg_we & !reg_error;

  assign mio_pad_sleep_en_5_wd = reg_wdata[0];
  assign mio_pad_sleep_en_6_we = addr_hit[266] & reg_we & !reg_error;

  assign mio_pad_sleep_en_6_wd = reg_wdata[0];
  assign mio_pad_sleep_en_7_we = addr_hit[267] & reg_we & !reg_error;

  assign mio_pad_sleep_en_7_wd = reg_wdata[0];
  assign mio_pad_sleep_en_8_we = addr_hit[268] & reg_we & !reg_error;

  assign mio_pad_sleep_en_8_wd = reg_wdata[0];
  assign mio_pad_sleep_en_9_we = addr_hit[269] & reg_we & !reg_error;

  assign mio_pad_sleep_en_9_wd = reg_wdata[0];
  assign mio_pad_sleep_en_10_we = addr_hit[270] & reg_we & !reg_error;

  assign mio_pad_sleep_en_10_wd = reg_wdata[0];
  assign mio_pad_sleep_en_11_we = addr_hit[271] & reg_we & !reg_error;

  assign mio_pad_sleep_en_11_wd = reg_wdata[0];
  assign mio_pad_sleep_en_12_we = addr_hit[272] & reg_we & !reg_error;

  assign mio_pad_sleep_en_12_wd = reg_wdata[0];
  assign mio_pad_sleep_en_13_we = addr_hit[273] & reg_we & !reg_error;

  assign mio_pad_sleep_en_13_wd = reg_wdata[0];
  assign mio_pad_sleep_en_14_we = addr_hit[274] & reg_we & !reg_error;

  assign mio_pad_sleep_en_14_wd = reg_wdata[0];
  assign mio_pad_sleep_en_15_we = addr_hit[275] & reg_we & !reg_error;

  assign mio_pad_sleep_en_15_wd = reg_wdata[0];
  assign mio_pad_sleep_en_16_we = addr_hit[276] & reg_we & !reg_error;

  assign mio_pad_sleep_en_16_wd = reg_wdata[0];
  assign mio_pad_sleep_en_17_we = addr_hit[277] & reg_we & !reg_error;

  assign mio_pad_sleep_en_17_wd = reg_wdata[0];
  assign mio_pad_sleep_en_18_we = addr_hit[278] & reg_we & !reg_error;

  assign mio_pad_sleep_en_18_wd = reg_wdata[0];
  assign mio_pad_sleep_en_19_we = addr_hit[279] & reg_we & !reg_error;

  assign mio_pad_sleep_en_19_wd = reg_wdata[0];
  assign mio_pad_sleep_en_20_we = addr_hit[280] & reg_we & !reg_error;

  assign mio_pad_sleep_en_20_wd = reg_wdata[0];
  assign mio_pad_sleep_en_21_we = addr_hit[281] & reg_we & !reg_error;

  assign mio_pad_sleep_en_21_wd = reg_wdata[0];
  assign mio_pad_sleep_en_22_we = addr_hit[282] & reg_we & !reg_error;

  assign mio_pad_sleep_en_22_wd = reg_wdata[0];
  assign mio_pad_sleep_en_23_we = addr_hit[283] & reg_we & !reg_error;

  assign mio_pad_sleep_en_23_wd = reg_wdata[0];
  assign mio_pad_sleep_en_24_we = addr_hit[284] & reg_we & !reg_error;

  assign mio_pad_sleep_en_24_wd = reg_wdata[0];
  assign mio_pad_sleep_en_25_we = addr_hit[285] & reg_we & !reg_error;

  assign mio_pad_sleep_en_25_wd = reg_wdata[0];
  assign mio_pad_sleep_en_26_we = addr_hit[286] & reg_we & !reg_error;

  assign mio_pad_sleep_en_26_wd = reg_wdata[0];
  assign mio_pad_sleep_en_27_we = addr_hit[287] & reg_we & !reg_error;

  assign mio_pad_sleep_en_27_wd = reg_wdata[0];
  assign mio_pad_sleep_en_28_we = addr_hit[288] & reg_we & !reg_error;

  assign mio_pad_sleep_en_28_wd = reg_wdata[0];
  assign mio_pad_sleep_en_29_we = addr_hit[289] & reg_we & !reg_error;

  assign mio_pad_sleep_en_29_wd = reg_wdata[0];
  assign mio_pad_sleep_en_30_we = addr_hit[290] & reg_we & !reg_error;

  assign mio_pad_sleep_en_30_wd = reg_wdata[0];
  assign mio_pad_sleep_en_31_we = addr_hit[291] & reg_we & !reg_error;

  assign mio_pad_sleep_en_31_wd = reg_wdata[0];
  assign mio_pad_sleep_mode_0_we = addr_hit[292] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_0_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_1_we = addr_hit[293] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_1_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_2_we = addr_hit[294] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_2_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_3_we = addr_hit[295] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_3_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_4_we = addr_hit[296] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_4_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_5_we = addr_hit[297] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_5_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_6_we = addr_hit[298] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_6_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_7_we = addr_hit[299] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_7_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_8_we = addr_hit[300] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_8_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_9_we = addr_hit[301] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_9_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_10_we = addr_hit[302] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_10_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_11_we = addr_hit[303] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_11_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_12_we = addr_hit[304] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_12_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_13_we = addr_hit[305] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_13_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_14_we = addr_hit[306] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_14_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_15_we = addr_hit[307] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_15_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_16_we = addr_hit[308] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_16_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_17_we = addr_hit[309] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_17_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_18_we = addr_hit[310] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_18_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_19_we = addr_hit[311] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_19_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_20_we = addr_hit[312] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_20_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_21_we = addr_hit[313] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_21_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_22_we = addr_hit[314] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_22_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_23_we = addr_hit[315] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_23_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_24_we = addr_hit[316] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_24_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_25_we = addr_hit[317] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_25_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_26_we = addr_hit[318] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_26_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_27_we = addr_hit[319] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_27_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_28_we = addr_hit[320] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_28_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_29_we = addr_hit[321] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_29_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_30_we = addr_hit[322] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_30_wd = reg_wdata[1:0];
  assign mio_pad_sleep_mode_31_we = addr_hit[323] & reg_we & !reg_error;

  assign mio_pad_sleep_mode_31_wd = reg_wdata[1:0];
  assign dio_pad_sleep_status_we = addr_hit[324] & reg_we & !reg_error;

  assign dio_pad_sleep_status_en_0_wd = reg_wdata[0];

  assign dio_pad_sleep_status_en_1_wd = reg_wdata[1];

  assign dio_pad_sleep_status_en_2_wd = reg_wdata[2];

  assign dio_pad_sleep_status_en_3_wd = reg_wdata[3];

  assign dio_pad_sleep_status_en_4_wd = reg_wdata[4];

  assign dio_pad_sleep_status_en_5_wd = reg_wdata[5];

  assign dio_pad_sleep_status_en_6_wd = reg_wdata[6];

  assign dio_pad_sleep_status_en_7_wd = reg_wdata[7];

  assign dio_pad_sleep_status_en_8_wd = reg_wdata[8];

  assign dio_pad_sleep_status_en_9_wd = reg_wdata[9];

  assign dio_pad_sleep_status_en_10_wd = reg_wdata[10];

  assign dio_pad_sleep_status_en_11_wd = reg_wdata[11];

  assign dio_pad_sleep_status_en_12_wd = reg_wdata[12];

  assign dio_pad_sleep_status_en_13_wd = reg_wdata[13];

  assign dio_pad_sleep_status_en_14_wd = reg_wdata[14];

  assign dio_pad_sleep_status_en_15_wd = reg_wdata[15];
  assign dio_pad_sleep_regwen_0_we = addr_hit[325] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_0_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_1_we = addr_hit[326] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_1_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_2_we = addr_hit[327] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_2_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_3_we = addr_hit[328] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_3_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_4_we = addr_hit[329] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_4_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_5_we = addr_hit[330] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_5_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_6_we = addr_hit[331] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_6_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_7_we = addr_hit[332] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_7_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_8_we = addr_hit[333] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_8_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_9_we = addr_hit[334] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_9_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_10_we = addr_hit[335] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_10_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_11_we = addr_hit[336] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_11_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_12_we = addr_hit[337] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_12_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_13_we = addr_hit[338] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_13_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_14_we = addr_hit[339] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_14_wd = reg_wdata[0];
  assign dio_pad_sleep_regwen_15_we = addr_hit[340] & reg_we & !reg_error;

  assign dio_pad_sleep_regwen_15_wd = reg_wdata[0];
  assign dio_pad_sleep_en_0_we = addr_hit[341] & reg_we & !reg_error;

  assign dio_pad_sleep_en_0_wd = reg_wdata[0];
  assign dio_pad_sleep_en_1_we = addr_hit[342] & reg_we & !reg_error;

  assign dio_pad_sleep_en_1_wd = reg_wdata[0];
  assign dio_pad_sleep_en_2_we = addr_hit[343] & reg_we & !reg_error;

  assign dio_pad_sleep_en_2_wd = reg_wdata[0];
  assign dio_pad_sleep_en_3_we = addr_hit[344] & reg_we & !reg_error;

  assign dio_pad_sleep_en_3_wd = reg_wdata[0];
  assign dio_pad_sleep_en_4_we = addr_hit[345] & reg_we & !reg_error;

  assign dio_pad_sleep_en_4_wd = reg_wdata[0];
  assign dio_pad_sleep_en_5_we = addr_hit[346] & reg_we & !reg_error;

  assign dio_pad_sleep_en_5_wd = reg_wdata[0];
  assign dio_pad_sleep_en_6_we = addr_hit[347] & reg_we & !reg_error;

  assign dio_pad_sleep_en_6_wd = reg_wdata[0];
  assign dio_pad_sleep_en_7_we = addr_hit[348] & reg_we & !reg_error;

  assign dio_pad_sleep_en_7_wd = reg_wdata[0];
  assign dio_pad_sleep_en_8_we = addr_hit[349] & reg_we & !reg_error;

  assign dio_pad_sleep_en_8_wd = reg_wdata[0];
  assign dio_pad_sleep_en_9_we = addr_hit[350] & reg_we & !reg_error;

  assign dio_pad_sleep_en_9_wd = reg_wdata[0];
  assign dio_pad_sleep_en_10_we = addr_hit[351] & reg_we & !reg_error;

  assign dio_pad_sleep_en_10_wd = reg_wdata[0];
  assign dio_pad_sleep_en_11_we = addr_hit[352] & reg_we & !reg_error;

  assign dio_pad_sleep_en_11_wd = reg_wdata[0];
  assign dio_pad_sleep_en_12_we = addr_hit[353] & reg_we & !reg_error;

  assign dio_pad_sleep_en_12_wd = reg_wdata[0];
  assign dio_pad_sleep_en_13_we = addr_hit[354] & reg_we & !reg_error;

  assign dio_pad_sleep_en_13_wd = reg_wdata[0];
  assign dio_pad_sleep_en_14_we = addr_hit[355] & reg_we & !reg_error;

  assign dio_pad_sleep_en_14_wd = reg_wdata[0];
  assign dio_pad_sleep_en_15_we = addr_hit[356] & reg_we & !reg_error;

  assign dio_pad_sleep_en_15_wd = reg_wdata[0];
  assign dio_pad_sleep_mode_0_we = addr_hit[357] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_0_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_1_we = addr_hit[358] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_1_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_2_we = addr_hit[359] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_2_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_3_we = addr_hit[360] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_3_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_4_we = addr_hit[361] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_4_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_5_we = addr_hit[362] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_5_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_6_we = addr_hit[363] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_6_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_7_we = addr_hit[364] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_7_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_8_we = addr_hit[365] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_8_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_9_we = addr_hit[366] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_9_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_10_we = addr_hit[367] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_10_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_11_we = addr_hit[368] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_11_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_12_we = addr_hit[369] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_12_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_13_we = addr_hit[370] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_13_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_14_we = addr_hit[371] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_14_wd = reg_wdata[1:0];
  assign dio_pad_sleep_mode_15_we = addr_hit[372] & reg_we & !reg_error;

  assign dio_pad_sleep_mode_15_wd = reg_wdata[1:0];
  assign wkup_detector_regwen_0_we = addr_hit[373] & reg_we & !reg_error;

  assign wkup_detector_regwen_0_wd = reg_wdata[0];
  assign wkup_detector_regwen_1_we = addr_hit[374] & reg_we & !reg_error;

  assign wkup_detector_regwen_1_wd = reg_wdata[0];
  assign wkup_detector_regwen_2_we = addr_hit[375] & reg_we & !reg_error;

  assign wkup_detector_regwen_2_wd = reg_wdata[0];
  assign wkup_detector_regwen_3_we = addr_hit[376] & reg_we & !reg_error;

  assign wkup_detector_regwen_3_wd = reg_wdata[0];
  assign wkup_detector_regwen_4_we = addr_hit[377] & reg_we & !reg_error;

  assign wkup_detector_regwen_4_wd = reg_wdata[0];
  assign wkup_detector_regwen_5_we = addr_hit[378] & reg_we & !reg_error;

  assign wkup_detector_regwen_5_wd = reg_wdata[0];
  assign wkup_detector_regwen_6_we = addr_hit[379] & reg_we & !reg_error;

  assign wkup_detector_regwen_6_wd = reg_wdata[0];
  assign wkup_detector_regwen_7_we = addr_hit[380] & reg_we & !reg_error;

  assign wkup_detector_regwen_7_wd = reg_wdata[0];
  assign wkup_detector_en_0_we = addr_hit[381] & reg_we & !reg_error;

  assign wkup_detector_en_1_we = addr_hit[382] & reg_we & !reg_error;

  assign wkup_detector_en_2_we = addr_hit[383] & reg_we & !reg_error;

  assign wkup_detector_en_3_we = addr_hit[384] & reg_we & !reg_error;

  assign wkup_detector_en_4_we = addr_hit[385] & reg_we & !reg_error;

  assign wkup_detector_en_5_we = addr_hit[386] & reg_we & !reg_error;

  assign wkup_detector_en_6_we = addr_hit[387] & reg_we & !reg_error;

  assign wkup_detector_en_7_we = addr_hit[388] & reg_we & !reg_error;

  assign wkup_detector_0_we = addr_hit[389] & reg_we & !reg_error;



  assign wkup_detector_1_we = addr_hit[390] & reg_we & !reg_error;



  assign wkup_detector_2_we = addr_hit[391] & reg_we & !reg_error;



  assign wkup_detector_3_we = addr_hit[392] & reg_we & !reg_error;



  assign wkup_detector_4_we = addr_hit[393] & reg_we & !reg_error;



  assign wkup_detector_5_we = addr_hit[394] & reg_we & !reg_error;



  assign wkup_detector_6_we = addr_hit[395] & reg_we & !reg_error;



  assign wkup_detector_7_we = addr_hit[396] & reg_we & !reg_error;



  assign wkup_detector_cnt_th_0_we = addr_hit[397] & reg_we & !reg_error;

  assign wkup_detector_cnt_th_1_we = addr_hit[398] & reg_we & !reg_error;

  assign wkup_detector_cnt_th_2_we = addr_hit[399] & reg_we & !reg_error;

  assign wkup_detector_cnt_th_3_we = addr_hit[400] & reg_we & !reg_error;

  assign wkup_detector_cnt_th_4_we = addr_hit[401] & reg_we & !reg_error;

  assign wkup_detector_cnt_th_5_we = addr_hit[402] & reg_we & !reg_error;

  assign wkup_detector_cnt_th_6_we = addr_hit[403] & reg_we & !reg_error;

  assign wkup_detector_cnt_th_7_we = addr_hit[404] & reg_we & !reg_error;

  assign wkup_detector_padsel_0_we = addr_hit[405] & reg_we & !reg_error;

  assign wkup_detector_padsel_0_wd = reg_wdata[5:0];
  assign wkup_detector_padsel_1_we = addr_hit[406] & reg_we & !reg_error;

  assign wkup_detector_padsel_1_wd = reg_wdata[5:0];
  assign wkup_detector_padsel_2_we = addr_hit[407] & reg_we & !reg_error;

  assign wkup_detector_padsel_2_wd = reg_wdata[5:0];
  assign wkup_detector_padsel_3_we = addr_hit[408] & reg_we & !reg_error;

  assign wkup_detector_padsel_3_wd = reg_wdata[5:0];
  assign wkup_detector_padsel_4_we = addr_hit[409] & reg_we & !reg_error;

  assign wkup_detector_padsel_4_wd = reg_wdata[5:0];
  assign wkup_detector_padsel_5_we = addr_hit[410] & reg_we & !reg_error;

  assign wkup_detector_padsel_5_wd = reg_wdata[5:0];
  assign wkup_detector_padsel_6_we = addr_hit[411] & reg_we & !reg_error;

  assign wkup_detector_padsel_6_wd = reg_wdata[5:0];
  assign wkup_detector_padsel_7_we = addr_hit[412] & reg_we & !reg_error;

  assign wkup_detector_padsel_7_wd = reg_wdata[5:0];
  assign wkup_cause_we = addr_hit[413] & reg_we & !reg_error;









  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = alert_test_we;
    reg_we_check[1] = mio_periph_insel_regwen_0_we;
    reg_we_check[2] = mio_periph_insel_regwen_1_we;
    reg_we_check[3] = mio_periph_insel_regwen_2_we;
    reg_we_check[4] = mio_periph_insel_regwen_3_we;
    reg_we_check[5] = mio_periph_insel_regwen_4_we;
    reg_we_check[6] = mio_periph_insel_regwen_5_we;
    reg_we_check[7] = mio_periph_insel_regwen_6_we;
    reg_we_check[8] = mio_periph_insel_regwen_7_we;
    reg_we_check[9] = mio_periph_insel_regwen_8_we;
    reg_we_check[10] = mio_periph_insel_regwen_9_we;
    reg_we_check[11] = mio_periph_insel_regwen_10_we;
    reg_we_check[12] = mio_periph_insel_regwen_11_we;
    reg_we_check[13] = mio_periph_insel_regwen_12_we;
    reg_we_check[14] = mio_periph_insel_regwen_13_we;
    reg_we_check[15] = mio_periph_insel_regwen_14_we;
    reg_we_check[16] = mio_periph_insel_regwen_15_we;
    reg_we_check[17] = mio_periph_insel_regwen_16_we;
    reg_we_check[18] = mio_periph_insel_regwen_17_we;
    reg_we_check[19] = mio_periph_insel_regwen_18_we;
    reg_we_check[20] = mio_periph_insel_regwen_19_we;
    reg_we_check[21] = mio_periph_insel_regwen_20_we;
    reg_we_check[22] = mio_periph_insel_regwen_21_we;
    reg_we_check[23] = mio_periph_insel_regwen_22_we;
    reg_we_check[24] = mio_periph_insel_regwen_23_we;
    reg_we_check[25] = mio_periph_insel_regwen_24_we;
    reg_we_check[26] = mio_periph_insel_regwen_25_we;
    reg_we_check[27] = mio_periph_insel_regwen_26_we;
    reg_we_check[28] = mio_periph_insel_regwen_27_we;
    reg_we_check[29] = mio_periph_insel_regwen_28_we;
    reg_we_check[30] = mio_periph_insel_regwen_29_we;
    reg_we_check[31] = mio_periph_insel_regwen_30_we;
    reg_we_check[32] = mio_periph_insel_regwen_31_we;
    reg_we_check[33] = mio_periph_insel_regwen_32_we;
    reg_we_check[34] = mio_periph_insel_0_gated_we;
    reg_we_check[35] = mio_periph_insel_1_gated_we;
    reg_we_check[36] = mio_periph_insel_2_gated_we;
    reg_we_check[37] = mio_periph_insel_3_gated_we;
    reg_we_check[38] = mio_periph_insel_4_gated_we;
    reg_we_check[39] = mio_periph_insel_5_gated_we;
    reg_we_check[40] = mio_periph_insel_6_gated_we;
    reg_we_check[41] = mio_periph_insel_7_gated_we;
    reg_we_check[42] = mio_periph_insel_8_gated_we;
    reg_we_check[43] = mio_periph_insel_9_gated_we;
    reg_we_check[44] = mio_periph_insel_10_gated_we;
    reg_we_check[45] = mio_periph_insel_11_gated_we;
    reg_we_check[46] = mio_periph_insel_12_gated_we;
    reg_we_check[47] = mio_periph_insel_13_gated_we;
    reg_we_check[48] = mio_periph_insel_14_gated_we;
    reg_we_check[49] = mio_periph_insel_15_gated_we;
    reg_we_check[50] = mio_periph_insel_16_gated_we;
    reg_we_check[51] = mio_periph_insel_17_gated_we;
    reg_we_check[52] = mio_periph_insel_18_gated_we;
    reg_we_check[53] = mio_periph_insel_19_gated_we;
    reg_we_check[54] = mio_periph_insel_20_gated_we;
    reg_we_check[55] = mio_periph_insel_21_gated_we;
    reg_we_check[56] = mio_periph_insel_22_gated_we;
    reg_we_check[57] = mio_periph_insel_23_gated_we;
    reg_we_check[58] = mio_periph_insel_24_gated_we;
    reg_we_check[59] = mio_periph_insel_25_gated_we;
    reg_we_check[60] = mio_periph_insel_26_gated_we;
    reg_we_check[61] = mio_periph_insel_27_gated_we;
    reg_we_check[62] = mio_periph_insel_28_gated_we;
    reg_we_check[63] = mio_periph_insel_29_gated_we;
    reg_we_check[64] = mio_periph_insel_30_gated_we;
    reg_we_check[65] = mio_periph_insel_31_gated_we;
    reg_we_check[66] = mio_periph_insel_32_gated_we;
    reg_we_check[67] = mio_outsel_regwen_0_we;
    reg_we_check[68] = mio_outsel_regwen_1_we;
    reg_we_check[69] = mio_outsel_regwen_2_we;
    reg_we_check[70] = mio_outsel_regwen_3_we;
    reg_we_check[71] = mio_outsel_regwen_4_we;
    reg_we_check[72] = mio_outsel_regwen_5_we;
    reg_we_check[73] = mio_outsel_regwen_6_we;
    reg_we_check[74] = mio_outsel_regwen_7_we;
    reg_we_check[75] = mio_outsel_regwen_8_we;
    reg_we_check[76] = mio_outsel_regwen_9_we;
    reg_we_check[77] = mio_outsel_regwen_10_we;
    reg_we_check[78] = mio_outsel_regwen_11_we;
    reg_we_check[79] = mio_outsel_regwen_12_we;
    reg_we_check[80] = mio_outsel_regwen_13_we;
    reg_we_check[81] = mio_outsel_regwen_14_we;
    reg_we_check[82] = mio_outsel_regwen_15_we;
    reg_we_check[83] = mio_outsel_regwen_16_we;
    reg_we_check[84] = mio_outsel_regwen_17_we;
    reg_we_check[85] = mio_outsel_regwen_18_we;
    reg_we_check[86] = mio_outsel_regwen_19_we;
    reg_we_check[87] = mio_outsel_regwen_20_we;
    reg_we_check[88] = mio_outsel_regwen_21_we;
    reg_we_check[89] = mio_outsel_regwen_22_we;
    reg_we_check[90] = mio_outsel_regwen_23_we;
    reg_we_check[91] = mio_outsel_regwen_24_we;
    reg_we_check[92] = mio_outsel_regwen_25_we;
    reg_we_check[93] = mio_outsel_regwen_26_we;
    reg_we_check[94] = mio_outsel_regwen_27_we;
    reg_we_check[95] = mio_outsel_regwen_28_we;
    reg_we_check[96] = mio_outsel_regwen_29_we;
    reg_we_check[97] = mio_outsel_regwen_30_we;
    reg_we_check[98] = mio_outsel_regwen_31_we;
    reg_we_check[99] = mio_outsel_0_gated_we;
    reg_we_check[100] = mio_outsel_1_gated_we;
    reg_we_check[101] = mio_outsel_2_gated_we;
    reg_we_check[102] = mio_outsel_3_gated_we;
    reg_we_check[103] = mio_outsel_4_gated_we;
    reg_we_check[104] = mio_outsel_5_gated_we;
    reg_we_check[105] = mio_outsel_6_gated_we;
    reg_we_check[106] = mio_outsel_7_gated_we;
    reg_we_check[107] = mio_outsel_8_gated_we;
    reg_we_check[108] = mio_outsel_9_gated_we;
    reg_we_check[109] = mio_outsel_10_gated_we;
    reg_we_check[110] = mio_outsel_11_gated_we;
    reg_we_check[111] = mio_outsel_12_gated_we;
    reg_we_check[112] = mio_outsel_13_gated_we;
    reg_we_check[113] = mio_outsel_14_gated_we;
    reg_we_check[114] = mio_outsel_15_gated_we;
    reg_we_check[115] = mio_outsel_16_gated_we;
    reg_we_check[116] = mio_outsel_17_gated_we;
    reg_we_check[117] = mio_outsel_18_gated_we;
    reg_we_check[118] = mio_outsel_19_gated_we;
    reg_we_check[119] = mio_outsel_20_gated_we;
    reg_we_check[120] = mio_outsel_21_gated_we;
    reg_we_check[121] = mio_outsel_22_gated_we;
    reg_we_check[122] = mio_outsel_23_gated_we;
    reg_we_check[123] = mio_outsel_24_gated_we;
    reg_we_check[124] = mio_outsel_25_gated_we;
    reg_we_check[125] = mio_outsel_26_gated_we;
    reg_we_check[126] = mio_outsel_27_gated_we;
    reg_we_check[127] = mio_outsel_28_gated_we;
    reg_we_check[128] = mio_outsel_29_gated_we;
    reg_we_check[129] = mio_outsel_30_gated_we;
    reg_we_check[130] = mio_outsel_31_gated_we;
    reg_we_check[131] = mio_pad_attr_regwen_0_we;
    reg_we_check[132] = mio_pad_attr_regwen_1_we;
    reg_we_check[133] = mio_pad_attr_regwen_2_we;
    reg_we_check[134] = mio_pad_attr_regwen_3_we;
    reg_we_check[135] = mio_pad_attr_regwen_4_we;
    reg_we_check[136] = mio_pad_attr_regwen_5_we;
    reg_we_check[137] = mio_pad_attr_regwen_6_we;
    reg_we_check[138] = mio_pad_attr_regwen_7_we;
    reg_we_check[139] = mio_pad_attr_regwen_8_we;
    reg_we_check[140] = mio_pad_attr_regwen_9_we;
    reg_we_check[141] = mio_pad_attr_regwen_10_we;
    reg_we_check[142] = mio_pad_attr_regwen_11_we;
    reg_we_check[143] = mio_pad_attr_regwen_12_we;
    reg_we_check[144] = mio_pad_attr_regwen_13_we;
    reg_we_check[145] = mio_pad_attr_regwen_14_we;
    reg_we_check[146] = mio_pad_attr_regwen_15_we;
    reg_we_check[147] = mio_pad_attr_regwen_16_we;
    reg_we_check[148] = mio_pad_attr_regwen_17_we;
    reg_we_check[149] = mio_pad_attr_regwen_18_we;
    reg_we_check[150] = mio_pad_attr_regwen_19_we;
    reg_we_check[151] = mio_pad_attr_regwen_20_we;
    reg_we_check[152] = mio_pad_attr_regwen_21_we;
    reg_we_check[153] = mio_pad_attr_regwen_22_we;
    reg_we_check[154] = mio_pad_attr_regwen_23_we;
    reg_we_check[155] = mio_pad_attr_regwen_24_we;
    reg_we_check[156] = mio_pad_attr_regwen_25_we;
    reg_we_check[157] = mio_pad_attr_regwen_26_we;
    reg_we_check[158] = mio_pad_attr_regwen_27_we;
    reg_we_check[159] = mio_pad_attr_regwen_28_we;
    reg_we_check[160] = mio_pad_attr_regwen_29_we;
    reg_we_check[161] = mio_pad_attr_regwen_30_we;
    reg_we_check[162] = mio_pad_attr_regwen_31_we;
    reg_we_check[163] = mio_pad_attr_0_gated_we;
    reg_we_check[164] = mio_pad_attr_1_gated_we;
    reg_we_check[165] = mio_pad_attr_2_gated_we;
    reg_we_check[166] = mio_pad_attr_3_gated_we;
    reg_we_check[167] = mio_pad_attr_4_gated_we;
    reg_we_check[168] = mio_pad_attr_5_gated_we;
    reg_we_check[169] = mio_pad_attr_6_gated_we;
    reg_we_check[170] = mio_pad_attr_7_gated_we;
    reg_we_check[171] = mio_pad_attr_8_gated_we;
    reg_we_check[172] = mio_pad_attr_9_gated_we;
    reg_we_check[173] = mio_pad_attr_10_gated_we;
    reg_we_check[174] = mio_pad_attr_11_gated_we;
    reg_we_check[175] = mio_pad_attr_12_gated_we;
    reg_we_check[176] = mio_pad_attr_13_gated_we;
    reg_we_check[177] = mio_pad_attr_14_gated_we;
    reg_we_check[178] = mio_pad_attr_15_gated_we;
    reg_we_check[179] = mio_pad_attr_16_gated_we;
    reg_we_check[180] = mio_pad_attr_17_gated_we;
    reg_we_check[181] = mio_pad_attr_18_gated_we;
    reg_we_check[182] = mio_pad_attr_19_gated_we;
    reg_we_check[183] = mio_pad_attr_20_gated_we;
    reg_we_check[184] = mio_pad_attr_21_gated_we;
    reg_we_check[185] = mio_pad_attr_22_gated_we;
    reg_we_check[186] = mio_pad_attr_23_gated_we;
    reg_we_check[187] = mio_pad_attr_24_gated_we;
    reg_we_check[188] = mio_pad_attr_25_gated_we;
    reg_we_check[189] = mio_pad_attr_26_gated_we;
    reg_we_check[190] = mio_pad_attr_27_gated_we;
    reg_we_check[191] = mio_pad_attr_28_gated_we;
    reg_we_check[192] = mio_pad_attr_29_gated_we;
    reg_we_check[193] = mio_pad_attr_30_gated_we;
    reg_we_check[194] = mio_pad_attr_31_gated_we;
    reg_we_check[195] = dio_pad_attr_regwen_0_we;
    reg_we_check[196] = dio_pad_attr_regwen_1_we;
    reg_we_check[197] = dio_pad_attr_regwen_2_we;
    reg_we_check[198] = dio_pad_attr_regwen_3_we;
    reg_we_check[199] = dio_pad_attr_regwen_4_we;
    reg_we_check[200] = dio_pad_attr_regwen_5_we;
    reg_we_check[201] = dio_pad_attr_regwen_6_we;
    reg_we_check[202] = dio_pad_attr_regwen_7_we;
    reg_we_check[203] = dio_pad_attr_regwen_8_we;
    reg_we_check[204] = dio_pad_attr_regwen_9_we;
    reg_we_check[205] = dio_pad_attr_regwen_10_we;
    reg_we_check[206] = dio_pad_attr_regwen_11_we;
    reg_we_check[207] = dio_pad_attr_regwen_12_we;
    reg_we_check[208] = dio_pad_attr_regwen_13_we;
    reg_we_check[209] = dio_pad_attr_regwen_14_we;
    reg_we_check[210] = dio_pad_attr_regwen_15_we;
    reg_we_check[211] = dio_pad_attr_0_gated_we;
    reg_we_check[212] = dio_pad_attr_1_gated_we;
    reg_we_check[213] = dio_pad_attr_2_gated_we;
    reg_we_check[214] = dio_pad_attr_3_gated_we;
    reg_we_check[215] = dio_pad_attr_4_gated_we;
    reg_we_check[216] = dio_pad_attr_5_gated_we;
    reg_we_check[217] = dio_pad_attr_6_gated_we;
    reg_we_check[218] = dio_pad_attr_7_gated_we;
    reg_we_check[219] = dio_pad_attr_8_gated_we;
    reg_we_check[220] = dio_pad_attr_9_gated_we;
    reg_we_check[221] = dio_pad_attr_10_gated_we;
    reg_we_check[222] = dio_pad_attr_11_gated_we;
    reg_we_check[223] = dio_pad_attr_12_gated_we;
    reg_we_check[224] = dio_pad_attr_13_gated_we;
    reg_we_check[225] = dio_pad_attr_14_gated_we;
    reg_we_check[226] = dio_pad_attr_15_gated_we;
    reg_we_check[227] = mio_pad_sleep_status_we;
    reg_we_check[228] = mio_pad_sleep_regwen_0_we;
    reg_we_check[229] = mio_pad_sleep_regwen_1_we;
    reg_we_check[230] = mio_pad_sleep_regwen_2_we;
    reg_we_check[231] = mio_pad_sleep_regwen_3_we;
    reg_we_check[232] = mio_pad_sleep_regwen_4_we;
    reg_we_check[233] = mio_pad_sleep_regwen_5_we;
    reg_we_check[234] = mio_pad_sleep_regwen_6_we;
    reg_we_check[235] = mio_pad_sleep_regwen_7_we;
    reg_we_check[236] = mio_pad_sleep_regwen_8_we;
    reg_we_check[237] = mio_pad_sleep_regwen_9_we;
    reg_we_check[238] = mio_pad_sleep_regwen_10_we;
    reg_we_check[239] = mio_pad_sleep_regwen_11_we;
    reg_we_check[240] = mio_pad_sleep_regwen_12_we;
    reg_we_check[241] = mio_pad_sleep_regwen_13_we;
    reg_we_check[242] = mio_pad_sleep_regwen_14_we;
    reg_we_check[243] = mio_pad_sleep_regwen_15_we;
    reg_we_check[244] = mio_pad_sleep_regwen_16_we;
    reg_we_check[245] = mio_pad_sleep_regwen_17_we;
    reg_we_check[246] = mio_pad_sleep_regwen_18_we;
    reg_we_check[247] = mio_pad_sleep_regwen_19_we;
    reg_we_check[248] = mio_pad_sleep_regwen_20_we;
    reg_we_check[249] = mio_pad_sleep_regwen_21_we;
    reg_we_check[250] = mio_pad_sleep_regwen_22_we;
    reg_we_check[251] = mio_pad_sleep_regwen_23_we;
    reg_we_check[252] = mio_pad_sleep_regwen_24_we;
    reg_we_check[253] = mio_pad_sleep_regwen_25_we;
    reg_we_check[254] = mio_pad_sleep_regwen_26_we;
    reg_we_check[255] = mio_pad_sleep_regwen_27_we;
    reg_we_check[256] = mio_pad_sleep_regwen_28_we;
    reg_we_check[257] = mio_pad_sleep_regwen_29_we;
    reg_we_check[258] = mio_pad_sleep_regwen_30_we;
    reg_we_check[259] = mio_pad_sleep_regwen_31_we;
    reg_we_check[260] = mio_pad_sleep_en_0_gated_we;
    reg_we_check[261] = mio_pad_sleep_en_1_gated_we;
    reg_we_check[262] = mio_pad_sleep_en_2_gated_we;
    reg_we_check[263] = mio_pad_sleep_en_3_gated_we;
    reg_we_check[264] = mio_pad_sleep_en_4_gated_we;
    reg_we_check[265] = mio_pad_sleep_en_5_gated_we;
    reg_we_check[266] = mio_pad_sleep_en_6_gated_we;
    reg_we_check[267] = mio_pad_sleep_en_7_gated_we;
    reg_we_check[268] = mio_pad_sleep_en_8_gated_we;
    reg_we_check[269] = mio_pad_sleep_en_9_gated_we;
    reg_we_check[270] = mio_pad_sleep_en_10_gated_we;
    reg_we_check[271] = mio_pad_sleep_en_11_gated_we;
    reg_we_check[272] = mio_pad_sleep_en_12_gated_we;
    reg_we_check[273] = mio_pad_sleep_en_13_gated_we;
    reg_we_check[274] = mio_pad_sleep_en_14_gated_we;
    reg_we_check[275] = mio_pad_sleep_en_15_gated_we;
    reg_we_check[276] = mio_pad_sleep_en_16_gated_we;
    reg_we_check[277] = mio_pad_sleep_en_17_gated_we;
    reg_we_check[278] = mio_pad_sleep_en_18_gated_we;
    reg_we_check[279] = mio_pad_sleep_en_19_gated_we;
    reg_we_check[280] = mio_pad_sleep_en_20_gated_we;
    reg_we_check[281] = mio_pad_sleep_en_21_gated_we;
    reg_we_check[282] = mio_pad_sleep_en_22_gated_we;
    reg_we_check[283] = mio_pad_sleep_en_23_gated_we;
    reg_we_check[284] = mio_pad_sleep_en_24_gated_we;
    reg_we_check[285] = mio_pad_sleep_en_25_gated_we;
    reg_we_check[286] = mio_pad_sleep_en_26_gated_we;
    reg_we_check[287] = mio_pad_sleep_en_27_gated_we;
    reg_we_check[288] = mio_pad_sleep_en_28_gated_we;
    reg_we_check[289] = mio_pad_sleep_en_29_gated_we;
    reg_we_check[290] = mio_pad_sleep_en_30_gated_we;
    reg_we_check[291] = mio_pad_sleep_en_31_gated_we;
    reg_we_check[292] = mio_pad_sleep_mode_0_gated_we;
    reg_we_check[293] = mio_pad_sleep_mode_1_gated_we;
    reg_we_check[294] = mio_pad_sleep_mode_2_gated_we;
    reg_we_check[295] = mio_pad_sleep_mode_3_gated_we;
    reg_we_check[296] = mio_pad_sleep_mode_4_gated_we;
    reg_we_check[297] = mio_pad_sleep_mode_5_gated_we;
    reg_we_check[298] = mio_pad_sleep_mode_6_gated_we;
    reg_we_check[299] = mio_pad_sleep_mode_7_gated_we;
    reg_we_check[300] = mio_pad_sleep_mode_8_gated_we;
    reg_we_check[301] = mio_pad_sleep_mode_9_gated_we;
    reg_we_check[302] = mio_pad_sleep_mode_10_gated_we;
    reg_we_check[303] = mio_pad_sleep_mode_11_gated_we;
    reg_we_check[304] = mio_pad_sleep_mode_12_gated_we;
    reg_we_check[305] = mio_pad_sleep_mode_13_gated_we;
    reg_we_check[306] = mio_pad_sleep_mode_14_gated_we;
    reg_we_check[307] = mio_pad_sleep_mode_15_gated_we;
    reg_we_check[308] = mio_pad_sleep_mode_16_gated_we;
    reg_we_check[309] = mio_pad_sleep_mode_17_gated_we;
    reg_we_check[310] = mio_pad_sleep_mode_18_gated_we;
    reg_we_check[311] = mio_pad_sleep_mode_19_gated_we;
    reg_we_check[312] = mio_pad_sleep_mode_20_gated_we;
    reg_we_check[313] = mio_pad_sleep_mode_21_gated_we;
    reg_we_check[314] = mio_pad_sleep_mode_22_gated_we;
    reg_we_check[315] = mio_pad_sleep_mode_23_gated_we;
    reg_we_check[316] = mio_pad_sleep_mode_24_gated_we;
    reg_we_check[317] = mio_pad_sleep_mode_25_gated_we;
    reg_we_check[318] = mio_pad_sleep_mode_26_gated_we;
    reg_we_check[319] = mio_pad_sleep_mode_27_gated_we;
    reg_we_check[320] = mio_pad_sleep_mode_28_gated_we;
    reg_we_check[321] = mio_pad_sleep_mode_29_gated_we;
    reg_we_check[322] = mio_pad_sleep_mode_30_gated_we;
    reg_we_check[323] = mio_pad_sleep_mode_31_gated_we;
    reg_we_check[324] = dio_pad_sleep_status_we;
    reg_we_check[325] = dio_pad_sleep_regwen_0_we;
    reg_we_check[326] = dio_pad_sleep_regwen_1_we;
    reg_we_check[327] = dio_pad_sleep_regwen_2_we;
    reg_we_check[328] = dio_pad_sleep_regwen_3_we;
    reg_we_check[329] = dio_pad_sleep_regwen_4_we;
    reg_we_check[330] = dio_pad_sleep_regwen_5_we;
    reg_we_check[331] = dio_pad_sleep_regwen_6_we;
    reg_we_check[332] = dio_pad_sleep_regwen_7_we;
    reg_we_check[333] = dio_pad_sleep_regwen_8_we;
    reg_we_check[334] = dio_pad_sleep_regwen_9_we;
    reg_we_check[335] = dio_pad_sleep_regwen_10_we;
    reg_we_check[336] = dio_pad_sleep_regwen_11_we;
    reg_we_check[337] = dio_pad_sleep_regwen_12_we;
    reg_we_check[338] = dio_pad_sleep_regwen_13_we;
    reg_we_check[339] = dio_pad_sleep_regwen_14_we;
    reg_we_check[340] = dio_pad_sleep_regwen_15_we;
    reg_we_check[341] = dio_pad_sleep_en_0_gated_we;
    reg_we_check[342] = dio_pad_sleep_en_1_gated_we;
    reg_we_check[343] = dio_pad_sleep_en_2_gated_we;
    reg_we_check[344] = dio_pad_sleep_en_3_gated_we;
    reg_we_check[345] = dio_pad_sleep_en_4_gated_we;
    reg_we_check[346] = dio_pad_sleep_en_5_gated_we;
    reg_we_check[347] = dio_pad_sleep_en_6_gated_we;
    reg_we_check[348] = dio_pad_sleep_en_7_gated_we;
    reg_we_check[349] = dio_pad_sleep_en_8_gated_we;
    reg_we_check[350] = dio_pad_sleep_en_9_gated_we;
    reg_we_check[351] = dio_pad_sleep_en_10_gated_we;
    reg_we_check[352] = dio_pad_sleep_en_11_gated_we;
    reg_we_check[353] = dio_pad_sleep_en_12_gated_we;
    reg_we_check[354] = dio_pad_sleep_en_13_gated_we;
    reg_we_check[355] = dio_pad_sleep_en_14_gated_we;
    reg_we_check[356] = dio_pad_sleep_en_15_gated_we;
    reg_we_check[357] = dio_pad_sleep_mode_0_gated_we;
    reg_we_check[358] = dio_pad_sleep_mode_1_gated_we;
    reg_we_check[359] = dio_pad_sleep_mode_2_gated_we;
    reg_we_check[360] = dio_pad_sleep_mode_3_gated_we;
    reg_we_check[361] = dio_pad_sleep_mode_4_gated_we;
    reg_we_check[362] = dio_pad_sleep_mode_5_gated_we;
    reg_we_check[363] = dio_pad_sleep_mode_6_gated_we;
    reg_we_check[364] = dio_pad_sleep_mode_7_gated_we;
    reg_we_check[365] = dio_pad_sleep_mode_8_gated_we;
    reg_we_check[366] = dio_pad_sleep_mode_9_gated_we;
    reg_we_check[367] = dio_pad_sleep_mode_10_gated_we;
    reg_we_check[368] = dio_pad_sleep_mode_11_gated_we;
    reg_we_check[369] = dio_pad_sleep_mode_12_gated_we;
    reg_we_check[370] = dio_pad_sleep_mode_13_gated_we;
    reg_we_check[371] = dio_pad_sleep_mode_14_gated_we;
    reg_we_check[372] = dio_pad_sleep_mode_15_gated_we;
    reg_we_check[373] = wkup_detector_regwen_0_we;
    reg_we_check[374] = wkup_detector_regwen_1_we;
    reg_we_check[375] = wkup_detector_regwen_2_we;
    reg_we_check[376] = wkup_detector_regwen_3_we;
    reg_we_check[377] = wkup_detector_regwen_4_we;
    reg_we_check[378] = wkup_detector_regwen_5_we;
    reg_we_check[379] = wkup_detector_regwen_6_we;
    reg_we_check[380] = wkup_detector_regwen_7_we;
    reg_we_check[381] = wkup_detector_en_0_we;
    reg_we_check[382] = wkup_detector_en_1_we;
    reg_we_check[383] = wkup_detector_en_2_we;
    reg_we_check[384] = wkup_detector_en_3_we;
    reg_we_check[385] = wkup_detector_en_4_we;
    reg_we_check[386] = wkup_detector_en_5_we;
    reg_we_check[387] = wkup_detector_en_6_we;
    reg_we_check[388] = wkup_detector_en_7_we;
    reg_we_check[389] = wkup_detector_0_we;
    reg_we_check[390] = wkup_detector_1_we;
    reg_we_check[391] = wkup_detector_2_we;
    reg_we_check[392] = wkup_detector_3_we;
    reg_we_check[393] = wkup_detector_4_we;
    reg_we_check[394] = wkup_detector_5_we;
    reg_we_check[395] = wkup_detector_6_we;
    reg_we_check[396] = wkup_detector_7_we;
    reg_we_check[397] = wkup_detector_cnt_th_0_we;
    reg_we_check[398] = wkup_detector_cnt_th_1_we;
    reg_we_check[399] = wkup_detector_cnt_th_2_we;
    reg_we_check[400] = wkup_detector_cnt_th_3_we;
    reg_we_check[401] = wkup_detector_cnt_th_4_we;
    reg_we_check[402] = wkup_detector_cnt_th_5_we;
    reg_we_check[403] = wkup_detector_cnt_th_6_we;
    reg_we_check[404] = wkup_detector_cnt_th_7_we;
    reg_we_check[405] = wkup_detector_padsel_0_gated_we;
    reg_we_check[406] = wkup_detector_padsel_1_gated_we;
    reg_we_check[407] = wkup_detector_padsel_2_gated_we;
    reg_we_check[408] = wkup_detector_padsel_3_gated_we;
    reg_we_check[409] = wkup_detector_padsel_4_gated_we;
    reg_we_check[410] = wkup_detector_padsel_5_gated_we;
    reg_we_check[411] = wkup_detector_padsel_6_gated_we;
    reg_we_check[412] = wkup_detector_padsel_7_gated_we;
    reg_we_check[413] = wkup_cause_we;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_0_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_1_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_2_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_3_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_4_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_5_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_6_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_7_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_8_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_9_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_10_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_11_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_12_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_13_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_14_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_15_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_16_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_17_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_18_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_19_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_20_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_21_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_22_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_23_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_24_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_25_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_26_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_27_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_28_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_29_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_30_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_31_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[0] = mio_periph_insel_regwen_32_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[5:0] = mio_periph_insel_0_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[5:0] = mio_periph_insel_1_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[5:0] = mio_periph_insel_2_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[5:0] = mio_periph_insel_3_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[5:0] = mio_periph_insel_4_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[5:0] = mio_periph_insel_5_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[5:0] = mio_periph_insel_6_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[5:0] = mio_periph_insel_7_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[5:0] = mio_periph_insel_8_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[5:0] = mio_periph_insel_9_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[5:0] = mio_periph_insel_10_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[5:0] = mio_periph_insel_11_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[5:0] = mio_periph_insel_12_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[5:0] = mio_periph_insel_13_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[5:0] = mio_periph_insel_14_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[5:0] = mio_periph_insel_15_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[5:0] = mio_periph_insel_16_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[5:0] = mio_periph_insel_17_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[5:0] = mio_periph_insel_18_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[5:0] = mio_periph_insel_19_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[5:0] = mio_periph_insel_20_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[5:0] = mio_periph_insel_21_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[5:0] = mio_periph_insel_22_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[5:0] = mio_periph_insel_23_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[5:0] = mio_periph_insel_24_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[5:0] = mio_periph_insel_25_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[5:0] = mio_periph_insel_26_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[5:0] = mio_periph_insel_27_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[5:0] = mio_periph_insel_28_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[5:0] = mio_periph_insel_29_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[5:0] = mio_periph_insel_30_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[5:0] = mio_periph_insel_31_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[5:0] = mio_periph_insel_32_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[0] = mio_outsel_regwen_0_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[0] = mio_outsel_regwen_1_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[0] = mio_outsel_regwen_2_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[0] = mio_outsel_regwen_3_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[0] = mio_outsel_regwen_4_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[0] = mio_outsel_regwen_5_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[0] = mio_outsel_regwen_6_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[0] = mio_outsel_regwen_7_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[0] = mio_outsel_regwen_8_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[0] = mio_outsel_regwen_9_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[0] = mio_outsel_regwen_10_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[0] = mio_outsel_regwen_11_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[0] = mio_outsel_regwen_12_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[0] = mio_outsel_regwen_13_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[0] = mio_outsel_regwen_14_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[0] = mio_outsel_regwen_15_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[0] = mio_outsel_regwen_16_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[0] = mio_outsel_regwen_17_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[0] = mio_outsel_regwen_18_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[0] = mio_outsel_regwen_19_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[0] = mio_outsel_regwen_20_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[0] = mio_outsel_regwen_21_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[0] = mio_outsel_regwen_22_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[0] = mio_outsel_regwen_23_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[0] = mio_outsel_regwen_24_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[0] = mio_outsel_regwen_25_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[0] = mio_outsel_regwen_26_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[0] = mio_outsel_regwen_27_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[0] = mio_outsel_regwen_28_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[0] = mio_outsel_regwen_29_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[0] = mio_outsel_regwen_30_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[0] = mio_outsel_regwen_31_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[5:0] = mio_outsel_0_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[5:0] = mio_outsel_1_qs;
      end

      addr_hit[101]: begin
        reg_rdata_next[5:0] = mio_outsel_2_qs;
      end

      addr_hit[102]: begin
        reg_rdata_next[5:0] = mio_outsel_3_qs;
      end

      addr_hit[103]: begin
        reg_rdata_next[5:0] = mio_outsel_4_qs;
      end

      addr_hit[104]: begin
        reg_rdata_next[5:0] = mio_outsel_5_qs;
      end

      addr_hit[105]: begin
        reg_rdata_next[5:0] = mio_outsel_6_qs;
      end

      addr_hit[106]: begin
        reg_rdata_next[5:0] = mio_outsel_7_qs;
      end

      addr_hit[107]: begin
        reg_rdata_next[5:0] = mio_outsel_8_qs;
      end

      addr_hit[108]: begin
        reg_rdata_next[5:0] = mio_outsel_9_qs;
      end

      addr_hit[109]: begin
        reg_rdata_next[5:0] = mio_outsel_10_qs;
      end

      addr_hit[110]: begin
        reg_rdata_next[5:0] = mio_outsel_11_qs;
      end

      addr_hit[111]: begin
        reg_rdata_next[5:0] = mio_outsel_12_qs;
      end

      addr_hit[112]: begin
        reg_rdata_next[5:0] = mio_outsel_13_qs;
      end

      addr_hit[113]: begin
        reg_rdata_next[5:0] = mio_outsel_14_qs;
      end

      addr_hit[114]: begin
        reg_rdata_next[5:0] = mio_outsel_15_qs;
      end

      addr_hit[115]: begin
        reg_rdata_next[5:0] = mio_outsel_16_qs;
      end

      addr_hit[116]: begin
        reg_rdata_next[5:0] = mio_outsel_17_qs;
      end

      addr_hit[117]: begin
        reg_rdata_next[5:0] = mio_outsel_18_qs;
      end

      addr_hit[118]: begin
        reg_rdata_next[5:0] = mio_outsel_19_qs;
      end

      addr_hit[119]: begin
        reg_rdata_next[5:0] = mio_outsel_20_qs;
      end

      addr_hit[120]: begin
        reg_rdata_next[5:0] = mio_outsel_21_qs;
      end

      addr_hit[121]: begin
        reg_rdata_next[5:0] = mio_outsel_22_qs;
      end

      addr_hit[122]: begin
        reg_rdata_next[5:0] = mio_outsel_23_qs;
      end

      addr_hit[123]: begin
        reg_rdata_next[5:0] = mio_outsel_24_qs;
      end

      addr_hit[124]: begin
        reg_rdata_next[5:0] = mio_outsel_25_qs;
      end

      addr_hit[125]: begin
        reg_rdata_next[5:0] = mio_outsel_26_qs;
      end

      addr_hit[126]: begin
        reg_rdata_next[5:0] = mio_outsel_27_qs;
      end

      addr_hit[127]: begin
        reg_rdata_next[5:0] = mio_outsel_28_qs;
      end

      addr_hit[128]: begin
        reg_rdata_next[5:0] = mio_outsel_29_qs;
      end

      addr_hit[129]: begin
        reg_rdata_next[5:0] = mio_outsel_30_qs;
      end

      addr_hit[130]: begin
        reg_rdata_next[5:0] = mio_outsel_31_qs;
      end

      addr_hit[131]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_0_qs;
      end

      addr_hit[132]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_1_qs;
      end

      addr_hit[133]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_2_qs;
      end

      addr_hit[134]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_3_qs;
      end

      addr_hit[135]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_4_qs;
      end

      addr_hit[136]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_5_qs;
      end

      addr_hit[137]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_6_qs;
      end

      addr_hit[138]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_7_qs;
      end

      addr_hit[139]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_8_qs;
      end

      addr_hit[140]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_9_qs;
      end

      addr_hit[141]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_10_qs;
      end

      addr_hit[142]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_11_qs;
      end

      addr_hit[143]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_12_qs;
      end

      addr_hit[144]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_13_qs;
      end

      addr_hit[145]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_14_qs;
      end

      addr_hit[146]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_15_qs;
      end

      addr_hit[147]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_16_qs;
      end

      addr_hit[148]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_17_qs;
      end

      addr_hit[149]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_18_qs;
      end

      addr_hit[150]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_19_qs;
      end

      addr_hit[151]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_20_qs;
      end

      addr_hit[152]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_21_qs;
      end

      addr_hit[153]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_22_qs;
      end

      addr_hit[154]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_23_qs;
      end

      addr_hit[155]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_24_qs;
      end

      addr_hit[156]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_25_qs;
      end

      addr_hit[157]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_26_qs;
      end

      addr_hit[158]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_27_qs;
      end

      addr_hit[159]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_28_qs;
      end

      addr_hit[160]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_29_qs;
      end

      addr_hit[161]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_30_qs;
      end

      addr_hit[162]: begin
        reg_rdata_next[0] = mio_pad_attr_regwen_31_qs;
      end

      addr_hit[163]: begin
        reg_rdata_next[0] = mio_pad_attr_0_invert_0_qs;
        reg_rdata_next[1] = mio_pad_attr_0_virtual_od_en_0_qs;
        reg_rdata_next[2] = mio_pad_attr_0_pull_en_0_qs;
        reg_rdata_next[3] = mio_pad_attr_0_pull_select_0_qs;
        reg_rdata_next[4] = mio_pad_attr_0_keeper_en_0_qs;
        reg_rdata_next[5] = mio_pad_attr_0_schmitt_en_0_qs;
        reg_rdata_next[6] = mio_pad_attr_0_od_en_0_qs;
        reg_rdata_next[17:16] = mio_pad_attr_0_slew_rate_0_qs;
        reg_rdata_next[23:20] = mio_pad_attr_0_drive_strength_0_qs;
      end

      addr_hit[164]: begin
        reg_rdata_next[0] = mio_pad_attr_1_invert_1_qs;
        reg_rdata_next[1] = mio_pad_attr_1_virtual_od_en_1_qs;
        reg_rdata_next[2] = mio_pad_attr_1_pull_en_1_qs;
        reg_rdata_next[3] = mio_pad_attr_1_pull_select_1_qs;
        reg_rdata_next[4] = mio_pad_attr_1_keeper_en_1_qs;
        reg_rdata_next[5] = mio_pad_attr_1_schmitt_en_1_qs;
        reg_rdata_next[6] = mio_pad_attr_1_od_en_1_qs;
        reg_rdata_next[17:16] = mio_pad_attr_1_slew_rate_1_qs;
        reg_rdata_next[23:20] = mio_pad_attr_1_drive_strength_1_qs;
      end

      addr_hit[165]: begin
        reg_rdata_next[0] = mio_pad_attr_2_invert_2_qs;
        reg_rdata_next[1] = mio_pad_attr_2_virtual_od_en_2_qs;
        reg_rdata_next[2] = mio_pad_attr_2_pull_en_2_qs;
        reg_rdata_next[3] = mio_pad_attr_2_pull_select_2_qs;
        reg_rdata_next[4] = mio_pad_attr_2_keeper_en_2_qs;
        reg_rdata_next[5] = mio_pad_attr_2_schmitt_en_2_qs;
        reg_rdata_next[6] = mio_pad_attr_2_od_en_2_qs;
        reg_rdata_next[17:16] = mio_pad_attr_2_slew_rate_2_qs;
        reg_rdata_next[23:20] = mio_pad_attr_2_drive_strength_2_qs;
      end

      addr_hit[166]: begin
        reg_rdata_next[0] = mio_pad_attr_3_invert_3_qs;
        reg_rdata_next[1] = mio_pad_attr_3_virtual_od_en_3_qs;
        reg_rdata_next[2] = mio_pad_attr_3_pull_en_3_qs;
        reg_rdata_next[3] = mio_pad_attr_3_pull_select_3_qs;
        reg_rdata_next[4] = mio_pad_attr_3_keeper_en_3_qs;
        reg_rdata_next[5] = mio_pad_attr_3_schmitt_en_3_qs;
        reg_rdata_next[6] = mio_pad_attr_3_od_en_3_qs;
        reg_rdata_next[17:16] = mio_pad_attr_3_slew_rate_3_qs;
        reg_rdata_next[23:20] = mio_pad_attr_3_drive_strength_3_qs;
      end

      addr_hit[167]: begin
        reg_rdata_next[0] = mio_pad_attr_4_invert_4_qs;
        reg_rdata_next[1] = mio_pad_attr_4_virtual_od_en_4_qs;
        reg_rdata_next[2] = mio_pad_attr_4_pull_en_4_qs;
        reg_rdata_next[3] = mio_pad_attr_4_pull_select_4_qs;
        reg_rdata_next[4] = mio_pad_attr_4_keeper_en_4_qs;
        reg_rdata_next[5] = mio_pad_attr_4_schmitt_en_4_qs;
        reg_rdata_next[6] = mio_pad_attr_4_od_en_4_qs;
        reg_rdata_next[17:16] = mio_pad_attr_4_slew_rate_4_qs;
        reg_rdata_next[23:20] = mio_pad_attr_4_drive_strength_4_qs;
      end

      addr_hit[168]: begin
        reg_rdata_next[0] = mio_pad_attr_5_invert_5_qs;
        reg_rdata_next[1] = mio_pad_attr_5_virtual_od_en_5_qs;
        reg_rdata_next[2] = mio_pad_attr_5_pull_en_5_qs;
        reg_rdata_next[3] = mio_pad_attr_5_pull_select_5_qs;
        reg_rdata_next[4] = mio_pad_attr_5_keeper_en_5_qs;
        reg_rdata_next[5] = mio_pad_attr_5_schmitt_en_5_qs;
        reg_rdata_next[6] = mio_pad_attr_5_od_en_5_qs;
        reg_rdata_next[17:16] = mio_pad_attr_5_slew_rate_5_qs;
        reg_rdata_next[23:20] = mio_pad_attr_5_drive_strength_5_qs;
      end

      addr_hit[169]: begin
        reg_rdata_next[0] = mio_pad_attr_6_invert_6_qs;
        reg_rdata_next[1] = mio_pad_attr_6_virtual_od_en_6_qs;
        reg_rdata_next[2] = mio_pad_attr_6_pull_en_6_qs;
        reg_rdata_next[3] = mio_pad_attr_6_pull_select_6_qs;
        reg_rdata_next[4] = mio_pad_attr_6_keeper_en_6_qs;
        reg_rdata_next[5] = mio_pad_attr_6_schmitt_en_6_qs;
        reg_rdata_next[6] = mio_pad_attr_6_od_en_6_qs;
        reg_rdata_next[17:16] = mio_pad_attr_6_slew_rate_6_qs;
        reg_rdata_next[23:20] = mio_pad_attr_6_drive_strength_6_qs;
      end

      addr_hit[170]: begin
        reg_rdata_next[0] = mio_pad_attr_7_invert_7_qs;
        reg_rdata_next[1] = mio_pad_attr_7_virtual_od_en_7_qs;
        reg_rdata_next[2] = mio_pad_attr_7_pull_en_7_qs;
        reg_rdata_next[3] = mio_pad_attr_7_pull_select_7_qs;
        reg_rdata_next[4] = mio_pad_attr_7_keeper_en_7_qs;
        reg_rdata_next[5] = mio_pad_attr_7_schmitt_en_7_qs;
        reg_rdata_next[6] = mio_pad_attr_7_od_en_7_qs;
        reg_rdata_next[17:16] = mio_pad_attr_7_slew_rate_7_qs;
        reg_rdata_next[23:20] = mio_pad_attr_7_drive_strength_7_qs;
      end

      addr_hit[171]: begin
        reg_rdata_next[0] = mio_pad_attr_8_invert_8_qs;
        reg_rdata_next[1] = mio_pad_attr_8_virtual_od_en_8_qs;
        reg_rdata_next[2] = mio_pad_attr_8_pull_en_8_qs;
        reg_rdata_next[3] = mio_pad_attr_8_pull_select_8_qs;
        reg_rdata_next[4] = mio_pad_attr_8_keeper_en_8_qs;
        reg_rdata_next[5] = mio_pad_attr_8_schmitt_en_8_qs;
        reg_rdata_next[6] = mio_pad_attr_8_od_en_8_qs;
        reg_rdata_next[17:16] = mio_pad_attr_8_slew_rate_8_qs;
        reg_rdata_next[23:20] = mio_pad_attr_8_drive_strength_8_qs;
      end

      addr_hit[172]: begin
        reg_rdata_next[0] = mio_pad_attr_9_invert_9_qs;
        reg_rdata_next[1] = mio_pad_attr_9_virtual_od_en_9_qs;
        reg_rdata_next[2] = mio_pad_attr_9_pull_en_9_qs;
        reg_rdata_next[3] = mio_pad_attr_9_pull_select_9_qs;
        reg_rdata_next[4] = mio_pad_attr_9_keeper_en_9_qs;
        reg_rdata_next[5] = mio_pad_attr_9_schmitt_en_9_qs;
        reg_rdata_next[6] = mio_pad_attr_9_od_en_9_qs;
        reg_rdata_next[17:16] = mio_pad_attr_9_slew_rate_9_qs;
        reg_rdata_next[23:20] = mio_pad_attr_9_drive_strength_9_qs;
      end

      addr_hit[173]: begin
        reg_rdata_next[0] = mio_pad_attr_10_invert_10_qs;
        reg_rdata_next[1] = mio_pad_attr_10_virtual_od_en_10_qs;
        reg_rdata_next[2] = mio_pad_attr_10_pull_en_10_qs;
        reg_rdata_next[3] = mio_pad_attr_10_pull_select_10_qs;
        reg_rdata_next[4] = mio_pad_attr_10_keeper_en_10_qs;
        reg_rdata_next[5] = mio_pad_attr_10_schmitt_en_10_qs;
        reg_rdata_next[6] = mio_pad_attr_10_od_en_10_qs;
        reg_rdata_next[17:16] = mio_pad_attr_10_slew_rate_10_qs;
        reg_rdata_next[23:20] = mio_pad_attr_10_drive_strength_10_qs;
      end

      addr_hit[174]: begin
        reg_rdata_next[0] = mio_pad_attr_11_invert_11_qs;
        reg_rdata_next[1] = mio_pad_attr_11_virtual_od_en_11_qs;
        reg_rdata_next[2] = mio_pad_attr_11_pull_en_11_qs;
        reg_rdata_next[3] = mio_pad_attr_11_pull_select_11_qs;
        reg_rdata_next[4] = mio_pad_attr_11_keeper_en_11_qs;
        reg_rdata_next[5] = mio_pad_attr_11_schmitt_en_11_qs;
        reg_rdata_next[6] = mio_pad_attr_11_od_en_11_qs;
        reg_rdata_next[17:16] = mio_pad_attr_11_slew_rate_11_qs;
        reg_rdata_next[23:20] = mio_pad_attr_11_drive_strength_11_qs;
      end

      addr_hit[175]: begin
        reg_rdata_next[0] = mio_pad_attr_12_invert_12_qs;
        reg_rdata_next[1] = mio_pad_attr_12_virtual_od_en_12_qs;
        reg_rdata_next[2] = mio_pad_attr_12_pull_en_12_qs;
        reg_rdata_next[3] = mio_pad_attr_12_pull_select_12_qs;
        reg_rdata_next[4] = mio_pad_attr_12_keeper_en_12_qs;
        reg_rdata_next[5] = mio_pad_attr_12_schmitt_en_12_qs;
        reg_rdata_next[6] = mio_pad_attr_12_od_en_12_qs;
        reg_rdata_next[17:16] = mio_pad_attr_12_slew_rate_12_qs;
        reg_rdata_next[23:20] = mio_pad_attr_12_drive_strength_12_qs;
      end

      addr_hit[176]: begin
        reg_rdata_next[0] = mio_pad_attr_13_invert_13_qs;
        reg_rdata_next[1] = mio_pad_attr_13_virtual_od_en_13_qs;
        reg_rdata_next[2] = mio_pad_attr_13_pull_en_13_qs;
        reg_rdata_next[3] = mio_pad_attr_13_pull_select_13_qs;
        reg_rdata_next[4] = mio_pad_attr_13_keeper_en_13_qs;
        reg_rdata_next[5] = mio_pad_attr_13_schmitt_en_13_qs;
        reg_rdata_next[6] = mio_pad_attr_13_od_en_13_qs;
        reg_rdata_next[17:16] = mio_pad_attr_13_slew_rate_13_qs;
        reg_rdata_next[23:20] = mio_pad_attr_13_drive_strength_13_qs;
      end

      addr_hit[177]: begin
        reg_rdata_next[0] = mio_pad_attr_14_invert_14_qs;
        reg_rdata_next[1] = mio_pad_attr_14_virtual_od_en_14_qs;
        reg_rdata_next[2] = mio_pad_attr_14_pull_en_14_qs;
        reg_rdata_next[3] = mio_pad_attr_14_pull_select_14_qs;
        reg_rdata_next[4] = mio_pad_attr_14_keeper_en_14_qs;
        reg_rdata_next[5] = mio_pad_attr_14_schmitt_en_14_qs;
        reg_rdata_next[6] = mio_pad_attr_14_od_en_14_qs;
        reg_rdata_next[17:16] = mio_pad_attr_14_slew_rate_14_qs;
        reg_rdata_next[23:20] = mio_pad_attr_14_drive_strength_14_qs;
      end

      addr_hit[178]: begin
        reg_rdata_next[0] = mio_pad_attr_15_invert_15_qs;
        reg_rdata_next[1] = mio_pad_attr_15_virtual_od_en_15_qs;
        reg_rdata_next[2] = mio_pad_attr_15_pull_en_15_qs;
        reg_rdata_next[3] = mio_pad_attr_15_pull_select_15_qs;
        reg_rdata_next[4] = mio_pad_attr_15_keeper_en_15_qs;
        reg_rdata_next[5] = mio_pad_attr_15_schmitt_en_15_qs;
        reg_rdata_next[6] = mio_pad_attr_15_od_en_15_qs;
        reg_rdata_next[17:16] = mio_pad_attr_15_slew_rate_15_qs;
        reg_rdata_next[23:20] = mio_pad_attr_15_drive_strength_15_qs;
      end

      addr_hit[179]: begin
        reg_rdata_next[0] = mio_pad_attr_16_invert_16_qs;
        reg_rdata_next[1] = mio_pad_attr_16_virtual_od_en_16_qs;
        reg_rdata_next[2] = mio_pad_attr_16_pull_en_16_qs;
        reg_rdata_next[3] = mio_pad_attr_16_pull_select_16_qs;
        reg_rdata_next[4] = mio_pad_attr_16_keeper_en_16_qs;
        reg_rdata_next[5] = mio_pad_attr_16_schmitt_en_16_qs;
        reg_rdata_next[6] = mio_pad_attr_16_od_en_16_qs;
        reg_rdata_next[17:16] = mio_pad_attr_16_slew_rate_16_qs;
        reg_rdata_next[23:20] = mio_pad_attr_16_drive_strength_16_qs;
      end

      addr_hit[180]: begin
        reg_rdata_next[0] = mio_pad_attr_17_invert_17_qs;
        reg_rdata_next[1] = mio_pad_attr_17_virtual_od_en_17_qs;
        reg_rdata_next[2] = mio_pad_attr_17_pull_en_17_qs;
        reg_rdata_next[3] = mio_pad_attr_17_pull_select_17_qs;
        reg_rdata_next[4] = mio_pad_attr_17_keeper_en_17_qs;
        reg_rdata_next[5] = mio_pad_attr_17_schmitt_en_17_qs;
        reg_rdata_next[6] = mio_pad_attr_17_od_en_17_qs;
        reg_rdata_next[17:16] = mio_pad_attr_17_slew_rate_17_qs;
        reg_rdata_next[23:20] = mio_pad_attr_17_drive_strength_17_qs;
      end

      addr_hit[181]: begin
        reg_rdata_next[0] = mio_pad_attr_18_invert_18_qs;
        reg_rdata_next[1] = mio_pad_attr_18_virtual_od_en_18_qs;
        reg_rdata_next[2] = mio_pad_attr_18_pull_en_18_qs;
        reg_rdata_next[3] = mio_pad_attr_18_pull_select_18_qs;
        reg_rdata_next[4] = mio_pad_attr_18_keeper_en_18_qs;
        reg_rdata_next[5] = mio_pad_attr_18_schmitt_en_18_qs;
        reg_rdata_next[6] = mio_pad_attr_18_od_en_18_qs;
        reg_rdata_next[17:16] = mio_pad_attr_18_slew_rate_18_qs;
        reg_rdata_next[23:20] = mio_pad_attr_18_drive_strength_18_qs;
      end

      addr_hit[182]: begin
        reg_rdata_next[0] = mio_pad_attr_19_invert_19_qs;
        reg_rdata_next[1] = mio_pad_attr_19_virtual_od_en_19_qs;
        reg_rdata_next[2] = mio_pad_attr_19_pull_en_19_qs;
        reg_rdata_next[3] = mio_pad_attr_19_pull_select_19_qs;
        reg_rdata_next[4] = mio_pad_attr_19_keeper_en_19_qs;
        reg_rdata_next[5] = mio_pad_attr_19_schmitt_en_19_qs;
        reg_rdata_next[6] = mio_pad_attr_19_od_en_19_qs;
        reg_rdata_next[17:16] = mio_pad_attr_19_slew_rate_19_qs;
        reg_rdata_next[23:20] = mio_pad_attr_19_drive_strength_19_qs;
      end

      addr_hit[183]: begin
        reg_rdata_next[0] = mio_pad_attr_20_invert_20_qs;
        reg_rdata_next[1] = mio_pad_attr_20_virtual_od_en_20_qs;
        reg_rdata_next[2] = mio_pad_attr_20_pull_en_20_qs;
        reg_rdata_next[3] = mio_pad_attr_20_pull_select_20_qs;
        reg_rdata_next[4] = mio_pad_attr_20_keeper_en_20_qs;
        reg_rdata_next[5] = mio_pad_attr_20_schmitt_en_20_qs;
        reg_rdata_next[6] = mio_pad_attr_20_od_en_20_qs;
        reg_rdata_next[17:16] = mio_pad_attr_20_slew_rate_20_qs;
        reg_rdata_next[23:20] = mio_pad_attr_20_drive_strength_20_qs;
      end

      addr_hit[184]: begin
        reg_rdata_next[0] = mio_pad_attr_21_invert_21_qs;
        reg_rdata_next[1] = mio_pad_attr_21_virtual_od_en_21_qs;
        reg_rdata_next[2] = mio_pad_attr_21_pull_en_21_qs;
        reg_rdata_next[3] = mio_pad_attr_21_pull_select_21_qs;
        reg_rdata_next[4] = mio_pad_attr_21_keeper_en_21_qs;
        reg_rdata_next[5] = mio_pad_attr_21_schmitt_en_21_qs;
        reg_rdata_next[6] = mio_pad_attr_21_od_en_21_qs;
        reg_rdata_next[17:16] = mio_pad_attr_21_slew_rate_21_qs;
        reg_rdata_next[23:20] = mio_pad_attr_21_drive_strength_21_qs;
      end

      addr_hit[185]: begin
        reg_rdata_next[0] = mio_pad_attr_22_invert_22_qs;
        reg_rdata_next[1] = mio_pad_attr_22_virtual_od_en_22_qs;
        reg_rdata_next[2] = mio_pad_attr_22_pull_en_22_qs;
        reg_rdata_next[3] = mio_pad_attr_22_pull_select_22_qs;
        reg_rdata_next[4] = mio_pad_attr_22_keeper_en_22_qs;
        reg_rdata_next[5] = mio_pad_attr_22_schmitt_en_22_qs;
        reg_rdata_next[6] = mio_pad_attr_22_od_en_22_qs;
        reg_rdata_next[17:16] = mio_pad_attr_22_slew_rate_22_qs;
        reg_rdata_next[23:20] = mio_pad_attr_22_drive_strength_22_qs;
      end

      addr_hit[186]: begin
        reg_rdata_next[0] = mio_pad_attr_23_invert_23_qs;
        reg_rdata_next[1] = mio_pad_attr_23_virtual_od_en_23_qs;
        reg_rdata_next[2] = mio_pad_attr_23_pull_en_23_qs;
        reg_rdata_next[3] = mio_pad_attr_23_pull_select_23_qs;
        reg_rdata_next[4] = mio_pad_attr_23_keeper_en_23_qs;
        reg_rdata_next[5] = mio_pad_attr_23_schmitt_en_23_qs;
        reg_rdata_next[6] = mio_pad_attr_23_od_en_23_qs;
        reg_rdata_next[17:16] = mio_pad_attr_23_slew_rate_23_qs;
        reg_rdata_next[23:20] = mio_pad_attr_23_drive_strength_23_qs;
      end

      addr_hit[187]: begin
        reg_rdata_next[0] = mio_pad_attr_24_invert_24_qs;
        reg_rdata_next[1] = mio_pad_attr_24_virtual_od_en_24_qs;
        reg_rdata_next[2] = mio_pad_attr_24_pull_en_24_qs;
        reg_rdata_next[3] = mio_pad_attr_24_pull_select_24_qs;
        reg_rdata_next[4] = mio_pad_attr_24_keeper_en_24_qs;
        reg_rdata_next[5] = mio_pad_attr_24_schmitt_en_24_qs;
        reg_rdata_next[6] = mio_pad_attr_24_od_en_24_qs;
        reg_rdata_next[17:16] = mio_pad_attr_24_slew_rate_24_qs;
        reg_rdata_next[23:20] = mio_pad_attr_24_drive_strength_24_qs;
      end

      addr_hit[188]: begin
        reg_rdata_next[0] = mio_pad_attr_25_invert_25_qs;
        reg_rdata_next[1] = mio_pad_attr_25_virtual_od_en_25_qs;
        reg_rdata_next[2] = mio_pad_attr_25_pull_en_25_qs;
        reg_rdata_next[3] = mio_pad_attr_25_pull_select_25_qs;
        reg_rdata_next[4] = mio_pad_attr_25_keeper_en_25_qs;
        reg_rdata_next[5] = mio_pad_attr_25_schmitt_en_25_qs;
        reg_rdata_next[6] = mio_pad_attr_25_od_en_25_qs;
        reg_rdata_next[17:16] = mio_pad_attr_25_slew_rate_25_qs;
        reg_rdata_next[23:20] = mio_pad_attr_25_drive_strength_25_qs;
      end

      addr_hit[189]: begin
        reg_rdata_next[0] = mio_pad_attr_26_invert_26_qs;
        reg_rdata_next[1] = mio_pad_attr_26_virtual_od_en_26_qs;
        reg_rdata_next[2] = mio_pad_attr_26_pull_en_26_qs;
        reg_rdata_next[3] = mio_pad_attr_26_pull_select_26_qs;
        reg_rdata_next[4] = mio_pad_attr_26_keeper_en_26_qs;
        reg_rdata_next[5] = mio_pad_attr_26_schmitt_en_26_qs;
        reg_rdata_next[6] = mio_pad_attr_26_od_en_26_qs;
        reg_rdata_next[17:16] = mio_pad_attr_26_slew_rate_26_qs;
        reg_rdata_next[23:20] = mio_pad_attr_26_drive_strength_26_qs;
      end

      addr_hit[190]: begin
        reg_rdata_next[0] = mio_pad_attr_27_invert_27_qs;
        reg_rdata_next[1] = mio_pad_attr_27_virtual_od_en_27_qs;
        reg_rdata_next[2] = mio_pad_attr_27_pull_en_27_qs;
        reg_rdata_next[3] = mio_pad_attr_27_pull_select_27_qs;
        reg_rdata_next[4] = mio_pad_attr_27_keeper_en_27_qs;
        reg_rdata_next[5] = mio_pad_attr_27_schmitt_en_27_qs;
        reg_rdata_next[6] = mio_pad_attr_27_od_en_27_qs;
        reg_rdata_next[17:16] = mio_pad_attr_27_slew_rate_27_qs;
        reg_rdata_next[23:20] = mio_pad_attr_27_drive_strength_27_qs;
      end

      addr_hit[191]: begin
        reg_rdata_next[0] = mio_pad_attr_28_invert_28_qs;
        reg_rdata_next[1] = mio_pad_attr_28_virtual_od_en_28_qs;
        reg_rdata_next[2] = mio_pad_attr_28_pull_en_28_qs;
        reg_rdata_next[3] = mio_pad_attr_28_pull_select_28_qs;
        reg_rdata_next[4] = mio_pad_attr_28_keeper_en_28_qs;
        reg_rdata_next[5] = mio_pad_attr_28_schmitt_en_28_qs;
        reg_rdata_next[6] = mio_pad_attr_28_od_en_28_qs;
        reg_rdata_next[17:16] = mio_pad_attr_28_slew_rate_28_qs;
        reg_rdata_next[23:20] = mio_pad_attr_28_drive_strength_28_qs;
      end

      addr_hit[192]: begin
        reg_rdata_next[0] = mio_pad_attr_29_invert_29_qs;
        reg_rdata_next[1] = mio_pad_attr_29_virtual_od_en_29_qs;
        reg_rdata_next[2] = mio_pad_attr_29_pull_en_29_qs;
        reg_rdata_next[3] = mio_pad_attr_29_pull_select_29_qs;
        reg_rdata_next[4] = mio_pad_attr_29_keeper_en_29_qs;
        reg_rdata_next[5] = mio_pad_attr_29_schmitt_en_29_qs;
        reg_rdata_next[6] = mio_pad_attr_29_od_en_29_qs;
        reg_rdata_next[17:16] = mio_pad_attr_29_slew_rate_29_qs;
        reg_rdata_next[23:20] = mio_pad_attr_29_drive_strength_29_qs;
      end

      addr_hit[193]: begin
        reg_rdata_next[0] = mio_pad_attr_30_invert_30_qs;
        reg_rdata_next[1] = mio_pad_attr_30_virtual_od_en_30_qs;
        reg_rdata_next[2] = mio_pad_attr_30_pull_en_30_qs;
        reg_rdata_next[3] = mio_pad_attr_30_pull_select_30_qs;
        reg_rdata_next[4] = mio_pad_attr_30_keeper_en_30_qs;
        reg_rdata_next[5] = mio_pad_attr_30_schmitt_en_30_qs;
        reg_rdata_next[6] = mio_pad_attr_30_od_en_30_qs;
        reg_rdata_next[17:16] = mio_pad_attr_30_slew_rate_30_qs;
        reg_rdata_next[23:20] = mio_pad_attr_30_drive_strength_30_qs;
      end

      addr_hit[194]: begin
        reg_rdata_next[0] = mio_pad_attr_31_invert_31_qs;
        reg_rdata_next[1] = mio_pad_attr_31_virtual_od_en_31_qs;
        reg_rdata_next[2] = mio_pad_attr_31_pull_en_31_qs;
        reg_rdata_next[3] = mio_pad_attr_31_pull_select_31_qs;
        reg_rdata_next[4] = mio_pad_attr_31_keeper_en_31_qs;
        reg_rdata_next[5] = mio_pad_attr_31_schmitt_en_31_qs;
        reg_rdata_next[6] = mio_pad_attr_31_od_en_31_qs;
        reg_rdata_next[17:16] = mio_pad_attr_31_slew_rate_31_qs;
        reg_rdata_next[23:20] = mio_pad_attr_31_drive_strength_31_qs;
      end

      addr_hit[195]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_0_qs;
      end

      addr_hit[196]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_1_qs;
      end

      addr_hit[197]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_2_qs;
      end

      addr_hit[198]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_3_qs;
      end

      addr_hit[199]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_4_qs;
      end

      addr_hit[200]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_5_qs;
      end

      addr_hit[201]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_6_qs;
      end

      addr_hit[202]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_7_qs;
      end

      addr_hit[203]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_8_qs;
      end

      addr_hit[204]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_9_qs;
      end

      addr_hit[205]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_10_qs;
      end

      addr_hit[206]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_11_qs;
      end

      addr_hit[207]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_12_qs;
      end

      addr_hit[208]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_13_qs;
      end

      addr_hit[209]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_14_qs;
      end

      addr_hit[210]: begin
        reg_rdata_next[0] = dio_pad_attr_regwen_15_qs;
      end

      addr_hit[211]: begin
        reg_rdata_next[0] = dio_pad_attr_0_invert_0_qs;
        reg_rdata_next[1] = dio_pad_attr_0_virtual_od_en_0_qs;
        reg_rdata_next[2] = dio_pad_attr_0_pull_en_0_qs;
        reg_rdata_next[3] = dio_pad_attr_0_pull_select_0_qs;
        reg_rdata_next[4] = dio_pad_attr_0_keeper_en_0_qs;
        reg_rdata_next[5] = dio_pad_attr_0_schmitt_en_0_qs;
        reg_rdata_next[6] = dio_pad_attr_0_od_en_0_qs;
        reg_rdata_next[17:16] = dio_pad_attr_0_slew_rate_0_qs;
        reg_rdata_next[23:20] = dio_pad_attr_0_drive_strength_0_qs;
      end

      addr_hit[212]: begin
        reg_rdata_next[0] = dio_pad_attr_1_invert_1_qs;
        reg_rdata_next[1] = dio_pad_attr_1_virtual_od_en_1_qs;
        reg_rdata_next[2] = dio_pad_attr_1_pull_en_1_qs;
        reg_rdata_next[3] = dio_pad_attr_1_pull_select_1_qs;
        reg_rdata_next[4] = dio_pad_attr_1_keeper_en_1_qs;
        reg_rdata_next[5] = dio_pad_attr_1_schmitt_en_1_qs;
        reg_rdata_next[6] = dio_pad_attr_1_od_en_1_qs;
        reg_rdata_next[17:16] = dio_pad_attr_1_slew_rate_1_qs;
        reg_rdata_next[23:20] = dio_pad_attr_1_drive_strength_1_qs;
      end

      addr_hit[213]: begin
        reg_rdata_next[0] = dio_pad_attr_2_invert_2_qs;
        reg_rdata_next[1] = dio_pad_attr_2_virtual_od_en_2_qs;
        reg_rdata_next[2] = dio_pad_attr_2_pull_en_2_qs;
        reg_rdata_next[3] = dio_pad_attr_2_pull_select_2_qs;
        reg_rdata_next[4] = dio_pad_attr_2_keeper_en_2_qs;
        reg_rdata_next[5] = dio_pad_attr_2_schmitt_en_2_qs;
        reg_rdata_next[6] = dio_pad_attr_2_od_en_2_qs;
        reg_rdata_next[17:16] = dio_pad_attr_2_slew_rate_2_qs;
        reg_rdata_next[23:20] = dio_pad_attr_2_drive_strength_2_qs;
      end

      addr_hit[214]: begin
        reg_rdata_next[0] = dio_pad_attr_3_invert_3_qs;
        reg_rdata_next[1] = dio_pad_attr_3_virtual_od_en_3_qs;
        reg_rdata_next[2] = dio_pad_attr_3_pull_en_3_qs;
        reg_rdata_next[3] = dio_pad_attr_3_pull_select_3_qs;
        reg_rdata_next[4] = dio_pad_attr_3_keeper_en_3_qs;
        reg_rdata_next[5] = dio_pad_attr_3_schmitt_en_3_qs;
        reg_rdata_next[6] = dio_pad_attr_3_od_en_3_qs;
        reg_rdata_next[17:16] = dio_pad_attr_3_slew_rate_3_qs;
        reg_rdata_next[23:20] = dio_pad_attr_3_drive_strength_3_qs;
      end

      addr_hit[215]: begin
        reg_rdata_next[0] = dio_pad_attr_4_invert_4_qs;
        reg_rdata_next[1] = dio_pad_attr_4_virtual_od_en_4_qs;
        reg_rdata_next[2] = dio_pad_attr_4_pull_en_4_qs;
        reg_rdata_next[3] = dio_pad_attr_4_pull_select_4_qs;
        reg_rdata_next[4] = dio_pad_attr_4_keeper_en_4_qs;
        reg_rdata_next[5] = dio_pad_attr_4_schmitt_en_4_qs;
        reg_rdata_next[6] = dio_pad_attr_4_od_en_4_qs;
        reg_rdata_next[17:16] = dio_pad_attr_4_slew_rate_4_qs;
        reg_rdata_next[23:20] = dio_pad_attr_4_drive_strength_4_qs;
      end

      addr_hit[216]: begin
        reg_rdata_next[0] = dio_pad_attr_5_invert_5_qs;
        reg_rdata_next[1] = dio_pad_attr_5_virtual_od_en_5_qs;
        reg_rdata_next[2] = dio_pad_attr_5_pull_en_5_qs;
        reg_rdata_next[3] = dio_pad_attr_5_pull_select_5_qs;
        reg_rdata_next[4] = dio_pad_attr_5_keeper_en_5_qs;
        reg_rdata_next[5] = dio_pad_attr_5_schmitt_en_5_qs;
        reg_rdata_next[6] = dio_pad_attr_5_od_en_5_qs;
        reg_rdata_next[17:16] = dio_pad_attr_5_slew_rate_5_qs;
        reg_rdata_next[23:20] = dio_pad_attr_5_drive_strength_5_qs;
      end

      addr_hit[217]: begin
        reg_rdata_next[0] = dio_pad_attr_6_invert_6_qs;
        reg_rdata_next[1] = dio_pad_attr_6_virtual_od_en_6_qs;
        reg_rdata_next[2] = dio_pad_attr_6_pull_en_6_qs;
        reg_rdata_next[3] = dio_pad_attr_6_pull_select_6_qs;
        reg_rdata_next[4] = dio_pad_attr_6_keeper_en_6_qs;
        reg_rdata_next[5] = dio_pad_attr_6_schmitt_en_6_qs;
        reg_rdata_next[6] = dio_pad_attr_6_od_en_6_qs;
        reg_rdata_next[17:16] = dio_pad_attr_6_slew_rate_6_qs;
        reg_rdata_next[23:20] = dio_pad_attr_6_drive_strength_6_qs;
      end

      addr_hit[218]: begin
        reg_rdata_next[0] = dio_pad_attr_7_invert_7_qs;
        reg_rdata_next[1] = dio_pad_attr_7_virtual_od_en_7_qs;
        reg_rdata_next[2] = dio_pad_attr_7_pull_en_7_qs;
        reg_rdata_next[3] = dio_pad_attr_7_pull_select_7_qs;
        reg_rdata_next[4] = dio_pad_attr_7_keeper_en_7_qs;
        reg_rdata_next[5] = dio_pad_attr_7_schmitt_en_7_qs;
        reg_rdata_next[6] = dio_pad_attr_7_od_en_7_qs;
        reg_rdata_next[17:16] = dio_pad_attr_7_slew_rate_7_qs;
        reg_rdata_next[23:20] = dio_pad_attr_7_drive_strength_7_qs;
      end

      addr_hit[219]: begin
        reg_rdata_next[0] = dio_pad_attr_8_invert_8_qs;
        reg_rdata_next[1] = dio_pad_attr_8_virtual_od_en_8_qs;
        reg_rdata_next[2] = dio_pad_attr_8_pull_en_8_qs;
        reg_rdata_next[3] = dio_pad_attr_8_pull_select_8_qs;
        reg_rdata_next[4] = dio_pad_attr_8_keeper_en_8_qs;
        reg_rdata_next[5] = dio_pad_attr_8_schmitt_en_8_qs;
        reg_rdata_next[6] = dio_pad_attr_8_od_en_8_qs;
        reg_rdata_next[17:16] = dio_pad_attr_8_slew_rate_8_qs;
        reg_rdata_next[23:20] = dio_pad_attr_8_drive_strength_8_qs;
      end

      addr_hit[220]: begin
        reg_rdata_next[0] = dio_pad_attr_9_invert_9_qs;
        reg_rdata_next[1] = dio_pad_attr_9_virtual_od_en_9_qs;
        reg_rdata_next[2] = dio_pad_attr_9_pull_en_9_qs;
        reg_rdata_next[3] = dio_pad_attr_9_pull_select_9_qs;
        reg_rdata_next[4] = dio_pad_attr_9_keeper_en_9_qs;
        reg_rdata_next[5] = dio_pad_attr_9_schmitt_en_9_qs;
        reg_rdata_next[6] = dio_pad_attr_9_od_en_9_qs;
        reg_rdata_next[17:16] = dio_pad_attr_9_slew_rate_9_qs;
        reg_rdata_next[23:20] = dio_pad_attr_9_drive_strength_9_qs;
      end

      addr_hit[221]: begin
        reg_rdata_next[0] = dio_pad_attr_10_invert_10_qs;
        reg_rdata_next[1] = dio_pad_attr_10_virtual_od_en_10_qs;
        reg_rdata_next[2] = dio_pad_attr_10_pull_en_10_qs;
        reg_rdata_next[3] = dio_pad_attr_10_pull_select_10_qs;
        reg_rdata_next[4] = dio_pad_attr_10_keeper_en_10_qs;
        reg_rdata_next[5] = dio_pad_attr_10_schmitt_en_10_qs;
        reg_rdata_next[6] = dio_pad_attr_10_od_en_10_qs;
        reg_rdata_next[17:16] = dio_pad_attr_10_slew_rate_10_qs;
        reg_rdata_next[23:20] = dio_pad_attr_10_drive_strength_10_qs;
      end

      addr_hit[222]: begin
        reg_rdata_next[0] = dio_pad_attr_11_invert_11_qs;
        reg_rdata_next[1] = dio_pad_attr_11_virtual_od_en_11_qs;
        reg_rdata_next[2] = dio_pad_attr_11_pull_en_11_qs;
        reg_rdata_next[3] = dio_pad_attr_11_pull_select_11_qs;
        reg_rdata_next[4] = dio_pad_attr_11_keeper_en_11_qs;
        reg_rdata_next[5] = dio_pad_attr_11_schmitt_en_11_qs;
        reg_rdata_next[6] = dio_pad_attr_11_od_en_11_qs;
        reg_rdata_next[17:16] = dio_pad_attr_11_slew_rate_11_qs;
        reg_rdata_next[23:20] = dio_pad_attr_11_drive_strength_11_qs;
      end

      addr_hit[223]: begin
        reg_rdata_next[0] = dio_pad_attr_12_invert_12_qs;
        reg_rdata_next[1] = dio_pad_attr_12_virtual_od_en_12_qs;
        reg_rdata_next[2] = dio_pad_attr_12_pull_en_12_qs;
        reg_rdata_next[3] = dio_pad_attr_12_pull_select_12_qs;
        reg_rdata_next[4] = dio_pad_attr_12_keeper_en_12_qs;
        reg_rdata_next[5] = dio_pad_attr_12_schmitt_en_12_qs;
        reg_rdata_next[6] = dio_pad_attr_12_od_en_12_qs;
        reg_rdata_next[17:16] = dio_pad_attr_12_slew_rate_12_qs;
        reg_rdata_next[23:20] = dio_pad_attr_12_drive_strength_12_qs;
      end

      addr_hit[224]: begin
        reg_rdata_next[0] = dio_pad_attr_13_invert_13_qs;
        reg_rdata_next[1] = dio_pad_attr_13_virtual_od_en_13_qs;
        reg_rdata_next[2] = dio_pad_attr_13_pull_en_13_qs;
        reg_rdata_next[3] = dio_pad_attr_13_pull_select_13_qs;
        reg_rdata_next[4] = dio_pad_attr_13_keeper_en_13_qs;
        reg_rdata_next[5] = dio_pad_attr_13_schmitt_en_13_qs;
        reg_rdata_next[6] = dio_pad_attr_13_od_en_13_qs;
        reg_rdata_next[17:16] = dio_pad_attr_13_slew_rate_13_qs;
        reg_rdata_next[23:20] = dio_pad_attr_13_drive_strength_13_qs;
      end

      addr_hit[225]: begin
        reg_rdata_next[0] = dio_pad_attr_14_invert_14_qs;
        reg_rdata_next[1] = dio_pad_attr_14_virtual_od_en_14_qs;
        reg_rdata_next[2] = dio_pad_attr_14_pull_en_14_qs;
        reg_rdata_next[3] = dio_pad_attr_14_pull_select_14_qs;
        reg_rdata_next[4] = dio_pad_attr_14_keeper_en_14_qs;
        reg_rdata_next[5] = dio_pad_attr_14_schmitt_en_14_qs;
        reg_rdata_next[6] = dio_pad_attr_14_od_en_14_qs;
        reg_rdata_next[17:16] = dio_pad_attr_14_slew_rate_14_qs;
        reg_rdata_next[23:20] = dio_pad_attr_14_drive_strength_14_qs;
      end

      addr_hit[226]: begin
        reg_rdata_next[0] = dio_pad_attr_15_invert_15_qs;
        reg_rdata_next[1] = dio_pad_attr_15_virtual_od_en_15_qs;
        reg_rdata_next[2] = dio_pad_attr_15_pull_en_15_qs;
        reg_rdata_next[3] = dio_pad_attr_15_pull_select_15_qs;
        reg_rdata_next[4] = dio_pad_attr_15_keeper_en_15_qs;
        reg_rdata_next[5] = dio_pad_attr_15_schmitt_en_15_qs;
        reg_rdata_next[6] = dio_pad_attr_15_od_en_15_qs;
        reg_rdata_next[17:16] = dio_pad_attr_15_slew_rate_15_qs;
        reg_rdata_next[23:20] = dio_pad_attr_15_drive_strength_15_qs;
      end

      addr_hit[227]: begin
        reg_rdata_next[0] = mio_pad_sleep_status_en_0_qs;
        reg_rdata_next[1] = mio_pad_sleep_status_en_1_qs;
        reg_rdata_next[2] = mio_pad_sleep_status_en_2_qs;
        reg_rdata_next[3] = mio_pad_sleep_status_en_3_qs;
        reg_rdata_next[4] = mio_pad_sleep_status_en_4_qs;
        reg_rdata_next[5] = mio_pad_sleep_status_en_5_qs;
        reg_rdata_next[6] = mio_pad_sleep_status_en_6_qs;
        reg_rdata_next[7] = mio_pad_sleep_status_en_7_qs;
        reg_rdata_next[8] = mio_pad_sleep_status_en_8_qs;
        reg_rdata_next[9] = mio_pad_sleep_status_en_9_qs;
        reg_rdata_next[10] = mio_pad_sleep_status_en_10_qs;
        reg_rdata_next[11] = mio_pad_sleep_status_en_11_qs;
        reg_rdata_next[12] = mio_pad_sleep_status_en_12_qs;
        reg_rdata_next[13] = mio_pad_sleep_status_en_13_qs;
        reg_rdata_next[14] = mio_pad_sleep_status_en_14_qs;
        reg_rdata_next[15] = mio_pad_sleep_status_en_15_qs;
        reg_rdata_next[16] = mio_pad_sleep_status_en_16_qs;
        reg_rdata_next[17] = mio_pad_sleep_status_en_17_qs;
        reg_rdata_next[18] = mio_pad_sleep_status_en_18_qs;
        reg_rdata_next[19] = mio_pad_sleep_status_en_19_qs;
        reg_rdata_next[20] = mio_pad_sleep_status_en_20_qs;
        reg_rdata_next[21] = mio_pad_sleep_status_en_21_qs;
        reg_rdata_next[22] = mio_pad_sleep_status_en_22_qs;
        reg_rdata_next[23] = mio_pad_sleep_status_en_23_qs;
        reg_rdata_next[24] = mio_pad_sleep_status_en_24_qs;
        reg_rdata_next[25] = mio_pad_sleep_status_en_25_qs;
        reg_rdata_next[26] = mio_pad_sleep_status_en_26_qs;
        reg_rdata_next[27] = mio_pad_sleep_status_en_27_qs;
        reg_rdata_next[28] = mio_pad_sleep_status_en_28_qs;
        reg_rdata_next[29] = mio_pad_sleep_status_en_29_qs;
        reg_rdata_next[30] = mio_pad_sleep_status_en_30_qs;
        reg_rdata_next[31] = mio_pad_sleep_status_en_31_qs;
      end

      addr_hit[228]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_0_qs;
      end

      addr_hit[229]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_1_qs;
      end

      addr_hit[230]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_2_qs;
      end

      addr_hit[231]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_3_qs;
      end

      addr_hit[232]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_4_qs;
      end

      addr_hit[233]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_5_qs;
      end

      addr_hit[234]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_6_qs;
      end

      addr_hit[235]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_7_qs;
      end

      addr_hit[236]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_8_qs;
      end

      addr_hit[237]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_9_qs;
      end

      addr_hit[238]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_10_qs;
      end

      addr_hit[239]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_11_qs;
      end

      addr_hit[240]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_12_qs;
      end

      addr_hit[241]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_13_qs;
      end

      addr_hit[242]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_14_qs;
      end

      addr_hit[243]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_15_qs;
      end

      addr_hit[244]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_16_qs;
      end

      addr_hit[245]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_17_qs;
      end

      addr_hit[246]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_18_qs;
      end

      addr_hit[247]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_19_qs;
      end

      addr_hit[248]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_20_qs;
      end

      addr_hit[249]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_21_qs;
      end

      addr_hit[250]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_22_qs;
      end

      addr_hit[251]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_23_qs;
      end

      addr_hit[252]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_24_qs;
      end

      addr_hit[253]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_25_qs;
      end

      addr_hit[254]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_26_qs;
      end

      addr_hit[255]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_27_qs;
      end

      addr_hit[256]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_28_qs;
      end

      addr_hit[257]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_29_qs;
      end

      addr_hit[258]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_30_qs;
      end

      addr_hit[259]: begin
        reg_rdata_next[0] = mio_pad_sleep_regwen_31_qs;
      end

      addr_hit[260]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_0_qs;
      end

      addr_hit[261]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_1_qs;
      end

      addr_hit[262]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_2_qs;
      end

      addr_hit[263]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_3_qs;
      end

      addr_hit[264]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_4_qs;
      end

      addr_hit[265]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_5_qs;
      end

      addr_hit[266]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_6_qs;
      end

      addr_hit[267]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_7_qs;
      end

      addr_hit[268]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_8_qs;
      end

      addr_hit[269]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_9_qs;
      end

      addr_hit[270]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_10_qs;
      end

      addr_hit[271]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_11_qs;
      end

      addr_hit[272]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_12_qs;
      end

      addr_hit[273]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_13_qs;
      end

      addr_hit[274]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_14_qs;
      end

      addr_hit[275]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_15_qs;
      end

      addr_hit[276]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_16_qs;
      end

      addr_hit[277]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_17_qs;
      end

      addr_hit[278]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_18_qs;
      end

      addr_hit[279]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_19_qs;
      end

      addr_hit[280]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_20_qs;
      end

      addr_hit[281]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_21_qs;
      end

      addr_hit[282]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_22_qs;
      end

      addr_hit[283]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_23_qs;
      end

      addr_hit[284]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_24_qs;
      end

      addr_hit[285]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_25_qs;
      end

      addr_hit[286]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_26_qs;
      end

      addr_hit[287]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_27_qs;
      end

      addr_hit[288]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_28_qs;
      end

      addr_hit[289]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_29_qs;
      end

      addr_hit[290]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_30_qs;
      end

      addr_hit[291]: begin
        reg_rdata_next[0] = mio_pad_sleep_en_31_qs;
      end

      addr_hit[292]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_0_qs;
      end

      addr_hit[293]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_1_qs;
      end

      addr_hit[294]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_2_qs;
      end

      addr_hit[295]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_3_qs;
      end

      addr_hit[296]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_4_qs;
      end

      addr_hit[297]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_5_qs;
      end

      addr_hit[298]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_6_qs;
      end

      addr_hit[299]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_7_qs;
      end

      addr_hit[300]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_8_qs;
      end

      addr_hit[301]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_9_qs;
      end

      addr_hit[302]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_10_qs;
      end

      addr_hit[303]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_11_qs;
      end

      addr_hit[304]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_12_qs;
      end

      addr_hit[305]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_13_qs;
      end

      addr_hit[306]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_14_qs;
      end

      addr_hit[307]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_15_qs;
      end

      addr_hit[308]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_16_qs;
      end

      addr_hit[309]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_17_qs;
      end

      addr_hit[310]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_18_qs;
      end

      addr_hit[311]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_19_qs;
      end

      addr_hit[312]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_20_qs;
      end

      addr_hit[313]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_21_qs;
      end

      addr_hit[314]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_22_qs;
      end

      addr_hit[315]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_23_qs;
      end

      addr_hit[316]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_24_qs;
      end

      addr_hit[317]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_25_qs;
      end

      addr_hit[318]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_26_qs;
      end

      addr_hit[319]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_27_qs;
      end

      addr_hit[320]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_28_qs;
      end

      addr_hit[321]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_29_qs;
      end

      addr_hit[322]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_30_qs;
      end

      addr_hit[323]: begin
        reg_rdata_next[1:0] = mio_pad_sleep_mode_31_qs;
      end

      addr_hit[324]: begin
        reg_rdata_next[0] = dio_pad_sleep_status_en_0_qs;
        reg_rdata_next[1] = dio_pad_sleep_status_en_1_qs;
        reg_rdata_next[2] = dio_pad_sleep_status_en_2_qs;
        reg_rdata_next[3] = dio_pad_sleep_status_en_3_qs;
        reg_rdata_next[4] = dio_pad_sleep_status_en_4_qs;
        reg_rdata_next[5] = dio_pad_sleep_status_en_5_qs;
        reg_rdata_next[6] = dio_pad_sleep_status_en_6_qs;
        reg_rdata_next[7] = dio_pad_sleep_status_en_7_qs;
        reg_rdata_next[8] = dio_pad_sleep_status_en_8_qs;
        reg_rdata_next[9] = dio_pad_sleep_status_en_9_qs;
        reg_rdata_next[10] = dio_pad_sleep_status_en_10_qs;
        reg_rdata_next[11] = dio_pad_sleep_status_en_11_qs;
        reg_rdata_next[12] = dio_pad_sleep_status_en_12_qs;
        reg_rdata_next[13] = dio_pad_sleep_status_en_13_qs;
        reg_rdata_next[14] = dio_pad_sleep_status_en_14_qs;
        reg_rdata_next[15] = dio_pad_sleep_status_en_15_qs;
      end

      addr_hit[325]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_0_qs;
      end

      addr_hit[326]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_1_qs;
      end

      addr_hit[327]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_2_qs;
      end

      addr_hit[328]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_3_qs;
      end

      addr_hit[329]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_4_qs;
      end

      addr_hit[330]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_5_qs;
      end

      addr_hit[331]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_6_qs;
      end

      addr_hit[332]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_7_qs;
      end

      addr_hit[333]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_8_qs;
      end

      addr_hit[334]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_9_qs;
      end

      addr_hit[335]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_10_qs;
      end

      addr_hit[336]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_11_qs;
      end

      addr_hit[337]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_12_qs;
      end

      addr_hit[338]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_13_qs;
      end

      addr_hit[339]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_14_qs;
      end

      addr_hit[340]: begin
        reg_rdata_next[0] = dio_pad_sleep_regwen_15_qs;
      end

      addr_hit[341]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_0_qs;
      end

      addr_hit[342]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_1_qs;
      end

      addr_hit[343]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_2_qs;
      end

      addr_hit[344]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_3_qs;
      end

      addr_hit[345]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_4_qs;
      end

      addr_hit[346]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_5_qs;
      end

      addr_hit[347]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_6_qs;
      end

      addr_hit[348]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_7_qs;
      end

      addr_hit[349]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_8_qs;
      end

      addr_hit[350]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_9_qs;
      end

      addr_hit[351]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_10_qs;
      end

      addr_hit[352]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_11_qs;
      end

      addr_hit[353]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_12_qs;
      end

      addr_hit[354]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_13_qs;
      end

      addr_hit[355]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_14_qs;
      end

      addr_hit[356]: begin
        reg_rdata_next[0] = dio_pad_sleep_en_15_qs;
      end

      addr_hit[357]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_0_qs;
      end

      addr_hit[358]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_1_qs;
      end

      addr_hit[359]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_2_qs;
      end

      addr_hit[360]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_3_qs;
      end

      addr_hit[361]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_4_qs;
      end

      addr_hit[362]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_5_qs;
      end

      addr_hit[363]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_6_qs;
      end

      addr_hit[364]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_7_qs;
      end

      addr_hit[365]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_8_qs;
      end

      addr_hit[366]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_9_qs;
      end

      addr_hit[367]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_10_qs;
      end

      addr_hit[368]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_11_qs;
      end

      addr_hit[369]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_12_qs;
      end

      addr_hit[370]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_13_qs;
      end

      addr_hit[371]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_14_qs;
      end

      addr_hit[372]: begin
        reg_rdata_next[1:0] = dio_pad_sleep_mode_15_qs;
      end

      addr_hit[373]: begin
        reg_rdata_next[0] = wkup_detector_regwen_0_qs;
      end

      addr_hit[374]: begin
        reg_rdata_next[0] = wkup_detector_regwen_1_qs;
      end

      addr_hit[375]: begin
        reg_rdata_next[0] = wkup_detector_regwen_2_qs;
      end

      addr_hit[376]: begin
        reg_rdata_next[0] = wkup_detector_regwen_3_qs;
      end

      addr_hit[377]: begin
        reg_rdata_next[0] = wkup_detector_regwen_4_qs;
      end

      addr_hit[378]: begin
        reg_rdata_next[0] = wkup_detector_regwen_5_qs;
      end

      addr_hit[379]: begin
        reg_rdata_next[0] = wkup_detector_regwen_6_qs;
      end

      addr_hit[380]: begin
        reg_rdata_next[0] = wkup_detector_regwen_7_qs;
      end

      addr_hit[381]: begin
        reg_rdata_next = DW'(wkup_detector_en_0_qs);
      end
      addr_hit[382]: begin
        reg_rdata_next = DW'(wkup_detector_en_1_qs);
      end
      addr_hit[383]: begin
        reg_rdata_next = DW'(wkup_detector_en_2_qs);
      end
      addr_hit[384]: begin
        reg_rdata_next = DW'(wkup_detector_en_3_qs);
      end
      addr_hit[385]: begin
        reg_rdata_next = DW'(wkup_detector_en_4_qs);
      end
      addr_hit[386]: begin
        reg_rdata_next = DW'(wkup_detector_en_5_qs);
      end
      addr_hit[387]: begin
        reg_rdata_next = DW'(wkup_detector_en_6_qs);
      end
      addr_hit[388]: begin
        reg_rdata_next = DW'(wkup_detector_en_7_qs);
      end
      addr_hit[389]: begin
        reg_rdata_next = DW'(wkup_detector_0_qs);
      end
      addr_hit[390]: begin
        reg_rdata_next = DW'(wkup_detector_1_qs);
      end
      addr_hit[391]: begin
        reg_rdata_next = DW'(wkup_detector_2_qs);
      end
      addr_hit[392]: begin
        reg_rdata_next = DW'(wkup_detector_3_qs);
      end
      addr_hit[393]: begin
        reg_rdata_next = DW'(wkup_detector_4_qs);
      end
      addr_hit[394]: begin
        reg_rdata_next = DW'(wkup_detector_5_qs);
      end
      addr_hit[395]: begin
        reg_rdata_next = DW'(wkup_detector_6_qs);
      end
      addr_hit[396]: begin
        reg_rdata_next = DW'(wkup_detector_7_qs);
      end
      addr_hit[397]: begin
        reg_rdata_next = DW'(wkup_detector_cnt_th_0_qs);
      end
      addr_hit[398]: begin
        reg_rdata_next = DW'(wkup_detector_cnt_th_1_qs);
      end
      addr_hit[399]: begin
        reg_rdata_next = DW'(wkup_detector_cnt_th_2_qs);
      end
      addr_hit[400]: begin
        reg_rdata_next = DW'(wkup_detector_cnt_th_3_qs);
      end
      addr_hit[401]: begin
        reg_rdata_next = DW'(wkup_detector_cnt_th_4_qs);
      end
      addr_hit[402]: begin
        reg_rdata_next = DW'(wkup_detector_cnt_th_5_qs);
      end
      addr_hit[403]: begin
        reg_rdata_next = DW'(wkup_detector_cnt_th_6_qs);
      end
      addr_hit[404]: begin
        reg_rdata_next = DW'(wkup_detector_cnt_th_7_qs);
      end
      addr_hit[405]: begin
        reg_rdata_next[5:0] = wkup_detector_padsel_0_qs;
      end

      addr_hit[406]: begin
        reg_rdata_next[5:0] = wkup_detector_padsel_1_qs;
      end

      addr_hit[407]: begin
        reg_rdata_next[5:0] = wkup_detector_padsel_2_qs;
      end

      addr_hit[408]: begin
        reg_rdata_next[5:0] = wkup_detector_padsel_3_qs;
      end

      addr_hit[409]: begin
        reg_rdata_next[5:0] = wkup_detector_padsel_4_qs;
      end

      addr_hit[410]: begin
        reg_rdata_next[5:0] = wkup_detector_padsel_5_qs;
      end

      addr_hit[411]: begin
        reg_rdata_next[5:0] = wkup_detector_padsel_6_qs;
      end

      addr_hit[412]: begin
        reg_rdata_next[5:0] = wkup_detector_padsel_7_qs;
      end

      addr_hit[413]: begin
        reg_rdata_next = DW'(wkup_cause_qs);
      end
      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  logic reg_busy_sel;
  assign reg_busy = reg_busy_sel | shadow_busy;
  always_comb begin
    reg_busy_sel = '0;
    unique case (1'b1)
      addr_hit[381]: begin
        reg_busy_sel = wkup_detector_en_0_busy;
      end
      addr_hit[382]: begin
        reg_busy_sel = wkup_detector_en_1_busy;
      end
      addr_hit[383]: begin
        reg_busy_sel = wkup_detector_en_2_busy;
      end
      addr_hit[384]: begin
        reg_busy_sel = wkup_detector_en_3_busy;
      end
      addr_hit[385]: begin
        reg_busy_sel = wkup_detector_en_4_busy;
      end
      addr_hit[386]: begin
        reg_busy_sel = wkup_detector_en_5_busy;
      end
      addr_hit[387]: begin
        reg_busy_sel = wkup_detector_en_6_busy;
      end
      addr_hit[388]: begin
        reg_busy_sel = wkup_detector_en_7_busy;
      end
      addr_hit[389]: begin
        reg_busy_sel = wkup_detector_0_busy;
      end
      addr_hit[390]: begin
        reg_busy_sel = wkup_detector_1_busy;
      end
      addr_hit[391]: begin
        reg_busy_sel = wkup_detector_2_busy;
      end
      addr_hit[392]: begin
        reg_busy_sel = wkup_detector_3_busy;
      end
      addr_hit[393]: begin
        reg_busy_sel = wkup_detector_4_busy;
      end
      addr_hit[394]: begin
        reg_busy_sel = wkup_detector_5_busy;
      end
      addr_hit[395]: begin
        reg_busy_sel = wkup_detector_6_busy;
      end
      addr_hit[396]: begin
        reg_busy_sel = wkup_detector_7_busy;
      end
      addr_hit[397]: begin
        reg_busy_sel = wkup_detector_cnt_th_0_busy;
      end
      addr_hit[398]: begin
        reg_busy_sel = wkup_detector_cnt_th_1_busy;
      end
      addr_hit[399]: begin
        reg_busy_sel = wkup_detector_cnt_th_2_busy;
      end
      addr_hit[400]: begin
        reg_busy_sel = wkup_detector_cnt_th_3_busy;
      end
      addr_hit[401]: begin
        reg_busy_sel = wkup_detector_cnt_th_4_busy;
      end
      addr_hit[402]: begin
        reg_busy_sel = wkup_detector_cnt_th_5_busy;
      end
      addr_hit[403]: begin
        reg_busy_sel = wkup_detector_cnt_th_6_busy;
      end
      addr_hit[404]: begin
        reg_busy_sel = wkup_detector_cnt_th_7_busy;
      end
      addr_hit[413]: begin
        reg_busy_sel = wkup_cause_busy;
      end
      default: begin
        reg_busy_sel  = '0;
      end
    endcase
  end


  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
