// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

module flash_ctrl_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,

  // Output port for window
  output tlul_pkg::tl_h2d_t tl_win_o  [2],
  input  tlul_pkg::tl_d2h_t tl_win_i  [2],

  // To HW
  output flash_ctrl_reg_pkg::flash_ctrl_reg2hw_t reg2hw, // Write
  input  flash_ctrl_reg_pkg::flash_ctrl_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import flash_ctrl_reg_pkg::* ;

  localparam AW = 7;
  localparam DW = 32;
  localparam DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  tlul_pkg::tl_h2d_t tl_socket_h2d [3];
  tlul_pkg::tl_d2h_t tl_socket_d2h [3];

  logic [1:0] reg_steer;

  // socket_1n connection
  assign tl_reg_h2d = tl_socket_h2d[2];
  assign tl_socket_d2h[2] = tl_reg_d2h;

  assign tl_win_o[0] = tl_socket_h2d[0];
  assign tl_socket_d2h[0] = tl_win_i[0];
  assign tl_win_o[1] = tl_socket_h2d[1];
  assign tl_socket_d2h[1] = tl_win_i[1];

  // Create Socket_1n
  tlul_socket_1n #(
    .N          (3),
    .HReqPass   (1'b1),
    .HRspPass   (1'b1),
    .DReqPass   ({3{1'b1}}),
    .DRspPass   ({3{1'b1}}),
    .HReqDepth  (4'h1),
    .HRspDepth  (4'h1),
    .DReqDepth  ({3{4'h1}}),
    .DRspDepth  ({3{4'h1}})
  ) u_socket (
    .clk_i,
    .rst_ni,
    .tl_h_i (tl_i),
    .tl_h_o (tl_o),
    .tl_d_o (tl_socket_h2d),
    .tl_d_i (tl_socket_d2h),
    .dev_select (reg_steer)
  );

  // Create steering logic
  always_comb begin
    reg_steer = 2;       // Default set to register

    // TODO: Can below codes be unique case () inside ?
    if (tl_i.a_address[AW-1:0] >= 84 && tl_i.a_address[AW-1:0] < 88) begin
      reg_steer = 0;
    end
    if (tl_i.a_address[AW-1:0] >= 88 && tl_i.a_address[AW-1:0] < 92) begin
      reg_steer = 1;
    end
  end

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_prog_empty_qs;
  logic intr_state_prog_empty_wd;
  logic intr_state_prog_empty_we;
  logic intr_state_prog_lvl_qs;
  logic intr_state_prog_lvl_wd;
  logic intr_state_prog_lvl_we;
  logic intr_state_rd_full_qs;
  logic intr_state_rd_full_wd;
  logic intr_state_rd_full_we;
  logic intr_state_rd_lvl_qs;
  logic intr_state_rd_lvl_wd;
  logic intr_state_rd_lvl_we;
  logic intr_state_op_done_qs;
  logic intr_state_op_done_wd;
  logic intr_state_op_done_we;
  logic intr_state_op_error_qs;
  logic intr_state_op_error_wd;
  logic intr_state_op_error_we;
  logic intr_enable_prog_empty_qs;
  logic intr_enable_prog_empty_wd;
  logic intr_enable_prog_empty_we;
  logic intr_enable_prog_lvl_qs;
  logic intr_enable_prog_lvl_wd;
  logic intr_enable_prog_lvl_we;
  logic intr_enable_rd_full_qs;
  logic intr_enable_rd_full_wd;
  logic intr_enable_rd_full_we;
  logic intr_enable_rd_lvl_qs;
  logic intr_enable_rd_lvl_wd;
  logic intr_enable_rd_lvl_we;
  logic intr_enable_op_done_qs;
  logic intr_enable_op_done_wd;
  logic intr_enable_op_done_we;
  logic intr_enable_op_error_qs;
  logic intr_enable_op_error_wd;
  logic intr_enable_op_error_we;
  logic intr_test_prog_empty_wd;
  logic intr_test_prog_empty_we;
  logic intr_test_prog_lvl_wd;
  logic intr_test_prog_lvl_we;
  logic intr_test_rd_full_wd;
  logic intr_test_rd_full_we;
  logic intr_test_rd_lvl_wd;
  logic intr_test_rd_lvl_we;
  logic intr_test_op_done_wd;
  logic intr_test_op_done_we;
  logic intr_test_op_error_wd;
  logic intr_test_op_error_we;
  logic control_start_qs;
  logic control_start_wd;
  logic control_start_we;
  logic [1:0] control_op_qs;
  logic [1:0] control_op_wd;
  logic control_op_we;
  logic control_erase_sel_qs;
  logic control_erase_sel_wd;
  logic control_erase_sel_we;
  logic control_fifo_rst_qs;
  logic control_fifo_rst_wd;
  logic control_fifo_rst_we;
  logic [11:0] control_num_qs;
  logic [11:0] control_num_wd;
  logic control_num_we;
  logic [31:0] addr_qs;
  logic [31:0] addr_wd;
  logic addr_we;
  logic region_cfg_regwen_region0_qs;
  logic region_cfg_regwen_region0_wd;
  logic region_cfg_regwen_region0_we;
  logic region_cfg_regwen_region1_qs;
  logic region_cfg_regwen_region1_wd;
  logic region_cfg_regwen_region1_we;
  logic region_cfg_regwen_region2_qs;
  logic region_cfg_regwen_region2_wd;
  logic region_cfg_regwen_region2_we;
  logic region_cfg_regwen_region3_qs;
  logic region_cfg_regwen_region3_wd;
  logic region_cfg_regwen_region3_we;
  logic region_cfg_regwen_region4_qs;
  logic region_cfg_regwen_region4_wd;
  logic region_cfg_regwen_region4_we;
  logic region_cfg_regwen_region5_qs;
  logic region_cfg_regwen_region5_wd;
  logic region_cfg_regwen_region5_we;
  logic region_cfg_regwen_region6_qs;
  logic region_cfg_regwen_region6_wd;
  logic region_cfg_regwen_region6_we;
  logic region_cfg_regwen_region7_qs;
  logic region_cfg_regwen_region7_wd;
  logic region_cfg_regwen_region7_we;
  logic mp_region_cfg0_en0_qs;
  logic mp_region_cfg0_en0_wd;
  logic mp_region_cfg0_en0_we;
  logic mp_region_cfg0_rd_en0_qs;
  logic mp_region_cfg0_rd_en0_wd;
  logic mp_region_cfg0_rd_en0_we;
  logic mp_region_cfg0_prog_en0_qs;
  logic mp_region_cfg0_prog_en0_wd;
  logic mp_region_cfg0_prog_en0_we;
  logic mp_region_cfg0_erase_en0_qs;
  logic mp_region_cfg0_erase_en0_wd;
  logic mp_region_cfg0_erase_en0_we;
  logic [8:0] mp_region_cfg0_base0_qs;
  logic [8:0] mp_region_cfg0_base0_wd;
  logic mp_region_cfg0_base0_we;
  logic [8:0] mp_region_cfg0_size0_qs;
  logic [8:0] mp_region_cfg0_size0_wd;
  logic mp_region_cfg0_size0_we;
  logic mp_region_cfg1_en1_qs;
  logic mp_region_cfg1_en1_wd;
  logic mp_region_cfg1_en1_we;
  logic mp_region_cfg1_rd_en1_qs;
  logic mp_region_cfg1_rd_en1_wd;
  logic mp_region_cfg1_rd_en1_we;
  logic mp_region_cfg1_prog_en1_qs;
  logic mp_region_cfg1_prog_en1_wd;
  logic mp_region_cfg1_prog_en1_we;
  logic mp_region_cfg1_erase_en1_qs;
  logic mp_region_cfg1_erase_en1_wd;
  logic mp_region_cfg1_erase_en1_we;
  logic [8:0] mp_region_cfg1_base1_qs;
  logic [8:0] mp_region_cfg1_base1_wd;
  logic mp_region_cfg1_base1_we;
  logic [8:0] mp_region_cfg1_size1_qs;
  logic [8:0] mp_region_cfg1_size1_wd;
  logic mp_region_cfg1_size1_we;
  logic mp_region_cfg2_en2_qs;
  logic mp_region_cfg2_en2_wd;
  logic mp_region_cfg2_en2_we;
  logic mp_region_cfg2_rd_en2_qs;
  logic mp_region_cfg2_rd_en2_wd;
  logic mp_region_cfg2_rd_en2_we;
  logic mp_region_cfg2_prog_en2_qs;
  logic mp_region_cfg2_prog_en2_wd;
  logic mp_region_cfg2_prog_en2_we;
  logic mp_region_cfg2_erase_en2_qs;
  logic mp_region_cfg2_erase_en2_wd;
  logic mp_region_cfg2_erase_en2_we;
  logic [8:0] mp_region_cfg2_base2_qs;
  logic [8:0] mp_region_cfg2_base2_wd;
  logic mp_region_cfg2_base2_we;
  logic [8:0] mp_region_cfg2_size2_qs;
  logic [8:0] mp_region_cfg2_size2_wd;
  logic mp_region_cfg2_size2_we;
  logic mp_region_cfg3_en3_qs;
  logic mp_region_cfg3_en3_wd;
  logic mp_region_cfg3_en3_we;
  logic mp_region_cfg3_rd_en3_qs;
  logic mp_region_cfg3_rd_en3_wd;
  logic mp_region_cfg3_rd_en3_we;
  logic mp_region_cfg3_prog_en3_qs;
  logic mp_region_cfg3_prog_en3_wd;
  logic mp_region_cfg3_prog_en3_we;
  logic mp_region_cfg3_erase_en3_qs;
  logic mp_region_cfg3_erase_en3_wd;
  logic mp_region_cfg3_erase_en3_we;
  logic [8:0] mp_region_cfg3_base3_qs;
  logic [8:0] mp_region_cfg3_base3_wd;
  logic mp_region_cfg3_base3_we;
  logic [8:0] mp_region_cfg3_size3_qs;
  logic [8:0] mp_region_cfg3_size3_wd;
  logic mp_region_cfg3_size3_we;
  logic mp_region_cfg4_en4_qs;
  logic mp_region_cfg4_en4_wd;
  logic mp_region_cfg4_en4_we;
  logic mp_region_cfg4_rd_en4_qs;
  logic mp_region_cfg4_rd_en4_wd;
  logic mp_region_cfg4_rd_en4_we;
  logic mp_region_cfg4_prog_en4_qs;
  logic mp_region_cfg4_prog_en4_wd;
  logic mp_region_cfg4_prog_en4_we;
  logic mp_region_cfg4_erase_en4_qs;
  logic mp_region_cfg4_erase_en4_wd;
  logic mp_region_cfg4_erase_en4_we;
  logic [8:0] mp_region_cfg4_base4_qs;
  logic [8:0] mp_region_cfg4_base4_wd;
  logic mp_region_cfg4_base4_we;
  logic [8:0] mp_region_cfg4_size4_qs;
  logic [8:0] mp_region_cfg4_size4_wd;
  logic mp_region_cfg4_size4_we;
  logic mp_region_cfg5_en5_qs;
  logic mp_region_cfg5_en5_wd;
  logic mp_region_cfg5_en5_we;
  logic mp_region_cfg5_rd_en5_qs;
  logic mp_region_cfg5_rd_en5_wd;
  logic mp_region_cfg5_rd_en5_we;
  logic mp_region_cfg5_prog_en5_qs;
  logic mp_region_cfg5_prog_en5_wd;
  logic mp_region_cfg5_prog_en5_we;
  logic mp_region_cfg5_erase_en5_qs;
  logic mp_region_cfg5_erase_en5_wd;
  logic mp_region_cfg5_erase_en5_we;
  logic [8:0] mp_region_cfg5_base5_qs;
  logic [8:0] mp_region_cfg5_base5_wd;
  logic mp_region_cfg5_base5_we;
  logic [8:0] mp_region_cfg5_size5_qs;
  logic [8:0] mp_region_cfg5_size5_wd;
  logic mp_region_cfg5_size5_we;
  logic mp_region_cfg6_en6_qs;
  logic mp_region_cfg6_en6_wd;
  logic mp_region_cfg6_en6_we;
  logic mp_region_cfg6_rd_en6_qs;
  logic mp_region_cfg6_rd_en6_wd;
  logic mp_region_cfg6_rd_en6_we;
  logic mp_region_cfg6_prog_en6_qs;
  logic mp_region_cfg6_prog_en6_wd;
  logic mp_region_cfg6_prog_en6_we;
  logic mp_region_cfg6_erase_en6_qs;
  logic mp_region_cfg6_erase_en6_wd;
  logic mp_region_cfg6_erase_en6_we;
  logic [8:0] mp_region_cfg6_base6_qs;
  logic [8:0] mp_region_cfg6_base6_wd;
  logic mp_region_cfg6_base6_we;
  logic [8:0] mp_region_cfg6_size6_qs;
  logic [8:0] mp_region_cfg6_size6_wd;
  logic mp_region_cfg6_size6_we;
  logic mp_region_cfg7_en7_qs;
  logic mp_region_cfg7_en7_wd;
  logic mp_region_cfg7_en7_we;
  logic mp_region_cfg7_rd_en7_qs;
  logic mp_region_cfg7_rd_en7_wd;
  logic mp_region_cfg7_rd_en7_we;
  logic mp_region_cfg7_prog_en7_qs;
  logic mp_region_cfg7_prog_en7_wd;
  logic mp_region_cfg7_prog_en7_we;
  logic mp_region_cfg7_erase_en7_qs;
  logic mp_region_cfg7_erase_en7_wd;
  logic mp_region_cfg7_erase_en7_we;
  logic [8:0] mp_region_cfg7_base7_qs;
  logic [8:0] mp_region_cfg7_base7_wd;
  logic mp_region_cfg7_base7_we;
  logic [8:0] mp_region_cfg7_size7_qs;
  logic [8:0] mp_region_cfg7_size7_wd;
  logic mp_region_cfg7_size7_we;
  logic default_region_rd_en_qs;
  logic default_region_rd_en_wd;
  logic default_region_rd_en_we;
  logic default_region_prog_en_qs;
  logic default_region_prog_en_wd;
  logic default_region_prog_en_we;
  logic default_region_erase_en_qs;
  logic default_region_erase_en_wd;
  logic default_region_erase_en_we;
  logic bank_cfg_regwen_qs;
  logic bank_cfg_regwen_wd;
  logic bank_cfg_regwen_we;
  logic mp_bank_cfg_erase_en0_qs;
  logic mp_bank_cfg_erase_en0_wd;
  logic mp_bank_cfg_erase_en0_we;
  logic mp_bank_cfg_erase_en1_qs;
  logic mp_bank_cfg_erase_en1_wd;
  logic mp_bank_cfg_erase_en1_we;
  logic op_status_done_qs;
  logic op_status_done_wd;
  logic op_status_done_we;
  logic op_status_err_qs;
  logic op_status_err_wd;
  logic op_status_err_we;
  logic status_rd_full_qs;
  logic status_rd_full_re;
  logic status_rd_empty_qs;
  logic status_rd_empty_re;
  logic status_prog_full_qs;
  logic status_prog_full_re;
  logic status_prog_empty_qs;
  logic status_prog_empty_re;
  logic status_init_wip_qs;
  logic status_init_wip_re;
  logic [8:0] status_error_page_qs;
  logic status_error_page_re;
  logic status_error_bank_qs;
  logic status_error_bank_re;
  logic [31:0] scratch_qs;
  logic [31:0] scratch_wd;
  logic scratch_we;
  logic [4:0] fifo_lvl_prog_qs;
  logic [4:0] fifo_lvl_prog_wd;
  logic fifo_lvl_prog_we;
  logic [4:0] fifo_lvl_rd_qs;
  logic [4:0] fifo_lvl_rd_wd;
  logic fifo_lvl_rd_we;

  // Register instances
  // R[intr_state]: V(False)

  //   F[prog_empty]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_prog_empty (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_prog_empty_we),
    .wd     (intr_state_prog_empty_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.prog_empty.de),
    .d      (hw2reg.intr_state.prog_empty.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.prog_empty.q ),

    // to register interface (read)
    .qs     (intr_state_prog_empty_qs)
  );


  //   F[prog_lvl]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_prog_lvl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_prog_lvl_we),
    .wd     (intr_state_prog_lvl_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.prog_lvl.de),
    .d      (hw2reg.intr_state.prog_lvl.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.prog_lvl.q ),

    // to register interface (read)
    .qs     (intr_state_prog_lvl_qs)
  );


  //   F[rd_full]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_rd_full (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_rd_full_we),
    .wd     (intr_state_rd_full_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.rd_full.de),
    .d      (hw2reg.intr_state.rd_full.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.rd_full.q ),

    // to register interface (read)
    .qs     (intr_state_rd_full_qs)
  );


  //   F[rd_lvl]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_rd_lvl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_rd_lvl_we),
    .wd     (intr_state_rd_lvl_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.rd_lvl.de),
    .d      (hw2reg.intr_state.rd_lvl.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.rd_lvl.q ),

    // to register interface (read)
    .qs     (intr_state_rd_lvl_qs)
  );


  //   F[op_done]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_op_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_op_done_we),
    .wd     (intr_state_op_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.op_done.de),
    .d      (hw2reg.intr_state.op_done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.op_done.q ),

    // to register interface (read)
    .qs     (intr_state_op_done_qs)
  );


  //   F[op_error]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_op_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_op_error_we),
    .wd     (intr_state_op_error_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.op_error.de),
    .d      (hw2reg.intr_state.op_error.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.op_error.q ),

    // to register interface (read)
    .qs     (intr_state_op_error_qs)
  );


  // R[intr_enable]: V(False)

  //   F[prog_empty]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_prog_empty (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_prog_empty_we),
    .wd     (intr_enable_prog_empty_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.prog_empty.q ),

    // to register interface (read)
    .qs     (intr_enable_prog_empty_qs)
  );


  //   F[prog_lvl]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_prog_lvl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_prog_lvl_we),
    .wd     (intr_enable_prog_lvl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.prog_lvl.q ),

    // to register interface (read)
    .qs     (intr_enable_prog_lvl_qs)
  );


  //   F[rd_full]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_rd_full (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_rd_full_we),
    .wd     (intr_enable_rd_full_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.rd_full.q ),

    // to register interface (read)
    .qs     (intr_enable_rd_full_qs)
  );


  //   F[rd_lvl]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_rd_lvl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_rd_lvl_we),
    .wd     (intr_enable_rd_lvl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.rd_lvl.q ),

    // to register interface (read)
    .qs     (intr_enable_rd_lvl_qs)
  );


  //   F[op_done]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_op_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_op_done_we),
    .wd     (intr_enable_op_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.op_done.q ),

    // to register interface (read)
    .qs     (intr_enable_op_done_qs)
  );


  //   F[op_error]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_op_error (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_op_error_we),
    .wd     (intr_enable_op_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.op_error.q ),

    // to register interface (read)
    .qs     (intr_enable_op_error_qs)
  );


  // R[intr_test]: V(True)

  //   F[prog_empty]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_prog_empty (
    .re     (1'b0),
    .we     (intr_test_prog_empty_we),
    .wd     (intr_test_prog_empty_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.prog_empty.qe),
    .q      (reg2hw.intr_test.prog_empty.q ),
    .qs     ()
  );


  //   F[prog_lvl]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_prog_lvl (
    .re     (1'b0),
    .we     (intr_test_prog_lvl_we),
    .wd     (intr_test_prog_lvl_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.prog_lvl.qe),
    .q      (reg2hw.intr_test.prog_lvl.q ),
    .qs     ()
  );


  //   F[rd_full]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_rd_full (
    .re     (1'b0),
    .we     (intr_test_rd_full_we),
    .wd     (intr_test_rd_full_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.rd_full.qe),
    .q      (reg2hw.intr_test.rd_full.q ),
    .qs     ()
  );


  //   F[rd_lvl]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_rd_lvl (
    .re     (1'b0),
    .we     (intr_test_rd_lvl_we),
    .wd     (intr_test_rd_lvl_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.rd_lvl.qe),
    .q      (reg2hw.intr_test.rd_lvl.q ),
    .qs     ()
  );


  //   F[op_done]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_op_done (
    .re     (1'b0),
    .we     (intr_test_op_done_we),
    .wd     (intr_test_op_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.op_done.qe),
    .q      (reg2hw.intr_test.op_done.q ),
    .qs     ()
  );


  //   F[op_error]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_op_error (
    .re     (1'b0),
    .we     (intr_test_op_error_we),
    .wd     (intr_test_op_error_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.op_error.qe),
    .q      (reg2hw.intr_test.op_error.q ),
    .qs     ()
  );


  // R[control]: V(False)

  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_control_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_start_we),
    .wd     (control_start_wd),

    // from internal hardware
    .de     (hw2reg.control.start.de),
    .d      (hw2reg.control.start.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.start.q ),

    // to register interface (read)
    .qs     (control_start_qs)
  );


  //   F[op]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_control_op (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_op_we),
    .wd     (control_op_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.op.q ),

    // to register interface (read)
    .qs     (control_op_qs)
  );


  //   F[erase_sel]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_control_erase_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_erase_sel_we),
    .wd     (control_erase_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.erase_sel.q ),

    // to register interface (read)
    .qs     (control_erase_sel_qs)
  );


  //   F[fifo_rst]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_control_fifo_rst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_fifo_rst_we),
    .wd     (control_fifo_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.fifo_rst.q ),

    // to register interface (read)
    .qs     (control_fifo_rst_qs)
  );


  //   F[num]: 27:16
  prim_subreg #(
    .DW      (12),
    .SWACCESS("RW"),
    .RESVAL  (12'h0)
  ) u_control_num (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_num_we),
    .wd     (control_num_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.num.q ),

    // to register interface (read)
    .qs     (control_num_qs)
  );


  // R[addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (addr_we),
    .wd     (addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.addr.q ),

    // to register interface (read)
    .qs     (addr_qs)
  );



  // Subregister 0 of Multireg region_cfg_regwen
  // R[region_cfg_regwen]: V(False)

  // F[region0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_region0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (region_cfg_regwen_region0_we),
    .wd     (region_cfg_regwen_region0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_region0_qs)
  );


  // F[region1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_region1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (region_cfg_regwen_region1_we),
    .wd     (region_cfg_regwen_region1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_region1_qs)
  );


  // F[region2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_region2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (region_cfg_regwen_region2_we),
    .wd     (region_cfg_regwen_region2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_region2_qs)
  );


  // F[region3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_region3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (region_cfg_regwen_region3_we),
    .wd     (region_cfg_regwen_region3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_region3_qs)
  );


  // F[region4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_region4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (region_cfg_regwen_region4_we),
    .wd     (region_cfg_regwen_region4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_region4_qs)
  );


  // F[region5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_region5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (region_cfg_regwen_region5_we),
    .wd     (region_cfg_regwen_region5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_region5_qs)
  );


  // F[region6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_region6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (region_cfg_regwen_region6_we),
    .wd     (region_cfg_regwen_region6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_region6_qs)
  );


  // F[region7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_region7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (region_cfg_regwen_region7_we),
    .wd     (region_cfg_regwen_region7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_region7_qs)
  );




  // Subregister 0 of Multireg mp_region_cfg
  // R[mp_region_cfg0]: V(False)

  // F[en0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg0_en0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg0_en0_we & region_cfg_regwen_region0_qs),
    .wd     (mp_region_cfg0_en0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[0].en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg0_en0_qs)
  );


  // F[rd_en0]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg0_rd_en0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg0_rd_en0_we & region_cfg_regwen_region0_qs),
    .wd     (mp_region_cfg0_rd_en0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[0].rd_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg0_rd_en0_qs)
  );


  // F[prog_en0]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg0_prog_en0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg0_prog_en0_we & region_cfg_regwen_region0_qs),
    .wd     (mp_region_cfg0_prog_en0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[0].prog_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg0_prog_en0_qs)
  );


  // F[erase_en0]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg0_erase_en0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg0_erase_en0_we & region_cfg_regwen_region0_qs),
    .wd     (mp_region_cfg0_erase_en0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[0].erase_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg0_erase_en0_qs)
  );


  // F[base0]: 12:4
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg0_base0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg0_base0_we & region_cfg_regwen_region0_qs),
    .wd     (mp_region_cfg0_base0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[0].base.q ),

    // to register interface (read)
    .qs     (mp_region_cfg0_base0_qs)
  );


  // F[size0]: 24:16
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg0_size0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg0_size0_we & region_cfg_regwen_region0_qs),
    .wd     (mp_region_cfg0_size0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[0].size.q ),

    // to register interface (read)
    .qs     (mp_region_cfg0_size0_qs)
  );


  // Subregister 1 of Multireg mp_region_cfg
  // R[mp_region_cfg1]: V(False)

  // F[en1]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg1_en1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg1_en1_we & region_cfg_regwen_region1_qs),
    .wd     (mp_region_cfg1_en1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[1].en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg1_en1_qs)
  );


  // F[rd_en1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg1_rd_en1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg1_rd_en1_we & region_cfg_regwen_region1_qs),
    .wd     (mp_region_cfg1_rd_en1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[1].rd_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg1_rd_en1_qs)
  );


  // F[prog_en1]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg1_prog_en1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg1_prog_en1_we & region_cfg_regwen_region1_qs),
    .wd     (mp_region_cfg1_prog_en1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[1].prog_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg1_prog_en1_qs)
  );


  // F[erase_en1]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg1_erase_en1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg1_erase_en1_we & region_cfg_regwen_region1_qs),
    .wd     (mp_region_cfg1_erase_en1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[1].erase_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg1_erase_en1_qs)
  );


  // F[base1]: 12:4
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg1_base1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg1_base1_we & region_cfg_regwen_region1_qs),
    .wd     (mp_region_cfg1_base1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[1].base.q ),

    // to register interface (read)
    .qs     (mp_region_cfg1_base1_qs)
  );


  // F[size1]: 24:16
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg1_size1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg1_size1_we & region_cfg_regwen_region1_qs),
    .wd     (mp_region_cfg1_size1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[1].size.q ),

    // to register interface (read)
    .qs     (mp_region_cfg1_size1_qs)
  );


  // Subregister 2 of Multireg mp_region_cfg
  // R[mp_region_cfg2]: V(False)

  // F[en2]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg2_en2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg2_en2_we & region_cfg_regwen_region2_qs),
    .wd     (mp_region_cfg2_en2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[2].en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg2_en2_qs)
  );


  // F[rd_en2]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg2_rd_en2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg2_rd_en2_we & region_cfg_regwen_region2_qs),
    .wd     (mp_region_cfg2_rd_en2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[2].rd_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg2_rd_en2_qs)
  );


  // F[prog_en2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg2_prog_en2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg2_prog_en2_we & region_cfg_regwen_region2_qs),
    .wd     (mp_region_cfg2_prog_en2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[2].prog_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg2_prog_en2_qs)
  );


  // F[erase_en2]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg2_erase_en2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg2_erase_en2_we & region_cfg_regwen_region2_qs),
    .wd     (mp_region_cfg2_erase_en2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[2].erase_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg2_erase_en2_qs)
  );


  // F[base2]: 12:4
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg2_base2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg2_base2_we & region_cfg_regwen_region2_qs),
    .wd     (mp_region_cfg2_base2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[2].base.q ),

    // to register interface (read)
    .qs     (mp_region_cfg2_base2_qs)
  );


  // F[size2]: 24:16
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg2_size2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg2_size2_we & region_cfg_regwen_region2_qs),
    .wd     (mp_region_cfg2_size2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[2].size.q ),

    // to register interface (read)
    .qs     (mp_region_cfg2_size2_qs)
  );


  // Subregister 3 of Multireg mp_region_cfg
  // R[mp_region_cfg3]: V(False)

  // F[en3]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg3_en3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg3_en3_we & region_cfg_regwen_region3_qs),
    .wd     (mp_region_cfg3_en3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[3].en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg3_en3_qs)
  );


  // F[rd_en3]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg3_rd_en3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg3_rd_en3_we & region_cfg_regwen_region3_qs),
    .wd     (mp_region_cfg3_rd_en3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[3].rd_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg3_rd_en3_qs)
  );


  // F[prog_en3]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg3_prog_en3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg3_prog_en3_we & region_cfg_regwen_region3_qs),
    .wd     (mp_region_cfg3_prog_en3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[3].prog_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg3_prog_en3_qs)
  );


  // F[erase_en3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg3_erase_en3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg3_erase_en3_we & region_cfg_regwen_region3_qs),
    .wd     (mp_region_cfg3_erase_en3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[3].erase_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg3_erase_en3_qs)
  );


  // F[base3]: 12:4
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg3_base3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg3_base3_we & region_cfg_regwen_region3_qs),
    .wd     (mp_region_cfg3_base3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[3].base.q ),

    // to register interface (read)
    .qs     (mp_region_cfg3_base3_qs)
  );


  // F[size3]: 24:16
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg3_size3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg3_size3_we & region_cfg_regwen_region3_qs),
    .wd     (mp_region_cfg3_size3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[3].size.q ),

    // to register interface (read)
    .qs     (mp_region_cfg3_size3_qs)
  );


  // Subregister 4 of Multireg mp_region_cfg
  // R[mp_region_cfg4]: V(False)

  // F[en4]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg4_en4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg4_en4_we & region_cfg_regwen_region4_qs),
    .wd     (mp_region_cfg4_en4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[4].en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg4_en4_qs)
  );


  // F[rd_en4]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg4_rd_en4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg4_rd_en4_we & region_cfg_regwen_region4_qs),
    .wd     (mp_region_cfg4_rd_en4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[4].rd_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg4_rd_en4_qs)
  );


  // F[prog_en4]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg4_prog_en4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg4_prog_en4_we & region_cfg_regwen_region4_qs),
    .wd     (mp_region_cfg4_prog_en4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[4].prog_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg4_prog_en4_qs)
  );


  // F[erase_en4]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg4_erase_en4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg4_erase_en4_we & region_cfg_regwen_region4_qs),
    .wd     (mp_region_cfg4_erase_en4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[4].erase_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg4_erase_en4_qs)
  );


  // F[base4]: 12:4
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg4_base4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg4_base4_we & region_cfg_regwen_region4_qs),
    .wd     (mp_region_cfg4_base4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[4].base.q ),

    // to register interface (read)
    .qs     (mp_region_cfg4_base4_qs)
  );


  // F[size4]: 24:16
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg4_size4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg4_size4_we & region_cfg_regwen_region4_qs),
    .wd     (mp_region_cfg4_size4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[4].size.q ),

    // to register interface (read)
    .qs     (mp_region_cfg4_size4_qs)
  );


  // Subregister 5 of Multireg mp_region_cfg
  // R[mp_region_cfg5]: V(False)

  // F[en5]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg5_en5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg5_en5_we & region_cfg_regwen_region5_qs),
    .wd     (mp_region_cfg5_en5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[5].en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg5_en5_qs)
  );


  // F[rd_en5]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg5_rd_en5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg5_rd_en5_we & region_cfg_regwen_region5_qs),
    .wd     (mp_region_cfg5_rd_en5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[5].rd_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg5_rd_en5_qs)
  );


  // F[prog_en5]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg5_prog_en5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg5_prog_en5_we & region_cfg_regwen_region5_qs),
    .wd     (mp_region_cfg5_prog_en5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[5].prog_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg5_prog_en5_qs)
  );


  // F[erase_en5]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg5_erase_en5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg5_erase_en5_we & region_cfg_regwen_region5_qs),
    .wd     (mp_region_cfg5_erase_en5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[5].erase_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg5_erase_en5_qs)
  );


  // F[base5]: 12:4
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg5_base5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg5_base5_we & region_cfg_regwen_region5_qs),
    .wd     (mp_region_cfg5_base5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[5].base.q ),

    // to register interface (read)
    .qs     (mp_region_cfg5_base5_qs)
  );


  // F[size5]: 24:16
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg5_size5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg5_size5_we & region_cfg_regwen_region5_qs),
    .wd     (mp_region_cfg5_size5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[5].size.q ),

    // to register interface (read)
    .qs     (mp_region_cfg5_size5_qs)
  );


  // Subregister 6 of Multireg mp_region_cfg
  // R[mp_region_cfg6]: V(False)

  // F[en6]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg6_en6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg6_en6_we & region_cfg_regwen_region6_qs),
    .wd     (mp_region_cfg6_en6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[6].en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg6_en6_qs)
  );


  // F[rd_en6]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg6_rd_en6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg6_rd_en6_we & region_cfg_regwen_region6_qs),
    .wd     (mp_region_cfg6_rd_en6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[6].rd_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg6_rd_en6_qs)
  );


  // F[prog_en6]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg6_prog_en6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg6_prog_en6_we & region_cfg_regwen_region6_qs),
    .wd     (mp_region_cfg6_prog_en6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[6].prog_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg6_prog_en6_qs)
  );


  // F[erase_en6]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg6_erase_en6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg6_erase_en6_we & region_cfg_regwen_region6_qs),
    .wd     (mp_region_cfg6_erase_en6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[6].erase_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg6_erase_en6_qs)
  );


  // F[base6]: 12:4
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg6_base6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg6_base6_we & region_cfg_regwen_region6_qs),
    .wd     (mp_region_cfg6_base6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[6].base.q ),

    // to register interface (read)
    .qs     (mp_region_cfg6_base6_qs)
  );


  // F[size6]: 24:16
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg6_size6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg6_size6_we & region_cfg_regwen_region6_qs),
    .wd     (mp_region_cfg6_size6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[6].size.q ),

    // to register interface (read)
    .qs     (mp_region_cfg6_size6_qs)
  );


  // Subregister 7 of Multireg mp_region_cfg
  // R[mp_region_cfg7]: V(False)

  // F[en7]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg7_en7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg7_en7_we & region_cfg_regwen_region7_qs),
    .wd     (mp_region_cfg7_en7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[7].en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg7_en7_qs)
  );


  // F[rd_en7]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg7_rd_en7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg7_rd_en7_we & region_cfg_regwen_region7_qs),
    .wd     (mp_region_cfg7_rd_en7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[7].rd_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg7_rd_en7_qs)
  );


  // F[prog_en7]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg7_prog_en7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg7_prog_en7_we & region_cfg_regwen_region7_qs),
    .wd     (mp_region_cfg7_prog_en7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[7].prog_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg7_prog_en7_qs)
  );


  // F[erase_en7]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg7_erase_en7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg7_erase_en7_we & region_cfg_regwen_region7_qs),
    .wd     (mp_region_cfg7_erase_en7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[7].erase_en.q ),

    // to register interface (read)
    .qs     (mp_region_cfg7_erase_en7_qs)
  );


  // F[base7]: 12:4
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg7_base7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg7_base7_we & region_cfg_regwen_region7_qs),
    .wd     (mp_region_cfg7_base7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[7].base.q ),

    // to register interface (read)
    .qs     (mp_region_cfg7_base7_qs)
  );


  // F[size7]: 24:16
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg7_size7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_region_cfg7_size7_we & region_cfg_regwen_region7_qs),
    .wd     (mp_region_cfg7_size7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg[7].size.q ),

    // to register interface (read)
    .qs     (mp_region_cfg7_size7_qs)
  );



  // R[default_region]: V(False)

  //   F[rd_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_default_region_rd_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (default_region_rd_en_we),
    .wd     (default_region_rd_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.default_region.rd_en.q ),

    // to register interface (read)
    .qs     (default_region_rd_en_qs)
  );


  //   F[prog_en]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_default_region_prog_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (default_region_prog_en_we),
    .wd     (default_region_prog_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.default_region.prog_en.q ),

    // to register interface (read)
    .qs     (default_region_prog_en_qs)
  );


  //   F[erase_en]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_default_region_erase_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (default_region_erase_en_we),
    .wd     (default_region_erase_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.default_region.erase_en.q ),

    // to register interface (read)
    .qs     (default_region_erase_en_qs)
  );


  // R[bank_cfg_regwen]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_bank_cfg_regwen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (bank_cfg_regwen_we),
    .wd     (bank_cfg_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank_cfg_regwen_qs)
  );



  // Subregister 0 of Multireg mp_bank_cfg
  // R[mp_bank_cfg]: V(False)

  // F[erase_en0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_bank_cfg_erase_en0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_bank_cfg_erase_en0_we & bank_cfg_regwen_qs),
    .wd     (mp_bank_cfg_erase_en0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_bank_cfg[0].q ),

    // to register interface (read)
    .qs     (mp_bank_cfg_erase_en0_qs)
  );


  // F[erase_en1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_mp_bank_cfg_erase_en1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mp_bank_cfg_erase_en1_we & bank_cfg_regwen_qs),
    .wd     (mp_bank_cfg_erase_en1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_bank_cfg[1].q ),

    // to register interface (read)
    .qs     (mp_bank_cfg_erase_en1_qs)
  );



  // R[op_status]: V(False)

  //   F[done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_op_status_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (op_status_done_we),
    .wd     (op_status_done_wd),

    // from internal hardware
    .de     (hw2reg.op_status.done.de),
    .d      (hw2reg.op_status.done.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (op_status_done_qs)
  );


  //   F[err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_op_status_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (op_status_err_we),
    .wd     (op_status_err_wd),

    // from internal hardware
    .de     (hw2reg.op_status.err.de),
    .d      (hw2reg.op_status.err.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (op_status_err_qs)
  );


  // R[status]: V(True)

  //   F[rd_full]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rd_full (
    .re     (status_rd_full_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rd_full.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_rd_full_qs)
  );


  //   F[rd_empty]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rd_empty (
    .re     (status_rd_empty_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rd_empty.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_rd_empty_qs)
  );


  //   F[prog_full]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_prog_full (
    .re     (status_prog_full_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.prog_full.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_prog_full_qs)
  );


  //   F[prog_empty]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_prog_empty (
    .re     (status_prog_empty_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.prog_empty.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_prog_empty_qs)
  );


  //   F[init_wip]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_init_wip (
    .re     (status_init_wip_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.init_wip.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_init_wip_qs)
  );


  //   F[error_page]: 16:8
  prim_subreg_ext #(
    .DW    (9)
  ) u_status_error_page (
    .re     (status_error_page_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.error_page.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_error_page_qs)
  );


  //   F[error_bank]: 17:17
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_error_bank (
    .re     (status_error_bank_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.error_bank.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_error_bank_qs)
  );


  // R[scratch]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_scratch (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (scratch_we),
    .wd     (scratch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.scratch.q ),

    // to register interface (read)
    .qs     (scratch_qs)
  );


  // R[fifo_lvl]: V(False)

  //   F[prog]: 4:0
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'hf)
  ) u_fifo_lvl_prog (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (fifo_lvl_prog_we),
    .wd     (fifo_lvl_prog_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fifo_lvl.prog.q ),

    // to register interface (read)
    .qs     (fifo_lvl_prog_qs)
  );


  //   F[rd]: 12:8
  prim_subreg #(
    .DW      (5),
    .SWACCESS("RW"),
    .RESVAL  (5'hf)
  ) u_fifo_lvl_rd (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (fifo_lvl_rd_we),
    .wd     (fifo_lvl_rd_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fifo_lvl.rd.q ),

    // to register interface (read)
    .qs     (fifo_lvl_rd_qs)
  );




  logic [20:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == FLASH_CTRL_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == FLASH_CTRL_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == FLASH_CTRL_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == FLASH_CTRL_CONTROL_OFFSET);
    addr_hit[ 4] = (reg_addr == FLASH_CTRL_ADDR_OFFSET);
    addr_hit[ 5] = (reg_addr == FLASH_CTRL_REGION_CFG_REGWEN_OFFSET);
    addr_hit[ 6] = (reg_addr == FLASH_CTRL_MP_REGION_CFG0_OFFSET);
    addr_hit[ 7] = (reg_addr == FLASH_CTRL_MP_REGION_CFG1_OFFSET);
    addr_hit[ 8] = (reg_addr == FLASH_CTRL_MP_REGION_CFG2_OFFSET);
    addr_hit[ 9] = (reg_addr == FLASH_CTRL_MP_REGION_CFG3_OFFSET);
    addr_hit[10] = (reg_addr == FLASH_CTRL_MP_REGION_CFG4_OFFSET);
    addr_hit[11] = (reg_addr == FLASH_CTRL_MP_REGION_CFG5_OFFSET);
    addr_hit[12] = (reg_addr == FLASH_CTRL_MP_REGION_CFG6_OFFSET);
    addr_hit[13] = (reg_addr == FLASH_CTRL_MP_REGION_CFG7_OFFSET);
    addr_hit[14] = (reg_addr == FLASH_CTRL_DEFAULT_REGION_OFFSET);
    addr_hit[15] = (reg_addr == FLASH_CTRL_BANK_CFG_REGWEN_OFFSET);
    addr_hit[16] = (reg_addr == FLASH_CTRL_MP_BANK_CFG_OFFSET);
    addr_hit[17] = (reg_addr == FLASH_CTRL_OP_STATUS_OFFSET);
    addr_hit[18] = (reg_addr == FLASH_CTRL_STATUS_OFFSET);
    addr_hit[19] = (reg_addr == FLASH_CTRL_SCRATCH_OFFSET);
    addr_hit[20] = (reg_addr == FLASH_CTRL_FIFO_LVL_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[ 0] && reg_we && (FLASH_CTRL_PERMIT[ 0] != (FLASH_CTRL_PERMIT[ 0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 1] && reg_we && (FLASH_CTRL_PERMIT[ 1] != (FLASH_CTRL_PERMIT[ 1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 2] && reg_we && (FLASH_CTRL_PERMIT[ 2] != (FLASH_CTRL_PERMIT[ 2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 3] && reg_we && (FLASH_CTRL_PERMIT[ 3] != (FLASH_CTRL_PERMIT[ 3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 4] && reg_we && (FLASH_CTRL_PERMIT[ 4] != (FLASH_CTRL_PERMIT[ 4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 5] && reg_we && (FLASH_CTRL_PERMIT[ 5] != (FLASH_CTRL_PERMIT[ 5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 6] && reg_we && (FLASH_CTRL_PERMIT[ 6] != (FLASH_CTRL_PERMIT[ 6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 7] && reg_we && (FLASH_CTRL_PERMIT[ 7] != (FLASH_CTRL_PERMIT[ 7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 8] && reg_we && (FLASH_CTRL_PERMIT[ 8] != (FLASH_CTRL_PERMIT[ 8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 9] && reg_we && (FLASH_CTRL_PERMIT[ 9] != (FLASH_CTRL_PERMIT[ 9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[10] && reg_we && (FLASH_CTRL_PERMIT[10] != (FLASH_CTRL_PERMIT[10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[11] && reg_we && (FLASH_CTRL_PERMIT[11] != (FLASH_CTRL_PERMIT[11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[12] && reg_we && (FLASH_CTRL_PERMIT[12] != (FLASH_CTRL_PERMIT[12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[13] && reg_we && (FLASH_CTRL_PERMIT[13] != (FLASH_CTRL_PERMIT[13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[14] && reg_we && (FLASH_CTRL_PERMIT[14] != (FLASH_CTRL_PERMIT[14] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[15] && reg_we && (FLASH_CTRL_PERMIT[15] != (FLASH_CTRL_PERMIT[15] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[16] && reg_we && (FLASH_CTRL_PERMIT[16] != (FLASH_CTRL_PERMIT[16] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[17] && reg_we && (FLASH_CTRL_PERMIT[17] != (FLASH_CTRL_PERMIT[17] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[18] && reg_we && (FLASH_CTRL_PERMIT[18] != (FLASH_CTRL_PERMIT[18] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[19] && reg_we && (FLASH_CTRL_PERMIT[19] != (FLASH_CTRL_PERMIT[19] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[20] && reg_we && (FLASH_CTRL_PERMIT[20] != (FLASH_CTRL_PERMIT[20] & reg_be))) wr_err = 1'b1 ;
  end

  assign intr_state_prog_empty_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_prog_empty_wd = reg_wdata[0];

  assign intr_state_prog_lvl_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_prog_lvl_wd = reg_wdata[1];

  assign intr_state_rd_full_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_rd_full_wd = reg_wdata[2];

  assign intr_state_rd_lvl_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_rd_lvl_wd = reg_wdata[3];

  assign intr_state_op_done_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_op_done_wd = reg_wdata[4];

  assign intr_state_op_error_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_op_error_wd = reg_wdata[5];

  assign intr_enable_prog_empty_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_prog_empty_wd = reg_wdata[0];

  assign intr_enable_prog_lvl_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_prog_lvl_wd = reg_wdata[1];

  assign intr_enable_rd_full_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_rd_full_wd = reg_wdata[2];

  assign intr_enable_rd_lvl_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_rd_lvl_wd = reg_wdata[3];

  assign intr_enable_op_done_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_op_done_wd = reg_wdata[4];

  assign intr_enable_op_error_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_op_error_wd = reg_wdata[5];

  assign intr_test_prog_empty_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_prog_empty_wd = reg_wdata[0];

  assign intr_test_prog_lvl_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_prog_lvl_wd = reg_wdata[1];

  assign intr_test_rd_full_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_rd_full_wd = reg_wdata[2];

  assign intr_test_rd_lvl_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_rd_lvl_wd = reg_wdata[3];

  assign intr_test_op_done_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_op_done_wd = reg_wdata[4];

  assign intr_test_op_error_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_op_error_wd = reg_wdata[5];

  assign control_start_we = addr_hit[3] & reg_we & ~wr_err;
  assign control_start_wd = reg_wdata[0];

  assign control_op_we = addr_hit[3] & reg_we & ~wr_err;
  assign control_op_wd = reg_wdata[5:4];

  assign control_erase_sel_we = addr_hit[3] & reg_we & ~wr_err;
  assign control_erase_sel_wd = reg_wdata[6];

  assign control_fifo_rst_we = addr_hit[3] & reg_we & ~wr_err;
  assign control_fifo_rst_wd = reg_wdata[7];

  assign control_num_we = addr_hit[3] & reg_we & ~wr_err;
  assign control_num_wd = reg_wdata[27:16];

  assign addr_we = addr_hit[4] & reg_we & ~wr_err;
  assign addr_wd = reg_wdata[31:0];

  assign region_cfg_regwen_region0_we = addr_hit[5] & reg_we & ~wr_err;
  assign region_cfg_regwen_region0_wd = reg_wdata[0];

  assign region_cfg_regwen_region1_we = addr_hit[5] & reg_we & ~wr_err;
  assign region_cfg_regwen_region1_wd = reg_wdata[1];

  assign region_cfg_regwen_region2_we = addr_hit[5] & reg_we & ~wr_err;
  assign region_cfg_regwen_region2_wd = reg_wdata[2];

  assign region_cfg_regwen_region3_we = addr_hit[5] & reg_we & ~wr_err;
  assign region_cfg_regwen_region3_wd = reg_wdata[3];

  assign region_cfg_regwen_region4_we = addr_hit[5] & reg_we & ~wr_err;
  assign region_cfg_regwen_region4_wd = reg_wdata[4];

  assign region_cfg_regwen_region5_we = addr_hit[5] & reg_we & ~wr_err;
  assign region_cfg_regwen_region5_wd = reg_wdata[5];

  assign region_cfg_regwen_region6_we = addr_hit[5] & reg_we & ~wr_err;
  assign region_cfg_regwen_region6_wd = reg_wdata[6];

  assign region_cfg_regwen_region7_we = addr_hit[5] & reg_we & ~wr_err;
  assign region_cfg_regwen_region7_wd = reg_wdata[7];

  assign mp_region_cfg0_en0_we = addr_hit[6] & reg_we & ~wr_err;
  assign mp_region_cfg0_en0_wd = reg_wdata[0];

  assign mp_region_cfg0_rd_en0_we = addr_hit[6] & reg_we & ~wr_err;
  assign mp_region_cfg0_rd_en0_wd = reg_wdata[1];

  assign mp_region_cfg0_prog_en0_we = addr_hit[6] & reg_we & ~wr_err;
  assign mp_region_cfg0_prog_en0_wd = reg_wdata[2];

  assign mp_region_cfg0_erase_en0_we = addr_hit[6] & reg_we & ~wr_err;
  assign mp_region_cfg0_erase_en0_wd = reg_wdata[3];

  assign mp_region_cfg0_base0_we = addr_hit[6] & reg_we & ~wr_err;
  assign mp_region_cfg0_base0_wd = reg_wdata[12:4];

  assign mp_region_cfg0_size0_we = addr_hit[6] & reg_we & ~wr_err;
  assign mp_region_cfg0_size0_wd = reg_wdata[24:16];

  assign mp_region_cfg1_en1_we = addr_hit[7] & reg_we & ~wr_err;
  assign mp_region_cfg1_en1_wd = reg_wdata[0];

  assign mp_region_cfg1_rd_en1_we = addr_hit[7] & reg_we & ~wr_err;
  assign mp_region_cfg1_rd_en1_wd = reg_wdata[1];

  assign mp_region_cfg1_prog_en1_we = addr_hit[7] & reg_we & ~wr_err;
  assign mp_region_cfg1_prog_en1_wd = reg_wdata[2];

  assign mp_region_cfg1_erase_en1_we = addr_hit[7] & reg_we & ~wr_err;
  assign mp_region_cfg1_erase_en1_wd = reg_wdata[3];

  assign mp_region_cfg1_base1_we = addr_hit[7] & reg_we & ~wr_err;
  assign mp_region_cfg1_base1_wd = reg_wdata[12:4];

  assign mp_region_cfg1_size1_we = addr_hit[7] & reg_we & ~wr_err;
  assign mp_region_cfg1_size1_wd = reg_wdata[24:16];

  assign mp_region_cfg2_en2_we = addr_hit[8] & reg_we & ~wr_err;
  assign mp_region_cfg2_en2_wd = reg_wdata[0];

  assign mp_region_cfg2_rd_en2_we = addr_hit[8] & reg_we & ~wr_err;
  assign mp_region_cfg2_rd_en2_wd = reg_wdata[1];

  assign mp_region_cfg2_prog_en2_we = addr_hit[8] & reg_we & ~wr_err;
  assign mp_region_cfg2_prog_en2_wd = reg_wdata[2];

  assign mp_region_cfg2_erase_en2_we = addr_hit[8] & reg_we & ~wr_err;
  assign mp_region_cfg2_erase_en2_wd = reg_wdata[3];

  assign mp_region_cfg2_base2_we = addr_hit[8] & reg_we & ~wr_err;
  assign mp_region_cfg2_base2_wd = reg_wdata[12:4];

  assign mp_region_cfg2_size2_we = addr_hit[8] & reg_we & ~wr_err;
  assign mp_region_cfg2_size2_wd = reg_wdata[24:16];

  assign mp_region_cfg3_en3_we = addr_hit[9] & reg_we & ~wr_err;
  assign mp_region_cfg3_en3_wd = reg_wdata[0];

  assign mp_region_cfg3_rd_en3_we = addr_hit[9] & reg_we & ~wr_err;
  assign mp_region_cfg3_rd_en3_wd = reg_wdata[1];

  assign mp_region_cfg3_prog_en3_we = addr_hit[9] & reg_we & ~wr_err;
  assign mp_region_cfg3_prog_en3_wd = reg_wdata[2];

  assign mp_region_cfg3_erase_en3_we = addr_hit[9] & reg_we & ~wr_err;
  assign mp_region_cfg3_erase_en3_wd = reg_wdata[3];

  assign mp_region_cfg3_base3_we = addr_hit[9] & reg_we & ~wr_err;
  assign mp_region_cfg3_base3_wd = reg_wdata[12:4];

  assign mp_region_cfg3_size3_we = addr_hit[9] & reg_we & ~wr_err;
  assign mp_region_cfg3_size3_wd = reg_wdata[24:16];

  assign mp_region_cfg4_en4_we = addr_hit[10] & reg_we & ~wr_err;
  assign mp_region_cfg4_en4_wd = reg_wdata[0];

  assign mp_region_cfg4_rd_en4_we = addr_hit[10] & reg_we & ~wr_err;
  assign mp_region_cfg4_rd_en4_wd = reg_wdata[1];

  assign mp_region_cfg4_prog_en4_we = addr_hit[10] & reg_we & ~wr_err;
  assign mp_region_cfg4_prog_en4_wd = reg_wdata[2];

  assign mp_region_cfg4_erase_en4_we = addr_hit[10] & reg_we & ~wr_err;
  assign mp_region_cfg4_erase_en4_wd = reg_wdata[3];

  assign mp_region_cfg4_base4_we = addr_hit[10] & reg_we & ~wr_err;
  assign mp_region_cfg4_base4_wd = reg_wdata[12:4];

  assign mp_region_cfg4_size4_we = addr_hit[10] & reg_we & ~wr_err;
  assign mp_region_cfg4_size4_wd = reg_wdata[24:16];

  assign mp_region_cfg5_en5_we = addr_hit[11] & reg_we & ~wr_err;
  assign mp_region_cfg5_en5_wd = reg_wdata[0];

  assign mp_region_cfg5_rd_en5_we = addr_hit[11] & reg_we & ~wr_err;
  assign mp_region_cfg5_rd_en5_wd = reg_wdata[1];

  assign mp_region_cfg5_prog_en5_we = addr_hit[11] & reg_we & ~wr_err;
  assign mp_region_cfg5_prog_en5_wd = reg_wdata[2];

  assign mp_region_cfg5_erase_en5_we = addr_hit[11] & reg_we & ~wr_err;
  assign mp_region_cfg5_erase_en5_wd = reg_wdata[3];

  assign mp_region_cfg5_base5_we = addr_hit[11] & reg_we & ~wr_err;
  assign mp_region_cfg5_base5_wd = reg_wdata[12:4];

  assign mp_region_cfg5_size5_we = addr_hit[11] & reg_we & ~wr_err;
  assign mp_region_cfg5_size5_wd = reg_wdata[24:16];

  assign mp_region_cfg6_en6_we = addr_hit[12] & reg_we & ~wr_err;
  assign mp_region_cfg6_en6_wd = reg_wdata[0];

  assign mp_region_cfg6_rd_en6_we = addr_hit[12] & reg_we & ~wr_err;
  assign mp_region_cfg6_rd_en6_wd = reg_wdata[1];

  assign mp_region_cfg6_prog_en6_we = addr_hit[12] & reg_we & ~wr_err;
  assign mp_region_cfg6_prog_en6_wd = reg_wdata[2];

  assign mp_region_cfg6_erase_en6_we = addr_hit[12] & reg_we & ~wr_err;
  assign mp_region_cfg6_erase_en6_wd = reg_wdata[3];

  assign mp_region_cfg6_base6_we = addr_hit[12] & reg_we & ~wr_err;
  assign mp_region_cfg6_base6_wd = reg_wdata[12:4];

  assign mp_region_cfg6_size6_we = addr_hit[12] & reg_we & ~wr_err;
  assign mp_region_cfg6_size6_wd = reg_wdata[24:16];

  assign mp_region_cfg7_en7_we = addr_hit[13] & reg_we & ~wr_err;
  assign mp_region_cfg7_en7_wd = reg_wdata[0];

  assign mp_region_cfg7_rd_en7_we = addr_hit[13] & reg_we & ~wr_err;
  assign mp_region_cfg7_rd_en7_wd = reg_wdata[1];

  assign mp_region_cfg7_prog_en7_we = addr_hit[13] & reg_we & ~wr_err;
  assign mp_region_cfg7_prog_en7_wd = reg_wdata[2];

  assign mp_region_cfg7_erase_en7_we = addr_hit[13] & reg_we & ~wr_err;
  assign mp_region_cfg7_erase_en7_wd = reg_wdata[3];

  assign mp_region_cfg7_base7_we = addr_hit[13] & reg_we & ~wr_err;
  assign mp_region_cfg7_base7_wd = reg_wdata[12:4];

  assign mp_region_cfg7_size7_we = addr_hit[13] & reg_we & ~wr_err;
  assign mp_region_cfg7_size7_wd = reg_wdata[24:16];

  assign default_region_rd_en_we = addr_hit[14] & reg_we & ~wr_err;
  assign default_region_rd_en_wd = reg_wdata[0];

  assign default_region_prog_en_we = addr_hit[14] & reg_we & ~wr_err;
  assign default_region_prog_en_wd = reg_wdata[1];

  assign default_region_erase_en_we = addr_hit[14] & reg_we & ~wr_err;
  assign default_region_erase_en_wd = reg_wdata[2];

  assign bank_cfg_regwen_we = addr_hit[15] & reg_we & ~wr_err;
  assign bank_cfg_regwen_wd = reg_wdata[0];

  assign mp_bank_cfg_erase_en0_we = addr_hit[16] & reg_we & ~wr_err;
  assign mp_bank_cfg_erase_en0_wd = reg_wdata[0];

  assign mp_bank_cfg_erase_en1_we = addr_hit[16] & reg_we & ~wr_err;
  assign mp_bank_cfg_erase_en1_wd = reg_wdata[1];

  assign op_status_done_we = addr_hit[17] & reg_we & ~wr_err;
  assign op_status_done_wd = reg_wdata[0];

  assign op_status_err_we = addr_hit[17] & reg_we & ~wr_err;
  assign op_status_err_wd = reg_wdata[1];

  assign status_rd_full_re = addr_hit[18] && reg_re;

  assign status_rd_empty_re = addr_hit[18] && reg_re;

  assign status_prog_full_re = addr_hit[18] && reg_re;

  assign status_prog_empty_re = addr_hit[18] && reg_re;

  assign status_init_wip_re = addr_hit[18] && reg_re;

  assign status_error_page_re = addr_hit[18] && reg_re;

  assign status_error_bank_re = addr_hit[18] && reg_re;

  assign scratch_we = addr_hit[19] & reg_we & ~wr_err;
  assign scratch_wd = reg_wdata[31:0];

  assign fifo_lvl_prog_we = addr_hit[20] & reg_we & ~wr_err;
  assign fifo_lvl_prog_wd = reg_wdata[4:0];

  assign fifo_lvl_rd_we = addr_hit[20] & reg_we & ~wr_err;
  assign fifo_lvl_rd_wd = reg_wdata[12:8];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_prog_empty_qs;
        reg_rdata_next[1] = intr_state_prog_lvl_qs;
        reg_rdata_next[2] = intr_state_rd_full_qs;
        reg_rdata_next[3] = intr_state_rd_lvl_qs;
        reg_rdata_next[4] = intr_state_op_done_qs;
        reg_rdata_next[5] = intr_state_op_error_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_prog_empty_qs;
        reg_rdata_next[1] = intr_enable_prog_lvl_qs;
        reg_rdata_next[2] = intr_enable_rd_full_qs;
        reg_rdata_next[3] = intr_enable_rd_lvl_qs;
        reg_rdata_next[4] = intr_enable_op_done_qs;
        reg_rdata_next[5] = intr_enable_op_error_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = control_start_qs;
        reg_rdata_next[5:4] = control_op_qs;
        reg_rdata_next[6] = control_erase_sel_qs;
        reg_rdata_next[7] = control_fifo_rst_qs;
        reg_rdata_next[27:16] = control_num_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = addr_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = region_cfg_regwen_region0_qs;
        reg_rdata_next[1] = region_cfg_regwen_region1_qs;
        reg_rdata_next[2] = region_cfg_regwen_region2_qs;
        reg_rdata_next[3] = region_cfg_regwen_region3_qs;
        reg_rdata_next[4] = region_cfg_regwen_region4_qs;
        reg_rdata_next[5] = region_cfg_regwen_region5_qs;
        reg_rdata_next[6] = region_cfg_regwen_region6_qs;
        reg_rdata_next[7] = region_cfg_regwen_region7_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = mp_region_cfg0_en0_qs;
        reg_rdata_next[1] = mp_region_cfg0_rd_en0_qs;
        reg_rdata_next[2] = mp_region_cfg0_prog_en0_qs;
        reg_rdata_next[3] = mp_region_cfg0_erase_en0_qs;
        reg_rdata_next[12:4] = mp_region_cfg0_base0_qs;
        reg_rdata_next[24:16] = mp_region_cfg0_size0_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = mp_region_cfg1_en1_qs;
        reg_rdata_next[1] = mp_region_cfg1_rd_en1_qs;
        reg_rdata_next[2] = mp_region_cfg1_prog_en1_qs;
        reg_rdata_next[3] = mp_region_cfg1_erase_en1_qs;
        reg_rdata_next[12:4] = mp_region_cfg1_base1_qs;
        reg_rdata_next[24:16] = mp_region_cfg1_size1_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = mp_region_cfg2_en2_qs;
        reg_rdata_next[1] = mp_region_cfg2_rd_en2_qs;
        reg_rdata_next[2] = mp_region_cfg2_prog_en2_qs;
        reg_rdata_next[3] = mp_region_cfg2_erase_en2_qs;
        reg_rdata_next[12:4] = mp_region_cfg2_base2_qs;
        reg_rdata_next[24:16] = mp_region_cfg2_size2_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = mp_region_cfg3_en3_qs;
        reg_rdata_next[1] = mp_region_cfg3_rd_en3_qs;
        reg_rdata_next[2] = mp_region_cfg3_prog_en3_qs;
        reg_rdata_next[3] = mp_region_cfg3_erase_en3_qs;
        reg_rdata_next[12:4] = mp_region_cfg3_base3_qs;
        reg_rdata_next[24:16] = mp_region_cfg3_size3_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = mp_region_cfg4_en4_qs;
        reg_rdata_next[1] = mp_region_cfg4_rd_en4_qs;
        reg_rdata_next[2] = mp_region_cfg4_prog_en4_qs;
        reg_rdata_next[3] = mp_region_cfg4_erase_en4_qs;
        reg_rdata_next[12:4] = mp_region_cfg4_base4_qs;
        reg_rdata_next[24:16] = mp_region_cfg4_size4_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = mp_region_cfg5_en5_qs;
        reg_rdata_next[1] = mp_region_cfg5_rd_en5_qs;
        reg_rdata_next[2] = mp_region_cfg5_prog_en5_qs;
        reg_rdata_next[3] = mp_region_cfg5_erase_en5_qs;
        reg_rdata_next[12:4] = mp_region_cfg5_base5_qs;
        reg_rdata_next[24:16] = mp_region_cfg5_size5_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = mp_region_cfg6_en6_qs;
        reg_rdata_next[1] = mp_region_cfg6_rd_en6_qs;
        reg_rdata_next[2] = mp_region_cfg6_prog_en6_qs;
        reg_rdata_next[3] = mp_region_cfg6_erase_en6_qs;
        reg_rdata_next[12:4] = mp_region_cfg6_base6_qs;
        reg_rdata_next[24:16] = mp_region_cfg6_size6_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = mp_region_cfg7_en7_qs;
        reg_rdata_next[1] = mp_region_cfg7_rd_en7_qs;
        reg_rdata_next[2] = mp_region_cfg7_prog_en7_qs;
        reg_rdata_next[3] = mp_region_cfg7_erase_en7_qs;
        reg_rdata_next[12:4] = mp_region_cfg7_base7_qs;
        reg_rdata_next[24:16] = mp_region_cfg7_size7_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = default_region_rd_en_qs;
        reg_rdata_next[1] = default_region_prog_en_qs;
        reg_rdata_next[2] = default_region_erase_en_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = bank_cfg_regwen_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = mp_bank_cfg_erase_en0_qs;
        reg_rdata_next[1] = mp_bank_cfg_erase_en1_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = op_status_done_qs;
        reg_rdata_next[1] = op_status_err_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = status_rd_full_qs;
        reg_rdata_next[1] = status_rd_empty_qs;
        reg_rdata_next[2] = status_prog_full_qs;
        reg_rdata_next[3] = status_prog_empty_qs;
        reg_rdata_next[4] = status_init_wip_qs;
        reg_rdata_next[16:8] = status_error_page_qs;
        reg_rdata_next[17] = status_error_bank_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = scratch_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[4:0] = fifo_lvl_prog_qs;
        reg_rdata_next[12:8] = fifo_lvl_rd_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  `ASSERT(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0, clk_i, !rst_ni)

endmodule
