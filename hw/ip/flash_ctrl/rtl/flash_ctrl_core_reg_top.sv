// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module flash_ctrl_core_reg_top (
  input clk_i,
  input rst_ni,
  input rst_shadowed_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,

  // Output port for window
  output tlul_pkg::tl_h2d_t tl_win_o  [2],
  input  tlul_pkg::tl_d2h_t tl_win_i  [2],

  // To HW
  output flash_ctrl_reg_pkg::flash_ctrl_core_reg2hw_t reg2hw, // Write
  input  flash_ctrl_reg_pkg::flash_ctrl_core_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import flash_ctrl_reg_pkg::* ;

  localparam int AW = 9;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  logic intg_err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      intg_err_q <= '0;
    end else if (intg_err) begin
      intg_err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = intg_err_q | intg_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  tlul_pkg::tl_h2d_t tl_socket_h2d [3];
  tlul_pkg::tl_d2h_t tl_socket_d2h [3];

  logic [1:0] reg_steer;

  // socket_1n connection
  assign tl_reg_h2d = tl_socket_h2d[2];
  assign tl_socket_d2h[2] = tl_reg_d2h;

  assign tl_win_o[0] = tl_socket_h2d[0];
  assign tl_socket_d2h[0] = tl_win_i[0];
  assign tl_win_o[1] = tl_socket_h2d[1];
  assign tl_socket_d2h[1] = tl_win_i[1];

  // Create Socket_1n
  tlul_socket_1n #(
    .N            (3),
    .HReqPass     (1'b1),
    .HRspPass     (1'b1),
    .DReqPass     ({3{1'b1}}),
    .DRspPass     ({3{1'b1}}),
    .HReqDepth    (4'h0),
    .HRspDepth    (4'h0),
    .DReqDepth    ({3{4'h0}}),
    .DRspDepth    ({3{4'h0}}),
    .ExplicitErrs (1'b0)
  ) u_socket (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .tl_h_i (tl_i),
    .tl_h_o (tl_o_pre),
    .tl_d_o (tl_socket_h2d),
    .tl_d_i (tl_socket_d2h),
    .dev_select_i (reg_steer)
  );

  // Create steering logic
  always_comb begin
    unique case (tl_i.a_address[AW-1:0]) inside
      [384:387]: begin
        reg_steer = 0;
      end
      [388:391]: begin
        reg_steer = 1;
      end
      default: begin
        // Default set to register
        reg_steer = 2;
      end
    endcase

    // Override this in case of an integrity error
    if (intg_err) begin
      reg_steer = 2;
    end
  end

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic intr_state_prog_empty_qs;
  logic intr_state_prog_empty_wd;
  logic intr_state_prog_lvl_qs;
  logic intr_state_prog_lvl_wd;
  logic intr_state_rd_full_qs;
  logic intr_state_rd_full_wd;
  logic intr_state_rd_lvl_qs;
  logic intr_state_rd_lvl_wd;
  logic intr_state_op_done_qs;
  logic intr_state_op_done_wd;
  logic intr_state_corr_err_qs;
  logic intr_state_corr_err_wd;
  logic intr_enable_we;
  logic intr_enable_prog_empty_qs;
  logic intr_enable_prog_empty_wd;
  logic intr_enable_prog_lvl_qs;
  logic intr_enable_prog_lvl_wd;
  logic intr_enable_rd_full_qs;
  logic intr_enable_rd_full_wd;
  logic intr_enable_rd_lvl_qs;
  logic intr_enable_rd_lvl_wd;
  logic intr_enable_op_done_qs;
  logic intr_enable_op_done_wd;
  logic intr_enable_corr_err_qs;
  logic intr_enable_corr_err_wd;
  logic intr_test_we;
  logic intr_test_prog_empty_wd;
  logic intr_test_prog_lvl_wd;
  logic intr_test_rd_full_wd;
  logic intr_test_rd_lvl_wd;
  logic intr_test_op_done_wd;
  logic intr_test_corr_err_wd;
  logic alert_test_we;
  logic alert_test_recov_err_wd;
  logic alert_test_fatal_err_wd;
  logic dis_we;
  logic [3:0] dis_qs;
  logic [3:0] dis_wd;
  logic exec_we;
  logic [31:0] exec_qs;
  logic [31:0] exec_wd;
  logic init_we;
  logic init_qs;
  logic init_wd;
  logic ctrl_regwen_re;
  logic ctrl_regwen_qs;
  logic control_we;
  logic control_start_qs;
  logic control_start_wd;
  logic [1:0] control_op_qs;
  logic [1:0] control_op_wd;
  logic control_prog_sel_qs;
  logic control_prog_sel_wd;
  logic control_erase_sel_qs;
  logic control_erase_sel_wd;
  logic control_partition_sel_qs;
  logic control_partition_sel_wd;
  logic [1:0] control_info_sel_qs;
  logic [1:0] control_info_sel_wd;
  logic [11:0] control_num_qs;
  logic [11:0] control_num_wd;
  logic addr_we;
  logic [19:0] addr_qs;
  logic [19:0] addr_wd;
  logic prog_type_en_we;
  logic prog_type_en_normal_qs;
  logic prog_type_en_normal_wd;
  logic prog_type_en_repair_qs;
  logic prog_type_en_repair_wd;
  logic erase_suspend_we;
  logic erase_suspend_qs;
  logic erase_suspend_wd;
  logic region_cfg_regwen_0_we;
  logic region_cfg_regwen_0_qs;
  logic region_cfg_regwen_0_wd;
  logic region_cfg_regwen_1_we;
  logic region_cfg_regwen_1_qs;
  logic region_cfg_regwen_1_wd;
  logic region_cfg_regwen_2_we;
  logic region_cfg_regwen_2_qs;
  logic region_cfg_regwen_2_wd;
  logic region_cfg_regwen_3_we;
  logic region_cfg_regwen_3_qs;
  logic region_cfg_regwen_3_wd;
  logic region_cfg_regwen_4_we;
  logic region_cfg_regwen_4_qs;
  logic region_cfg_regwen_4_wd;
  logic region_cfg_regwen_5_we;
  logic region_cfg_regwen_5_qs;
  logic region_cfg_regwen_5_wd;
  logic region_cfg_regwen_6_we;
  logic region_cfg_regwen_6_qs;
  logic region_cfg_regwen_6_wd;
  logic region_cfg_regwen_7_we;
  logic region_cfg_regwen_7_qs;
  logic region_cfg_regwen_7_wd;
  logic mp_region_cfg_shadowed_0_re;
  logic mp_region_cfg_shadowed_0_we;
  logic mp_region_cfg_shadowed_0_en_0_qs;
  logic mp_region_cfg_shadowed_0_en_0_wd;
  logic mp_region_cfg_shadowed_0_rd_en_0_qs;
  logic mp_region_cfg_shadowed_0_rd_en_0_wd;
  logic mp_region_cfg_shadowed_0_prog_en_0_qs;
  logic mp_region_cfg_shadowed_0_prog_en_0_wd;
  logic mp_region_cfg_shadowed_0_erase_en_0_qs;
  logic mp_region_cfg_shadowed_0_erase_en_0_wd;
  logic mp_region_cfg_shadowed_0_scramble_en_0_qs;
  logic mp_region_cfg_shadowed_0_scramble_en_0_wd;
  logic mp_region_cfg_shadowed_0_ecc_en_0_qs;
  logic mp_region_cfg_shadowed_0_ecc_en_0_wd;
  logic mp_region_cfg_shadowed_0_he_en_0_qs;
  logic mp_region_cfg_shadowed_0_he_en_0_wd;
  logic [8:0] mp_region_cfg_shadowed_0_base_0_qs;
  logic [8:0] mp_region_cfg_shadowed_0_base_0_wd;
  logic [9:0] mp_region_cfg_shadowed_0_size_0_qs;
  logic [9:0] mp_region_cfg_shadowed_0_size_0_wd;
  logic mp_region_cfg_shadowed_1_re;
  logic mp_region_cfg_shadowed_1_we;
  logic mp_region_cfg_shadowed_1_en_1_qs;
  logic mp_region_cfg_shadowed_1_en_1_wd;
  logic mp_region_cfg_shadowed_1_rd_en_1_qs;
  logic mp_region_cfg_shadowed_1_rd_en_1_wd;
  logic mp_region_cfg_shadowed_1_prog_en_1_qs;
  logic mp_region_cfg_shadowed_1_prog_en_1_wd;
  logic mp_region_cfg_shadowed_1_erase_en_1_qs;
  logic mp_region_cfg_shadowed_1_erase_en_1_wd;
  logic mp_region_cfg_shadowed_1_scramble_en_1_qs;
  logic mp_region_cfg_shadowed_1_scramble_en_1_wd;
  logic mp_region_cfg_shadowed_1_ecc_en_1_qs;
  logic mp_region_cfg_shadowed_1_ecc_en_1_wd;
  logic mp_region_cfg_shadowed_1_he_en_1_qs;
  logic mp_region_cfg_shadowed_1_he_en_1_wd;
  logic [8:0] mp_region_cfg_shadowed_1_base_1_qs;
  logic [8:0] mp_region_cfg_shadowed_1_base_1_wd;
  logic [9:0] mp_region_cfg_shadowed_1_size_1_qs;
  logic [9:0] mp_region_cfg_shadowed_1_size_1_wd;
  logic mp_region_cfg_shadowed_2_re;
  logic mp_region_cfg_shadowed_2_we;
  logic mp_region_cfg_shadowed_2_en_2_qs;
  logic mp_region_cfg_shadowed_2_en_2_wd;
  logic mp_region_cfg_shadowed_2_rd_en_2_qs;
  logic mp_region_cfg_shadowed_2_rd_en_2_wd;
  logic mp_region_cfg_shadowed_2_prog_en_2_qs;
  logic mp_region_cfg_shadowed_2_prog_en_2_wd;
  logic mp_region_cfg_shadowed_2_erase_en_2_qs;
  logic mp_region_cfg_shadowed_2_erase_en_2_wd;
  logic mp_region_cfg_shadowed_2_scramble_en_2_qs;
  logic mp_region_cfg_shadowed_2_scramble_en_2_wd;
  logic mp_region_cfg_shadowed_2_ecc_en_2_qs;
  logic mp_region_cfg_shadowed_2_ecc_en_2_wd;
  logic mp_region_cfg_shadowed_2_he_en_2_qs;
  logic mp_region_cfg_shadowed_2_he_en_2_wd;
  logic [8:0] mp_region_cfg_shadowed_2_base_2_qs;
  logic [8:0] mp_region_cfg_shadowed_2_base_2_wd;
  logic [9:0] mp_region_cfg_shadowed_2_size_2_qs;
  logic [9:0] mp_region_cfg_shadowed_2_size_2_wd;
  logic mp_region_cfg_shadowed_3_re;
  logic mp_region_cfg_shadowed_3_we;
  logic mp_region_cfg_shadowed_3_en_3_qs;
  logic mp_region_cfg_shadowed_3_en_3_wd;
  logic mp_region_cfg_shadowed_3_rd_en_3_qs;
  logic mp_region_cfg_shadowed_3_rd_en_3_wd;
  logic mp_region_cfg_shadowed_3_prog_en_3_qs;
  logic mp_region_cfg_shadowed_3_prog_en_3_wd;
  logic mp_region_cfg_shadowed_3_erase_en_3_qs;
  logic mp_region_cfg_shadowed_3_erase_en_3_wd;
  logic mp_region_cfg_shadowed_3_scramble_en_3_qs;
  logic mp_region_cfg_shadowed_3_scramble_en_3_wd;
  logic mp_region_cfg_shadowed_3_ecc_en_3_qs;
  logic mp_region_cfg_shadowed_3_ecc_en_3_wd;
  logic mp_region_cfg_shadowed_3_he_en_3_qs;
  logic mp_region_cfg_shadowed_3_he_en_3_wd;
  logic [8:0] mp_region_cfg_shadowed_3_base_3_qs;
  logic [8:0] mp_region_cfg_shadowed_3_base_3_wd;
  logic [9:0] mp_region_cfg_shadowed_3_size_3_qs;
  logic [9:0] mp_region_cfg_shadowed_3_size_3_wd;
  logic mp_region_cfg_shadowed_4_re;
  logic mp_region_cfg_shadowed_4_we;
  logic mp_region_cfg_shadowed_4_en_4_qs;
  logic mp_region_cfg_shadowed_4_en_4_wd;
  logic mp_region_cfg_shadowed_4_rd_en_4_qs;
  logic mp_region_cfg_shadowed_4_rd_en_4_wd;
  logic mp_region_cfg_shadowed_4_prog_en_4_qs;
  logic mp_region_cfg_shadowed_4_prog_en_4_wd;
  logic mp_region_cfg_shadowed_4_erase_en_4_qs;
  logic mp_region_cfg_shadowed_4_erase_en_4_wd;
  logic mp_region_cfg_shadowed_4_scramble_en_4_qs;
  logic mp_region_cfg_shadowed_4_scramble_en_4_wd;
  logic mp_region_cfg_shadowed_4_ecc_en_4_qs;
  logic mp_region_cfg_shadowed_4_ecc_en_4_wd;
  logic mp_region_cfg_shadowed_4_he_en_4_qs;
  logic mp_region_cfg_shadowed_4_he_en_4_wd;
  logic [8:0] mp_region_cfg_shadowed_4_base_4_qs;
  logic [8:0] mp_region_cfg_shadowed_4_base_4_wd;
  logic [9:0] mp_region_cfg_shadowed_4_size_4_qs;
  logic [9:0] mp_region_cfg_shadowed_4_size_4_wd;
  logic mp_region_cfg_shadowed_5_re;
  logic mp_region_cfg_shadowed_5_we;
  logic mp_region_cfg_shadowed_5_en_5_qs;
  logic mp_region_cfg_shadowed_5_en_5_wd;
  logic mp_region_cfg_shadowed_5_rd_en_5_qs;
  logic mp_region_cfg_shadowed_5_rd_en_5_wd;
  logic mp_region_cfg_shadowed_5_prog_en_5_qs;
  logic mp_region_cfg_shadowed_5_prog_en_5_wd;
  logic mp_region_cfg_shadowed_5_erase_en_5_qs;
  logic mp_region_cfg_shadowed_5_erase_en_5_wd;
  logic mp_region_cfg_shadowed_5_scramble_en_5_qs;
  logic mp_region_cfg_shadowed_5_scramble_en_5_wd;
  logic mp_region_cfg_shadowed_5_ecc_en_5_qs;
  logic mp_region_cfg_shadowed_5_ecc_en_5_wd;
  logic mp_region_cfg_shadowed_5_he_en_5_qs;
  logic mp_region_cfg_shadowed_5_he_en_5_wd;
  logic [8:0] mp_region_cfg_shadowed_5_base_5_qs;
  logic [8:0] mp_region_cfg_shadowed_5_base_5_wd;
  logic [9:0] mp_region_cfg_shadowed_5_size_5_qs;
  logic [9:0] mp_region_cfg_shadowed_5_size_5_wd;
  logic mp_region_cfg_shadowed_6_re;
  logic mp_region_cfg_shadowed_6_we;
  logic mp_region_cfg_shadowed_6_en_6_qs;
  logic mp_region_cfg_shadowed_6_en_6_wd;
  logic mp_region_cfg_shadowed_6_rd_en_6_qs;
  logic mp_region_cfg_shadowed_6_rd_en_6_wd;
  logic mp_region_cfg_shadowed_6_prog_en_6_qs;
  logic mp_region_cfg_shadowed_6_prog_en_6_wd;
  logic mp_region_cfg_shadowed_6_erase_en_6_qs;
  logic mp_region_cfg_shadowed_6_erase_en_6_wd;
  logic mp_region_cfg_shadowed_6_scramble_en_6_qs;
  logic mp_region_cfg_shadowed_6_scramble_en_6_wd;
  logic mp_region_cfg_shadowed_6_ecc_en_6_qs;
  logic mp_region_cfg_shadowed_6_ecc_en_6_wd;
  logic mp_region_cfg_shadowed_6_he_en_6_qs;
  logic mp_region_cfg_shadowed_6_he_en_6_wd;
  logic [8:0] mp_region_cfg_shadowed_6_base_6_qs;
  logic [8:0] mp_region_cfg_shadowed_6_base_6_wd;
  logic [9:0] mp_region_cfg_shadowed_6_size_6_qs;
  logic [9:0] mp_region_cfg_shadowed_6_size_6_wd;
  logic mp_region_cfg_shadowed_7_re;
  logic mp_region_cfg_shadowed_7_we;
  logic mp_region_cfg_shadowed_7_en_7_qs;
  logic mp_region_cfg_shadowed_7_en_7_wd;
  logic mp_region_cfg_shadowed_7_rd_en_7_qs;
  logic mp_region_cfg_shadowed_7_rd_en_7_wd;
  logic mp_region_cfg_shadowed_7_prog_en_7_qs;
  logic mp_region_cfg_shadowed_7_prog_en_7_wd;
  logic mp_region_cfg_shadowed_7_erase_en_7_qs;
  logic mp_region_cfg_shadowed_7_erase_en_7_wd;
  logic mp_region_cfg_shadowed_7_scramble_en_7_qs;
  logic mp_region_cfg_shadowed_7_scramble_en_7_wd;
  logic mp_region_cfg_shadowed_7_ecc_en_7_qs;
  logic mp_region_cfg_shadowed_7_ecc_en_7_wd;
  logic mp_region_cfg_shadowed_7_he_en_7_qs;
  logic mp_region_cfg_shadowed_7_he_en_7_wd;
  logic [8:0] mp_region_cfg_shadowed_7_base_7_qs;
  logic [8:0] mp_region_cfg_shadowed_7_base_7_wd;
  logic [9:0] mp_region_cfg_shadowed_7_size_7_qs;
  logic [9:0] mp_region_cfg_shadowed_7_size_7_wd;
  logic default_region_shadowed_re;
  logic default_region_shadowed_we;
  logic default_region_shadowed_rd_en_qs;
  logic default_region_shadowed_rd_en_wd;
  logic default_region_shadowed_prog_en_qs;
  logic default_region_shadowed_prog_en_wd;
  logic default_region_shadowed_erase_en_qs;
  logic default_region_shadowed_erase_en_wd;
  logic default_region_shadowed_scramble_en_qs;
  logic default_region_shadowed_scramble_en_wd;
  logic default_region_shadowed_ecc_en_qs;
  logic default_region_shadowed_ecc_en_wd;
  logic default_region_shadowed_he_en_qs;
  logic default_region_shadowed_he_en_wd;
  logic bank0_info0_regwen_0_we;
  logic bank0_info0_regwen_0_qs;
  logic bank0_info0_regwen_0_wd;
  logic bank0_info0_regwen_1_we;
  logic bank0_info0_regwen_1_qs;
  logic bank0_info0_regwen_1_wd;
  logic bank0_info0_regwen_2_we;
  logic bank0_info0_regwen_2_qs;
  logic bank0_info0_regwen_2_wd;
  logic bank0_info0_regwen_3_we;
  logic bank0_info0_regwen_3_qs;
  logic bank0_info0_regwen_3_wd;
  logic bank0_info0_regwen_4_we;
  logic bank0_info0_regwen_4_qs;
  logic bank0_info0_regwen_4_wd;
  logic bank0_info0_regwen_5_we;
  logic bank0_info0_regwen_5_qs;
  logic bank0_info0_regwen_5_wd;
  logic bank0_info0_regwen_6_we;
  logic bank0_info0_regwen_6_qs;
  logic bank0_info0_regwen_6_wd;
  logic bank0_info0_regwen_7_we;
  logic bank0_info0_regwen_7_qs;
  logic bank0_info0_regwen_7_wd;
  logic bank0_info0_regwen_8_we;
  logic bank0_info0_regwen_8_qs;
  logic bank0_info0_regwen_8_wd;
  logic bank0_info0_regwen_9_we;
  logic bank0_info0_regwen_9_qs;
  logic bank0_info0_regwen_9_wd;
  logic bank0_info0_page_cfg_shadowed_0_re;
  logic bank0_info0_page_cfg_shadowed_0_we;
  logic bank0_info0_page_cfg_shadowed_0_en_0_qs;
  logic bank0_info0_page_cfg_shadowed_0_en_0_wd;
  logic bank0_info0_page_cfg_shadowed_0_rd_en_0_qs;
  logic bank0_info0_page_cfg_shadowed_0_rd_en_0_wd;
  logic bank0_info0_page_cfg_shadowed_0_prog_en_0_qs;
  logic bank0_info0_page_cfg_shadowed_0_prog_en_0_wd;
  logic bank0_info0_page_cfg_shadowed_0_erase_en_0_qs;
  logic bank0_info0_page_cfg_shadowed_0_erase_en_0_wd;
  logic bank0_info0_page_cfg_shadowed_0_scramble_en_0_qs;
  logic bank0_info0_page_cfg_shadowed_0_scramble_en_0_wd;
  logic bank0_info0_page_cfg_shadowed_0_ecc_en_0_qs;
  logic bank0_info0_page_cfg_shadowed_0_ecc_en_0_wd;
  logic bank0_info0_page_cfg_shadowed_0_he_en_0_qs;
  logic bank0_info0_page_cfg_shadowed_0_he_en_0_wd;
  logic bank0_info0_page_cfg_shadowed_1_re;
  logic bank0_info0_page_cfg_shadowed_1_we;
  logic bank0_info0_page_cfg_shadowed_1_en_1_qs;
  logic bank0_info0_page_cfg_shadowed_1_en_1_wd;
  logic bank0_info0_page_cfg_shadowed_1_rd_en_1_qs;
  logic bank0_info0_page_cfg_shadowed_1_rd_en_1_wd;
  logic bank0_info0_page_cfg_shadowed_1_prog_en_1_qs;
  logic bank0_info0_page_cfg_shadowed_1_prog_en_1_wd;
  logic bank0_info0_page_cfg_shadowed_1_erase_en_1_qs;
  logic bank0_info0_page_cfg_shadowed_1_erase_en_1_wd;
  logic bank0_info0_page_cfg_shadowed_1_scramble_en_1_qs;
  logic bank0_info0_page_cfg_shadowed_1_scramble_en_1_wd;
  logic bank0_info0_page_cfg_shadowed_1_ecc_en_1_qs;
  logic bank0_info0_page_cfg_shadowed_1_ecc_en_1_wd;
  logic bank0_info0_page_cfg_shadowed_1_he_en_1_qs;
  logic bank0_info0_page_cfg_shadowed_1_he_en_1_wd;
  logic bank0_info0_page_cfg_shadowed_2_re;
  logic bank0_info0_page_cfg_shadowed_2_we;
  logic bank0_info0_page_cfg_shadowed_2_en_2_qs;
  logic bank0_info0_page_cfg_shadowed_2_en_2_wd;
  logic bank0_info0_page_cfg_shadowed_2_rd_en_2_qs;
  logic bank0_info0_page_cfg_shadowed_2_rd_en_2_wd;
  logic bank0_info0_page_cfg_shadowed_2_prog_en_2_qs;
  logic bank0_info0_page_cfg_shadowed_2_prog_en_2_wd;
  logic bank0_info0_page_cfg_shadowed_2_erase_en_2_qs;
  logic bank0_info0_page_cfg_shadowed_2_erase_en_2_wd;
  logic bank0_info0_page_cfg_shadowed_2_scramble_en_2_qs;
  logic bank0_info0_page_cfg_shadowed_2_scramble_en_2_wd;
  logic bank0_info0_page_cfg_shadowed_2_ecc_en_2_qs;
  logic bank0_info0_page_cfg_shadowed_2_ecc_en_2_wd;
  logic bank0_info0_page_cfg_shadowed_2_he_en_2_qs;
  logic bank0_info0_page_cfg_shadowed_2_he_en_2_wd;
  logic bank0_info0_page_cfg_shadowed_3_re;
  logic bank0_info0_page_cfg_shadowed_3_we;
  logic bank0_info0_page_cfg_shadowed_3_en_3_qs;
  logic bank0_info0_page_cfg_shadowed_3_en_3_wd;
  logic bank0_info0_page_cfg_shadowed_3_rd_en_3_qs;
  logic bank0_info0_page_cfg_shadowed_3_rd_en_3_wd;
  logic bank0_info0_page_cfg_shadowed_3_prog_en_3_qs;
  logic bank0_info0_page_cfg_shadowed_3_prog_en_3_wd;
  logic bank0_info0_page_cfg_shadowed_3_erase_en_3_qs;
  logic bank0_info0_page_cfg_shadowed_3_erase_en_3_wd;
  logic bank0_info0_page_cfg_shadowed_3_scramble_en_3_qs;
  logic bank0_info0_page_cfg_shadowed_3_scramble_en_3_wd;
  logic bank0_info0_page_cfg_shadowed_3_ecc_en_3_qs;
  logic bank0_info0_page_cfg_shadowed_3_ecc_en_3_wd;
  logic bank0_info0_page_cfg_shadowed_3_he_en_3_qs;
  logic bank0_info0_page_cfg_shadowed_3_he_en_3_wd;
  logic bank0_info0_page_cfg_shadowed_4_re;
  logic bank0_info0_page_cfg_shadowed_4_we;
  logic bank0_info0_page_cfg_shadowed_4_en_4_qs;
  logic bank0_info0_page_cfg_shadowed_4_en_4_wd;
  logic bank0_info0_page_cfg_shadowed_4_rd_en_4_qs;
  logic bank0_info0_page_cfg_shadowed_4_rd_en_4_wd;
  logic bank0_info0_page_cfg_shadowed_4_prog_en_4_qs;
  logic bank0_info0_page_cfg_shadowed_4_prog_en_4_wd;
  logic bank0_info0_page_cfg_shadowed_4_erase_en_4_qs;
  logic bank0_info0_page_cfg_shadowed_4_erase_en_4_wd;
  logic bank0_info0_page_cfg_shadowed_4_scramble_en_4_qs;
  logic bank0_info0_page_cfg_shadowed_4_scramble_en_4_wd;
  logic bank0_info0_page_cfg_shadowed_4_ecc_en_4_qs;
  logic bank0_info0_page_cfg_shadowed_4_ecc_en_4_wd;
  logic bank0_info0_page_cfg_shadowed_4_he_en_4_qs;
  logic bank0_info0_page_cfg_shadowed_4_he_en_4_wd;
  logic bank0_info0_page_cfg_shadowed_5_re;
  logic bank0_info0_page_cfg_shadowed_5_we;
  logic bank0_info0_page_cfg_shadowed_5_en_5_qs;
  logic bank0_info0_page_cfg_shadowed_5_en_5_wd;
  logic bank0_info0_page_cfg_shadowed_5_rd_en_5_qs;
  logic bank0_info0_page_cfg_shadowed_5_rd_en_5_wd;
  logic bank0_info0_page_cfg_shadowed_5_prog_en_5_qs;
  logic bank0_info0_page_cfg_shadowed_5_prog_en_5_wd;
  logic bank0_info0_page_cfg_shadowed_5_erase_en_5_qs;
  logic bank0_info0_page_cfg_shadowed_5_erase_en_5_wd;
  logic bank0_info0_page_cfg_shadowed_5_scramble_en_5_qs;
  logic bank0_info0_page_cfg_shadowed_5_scramble_en_5_wd;
  logic bank0_info0_page_cfg_shadowed_5_ecc_en_5_qs;
  logic bank0_info0_page_cfg_shadowed_5_ecc_en_5_wd;
  logic bank0_info0_page_cfg_shadowed_5_he_en_5_qs;
  logic bank0_info0_page_cfg_shadowed_5_he_en_5_wd;
  logic bank0_info0_page_cfg_shadowed_6_re;
  logic bank0_info0_page_cfg_shadowed_6_we;
  logic bank0_info0_page_cfg_shadowed_6_en_6_qs;
  logic bank0_info0_page_cfg_shadowed_6_en_6_wd;
  logic bank0_info0_page_cfg_shadowed_6_rd_en_6_qs;
  logic bank0_info0_page_cfg_shadowed_6_rd_en_6_wd;
  logic bank0_info0_page_cfg_shadowed_6_prog_en_6_qs;
  logic bank0_info0_page_cfg_shadowed_6_prog_en_6_wd;
  logic bank0_info0_page_cfg_shadowed_6_erase_en_6_qs;
  logic bank0_info0_page_cfg_shadowed_6_erase_en_6_wd;
  logic bank0_info0_page_cfg_shadowed_6_scramble_en_6_qs;
  logic bank0_info0_page_cfg_shadowed_6_scramble_en_6_wd;
  logic bank0_info0_page_cfg_shadowed_6_ecc_en_6_qs;
  logic bank0_info0_page_cfg_shadowed_6_ecc_en_6_wd;
  logic bank0_info0_page_cfg_shadowed_6_he_en_6_qs;
  logic bank0_info0_page_cfg_shadowed_6_he_en_6_wd;
  logic bank0_info0_page_cfg_shadowed_7_re;
  logic bank0_info0_page_cfg_shadowed_7_we;
  logic bank0_info0_page_cfg_shadowed_7_en_7_qs;
  logic bank0_info0_page_cfg_shadowed_7_en_7_wd;
  logic bank0_info0_page_cfg_shadowed_7_rd_en_7_qs;
  logic bank0_info0_page_cfg_shadowed_7_rd_en_7_wd;
  logic bank0_info0_page_cfg_shadowed_7_prog_en_7_qs;
  logic bank0_info0_page_cfg_shadowed_7_prog_en_7_wd;
  logic bank0_info0_page_cfg_shadowed_7_erase_en_7_qs;
  logic bank0_info0_page_cfg_shadowed_7_erase_en_7_wd;
  logic bank0_info0_page_cfg_shadowed_7_scramble_en_7_qs;
  logic bank0_info0_page_cfg_shadowed_7_scramble_en_7_wd;
  logic bank0_info0_page_cfg_shadowed_7_ecc_en_7_qs;
  logic bank0_info0_page_cfg_shadowed_7_ecc_en_7_wd;
  logic bank0_info0_page_cfg_shadowed_7_he_en_7_qs;
  logic bank0_info0_page_cfg_shadowed_7_he_en_7_wd;
  logic bank0_info0_page_cfg_shadowed_8_re;
  logic bank0_info0_page_cfg_shadowed_8_we;
  logic bank0_info0_page_cfg_shadowed_8_en_8_qs;
  logic bank0_info0_page_cfg_shadowed_8_en_8_wd;
  logic bank0_info0_page_cfg_shadowed_8_rd_en_8_qs;
  logic bank0_info0_page_cfg_shadowed_8_rd_en_8_wd;
  logic bank0_info0_page_cfg_shadowed_8_prog_en_8_qs;
  logic bank0_info0_page_cfg_shadowed_8_prog_en_8_wd;
  logic bank0_info0_page_cfg_shadowed_8_erase_en_8_qs;
  logic bank0_info0_page_cfg_shadowed_8_erase_en_8_wd;
  logic bank0_info0_page_cfg_shadowed_8_scramble_en_8_qs;
  logic bank0_info0_page_cfg_shadowed_8_scramble_en_8_wd;
  logic bank0_info0_page_cfg_shadowed_8_ecc_en_8_qs;
  logic bank0_info0_page_cfg_shadowed_8_ecc_en_8_wd;
  logic bank0_info0_page_cfg_shadowed_8_he_en_8_qs;
  logic bank0_info0_page_cfg_shadowed_8_he_en_8_wd;
  logic bank0_info0_page_cfg_shadowed_9_re;
  logic bank0_info0_page_cfg_shadowed_9_we;
  logic bank0_info0_page_cfg_shadowed_9_en_9_qs;
  logic bank0_info0_page_cfg_shadowed_9_en_9_wd;
  logic bank0_info0_page_cfg_shadowed_9_rd_en_9_qs;
  logic bank0_info0_page_cfg_shadowed_9_rd_en_9_wd;
  logic bank0_info0_page_cfg_shadowed_9_prog_en_9_qs;
  logic bank0_info0_page_cfg_shadowed_9_prog_en_9_wd;
  logic bank0_info0_page_cfg_shadowed_9_erase_en_9_qs;
  logic bank0_info0_page_cfg_shadowed_9_erase_en_9_wd;
  logic bank0_info0_page_cfg_shadowed_9_scramble_en_9_qs;
  logic bank0_info0_page_cfg_shadowed_9_scramble_en_9_wd;
  logic bank0_info0_page_cfg_shadowed_9_ecc_en_9_qs;
  logic bank0_info0_page_cfg_shadowed_9_ecc_en_9_wd;
  logic bank0_info0_page_cfg_shadowed_9_he_en_9_qs;
  logic bank0_info0_page_cfg_shadowed_9_he_en_9_wd;
  logic bank0_info1_regwen_we;
  logic bank0_info1_regwen_qs;
  logic bank0_info1_regwen_wd;
  logic bank0_info1_page_cfg_shadowed_re;
  logic bank0_info1_page_cfg_shadowed_we;
  logic bank0_info1_page_cfg_shadowed_en_0_qs;
  logic bank0_info1_page_cfg_shadowed_en_0_wd;
  logic bank0_info1_page_cfg_shadowed_rd_en_0_qs;
  logic bank0_info1_page_cfg_shadowed_rd_en_0_wd;
  logic bank0_info1_page_cfg_shadowed_prog_en_0_qs;
  logic bank0_info1_page_cfg_shadowed_prog_en_0_wd;
  logic bank0_info1_page_cfg_shadowed_erase_en_0_qs;
  logic bank0_info1_page_cfg_shadowed_erase_en_0_wd;
  logic bank0_info1_page_cfg_shadowed_scramble_en_0_qs;
  logic bank0_info1_page_cfg_shadowed_scramble_en_0_wd;
  logic bank0_info1_page_cfg_shadowed_ecc_en_0_qs;
  logic bank0_info1_page_cfg_shadowed_ecc_en_0_wd;
  logic bank0_info1_page_cfg_shadowed_he_en_0_qs;
  logic bank0_info1_page_cfg_shadowed_he_en_0_wd;
  logic bank0_info2_regwen_0_we;
  logic bank0_info2_regwen_0_qs;
  logic bank0_info2_regwen_0_wd;
  logic bank0_info2_regwen_1_we;
  logic bank0_info2_regwen_1_qs;
  logic bank0_info2_regwen_1_wd;
  logic bank0_info2_page_cfg_shadowed_0_re;
  logic bank0_info2_page_cfg_shadowed_0_we;
  logic bank0_info2_page_cfg_shadowed_0_en_0_qs;
  logic bank0_info2_page_cfg_shadowed_0_en_0_wd;
  logic bank0_info2_page_cfg_shadowed_0_rd_en_0_qs;
  logic bank0_info2_page_cfg_shadowed_0_rd_en_0_wd;
  logic bank0_info2_page_cfg_shadowed_0_prog_en_0_qs;
  logic bank0_info2_page_cfg_shadowed_0_prog_en_0_wd;
  logic bank0_info2_page_cfg_shadowed_0_erase_en_0_qs;
  logic bank0_info2_page_cfg_shadowed_0_erase_en_0_wd;
  logic bank0_info2_page_cfg_shadowed_0_scramble_en_0_qs;
  logic bank0_info2_page_cfg_shadowed_0_scramble_en_0_wd;
  logic bank0_info2_page_cfg_shadowed_0_ecc_en_0_qs;
  logic bank0_info2_page_cfg_shadowed_0_ecc_en_0_wd;
  logic bank0_info2_page_cfg_shadowed_0_he_en_0_qs;
  logic bank0_info2_page_cfg_shadowed_0_he_en_0_wd;
  logic bank0_info2_page_cfg_shadowed_1_re;
  logic bank0_info2_page_cfg_shadowed_1_we;
  logic bank0_info2_page_cfg_shadowed_1_en_1_qs;
  logic bank0_info2_page_cfg_shadowed_1_en_1_wd;
  logic bank0_info2_page_cfg_shadowed_1_rd_en_1_qs;
  logic bank0_info2_page_cfg_shadowed_1_rd_en_1_wd;
  logic bank0_info2_page_cfg_shadowed_1_prog_en_1_qs;
  logic bank0_info2_page_cfg_shadowed_1_prog_en_1_wd;
  logic bank0_info2_page_cfg_shadowed_1_erase_en_1_qs;
  logic bank0_info2_page_cfg_shadowed_1_erase_en_1_wd;
  logic bank0_info2_page_cfg_shadowed_1_scramble_en_1_qs;
  logic bank0_info2_page_cfg_shadowed_1_scramble_en_1_wd;
  logic bank0_info2_page_cfg_shadowed_1_ecc_en_1_qs;
  logic bank0_info2_page_cfg_shadowed_1_ecc_en_1_wd;
  logic bank0_info2_page_cfg_shadowed_1_he_en_1_qs;
  logic bank0_info2_page_cfg_shadowed_1_he_en_1_wd;
  logic bank1_info0_regwen_0_we;
  logic bank1_info0_regwen_0_qs;
  logic bank1_info0_regwen_0_wd;
  logic bank1_info0_regwen_1_we;
  logic bank1_info0_regwen_1_qs;
  logic bank1_info0_regwen_1_wd;
  logic bank1_info0_regwen_2_we;
  logic bank1_info0_regwen_2_qs;
  logic bank1_info0_regwen_2_wd;
  logic bank1_info0_regwen_3_we;
  logic bank1_info0_regwen_3_qs;
  logic bank1_info0_regwen_3_wd;
  logic bank1_info0_regwen_4_we;
  logic bank1_info0_regwen_4_qs;
  logic bank1_info0_regwen_4_wd;
  logic bank1_info0_regwen_5_we;
  logic bank1_info0_regwen_5_qs;
  logic bank1_info0_regwen_5_wd;
  logic bank1_info0_regwen_6_we;
  logic bank1_info0_regwen_6_qs;
  logic bank1_info0_regwen_6_wd;
  logic bank1_info0_regwen_7_we;
  logic bank1_info0_regwen_7_qs;
  logic bank1_info0_regwen_7_wd;
  logic bank1_info0_regwen_8_we;
  logic bank1_info0_regwen_8_qs;
  logic bank1_info0_regwen_8_wd;
  logic bank1_info0_regwen_9_we;
  logic bank1_info0_regwen_9_qs;
  logic bank1_info0_regwen_9_wd;
  logic bank1_info0_page_cfg_shadowed_0_re;
  logic bank1_info0_page_cfg_shadowed_0_we;
  logic bank1_info0_page_cfg_shadowed_0_en_0_qs;
  logic bank1_info0_page_cfg_shadowed_0_en_0_wd;
  logic bank1_info0_page_cfg_shadowed_0_rd_en_0_qs;
  logic bank1_info0_page_cfg_shadowed_0_rd_en_0_wd;
  logic bank1_info0_page_cfg_shadowed_0_prog_en_0_qs;
  logic bank1_info0_page_cfg_shadowed_0_prog_en_0_wd;
  logic bank1_info0_page_cfg_shadowed_0_erase_en_0_qs;
  logic bank1_info0_page_cfg_shadowed_0_erase_en_0_wd;
  logic bank1_info0_page_cfg_shadowed_0_scramble_en_0_qs;
  logic bank1_info0_page_cfg_shadowed_0_scramble_en_0_wd;
  logic bank1_info0_page_cfg_shadowed_0_ecc_en_0_qs;
  logic bank1_info0_page_cfg_shadowed_0_ecc_en_0_wd;
  logic bank1_info0_page_cfg_shadowed_0_he_en_0_qs;
  logic bank1_info0_page_cfg_shadowed_0_he_en_0_wd;
  logic bank1_info0_page_cfg_shadowed_1_re;
  logic bank1_info0_page_cfg_shadowed_1_we;
  logic bank1_info0_page_cfg_shadowed_1_en_1_qs;
  logic bank1_info0_page_cfg_shadowed_1_en_1_wd;
  logic bank1_info0_page_cfg_shadowed_1_rd_en_1_qs;
  logic bank1_info0_page_cfg_shadowed_1_rd_en_1_wd;
  logic bank1_info0_page_cfg_shadowed_1_prog_en_1_qs;
  logic bank1_info0_page_cfg_shadowed_1_prog_en_1_wd;
  logic bank1_info0_page_cfg_shadowed_1_erase_en_1_qs;
  logic bank1_info0_page_cfg_shadowed_1_erase_en_1_wd;
  logic bank1_info0_page_cfg_shadowed_1_scramble_en_1_qs;
  logic bank1_info0_page_cfg_shadowed_1_scramble_en_1_wd;
  logic bank1_info0_page_cfg_shadowed_1_ecc_en_1_qs;
  logic bank1_info0_page_cfg_shadowed_1_ecc_en_1_wd;
  logic bank1_info0_page_cfg_shadowed_1_he_en_1_qs;
  logic bank1_info0_page_cfg_shadowed_1_he_en_1_wd;
  logic bank1_info0_page_cfg_shadowed_2_re;
  logic bank1_info0_page_cfg_shadowed_2_we;
  logic bank1_info0_page_cfg_shadowed_2_en_2_qs;
  logic bank1_info0_page_cfg_shadowed_2_en_2_wd;
  logic bank1_info0_page_cfg_shadowed_2_rd_en_2_qs;
  logic bank1_info0_page_cfg_shadowed_2_rd_en_2_wd;
  logic bank1_info0_page_cfg_shadowed_2_prog_en_2_qs;
  logic bank1_info0_page_cfg_shadowed_2_prog_en_2_wd;
  logic bank1_info0_page_cfg_shadowed_2_erase_en_2_qs;
  logic bank1_info0_page_cfg_shadowed_2_erase_en_2_wd;
  logic bank1_info0_page_cfg_shadowed_2_scramble_en_2_qs;
  logic bank1_info0_page_cfg_shadowed_2_scramble_en_2_wd;
  logic bank1_info0_page_cfg_shadowed_2_ecc_en_2_qs;
  logic bank1_info0_page_cfg_shadowed_2_ecc_en_2_wd;
  logic bank1_info0_page_cfg_shadowed_2_he_en_2_qs;
  logic bank1_info0_page_cfg_shadowed_2_he_en_2_wd;
  logic bank1_info0_page_cfg_shadowed_3_re;
  logic bank1_info0_page_cfg_shadowed_3_we;
  logic bank1_info0_page_cfg_shadowed_3_en_3_qs;
  logic bank1_info0_page_cfg_shadowed_3_en_3_wd;
  logic bank1_info0_page_cfg_shadowed_3_rd_en_3_qs;
  logic bank1_info0_page_cfg_shadowed_3_rd_en_3_wd;
  logic bank1_info0_page_cfg_shadowed_3_prog_en_3_qs;
  logic bank1_info0_page_cfg_shadowed_3_prog_en_3_wd;
  logic bank1_info0_page_cfg_shadowed_3_erase_en_3_qs;
  logic bank1_info0_page_cfg_shadowed_3_erase_en_3_wd;
  logic bank1_info0_page_cfg_shadowed_3_scramble_en_3_qs;
  logic bank1_info0_page_cfg_shadowed_3_scramble_en_3_wd;
  logic bank1_info0_page_cfg_shadowed_3_ecc_en_3_qs;
  logic bank1_info0_page_cfg_shadowed_3_ecc_en_3_wd;
  logic bank1_info0_page_cfg_shadowed_3_he_en_3_qs;
  logic bank1_info0_page_cfg_shadowed_3_he_en_3_wd;
  logic bank1_info0_page_cfg_shadowed_4_re;
  logic bank1_info0_page_cfg_shadowed_4_we;
  logic bank1_info0_page_cfg_shadowed_4_en_4_qs;
  logic bank1_info0_page_cfg_shadowed_4_en_4_wd;
  logic bank1_info0_page_cfg_shadowed_4_rd_en_4_qs;
  logic bank1_info0_page_cfg_shadowed_4_rd_en_4_wd;
  logic bank1_info0_page_cfg_shadowed_4_prog_en_4_qs;
  logic bank1_info0_page_cfg_shadowed_4_prog_en_4_wd;
  logic bank1_info0_page_cfg_shadowed_4_erase_en_4_qs;
  logic bank1_info0_page_cfg_shadowed_4_erase_en_4_wd;
  logic bank1_info0_page_cfg_shadowed_4_scramble_en_4_qs;
  logic bank1_info0_page_cfg_shadowed_4_scramble_en_4_wd;
  logic bank1_info0_page_cfg_shadowed_4_ecc_en_4_qs;
  logic bank1_info0_page_cfg_shadowed_4_ecc_en_4_wd;
  logic bank1_info0_page_cfg_shadowed_4_he_en_4_qs;
  logic bank1_info0_page_cfg_shadowed_4_he_en_4_wd;
  logic bank1_info0_page_cfg_shadowed_5_re;
  logic bank1_info0_page_cfg_shadowed_5_we;
  logic bank1_info0_page_cfg_shadowed_5_en_5_qs;
  logic bank1_info0_page_cfg_shadowed_5_en_5_wd;
  logic bank1_info0_page_cfg_shadowed_5_rd_en_5_qs;
  logic bank1_info0_page_cfg_shadowed_5_rd_en_5_wd;
  logic bank1_info0_page_cfg_shadowed_5_prog_en_5_qs;
  logic bank1_info0_page_cfg_shadowed_5_prog_en_5_wd;
  logic bank1_info0_page_cfg_shadowed_5_erase_en_5_qs;
  logic bank1_info0_page_cfg_shadowed_5_erase_en_5_wd;
  logic bank1_info0_page_cfg_shadowed_5_scramble_en_5_qs;
  logic bank1_info0_page_cfg_shadowed_5_scramble_en_5_wd;
  logic bank1_info0_page_cfg_shadowed_5_ecc_en_5_qs;
  logic bank1_info0_page_cfg_shadowed_5_ecc_en_5_wd;
  logic bank1_info0_page_cfg_shadowed_5_he_en_5_qs;
  logic bank1_info0_page_cfg_shadowed_5_he_en_5_wd;
  logic bank1_info0_page_cfg_shadowed_6_re;
  logic bank1_info0_page_cfg_shadowed_6_we;
  logic bank1_info0_page_cfg_shadowed_6_en_6_qs;
  logic bank1_info0_page_cfg_shadowed_6_en_6_wd;
  logic bank1_info0_page_cfg_shadowed_6_rd_en_6_qs;
  logic bank1_info0_page_cfg_shadowed_6_rd_en_6_wd;
  logic bank1_info0_page_cfg_shadowed_6_prog_en_6_qs;
  logic bank1_info0_page_cfg_shadowed_6_prog_en_6_wd;
  logic bank1_info0_page_cfg_shadowed_6_erase_en_6_qs;
  logic bank1_info0_page_cfg_shadowed_6_erase_en_6_wd;
  logic bank1_info0_page_cfg_shadowed_6_scramble_en_6_qs;
  logic bank1_info0_page_cfg_shadowed_6_scramble_en_6_wd;
  logic bank1_info0_page_cfg_shadowed_6_ecc_en_6_qs;
  logic bank1_info0_page_cfg_shadowed_6_ecc_en_6_wd;
  logic bank1_info0_page_cfg_shadowed_6_he_en_6_qs;
  logic bank1_info0_page_cfg_shadowed_6_he_en_6_wd;
  logic bank1_info0_page_cfg_shadowed_7_re;
  logic bank1_info0_page_cfg_shadowed_7_we;
  logic bank1_info0_page_cfg_shadowed_7_en_7_qs;
  logic bank1_info0_page_cfg_shadowed_7_en_7_wd;
  logic bank1_info0_page_cfg_shadowed_7_rd_en_7_qs;
  logic bank1_info0_page_cfg_shadowed_7_rd_en_7_wd;
  logic bank1_info0_page_cfg_shadowed_7_prog_en_7_qs;
  logic bank1_info0_page_cfg_shadowed_7_prog_en_7_wd;
  logic bank1_info0_page_cfg_shadowed_7_erase_en_7_qs;
  logic bank1_info0_page_cfg_shadowed_7_erase_en_7_wd;
  logic bank1_info0_page_cfg_shadowed_7_scramble_en_7_qs;
  logic bank1_info0_page_cfg_shadowed_7_scramble_en_7_wd;
  logic bank1_info0_page_cfg_shadowed_7_ecc_en_7_qs;
  logic bank1_info0_page_cfg_shadowed_7_ecc_en_7_wd;
  logic bank1_info0_page_cfg_shadowed_7_he_en_7_qs;
  logic bank1_info0_page_cfg_shadowed_7_he_en_7_wd;
  logic bank1_info0_page_cfg_shadowed_8_re;
  logic bank1_info0_page_cfg_shadowed_8_we;
  logic bank1_info0_page_cfg_shadowed_8_en_8_qs;
  logic bank1_info0_page_cfg_shadowed_8_en_8_wd;
  logic bank1_info0_page_cfg_shadowed_8_rd_en_8_qs;
  logic bank1_info0_page_cfg_shadowed_8_rd_en_8_wd;
  logic bank1_info0_page_cfg_shadowed_8_prog_en_8_qs;
  logic bank1_info0_page_cfg_shadowed_8_prog_en_8_wd;
  logic bank1_info0_page_cfg_shadowed_8_erase_en_8_qs;
  logic bank1_info0_page_cfg_shadowed_8_erase_en_8_wd;
  logic bank1_info0_page_cfg_shadowed_8_scramble_en_8_qs;
  logic bank1_info0_page_cfg_shadowed_8_scramble_en_8_wd;
  logic bank1_info0_page_cfg_shadowed_8_ecc_en_8_qs;
  logic bank1_info0_page_cfg_shadowed_8_ecc_en_8_wd;
  logic bank1_info0_page_cfg_shadowed_8_he_en_8_qs;
  logic bank1_info0_page_cfg_shadowed_8_he_en_8_wd;
  logic bank1_info0_page_cfg_shadowed_9_re;
  logic bank1_info0_page_cfg_shadowed_9_we;
  logic bank1_info0_page_cfg_shadowed_9_en_9_qs;
  logic bank1_info0_page_cfg_shadowed_9_en_9_wd;
  logic bank1_info0_page_cfg_shadowed_9_rd_en_9_qs;
  logic bank1_info0_page_cfg_shadowed_9_rd_en_9_wd;
  logic bank1_info0_page_cfg_shadowed_9_prog_en_9_qs;
  logic bank1_info0_page_cfg_shadowed_9_prog_en_9_wd;
  logic bank1_info0_page_cfg_shadowed_9_erase_en_9_qs;
  logic bank1_info0_page_cfg_shadowed_9_erase_en_9_wd;
  logic bank1_info0_page_cfg_shadowed_9_scramble_en_9_qs;
  logic bank1_info0_page_cfg_shadowed_9_scramble_en_9_wd;
  logic bank1_info0_page_cfg_shadowed_9_ecc_en_9_qs;
  logic bank1_info0_page_cfg_shadowed_9_ecc_en_9_wd;
  logic bank1_info0_page_cfg_shadowed_9_he_en_9_qs;
  logic bank1_info0_page_cfg_shadowed_9_he_en_9_wd;
  logic bank1_info1_regwen_we;
  logic bank1_info1_regwen_qs;
  logic bank1_info1_regwen_wd;
  logic bank1_info1_page_cfg_shadowed_re;
  logic bank1_info1_page_cfg_shadowed_we;
  logic bank1_info1_page_cfg_shadowed_en_0_qs;
  logic bank1_info1_page_cfg_shadowed_en_0_wd;
  logic bank1_info1_page_cfg_shadowed_rd_en_0_qs;
  logic bank1_info1_page_cfg_shadowed_rd_en_0_wd;
  logic bank1_info1_page_cfg_shadowed_prog_en_0_qs;
  logic bank1_info1_page_cfg_shadowed_prog_en_0_wd;
  logic bank1_info1_page_cfg_shadowed_erase_en_0_qs;
  logic bank1_info1_page_cfg_shadowed_erase_en_0_wd;
  logic bank1_info1_page_cfg_shadowed_scramble_en_0_qs;
  logic bank1_info1_page_cfg_shadowed_scramble_en_0_wd;
  logic bank1_info1_page_cfg_shadowed_ecc_en_0_qs;
  logic bank1_info1_page_cfg_shadowed_ecc_en_0_wd;
  logic bank1_info1_page_cfg_shadowed_he_en_0_qs;
  logic bank1_info1_page_cfg_shadowed_he_en_0_wd;
  logic bank1_info2_regwen_0_we;
  logic bank1_info2_regwen_0_qs;
  logic bank1_info2_regwen_0_wd;
  logic bank1_info2_regwen_1_we;
  logic bank1_info2_regwen_1_qs;
  logic bank1_info2_regwen_1_wd;
  logic bank1_info2_page_cfg_shadowed_0_re;
  logic bank1_info2_page_cfg_shadowed_0_we;
  logic bank1_info2_page_cfg_shadowed_0_en_0_qs;
  logic bank1_info2_page_cfg_shadowed_0_en_0_wd;
  logic bank1_info2_page_cfg_shadowed_0_rd_en_0_qs;
  logic bank1_info2_page_cfg_shadowed_0_rd_en_0_wd;
  logic bank1_info2_page_cfg_shadowed_0_prog_en_0_qs;
  logic bank1_info2_page_cfg_shadowed_0_prog_en_0_wd;
  logic bank1_info2_page_cfg_shadowed_0_erase_en_0_qs;
  logic bank1_info2_page_cfg_shadowed_0_erase_en_0_wd;
  logic bank1_info2_page_cfg_shadowed_0_scramble_en_0_qs;
  logic bank1_info2_page_cfg_shadowed_0_scramble_en_0_wd;
  logic bank1_info2_page_cfg_shadowed_0_ecc_en_0_qs;
  logic bank1_info2_page_cfg_shadowed_0_ecc_en_0_wd;
  logic bank1_info2_page_cfg_shadowed_0_he_en_0_qs;
  logic bank1_info2_page_cfg_shadowed_0_he_en_0_wd;
  logic bank1_info2_page_cfg_shadowed_1_re;
  logic bank1_info2_page_cfg_shadowed_1_we;
  logic bank1_info2_page_cfg_shadowed_1_en_1_qs;
  logic bank1_info2_page_cfg_shadowed_1_en_1_wd;
  logic bank1_info2_page_cfg_shadowed_1_rd_en_1_qs;
  logic bank1_info2_page_cfg_shadowed_1_rd_en_1_wd;
  logic bank1_info2_page_cfg_shadowed_1_prog_en_1_qs;
  logic bank1_info2_page_cfg_shadowed_1_prog_en_1_wd;
  logic bank1_info2_page_cfg_shadowed_1_erase_en_1_qs;
  logic bank1_info2_page_cfg_shadowed_1_erase_en_1_wd;
  logic bank1_info2_page_cfg_shadowed_1_scramble_en_1_qs;
  logic bank1_info2_page_cfg_shadowed_1_scramble_en_1_wd;
  logic bank1_info2_page_cfg_shadowed_1_ecc_en_1_qs;
  logic bank1_info2_page_cfg_shadowed_1_ecc_en_1_wd;
  logic bank1_info2_page_cfg_shadowed_1_he_en_1_qs;
  logic bank1_info2_page_cfg_shadowed_1_he_en_1_wd;
  logic bank_cfg_regwen_we;
  logic bank_cfg_regwen_qs;
  logic bank_cfg_regwen_wd;
  logic mp_bank_cfg_shadowed_re;
  logic mp_bank_cfg_shadowed_we;
  logic mp_bank_cfg_shadowed_erase_en_0_qs;
  logic mp_bank_cfg_shadowed_erase_en_0_wd;
  logic mp_bank_cfg_shadowed_erase_en_1_qs;
  logic mp_bank_cfg_shadowed_erase_en_1_wd;
  logic op_status_we;
  logic op_status_done_qs;
  logic op_status_done_wd;
  logic op_status_err_qs;
  logic op_status_err_wd;
  logic status_rd_full_qs;
  logic status_rd_empty_qs;
  logic status_prog_full_qs;
  logic status_prog_empty_qs;
  logic status_init_wip_qs;
  logic err_code_we;
  logic err_code_mp_err_qs;
  logic err_code_mp_err_wd;
  logic err_code_rd_err_qs;
  logic err_code_rd_err_wd;
  logic err_code_prog_win_err_qs;
  logic err_code_prog_win_err_wd;
  logic err_code_prog_type_err_qs;
  logic err_code_prog_type_err_wd;
  logic err_code_flash_phy_err_qs;
  logic err_code_flash_phy_err_wd;
  logic err_code_update_err_qs;
  logic err_code_update_err_wd;
  logic fault_status_mp_err_qs;
  logic fault_status_rd_err_qs;
  logic fault_status_prog_win_err_qs;
  logic fault_status_prog_type_err_qs;
  logic fault_status_flash_phy_err_qs;
  logic fault_status_reg_intg_err_qs;
  logic fault_status_phy_intg_err_qs;
  logic fault_status_lcmgr_err_qs;
  logic fault_status_arb_fsm_err_qs;
  logic fault_status_storage_err_qs;
  logic fault_status_seed_err_qs;
  logic [19:0] err_addr_qs;
  logic ecc_single_err_cnt_we;
  logic [7:0] ecc_single_err_cnt_ecc_single_err_cnt_0_qs;
  logic [7:0] ecc_single_err_cnt_ecc_single_err_cnt_0_wd;
  logic [7:0] ecc_single_err_cnt_ecc_single_err_cnt_1_qs;
  logic [7:0] ecc_single_err_cnt_ecc_single_err_cnt_1_wd;
  logic [19:0] ecc_single_err_addr_0_qs;
  logic [19:0] ecc_single_err_addr_1_qs;
  logic phy_alert_cfg_we;
  logic phy_alert_cfg_alert_ack_qs;
  logic phy_alert_cfg_alert_ack_wd;
  logic phy_alert_cfg_alert_trig_qs;
  logic phy_alert_cfg_alert_trig_wd;
  logic phy_status_init_wip_qs;
  logic phy_status_prog_normal_avail_qs;
  logic phy_status_prog_repair_avail_qs;
  logic scratch_we;
  logic [31:0] scratch_qs;
  logic [31:0] scratch_wd;
  logic fifo_lvl_we;
  logic [4:0] fifo_lvl_prog_qs;
  logic [4:0] fifo_lvl_prog_wd;
  logic [4:0] fifo_lvl_rd_qs;
  logic [4:0] fifo_lvl_rd_wd;
  logic fifo_rst_we;
  logic fifo_rst_qs;
  logic fifo_rst_wd;

  // Register instances
  // R[intr_state]: V(False)
  //   F[prog_empty]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_prog_empty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_prog_empty_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.prog_empty.de),
    .d      (hw2reg.intr_state.prog_empty.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.prog_empty.q),

    // to register interface (read)
    .qs     (intr_state_prog_empty_qs)
  );

  //   F[prog_lvl]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_prog_lvl (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_prog_lvl_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.prog_lvl.de),
    .d      (hw2reg.intr_state.prog_lvl.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.prog_lvl.q),

    // to register interface (read)
    .qs     (intr_state_prog_lvl_qs)
  );

  //   F[rd_full]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_rd_full (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_rd_full_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.rd_full.de),
    .d      (hw2reg.intr_state.rd_full.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.rd_full.q),

    // to register interface (read)
    .qs     (intr_state_rd_full_qs)
  );

  //   F[rd_lvl]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_rd_lvl (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_rd_lvl_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.rd_lvl.de),
    .d      (hw2reg.intr_state.rd_lvl.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.rd_lvl.q),

    // to register interface (read)
    .qs     (intr_state_rd_lvl_qs)
  );

  //   F[op_done]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_op_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_op_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.op_done.de),
    .d      (hw2reg.intr_state.op_done.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.op_done.q),

    // to register interface (read)
    .qs     (intr_state_op_done_qs)
  );

  //   F[corr_err]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_corr_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_corr_err_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.corr_err.de),
    .d      (hw2reg.intr_state.corr_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.corr_err.q),

    // to register interface (read)
    .qs     (intr_state_corr_err_qs)
  );


  // R[intr_enable]: V(False)
  //   F[prog_empty]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_prog_empty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_prog_empty_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.prog_empty.q),

    // to register interface (read)
    .qs     (intr_enable_prog_empty_qs)
  );

  //   F[prog_lvl]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_prog_lvl (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_prog_lvl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.prog_lvl.q),

    // to register interface (read)
    .qs     (intr_enable_prog_lvl_qs)
  );

  //   F[rd_full]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_rd_full (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_rd_full_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.rd_full.q),

    // to register interface (read)
    .qs     (intr_enable_rd_full_qs)
  );

  //   F[rd_lvl]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_rd_lvl (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_rd_lvl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.rd_lvl.q),

    // to register interface (read)
    .qs     (intr_enable_rd_lvl_qs)
  );

  //   F[op_done]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_op_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_op_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.op_done.q),

    // to register interface (read)
    .qs     (intr_enable_op_done_qs)
  );

  //   F[corr_err]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_corr_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_corr_err_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.corr_err.q),

    // to register interface (read)
    .qs     (intr_enable_corr_err_qs)
  );


  // R[intr_test]: V(True)
  //   F[prog_empty]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_prog_empty (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_prog_empty_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.prog_empty.qe),
    .q      (reg2hw.intr_test.prog_empty.q),
    .qs     ()
  );

  //   F[prog_lvl]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_prog_lvl (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_prog_lvl_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.prog_lvl.qe),
    .q      (reg2hw.intr_test.prog_lvl.q),
    .qs     ()
  );

  //   F[rd_full]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_rd_full (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_rd_full_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.rd_full.qe),
    .q      (reg2hw.intr_test.rd_full.q),
    .qs     ()
  );

  //   F[rd_lvl]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_rd_lvl (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_rd_lvl_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.rd_lvl.qe),
    .q      (reg2hw.intr_test.rd_lvl.q),
    .qs     ()
  );

  //   F[op_done]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_op_done (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_op_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.op_done.qe),
    .q      (reg2hw.intr_test.op_done.q),
    .qs     ()
  );

  //   F[corr_err]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_corr_err (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_corr_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.corr_err.qe),
    .q      (reg2hw.intr_test.corr_err.q),
    .qs     ()
  );


  // R[alert_test]: V(True)
  //   F[recov_err]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_recov_err (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_recov_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.alert_test.recov_err.qe),
    .q      (reg2hw.alert_test.recov_err.q),
    .qs     ()
  );

  //   F[fatal_err]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_err (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.alert_test.fatal_err.qe),
    .q      (reg2hw.alert_test.fatal_err.q),
    .qs     ()
  );


  // R[dis]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h5)
  ) u_dis (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dis_we),
    .wd     (dis_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dis.q),

    // to register interface (read)
    .qs     (dis_qs)
  );


  // R[exec]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_exec (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (exec_we),
    .wd     (exec_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.exec.q),

    // to register interface (read)
    .qs     (exec_qs)
  );


  // R[init]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1S),
    .RESVAL  (1'h0)
  ) u_init (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (init_we),
    .wd     (init_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.init.q),

    // to register interface (read)
    .qs     (init_qs)
  );


  // R[ctrl_regwen]: V(True)
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_regwen (
    .re     (ctrl_regwen_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.ctrl_regwen.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (ctrl_regwen_qs)
  );


  // R[control]: V(False)
  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_control_start (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we & ctrl_regwen_qs),
    .wd     (control_start_wd),

    // from internal hardware
    .de     (hw2reg.control.start.de),
    .d      (hw2reg.control.start.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.start.q),

    // to register interface (read)
    .qs     (control_start_qs)
  );

  //   F[op]: 5:4
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_control_op (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we & ctrl_regwen_qs),
    .wd     (control_op_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.op.q),

    // to register interface (read)
    .qs     (control_op_qs)
  );

  //   F[prog_sel]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_control_prog_sel (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we & ctrl_regwen_qs),
    .wd     (control_prog_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.prog_sel.q),

    // to register interface (read)
    .qs     (control_prog_sel_qs)
  );

  //   F[erase_sel]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_control_erase_sel (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we & ctrl_regwen_qs),
    .wd     (control_erase_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.erase_sel.q),

    // to register interface (read)
    .qs     (control_erase_sel_qs)
  );

  //   F[partition_sel]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_control_partition_sel (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we & ctrl_regwen_qs),
    .wd     (control_partition_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.partition_sel.q),

    // to register interface (read)
    .qs     (control_partition_sel_qs)
  );

  //   F[info_sel]: 10:9
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h0)
  ) u_control_info_sel (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we & ctrl_regwen_qs),
    .wd     (control_info_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.info_sel.q),

    // to register interface (read)
    .qs     (control_info_sel_qs)
  );

  //   F[num]: 27:16
  prim_subreg #(
    .DW      (12),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (12'h0)
  ) u_control_num (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we & ctrl_regwen_qs),
    .wd     (control_num_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.num.q),

    // to register interface (read)
    .qs     (control_num_qs)
  );


  // R[addr]: V(False)
  prim_subreg #(
    .DW      (20),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (20'h0)
  ) u_addr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (addr_we),
    .wd     (addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.addr.q),

    // to register interface (read)
    .qs     (addr_qs)
  );


  // R[prog_type_en]: V(False)
  //   F[normal]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_prog_type_en_normal (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prog_type_en_we),
    .wd     (prog_type_en_normal_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prog_type_en.normal.q),

    // to register interface (read)
    .qs     (prog_type_en_normal_qs)
  );

  //   F[repair]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_prog_type_en_repair (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (prog_type_en_we),
    .wd     (prog_type_en_repair_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prog_type_en.repair.q),

    // to register interface (read)
    .qs     (prog_type_en_repair_qs)
  );


  // R[erase_suspend]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_erase_suspend (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (erase_suspend_we),
    .wd     (erase_suspend_wd),

    // from internal hardware
    .de     (hw2reg.erase_suspend.de),
    .d      (hw2reg.erase_suspend.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.erase_suspend.q),

    // to register interface (read)
    .qs     (erase_suspend_qs)
  );


  // Subregister 0 of Multireg region_cfg_regwen
  // R[region_cfg_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (region_cfg_regwen_0_we),
    .wd     (region_cfg_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_0_qs)
  );


  // Subregister 1 of Multireg region_cfg_regwen
  // R[region_cfg_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (region_cfg_regwen_1_we),
    .wd     (region_cfg_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_1_qs)
  );


  // Subregister 2 of Multireg region_cfg_regwen
  // R[region_cfg_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (region_cfg_regwen_2_we),
    .wd     (region_cfg_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_2_qs)
  );


  // Subregister 3 of Multireg region_cfg_regwen
  // R[region_cfg_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (region_cfg_regwen_3_we),
    .wd     (region_cfg_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_3_qs)
  );


  // Subregister 4 of Multireg region_cfg_regwen
  // R[region_cfg_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (region_cfg_regwen_4_we),
    .wd     (region_cfg_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_4_qs)
  );


  // Subregister 5 of Multireg region_cfg_regwen
  // R[region_cfg_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (region_cfg_regwen_5_we),
    .wd     (region_cfg_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_5_qs)
  );


  // Subregister 6 of Multireg region_cfg_regwen
  // R[region_cfg_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (region_cfg_regwen_6_we),
    .wd     (region_cfg_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_6_qs)
  );


  // Subregister 7 of Multireg region_cfg_regwen
  // R[region_cfg_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_region_cfg_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (region_cfg_regwen_7_we),
    .wd     (region_cfg_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (region_cfg_regwen_7_qs)
  );


  // Subregister 0 of Multireg mp_region_cfg_shadowed
  // R[mp_region_cfg_shadowed_0]: V(False)
  //   F[en_0]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_0_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_0_re),
    .we     (mp_region_cfg_shadowed_0_we & region_cfg_regwen_0_qs),
    .wd     (mp_region_cfg_shadowed_0_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[0].en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_0_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[0].en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[0].en.err_storage)
  );

  //   F[rd_en_0]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_0_rd_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_0_re),
    .we     (mp_region_cfg_shadowed_0_we & region_cfg_regwen_0_qs),
    .wd     (mp_region_cfg_shadowed_0_rd_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[0].rd_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_0_rd_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[0].rd_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[0].rd_en.err_storage)
  );

  //   F[prog_en_0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_0_prog_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_0_re),
    .we     (mp_region_cfg_shadowed_0_we & region_cfg_regwen_0_qs),
    .wd     (mp_region_cfg_shadowed_0_prog_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[0].prog_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_0_prog_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[0].prog_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[0].prog_en.err_storage)
  );

  //   F[erase_en_0]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_0_erase_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_0_re),
    .we     (mp_region_cfg_shadowed_0_we & region_cfg_regwen_0_qs),
    .wd     (mp_region_cfg_shadowed_0_erase_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[0].erase_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_0_erase_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[0].erase_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[0].erase_en.err_storage)
  );

  //   F[scramble_en_0]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_0_scramble_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_0_re),
    .we     (mp_region_cfg_shadowed_0_we & region_cfg_regwen_0_qs),
    .wd     (mp_region_cfg_shadowed_0_scramble_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[0].scramble_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_0_scramble_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[0].scramble_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[0].scramble_en.err_storage)
  );

  //   F[ecc_en_0]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_0_ecc_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_0_re),
    .we     (mp_region_cfg_shadowed_0_we & region_cfg_regwen_0_qs),
    .wd     (mp_region_cfg_shadowed_0_ecc_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[0].ecc_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_0_ecc_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[0].ecc_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[0].ecc_en.err_storage)
  );

  //   F[he_en_0]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_0_he_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_0_re),
    .we     (mp_region_cfg_shadowed_0_we & region_cfg_regwen_0_qs),
    .wd     (mp_region_cfg_shadowed_0_he_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[0].he_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_0_he_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[0].he_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[0].he_en.err_storage)
  );

  //   F[base_0]: 16:8
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg_shadowed_0_base_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_0_re),
    .we     (mp_region_cfg_shadowed_0_we & region_cfg_regwen_0_qs),
    .wd     (mp_region_cfg_shadowed_0_base_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[0].base.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_0_base_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[0].base.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[0].base.err_storage)
  );

  //   F[size_0]: 26:17
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h0)
  ) u_mp_region_cfg_shadowed_0_size_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_0_re),
    .we     (mp_region_cfg_shadowed_0_we & region_cfg_regwen_0_qs),
    .wd     (mp_region_cfg_shadowed_0_size_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[0].size.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_0_size_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[0].size.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[0].size.err_storage)
  );


  // Subregister 1 of Multireg mp_region_cfg_shadowed
  // R[mp_region_cfg_shadowed_1]: V(False)
  //   F[en_1]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_1_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_1_re),
    .we     (mp_region_cfg_shadowed_1_we & region_cfg_regwen_1_qs),
    .wd     (mp_region_cfg_shadowed_1_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[1].en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_1_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[1].en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[1].en.err_storage)
  );

  //   F[rd_en_1]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_1_rd_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_1_re),
    .we     (mp_region_cfg_shadowed_1_we & region_cfg_regwen_1_qs),
    .wd     (mp_region_cfg_shadowed_1_rd_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[1].rd_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_1_rd_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[1].rd_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[1].rd_en.err_storage)
  );

  //   F[prog_en_1]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_1_prog_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_1_re),
    .we     (mp_region_cfg_shadowed_1_we & region_cfg_regwen_1_qs),
    .wd     (mp_region_cfg_shadowed_1_prog_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[1].prog_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_1_prog_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[1].prog_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[1].prog_en.err_storage)
  );

  //   F[erase_en_1]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_1_erase_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_1_re),
    .we     (mp_region_cfg_shadowed_1_we & region_cfg_regwen_1_qs),
    .wd     (mp_region_cfg_shadowed_1_erase_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[1].erase_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_1_erase_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[1].erase_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[1].erase_en.err_storage)
  );

  //   F[scramble_en_1]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_1_scramble_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_1_re),
    .we     (mp_region_cfg_shadowed_1_we & region_cfg_regwen_1_qs),
    .wd     (mp_region_cfg_shadowed_1_scramble_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[1].scramble_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_1_scramble_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[1].scramble_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[1].scramble_en.err_storage)
  );

  //   F[ecc_en_1]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_1_ecc_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_1_re),
    .we     (mp_region_cfg_shadowed_1_we & region_cfg_regwen_1_qs),
    .wd     (mp_region_cfg_shadowed_1_ecc_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[1].ecc_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_1_ecc_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[1].ecc_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[1].ecc_en.err_storage)
  );

  //   F[he_en_1]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_1_he_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_1_re),
    .we     (mp_region_cfg_shadowed_1_we & region_cfg_regwen_1_qs),
    .wd     (mp_region_cfg_shadowed_1_he_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[1].he_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_1_he_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[1].he_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[1].he_en.err_storage)
  );

  //   F[base_1]: 16:8
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg_shadowed_1_base_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_1_re),
    .we     (mp_region_cfg_shadowed_1_we & region_cfg_regwen_1_qs),
    .wd     (mp_region_cfg_shadowed_1_base_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[1].base.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_1_base_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[1].base.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[1].base.err_storage)
  );

  //   F[size_1]: 26:17
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h0)
  ) u_mp_region_cfg_shadowed_1_size_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_1_re),
    .we     (mp_region_cfg_shadowed_1_we & region_cfg_regwen_1_qs),
    .wd     (mp_region_cfg_shadowed_1_size_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[1].size.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_1_size_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[1].size.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[1].size.err_storage)
  );


  // Subregister 2 of Multireg mp_region_cfg_shadowed
  // R[mp_region_cfg_shadowed_2]: V(False)
  //   F[en_2]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_2_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_2_re),
    .we     (mp_region_cfg_shadowed_2_we & region_cfg_regwen_2_qs),
    .wd     (mp_region_cfg_shadowed_2_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[2].en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_2_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[2].en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[2].en.err_storage)
  );

  //   F[rd_en_2]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_2_rd_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_2_re),
    .we     (mp_region_cfg_shadowed_2_we & region_cfg_regwen_2_qs),
    .wd     (mp_region_cfg_shadowed_2_rd_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[2].rd_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_2_rd_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[2].rd_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[2].rd_en.err_storage)
  );

  //   F[prog_en_2]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_2_prog_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_2_re),
    .we     (mp_region_cfg_shadowed_2_we & region_cfg_regwen_2_qs),
    .wd     (mp_region_cfg_shadowed_2_prog_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[2].prog_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_2_prog_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[2].prog_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[2].prog_en.err_storage)
  );

  //   F[erase_en_2]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_2_erase_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_2_re),
    .we     (mp_region_cfg_shadowed_2_we & region_cfg_regwen_2_qs),
    .wd     (mp_region_cfg_shadowed_2_erase_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[2].erase_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_2_erase_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[2].erase_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[2].erase_en.err_storage)
  );

  //   F[scramble_en_2]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_2_scramble_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_2_re),
    .we     (mp_region_cfg_shadowed_2_we & region_cfg_regwen_2_qs),
    .wd     (mp_region_cfg_shadowed_2_scramble_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[2].scramble_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_2_scramble_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[2].scramble_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[2].scramble_en.err_storage)
  );

  //   F[ecc_en_2]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_2_ecc_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_2_re),
    .we     (mp_region_cfg_shadowed_2_we & region_cfg_regwen_2_qs),
    .wd     (mp_region_cfg_shadowed_2_ecc_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[2].ecc_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_2_ecc_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[2].ecc_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[2].ecc_en.err_storage)
  );

  //   F[he_en_2]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_2_he_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_2_re),
    .we     (mp_region_cfg_shadowed_2_we & region_cfg_regwen_2_qs),
    .wd     (mp_region_cfg_shadowed_2_he_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[2].he_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_2_he_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[2].he_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[2].he_en.err_storage)
  );

  //   F[base_2]: 16:8
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg_shadowed_2_base_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_2_re),
    .we     (mp_region_cfg_shadowed_2_we & region_cfg_regwen_2_qs),
    .wd     (mp_region_cfg_shadowed_2_base_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[2].base.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_2_base_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[2].base.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[2].base.err_storage)
  );

  //   F[size_2]: 26:17
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h0)
  ) u_mp_region_cfg_shadowed_2_size_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_2_re),
    .we     (mp_region_cfg_shadowed_2_we & region_cfg_regwen_2_qs),
    .wd     (mp_region_cfg_shadowed_2_size_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[2].size.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_2_size_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[2].size.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[2].size.err_storage)
  );


  // Subregister 3 of Multireg mp_region_cfg_shadowed
  // R[mp_region_cfg_shadowed_3]: V(False)
  //   F[en_3]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_3_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_3_re),
    .we     (mp_region_cfg_shadowed_3_we & region_cfg_regwen_3_qs),
    .wd     (mp_region_cfg_shadowed_3_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[3].en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_3_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[3].en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[3].en.err_storage)
  );

  //   F[rd_en_3]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_3_rd_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_3_re),
    .we     (mp_region_cfg_shadowed_3_we & region_cfg_regwen_3_qs),
    .wd     (mp_region_cfg_shadowed_3_rd_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[3].rd_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_3_rd_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[3].rd_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[3].rd_en.err_storage)
  );

  //   F[prog_en_3]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_3_prog_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_3_re),
    .we     (mp_region_cfg_shadowed_3_we & region_cfg_regwen_3_qs),
    .wd     (mp_region_cfg_shadowed_3_prog_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[3].prog_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_3_prog_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[3].prog_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[3].prog_en.err_storage)
  );

  //   F[erase_en_3]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_3_erase_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_3_re),
    .we     (mp_region_cfg_shadowed_3_we & region_cfg_regwen_3_qs),
    .wd     (mp_region_cfg_shadowed_3_erase_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[3].erase_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_3_erase_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[3].erase_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[3].erase_en.err_storage)
  );

  //   F[scramble_en_3]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_3_scramble_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_3_re),
    .we     (mp_region_cfg_shadowed_3_we & region_cfg_regwen_3_qs),
    .wd     (mp_region_cfg_shadowed_3_scramble_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[3].scramble_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_3_scramble_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[3].scramble_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[3].scramble_en.err_storage)
  );

  //   F[ecc_en_3]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_3_ecc_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_3_re),
    .we     (mp_region_cfg_shadowed_3_we & region_cfg_regwen_3_qs),
    .wd     (mp_region_cfg_shadowed_3_ecc_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[3].ecc_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_3_ecc_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[3].ecc_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[3].ecc_en.err_storage)
  );

  //   F[he_en_3]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_3_he_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_3_re),
    .we     (mp_region_cfg_shadowed_3_we & region_cfg_regwen_3_qs),
    .wd     (mp_region_cfg_shadowed_3_he_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[3].he_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_3_he_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[3].he_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[3].he_en.err_storage)
  );

  //   F[base_3]: 16:8
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg_shadowed_3_base_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_3_re),
    .we     (mp_region_cfg_shadowed_3_we & region_cfg_regwen_3_qs),
    .wd     (mp_region_cfg_shadowed_3_base_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[3].base.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_3_base_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[3].base.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[3].base.err_storage)
  );

  //   F[size_3]: 26:17
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h0)
  ) u_mp_region_cfg_shadowed_3_size_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_3_re),
    .we     (mp_region_cfg_shadowed_3_we & region_cfg_regwen_3_qs),
    .wd     (mp_region_cfg_shadowed_3_size_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[3].size.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_3_size_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[3].size.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[3].size.err_storage)
  );


  // Subregister 4 of Multireg mp_region_cfg_shadowed
  // R[mp_region_cfg_shadowed_4]: V(False)
  //   F[en_4]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_4_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_4_re),
    .we     (mp_region_cfg_shadowed_4_we & region_cfg_regwen_4_qs),
    .wd     (mp_region_cfg_shadowed_4_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[4].en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_4_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[4].en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[4].en.err_storage)
  );

  //   F[rd_en_4]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_4_rd_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_4_re),
    .we     (mp_region_cfg_shadowed_4_we & region_cfg_regwen_4_qs),
    .wd     (mp_region_cfg_shadowed_4_rd_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[4].rd_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_4_rd_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[4].rd_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[4].rd_en.err_storage)
  );

  //   F[prog_en_4]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_4_prog_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_4_re),
    .we     (mp_region_cfg_shadowed_4_we & region_cfg_regwen_4_qs),
    .wd     (mp_region_cfg_shadowed_4_prog_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[4].prog_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_4_prog_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[4].prog_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[4].prog_en.err_storage)
  );

  //   F[erase_en_4]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_4_erase_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_4_re),
    .we     (mp_region_cfg_shadowed_4_we & region_cfg_regwen_4_qs),
    .wd     (mp_region_cfg_shadowed_4_erase_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[4].erase_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_4_erase_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[4].erase_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[4].erase_en.err_storage)
  );

  //   F[scramble_en_4]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_4_scramble_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_4_re),
    .we     (mp_region_cfg_shadowed_4_we & region_cfg_regwen_4_qs),
    .wd     (mp_region_cfg_shadowed_4_scramble_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[4].scramble_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_4_scramble_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[4].scramble_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[4].scramble_en.err_storage)
  );

  //   F[ecc_en_4]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_4_ecc_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_4_re),
    .we     (mp_region_cfg_shadowed_4_we & region_cfg_regwen_4_qs),
    .wd     (mp_region_cfg_shadowed_4_ecc_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[4].ecc_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_4_ecc_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[4].ecc_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[4].ecc_en.err_storage)
  );

  //   F[he_en_4]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_4_he_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_4_re),
    .we     (mp_region_cfg_shadowed_4_we & region_cfg_regwen_4_qs),
    .wd     (mp_region_cfg_shadowed_4_he_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[4].he_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_4_he_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[4].he_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[4].he_en.err_storage)
  );

  //   F[base_4]: 16:8
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg_shadowed_4_base_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_4_re),
    .we     (mp_region_cfg_shadowed_4_we & region_cfg_regwen_4_qs),
    .wd     (mp_region_cfg_shadowed_4_base_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[4].base.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_4_base_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[4].base.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[4].base.err_storage)
  );

  //   F[size_4]: 26:17
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h0)
  ) u_mp_region_cfg_shadowed_4_size_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_4_re),
    .we     (mp_region_cfg_shadowed_4_we & region_cfg_regwen_4_qs),
    .wd     (mp_region_cfg_shadowed_4_size_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[4].size.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_4_size_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[4].size.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[4].size.err_storage)
  );


  // Subregister 5 of Multireg mp_region_cfg_shadowed
  // R[mp_region_cfg_shadowed_5]: V(False)
  //   F[en_5]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_5_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_5_re),
    .we     (mp_region_cfg_shadowed_5_we & region_cfg_regwen_5_qs),
    .wd     (mp_region_cfg_shadowed_5_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[5].en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_5_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[5].en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[5].en.err_storage)
  );

  //   F[rd_en_5]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_5_rd_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_5_re),
    .we     (mp_region_cfg_shadowed_5_we & region_cfg_regwen_5_qs),
    .wd     (mp_region_cfg_shadowed_5_rd_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[5].rd_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_5_rd_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[5].rd_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[5].rd_en.err_storage)
  );

  //   F[prog_en_5]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_5_prog_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_5_re),
    .we     (mp_region_cfg_shadowed_5_we & region_cfg_regwen_5_qs),
    .wd     (mp_region_cfg_shadowed_5_prog_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[5].prog_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_5_prog_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[5].prog_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[5].prog_en.err_storage)
  );

  //   F[erase_en_5]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_5_erase_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_5_re),
    .we     (mp_region_cfg_shadowed_5_we & region_cfg_regwen_5_qs),
    .wd     (mp_region_cfg_shadowed_5_erase_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[5].erase_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_5_erase_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[5].erase_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[5].erase_en.err_storage)
  );

  //   F[scramble_en_5]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_5_scramble_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_5_re),
    .we     (mp_region_cfg_shadowed_5_we & region_cfg_regwen_5_qs),
    .wd     (mp_region_cfg_shadowed_5_scramble_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[5].scramble_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_5_scramble_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[5].scramble_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[5].scramble_en.err_storage)
  );

  //   F[ecc_en_5]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_5_ecc_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_5_re),
    .we     (mp_region_cfg_shadowed_5_we & region_cfg_regwen_5_qs),
    .wd     (mp_region_cfg_shadowed_5_ecc_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[5].ecc_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_5_ecc_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[5].ecc_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[5].ecc_en.err_storage)
  );

  //   F[he_en_5]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_5_he_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_5_re),
    .we     (mp_region_cfg_shadowed_5_we & region_cfg_regwen_5_qs),
    .wd     (mp_region_cfg_shadowed_5_he_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[5].he_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_5_he_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[5].he_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[5].he_en.err_storage)
  );

  //   F[base_5]: 16:8
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg_shadowed_5_base_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_5_re),
    .we     (mp_region_cfg_shadowed_5_we & region_cfg_regwen_5_qs),
    .wd     (mp_region_cfg_shadowed_5_base_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[5].base.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_5_base_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[5].base.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[5].base.err_storage)
  );

  //   F[size_5]: 26:17
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h0)
  ) u_mp_region_cfg_shadowed_5_size_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_5_re),
    .we     (mp_region_cfg_shadowed_5_we & region_cfg_regwen_5_qs),
    .wd     (mp_region_cfg_shadowed_5_size_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[5].size.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_5_size_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[5].size.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[5].size.err_storage)
  );


  // Subregister 6 of Multireg mp_region_cfg_shadowed
  // R[mp_region_cfg_shadowed_6]: V(False)
  //   F[en_6]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_6_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_6_re),
    .we     (mp_region_cfg_shadowed_6_we & region_cfg_regwen_6_qs),
    .wd     (mp_region_cfg_shadowed_6_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[6].en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_6_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[6].en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[6].en.err_storage)
  );

  //   F[rd_en_6]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_6_rd_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_6_re),
    .we     (mp_region_cfg_shadowed_6_we & region_cfg_regwen_6_qs),
    .wd     (mp_region_cfg_shadowed_6_rd_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[6].rd_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_6_rd_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[6].rd_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[6].rd_en.err_storage)
  );

  //   F[prog_en_6]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_6_prog_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_6_re),
    .we     (mp_region_cfg_shadowed_6_we & region_cfg_regwen_6_qs),
    .wd     (mp_region_cfg_shadowed_6_prog_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[6].prog_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_6_prog_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[6].prog_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[6].prog_en.err_storage)
  );

  //   F[erase_en_6]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_6_erase_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_6_re),
    .we     (mp_region_cfg_shadowed_6_we & region_cfg_regwen_6_qs),
    .wd     (mp_region_cfg_shadowed_6_erase_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[6].erase_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_6_erase_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[6].erase_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[6].erase_en.err_storage)
  );

  //   F[scramble_en_6]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_6_scramble_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_6_re),
    .we     (mp_region_cfg_shadowed_6_we & region_cfg_regwen_6_qs),
    .wd     (mp_region_cfg_shadowed_6_scramble_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[6].scramble_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_6_scramble_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[6].scramble_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[6].scramble_en.err_storage)
  );

  //   F[ecc_en_6]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_6_ecc_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_6_re),
    .we     (mp_region_cfg_shadowed_6_we & region_cfg_regwen_6_qs),
    .wd     (mp_region_cfg_shadowed_6_ecc_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[6].ecc_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_6_ecc_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[6].ecc_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[6].ecc_en.err_storage)
  );

  //   F[he_en_6]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_6_he_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_6_re),
    .we     (mp_region_cfg_shadowed_6_we & region_cfg_regwen_6_qs),
    .wd     (mp_region_cfg_shadowed_6_he_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[6].he_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_6_he_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[6].he_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[6].he_en.err_storage)
  );

  //   F[base_6]: 16:8
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg_shadowed_6_base_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_6_re),
    .we     (mp_region_cfg_shadowed_6_we & region_cfg_regwen_6_qs),
    .wd     (mp_region_cfg_shadowed_6_base_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[6].base.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_6_base_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[6].base.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[6].base.err_storage)
  );

  //   F[size_6]: 26:17
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h0)
  ) u_mp_region_cfg_shadowed_6_size_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_6_re),
    .we     (mp_region_cfg_shadowed_6_we & region_cfg_regwen_6_qs),
    .wd     (mp_region_cfg_shadowed_6_size_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[6].size.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_6_size_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[6].size.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[6].size.err_storage)
  );


  // Subregister 7 of Multireg mp_region_cfg_shadowed
  // R[mp_region_cfg_shadowed_7]: V(False)
  //   F[en_7]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_7_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_7_re),
    .we     (mp_region_cfg_shadowed_7_we & region_cfg_regwen_7_qs),
    .wd     (mp_region_cfg_shadowed_7_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[7].en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_7_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[7].en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[7].en.err_storage)
  );

  //   F[rd_en_7]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_7_rd_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_7_re),
    .we     (mp_region_cfg_shadowed_7_we & region_cfg_regwen_7_qs),
    .wd     (mp_region_cfg_shadowed_7_rd_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[7].rd_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_7_rd_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[7].rd_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[7].rd_en.err_storage)
  );

  //   F[prog_en_7]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_7_prog_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_7_re),
    .we     (mp_region_cfg_shadowed_7_we & region_cfg_regwen_7_qs),
    .wd     (mp_region_cfg_shadowed_7_prog_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[7].prog_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_7_prog_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[7].prog_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[7].prog_en.err_storage)
  );

  //   F[erase_en_7]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_7_erase_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_7_re),
    .we     (mp_region_cfg_shadowed_7_we & region_cfg_regwen_7_qs),
    .wd     (mp_region_cfg_shadowed_7_erase_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[7].erase_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_7_erase_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[7].erase_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[7].erase_en.err_storage)
  );

  //   F[scramble_en_7]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_7_scramble_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_7_re),
    .we     (mp_region_cfg_shadowed_7_we & region_cfg_regwen_7_qs),
    .wd     (mp_region_cfg_shadowed_7_scramble_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[7].scramble_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_7_scramble_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[7].scramble_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[7].scramble_en.err_storage)
  );

  //   F[ecc_en_7]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_7_ecc_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_7_re),
    .we     (mp_region_cfg_shadowed_7_we & region_cfg_regwen_7_qs),
    .wd     (mp_region_cfg_shadowed_7_ecc_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[7].ecc_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_7_ecc_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[7].ecc_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[7].ecc_en.err_storage)
  );

  //   F[he_en_7]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_region_cfg_shadowed_7_he_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_7_re),
    .we     (mp_region_cfg_shadowed_7_we & region_cfg_regwen_7_qs),
    .wd     (mp_region_cfg_shadowed_7_he_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[7].he_en.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_7_he_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[7].he_en.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[7].he_en.err_storage)
  );

  //   F[base_7]: 16:8
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'h0)
  ) u_mp_region_cfg_shadowed_7_base_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_7_re),
    .we     (mp_region_cfg_shadowed_7_we & region_cfg_regwen_7_qs),
    .wd     (mp_region_cfg_shadowed_7_base_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[7].base.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_7_base_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[7].base.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[7].base.err_storage)
  );

  //   F[size_7]: 26:17
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h0)
  ) u_mp_region_cfg_shadowed_7_size_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_region_cfg_shadowed_7_re),
    .we     (mp_region_cfg_shadowed_7_we & region_cfg_regwen_7_qs),
    .wd     (mp_region_cfg_shadowed_7_size_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_region_cfg_shadowed[7].size.q),

    // to register interface (read)
    .qs     (mp_region_cfg_shadowed_7_size_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_region_cfg_shadowed[7].size.err_update),
    .err_storage (reg2hw.mp_region_cfg_shadowed[7].size.err_storage)
  );


  // R[default_region_shadowed]: V(False)
  //   F[rd_en]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_default_region_shadowed_rd_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (default_region_shadowed_re),
    .we     (default_region_shadowed_we),
    .wd     (default_region_shadowed_rd_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.default_region_shadowed.rd_en.q),

    // to register interface (read)
    .qs     (default_region_shadowed_rd_en_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.default_region_shadowed.rd_en.err_update),
    .err_storage (reg2hw.default_region_shadowed.rd_en.err_storage)
  );

  //   F[prog_en]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_default_region_shadowed_prog_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (default_region_shadowed_re),
    .we     (default_region_shadowed_we),
    .wd     (default_region_shadowed_prog_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.default_region_shadowed.prog_en.q),

    // to register interface (read)
    .qs     (default_region_shadowed_prog_en_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.default_region_shadowed.prog_en.err_update),
    .err_storage (reg2hw.default_region_shadowed.prog_en.err_storage)
  );

  //   F[erase_en]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_default_region_shadowed_erase_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (default_region_shadowed_re),
    .we     (default_region_shadowed_we),
    .wd     (default_region_shadowed_erase_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.default_region_shadowed.erase_en.q),

    // to register interface (read)
    .qs     (default_region_shadowed_erase_en_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.default_region_shadowed.erase_en.err_update),
    .err_storage (reg2hw.default_region_shadowed.erase_en.err_storage)
  );

  //   F[scramble_en]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_default_region_shadowed_scramble_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (default_region_shadowed_re),
    .we     (default_region_shadowed_we),
    .wd     (default_region_shadowed_scramble_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.default_region_shadowed.scramble_en.q),

    // to register interface (read)
    .qs     (default_region_shadowed_scramble_en_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.default_region_shadowed.scramble_en.err_update),
    .err_storage (reg2hw.default_region_shadowed.scramble_en.err_storage)
  );

  //   F[ecc_en]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_default_region_shadowed_ecc_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (default_region_shadowed_re),
    .we     (default_region_shadowed_we),
    .wd     (default_region_shadowed_ecc_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.default_region_shadowed.ecc_en.q),

    // to register interface (read)
    .qs     (default_region_shadowed_ecc_en_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.default_region_shadowed.ecc_en.err_update),
    .err_storage (reg2hw.default_region_shadowed.ecc_en.err_storage)
  );

  //   F[he_en]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_default_region_shadowed_he_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (default_region_shadowed_re),
    .we     (default_region_shadowed_we),
    .wd     (default_region_shadowed_he_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.default_region_shadowed.he_en.q),

    // to register interface (read)
    .qs     (default_region_shadowed_he_en_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.default_region_shadowed.he_en.err_update),
    .err_storage (reg2hw.default_region_shadowed.he_en.err_storage)
  );


  // Subregister 0 of Multireg bank0_info0_regwen
  // R[bank0_info0_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info0_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info0_regwen_0_we),
    .wd     (bank0_info0_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info0_regwen_0_qs)
  );


  // Subregister 1 of Multireg bank0_info0_regwen
  // R[bank0_info0_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info0_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info0_regwen_1_we),
    .wd     (bank0_info0_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info0_regwen_1_qs)
  );


  // Subregister 2 of Multireg bank0_info0_regwen
  // R[bank0_info0_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info0_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info0_regwen_2_we),
    .wd     (bank0_info0_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info0_regwen_2_qs)
  );


  // Subregister 3 of Multireg bank0_info0_regwen
  // R[bank0_info0_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info0_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info0_regwen_3_we),
    .wd     (bank0_info0_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info0_regwen_3_qs)
  );


  // Subregister 4 of Multireg bank0_info0_regwen
  // R[bank0_info0_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info0_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info0_regwen_4_we),
    .wd     (bank0_info0_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info0_regwen_4_qs)
  );


  // Subregister 5 of Multireg bank0_info0_regwen
  // R[bank0_info0_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info0_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info0_regwen_5_we),
    .wd     (bank0_info0_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info0_regwen_5_qs)
  );


  // Subregister 6 of Multireg bank0_info0_regwen
  // R[bank0_info0_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info0_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info0_regwen_6_we),
    .wd     (bank0_info0_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info0_regwen_6_qs)
  );


  // Subregister 7 of Multireg bank0_info0_regwen
  // R[bank0_info0_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info0_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info0_regwen_7_we),
    .wd     (bank0_info0_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info0_regwen_7_qs)
  );


  // Subregister 8 of Multireg bank0_info0_regwen
  // R[bank0_info0_regwen_8]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info0_regwen_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info0_regwen_8_we),
    .wd     (bank0_info0_regwen_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info0_regwen_8_qs)
  );


  // Subregister 9 of Multireg bank0_info0_regwen
  // R[bank0_info0_regwen_9]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info0_regwen_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info0_regwen_9_we),
    .wd     (bank0_info0_regwen_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info0_regwen_9_qs)
  );


  // Subregister 0 of Multireg bank0_info0_page_cfg_shadowed
  // R[bank0_info0_page_cfg_shadowed_0]: V(False)
  //   F[en_0]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_0_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_0_re),
    .we     (bank0_info0_page_cfg_shadowed_0_we & bank0_info0_regwen_0_qs),
    .wd     (bank0_info0_page_cfg_shadowed_0_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[0].en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_0_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[0].en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[0].en.err_storage)
  );

  //   F[rd_en_0]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_0_rd_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_0_re),
    .we     (bank0_info0_page_cfg_shadowed_0_we & bank0_info0_regwen_0_qs),
    .wd     (bank0_info0_page_cfg_shadowed_0_rd_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[0].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_0_rd_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[0].rd_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[0].rd_en.err_storage)
  );

  //   F[prog_en_0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_0_prog_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_0_re),
    .we     (bank0_info0_page_cfg_shadowed_0_we & bank0_info0_regwen_0_qs),
    .wd     (bank0_info0_page_cfg_shadowed_0_prog_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[0].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_0_prog_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[0].prog_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[0].prog_en.err_storage)
  );

  //   F[erase_en_0]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_0_erase_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_0_re),
    .we     (bank0_info0_page_cfg_shadowed_0_we & bank0_info0_regwen_0_qs),
    .wd     (bank0_info0_page_cfg_shadowed_0_erase_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[0].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_0_erase_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[0].erase_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[0].erase_en.err_storage)
  );

  //   F[scramble_en_0]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_0_scramble_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_0_re),
    .we     (bank0_info0_page_cfg_shadowed_0_we & bank0_info0_regwen_0_qs),
    .wd     (bank0_info0_page_cfg_shadowed_0_scramble_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[0].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_0_scramble_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[0].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[0].scramble_en.err_storage)
  );

  //   F[ecc_en_0]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_0_ecc_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_0_re),
    .we     (bank0_info0_page_cfg_shadowed_0_we & bank0_info0_regwen_0_qs),
    .wd     (bank0_info0_page_cfg_shadowed_0_ecc_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[0].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_0_ecc_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[0].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[0].ecc_en.err_storage)
  );

  //   F[he_en_0]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_0_he_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_0_re),
    .we     (bank0_info0_page_cfg_shadowed_0_we & bank0_info0_regwen_0_qs),
    .wd     (bank0_info0_page_cfg_shadowed_0_he_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[0].he_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_0_he_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[0].he_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[0].he_en.err_storage)
  );


  // Subregister 1 of Multireg bank0_info0_page_cfg_shadowed
  // R[bank0_info0_page_cfg_shadowed_1]: V(False)
  //   F[en_1]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_1_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_1_re),
    .we     (bank0_info0_page_cfg_shadowed_1_we & bank0_info0_regwen_1_qs),
    .wd     (bank0_info0_page_cfg_shadowed_1_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[1].en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_1_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[1].en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[1].en.err_storage)
  );

  //   F[rd_en_1]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_1_rd_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_1_re),
    .we     (bank0_info0_page_cfg_shadowed_1_we & bank0_info0_regwen_1_qs),
    .wd     (bank0_info0_page_cfg_shadowed_1_rd_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[1].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_1_rd_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[1].rd_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[1].rd_en.err_storage)
  );

  //   F[prog_en_1]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_1_prog_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_1_re),
    .we     (bank0_info0_page_cfg_shadowed_1_we & bank0_info0_regwen_1_qs),
    .wd     (bank0_info0_page_cfg_shadowed_1_prog_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[1].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_1_prog_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[1].prog_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[1].prog_en.err_storage)
  );

  //   F[erase_en_1]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_1_erase_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_1_re),
    .we     (bank0_info0_page_cfg_shadowed_1_we & bank0_info0_regwen_1_qs),
    .wd     (bank0_info0_page_cfg_shadowed_1_erase_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[1].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_1_erase_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[1].erase_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[1].erase_en.err_storage)
  );

  //   F[scramble_en_1]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_1_scramble_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_1_re),
    .we     (bank0_info0_page_cfg_shadowed_1_we & bank0_info0_regwen_1_qs),
    .wd     (bank0_info0_page_cfg_shadowed_1_scramble_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[1].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_1_scramble_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[1].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[1].scramble_en.err_storage)
  );

  //   F[ecc_en_1]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_1_ecc_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_1_re),
    .we     (bank0_info0_page_cfg_shadowed_1_we & bank0_info0_regwen_1_qs),
    .wd     (bank0_info0_page_cfg_shadowed_1_ecc_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[1].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_1_ecc_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[1].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[1].ecc_en.err_storage)
  );

  //   F[he_en_1]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_1_he_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_1_re),
    .we     (bank0_info0_page_cfg_shadowed_1_we & bank0_info0_regwen_1_qs),
    .wd     (bank0_info0_page_cfg_shadowed_1_he_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[1].he_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_1_he_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[1].he_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[1].he_en.err_storage)
  );


  // Subregister 2 of Multireg bank0_info0_page_cfg_shadowed
  // R[bank0_info0_page_cfg_shadowed_2]: V(False)
  //   F[en_2]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_2_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_2_re),
    .we     (bank0_info0_page_cfg_shadowed_2_we & bank0_info0_regwen_2_qs),
    .wd     (bank0_info0_page_cfg_shadowed_2_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[2].en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_2_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[2].en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[2].en.err_storage)
  );

  //   F[rd_en_2]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_2_rd_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_2_re),
    .we     (bank0_info0_page_cfg_shadowed_2_we & bank0_info0_regwen_2_qs),
    .wd     (bank0_info0_page_cfg_shadowed_2_rd_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[2].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_2_rd_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[2].rd_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[2].rd_en.err_storage)
  );

  //   F[prog_en_2]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_2_prog_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_2_re),
    .we     (bank0_info0_page_cfg_shadowed_2_we & bank0_info0_regwen_2_qs),
    .wd     (bank0_info0_page_cfg_shadowed_2_prog_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[2].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_2_prog_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[2].prog_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[2].prog_en.err_storage)
  );

  //   F[erase_en_2]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_2_erase_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_2_re),
    .we     (bank0_info0_page_cfg_shadowed_2_we & bank0_info0_regwen_2_qs),
    .wd     (bank0_info0_page_cfg_shadowed_2_erase_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[2].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_2_erase_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[2].erase_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[2].erase_en.err_storage)
  );

  //   F[scramble_en_2]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_2_scramble_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_2_re),
    .we     (bank0_info0_page_cfg_shadowed_2_we & bank0_info0_regwen_2_qs),
    .wd     (bank0_info0_page_cfg_shadowed_2_scramble_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[2].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_2_scramble_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[2].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[2].scramble_en.err_storage)
  );

  //   F[ecc_en_2]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_2_ecc_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_2_re),
    .we     (bank0_info0_page_cfg_shadowed_2_we & bank0_info0_regwen_2_qs),
    .wd     (bank0_info0_page_cfg_shadowed_2_ecc_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[2].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_2_ecc_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[2].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[2].ecc_en.err_storage)
  );

  //   F[he_en_2]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_2_he_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_2_re),
    .we     (bank0_info0_page_cfg_shadowed_2_we & bank0_info0_regwen_2_qs),
    .wd     (bank0_info0_page_cfg_shadowed_2_he_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[2].he_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_2_he_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[2].he_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[2].he_en.err_storage)
  );


  // Subregister 3 of Multireg bank0_info0_page_cfg_shadowed
  // R[bank0_info0_page_cfg_shadowed_3]: V(False)
  //   F[en_3]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_3_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_3_re),
    .we     (bank0_info0_page_cfg_shadowed_3_we & bank0_info0_regwen_3_qs),
    .wd     (bank0_info0_page_cfg_shadowed_3_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[3].en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_3_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[3].en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[3].en.err_storage)
  );

  //   F[rd_en_3]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_3_rd_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_3_re),
    .we     (bank0_info0_page_cfg_shadowed_3_we & bank0_info0_regwen_3_qs),
    .wd     (bank0_info0_page_cfg_shadowed_3_rd_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[3].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_3_rd_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[3].rd_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[3].rd_en.err_storage)
  );

  //   F[prog_en_3]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_3_prog_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_3_re),
    .we     (bank0_info0_page_cfg_shadowed_3_we & bank0_info0_regwen_3_qs),
    .wd     (bank0_info0_page_cfg_shadowed_3_prog_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[3].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_3_prog_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[3].prog_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[3].prog_en.err_storage)
  );

  //   F[erase_en_3]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_3_erase_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_3_re),
    .we     (bank0_info0_page_cfg_shadowed_3_we & bank0_info0_regwen_3_qs),
    .wd     (bank0_info0_page_cfg_shadowed_3_erase_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[3].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_3_erase_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[3].erase_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[3].erase_en.err_storage)
  );

  //   F[scramble_en_3]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_3_scramble_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_3_re),
    .we     (bank0_info0_page_cfg_shadowed_3_we & bank0_info0_regwen_3_qs),
    .wd     (bank0_info0_page_cfg_shadowed_3_scramble_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[3].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_3_scramble_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[3].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[3].scramble_en.err_storage)
  );

  //   F[ecc_en_3]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_3_ecc_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_3_re),
    .we     (bank0_info0_page_cfg_shadowed_3_we & bank0_info0_regwen_3_qs),
    .wd     (bank0_info0_page_cfg_shadowed_3_ecc_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[3].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_3_ecc_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[3].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[3].ecc_en.err_storage)
  );

  //   F[he_en_3]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_3_he_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_3_re),
    .we     (bank0_info0_page_cfg_shadowed_3_we & bank0_info0_regwen_3_qs),
    .wd     (bank0_info0_page_cfg_shadowed_3_he_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[3].he_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_3_he_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[3].he_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[3].he_en.err_storage)
  );


  // Subregister 4 of Multireg bank0_info0_page_cfg_shadowed
  // R[bank0_info0_page_cfg_shadowed_4]: V(False)
  //   F[en_4]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_4_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_4_re),
    .we     (bank0_info0_page_cfg_shadowed_4_we & bank0_info0_regwen_4_qs),
    .wd     (bank0_info0_page_cfg_shadowed_4_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[4].en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_4_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[4].en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[4].en.err_storage)
  );

  //   F[rd_en_4]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_4_rd_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_4_re),
    .we     (bank0_info0_page_cfg_shadowed_4_we & bank0_info0_regwen_4_qs),
    .wd     (bank0_info0_page_cfg_shadowed_4_rd_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[4].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_4_rd_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[4].rd_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[4].rd_en.err_storage)
  );

  //   F[prog_en_4]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_4_prog_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_4_re),
    .we     (bank0_info0_page_cfg_shadowed_4_we & bank0_info0_regwen_4_qs),
    .wd     (bank0_info0_page_cfg_shadowed_4_prog_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[4].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_4_prog_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[4].prog_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[4].prog_en.err_storage)
  );

  //   F[erase_en_4]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_4_erase_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_4_re),
    .we     (bank0_info0_page_cfg_shadowed_4_we & bank0_info0_regwen_4_qs),
    .wd     (bank0_info0_page_cfg_shadowed_4_erase_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[4].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_4_erase_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[4].erase_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[4].erase_en.err_storage)
  );

  //   F[scramble_en_4]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_4_scramble_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_4_re),
    .we     (bank0_info0_page_cfg_shadowed_4_we & bank0_info0_regwen_4_qs),
    .wd     (bank0_info0_page_cfg_shadowed_4_scramble_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[4].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_4_scramble_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[4].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[4].scramble_en.err_storage)
  );

  //   F[ecc_en_4]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_4_ecc_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_4_re),
    .we     (bank0_info0_page_cfg_shadowed_4_we & bank0_info0_regwen_4_qs),
    .wd     (bank0_info0_page_cfg_shadowed_4_ecc_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[4].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_4_ecc_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[4].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[4].ecc_en.err_storage)
  );

  //   F[he_en_4]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_4_he_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_4_re),
    .we     (bank0_info0_page_cfg_shadowed_4_we & bank0_info0_regwen_4_qs),
    .wd     (bank0_info0_page_cfg_shadowed_4_he_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[4].he_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_4_he_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[4].he_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[4].he_en.err_storage)
  );


  // Subregister 5 of Multireg bank0_info0_page_cfg_shadowed
  // R[bank0_info0_page_cfg_shadowed_5]: V(False)
  //   F[en_5]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_5_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_5_re),
    .we     (bank0_info0_page_cfg_shadowed_5_we & bank0_info0_regwen_5_qs),
    .wd     (bank0_info0_page_cfg_shadowed_5_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[5].en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_5_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[5].en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[5].en.err_storage)
  );

  //   F[rd_en_5]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_5_rd_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_5_re),
    .we     (bank0_info0_page_cfg_shadowed_5_we & bank0_info0_regwen_5_qs),
    .wd     (bank0_info0_page_cfg_shadowed_5_rd_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[5].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_5_rd_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[5].rd_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[5].rd_en.err_storage)
  );

  //   F[prog_en_5]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_5_prog_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_5_re),
    .we     (bank0_info0_page_cfg_shadowed_5_we & bank0_info0_regwen_5_qs),
    .wd     (bank0_info0_page_cfg_shadowed_5_prog_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[5].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_5_prog_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[5].prog_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[5].prog_en.err_storage)
  );

  //   F[erase_en_5]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_5_erase_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_5_re),
    .we     (bank0_info0_page_cfg_shadowed_5_we & bank0_info0_regwen_5_qs),
    .wd     (bank0_info0_page_cfg_shadowed_5_erase_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[5].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_5_erase_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[5].erase_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[5].erase_en.err_storage)
  );

  //   F[scramble_en_5]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_5_scramble_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_5_re),
    .we     (bank0_info0_page_cfg_shadowed_5_we & bank0_info0_regwen_5_qs),
    .wd     (bank0_info0_page_cfg_shadowed_5_scramble_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[5].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_5_scramble_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[5].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[5].scramble_en.err_storage)
  );

  //   F[ecc_en_5]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_5_ecc_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_5_re),
    .we     (bank0_info0_page_cfg_shadowed_5_we & bank0_info0_regwen_5_qs),
    .wd     (bank0_info0_page_cfg_shadowed_5_ecc_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[5].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_5_ecc_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[5].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[5].ecc_en.err_storage)
  );

  //   F[he_en_5]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_5_he_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_5_re),
    .we     (bank0_info0_page_cfg_shadowed_5_we & bank0_info0_regwen_5_qs),
    .wd     (bank0_info0_page_cfg_shadowed_5_he_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[5].he_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_5_he_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[5].he_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[5].he_en.err_storage)
  );


  // Subregister 6 of Multireg bank0_info0_page_cfg_shadowed
  // R[bank0_info0_page_cfg_shadowed_6]: V(False)
  //   F[en_6]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_6_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_6_re),
    .we     (bank0_info0_page_cfg_shadowed_6_we & bank0_info0_regwen_6_qs),
    .wd     (bank0_info0_page_cfg_shadowed_6_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[6].en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_6_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[6].en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[6].en.err_storage)
  );

  //   F[rd_en_6]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_6_rd_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_6_re),
    .we     (bank0_info0_page_cfg_shadowed_6_we & bank0_info0_regwen_6_qs),
    .wd     (bank0_info0_page_cfg_shadowed_6_rd_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[6].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_6_rd_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[6].rd_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[6].rd_en.err_storage)
  );

  //   F[prog_en_6]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_6_prog_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_6_re),
    .we     (bank0_info0_page_cfg_shadowed_6_we & bank0_info0_regwen_6_qs),
    .wd     (bank0_info0_page_cfg_shadowed_6_prog_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[6].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_6_prog_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[6].prog_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[6].prog_en.err_storage)
  );

  //   F[erase_en_6]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_6_erase_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_6_re),
    .we     (bank0_info0_page_cfg_shadowed_6_we & bank0_info0_regwen_6_qs),
    .wd     (bank0_info0_page_cfg_shadowed_6_erase_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[6].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_6_erase_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[6].erase_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[6].erase_en.err_storage)
  );

  //   F[scramble_en_6]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_6_scramble_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_6_re),
    .we     (bank0_info0_page_cfg_shadowed_6_we & bank0_info0_regwen_6_qs),
    .wd     (bank0_info0_page_cfg_shadowed_6_scramble_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[6].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_6_scramble_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[6].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[6].scramble_en.err_storage)
  );

  //   F[ecc_en_6]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_6_ecc_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_6_re),
    .we     (bank0_info0_page_cfg_shadowed_6_we & bank0_info0_regwen_6_qs),
    .wd     (bank0_info0_page_cfg_shadowed_6_ecc_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[6].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_6_ecc_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[6].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[6].ecc_en.err_storage)
  );

  //   F[he_en_6]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_6_he_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_6_re),
    .we     (bank0_info0_page_cfg_shadowed_6_we & bank0_info0_regwen_6_qs),
    .wd     (bank0_info0_page_cfg_shadowed_6_he_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[6].he_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_6_he_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[6].he_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[6].he_en.err_storage)
  );


  // Subregister 7 of Multireg bank0_info0_page_cfg_shadowed
  // R[bank0_info0_page_cfg_shadowed_7]: V(False)
  //   F[en_7]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_7_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_7_re),
    .we     (bank0_info0_page_cfg_shadowed_7_we & bank0_info0_regwen_7_qs),
    .wd     (bank0_info0_page_cfg_shadowed_7_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[7].en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_7_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[7].en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[7].en.err_storage)
  );

  //   F[rd_en_7]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_7_rd_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_7_re),
    .we     (bank0_info0_page_cfg_shadowed_7_we & bank0_info0_regwen_7_qs),
    .wd     (bank0_info0_page_cfg_shadowed_7_rd_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[7].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_7_rd_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[7].rd_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[7].rd_en.err_storage)
  );

  //   F[prog_en_7]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_7_prog_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_7_re),
    .we     (bank0_info0_page_cfg_shadowed_7_we & bank0_info0_regwen_7_qs),
    .wd     (bank0_info0_page_cfg_shadowed_7_prog_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[7].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_7_prog_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[7].prog_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[7].prog_en.err_storage)
  );

  //   F[erase_en_7]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_7_erase_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_7_re),
    .we     (bank0_info0_page_cfg_shadowed_7_we & bank0_info0_regwen_7_qs),
    .wd     (bank0_info0_page_cfg_shadowed_7_erase_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[7].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_7_erase_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[7].erase_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[7].erase_en.err_storage)
  );

  //   F[scramble_en_7]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_7_scramble_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_7_re),
    .we     (bank0_info0_page_cfg_shadowed_7_we & bank0_info0_regwen_7_qs),
    .wd     (bank0_info0_page_cfg_shadowed_7_scramble_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[7].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_7_scramble_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[7].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[7].scramble_en.err_storage)
  );

  //   F[ecc_en_7]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_7_ecc_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_7_re),
    .we     (bank0_info0_page_cfg_shadowed_7_we & bank0_info0_regwen_7_qs),
    .wd     (bank0_info0_page_cfg_shadowed_7_ecc_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[7].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_7_ecc_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[7].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[7].ecc_en.err_storage)
  );

  //   F[he_en_7]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_7_he_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_7_re),
    .we     (bank0_info0_page_cfg_shadowed_7_we & bank0_info0_regwen_7_qs),
    .wd     (bank0_info0_page_cfg_shadowed_7_he_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[7].he_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_7_he_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[7].he_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[7].he_en.err_storage)
  );


  // Subregister 8 of Multireg bank0_info0_page_cfg_shadowed
  // R[bank0_info0_page_cfg_shadowed_8]: V(False)
  //   F[en_8]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_8_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_8_re),
    .we     (bank0_info0_page_cfg_shadowed_8_we & bank0_info0_regwen_8_qs),
    .wd     (bank0_info0_page_cfg_shadowed_8_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[8].en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_8_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[8].en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[8].en.err_storage)
  );

  //   F[rd_en_8]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_8_rd_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_8_re),
    .we     (bank0_info0_page_cfg_shadowed_8_we & bank0_info0_regwen_8_qs),
    .wd     (bank0_info0_page_cfg_shadowed_8_rd_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[8].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_8_rd_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[8].rd_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[8].rd_en.err_storage)
  );

  //   F[prog_en_8]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_8_prog_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_8_re),
    .we     (bank0_info0_page_cfg_shadowed_8_we & bank0_info0_regwen_8_qs),
    .wd     (bank0_info0_page_cfg_shadowed_8_prog_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[8].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_8_prog_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[8].prog_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[8].prog_en.err_storage)
  );

  //   F[erase_en_8]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_8_erase_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_8_re),
    .we     (bank0_info0_page_cfg_shadowed_8_we & bank0_info0_regwen_8_qs),
    .wd     (bank0_info0_page_cfg_shadowed_8_erase_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[8].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_8_erase_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[8].erase_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[8].erase_en.err_storage)
  );

  //   F[scramble_en_8]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_8_scramble_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_8_re),
    .we     (bank0_info0_page_cfg_shadowed_8_we & bank0_info0_regwen_8_qs),
    .wd     (bank0_info0_page_cfg_shadowed_8_scramble_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[8].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_8_scramble_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[8].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[8].scramble_en.err_storage)
  );

  //   F[ecc_en_8]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_8_ecc_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_8_re),
    .we     (bank0_info0_page_cfg_shadowed_8_we & bank0_info0_regwen_8_qs),
    .wd     (bank0_info0_page_cfg_shadowed_8_ecc_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[8].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_8_ecc_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[8].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[8].ecc_en.err_storage)
  );

  //   F[he_en_8]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_8_he_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_8_re),
    .we     (bank0_info0_page_cfg_shadowed_8_we & bank0_info0_regwen_8_qs),
    .wd     (bank0_info0_page_cfg_shadowed_8_he_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[8].he_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_8_he_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[8].he_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[8].he_en.err_storage)
  );


  // Subregister 9 of Multireg bank0_info0_page_cfg_shadowed
  // R[bank0_info0_page_cfg_shadowed_9]: V(False)
  //   F[en_9]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_9_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_9_re),
    .we     (bank0_info0_page_cfg_shadowed_9_we & bank0_info0_regwen_9_qs),
    .wd     (bank0_info0_page_cfg_shadowed_9_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[9].en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_9_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[9].en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[9].en.err_storage)
  );

  //   F[rd_en_9]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_9_rd_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_9_re),
    .we     (bank0_info0_page_cfg_shadowed_9_we & bank0_info0_regwen_9_qs),
    .wd     (bank0_info0_page_cfg_shadowed_9_rd_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[9].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_9_rd_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[9].rd_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[9].rd_en.err_storage)
  );

  //   F[prog_en_9]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_9_prog_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_9_re),
    .we     (bank0_info0_page_cfg_shadowed_9_we & bank0_info0_regwen_9_qs),
    .wd     (bank0_info0_page_cfg_shadowed_9_prog_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[9].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_9_prog_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[9].prog_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[9].prog_en.err_storage)
  );

  //   F[erase_en_9]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_9_erase_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_9_re),
    .we     (bank0_info0_page_cfg_shadowed_9_we & bank0_info0_regwen_9_qs),
    .wd     (bank0_info0_page_cfg_shadowed_9_erase_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[9].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_9_erase_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[9].erase_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[9].erase_en.err_storage)
  );

  //   F[scramble_en_9]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_9_scramble_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_9_re),
    .we     (bank0_info0_page_cfg_shadowed_9_we & bank0_info0_regwen_9_qs),
    .wd     (bank0_info0_page_cfg_shadowed_9_scramble_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[9].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_9_scramble_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[9].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[9].scramble_en.err_storage)
  );

  //   F[ecc_en_9]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_9_ecc_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_9_re),
    .we     (bank0_info0_page_cfg_shadowed_9_we & bank0_info0_regwen_9_qs),
    .wd     (bank0_info0_page_cfg_shadowed_9_ecc_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[9].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_9_ecc_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[9].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[9].ecc_en.err_storage)
  );

  //   F[he_en_9]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info0_page_cfg_shadowed_9_he_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info0_page_cfg_shadowed_9_re),
    .we     (bank0_info0_page_cfg_shadowed_9_we & bank0_info0_regwen_9_qs),
    .wd     (bank0_info0_page_cfg_shadowed_9_he_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info0_page_cfg_shadowed[9].he_en.q),

    // to register interface (read)
    .qs     (bank0_info0_page_cfg_shadowed_9_he_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info0_page_cfg_shadowed[9].he_en.err_update),
    .err_storage (reg2hw.bank0_info0_page_cfg_shadowed[9].he_en.err_storage)
  );


  // Subregister 0 of Multireg bank0_info1_regwen
  // R[bank0_info1_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info1_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info1_regwen_we),
    .wd     (bank0_info1_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info1_regwen_qs)
  );


  // Subregister 0 of Multireg bank0_info1_page_cfg_shadowed
  // R[bank0_info1_page_cfg_shadowed]: V(False)
  //   F[en_0]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info1_page_cfg_shadowed_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info1_page_cfg_shadowed_re),
    .we     (bank0_info1_page_cfg_shadowed_we & bank0_info1_regwen_qs),
    .wd     (bank0_info1_page_cfg_shadowed_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info1_page_cfg_shadowed[0].en.q),

    // to register interface (read)
    .qs     (bank0_info1_page_cfg_shadowed_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info1_page_cfg_shadowed[0].en.err_update),
    .err_storage (reg2hw.bank0_info1_page_cfg_shadowed[0].en.err_storage)
  );

  //   F[rd_en_0]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info1_page_cfg_shadowed_rd_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info1_page_cfg_shadowed_re),
    .we     (bank0_info1_page_cfg_shadowed_we & bank0_info1_regwen_qs),
    .wd     (bank0_info1_page_cfg_shadowed_rd_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info1_page_cfg_shadowed[0].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info1_page_cfg_shadowed_rd_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info1_page_cfg_shadowed[0].rd_en.err_update),
    .err_storage (reg2hw.bank0_info1_page_cfg_shadowed[0].rd_en.err_storage)
  );

  //   F[prog_en_0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info1_page_cfg_shadowed_prog_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info1_page_cfg_shadowed_re),
    .we     (bank0_info1_page_cfg_shadowed_we & bank0_info1_regwen_qs),
    .wd     (bank0_info1_page_cfg_shadowed_prog_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info1_page_cfg_shadowed[0].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info1_page_cfg_shadowed_prog_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info1_page_cfg_shadowed[0].prog_en.err_update),
    .err_storage (reg2hw.bank0_info1_page_cfg_shadowed[0].prog_en.err_storage)
  );

  //   F[erase_en_0]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info1_page_cfg_shadowed_erase_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info1_page_cfg_shadowed_re),
    .we     (bank0_info1_page_cfg_shadowed_we & bank0_info1_regwen_qs),
    .wd     (bank0_info1_page_cfg_shadowed_erase_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info1_page_cfg_shadowed[0].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info1_page_cfg_shadowed_erase_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info1_page_cfg_shadowed[0].erase_en.err_update),
    .err_storage (reg2hw.bank0_info1_page_cfg_shadowed[0].erase_en.err_storage)
  );

  //   F[scramble_en_0]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info1_page_cfg_shadowed_scramble_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info1_page_cfg_shadowed_re),
    .we     (bank0_info1_page_cfg_shadowed_we & bank0_info1_regwen_qs),
    .wd     (bank0_info1_page_cfg_shadowed_scramble_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info1_page_cfg_shadowed[0].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info1_page_cfg_shadowed_scramble_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info1_page_cfg_shadowed[0].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info1_page_cfg_shadowed[0].scramble_en.err_storage)
  );

  //   F[ecc_en_0]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info1_page_cfg_shadowed_ecc_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info1_page_cfg_shadowed_re),
    .we     (bank0_info1_page_cfg_shadowed_we & bank0_info1_regwen_qs),
    .wd     (bank0_info1_page_cfg_shadowed_ecc_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info1_page_cfg_shadowed[0].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info1_page_cfg_shadowed_ecc_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info1_page_cfg_shadowed[0].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info1_page_cfg_shadowed[0].ecc_en.err_storage)
  );

  //   F[he_en_0]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info1_page_cfg_shadowed_he_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info1_page_cfg_shadowed_re),
    .we     (bank0_info1_page_cfg_shadowed_we & bank0_info1_regwen_qs),
    .wd     (bank0_info1_page_cfg_shadowed_he_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info1_page_cfg_shadowed[0].he_en.q),

    // to register interface (read)
    .qs     (bank0_info1_page_cfg_shadowed_he_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info1_page_cfg_shadowed[0].he_en.err_update),
    .err_storage (reg2hw.bank0_info1_page_cfg_shadowed[0].he_en.err_storage)
  );


  // Subregister 0 of Multireg bank0_info2_regwen
  // R[bank0_info2_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info2_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info2_regwen_0_we),
    .wd     (bank0_info2_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info2_regwen_0_qs)
  );


  // Subregister 1 of Multireg bank0_info2_regwen
  // R[bank0_info2_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank0_info2_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank0_info2_regwen_1_we),
    .wd     (bank0_info2_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank0_info2_regwen_1_qs)
  );


  // Subregister 0 of Multireg bank0_info2_page_cfg_shadowed
  // R[bank0_info2_page_cfg_shadowed_0]: V(False)
  //   F[en_0]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_0_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_0_re),
    .we     (bank0_info2_page_cfg_shadowed_0_we & bank0_info2_regwen_0_qs),
    .wd     (bank0_info2_page_cfg_shadowed_0_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[0].en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_0_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[0].en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[0].en.err_storage)
  );

  //   F[rd_en_0]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_0_rd_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_0_re),
    .we     (bank0_info2_page_cfg_shadowed_0_we & bank0_info2_regwen_0_qs),
    .wd     (bank0_info2_page_cfg_shadowed_0_rd_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[0].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_0_rd_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[0].rd_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[0].rd_en.err_storage)
  );

  //   F[prog_en_0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_0_prog_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_0_re),
    .we     (bank0_info2_page_cfg_shadowed_0_we & bank0_info2_regwen_0_qs),
    .wd     (bank0_info2_page_cfg_shadowed_0_prog_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[0].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_0_prog_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[0].prog_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[0].prog_en.err_storage)
  );

  //   F[erase_en_0]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_0_erase_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_0_re),
    .we     (bank0_info2_page_cfg_shadowed_0_we & bank0_info2_regwen_0_qs),
    .wd     (bank0_info2_page_cfg_shadowed_0_erase_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[0].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_0_erase_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[0].erase_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[0].erase_en.err_storage)
  );

  //   F[scramble_en_0]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_0_scramble_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_0_re),
    .we     (bank0_info2_page_cfg_shadowed_0_we & bank0_info2_regwen_0_qs),
    .wd     (bank0_info2_page_cfg_shadowed_0_scramble_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[0].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_0_scramble_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[0].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[0].scramble_en.err_storage)
  );

  //   F[ecc_en_0]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_0_ecc_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_0_re),
    .we     (bank0_info2_page_cfg_shadowed_0_we & bank0_info2_regwen_0_qs),
    .wd     (bank0_info2_page_cfg_shadowed_0_ecc_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[0].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_0_ecc_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[0].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[0].ecc_en.err_storage)
  );

  //   F[he_en_0]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_0_he_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_0_re),
    .we     (bank0_info2_page_cfg_shadowed_0_we & bank0_info2_regwen_0_qs),
    .wd     (bank0_info2_page_cfg_shadowed_0_he_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[0].he_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_0_he_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[0].he_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[0].he_en.err_storage)
  );


  // Subregister 1 of Multireg bank0_info2_page_cfg_shadowed
  // R[bank0_info2_page_cfg_shadowed_1]: V(False)
  //   F[en_1]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_1_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_1_re),
    .we     (bank0_info2_page_cfg_shadowed_1_we & bank0_info2_regwen_1_qs),
    .wd     (bank0_info2_page_cfg_shadowed_1_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[1].en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_1_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[1].en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[1].en.err_storage)
  );

  //   F[rd_en_1]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_1_rd_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_1_re),
    .we     (bank0_info2_page_cfg_shadowed_1_we & bank0_info2_regwen_1_qs),
    .wd     (bank0_info2_page_cfg_shadowed_1_rd_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[1].rd_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_1_rd_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[1].rd_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[1].rd_en.err_storage)
  );

  //   F[prog_en_1]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_1_prog_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_1_re),
    .we     (bank0_info2_page_cfg_shadowed_1_we & bank0_info2_regwen_1_qs),
    .wd     (bank0_info2_page_cfg_shadowed_1_prog_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[1].prog_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_1_prog_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[1].prog_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[1].prog_en.err_storage)
  );

  //   F[erase_en_1]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_1_erase_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_1_re),
    .we     (bank0_info2_page_cfg_shadowed_1_we & bank0_info2_regwen_1_qs),
    .wd     (bank0_info2_page_cfg_shadowed_1_erase_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[1].erase_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_1_erase_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[1].erase_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[1].erase_en.err_storage)
  );

  //   F[scramble_en_1]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_1_scramble_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_1_re),
    .we     (bank0_info2_page_cfg_shadowed_1_we & bank0_info2_regwen_1_qs),
    .wd     (bank0_info2_page_cfg_shadowed_1_scramble_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[1].scramble_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_1_scramble_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[1].scramble_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[1].scramble_en.err_storage)
  );

  //   F[ecc_en_1]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_1_ecc_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_1_re),
    .we     (bank0_info2_page_cfg_shadowed_1_we & bank0_info2_regwen_1_qs),
    .wd     (bank0_info2_page_cfg_shadowed_1_ecc_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[1].ecc_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_1_ecc_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[1].ecc_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[1].ecc_en.err_storage)
  );

  //   F[he_en_1]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank0_info2_page_cfg_shadowed_1_he_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank0_info2_page_cfg_shadowed_1_re),
    .we     (bank0_info2_page_cfg_shadowed_1_we & bank0_info2_regwen_1_qs),
    .wd     (bank0_info2_page_cfg_shadowed_1_he_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank0_info2_page_cfg_shadowed[1].he_en.q),

    // to register interface (read)
    .qs     (bank0_info2_page_cfg_shadowed_1_he_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank0_info2_page_cfg_shadowed[1].he_en.err_update),
    .err_storage (reg2hw.bank0_info2_page_cfg_shadowed[1].he_en.err_storage)
  );


  // Subregister 0 of Multireg bank1_info0_regwen
  // R[bank1_info0_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info0_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info0_regwen_0_we),
    .wd     (bank1_info0_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info0_regwen_0_qs)
  );


  // Subregister 1 of Multireg bank1_info0_regwen
  // R[bank1_info0_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info0_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info0_regwen_1_we),
    .wd     (bank1_info0_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info0_regwen_1_qs)
  );


  // Subregister 2 of Multireg bank1_info0_regwen
  // R[bank1_info0_regwen_2]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info0_regwen_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info0_regwen_2_we),
    .wd     (bank1_info0_regwen_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info0_regwen_2_qs)
  );


  // Subregister 3 of Multireg bank1_info0_regwen
  // R[bank1_info0_regwen_3]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info0_regwen_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info0_regwen_3_we),
    .wd     (bank1_info0_regwen_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info0_regwen_3_qs)
  );


  // Subregister 4 of Multireg bank1_info0_regwen
  // R[bank1_info0_regwen_4]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info0_regwen_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info0_regwen_4_we),
    .wd     (bank1_info0_regwen_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info0_regwen_4_qs)
  );


  // Subregister 5 of Multireg bank1_info0_regwen
  // R[bank1_info0_regwen_5]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info0_regwen_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info0_regwen_5_we),
    .wd     (bank1_info0_regwen_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info0_regwen_5_qs)
  );


  // Subregister 6 of Multireg bank1_info0_regwen
  // R[bank1_info0_regwen_6]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info0_regwen_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info0_regwen_6_we),
    .wd     (bank1_info0_regwen_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info0_regwen_6_qs)
  );


  // Subregister 7 of Multireg bank1_info0_regwen
  // R[bank1_info0_regwen_7]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info0_regwen_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info0_regwen_7_we),
    .wd     (bank1_info0_regwen_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info0_regwen_7_qs)
  );


  // Subregister 8 of Multireg bank1_info0_regwen
  // R[bank1_info0_regwen_8]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info0_regwen_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info0_regwen_8_we),
    .wd     (bank1_info0_regwen_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info0_regwen_8_qs)
  );


  // Subregister 9 of Multireg bank1_info0_regwen
  // R[bank1_info0_regwen_9]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info0_regwen_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info0_regwen_9_we),
    .wd     (bank1_info0_regwen_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info0_regwen_9_qs)
  );


  // Subregister 0 of Multireg bank1_info0_page_cfg_shadowed
  // R[bank1_info0_page_cfg_shadowed_0]: V(False)
  //   F[en_0]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_0_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_0_re),
    .we     (bank1_info0_page_cfg_shadowed_0_we & bank1_info0_regwen_0_qs),
    .wd     (bank1_info0_page_cfg_shadowed_0_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[0].en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_0_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[0].en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[0].en.err_storage)
  );

  //   F[rd_en_0]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_0_rd_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_0_re),
    .we     (bank1_info0_page_cfg_shadowed_0_we & bank1_info0_regwen_0_qs),
    .wd     (bank1_info0_page_cfg_shadowed_0_rd_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[0].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_0_rd_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[0].rd_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[0].rd_en.err_storage)
  );

  //   F[prog_en_0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_0_prog_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_0_re),
    .we     (bank1_info0_page_cfg_shadowed_0_we & bank1_info0_regwen_0_qs),
    .wd     (bank1_info0_page_cfg_shadowed_0_prog_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[0].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_0_prog_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[0].prog_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[0].prog_en.err_storage)
  );

  //   F[erase_en_0]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_0_erase_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_0_re),
    .we     (bank1_info0_page_cfg_shadowed_0_we & bank1_info0_regwen_0_qs),
    .wd     (bank1_info0_page_cfg_shadowed_0_erase_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[0].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_0_erase_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[0].erase_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[0].erase_en.err_storage)
  );

  //   F[scramble_en_0]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_0_scramble_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_0_re),
    .we     (bank1_info0_page_cfg_shadowed_0_we & bank1_info0_regwen_0_qs),
    .wd     (bank1_info0_page_cfg_shadowed_0_scramble_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[0].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_0_scramble_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[0].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[0].scramble_en.err_storage)
  );

  //   F[ecc_en_0]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_0_ecc_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_0_re),
    .we     (bank1_info0_page_cfg_shadowed_0_we & bank1_info0_regwen_0_qs),
    .wd     (bank1_info0_page_cfg_shadowed_0_ecc_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[0].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_0_ecc_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[0].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[0].ecc_en.err_storage)
  );

  //   F[he_en_0]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_0_he_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_0_re),
    .we     (bank1_info0_page_cfg_shadowed_0_we & bank1_info0_regwen_0_qs),
    .wd     (bank1_info0_page_cfg_shadowed_0_he_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[0].he_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_0_he_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[0].he_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[0].he_en.err_storage)
  );


  // Subregister 1 of Multireg bank1_info0_page_cfg_shadowed
  // R[bank1_info0_page_cfg_shadowed_1]: V(False)
  //   F[en_1]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_1_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_1_re),
    .we     (bank1_info0_page_cfg_shadowed_1_we & bank1_info0_regwen_1_qs),
    .wd     (bank1_info0_page_cfg_shadowed_1_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[1].en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_1_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[1].en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[1].en.err_storage)
  );

  //   F[rd_en_1]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_1_rd_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_1_re),
    .we     (bank1_info0_page_cfg_shadowed_1_we & bank1_info0_regwen_1_qs),
    .wd     (bank1_info0_page_cfg_shadowed_1_rd_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[1].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_1_rd_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[1].rd_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[1].rd_en.err_storage)
  );

  //   F[prog_en_1]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_1_prog_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_1_re),
    .we     (bank1_info0_page_cfg_shadowed_1_we & bank1_info0_regwen_1_qs),
    .wd     (bank1_info0_page_cfg_shadowed_1_prog_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[1].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_1_prog_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[1].prog_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[1].prog_en.err_storage)
  );

  //   F[erase_en_1]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_1_erase_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_1_re),
    .we     (bank1_info0_page_cfg_shadowed_1_we & bank1_info0_regwen_1_qs),
    .wd     (bank1_info0_page_cfg_shadowed_1_erase_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[1].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_1_erase_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[1].erase_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[1].erase_en.err_storage)
  );

  //   F[scramble_en_1]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_1_scramble_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_1_re),
    .we     (bank1_info0_page_cfg_shadowed_1_we & bank1_info0_regwen_1_qs),
    .wd     (bank1_info0_page_cfg_shadowed_1_scramble_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[1].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_1_scramble_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[1].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[1].scramble_en.err_storage)
  );

  //   F[ecc_en_1]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_1_ecc_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_1_re),
    .we     (bank1_info0_page_cfg_shadowed_1_we & bank1_info0_regwen_1_qs),
    .wd     (bank1_info0_page_cfg_shadowed_1_ecc_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[1].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_1_ecc_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[1].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[1].ecc_en.err_storage)
  );

  //   F[he_en_1]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_1_he_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_1_re),
    .we     (bank1_info0_page_cfg_shadowed_1_we & bank1_info0_regwen_1_qs),
    .wd     (bank1_info0_page_cfg_shadowed_1_he_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[1].he_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_1_he_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[1].he_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[1].he_en.err_storage)
  );


  // Subregister 2 of Multireg bank1_info0_page_cfg_shadowed
  // R[bank1_info0_page_cfg_shadowed_2]: V(False)
  //   F[en_2]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_2_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_2_re),
    .we     (bank1_info0_page_cfg_shadowed_2_we & bank1_info0_regwen_2_qs),
    .wd     (bank1_info0_page_cfg_shadowed_2_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[2].en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_2_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[2].en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[2].en.err_storage)
  );

  //   F[rd_en_2]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_2_rd_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_2_re),
    .we     (bank1_info0_page_cfg_shadowed_2_we & bank1_info0_regwen_2_qs),
    .wd     (bank1_info0_page_cfg_shadowed_2_rd_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[2].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_2_rd_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[2].rd_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[2].rd_en.err_storage)
  );

  //   F[prog_en_2]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_2_prog_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_2_re),
    .we     (bank1_info0_page_cfg_shadowed_2_we & bank1_info0_regwen_2_qs),
    .wd     (bank1_info0_page_cfg_shadowed_2_prog_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[2].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_2_prog_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[2].prog_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[2].prog_en.err_storage)
  );

  //   F[erase_en_2]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_2_erase_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_2_re),
    .we     (bank1_info0_page_cfg_shadowed_2_we & bank1_info0_regwen_2_qs),
    .wd     (bank1_info0_page_cfg_shadowed_2_erase_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[2].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_2_erase_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[2].erase_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[2].erase_en.err_storage)
  );

  //   F[scramble_en_2]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_2_scramble_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_2_re),
    .we     (bank1_info0_page_cfg_shadowed_2_we & bank1_info0_regwen_2_qs),
    .wd     (bank1_info0_page_cfg_shadowed_2_scramble_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[2].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_2_scramble_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[2].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[2].scramble_en.err_storage)
  );

  //   F[ecc_en_2]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_2_ecc_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_2_re),
    .we     (bank1_info0_page_cfg_shadowed_2_we & bank1_info0_regwen_2_qs),
    .wd     (bank1_info0_page_cfg_shadowed_2_ecc_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[2].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_2_ecc_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[2].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[2].ecc_en.err_storage)
  );

  //   F[he_en_2]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_2_he_en_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_2_re),
    .we     (bank1_info0_page_cfg_shadowed_2_we & bank1_info0_regwen_2_qs),
    .wd     (bank1_info0_page_cfg_shadowed_2_he_en_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[2].he_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_2_he_en_2_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[2].he_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[2].he_en.err_storage)
  );


  // Subregister 3 of Multireg bank1_info0_page_cfg_shadowed
  // R[bank1_info0_page_cfg_shadowed_3]: V(False)
  //   F[en_3]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_3_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_3_re),
    .we     (bank1_info0_page_cfg_shadowed_3_we & bank1_info0_regwen_3_qs),
    .wd     (bank1_info0_page_cfg_shadowed_3_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[3].en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_3_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[3].en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[3].en.err_storage)
  );

  //   F[rd_en_3]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_3_rd_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_3_re),
    .we     (bank1_info0_page_cfg_shadowed_3_we & bank1_info0_regwen_3_qs),
    .wd     (bank1_info0_page_cfg_shadowed_3_rd_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[3].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_3_rd_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[3].rd_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[3].rd_en.err_storage)
  );

  //   F[prog_en_3]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_3_prog_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_3_re),
    .we     (bank1_info0_page_cfg_shadowed_3_we & bank1_info0_regwen_3_qs),
    .wd     (bank1_info0_page_cfg_shadowed_3_prog_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[3].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_3_prog_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[3].prog_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[3].prog_en.err_storage)
  );

  //   F[erase_en_3]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_3_erase_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_3_re),
    .we     (bank1_info0_page_cfg_shadowed_3_we & bank1_info0_regwen_3_qs),
    .wd     (bank1_info0_page_cfg_shadowed_3_erase_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[3].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_3_erase_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[3].erase_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[3].erase_en.err_storage)
  );

  //   F[scramble_en_3]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_3_scramble_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_3_re),
    .we     (bank1_info0_page_cfg_shadowed_3_we & bank1_info0_regwen_3_qs),
    .wd     (bank1_info0_page_cfg_shadowed_3_scramble_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[3].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_3_scramble_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[3].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[3].scramble_en.err_storage)
  );

  //   F[ecc_en_3]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_3_ecc_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_3_re),
    .we     (bank1_info0_page_cfg_shadowed_3_we & bank1_info0_regwen_3_qs),
    .wd     (bank1_info0_page_cfg_shadowed_3_ecc_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[3].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_3_ecc_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[3].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[3].ecc_en.err_storage)
  );

  //   F[he_en_3]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_3_he_en_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_3_re),
    .we     (bank1_info0_page_cfg_shadowed_3_we & bank1_info0_regwen_3_qs),
    .wd     (bank1_info0_page_cfg_shadowed_3_he_en_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[3].he_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_3_he_en_3_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[3].he_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[3].he_en.err_storage)
  );


  // Subregister 4 of Multireg bank1_info0_page_cfg_shadowed
  // R[bank1_info0_page_cfg_shadowed_4]: V(False)
  //   F[en_4]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_4_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_4_re),
    .we     (bank1_info0_page_cfg_shadowed_4_we & bank1_info0_regwen_4_qs),
    .wd     (bank1_info0_page_cfg_shadowed_4_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[4].en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_4_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[4].en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[4].en.err_storage)
  );

  //   F[rd_en_4]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_4_rd_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_4_re),
    .we     (bank1_info0_page_cfg_shadowed_4_we & bank1_info0_regwen_4_qs),
    .wd     (bank1_info0_page_cfg_shadowed_4_rd_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[4].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_4_rd_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[4].rd_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[4].rd_en.err_storage)
  );

  //   F[prog_en_4]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_4_prog_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_4_re),
    .we     (bank1_info0_page_cfg_shadowed_4_we & bank1_info0_regwen_4_qs),
    .wd     (bank1_info0_page_cfg_shadowed_4_prog_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[4].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_4_prog_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[4].prog_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[4].prog_en.err_storage)
  );

  //   F[erase_en_4]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_4_erase_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_4_re),
    .we     (bank1_info0_page_cfg_shadowed_4_we & bank1_info0_regwen_4_qs),
    .wd     (bank1_info0_page_cfg_shadowed_4_erase_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[4].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_4_erase_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[4].erase_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[4].erase_en.err_storage)
  );

  //   F[scramble_en_4]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_4_scramble_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_4_re),
    .we     (bank1_info0_page_cfg_shadowed_4_we & bank1_info0_regwen_4_qs),
    .wd     (bank1_info0_page_cfg_shadowed_4_scramble_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[4].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_4_scramble_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[4].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[4].scramble_en.err_storage)
  );

  //   F[ecc_en_4]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_4_ecc_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_4_re),
    .we     (bank1_info0_page_cfg_shadowed_4_we & bank1_info0_regwen_4_qs),
    .wd     (bank1_info0_page_cfg_shadowed_4_ecc_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[4].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_4_ecc_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[4].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[4].ecc_en.err_storage)
  );

  //   F[he_en_4]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_4_he_en_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_4_re),
    .we     (bank1_info0_page_cfg_shadowed_4_we & bank1_info0_regwen_4_qs),
    .wd     (bank1_info0_page_cfg_shadowed_4_he_en_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[4].he_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_4_he_en_4_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[4].he_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[4].he_en.err_storage)
  );


  // Subregister 5 of Multireg bank1_info0_page_cfg_shadowed
  // R[bank1_info0_page_cfg_shadowed_5]: V(False)
  //   F[en_5]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_5_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_5_re),
    .we     (bank1_info0_page_cfg_shadowed_5_we & bank1_info0_regwen_5_qs),
    .wd     (bank1_info0_page_cfg_shadowed_5_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[5].en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_5_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[5].en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[5].en.err_storage)
  );

  //   F[rd_en_5]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_5_rd_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_5_re),
    .we     (bank1_info0_page_cfg_shadowed_5_we & bank1_info0_regwen_5_qs),
    .wd     (bank1_info0_page_cfg_shadowed_5_rd_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[5].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_5_rd_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[5].rd_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[5].rd_en.err_storage)
  );

  //   F[prog_en_5]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_5_prog_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_5_re),
    .we     (bank1_info0_page_cfg_shadowed_5_we & bank1_info0_regwen_5_qs),
    .wd     (bank1_info0_page_cfg_shadowed_5_prog_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[5].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_5_prog_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[5].prog_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[5].prog_en.err_storage)
  );

  //   F[erase_en_5]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_5_erase_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_5_re),
    .we     (bank1_info0_page_cfg_shadowed_5_we & bank1_info0_regwen_5_qs),
    .wd     (bank1_info0_page_cfg_shadowed_5_erase_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[5].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_5_erase_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[5].erase_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[5].erase_en.err_storage)
  );

  //   F[scramble_en_5]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_5_scramble_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_5_re),
    .we     (bank1_info0_page_cfg_shadowed_5_we & bank1_info0_regwen_5_qs),
    .wd     (bank1_info0_page_cfg_shadowed_5_scramble_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[5].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_5_scramble_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[5].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[5].scramble_en.err_storage)
  );

  //   F[ecc_en_5]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_5_ecc_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_5_re),
    .we     (bank1_info0_page_cfg_shadowed_5_we & bank1_info0_regwen_5_qs),
    .wd     (bank1_info0_page_cfg_shadowed_5_ecc_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[5].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_5_ecc_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[5].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[5].ecc_en.err_storage)
  );

  //   F[he_en_5]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_5_he_en_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_5_re),
    .we     (bank1_info0_page_cfg_shadowed_5_we & bank1_info0_regwen_5_qs),
    .wd     (bank1_info0_page_cfg_shadowed_5_he_en_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[5].he_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_5_he_en_5_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[5].he_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[5].he_en.err_storage)
  );


  // Subregister 6 of Multireg bank1_info0_page_cfg_shadowed
  // R[bank1_info0_page_cfg_shadowed_6]: V(False)
  //   F[en_6]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_6_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_6_re),
    .we     (bank1_info0_page_cfg_shadowed_6_we & bank1_info0_regwen_6_qs),
    .wd     (bank1_info0_page_cfg_shadowed_6_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[6].en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_6_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[6].en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[6].en.err_storage)
  );

  //   F[rd_en_6]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_6_rd_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_6_re),
    .we     (bank1_info0_page_cfg_shadowed_6_we & bank1_info0_regwen_6_qs),
    .wd     (bank1_info0_page_cfg_shadowed_6_rd_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[6].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_6_rd_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[6].rd_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[6].rd_en.err_storage)
  );

  //   F[prog_en_6]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_6_prog_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_6_re),
    .we     (bank1_info0_page_cfg_shadowed_6_we & bank1_info0_regwen_6_qs),
    .wd     (bank1_info0_page_cfg_shadowed_6_prog_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[6].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_6_prog_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[6].prog_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[6].prog_en.err_storage)
  );

  //   F[erase_en_6]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_6_erase_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_6_re),
    .we     (bank1_info0_page_cfg_shadowed_6_we & bank1_info0_regwen_6_qs),
    .wd     (bank1_info0_page_cfg_shadowed_6_erase_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[6].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_6_erase_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[6].erase_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[6].erase_en.err_storage)
  );

  //   F[scramble_en_6]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_6_scramble_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_6_re),
    .we     (bank1_info0_page_cfg_shadowed_6_we & bank1_info0_regwen_6_qs),
    .wd     (bank1_info0_page_cfg_shadowed_6_scramble_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[6].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_6_scramble_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[6].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[6].scramble_en.err_storage)
  );

  //   F[ecc_en_6]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_6_ecc_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_6_re),
    .we     (bank1_info0_page_cfg_shadowed_6_we & bank1_info0_regwen_6_qs),
    .wd     (bank1_info0_page_cfg_shadowed_6_ecc_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[6].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_6_ecc_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[6].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[6].ecc_en.err_storage)
  );

  //   F[he_en_6]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_6_he_en_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_6_re),
    .we     (bank1_info0_page_cfg_shadowed_6_we & bank1_info0_regwen_6_qs),
    .wd     (bank1_info0_page_cfg_shadowed_6_he_en_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[6].he_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_6_he_en_6_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[6].he_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[6].he_en.err_storage)
  );


  // Subregister 7 of Multireg bank1_info0_page_cfg_shadowed
  // R[bank1_info0_page_cfg_shadowed_7]: V(False)
  //   F[en_7]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_7_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_7_re),
    .we     (bank1_info0_page_cfg_shadowed_7_we & bank1_info0_regwen_7_qs),
    .wd     (bank1_info0_page_cfg_shadowed_7_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[7].en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_7_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[7].en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[7].en.err_storage)
  );

  //   F[rd_en_7]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_7_rd_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_7_re),
    .we     (bank1_info0_page_cfg_shadowed_7_we & bank1_info0_regwen_7_qs),
    .wd     (bank1_info0_page_cfg_shadowed_7_rd_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[7].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_7_rd_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[7].rd_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[7].rd_en.err_storage)
  );

  //   F[prog_en_7]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_7_prog_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_7_re),
    .we     (bank1_info0_page_cfg_shadowed_7_we & bank1_info0_regwen_7_qs),
    .wd     (bank1_info0_page_cfg_shadowed_7_prog_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[7].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_7_prog_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[7].prog_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[7].prog_en.err_storage)
  );

  //   F[erase_en_7]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_7_erase_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_7_re),
    .we     (bank1_info0_page_cfg_shadowed_7_we & bank1_info0_regwen_7_qs),
    .wd     (bank1_info0_page_cfg_shadowed_7_erase_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[7].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_7_erase_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[7].erase_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[7].erase_en.err_storage)
  );

  //   F[scramble_en_7]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_7_scramble_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_7_re),
    .we     (bank1_info0_page_cfg_shadowed_7_we & bank1_info0_regwen_7_qs),
    .wd     (bank1_info0_page_cfg_shadowed_7_scramble_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[7].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_7_scramble_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[7].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[7].scramble_en.err_storage)
  );

  //   F[ecc_en_7]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_7_ecc_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_7_re),
    .we     (bank1_info0_page_cfg_shadowed_7_we & bank1_info0_regwen_7_qs),
    .wd     (bank1_info0_page_cfg_shadowed_7_ecc_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[7].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_7_ecc_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[7].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[7].ecc_en.err_storage)
  );

  //   F[he_en_7]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_7_he_en_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_7_re),
    .we     (bank1_info0_page_cfg_shadowed_7_we & bank1_info0_regwen_7_qs),
    .wd     (bank1_info0_page_cfg_shadowed_7_he_en_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[7].he_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_7_he_en_7_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[7].he_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[7].he_en.err_storage)
  );


  // Subregister 8 of Multireg bank1_info0_page_cfg_shadowed
  // R[bank1_info0_page_cfg_shadowed_8]: V(False)
  //   F[en_8]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_8_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_8_re),
    .we     (bank1_info0_page_cfg_shadowed_8_we & bank1_info0_regwen_8_qs),
    .wd     (bank1_info0_page_cfg_shadowed_8_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[8].en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_8_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[8].en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[8].en.err_storage)
  );

  //   F[rd_en_8]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_8_rd_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_8_re),
    .we     (bank1_info0_page_cfg_shadowed_8_we & bank1_info0_regwen_8_qs),
    .wd     (bank1_info0_page_cfg_shadowed_8_rd_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[8].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_8_rd_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[8].rd_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[8].rd_en.err_storage)
  );

  //   F[prog_en_8]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_8_prog_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_8_re),
    .we     (bank1_info0_page_cfg_shadowed_8_we & bank1_info0_regwen_8_qs),
    .wd     (bank1_info0_page_cfg_shadowed_8_prog_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[8].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_8_prog_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[8].prog_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[8].prog_en.err_storage)
  );

  //   F[erase_en_8]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_8_erase_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_8_re),
    .we     (bank1_info0_page_cfg_shadowed_8_we & bank1_info0_regwen_8_qs),
    .wd     (bank1_info0_page_cfg_shadowed_8_erase_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[8].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_8_erase_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[8].erase_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[8].erase_en.err_storage)
  );

  //   F[scramble_en_8]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_8_scramble_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_8_re),
    .we     (bank1_info0_page_cfg_shadowed_8_we & bank1_info0_regwen_8_qs),
    .wd     (bank1_info0_page_cfg_shadowed_8_scramble_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[8].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_8_scramble_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[8].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[8].scramble_en.err_storage)
  );

  //   F[ecc_en_8]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_8_ecc_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_8_re),
    .we     (bank1_info0_page_cfg_shadowed_8_we & bank1_info0_regwen_8_qs),
    .wd     (bank1_info0_page_cfg_shadowed_8_ecc_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[8].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_8_ecc_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[8].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[8].ecc_en.err_storage)
  );

  //   F[he_en_8]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_8_he_en_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_8_re),
    .we     (bank1_info0_page_cfg_shadowed_8_we & bank1_info0_regwen_8_qs),
    .wd     (bank1_info0_page_cfg_shadowed_8_he_en_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[8].he_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_8_he_en_8_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[8].he_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[8].he_en.err_storage)
  );


  // Subregister 9 of Multireg bank1_info0_page_cfg_shadowed
  // R[bank1_info0_page_cfg_shadowed_9]: V(False)
  //   F[en_9]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_9_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_9_re),
    .we     (bank1_info0_page_cfg_shadowed_9_we & bank1_info0_regwen_9_qs),
    .wd     (bank1_info0_page_cfg_shadowed_9_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[9].en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_9_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[9].en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[9].en.err_storage)
  );

  //   F[rd_en_9]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_9_rd_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_9_re),
    .we     (bank1_info0_page_cfg_shadowed_9_we & bank1_info0_regwen_9_qs),
    .wd     (bank1_info0_page_cfg_shadowed_9_rd_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[9].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_9_rd_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[9].rd_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[9].rd_en.err_storage)
  );

  //   F[prog_en_9]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_9_prog_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_9_re),
    .we     (bank1_info0_page_cfg_shadowed_9_we & bank1_info0_regwen_9_qs),
    .wd     (bank1_info0_page_cfg_shadowed_9_prog_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[9].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_9_prog_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[9].prog_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[9].prog_en.err_storage)
  );

  //   F[erase_en_9]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_9_erase_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_9_re),
    .we     (bank1_info0_page_cfg_shadowed_9_we & bank1_info0_regwen_9_qs),
    .wd     (bank1_info0_page_cfg_shadowed_9_erase_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[9].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_9_erase_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[9].erase_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[9].erase_en.err_storage)
  );

  //   F[scramble_en_9]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_9_scramble_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_9_re),
    .we     (bank1_info0_page_cfg_shadowed_9_we & bank1_info0_regwen_9_qs),
    .wd     (bank1_info0_page_cfg_shadowed_9_scramble_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[9].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_9_scramble_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[9].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[9].scramble_en.err_storage)
  );

  //   F[ecc_en_9]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_9_ecc_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_9_re),
    .we     (bank1_info0_page_cfg_shadowed_9_we & bank1_info0_regwen_9_qs),
    .wd     (bank1_info0_page_cfg_shadowed_9_ecc_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[9].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_9_ecc_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[9].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[9].ecc_en.err_storage)
  );

  //   F[he_en_9]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info0_page_cfg_shadowed_9_he_en_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info0_page_cfg_shadowed_9_re),
    .we     (bank1_info0_page_cfg_shadowed_9_we & bank1_info0_regwen_9_qs),
    .wd     (bank1_info0_page_cfg_shadowed_9_he_en_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info0_page_cfg_shadowed[9].he_en.q),

    // to register interface (read)
    .qs     (bank1_info0_page_cfg_shadowed_9_he_en_9_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info0_page_cfg_shadowed[9].he_en.err_update),
    .err_storage (reg2hw.bank1_info0_page_cfg_shadowed[9].he_en.err_storage)
  );


  // Subregister 0 of Multireg bank1_info1_regwen
  // R[bank1_info1_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info1_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info1_regwen_we),
    .wd     (bank1_info1_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info1_regwen_qs)
  );


  // Subregister 0 of Multireg bank1_info1_page_cfg_shadowed
  // R[bank1_info1_page_cfg_shadowed]: V(False)
  //   F[en_0]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info1_page_cfg_shadowed_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info1_page_cfg_shadowed_re),
    .we     (bank1_info1_page_cfg_shadowed_we & bank1_info1_regwen_qs),
    .wd     (bank1_info1_page_cfg_shadowed_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info1_page_cfg_shadowed[0].en.q),

    // to register interface (read)
    .qs     (bank1_info1_page_cfg_shadowed_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info1_page_cfg_shadowed[0].en.err_update),
    .err_storage (reg2hw.bank1_info1_page_cfg_shadowed[0].en.err_storage)
  );

  //   F[rd_en_0]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info1_page_cfg_shadowed_rd_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info1_page_cfg_shadowed_re),
    .we     (bank1_info1_page_cfg_shadowed_we & bank1_info1_regwen_qs),
    .wd     (bank1_info1_page_cfg_shadowed_rd_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info1_page_cfg_shadowed[0].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info1_page_cfg_shadowed_rd_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info1_page_cfg_shadowed[0].rd_en.err_update),
    .err_storage (reg2hw.bank1_info1_page_cfg_shadowed[0].rd_en.err_storage)
  );

  //   F[prog_en_0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info1_page_cfg_shadowed_prog_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info1_page_cfg_shadowed_re),
    .we     (bank1_info1_page_cfg_shadowed_we & bank1_info1_regwen_qs),
    .wd     (bank1_info1_page_cfg_shadowed_prog_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info1_page_cfg_shadowed[0].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info1_page_cfg_shadowed_prog_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info1_page_cfg_shadowed[0].prog_en.err_update),
    .err_storage (reg2hw.bank1_info1_page_cfg_shadowed[0].prog_en.err_storage)
  );

  //   F[erase_en_0]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info1_page_cfg_shadowed_erase_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info1_page_cfg_shadowed_re),
    .we     (bank1_info1_page_cfg_shadowed_we & bank1_info1_regwen_qs),
    .wd     (bank1_info1_page_cfg_shadowed_erase_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info1_page_cfg_shadowed[0].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info1_page_cfg_shadowed_erase_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info1_page_cfg_shadowed[0].erase_en.err_update),
    .err_storage (reg2hw.bank1_info1_page_cfg_shadowed[0].erase_en.err_storage)
  );

  //   F[scramble_en_0]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info1_page_cfg_shadowed_scramble_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info1_page_cfg_shadowed_re),
    .we     (bank1_info1_page_cfg_shadowed_we & bank1_info1_regwen_qs),
    .wd     (bank1_info1_page_cfg_shadowed_scramble_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info1_page_cfg_shadowed[0].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info1_page_cfg_shadowed_scramble_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info1_page_cfg_shadowed[0].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info1_page_cfg_shadowed[0].scramble_en.err_storage)
  );

  //   F[ecc_en_0]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info1_page_cfg_shadowed_ecc_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info1_page_cfg_shadowed_re),
    .we     (bank1_info1_page_cfg_shadowed_we & bank1_info1_regwen_qs),
    .wd     (bank1_info1_page_cfg_shadowed_ecc_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info1_page_cfg_shadowed[0].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info1_page_cfg_shadowed_ecc_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info1_page_cfg_shadowed[0].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info1_page_cfg_shadowed[0].ecc_en.err_storage)
  );

  //   F[he_en_0]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info1_page_cfg_shadowed_he_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info1_page_cfg_shadowed_re),
    .we     (bank1_info1_page_cfg_shadowed_we & bank1_info1_regwen_qs),
    .wd     (bank1_info1_page_cfg_shadowed_he_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info1_page_cfg_shadowed[0].he_en.q),

    // to register interface (read)
    .qs     (bank1_info1_page_cfg_shadowed_he_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info1_page_cfg_shadowed[0].he_en.err_update),
    .err_storage (reg2hw.bank1_info1_page_cfg_shadowed[0].he_en.err_storage)
  );


  // Subregister 0 of Multireg bank1_info2_regwen
  // R[bank1_info2_regwen_0]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info2_regwen_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info2_regwen_0_we),
    .wd     (bank1_info2_regwen_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info2_regwen_0_qs)
  );


  // Subregister 1 of Multireg bank1_info2_regwen
  // R[bank1_info2_regwen_1]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank1_info2_regwen_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank1_info2_regwen_1_we),
    .wd     (bank1_info2_regwen_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank1_info2_regwen_1_qs)
  );


  // Subregister 0 of Multireg bank1_info2_page_cfg_shadowed
  // R[bank1_info2_page_cfg_shadowed_0]: V(False)
  //   F[en_0]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_0_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_0_re),
    .we     (bank1_info2_page_cfg_shadowed_0_we & bank1_info2_regwen_0_qs),
    .wd     (bank1_info2_page_cfg_shadowed_0_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[0].en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_0_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[0].en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[0].en.err_storage)
  );

  //   F[rd_en_0]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_0_rd_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_0_re),
    .we     (bank1_info2_page_cfg_shadowed_0_we & bank1_info2_regwen_0_qs),
    .wd     (bank1_info2_page_cfg_shadowed_0_rd_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[0].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_0_rd_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[0].rd_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[0].rd_en.err_storage)
  );

  //   F[prog_en_0]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_0_prog_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_0_re),
    .we     (bank1_info2_page_cfg_shadowed_0_we & bank1_info2_regwen_0_qs),
    .wd     (bank1_info2_page_cfg_shadowed_0_prog_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[0].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_0_prog_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[0].prog_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[0].prog_en.err_storage)
  );

  //   F[erase_en_0]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_0_erase_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_0_re),
    .we     (bank1_info2_page_cfg_shadowed_0_we & bank1_info2_regwen_0_qs),
    .wd     (bank1_info2_page_cfg_shadowed_0_erase_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[0].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_0_erase_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[0].erase_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[0].erase_en.err_storage)
  );

  //   F[scramble_en_0]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_0_scramble_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_0_re),
    .we     (bank1_info2_page_cfg_shadowed_0_we & bank1_info2_regwen_0_qs),
    .wd     (bank1_info2_page_cfg_shadowed_0_scramble_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[0].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_0_scramble_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[0].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[0].scramble_en.err_storage)
  );

  //   F[ecc_en_0]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_0_ecc_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_0_re),
    .we     (bank1_info2_page_cfg_shadowed_0_we & bank1_info2_regwen_0_qs),
    .wd     (bank1_info2_page_cfg_shadowed_0_ecc_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[0].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_0_ecc_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[0].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[0].ecc_en.err_storage)
  );

  //   F[he_en_0]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_0_he_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_0_re),
    .we     (bank1_info2_page_cfg_shadowed_0_we & bank1_info2_regwen_0_qs),
    .wd     (bank1_info2_page_cfg_shadowed_0_he_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[0].he_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_0_he_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[0].he_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[0].he_en.err_storage)
  );


  // Subregister 1 of Multireg bank1_info2_page_cfg_shadowed
  // R[bank1_info2_page_cfg_shadowed_1]: V(False)
  //   F[en_1]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_1_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_1_re),
    .we     (bank1_info2_page_cfg_shadowed_1_we & bank1_info2_regwen_1_qs),
    .wd     (bank1_info2_page_cfg_shadowed_1_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[1].en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_1_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[1].en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[1].en.err_storage)
  );

  //   F[rd_en_1]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_1_rd_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_1_re),
    .we     (bank1_info2_page_cfg_shadowed_1_we & bank1_info2_regwen_1_qs),
    .wd     (bank1_info2_page_cfg_shadowed_1_rd_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[1].rd_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_1_rd_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[1].rd_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[1].rd_en.err_storage)
  );

  //   F[prog_en_1]: 2:2
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_1_prog_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_1_re),
    .we     (bank1_info2_page_cfg_shadowed_1_we & bank1_info2_regwen_1_qs),
    .wd     (bank1_info2_page_cfg_shadowed_1_prog_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[1].prog_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_1_prog_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[1].prog_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[1].prog_en.err_storage)
  );

  //   F[erase_en_1]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_1_erase_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_1_re),
    .we     (bank1_info2_page_cfg_shadowed_1_we & bank1_info2_regwen_1_qs),
    .wd     (bank1_info2_page_cfg_shadowed_1_erase_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[1].erase_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_1_erase_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[1].erase_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[1].erase_en.err_storage)
  );

  //   F[scramble_en_1]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_1_scramble_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_1_re),
    .we     (bank1_info2_page_cfg_shadowed_1_we & bank1_info2_regwen_1_qs),
    .wd     (bank1_info2_page_cfg_shadowed_1_scramble_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[1].scramble_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_1_scramble_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[1].scramble_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[1].scramble_en.err_storage)
  );

  //   F[ecc_en_1]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_1_ecc_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_1_re),
    .we     (bank1_info2_page_cfg_shadowed_1_we & bank1_info2_regwen_1_qs),
    .wd     (bank1_info2_page_cfg_shadowed_1_ecc_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[1].ecc_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_1_ecc_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[1].ecc_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[1].ecc_en.err_storage)
  );

  //   F[he_en_1]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_bank1_info2_page_cfg_shadowed_1_he_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (bank1_info2_page_cfg_shadowed_1_re),
    .we     (bank1_info2_page_cfg_shadowed_1_we & bank1_info2_regwen_1_qs),
    .wd     (bank1_info2_page_cfg_shadowed_1_he_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.bank1_info2_page_cfg_shadowed[1].he_en.q),

    // to register interface (read)
    .qs     (bank1_info2_page_cfg_shadowed_1_he_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.bank1_info2_page_cfg_shadowed[1].he_en.err_update),
    .err_storage (reg2hw.bank1_info2_page_cfg_shadowed[1].he_en.err_storage)
  );


  // R[bank_cfg_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_bank_cfg_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (bank_cfg_regwen_we),
    .wd     (bank_cfg_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (bank_cfg_regwen_qs)
  );


  // Subregister 0 of Multireg mp_bank_cfg_shadowed
  // R[mp_bank_cfg_shadowed]: V(False)
  //   F[erase_en_0]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_bank_cfg_shadowed_erase_en_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_bank_cfg_shadowed_re),
    .we     (mp_bank_cfg_shadowed_we & bank_cfg_regwen_qs),
    .wd     (mp_bank_cfg_shadowed_erase_en_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_bank_cfg_shadowed[0].q),

    // to register interface (read)
    .qs     (mp_bank_cfg_shadowed_erase_en_0_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_bank_cfg_shadowed[0].err_update),
    .err_storage (reg2hw.mp_bank_cfg_shadowed[0].err_storage)
  );

  //   F[erase_en_1]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_mp_bank_cfg_shadowed_erase_en_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (mp_bank_cfg_shadowed_re),
    .we     (mp_bank_cfg_shadowed_we & bank_cfg_regwen_qs),
    .wd     (mp_bank_cfg_shadowed_erase_en_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mp_bank_cfg_shadowed[1].q),

    // to register interface (read)
    .qs     (mp_bank_cfg_shadowed_erase_en_1_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (reg2hw.mp_bank_cfg_shadowed[1].err_update),
    .err_storage (reg2hw.mp_bank_cfg_shadowed[1].err_storage)
  );


  // R[op_status]: V(False)
  //   F[done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_op_status_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (op_status_we),
    .wd     (op_status_done_wd),

    // from internal hardware
    .de     (hw2reg.op_status.done.de),
    .d      (hw2reg.op_status.done.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (op_status_done_qs)
  );

  //   F[err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_op_status_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (op_status_we),
    .wd     (op_status_err_wd),

    // from internal hardware
    .de     (hw2reg.op_status.err.de),
    .d      (hw2reg.op_status.err.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (op_status_err_qs)
  );


  // R[status]: V(False)
  //   F[rd_full]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_rd_full (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.rd_full.de),
    .d      (hw2reg.status.rd_full.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (status_rd_full_qs)
  );

  //   F[rd_empty]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_status_rd_empty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.rd_empty.de),
    .d      (hw2reg.status.rd_empty.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (status_rd_empty_qs)
  );

  //   F[prog_full]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_prog_full (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.prog_full.de),
    .d      (hw2reg.status.prog_full.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (status_prog_full_qs)
  );

  //   F[prog_empty]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_status_prog_empty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.prog_empty.de),
    .d      (hw2reg.status.prog_empty.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (status_prog_empty_qs)
  );

  //   F[init_wip]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_status_init_wip (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.init_wip.de),
    .d      (hw2reg.status.init_wip.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (status_init_wip_qs)
  );


  // R[err_code]: V(False)
  //   F[mp_err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_err_code_mp_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (err_code_we),
    .wd     (err_code_mp_err_wd),

    // from internal hardware
    .de     (hw2reg.err_code.mp_err.de),
    .d      (hw2reg.err_code.mp_err.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (err_code_mp_err_qs)
  );

  //   F[rd_err]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_err_code_rd_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (err_code_we),
    .wd     (err_code_rd_err_wd),

    // from internal hardware
    .de     (hw2reg.err_code.rd_err.de),
    .d      (hw2reg.err_code.rd_err.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (err_code_rd_err_qs)
  );

  //   F[prog_win_err]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_err_code_prog_win_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (err_code_we),
    .wd     (err_code_prog_win_err_wd),

    // from internal hardware
    .de     (hw2reg.err_code.prog_win_err.de),
    .d      (hw2reg.err_code.prog_win_err.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (err_code_prog_win_err_qs)
  );

  //   F[prog_type_err]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_err_code_prog_type_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (err_code_we),
    .wd     (err_code_prog_type_err_wd),

    // from internal hardware
    .de     (hw2reg.err_code.prog_type_err.de),
    .d      (hw2reg.err_code.prog_type_err.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (err_code_prog_type_err_qs)
  );

  //   F[flash_phy_err]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_err_code_flash_phy_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (err_code_we),
    .wd     (err_code_flash_phy_err_wd),

    // from internal hardware
    .de     (hw2reg.err_code.flash_phy_err.de),
    .d      (hw2reg.err_code.flash_phy_err.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (err_code_flash_phy_err_qs)
  );

  //   F[update_err]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_err_code_update_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (err_code_we),
    .wd     (err_code_update_err_wd),

    // from internal hardware
    .de     (hw2reg.err_code.update_err.de),
    .d      (hw2reg.err_code.update_err.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (err_code_update_err_qs)
  );


  // R[fault_status]: V(False)
  //   F[mp_err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_mp_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.mp_err.de),
    .d      (hw2reg.fault_status.mp_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.mp_err.q),

    // to register interface (read)
    .qs     (fault_status_mp_err_qs)
  );

  //   F[rd_err]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_rd_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.rd_err.de),
    .d      (hw2reg.fault_status.rd_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.rd_err.q),

    // to register interface (read)
    .qs     (fault_status_rd_err_qs)
  );

  //   F[prog_win_err]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_prog_win_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.prog_win_err.de),
    .d      (hw2reg.fault_status.prog_win_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.prog_win_err.q),

    // to register interface (read)
    .qs     (fault_status_prog_win_err_qs)
  );

  //   F[prog_type_err]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_prog_type_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.prog_type_err.de),
    .d      (hw2reg.fault_status.prog_type_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.prog_type_err.q),

    // to register interface (read)
    .qs     (fault_status_prog_type_err_qs)
  );

  //   F[flash_phy_err]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_flash_phy_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.flash_phy_err.de),
    .d      (hw2reg.fault_status.flash_phy_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.flash_phy_err.q),

    // to register interface (read)
    .qs     (fault_status_flash_phy_err_qs)
  );

  //   F[reg_intg_err]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_reg_intg_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.reg_intg_err.de),
    .d      (hw2reg.fault_status.reg_intg_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.reg_intg_err.q),

    // to register interface (read)
    .qs     (fault_status_reg_intg_err_qs)
  );

  //   F[phy_intg_err]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_phy_intg_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.phy_intg_err.de),
    .d      (hw2reg.fault_status.phy_intg_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.phy_intg_err.q),

    // to register interface (read)
    .qs     (fault_status_phy_intg_err_qs)
  );

  //   F[lcmgr_err]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_lcmgr_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.lcmgr_err.de),
    .d      (hw2reg.fault_status.lcmgr_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.lcmgr_err.q),

    // to register interface (read)
    .qs     (fault_status_lcmgr_err_qs)
  );

  //   F[arb_fsm_err]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_arb_fsm_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.arb_fsm_err.de),
    .d      (hw2reg.fault_status.arb_fsm_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.arb_fsm_err.q),

    // to register interface (read)
    .qs     (fault_status_arb_fsm_err_qs)
  );

  //   F[storage_err]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_storage_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.storage_err.de),
    .d      (hw2reg.fault_status.storage_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.storage_err.q),

    // to register interface (read)
    .qs     (fault_status_storage_err_qs)
  );

  //   F[seed_err]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fault_status_seed_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fault_status.seed_err.de),
    .d      (hw2reg.fault_status.seed_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fault_status.seed_err.q),

    // to register interface (read)
    .qs     (fault_status_seed_err_qs)
  );


  // R[err_addr]: V(False)
  prim_subreg #(
    .DW      (20),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (20'h0)
  ) u_err_addr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.err_addr.de),
    .d      (hw2reg.err_addr.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (err_addr_qs)
  );


  // Subregister 0 of Multireg ecc_single_err_cnt
  // R[ecc_single_err_cnt]: V(False)
  //   F[ecc_single_err_cnt_0]: 7:0
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_ecc_single_err_cnt_ecc_single_err_cnt_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ecc_single_err_cnt_we),
    .wd     (ecc_single_err_cnt_ecc_single_err_cnt_0_wd),

    // from internal hardware
    .de     (hw2reg.ecc_single_err_cnt[0].de),
    .d      (hw2reg.ecc_single_err_cnt[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ecc_single_err_cnt[0].q),

    // to register interface (read)
    .qs     (ecc_single_err_cnt_ecc_single_err_cnt_0_qs)
  );

  //   F[ecc_single_err_cnt_1]: 15:8
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0)
  ) u_ecc_single_err_cnt_ecc_single_err_cnt_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ecc_single_err_cnt_we),
    .wd     (ecc_single_err_cnt_ecc_single_err_cnt_1_wd),

    // from internal hardware
    .de     (hw2reg.ecc_single_err_cnt[1].de),
    .d      (hw2reg.ecc_single_err_cnt[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ecc_single_err_cnt[1].q),

    // to register interface (read)
    .qs     (ecc_single_err_cnt_ecc_single_err_cnt_1_qs)
  );


  // Subregister 0 of Multireg ecc_single_err_addr
  // R[ecc_single_err_addr_0]: V(False)
  prim_subreg #(
    .DW      (20),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (20'h0)
  ) u_ecc_single_err_addr_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ecc_single_err_addr[0].de),
    .d      (hw2reg.ecc_single_err_addr[0].d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ecc_single_err_addr_0_qs)
  );


  // Subregister 1 of Multireg ecc_single_err_addr
  // R[ecc_single_err_addr_1]: V(False)
  prim_subreg #(
    .DW      (20),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (20'h0)
  ) u_ecc_single_err_addr_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.ecc_single_err_addr[1].de),
    .d      (hw2reg.ecc_single_err_addr[1].d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ecc_single_err_addr_1_qs)
  );


  // R[phy_alert_cfg]: V(False)
  //   F[alert_ack]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_phy_alert_cfg_alert_ack (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (phy_alert_cfg_we),
    .wd     (phy_alert_cfg_alert_ack_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.phy_alert_cfg.alert_ack.q),

    // to register interface (read)
    .qs     (phy_alert_cfg_alert_ack_qs)
  );

  //   F[alert_trig]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_phy_alert_cfg_alert_trig (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (phy_alert_cfg_we),
    .wd     (phy_alert_cfg_alert_trig_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.phy_alert_cfg.alert_trig.q),

    // to register interface (read)
    .qs     (phy_alert_cfg_alert_trig_qs)
  );


  // R[phy_status]: V(False)
  //   F[init_wip]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_phy_status_init_wip (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.phy_status.init_wip.de),
    .d      (hw2reg.phy_status.init_wip.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (phy_status_init_wip_qs)
  );

  //   F[prog_normal_avail]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_phy_status_prog_normal_avail (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.phy_status.prog_normal_avail.de),
    .d      (hw2reg.phy_status.prog_normal_avail.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (phy_status_prog_normal_avail_qs)
  );

  //   F[prog_repair_avail]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_phy_status_prog_repair_avail (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.phy_status.prog_repair_avail.de),
    .d      (hw2reg.phy_status.prog_repair_avail.d),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (phy_status_prog_repair_avail_qs)
  );


  // R[scratch]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_scratch (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (scratch_we),
    .wd     (scratch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.scratch.q),

    // to register interface (read)
    .qs     (scratch_qs)
  );


  // R[fifo_lvl]: V(False)
  //   F[prog]: 4:0
  prim_subreg #(
    .DW      (5),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (5'hf)
  ) u_fifo_lvl_prog (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (fifo_lvl_we),
    .wd     (fifo_lvl_prog_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fifo_lvl.prog.q),

    // to register interface (read)
    .qs     (fifo_lvl_prog_qs)
  );

  //   F[rd]: 12:8
  prim_subreg #(
    .DW      (5),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (5'hf)
  ) u_fifo_lvl_rd (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (fifo_lvl_we),
    .wd     (fifo_lvl_rd_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fifo_lvl.rd.q),

    // to register interface (read)
    .qs     (fifo_lvl_rd_qs)
  );


  // R[fifo_rst]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_fifo_rst (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (fifo_rst_we),
    .wd     (fifo_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fifo_rst.q),

    // to register interface (read)
    .qs     (fifo_rst_qs)
  );



  logic [95:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == FLASH_CTRL_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == FLASH_CTRL_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == FLASH_CTRL_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == FLASH_CTRL_ALERT_TEST_OFFSET);
    addr_hit[ 4] = (reg_addr == FLASH_CTRL_DIS_OFFSET);
    addr_hit[ 5] = (reg_addr == FLASH_CTRL_EXEC_OFFSET);
    addr_hit[ 6] = (reg_addr == FLASH_CTRL_INIT_OFFSET);
    addr_hit[ 7] = (reg_addr == FLASH_CTRL_CTRL_REGWEN_OFFSET);
    addr_hit[ 8] = (reg_addr == FLASH_CTRL_CONTROL_OFFSET);
    addr_hit[ 9] = (reg_addr == FLASH_CTRL_ADDR_OFFSET);
    addr_hit[10] = (reg_addr == FLASH_CTRL_PROG_TYPE_EN_OFFSET);
    addr_hit[11] = (reg_addr == FLASH_CTRL_ERASE_SUSPEND_OFFSET);
    addr_hit[12] = (reg_addr == FLASH_CTRL_REGION_CFG_REGWEN_0_OFFSET);
    addr_hit[13] = (reg_addr == FLASH_CTRL_REGION_CFG_REGWEN_1_OFFSET);
    addr_hit[14] = (reg_addr == FLASH_CTRL_REGION_CFG_REGWEN_2_OFFSET);
    addr_hit[15] = (reg_addr == FLASH_CTRL_REGION_CFG_REGWEN_3_OFFSET);
    addr_hit[16] = (reg_addr == FLASH_CTRL_REGION_CFG_REGWEN_4_OFFSET);
    addr_hit[17] = (reg_addr == FLASH_CTRL_REGION_CFG_REGWEN_5_OFFSET);
    addr_hit[18] = (reg_addr == FLASH_CTRL_REGION_CFG_REGWEN_6_OFFSET);
    addr_hit[19] = (reg_addr == FLASH_CTRL_REGION_CFG_REGWEN_7_OFFSET);
    addr_hit[20] = (reg_addr == FLASH_CTRL_MP_REGION_CFG_SHADOWED_0_OFFSET);
    addr_hit[21] = (reg_addr == FLASH_CTRL_MP_REGION_CFG_SHADOWED_1_OFFSET);
    addr_hit[22] = (reg_addr == FLASH_CTRL_MP_REGION_CFG_SHADOWED_2_OFFSET);
    addr_hit[23] = (reg_addr == FLASH_CTRL_MP_REGION_CFG_SHADOWED_3_OFFSET);
    addr_hit[24] = (reg_addr == FLASH_CTRL_MP_REGION_CFG_SHADOWED_4_OFFSET);
    addr_hit[25] = (reg_addr == FLASH_CTRL_MP_REGION_CFG_SHADOWED_5_OFFSET);
    addr_hit[26] = (reg_addr == FLASH_CTRL_MP_REGION_CFG_SHADOWED_6_OFFSET);
    addr_hit[27] = (reg_addr == FLASH_CTRL_MP_REGION_CFG_SHADOWED_7_OFFSET);
    addr_hit[28] = (reg_addr == FLASH_CTRL_DEFAULT_REGION_SHADOWED_OFFSET);
    addr_hit[29] = (reg_addr == FLASH_CTRL_BANK0_INFO0_REGWEN_0_OFFSET);
    addr_hit[30] = (reg_addr == FLASH_CTRL_BANK0_INFO0_REGWEN_1_OFFSET);
    addr_hit[31] = (reg_addr == FLASH_CTRL_BANK0_INFO0_REGWEN_2_OFFSET);
    addr_hit[32] = (reg_addr == FLASH_CTRL_BANK0_INFO0_REGWEN_3_OFFSET);
    addr_hit[33] = (reg_addr == FLASH_CTRL_BANK0_INFO0_REGWEN_4_OFFSET);
    addr_hit[34] = (reg_addr == FLASH_CTRL_BANK0_INFO0_REGWEN_5_OFFSET);
    addr_hit[35] = (reg_addr == FLASH_CTRL_BANK0_INFO0_REGWEN_6_OFFSET);
    addr_hit[36] = (reg_addr == FLASH_CTRL_BANK0_INFO0_REGWEN_7_OFFSET);
    addr_hit[37] = (reg_addr == FLASH_CTRL_BANK0_INFO0_REGWEN_8_OFFSET);
    addr_hit[38] = (reg_addr == FLASH_CTRL_BANK0_INFO0_REGWEN_9_OFFSET);
    addr_hit[39] = (reg_addr == FLASH_CTRL_BANK0_INFO0_PAGE_CFG_SHADOWED_0_OFFSET);
    addr_hit[40] = (reg_addr == FLASH_CTRL_BANK0_INFO0_PAGE_CFG_SHADOWED_1_OFFSET);
    addr_hit[41] = (reg_addr == FLASH_CTRL_BANK0_INFO0_PAGE_CFG_SHADOWED_2_OFFSET);
    addr_hit[42] = (reg_addr == FLASH_CTRL_BANK0_INFO0_PAGE_CFG_SHADOWED_3_OFFSET);
    addr_hit[43] = (reg_addr == FLASH_CTRL_BANK0_INFO0_PAGE_CFG_SHADOWED_4_OFFSET);
    addr_hit[44] = (reg_addr == FLASH_CTRL_BANK0_INFO0_PAGE_CFG_SHADOWED_5_OFFSET);
    addr_hit[45] = (reg_addr == FLASH_CTRL_BANK0_INFO0_PAGE_CFG_SHADOWED_6_OFFSET);
    addr_hit[46] = (reg_addr == FLASH_CTRL_BANK0_INFO0_PAGE_CFG_SHADOWED_7_OFFSET);
    addr_hit[47] = (reg_addr == FLASH_CTRL_BANK0_INFO0_PAGE_CFG_SHADOWED_8_OFFSET);
    addr_hit[48] = (reg_addr == FLASH_CTRL_BANK0_INFO0_PAGE_CFG_SHADOWED_9_OFFSET);
    addr_hit[49] = (reg_addr == FLASH_CTRL_BANK0_INFO1_REGWEN_OFFSET);
    addr_hit[50] = (reg_addr == FLASH_CTRL_BANK0_INFO1_PAGE_CFG_SHADOWED_OFFSET);
    addr_hit[51] = (reg_addr == FLASH_CTRL_BANK0_INFO2_REGWEN_0_OFFSET);
    addr_hit[52] = (reg_addr == FLASH_CTRL_BANK0_INFO2_REGWEN_1_OFFSET);
    addr_hit[53] = (reg_addr == FLASH_CTRL_BANK0_INFO2_PAGE_CFG_SHADOWED_0_OFFSET);
    addr_hit[54] = (reg_addr == FLASH_CTRL_BANK0_INFO2_PAGE_CFG_SHADOWED_1_OFFSET);
    addr_hit[55] = (reg_addr == FLASH_CTRL_BANK1_INFO0_REGWEN_0_OFFSET);
    addr_hit[56] = (reg_addr == FLASH_CTRL_BANK1_INFO0_REGWEN_1_OFFSET);
    addr_hit[57] = (reg_addr == FLASH_CTRL_BANK1_INFO0_REGWEN_2_OFFSET);
    addr_hit[58] = (reg_addr == FLASH_CTRL_BANK1_INFO0_REGWEN_3_OFFSET);
    addr_hit[59] = (reg_addr == FLASH_CTRL_BANK1_INFO0_REGWEN_4_OFFSET);
    addr_hit[60] = (reg_addr == FLASH_CTRL_BANK1_INFO0_REGWEN_5_OFFSET);
    addr_hit[61] = (reg_addr == FLASH_CTRL_BANK1_INFO0_REGWEN_6_OFFSET);
    addr_hit[62] = (reg_addr == FLASH_CTRL_BANK1_INFO0_REGWEN_7_OFFSET);
    addr_hit[63] = (reg_addr == FLASH_CTRL_BANK1_INFO0_REGWEN_8_OFFSET);
    addr_hit[64] = (reg_addr == FLASH_CTRL_BANK1_INFO0_REGWEN_9_OFFSET);
    addr_hit[65] = (reg_addr == FLASH_CTRL_BANK1_INFO0_PAGE_CFG_SHADOWED_0_OFFSET);
    addr_hit[66] = (reg_addr == FLASH_CTRL_BANK1_INFO0_PAGE_CFG_SHADOWED_1_OFFSET);
    addr_hit[67] = (reg_addr == FLASH_CTRL_BANK1_INFO0_PAGE_CFG_SHADOWED_2_OFFSET);
    addr_hit[68] = (reg_addr == FLASH_CTRL_BANK1_INFO0_PAGE_CFG_SHADOWED_3_OFFSET);
    addr_hit[69] = (reg_addr == FLASH_CTRL_BANK1_INFO0_PAGE_CFG_SHADOWED_4_OFFSET);
    addr_hit[70] = (reg_addr == FLASH_CTRL_BANK1_INFO0_PAGE_CFG_SHADOWED_5_OFFSET);
    addr_hit[71] = (reg_addr == FLASH_CTRL_BANK1_INFO0_PAGE_CFG_SHADOWED_6_OFFSET);
    addr_hit[72] = (reg_addr == FLASH_CTRL_BANK1_INFO0_PAGE_CFG_SHADOWED_7_OFFSET);
    addr_hit[73] = (reg_addr == FLASH_CTRL_BANK1_INFO0_PAGE_CFG_SHADOWED_8_OFFSET);
    addr_hit[74] = (reg_addr == FLASH_CTRL_BANK1_INFO0_PAGE_CFG_SHADOWED_9_OFFSET);
    addr_hit[75] = (reg_addr == FLASH_CTRL_BANK1_INFO1_REGWEN_OFFSET);
    addr_hit[76] = (reg_addr == FLASH_CTRL_BANK1_INFO1_PAGE_CFG_SHADOWED_OFFSET);
    addr_hit[77] = (reg_addr == FLASH_CTRL_BANK1_INFO2_REGWEN_0_OFFSET);
    addr_hit[78] = (reg_addr == FLASH_CTRL_BANK1_INFO2_REGWEN_1_OFFSET);
    addr_hit[79] = (reg_addr == FLASH_CTRL_BANK1_INFO2_PAGE_CFG_SHADOWED_0_OFFSET);
    addr_hit[80] = (reg_addr == FLASH_CTRL_BANK1_INFO2_PAGE_CFG_SHADOWED_1_OFFSET);
    addr_hit[81] = (reg_addr == FLASH_CTRL_BANK_CFG_REGWEN_OFFSET);
    addr_hit[82] = (reg_addr == FLASH_CTRL_MP_BANK_CFG_SHADOWED_OFFSET);
    addr_hit[83] = (reg_addr == FLASH_CTRL_OP_STATUS_OFFSET);
    addr_hit[84] = (reg_addr == FLASH_CTRL_STATUS_OFFSET);
    addr_hit[85] = (reg_addr == FLASH_CTRL_ERR_CODE_OFFSET);
    addr_hit[86] = (reg_addr == FLASH_CTRL_FAULT_STATUS_OFFSET);
    addr_hit[87] = (reg_addr == FLASH_CTRL_ERR_ADDR_OFFSET);
    addr_hit[88] = (reg_addr == FLASH_CTRL_ECC_SINGLE_ERR_CNT_OFFSET);
    addr_hit[89] = (reg_addr == FLASH_CTRL_ECC_SINGLE_ERR_ADDR_0_OFFSET);
    addr_hit[90] = (reg_addr == FLASH_CTRL_ECC_SINGLE_ERR_ADDR_1_OFFSET);
    addr_hit[91] = (reg_addr == FLASH_CTRL_PHY_ALERT_CFG_OFFSET);
    addr_hit[92] = (reg_addr == FLASH_CTRL_PHY_STATUS_OFFSET);
    addr_hit[93] = (reg_addr == FLASH_CTRL_SCRATCH_OFFSET);
    addr_hit[94] = (reg_addr == FLASH_CTRL_FIFO_LVL_OFFSET);
    addr_hit[95] = (reg_addr == FLASH_CTRL_FIFO_RST_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(FLASH_CTRL_CORE_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(FLASH_CTRL_CORE_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(FLASH_CTRL_CORE_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(FLASH_CTRL_CORE_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(FLASH_CTRL_CORE_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(FLASH_CTRL_CORE_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(FLASH_CTRL_CORE_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(FLASH_CTRL_CORE_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(FLASH_CTRL_CORE_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(FLASH_CTRL_CORE_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(FLASH_CTRL_CORE_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(FLASH_CTRL_CORE_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(FLASH_CTRL_CORE_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(FLASH_CTRL_CORE_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(FLASH_CTRL_CORE_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(FLASH_CTRL_CORE_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(FLASH_CTRL_CORE_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(FLASH_CTRL_CORE_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(FLASH_CTRL_CORE_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(FLASH_CTRL_CORE_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(FLASH_CTRL_CORE_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(FLASH_CTRL_CORE_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(FLASH_CTRL_CORE_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(FLASH_CTRL_CORE_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(FLASH_CTRL_CORE_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(FLASH_CTRL_CORE_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(FLASH_CTRL_CORE_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(FLASH_CTRL_CORE_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(FLASH_CTRL_CORE_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(FLASH_CTRL_CORE_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(FLASH_CTRL_CORE_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(FLASH_CTRL_CORE_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(FLASH_CTRL_CORE_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(FLASH_CTRL_CORE_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(FLASH_CTRL_CORE_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(FLASH_CTRL_CORE_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(FLASH_CTRL_CORE_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(FLASH_CTRL_CORE_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(FLASH_CTRL_CORE_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(FLASH_CTRL_CORE_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(FLASH_CTRL_CORE_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(FLASH_CTRL_CORE_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(FLASH_CTRL_CORE_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(FLASH_CTRL_CORE_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(FLASH_CTRL_CORE_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(FLASH_CTRL_CORE_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(FLASH_CTRL_CORE_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(FLASH_CTRL_CORE_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(FLASH_CTRL_CORE_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(FLASH_CTRL_CORE_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(FLASH_CTRL_CORE_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(FLASH_CTRL_CORE_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(FLASH_CTRL_CORE_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(FLASH_CTRL_CORE_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(FLASH_CTRL_CORE_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(FLASH_CTRL_CORE_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(FLASH_CTRL_CORE_PERMIT[56] & ~reg_be))) |
               (addr_hit[57] & (|(FLASH_CTRL_CORE_PERMIT[57] & ~reg_be))) |
               (addr_hit[58] & (|(FLASH_CTRL_CORE_PERMIT[58] & ~reg_be))) |
               (addr_hit[59] & (|(FLASH_CTRL_CORE_PERMIT[59] & ~reg_be))) |
               (addr_hit[60] & (|(FLASH_CTRL_CORE_PERMIT[60] & ~reg_be))) |
               (addr_hit[61] & (|(FLASH_CTRL_CORE_PERMIT[61] & ~reg_be))) |
               (addr_hit[62] & (|(FLASH_CTRL_CORE_PERMIT[62] & ~reg_be))) |
               (addr_hit[63] & (|(FLASH_CTRL_CORE_PERMIT[63] & ~reg_be))) |
               (addr_hit[64] & (|(FLASH_CTRL_CORE_PERMIT[64] & ~reg_be))) |
               (addr_hit[65] & (|(FLASH_CTRL_CORE_PERMIT[65] & ~reg_be))) |
               (addr_hit[66] & (|(FLASH_CTRL_CORE_PERMIT[66] & ~reg_be))) |
               (addr_hit[67] & (|(FLASH_CTRL_CORE_PERMIT[67] & ~reg_be))) |
               (addr_hit[68] & (|(FLASH_CTRL_CORE_PERMIT[68] & ~reg_be))) |
               (addr_hit[69] & (|(FLASH_CTRL_CORE_PERMIT[69] & ~reg_be))) |
               (addr_hit[70] & (|(FLASH_CTRL_CORE_PERMIT[70] & ~reg_be))) |
               (addr_hit[71] & (|(FLASH_CTRL_CORE_PERMIT[71] & ~reg_be))) |
               (addr_hit[72] & (|(FLASH_CTRL_CORE_PERMIT[72] & ~reg_be))) |
               (addr_hit[73] & (|(FLASH_CTRL_CORE_PERMIT[73] & ~reg_be))) |
               (addr_hit[74] & (|(FLASH_CTRL_CORE_PERMIT[74] & ~reg_be))) |
               (addr_hit[75] & (|(FLASH_CTRL_CORE_PERMIT[75] & ~reg_be))) |
               (addr_hit[76] & (|(FLASH_CTRL_CORE_PERMIT[76] & ~reg_be))) |
               (addr_hit[77] & (|(FLASH_CTRL_CORE_PERMIT[77] & ~reg_be))) |
               (addr_hit[78] & (|(FLASH_CTRL_CORE_PERMIT[78] & ~reg_be))) |
               (addr_hit[79] & (|(FLASH_CTRL_CORE_PERMIT[79] & ~reg_be))) |
               (addr_hit[80] & (|(FLASH_CTRL_CORE_PERMIT[80] & ~reg_be))) |
               (addr_hit[81] & (|(FLASH_CTRL_CORE_PERMIT[81] & ~reg_be))) |
               (addr_hit[82] & (|(FLASH_CTRL_CORE_PERMIT[82] & ~reg_be))) |
               (addr_hit[83] & (|(FLASH_CTRL_CORE_PERMIT[83] & ~reg_be))) |
               (addr_hit[84] & (|(FLASH_CTRL_CORE_PERMIT[84] & ~reg_be))) |
               (addr_hit[85] & (|(FLASH_CTRL_CORE_PERMIT[85] & ~reg_be))) |
               (addr_hit[86] & (|(FLASH_CTRL_CORE_PERMIT[86] & ~reg_be))) |
               (addr_hit[87] & (|(FLASH_CTRL_CORE_PERMIT[87] & ~reg_be))) |
               (addr_hit[88] & (|(FLASH_CTRL_CORE_PERMIT[88] & ~reg_be))) |
               (addr_hit[89] & (|(FLASH_CTRL_CORE_PERMIT[89] & ~reg_be))) |
               (addr_hit[90] & (|(FLASH_CTRL_CORE_PERMIT[90] & ~reg_be))) |
               (addr_hit[91] & (|(FLASH_CTRL_CORE_PERMIT[91] & ~reg_be))) |
               (addr_hit[92] & (|(FLASH_CTRL_CORE_PERMIT[92] & ~reg_be))) |
               (addr_hit[93] & (|(FLASH_CTRL_CORE_PERMIT[93] & ~reg_be))) |
               (addr_hit[94] & (|(FLASH_CTRL_CORE_PERMIT[94] & ~reg_be))) |
               (addr_hit[95] & (|(FLASH_CTRL_CORE_PERMIT[95] & ~reg_be)))));
  end
  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;

  assign intr_state_prog_empty_wd = reg_wdata[0];

  assign intr_state_prog_lvl_wd = reg_wdata[1];

  assign intr_state_rd_full_wd = reg_wdata[2];

  assign intr_state_rd_lvl_wd = reg_wdata[3];

  assign intr_state_op_done_wd = reg_wdata[4];

  assign intr_state_corr_err_wd = reg_wdata[5];
  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;

  assign intr_enable_prog_empty_wd = reg_wdata[0];

  assign intr_enable_prog_lvl_wd = reg_wdata[1];

  assign intr_enable_rd_full_wd = reg_wdata[2];

  assign intr_enable_rd_lvl_wd = reg_wdata[3];

  assign intr_enable_op_done_wd = reg_wdata[4];

  assign intr_enable_corr_err_wd = reg_wdata[5];
  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;

  assign intr_test_prog_empty_wd = reg_wdata[0];

  assign intr_test_prog_lvl_wd = reg_wdata[1];

  assign intr_test_rd_full_wd = reg_wdata[2];

  assign intr_test_rd_lvl_wd = reg_wdata[3];

  assign intr_test_op_done_wd = reg_wdata[4];

  assign intr_test_corr_err_wd = reg_wdata[5];
  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;

  assign alert_test_recov_err_wd = reg_wdata[0];

  assign alert_test_fatal_err_wd = reg_wdata[1];
  assign dis_we = addr_hit[4] & reg_we & !reg_error;

  assign dis_wd = reg_wdata[3:0];
  assign exec_we = addr_hit[5] & reg_we & !reg_error;

  assign exec_wd = reg_wdata[31:0];
  assign init_we = addr_hit[6] & reg_we & !reg_error;

  assign init_wd = reg_wdata[0];
  assign ctrl_regwen_re = addr_hit[7] & reg_re & !reg_error;
  assign control_we = addr_hit[8] & reg_we & !reg_error;

  assign control_start_wd = reg_wdata[0];

  assign control_op_wd = reg_wdata[5:4];

  assign control_prog_sel_wd = reg_wdata[6];

  assign control_erase_sel_wd = reg_wdata[7];

  assign control_partition_sel_wd = reg_wdata[8];

  assign control_info_sel_wd = reg_wdata[10:9];

  assign control_num_wd = reg_wdata[27:16];
  assign addr_we = addr_hit[9] & reg_we & !reg_error;

  assign addr_wd = reg_wdata[19:0];
  assign prog_type_en_we = addr_hit[10] & reg_we & !reg_error;

  assign prog_type_en_normal_wd = reg_wdata[0];

  assign prog_type_en_repair_wd = reg_wdata[1];
  assign erase_suspend_we = addr_hit[11] & reg_we & !reg_error;

  assign erase_suspend_wd = reg_wdata[0];
  assign region_cfg_regwen_0_we = addr_hit[12] & reg_we & !reg_error;

  assign region_cfg_regwen_0_wd = reg_wdata[0];
  assign region_cfg_regwen_1_we = addr_hit[13] & reg_we & !reg_error;

  assign region_cfg_regwen_1_wd = reg_wdata[0];
  assign region_cfg_regwen_2_we = addr_hit[14] & reg_we & !reg_error;

  assign region_cfg_regwen_2_wd = reg_wdata[0];
  assign region_cfg_regwen_3_we = addr_hit[15] & reg_we & !reg_error;

  assign region_cfg_regwen_3_wd = reg_wdata[0];
  assign region_cfg_regwen_4_we = addr_hit[16] & reg_we & !reg_error;

  assign region_cfg_regwen_4_wd = reg_wdata[0];
  assign region_cfg_regwen_5_we = addr_hit[17] & reg_we & !reg_error;

  assign region_cfg_regwen_5_wd = reg_wdata[0];
  assign region_cfg_regwen_6_we = addr_hit[18] & reg_we & !reg_error;

  assign region_cfg_regwen_6_wd = reg_wdata[0];
  assign region_cfg_regwen_7_we = addr_hit[19] & reg_we & !reg_error;

  assign region_cfg_regwen_7_wd = reg_wdata[0];
  assign mp_region_cfg_shadowed_0_re = addr_hit[20] & reg_re & !reg_error;
  assign mp_region_cfg_shadowed_0_we = addr_hit[20] & reg_we & !reg_error;

  assign mp_region_cfg_shadowed_0_en_0_wd = reg_wdata[0];

  assign mp_region_cfg_shadowed_0_rd_en_0_wd = reg_wdata[1];

  assign mp_region_cfg_shadowed_0_prog_en_0_wd = reg_wdata[2];

  assign mp_region_cfg_shadowed_0_erase_en_0_wd = reg_wdata[3];

  assign mp_region_cfg_shadowed_0_scramble_en_0_wd = reg_wdata[4];

  assign mp_region_cfg_shadowed_0_ecc_en_0_wd = reg_wdata[5];

  assign mp_region_cfg_shadowed_0_he_en_0_wd = reg_wdata[6];

  assign mp_region_cfg_shadowed_0_base_0_wd = reg_wdata[16:8];

  assign mp_region_cfg_shadowed_0_size_0_wd = reg_wdata[26:17];
  assign mp_region_cfg_shadowed_1_re = addr_hit[21] & reg_re & !reg_error;
  assign mp_region_cfg_shadowed_1_we = addr_hit[21] & reg_we & !reg_error;

  assign mp_region_cfg_shadowed_1_en_1_wd = reg_wdata[0];

  assign mp_region_cfg_shadowed_1_rd_en_1_wd = reg_wdata[1];

  assign mp_region_cfg_shadowed_1_prog_en_1_wd = reg_wdata[2];

  assign mp_region_cfg_shadowed_1_erase_en_1_wd = reg_wdata[3];

  assign mp_region_cfg_shadowed_1_scramble_en_1_wd = reg_wdata[4];

  assign mp_region_cfg_shadowed_1_ecc_en_1_wd = reg_wdata[5];

  assign mp_region_cfg_shadowed_1_he_en_1_wd = reg_wdata[6];

  assign mp_region_cfg_shadowed_1_base_1_wd = reg_wdata[16:8];

  assign mp_region_cfg_shadowed_1_size_1_wd = reg_wdata[26:17];
  assign mp_region_cfg_shadowed_2_re = addr_hit[22] & reg_re & !reg_error;
  assign mp_region_cfg_shadowed_2_we = addr_hit[22] & reg_we & !reg_error;

  assign mp_region_cfg_shadowed_2_en_2_wd = reg_wdata[0];

  assign mp_region_cfg_shadowed_2_rd_en_2_wd = reg_wdata[1];

  assign mp_region_cfg_shadowed_2_prog_en_2_wd = reg_wdata[2];

  assign mp_region_cfg_shadowed_2_erase_en_2_wd = reg_wdata[3];

  assign mp_region_cfg_shadowed_2_scramble_en_2_wd = reg_wdata[4];

  assign mp_region_cfg_shadowed_2_ecc_en_2_wd = reg_wdata[5];

  assign mp_region_cfg_shadowed_2_he_en_2_wd = reg_wdata[6];

  assign mp_region_cfg_shadowed_2_base_2_wd = reg_wdata[16:8];

  assign mp_region_cfg_shadowed_2_size_2_wd = reg_wdata[26:17];
  assign mp_region_cfg_shadowed_3_re = addr_hit[23] & reg_re & !reg_error;
  assign mp_region_cfg_shadowed_3_we = addr_hit[23] & reg_we & !reg_error;

  assign mp_region_cfg_shadowed_3_en_3_wd = reg_wdata[0];

  assign mp_region_cfg_shadowed_3_rd_en_3_wd = reg_wdata[1];

  assign mp_region_cfg_shadowed_3_prog_en_3_wd = reg_wdata[2];

  assign mp_region_cfg_shadowed_3_erase_en_3_wd = reg_wdata[3];

  assign mp_region_cfg_shadowed_3_scramble_en_3_wd = reg_wdata[4];

  assign mp_region_cfg_shadowed_3_ecc_en_3_wd = reg_wdata[5];

  assign mp_region_cfg_shadowed_3_he_en_3_wd = reg_wdata[6];

  assign mp_region_cfg_shadowed_3_base_3_wd = reg_wdata[16:8];

  assign mp_region_cfg_shadowed_3_size_3_wd = reg_wdata[26:17];
  assign mp_region_cfg_shadowed_4_re = addr_hit[24] & reg_re & !reg_error;
  assign mp_region_cfg_shadowed_4_we = addr_hit[24] & reg_we & !reg_error;

  assign mp_region_cfg_shadowed_4_en_4_wd = reg_wdata[0];

  assign mp_region_cfg_shadowed_4_rd_en_4_wd = reg_wdata[1];

  assign mp_region_cfg_shadowed_4_prog_en_4_wd = reg_wdata[2];

  assign mp_region_cfg_shadowed_4_erase_en_4_wd = reg_wdata[3];

  assign mp_region_cfg_shadowed_4_scramble_en_4_wd = reg_wdata[4];

  assign mp_region_cfg_shadowed_4_ecc_en_4_wd = reg_wdata[5];

  assign mp_region_cfg_shadowed_4_he_en_4_wd = reg_wdata[6];

  assign mp_region_cfg_shadowed_4_base_4_wd = reg_wdata[16:8];

  assign mp_region_cfg_shadowed_4_size_4_wd = reg_wdata[26:17];
  assign mp_region_cfg_shadowed_5_re = addr_hit[25] & reg_re & !reg_error;
  assign mp_region_cfg_shadowed_5_we = addr_hit[25] & reg_we & !reg_error;

  assign mp_region_cfg_shadowed_5_en_5_wd = reg_wdata[0];

  assign mp_region_cfg_shadowed_5_rd_en_5_wd = reg_wdata[1];

  assign mp_region_cfg_shadowed_5_prog_en_5_wd = reg_wdata[2];

  assign mp_region_cfg_shadowed_5_erase_en_5_wd = reg_wdata[3];

  assign mp_region_cfg_shadowed_5_scramble_en_5_wd = reg_wdata[4];

  assign mp_region_cfg_shadowed_5_ecc_en_5_wd = reg_wdata[5];

  assign mp_region_cfg_shadowed_5_he_en_5_wd = reg_wdata[6];

  assign mp_region_cfg_shadowed_5_base_5_wd = reg_wdata[16:8];

  assign mp_region_cfg_shadowed_5_size_5_wd = reg_wdata[26:17];
  assign mp_region_cfg_shadowed_6_re = addr_hit[26] & reg_re & !reg_error;
  assign mp_region_cfg_shadowed_6_we = addr_hit[26] & reg_we & !reg_error;

  assign mp_region_cfg_shadowed_6_en_6_wd = reg_wdata[0];

  assign mp_region_cfg_shadowed_6_rd_en_6_wd = reg_wdata[1];

  assign mp_region_cfg_shadowed_6_prog_en_6_wd = reg_wdata[2];

  assign mp_region_cfg_shadowed_6_erase_en_6_wd = reg_wdata[3];

  assign mp_region_cfg_shadowed_6_scramble_en_6_wd = reg_wdata[4];

  assign mp_region_cfg_shadowed_6_ecc_en_6_wd = reg_wdata[5];

  assign mp_region_cfg_shadowed_6_he_en_6_wd = reg_wdata[6];

  assign mp_region_cfg_shadowed_6_base_6_wd = reg_wdata[16:8];

  assign mp_region_cfg_shadowed_6_size_6_wd = reg_wdata[26:17];
  assign mp_region_cfg_shadowed_7_re = addr_hit[27] & reg_re & !reg_error;
  assign mp_region_cfg_shadowed_7_we = addr_hit[27] & reg_we & !reg_error;

  assign mp_region_cfg_shadowed_7_en_7_wd = reg_wdata[0];

  assign mp_region_cfg_shadowed_7_rd_en_7_wd = reg_wdata[1];

  assign mp_region_cfg_shadowed_7_prog_en_7_wd = reg_wdata[2];

  assign mp_region_cfg_shadowed_7_erase_en_7_wd = reg_wdata[3];

  assign mp_region_cfg_shadowed_7_scramble_en_7_wd = reg_wdata[4];

  assign mp_region_cfg_shadowed_7_ecc_en_7_wd = reg_wdata[5];

  assign mp_region_cfg_shadowed_7_he_en_7_wd = reg_wdata[6];

  assign mp_region_cfg_shadowed_7_base_7_wd = reg_wdata[16:8];

  assign mp_region_cfg_shadowed_7_size_7_wd = reg_wdata[26:17];
  assign default_region_shadowed_re = addr_hit[28] & reg_re & !reg_error;
  assign default_region_shadowed_we = addr_hit[28] & reg_we & !reg_error;

  assign default_region_shadowed_rd_en_wd = reg_wdata[0];

  assign default_region_shadowed_prog_en_wd = reg_wdata[1];

  assign default_region_shadowed_erase_en_wd = reg_wdata[2];

  assign default_region_shadowed_scramble_en_wd = reg_wdata[3];

  assign default_region_shadowed_ecc_en_wd = reg_wdata[4];

  assign default_region_shadowed_he_en_wd = reg_wdata[5];
  assign bank0_info0_regwen_0_we = addr_hit[29] & reg_we & !reg_error;

  assign bank0_info0_regwen_0_wd = reg_wdata[0];
  assign bank0_info0_regwen_1_we = addr_hit[30] & reg_we & !reg_error;

  assign bank0_info0_regwen_1_wd = reg_wdata[0];
  assign bank0_info0_regwen_2_we = addr_hit[31] & reg_we & !reg_error;

  assign bank0_info0_regwen_2_wd = reg_wdata[0];
  assign bank0_info0_regwen_3_we = addr_hit[32] & reg_we & !reg_error;

  assign bank0_info0_regwen_3_wd = reg_wdata[0];
  assign bank0_info0_regwen_4_we = addr_hit[33] & reg_we & !reg_error;

  assign bank0_info0_regwen_4_wd = reg_wdata[0];
  assign bank0_info0_regwen_5_we = addr_hit[34] & reg_we & !reg_error;

  assign bank0_info0_regwen_5_wd = reg_wdata[0];
  assign bank0_info0_regwen_6_we = addr_hit[35] & reg_we & !reg_error;

  assign bank0_info0_regwen_6_wd = reg_wdata[0];
  assign bank0_info0_regwen_7_we = addr_hit[36] & reg_we & !reg_error;

  assign bank0_info0_regwen_7_wd = reg_wdata[0];
  assign bank0_info0_regwen_8_we = addr_hit[37] & reg_we & !reg_error;

  assign bank0_info0_regwen_8_wd = reg_wdata[0];
  assign bank0_info0_regwen_9_we = addr_hit[38] & reg_we & !reg_error;

  assign bank0_info0_regwen_9_wd = reg_wdata[0];
  assign bank0_info0_page_cfg_shadowed_0_re = addr_hit[39] & reg_re & !reg_error;
  assign bank0_info0_page_cfg_shadowed_0_we = addr_hit[39] & reg_we & !reg_error;

  assign bank0_info0_page_cfg_shadowed_0_en_0_wd = reg_wdata[0];

  assign bank0_info0_page_cfg_shadowed_0_rd_en_0_wd = reg_wdata[1];

  assign bank0_info0_page_cfg_shadowed_0_prog_en_0_wd = reg_wdata[2];

  assign bank0_info0_page_cfg_shadowed_0_erase_en_0_wd = reg_wdata[3];

  assign bank0_info0_page_cfg_shadowed_0_scramble_en_0_wd = reg_wdata[4];

  assign bank0_info0_page_cfg_shadowed_0_ecc_en_0_wd = reg_wdata[5];

  assign bank0_info0_page_cfg_shadowed_0_he_en_0_wd = reg_wdata[6];
  assign bank0_info0_page_cfg_shadowed_1_re = addr_hit[40] & reg_re & !reg_error;
  assign bank0_info0_page_cfg_shadowed_1_we = addr_hit[40] & reg_we & !reg_error;

  assign bank0_info0_page_cfg_shadowed_1_en_1_wd = reg_wdata[0];

  assign bank0_info0_page_cfg_shadowed_1_rd_en_1_wd = reg_wdata[1];

  assign bank0_info0_page_cfg_shadowed_1_prog_en_1_wd = reg_wdata[2];

  assign bank0_info0_page_cfg_shadowed_1_erase_en_1_wd = reg_wdata[3];

  assign bank0_info0_page_cfg_shadowed_1_scramble_en_1_wd = reg_wdata[4];

  assign bank0_info0_page_cfg_shadowed_1_ecc_en_1_wd = reg_wdata[5];

  assign bank0_info0_page_cfg_shadowed_1_he_en_1_wd = reg_wdata[6];
  assign bank0_info0_page_cfg_shadowed_2_re = addr_hit[41] & reg_re & !reg_error;
  assign bank0_info0_page_cfg_shadowed_2_we = addr_hit[41] & reg_we & !reg_error;

  assign bank0_info0_page_cfg_shadowed_2_en_2_wd = reg_wdata[0];

  assign bank0_info0_page_cfg_shadowed_2_rd_en_2_wd = reg_wdata[1];

  assign bank0_info0_page_cfg_shadowed_2_prog_en_2_wd = reg_wdata[2];

  assign bank0_info0_page_cfg_shadowed_2_erase_en_2_wd = reg_wdata[3];

  assign bank0_info0_page_cfg_shadowed_2_scramble_en_2_wd = reg_wdata[4];

  assign bank0_info0_page_cfg_shadowed_2_ecc_en_2_wd = reg_wdata[5];

  assign bank0_info0_page_cfg_shadowed_2_he_en_2_wd = reg_wdata[6];
  assign bank0_info0_page_cfg_shadowed_3_re = addr_hit[42] & reg_re & !reg_error;
  assign bank0_info0_page_cfg_shadowed_3_we = addr_hit[42] & reg_we & !reg_error;

  assign bank0_info0_page_cfg_shadowed_3_en_3_wd = reg_wdata[0];

  assign bank0_info0_page_cfg_shadowed_3_rd_en_3_wd = reg_wdata[1];

  assign bank0_info0_page_cfg_shadowed_3_prog_en_3_wd = reg_wdata[2];

  assign bank0_info0_page_cfg_shadowed_3_erase_en_3_wd = reg_wdata[3];

  assign bank0_info0_page_cfg_shadowed_3_scramble_en_3_wd = reg_wdata[4];

  assign bank0_info0_page_cfg_shadowed_3_ecc_en_3_wd = reg_wdata[5];

  assign bank0_info0_page_cfg_shadowed_3_he_en_3_wd = reg_wdata[6];
  assign bank0_info0_page_cfg_shadowed_4_re = addr_hit[43] & reg_re & !reg_error;
  assign bank0_info0_page_cfg_shadowed_4_we = addr_hit[43] & reg_we & !reg_error;

  assign bank0_info0_page_cfg_shadowed_4_en_4_wd = reg_wdata[0];

  assign bank0_info0_page_cfg_shadowed_4_rd_en_4_wd = reg_wdata[1];

  assign bank0_info0_page_cfg_shadowed_4_prog_en_4_wd = reg_wdata[2];

  assign bank0_info0_page_cfg_shadowed_4_erase_en_4_wd = reg_wdata[3];

  assign bank0_info0_page_cfg_shadowed_4_scramble_en_4_wd = reg_wdata[4];

  assign bank0_info0_page_cfg_shadowed_4_ecc_en_4_wd = reg_wdata[5];

  assign bank0_info0_page_cfg_shadowed_4_he_en_4_wd = reg_wdata[6];
  assign bank0_info0_page_cfg_shadowed_5_re = addr_hit[44] & reg_re & !reg_error;
  assign bank0_info0_page_cfg_shadowed_5_we = addr_hit[44] & reg_we & !reg_error;

  assign bank0_info0_page_cfg_shadowed_5_en_5_wd = reg_wdata[0];

  assign bank0_info0_page_cfg_shadowed_5_rd_en_5_wd = reg_wdata[1];

  assign bank0_info0_page_cfg_shadowed_5_prog_en_5_wd = reg_wdata[2];

  assign bank0_info0_page_cfg_shadowed_5_erase_en_5_wd = reg_wdata[3];

  assign bank0_info0_page_cfg_shadowed_5_scramble_en_5_wd = reg_wdata[4];

  assign bank0_info0_page_cfg_shadowed_5_ecc_en_5_wd = reg_wdata[5];

  assign bank0_info0_page_cfg_shadowed_5_he_en_5_wd = reg_wdata[6];
  assign bank0_info0_page_cfg_shadowed_6_re = addr_hit[45] & reg_re & !reg_error;
  assign bank0_info0_page_cfg_shadowed_6_we = addr_hit[45] & reg_we & !reg_error;

  assign bank0_info0_page_cfg_shadowed_6_en_6_wd = reg_wdata[0];

  assign bank0_info0_page_cfg_shadowed_6_rd_en_6_wd = reg_wdata[1];

  assign bank0_info0_page_cfg_shadowed_6_prog_en_6_wd = reg_wdata[2];

  assign bank0_info0_page_cfg_shadowed_6_erase_en_6_wd = reg_wdata[3];

  assign bank0_info0_page_cfg_shadowed_6_scramble_en_6_wd = reg_wdata[4];

  assign bank0_info0_page_cfg_shadowed_6_ecc_en_6_wd = reg_wdata[5];

  assign bank0_info0_page_cfg_shadowed_6_he_en_6_wd = reg_wdata[6];
  assign bank0_info0_page_cfg_shadowed_7_re = addr_hit[46] & reg_re & !reg_error;
  assign bank0_info0_page_cfg_shadowed_7_we = addr_hit[46] & reg_we & !reg_error;

  assign bank0_info0_page_cfg_shadowed_7_en_7_wd = reg_wdata[0];

  assign bank0_info0_page_cfg_shadowed_7_rd_en_7_wd = reg_wdata[1];

  assign bank0_info0_page_cfg_shadowed_7_prog_en_7_wd = reg_wdata[2];

  assign bank0_info0_page_cfg_shadowed_7_erase_en_7_wd = reg_wdata[3];

  assign bank0_info0_page_cfg_shadowed_7_scramble_en_7_wd = reg_wdata[4];

  assign bank0_info0_page_cfg_shadowed_7_ecc_en_7_wd = reg_wdata[5];

  assign bank0_info0_page_cfg_shadowed_7_he_en_7_wd = reg_wdata[6];
  assign bank0_info0_page_cfg_shadowed_8_re = addr_hit[47] & reg_re & !reg_error;
  assign bank0_info0_page_cfg_shadowed_8_we = addr_hit[47] & reg_we & !reg_error;

  assign bank0_info0_page_cfg_shadowed_8_en_8_wd = reg_wdata[0];

  assign bank0_info0_page_cfg_shadowed_8_rd_en_8_wd = reg_wdata[1];

  assign bank0_info0_page_cfg_shadowed_8_prog_en_8_wd = reg_wdata[2];

  assign bank0_info0_page_cfg_shadowed_8_erase_en_8_wd = reg_wdata[3];

  assign bank0_info0_page_cfg_shadowed_8_scramble_en_8_wd = reg_wdata[4];

  assign bank0_info0_page_cfg_shadowed_8_ecc_en_8_wd = reg_wdata[5];

  assign bank0_info0_page_cfg_shadowed_8_he_en_8_wd = reg_wdata[6];
  assign bank0_info0_page_cfg_shadowed_9_re = addr_hit[48] & reg_re & !reg_error;
  assign bank0_info0_page_cfg_shadowed_9_we = addr_hit[48] & reg_we & !reg_error;

  assign bank0_info0_page_cfg_shadowed_9_en_9_wd = reg_wdata[0];

  assign bank0_info0_page_cfg_shadowed_9_rd_en_9_wd = reg_wdata[1];

  assign bank0_info0_page_cfg_shadowed_9_prog_en_9_wd = reg_wdata[2];

  assign bank0_info0_page_cfg_shadowed_9_erase_en_9_wd = reg_wdata[3];

  assign bank0_info0_page_cfg_shadowed_9_scramble_en_9_wd = reg_wdata[4];

  assign bank0_info0_page_cfg_shadowed_9_ecc_en_9_wd = reg_wdata[5];

  assign bank0_info0_page_cfg_shadowed_9_he_en_9_wd = reg_wdata[6];
  assign bank0_info1_regwen_we = addr_hit[49] & reg_we & !reg_error;

  assign bank0_info1_regwen_wd = reg_wdata[0];
  assign bank0_info1_page_cfg_shadowed_re = addr_hit[50] & reg_re & !reg_error;
  assign bank0_info1_page_cfg_shadowed_we = addr_hit[50] & reg_we & !reg_error;

  assign bank0_info1_page_cfg_shadowed_en_0_wd = reg_wdata[0];

  assign bank0_info1_page_cfg_shadowed_rd_en_0_wd = reg_wdata[1];

  assign bank0_info1_page_cfg_shadowed_prog_en_0_wd = reg_wdata[2];

  assign bank0_info1_page_cfg_shadowed_erase_en_0_wd = reg_wdata[3];

  assign bank0_info1_page_cfg_shadowed_scramble_en_0_wd = reg_wdata[4];

  assign bank0_info1_page_cfg_shadowed_ecc_en_0_wd = reg_wdata[5];

  assign bank0_info1_page_cfg_shadowed_he_en_0_wd = reg_wdata[6];
  assign bank0_info2_regwen_0_we = addr_hit[51] & reg_we & !reg_error;

  assign bank0_info2_regwen_0_wd = reg_wdata[0];
  assign bank0_info2_regwen_1_we = addr_hit[52] & reg_we & !reg_error;

  assign bank0_info2_regwen_1_wd = reg_wdata[0];
  assign bank0_info2_page_cfg_shadowed_0_re = addr_hit[53] & reg_re & !reg_error;
  assign bank0_info2_page_cfg_shadowed_0_we = addr_hit[53] & reg_we & !reg_error;

  assign bank0_info2_page_cfg_shadowed_0_en_0_wd = reg_wdata[0];

  assign bank0_info2_page_cfg_shadowed_0_rd_en_0_wd = reg_wdata[1];

  assign bank0_info2_page_cfg_shadowed_0_prog_en_0_wd = reg_wdata[2];

  assign bank0_info2_page_cfg_shadowed_0_erase_en_0_wd = reg_wdata[3];

  assign bank0_info2_page_cfg_shadowed_0_scramble_en_0_wd = reg_wdata[4];

  assign bank0_info2_page_cfg_shadowed_0_ecc_en_0_wd = reg_wdata[5];

  assign bank0_info2_page_cfg_shadowed_0_he_en_0_wd = reg_wdata[6];
  assign bank0_info2_page_cfg_shadowed_1_re = addr_hit[54] & reg_re & !reg_error;
  assign bank0_info2_page_cfg_shadowed_1_we = addr_hit[54] & reg_we & !reg_error;

  assign bank0_info2_page_cfg_shadowed_1_en_1_wd = reg_wdata[0];

  assign bank0_info2_page_cfg_shadowed_1_rd_en_1_wd = reg_wdata[1];

  assign bank0_info2_page_cfg_shadowed_1_prog_en_1_wd = reg_wdata[2];

  assign bank0_info2_page_cfg_shadowed_1_erase_en_1_wd = reg_wdata[3];

  assign bank0_info2_page_cfg_shadowed_1_scramble_en_1_wd = reg_wdata[4];

  assign bank0_info2_page_cfg_shadowed_1_ecc_en_1_wd = reg_wdata[5];

  assign bank0_info2_page_cfg_shadowed_1_he_en_1_wd = reg_wdata[6];
  assign bank1_info0_regwen_0_we = addr_hit[55] & reg_we & !reg_error;

  assign bank1_info0_regwen_0_wd = reg_wdata[0];
  assign bank1_info0_regwen_1_we = addr_hit[56] & reg_we & !reg_error;

  assign bank1_info0_regwen_1_wd = reg_wdata[0];
  assign bank1_info0_regwen_2_we = addr_hit[57] & reg_we & !reg_error;

  assign bank1_info0_regwen_2_wd = reg_wdata[0];
  assign bank1_info0_regwen_3_we = addr_hit[58] & reg_we & !reg_error;

  assign bank1_info0_regwen_3_wd = reg_wdata[0];
  assign bank1_info0_regwen_4_we = addr_hit[59] & reg_we & !reg_error;

  assign bank1_info0_regwen_4_wd = reg_wdata[0];
  assign bank1_info0_regwen_5_we = addr_hit[60] & reg_we & !reg_error;

  assign bank1_info0_regwen_5_wd = reg_wdata[0];
  assign bank1_info0_regwen_6_we = addr_hit[61] & reg_we & !reg_error;

  assign bank1_info0_regwen_6_wd = reg_wdata[0];
  assign bank1_info0_regwen_7_we = addr_hit[62] & reg_we & !reg_error;

  assign bank1_info0_regwen_7_wd = reg_wdata[0];
  assign bank1_info0_regwen_8_we = addr_hit[63] & reg_we & !reg_error;

  assign bank1_info0_regwen_8_wd = reg_wdata[0];
  assign bank1_info0_regwen_9_we = addr_hit[64] & reg_we & !reg_error;

  assign bank1_info0_regwen_9_wd = reg_wdata[0];
  assign bank1_info0_page_cfg_shadowed_0_re = addr_hit[65] & reg_re & !reg_error;
  assign bank1_info0_page_cfg_shadowed_0_we = addr_hit[65] & reg_we & !reg_error;

  assign bank1_info0_page_cfg_shadowed_0_en_0_wd = reg_wdata[0];

  assign bank1_info0_page_cfg_shadowed_0_rd_en_0_wd = reg_wdata[1];

  assign bank1_info0_page_cfg_shadowed_0_prog_en_0_wd = reg_wdata[2];

  assign bank1_info0_page_cfg_shadowed_0_erase_en_0_wd = reg_wdata[3];

  assign bank1_info0_page_cfg_shadowed_0_scramble_en_0_wd = reg_wdata[4];

  assign bank1_info0_page_cfg_shadowed_0_ecc_en_0_wd = reg_wdata[5];

  assign bank1_info0_page_cfg_shadowed_0_he_en_0_wd = reg_wdata[6];
  assign bank1_info0_page_cfg_shadowed_1_re = addr_hit[66] & reg_re & !reg_error;
  assign bank1_info0_page_cfg_shadowed_1_we = addr_hit[66] & reg_we & !reg_error;

  assign bank1_info0_page_cfg_shadowed_1_en_1_wd = reg_wdata[0];

  assign bank1_info0_page_cfg_shadowed_1_rd_en_1_wd = reg_wdata[1];

  assign bank1_info0_page_cfg_shadowed_1_prog_en_1_wd = reg_wdata[2];

  assign bank1_info0_page_cfg_shadowed_1_erase_en_1_wd = reg_wdata[3];

  assign bank1_info0_page_cfg_shadowed_1_scramble_en_1_wd = reg_wdata[4];

  assign bank1_info0_page_cfg_shadowed_1_ecc_en_1_wd = reg_wdata[5];

  assign bank1_info0_page_cfg_shadowed_1_he_en_1_wd = reg_wdata[6];
  assign bank1_info0_page_cfg_shadowed_2_re = addr_hit[67] & reg_re & !reg_error;
  assign bank1_info0_page_cfg_shadowed_2_we = addr_hit[67] & reg_we & !reg_error;

  assign bank1_info0_page_cfg_shadowed_2_en_2_wd = reg_wdata[0];

  assign bank1_info0_page_cfg_shadowed_2_rd_en_2_wd = reg_wdata[1];

  assign bank1_info0_page_cfg_shadowed_2_prog_en_2_wd = reg_wdata[2];

  assign bank1_info0_page_cfg_shadowed_2_erase_en_2_wd = reg_wdata[3];

  assign bank1_info0_page_cfg_shadowed_2_scramble_en_2_wd = reg_wdata[4];

  assign bank1_info0_page_cfg_shadowed_2_ecc_en_2_wd = reg_wdata[5];

  assign bank1_info0_page_cfg_shadowed_2_he_en_2_wd = reg_wdata[6];
  assign bank1_info0_page_cfg_shadowed_3_re = addr_hit[68] & reg_re & !reg_error;
  assign bank1_info0_page_cfg_shadowed_3_we = addr_hit[68] & reg_we & !reg_error;

  assign bank1_info0_page_cfg_shadowed_3_en_3_wd = reg_wdata[0];

  assign bank1_info0_page_cfg_shadowed_3_rd_en_3_wd = reg_wdata[1];

  assign bank1_info0_page_cfg_shadowed_3_prog_en_3_wd = reg_wdata[2];

  assign bank1_info0_page_cfg_shadowed_3_erase_en_3_wd = reg_wdata[3];

  assign bank1_info0_page_cfg_shadowed_3_scramble_en_3_wd = reg_wdata[4];

  assign bank1_info0_page_cfg_shadowed_3_ecc_en_3_wd = reg_wdata[5];

  assign bank1_info0_page_cfg_shadowed_3_he_en_3_wd = reg_wdata[6];
  assign bank1_info0_page_cfg_shadowed_4_re = addr_hit[69] & reg_re & !reg_error;
  assign bank1_info0_page_cfg_shadowed_4_we = addr_hit[69] & reg_we & !reg_error;

  assign bank1_info0_page_cfg_shadowed_4_en_4_wd = reg_wdata[0];

  assign bank1_info0_page_cfg_shadowed_4_rd_en_4_wd = reg_wdata[1];

  assign bank1_info0_page_cfg_shadowed_4_prog_en_4_wd = reg_wdata[2];

  assign bank1_info0_page_cfg_shadowed_4_erase_en_4_wd = reg_wdata[3];

  assign bank1_info0_page_cfg_shadowed_4_scramble_en_4_wd = reg_wdata[4];

  assign bank1_info0_page_cfg_shadowed_4_ecc_en_4_wd = reg_wdata[5];

  assign bank1_info0_page_cfg_shadowed_4_he_en_4_wd = reg_wdata[6];
  assign bank1_info0_page_cfg_shadowed_5_re = addr_hit[70] & reg_re & !reg_error;
  assign bank1_info0_page_cfg_shadowed_5_we = addr_hit[70] & reg_we & !reg_error;

  assign bank1_info0_page_cfg_shadowed_5_en_5_wd = reg_wdata[0];

  assign bank1_info0_page_cfg_shadowed_5_rd_en_5_wd = reg_wdata[1];

  assign bank1_info0_page_cfg_shadowed_5_prog_en_5_wd = reg_wdata[2];

  assign bank1_info0_page_cfg_shadowed_5_erase_en_5_wd = reg_wdata[3];

  assign bank1_info0_page_cfg_shadowed_5_scramble_en_5_wd = reg_wdata[4];

  assign bank1_info0_page_cfg_shadowed_5_ecc_en_5_wd = reg_wdata[5];

  assign bank1_info0_page_cfg_shadowed_5_he_en_5_wd = reg_wdata[6];
  assign bank1_info0_page_cfg_shadowed_6_re = addr_hit[71] & reg_re & !reg_error;
  assign bank1_info0_page_cfg_shadowed_6_we = addr_hit[71] & reg_we & !reg_error;

  assign bank1_info0_page_cfg_shadowed_6_en_6_wd = reg_wdata[0];

  assign bank1_info0_page_cfg_shadowed_6_rd_en_6_wd = reg_wdata[1];

  assign bank1_info0_page_cfg_shadowed_6_prog_en_6_wd = reg_wdata[2];

  assign bank1_info0_page_cfg_shadowed_6_erase_en_6_wd = reg_wdata[3];

  assign bank1_info0_page_cfg_shadowed_6_scramble_en_6_wd = reg_wdata[4];

  assign bank1_info0_page_cfg_shadowed_6_ecc_en_6_wd = reg_wdata[5];

  assign bank1_info0_page_cfg_shadowed_6_he_en_6_wd = reg_wdata[6];
  assign bank1_info0_page_cfg_shadowed_7_re = addr_hit[72] & reg_re & !reg_error;
  assign bank1_info0_page_cfg_shadowed_7_we = addr_hit[72] & reg_we & !reg_error;

  assign bank1_info0_page_cfg_shadowed_7_en_7_wd = reg_wdata[0];

  assign bank1_info0_page_cfg_shadowed_7_rd_en_7_wd = reg_wdata[1];

  assign bank1_info0_page_cfg_shadowed_7_prog_en_7_wd = reg_wdata[2];

  assign bank1_info0_page_cfg_shadowed_7_erase_en_7_wd = reg_wdata[3];

  assign bank1_info0_page_cfg_shadowed_7_scramble_en_7_wd = reg_wdata[4];

  assign bank1_info0_page_cfg_shadowed_7_ecc_en_7_wd = reg_wdata[5];

  assign bank1_info0_page_cfg_shadowed_7_he_en_7_wd = reg_wdata[6];
  assign bank1_info0_page_cfg_shadowed_8_re = addr_hit[73] & reg_re & !reg_error;
  assign bank1_info0_page_cfg_shadowed_8_we = addr_hit[73] & reg_we & !reg_error;

  assign bank1_info0_page_cfg_shadowed_8_en_8_wd = reg_wdata[0];

  assign bank1_info0_page_cfg_shadowed_8_rd_en_8_wd = reg_wdata[1];

  assign bank1_info0_page_cfg_shadowed_8_prog_en_8_wd = reg_wdata[2];

  assign bank1_info0_page_cfg_shadowed_8_erase_en_8_wd = reg_wdata[3];

  assign bank1_info0_page_cfg_shadowed_8_scramble_en_8_wd = reg_wdata[4];

  assign bank1_info0_page_cfg_shadowed_8_ecc_en_8_wd = reg_wdata[5];

  assign bank1_info0_page_cfg_shadowed_8_he_en_8_wd = reg_wdata[6];
  assign bank1_info0_page_cfg_shadowed_9_re = addr_hit[74] & reg_re & !reg_error;
  assign bank1_info0_page_cfg_shadowed_9_we = addr_hit[74] & reg_we & !reg_error;

  assign bank1_info0_page_cfg_shadowed_9_en_9_wd = reg_wdata[0];

  assign bank1_info0_page_cfg_shadowed_9_rd_en_9_wd = reg_wdata[1];

  assign bank1_info0_page_cfg_shadowed_9_prog_en_9_wd = reg_wdata[2];

  assign bank1_info0_page_cfg_shadowed_9_erase_en_9_wd = reg_wdata[3];

  assign bank1_info0_page_cfg_shadowed_9_scramble_en_9_wd = reg_wdata[4];

  assign bank1_info0_page_cfg_shadowed_9_ecc_en_9_wd = reg_wdata[5];

  assign bank1_info0_page_cfg_shadowed_9_he_en_9_wd = reg_wdata[6];
  assign bank1_info1_regwen_we = addr_hit[75] & reg_we & !reg_error;

  assign bank1_info1_regwen_wd = reg_wdata[0];
  assign bank1_info1_page_cfg_shadowed_re = addr_hit[76] & reg_re & !reg_error;
  assign bank1_info1_page_cfg_shadowed_we = addr_hit[76] & reg_we & !reg_error;

  assign bank1_info1_page_cfg_shadowed_en_0_wd = reg_wdata[0];

  assign bank1_info1_page_cfg_shadowed_rd_en_0_wd = reg_wdata[1];

  assign bank1_info1_page_cfg_shadowed_prog_en_0_wd = reg_wdata[2];

  assign bank1_info1_page_cfg_shadowed_erase_en_0_wd = reg_wdata[3];

  assign bank1_info1_page_cfg_shadowed_scramble_en_0_wd = reg_wdata[4];

  assign bank1_info1_page_cfg_shadowed_ecc_en_0_wd = reg_wdata[5];

  assign bank1_info1_page_cfg_shadowed_he_en_0_wd = reg_wdata[6];
  assign bank1_info2_regwen_0_we = addr_hit[77] & reg_we & !reg_error;

  assign bank1_info2_regwen_0_wd = reg_wdata[0];
  assign bank1_info2_regwen_1_we = addr_hit[78] & reg_we & !reg_error;

  assign bank1_info2_regwen_1_wd = reg_wdata[0];
  assign bank1_info2_page_cfg_shadowed_0_re = addr_hit[79] & reg_re & !reg_error;
  assign bank1_info2_page_cfg_shadowed_0_we = addr_hit[79] & reg_we & !reg_error;

  assign bank1_info2_page_cfg_shadowed_0_en_0_wd = reg_wdata[0];

  assign bank1_info2_page_cfg_shadowed_0_rd_en_0_wd = reg_wdata[1];

  assign bank1_info2_page_cfg_shadowed_0_prog_en_0_wd = reg_wdata[2];

  assign bank1_info2_page_cfg_shadowed_0_erase_en_0_wd = reg_wdata[3];

  assign bank1_info2_page_cfg_shadowed_0_scramble_en_0_wd = reg_wdata[4];

  assign bank1_info2_page_cfg_shadowed_0_ecc_en_0_wd = reg_wdata[5];

  assign bank1_info2_page_cfg_shadowed_0_he_en_0_wd = reg_wdata[6];
  assign bank1_info2_page_cfg_shadowed_1_re = addr_hit[80] & reg_re & !reg_error;
  assign bank1_info2_page_cfg_shadowed_1_we = addr_hit[80] & reg_we & !reg_error;

  assign bank1_info2_page_cfg_shadowed_1_en_1_wd = reg_wdata[0];

  assign bank1_info2_page_cfg_shadowed_1_rd_en_1_wd = reg_wdata[1];

  assign bank1_info2_page_cfg_shadowed_1_prog_en_1_wd = reg_wdata[2];

  assign bank1_info2_page_cfg_shadowed_1_erase_en_1_wd = reg_wdata[3];

  assign bank1_info2_page_cfg_shadowed_1_scramble_en_1_wd = reg_wdata[4];

  assign bank1_info2_page_cfg_shadowed_1_ecc_en_1_wd = reg_wdata[5];

  assign bank1_info2_page_cfg_shadowed_1_he_en_1_wd = reg_wdata[6];
  assign bank_cfg_regwen_we = addr_hit[81] & reg_we & !reg_error;

  assign bank_cfg_regwen_wd = reg_wdata[0];
  assign mp_bank_cfg_shadowed_re = addr_hit[82] & reg_re & !reg_error;
  assign mp_bank_cfg_shadowed_we = addr_hit[82] & reg_we & !reg_error;

  assign mp_bank_cfg_shadowed_erase_en_0_wd = reg_wdata[0];

  assign mp_bank_cfg_shadowed_erase_en_1_wd = reg_wdata[1];
  assign op_status_we = addr_hit[83] & reg_we & !reg_error;

  assign op_status_done_wd = reg_wdata[0];

  assign op_status_err_wd = reg_wdata[1];
  assign err_code_we = addr_hit[85] & reg_we & !reg_error;

  assign err_code_mp_err_wd = reg_wdata[1];

  assign err_code_rd_err_wd = reg_wdata[2];

  assign err_code_prog_win_err_wd = reg_wdata[3];

  assign err_code_prog_type_err_wd = reg_wdata[4];

  assign err_code_flash_phy_err_wd = reg_wdata[5];

  assign err_code_update_err_wd = reg_wdata[6];
  assign ecc_single_err_cnt_we = addr_hit[88] & reg_we & !reg_error;

  assign ecc_single_err_cnt_ecc_single_err_cnt_0_wd = reg_wdata[7:0];

  assign ecc_single_err_cnt_ecc_single_err_cnt_1_wd = reg_wdata[15:8];
  assign phy_alert_cfg_we = addr_hit[91] & reg_we & !reg_error;

  assign phy_alert_cfg_alert_ack_wd = reg_wdata[0];

  assign phy_alert_cfg_alert_trig_wd = reg_wdata[1];
  assign scratch_we = addr_hit[93] & reg_we & !reg_error;

  assign scratch_wd = reg_wdata[31:0];
  assign fifo_lvl_we = addr_hit[94] & reg_we & !reg_error;

  assign fifo_lvl_prog_wd = reg_wdata[4:0];

  assign fifo_lvl_rd_wd = reg_wdata[12:8];
  assign fifo_rst_we = addr_hit[95] & reg_we & !reg_error;

  assign fifo_rst_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_prog_empty_qs;
        reg_rdata_next[1] = intr_state_prog_lvl_qs;
        reg_rdata_next[2] = intr_state_rd_full_qs;
        reg_rdata_next[3] = intr_state_rd_lvl_qs;
        reg_rdata_next[4] = intr_state_op_done_qs;
        reg_rdata_next[5] = intr_state_corr_err_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_prog_empty_qs;
        reg_rdata_next[1] = intr_enable_prog_lvl_qs;
        reg_rdata_next[2] = intr_enable_rd_full_qs;
        reg_rdata_next[3] = intr_enable_rd_lvl_qs;
        reg_rdata_next[4] = intr_enable_op_done_qs;
        reg_rdata_next[5] = intr_enable_corr_err_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[3:0] = dis_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = exec_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = init_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = ctrl_regwen_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = control_start_qs;
        reg_rdata_next[5:4] = control_op_qs;
        reg_rdata_next[6] = control_prog_sel_qs;
        reg_rdata_next[7] = control_erase_sel_qs;
        reg_rdata_next[8] = control_partition_sel_qs;
        reg_rdata_next[10:9] = control_info_sel_qs;
        reg_rdata_next[27:16] = control_num_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[19:0] = addr_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = prog_type_en_normal_qs;
        reg_rdata_next[1] = prog_type_en_repair_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = erase_suspend_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = region_cfg_regwen_0_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = region_cfg_regwen_1_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = region_cfg_regwen_2_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = region_cfg_regwen_3_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = region_cfg_regwen_4_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = region_cfg_regwen_5_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = region_cfg_regwen_6_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = region_cfg_regwen_7_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = mp_region_cfg_shadowed_0_en_0_qs;
        reg_rdata_next[1] = mp_region_cfg_shadowed_0_rd_en_0_qs;
        reg_rdata_next[2] = mp_region_cfg_shadowed_0_prog_en_0_qs;
        reg_rdata_next[3] = mp_region_cfg_shadowed_0_erase_en_0_qs;
        reg_rdata_next[4] = mp_region_cfg_shadowed_0_scramble_en_0_qs;
        reg_rdata_next[5] = mp_region_cfg_shadowed_0_ecc_en_0_qs;
        reg_rdata_next[6] = mp_region_cfg_shadowed_0_he_en_0_qs;
        reg_rdata_next[16:8] = mp_region_cfg_shadowed_0_base_0_qs;
        reg_rdata_next[26:17] = mp_region_cfg_shadowed_0_size_0_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = mp_region_cfg_shadowed_1_en_1_qs;
        reg_rdata_next[1] = mp_region_cfg_shadowed_1_rd_en_1_qs;
        reg_rdata_next[2] = mp_region_cfg_shadowed_1_prog_en_1_qs;
        reg_rdata_next[3] = mp_region_cfg_shadowed_1_erase_en_1_qs;
        reg_rdata_next[4] = mp_region_cfg_shadowed_1_scramble_en_1_qs;
        reg_rdata_next[5] = mp_region_cfg_shadowed_1_ecc_en_1_qs;
        reg_rdata_next[6] = mp_region_cfg_shadowed_1_he_en_1_qs;
        reg_rdata_next[16:8] = mp_region_cfg_shadowed_1_base_1_qs;
        reg_rdata_next[26:17] = mp_region_cfg_shadowed_1_size_1_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = mp_region_cfg_shadowed_2_en_2_qs;
        reg_rdata_next[1] = mp_region_cfg_shadowed_2_rd_en_2_qs;
        reg_rdata_next[2] = mp_region_cfg_shadowed_2_prog_en_2_qs;
        reg_rdata_next[3] = mp_region_cfg_shadowed_2_erase_en_2_qs;
        reg_rdata_next[4] = mp_region_cfg_shadowed_2_scramble_en_2_qs;
        reg_rdata_next[5] = mp_region_cfg_shadowed_2_ecc_en_2_qs;
        reg_rdata_next[6] = mp_region_cfg_shadowed_2_he_en_2_qs;
        reg_rdata_next[16:8] = mp_region_cfg_shadowed_2_base_2_qs;
        reg_rdata_next[26:17] = mp_region_cfg_shadowed_2_size_2_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = mp_region_cfg_shadowed_3_en_3_qs;
        reg_rdata_next[1] = mp_region_cfg_shadowed_3_rd_en_3_qs;
        reg_rdata_next[2] = mp_region_cfg_shadowed_3_prog_en_3_qs;
        reg_rdata_next[3] = mp_region_cfg_shadowed_3_erase_en_3_qs;
        reg_rdata_next[4] = mp_region_cfg_shadowed_3_scramble_en_3_qs;
        reg_rdata_next[5] = mp_region_cfg_shadowed_3_ecc_en_3_qs;
        reg_rdata_next[6] = mp_region_cfg_shadowed_3_he_en_3_qs;
        reg_rdata_next[16:8] = mp_region_cfg_shadowed_3_base_3_qs;
        reg_rdata_next[26:17] = mp_region_cfg_shadowed_3_size_3_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = mp_region_cfg_shadowed_4_en_4_qs;
        reg_rdata_next[1] = mp_region_cfg_shadowed_4_rd_en_4_qs;
        reg_rdata_next[2] = mp_region_cfg_shadowed_4_prog_en_4_qs;
        reg_rdata_next[3] = mp_region_cfg_shadowed_4_erase_en_4_qs;
        reg_rdata_next[4] = mp_region_cfg_shadowed_4_scramble_en_4_qs;
        reg_rdata_next[5] = mp_region_cfg_shadowed_4_ecc_en_4_qs;
        reg_rdata_next[6] = mp_region_cfg_shadowed_4_he_en_4_qs;
        reg_rdata_next[16:8] = mp_region_cfg_shadowed_4_base_4_qs;
        reg_rdata_next[26:17] = mp_region_cfg_shadowed_4_size_4_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = mp_region_cfg_shadowed_5_en_5_qs;
        reg_rdata_next[1] = mp_region_cfg_shadowed_5_rd_en_5_qs;
        reg_rdata_next[2] = mp_region_cfg_shadowed_5_prog_en_5_qs;
        reg_rdata_next[3] = mp_region_cfg_shadowed_5_erase_en_5_qs;
        reg_rdata_next[4] = mp_region_cfg_shadowed_5_scramble_en_5_qs;
        reg_rdata_next[5] = mp_region_cfg_shadowed_5_ecc_en_5_qs;
        reg_rdata_next[6] = mp_region_cfg_shadowed_5_he_en_5_qs;
        reg_rdata_next[16:8] = mp_region_cfg_shadowed_5_base_5_qs;
        reg_rdata_next[26:17] = mp_region_cfg_shadowed_5_size_5_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = mp_region_cfg_shadowed_6_en_6_qs;
        reg_rdata_next[1] = mp_region_cfg_shadowed_6_rd_en_6_qs;
        reg_rdata_next[2] = mp_region_cfg_shadowed_6_prog_en_6_qs;
        reg_rdata_next[3] = mp_region_cfg_shadowed_6_erase_en_6_qs;
        reg_rdata_next[4] = mp_region_cfg_shadowed_6_scramble_en_6_qs;
        reg_rdata_next[5] = mp_region_cfg_shadowed_6_ecc_en_6_qs;
        reg_rdata_next[6] = mp_region_cfg_shadowed_6_he_en_6_qs;
        reg_rdata_next[16:8] = mp_region_cfg_shadowed_6_base_6_qs;
        reg_rdata_next[26:17] = mp_region_cfg_shadowed_6_size_6_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = mp_region_cfg_shadowed_7_en_7_qs;
        reg_rdata_next[1] = mp_region_cfg_shadowed_7_rd_en_7_qs;
        reg_rdata_next[2] = mp_region_cfg_shadowed_7_prog_en_7_qs;
        reg_rdata_next[3] = mp_region_cfg_shadowed_7_erase_en_7_qs;
        reg_rdata_next[4] = mp_region_cfg_shadowed_7_scramble_en_7_qs;
        reg_rdata_next[5] = mp_region_cfg_shadowed_7_ecc_en_7_qs;
        reg_rdata_next[6] = mp_region_cfg_shadowed_7_he_en_7_qs;
        reg_rdata_next[16:8] = mp_region_cfg_shadowed_7_base_7_qs;
        reg_rdata_next[26:17] = mp_region_cfg_shadowed_7_size_7_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = default_region_shadowed_rd_en_qs;
        reg_rdata_next[1] = default_region_shadowed_prog_en_qs;
        reg_rdata_next[2] = default_region_shadowed_erase_en_qs;
        reg_rdata_next[3] = default_region_shadowed_scramble_en_qs;
        reg_rdata_next[4] = default_region_shadowed_ecc_en_qs;
        reg_rdata_next[5] = default_region_shadowed_he_en_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = bank0_info0_regwen_0_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = bank0_info0_regwen_1_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = bank0_info0_regwen_2_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = bank0_info0_regwen_3_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[0] = bank0_info0_regwen_4_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[0] = bank0_info0_regwen_5_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0] = bank0_info0_regwen_6_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[0] = bank0_info0_regwen_7_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[0] = bank0_info0_regwen_8_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = bank0_info0_regwen_9_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[0] = bank0_info0_page_cfg_shadowed_0_en_0_qs;
        reg_rdata_next[1] = bank0_info0_page_cfg_shadowed_0_rd_en_0_qs;
        reg_rdata_next[2] = bank0_info0_page_cfg_shadowed_0_prog_en_0_qs;
        reg_rdata_next[3] = bank0_info0_page_cfg_shadowed_0_erase_en_0_qs;
        reg_rdata_next[4] = bank0_info0_page_cfg_shadowed_0_scramble_en_0_qs;
        reg_rdata_next[5] = bank0_info0_page_cfg_shadowed_0_ecc_en_0_qs;
        reg_rdata_next[6] = bank0_info0_page_cfg_shadowed_0_he_en_0_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[0] = bank0_info0_page_cfg_shadowed_1_en_1_qs;
        reg_rdata_next[1] = bank0_info0_page_cfg_shadowed_1_rd_en_1_qs;
        reg_rdata_next[2] = bank0_info0_page_cfg_shadowed_1_prog_en_1_qs;
        reg_rdata_next[3] = bank0_info0_page_cfg_shadowed_1_erase_en_1_qs;
        reg_rdata_next[4] = bank0_info0_page_cfg_shadowed_1_scramble_en_1_qs;
        reg_rdata_next[5] = bank0_info0_page_cfg_shadowed_1_ecc_en_1_qs;
        reg_rdata_next[6] = bank0_info0_page_cfg_shadowed_1_he_en_1_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[0] = bank0_info0_page_cfg_shadowed_2_en_2_qs;
        reg_rdata_next[1] = bank0_info0_page_cfg_shadowed_2_rd_en_2_qs;
        reg_rdata_next[2] = bank0_info0_page_cfg_shadowed_2_prog_en_2_qs;
        reg_rdata_next[3] = bank0_info0_page_cfg_shadowed_2_erase_en_2_qs;
        reg_rdata_next[4] = bank0_info0_page_cfg_shadowed_2_scramble_en_2_qs;
        reg_rdata_next[5] = bank0_info0_page_cfg_shadowed_2_ecc_en_2_qs;
        reg_rdata_next[6] = bank0_info0_page_cfg_shadowed_2_he_en_2_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = bank0_info0_page_cfg_shadowed_3_en_3_qs;
        reg_rdata_next[1] = bank0_info0_page_cfg_shadowed_3_rd_en_3_qs;
        reg_rdata_next[2] = bank0_info0_page_cfg_shadowed_3_prog_en_3_qs;
        reg_rdata_next[3] = bank0_info0_page_cfg_shadowed_3_erase_en_3_qs;
        reg_rdata_next[4] = bank0_info0_page_cfg_shadowed_3_scramble_en_3_qs;
        reg_rdata_next[5] = bank0_info0_page_cfg_shadowed_3_ecc_en_3_qs;
        reg_rdata_next[6] = bank0_info0_page_cfg_shadowed_3_he_en_3_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[0] = bank0_info0_page_cfg_shadowed_4_en_4_qs;
        reg_rdata_next[1] = bank0_info0_page_cfg_shadowed_4_rd_en_4_qs;
        reg_rdata_next[2] = bank0_info0_page_cfg_shadowed_4_prog_en_4_qs;
        reg_rdata_next[3] = bank0_info0_page_cfg_shadowed_4_erase_en_4_qs;
        reg_rdata_next[4] = bank0_info0_page_cfg_shadowed_4_scramble_en_4_qs;
        reg_rdata_next[5] = bank0_info0_page_cfg_shadowed_4_ecc_en_4_qs;
        reg_rdata_next[6] = bank0_info0_page_cfg_shadowed_4_he_en_4_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[0] = bank0_info0_page_cfg_shadowed_5_en_5_qs;
        reg_rdata_next[1] = bank0_info0_page_cfg_shadowed_5_rd_en_5_qs;
        reg_rdata_next[2] = bank0_info0_page_cfg_shadowed_5_prog_en_5_qs;
        reg_rdata_next[3] = bank0_info0_page_cfg_shadowed_5_erase_en_5_qs;
        reg_rdata_next[4] = bank0_info0_page_cfg_shadowed_5_scramble_en_5_qs;
        reg_rdata_next[5] = bank0_info0_page_cfg_shadowed_5_ecc_en_5_qs;
        reg_rdata_next[6] = bank0_info0_page_cfg_shadowed_5_he_en_5_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[0] = bank0_info0_page_cfg_shadowed_6_en_6_qs;
        reg_rdata_next[1] = bank0_info0_page_cfg_shadowed_6_rd_en_6_qs;
        reg_rdata_next[2] = bank0_info0_page_cfg_shadowed_6_prog_en_6_qs;
        reg_rdata_next[3] = bank0_info0_page_cfg_shadowed_6_erase_en_6_qs;
        reg_rdata_next[4] = bank0_info0_page_cfg_shadowed_6_scramble_en_6_qs;
        reg_rdata_next[5] = bank0_info0_page_cfg_shadowed_6_ecc_en_6_qs;
        reg_rdata_next[6] = bank0_info0_page_cfg_shadowed_6_he_en_6_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = bank0_info0_page_cfg_shadowed_7_en_7_qs;
        reg_rdata_next[1] = bank0_info0_page_cfg_shadowed_7_rd_en_7_qs;
        reg_rdata_next[2] = bank0_info0_page_cfg_shadowed_7_prog_en_7_qs;
        reg_rdata_next[3] = bank0_info0_page_cfg_shadowed_7_erase_en_7_qs;
        reg_rdata_next[4] = bank0_info0_page_cfg_shadowed_7_scramble_en_7_qs;
        reg_rdata_next[5] = bank0_info0_page_cfg_shadowed_7_ecc_en_7_qs;
        reg_rdata_next[6] = bank0_info0_page_cfg_shadowed_7_he_en_7_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[0] = bank0_info0_page_cfg_shadowed_8_en_8_qs;
        reg_rdata_next[1] = bank0_info0_page_cfg_shadowed_8_rd_en_8_qs;
        reg_rdata_next[2] = bank0_info0_page_cfg_shadowed_8_prog_en_8_qs;
        reg_rdata_next[3] = bank0_info0_page_cfg_shadowed_8_erase_en_8_qs;
        reg_rdata_next[4] = bank0_info0_page_cfg_shadowed_8_scramble_en_8_qs;
        reg_rdata_next[5] = bank0_info0_page_cfg_shadowed_8_ecc_en_8_qs;
        reg_rdata_next[6] = bank0_info0_page_cfg_shadowed_8_he_en_8_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = bank0_info0_page_cfg_shadowed_9_en_9_qs;
        reg_rdata_next[1] = bank0_info0_page_cfg_shadowed_9_rd_en_9_qs;
        reg_rdata_next[2] = bank0_info0_page_cfg_shadowed_9_prog_en_9_qs;
        reg_rdata_next[3] = bank0_info0_page_cfg_shadowed_9_erase_en_9_qs;
        reg_rdata_next[4] = bank0_info0_page_cfg_shadowed_9_scramble_en_9_qs;
        reg_rdata_next[5] = bank0_info0_page_cfg_shadowed_9_ecc_en_9_qs;
        reg_rdata_next[6] = bank0_info0_page_cfg_shadowed_9_he_en_9_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[0] = bank0_info1_regwen_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[0] = bank0_info1_page_cfg_shadowed_en_0_qs;
        reg_rdata_next[1] = bank0_info1_page_cfg_shadowed_rd_en_0_qs;
        reg_rdata_next[2] = bank0_info1_page_cfg_shadowed_prog_en_0_qs;
        reg_rdata_next[3] = bank0_info1_page_cfg_shadowed_erase_en_0_qs;
        reg_rdata_next[4] = bank0_info1_page_cfg_shadowed_scramble_en_0_qs;
        reg_rdata_next[5] = bank0_info1_page_cfg_shadowed_ecc_en_0_qs;
        reg_rdata_next[6] = bank0_info1_page_cfg_shadowed_he_en_0_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[0] = bank0_info2_regwen_0_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[0] = bank0_info2_regwen_1_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[0] = bank0_info2_page_cfg_shadowed_0_en_0_qs;
        reg_rdata_next[1] = bank0_info2_page_cfg_shadowed_0_rd_en_0_qs;
        reg_rdata_next[2] = bank0_info2_page_cfg_shadowed_0_prog_en_0_qs;
        reg_rdata_next[3] = bank0_info2_page_cfg_shadowed_0_erase_en_0_qs;
        reg_rdata_next[4] = bank0_info2_page_cfg_shadowed_0_scramble_en_0_qs;
        reg_rdata_next[5] = bank0_info2_page_cfg_shadowed_0_ecc_en_0_qs;
        reg_rdata_next[6] = bank0_info2_page_cfg_shadowed_0_he_en_0_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[0] = bank0_info2_page_cfg_shadowed_1_en_1_qs;
        reg_rdata_next[1] = bank0_info2_page_cfg_shadowed_1_rd_en_1_qs;
        reg_rdata_next[2] = bank0_info2_page_cfg_shadowed_1_prog_en_1_qs;
        reg_rdata_next[3] = bank0_info2_page_cfg_shadowed_1_erase_en_1_qs;
        reg_rdata_next[4] = bank0_info2_page_cfg_shadowed_1_scramble_en_1_qs;
        reg_rdata_next[5] = bank0_info2_page_cfg_shadowed_1_ecc_en_1_qs;
        reg_rdata_next[6] = bank0_info2_page_cfg_shadowed_1_he_en_1_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[0] = bank1_info0_regwen_0_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = bank1_info0_regwen_1_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[0] = bank1_info0_regwen_2_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = bank1_info0_regwen_3_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[0] = bank1_info0_regwen_4_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[0] = bank1_info0_regwen_5_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[0] = bank1_info0_regwen_6_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[0] = bank1_info0_regwen_7_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[0] = bank1_info0_regwen_8_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[0] = bank1_info0_regwen_9_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[0] = bank1_info0_page_cfg_shadowed_0_en_0_qs;
        reg_rdata_next[1] = bank1_info0_page_cfg_shadowed_0_rd_en_0_qs;
        reg_rdata_next[2] = bank1_info0_page_cfg_shadowed_0_prog_en_0_qs;
        reg_rdata_next[3] = bank1_info0_page_cfg_shadowed_0_erase_en_0_qs;
        reg_rdata_next[4] = bank1_info0_page_cfg_shadowed_0_scramble_en_0_qs;
        reg_rdata_next[5] = bank1_info0_page_cfg_shadowed_0_ecc_en_0_qs;
        reg_rdata_next[6] = bank1_info0_page_cfg_shadowed_0_he_en_0_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[0] = bank1_info0_page_cfg_shadowed_1_en_1_qs;
        reg_rdata_next[1] = bank1_info0_page_cfg_shadowed_1_rd_en_1_qs;
        reg_rdata_next[2] = bank1_info0_page_cfg_shadowed_1_prog_en_1_qs;
        reg_rdata_next[3] = bank1_info0_page_cfg_shadowed_1_erase_en_1_qs;
        reg_rdata_next[4] = bank1_info0_page_cfg_shadowed_1_scramble_en_1_qs;
        reg_rdata_next[5] = bank1_info0_page_cfg_shadowed_1_ecc_en_1_qs;
        reg_rdata_next[6] = bank1_info0_page_cfg_shadowed_1_he_en_1_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[0] = bank1_info0_page_cfg_shadowed_2_en_2_qs;
        reg_rdata_next[1] = bank1_info0_page_cfg_shadowed_2_rd_en_2_qs;
        reg_rdata_next[2] = bank1_info0_page_cfg_shadowed_2_prog_en_2_qs;
        reg_rdata_next[3] = bank1_info0_page_cfg_shadowed_2_erase_en_2_qs;
        reg_rdata_next[4] = bank1_info0_page_cfg_shadowed_2_scramble_en_2_qs;
        reg_rdata_next[5] = bank1_info0_page_cfg_shadowed_2_ecc_en_2_qs;
        reg_rdata_next[6] = bank1_info0_page_cfg_shadowed_2_he_en_2_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[0] = bank1_info0_page_cfg_shadowed_3_en_3_qs;
        reg_rdata_next[1] = bank1_info0_page_cfg_shadowed_3_rd_en_3_qs;
        reg_rdata_next[2] = bank1_info0_page_cfg_shadowed_3_prog_en_3_qs;
        reg_rdata_next[3] = bank1_info0_page_cfg_shadowed_3_erase_en_3_qs;
        reg_rdata_next[4] = bank1_info0_page_cfg_shadowed_3_scramble_en_3_qs;
        reg_rdata_next[5] = bank1_info0_page_cfg_shadowed_3_ecc_en_3_qs;
        reg_rdata_next[6] = bank1_info0_page_cfg_shadowed_3_he_en_3_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[0] = bank1_info0_page_cfg_shadowed_4_en_4_qs;
        reg_rdata_next[1] = bank1_info0_page_cfg_shadowed_4_rd_en_4_qs;
        reg_rdata_next[2] = bank1_info0_page_cfg_shadowed_4_prog_en_4_qs;
        reg_rdata_next[3] = bank1_info0_page_cfg_shadowed_4_erase_en_4_qs;
        reg_rdata_next[4] = bank1_info0_page_cfg_shadowed_4_scramble_en_4_qs;
        reg_rdata_next[5] = bank1_info0_page_cfg_shadowed_4_ecc_en_4_qs;
        reg_rdata_next[6] = bank1_info0_page_cfg_shadowed_4_he_en_4_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[0] = bank1_info0_page_cfg_shadowed_5_en_5_qs;
        reg_rdata_next[1] = bank1_info0_page_cfg_shadowed_5_rd_en_5_qs;
        reg_rdata_next[2] = bank1_info0_page_cfg_shadowed_5_prog_en_5_qs;
        reg_rdata_next[3] = bank1_info0_page_cfg_shadowed_5_erase_en_5_qs;
        reg_rdata_next[4] = bank1_info0_page_cfg_shadowed_5_scramble_en_5_qs;
        reg_rdata_next[5] = bank1_info0_page_cfg_shadowed_5_ecc_en_5_qs;
        reg_rdata_next[6] = bank1_info0_page_cfg_shadowed_5_he_en_5_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[0] = bank1_info0_page_cfg_shadowed_6_en_6_qs;
        reg_rdata_next[1] = bank1_info0_page_cfg_shadowed_6_rd_en_6_qs;
        reg_rdata_next[2] = bank1_info0_page_cfg_shadowed_6_prog_en_6_qs;
        reg_rdata_next[3] = bank1_info0_page_cfg_shadowed_6_erase_en_6_qs;
        reg_rdata_next[4] = bank1_info0_page_cfg_shadowed_6_scramble_en_6_qs;
        reg_rdata_next[5] = bank1_info0_page_cfg_shadowed_6_ecc_en_6_qs;
        reg_rdata_next[6] = bank1_info0_page_cfg_shadowed_6_he_en_6_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[0] = bank1_info0_page_cfg_shadowed_7_en_7_qs;
        reg_rdata_next[1] = bank1_info0_page_cfg_shadowed_7_rd_en_7_qs;
        reg_rdata_next[2] = bank1_info0_page_cfg_shadowed_7_prog_en_7_qs;
        reg_rdata_next[3] = bank1_info0_page_cfg_shadowed_7_erase_en_7_qs;
        reg_rdata_next[4] = bank1_info0_page_cfg_shadowed_7_scramble_en_7_qs;
        reg_rdata_next[5] = bank1_info0_page_cfg_shadowed_7_ecc_en_7_qs;
        reg_rdata_next[6] = bank1_info0_page_cfg_shadowed_7_he_en_7_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[0] = bank1_info0_page_cfg_shadowed_8_en_8_qs;
        reg_rdata_next[1] = bank1_info0_page_cfg_shadowed_8_rd_en_8_qs;
        reg_rdata_next[2] = bank1_info0_page_cfg_shadowed_8_prog_en_8_qs;
        reg_rdata_next[3] = bank1_info0_page_cfg_shadowed_8_erase_en_8_qs;
        reg_rdata_next[4] = bank1_info0_page_cfg_shadowed_8_scramble_en_8_qs;
        reg_rdata_next[5] = bank1_info0_page_cfg_shadowed_8_ecc_en_8_qs;
        reg_rdata_next[6] = bank1_info0_page_cfg_shadowed_8_he_en_8_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[0] = bank1_info0_page_cfg_shadowed_9_en_9_qs;
        reg_rdata_next[1] = bank1_info0_page_cfg_shadowed_9_rd_en_9_qs;
        reg_rdata_next[2] = bank1_info0_page_cfg_shadowed_9_prog_en_9_qs;
        reg_rdata_next[3] = bank1_info0_page_cfg_shadowed_9_erase_en_9_qs;
        reg_rdata_next[4] = bank1_info0_page_cfg_shadowed_9_scramble_en_9_qs;
        reg_rdata_next[5] = bank1_info0_page_cfg_shadowed_9_ecc_en_9_qs;
        reg_rdata_next[6] = bank1_info0_page_cfg_shadowed_9_he_en_9_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[0] = bank1_info1_regwen_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[0] = bank1_info1_page_cfg_shadowed_en_0_qs;
        reg_rdata_next[1] = bank1_info1_page_cfg_shadowed_rd_en_0_qs;
        reg_rdata_next[2] = bank1_info1_page_cfg_shadowed_prog_en_0_qs;
        reg_rdata_next[3] = bank1_info1_page_cfg_shadowed_erase_en_0_qs;
        reg_rdata_next[4] = bank1_info1_page_cfg_shadowed_scramble_en_0_qs;
        reg_rdata_next[5] = bank1_info1_page_cfg_shadowed_ecc_en_0_qs;
        reg_rdata_next[6] = bank1_info1_page_cfg_shadowed_he_en_0_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[0] = bank1_info2_regwen_0_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[0] = bank1_info2_regwen_1_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[0] = bank1_info2_page_cfg_shadowed_0_en_0_qs;
        reg_rdata_next[1] = bank1_info2_page_cfg_shadowed_0_rd_en_0_qs;
        reg_rdata_next[2] = bank1_info2_page_cfg_shadowed_0_prog_en_0_qs;
        reg_rdata_next[3] = bank1_info2_page_cfg_shadowed_0_erase_en_0_qs;
        reg_rdata_next[4] = bank1_info2_page_cfg_shadowed_0_scramble_en_0_qs;
        reg_rdata_next[5] = bank1_info2_page_cfg_shadowed_0_ecc_en_0_qs;
        reg_rdata_next[6] = bank1_info2_page_cfg_shadowed_0_he_en_0_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[0] = bank1_info2_page_cfg_shadowed_1_en_1_qs;
        reg_rdata_next[1] = bank1_info2_page_cfg_shadowed_1_rd_en_1_qs;
        reg_rdata_next[2] = bank1_info2_page_cfg_shadowed_1_prog_en_1_qs;
        reg_rdata_next[3] = bank1_info2_page_cfg_shadowed_1_erase_en_1_qs;
        reg_rdata_next[4] = bank1_info2_page_cfg_shadowed_1_scramble_en_1_qs;
        reg_rdata_next[5] = bank1_info2_page_cfg_shadowed_1_ecc_en_1_qs;
        reg_rdata_next[6] = bank1_info2_page_cfg_shadowed_1_he_en_1_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[0] = bank_cfg_regwen_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[0] = mp_bank_cfg_shadowed_erase_en_0_qs;
        reg_rdata_next[1] = mp_bank_cfg_shadowed_erase_en_1_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[0] = op_status_done_qs;
        reg_rdata_next[1] = op_status_err_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[0] = status_rd_full_qs;
        reg_rdata_next[1] = status_rd_empty_qs;
        reg_rdata_next[2] = status_prog_full_qs;
        reg_rdata_next[3] = status_prog_empty_qs;
        reg_rdata_next[4] = status_init_wip_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[1] = err_code_mp_err_qs;
        reg_rdata_next[2] = err_code_rd_err_qs;
        reg_rdata_next[3] = err_code_prog_win_err_qs;
        reg_rdata_next[4] = err_code_prog_type_err_qs;
        reg_rdata_next[5] = err_code_flash_phy_err_qs;
        reg_rdata_next[6] = err_code_update_err_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[1] = fault_status_mp_err_qs;
        reg_rdata_next[2] = fault_status_rd_err_qs;
        reg_rdata_next[3] = fault_status_prog_win_err_qs;
        reg_rdata_next[4] = fault_status_prog_type_err_qs;
        reg_rdata_next[5] = fault_status_flash_phy_err_qs;
        reg_rdata_next[6] = fault_status_reg_intg_err_qs;
        reg_rdata_next[7] = fault_status_phy_intg_err_qs;
        reg_rdata_next[8] = fault_status_lcmgr_err_qs;
        reg_rdata_next[9] = fault_status_arb_fsm_err_qs;
        reg_rdata_next[10] = fault_status_storage_err_qs;
        reg_rdata_next[11] = fault_status_seed_err_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[19:0] = err_addr_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[7:0] = ecc_single_err_cnt_ecc_single_err_cnt_0_qs;
        reg_rdata_next[15:8] = ecc_single_err_cnt_ecc_single_err_cnt_1_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[19:0] = ecc_single_err_addr_0_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[19:0] = ecc_single_err_addr_1_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[0] = phy_alert_cfg_alert_ack_qs;
        reg_rdata_next[1] = phy_alert_cfg_alert_trig_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[0] = phy_status_init_wip_qs;
        reg_rdata_next[1] = phy_status_prog_normal_avail_qs;
        reg_rdata_next[2] = phy_status_prog_repair_avail_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[31:0] = scratch_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[4:0] = fifo_lvl_prog_qs;
        reg_rdata_next[12:8] = fifo_lvl_rd_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[0] = fifo_rst_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  logic rst_done;
  logic shadow_rst_done;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      rst_done <= '0;
    end else begin
      rst_done <= 1'b1;
    end
  end

  always_ff @(posedge clk_i or negedge rst_shadowed_ni) begin
    if (!rst_shadowed_ni) begin
      shadow_rst_done <= '0;
    end else begin
      shadow_rst_done <= 1'b1;
    end
  end

  // both shadow and normal resets have been released
  assign shadow_busy = ~(rst_done & shadow_rst_done);

  // register busy
  logic reg_busy_sel;
  assign reg_busy = reg_busy_sel | shadow_busy;
  always_comb begin
    reg_busy_sel = '0;
    unique case (1'b1)
      default: begin
        reg_busy_sel  = '0;
      end
    endcase
  end


  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
