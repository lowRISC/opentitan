// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// This sequence ensures that very short transfers are exercised.

class dma_short_transfer_vseq extends dma_generic_vseq;
  `uvm_object_utils(dma_short_transfer_vseq)
  `uvm_object_new

  // We expect the transfers to be quick, so we can perform many...
  constraint iters_c {num_iters inside {[16:32]};}
  constraint transactions_c {num_txns inside {[32:80]};}

  // Permit only valid configurations for this test; invalid configurations are generated by stress
  // sequences.
  virtual function bit pick_if_config_valid();
    return 1'b1;
  endfunction

  // Randomization of DMA configuration and transfer properties; here we are restricting the
  // permissible configuration and transfers to just very short transfers, but all source and
  // destination types.
  //
  // We also deliberately leave inline operations such as SHA Digest enabled, but being careful
  // to ensure that the base constraints will enable it only if its requirements are met.
  virtual function void randomize_item(ref dma_seq_item dma_config);
    // Allow only valid DMA configurations
    dma_config.valid_dma_config = 1;
    `DV_CHECK_RANDOMIZE_WITH_FATAL(
      dma_config,
      total_data_size < 16;) // Limit to very short transfers
    `uvm_info(`gfn, $sformatf("DMA: Randomized a new transaction:%s",
                              dma_config.convert2string()), UVM_HIGH)
  endfunction

  virtual task body();
    `uvm_info(`gfn, "DMA: Starting short transfer Sequence", UVM_LOW)
    super.body();
    `uvm_info(`gfn, "DMA: Completed short transfer Sequence", UVM_LOW)
  endtask : body
endclass
