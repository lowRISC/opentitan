// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module dma_reg_top (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output dma_reg_pkg::dma_reg2hw_t reg2hw, // Write
  input  dma_reg_pkg::dma_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o
);

  import dma_reg_pkg::* ;

  localparam int AW = 8;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [48:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(49)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic intr_state_dma_done_qs;
  logic intr_state_dma_done_wd;
  logic intr_state_dma_error_qs;
  logic intr_state_dma_error_wd;
  logic intr_state_dma_memory_buffer_limit_qs;
  logic intr_state_dma_memory_buffer_limit_wd;
  logic intr_enable_we;
  logic intr_enable_dma_done_qs;
  logic intr_enable_dma_done_wd;
  logic intr_enable_dma_error_qs;
  logic intr_enable_dma_error_wd;
  logic intr_enable_dma_memory_buffer_limit_qs;
  logic intr_enable_dma_memory_buffer_limit_wd;
  logic intr_test_we;
  logic intr_test_dma_done_wd;
  logic intr_test_dma_error_wd;
  logic intr_test_dma_memory_buffer_limit_wd;
  logic alert_test_we;
  logic alert_test_wd;
  logic source_address_lo_we;
  logic [31:0] source_address_lo_qs;
  logic [31:0] source_address_lo_wd;
  logic source_address_hi_we;
  logic [31:0] source_address_hi_qs;
  logic [31:0] source_address_hi_wd;
  logic destination_address_lo_we;
  logic [31:0] destination_address_lo_qs;
  logic [31:0] destination_address_lo_wd;
  logic destination_address_hi_we;
  logic [31:0] destination_address_hi_qs;
  logic [31:0] destination_address_hi_wd;
  logic address_space_id_we;
  logic [3:0] address_space_id_source_asid_qs;
  logic [3:0] address_space_id_source_asid_wd;
  logic [3:0] address_space_id_destination_asid_qs;
  logic [3:0] address_space_id_destination_asid_wd;
  logic enabled_memory_range_base_we;
  logic [31:0] enabled_memory_range_base_qs;
  logic [31:0] enabled_memory_range_base_wd;
  logic enabled_memory_range_limit_we;
  logic [31:0] enabled_memory_range_limit_qs;
  logic [31:0] enabled_memory_range_limit_wd;
  logic range_unlock_regwen_we;
  logic [3:0] range_unlock_regwen_qs;
  logic [3:0] range_unlock_regwen_wd;
  logic total_data_size_we;
  logic [31:0] total_data_size_qs;
  logic [31:0] total_data_size_wd;
  logic transfer_width_we;
  logic [1:0] transfer_width_qs;
  logic [1:0] transfer_width_wd;
  logic destination_address_limit_lo_we;
  logic [31:0] destination_address_limit_lo_qs;
  logic [31:0] destination_address_limit_lo_wd;
  logic destination_address_limit_hi_we;
  logic [31:0] destination_address_limit_hi_qs;
  logic [31:0] destination_address_limit_hi_wd;
  logic destination_address_almost_limit_lo_we;
  logic [31:0] destination_address_almost_limit_lo_qs;
  logic [31:0] destination_address_almost_limit_lo_wd;
  logic destination_address_almost_limit_hi_we;
  logic [31:0] destination_address_almost_limit_hi_qs;
  logic [31:0] destination_address_almost_limit_hi_wd;
  logic control_we;
  logic [3:0] control_opcode_qs;
  logic [3:0] control_opcode_wd;
  logic control_hardware_handshake_enable_qs;
  logic control_hardware_handshake_enable_wd;
  logic control_memory_buffer_auto_increment_enable_qs;
  logic control_memory_buffer_auto_increment_enable_wd;
  logic control_fifo_auto_increment_enable_qs;
  logic control_fifo_auto_increment_enable_wd;
  logic control_data_direction_qs;
  logic control_data_direction_wd;
  logic control_abort_wd;
  logic control_go_qs;
  logic control_go_wd;
  logic status_we;
  logic status_busy_qs;
  logic status_busy_wd;
  logic status_done_qs;
  logic status_done_wd;
  logic status_aborted_qs;
  logic status_aborted_wd;
  logic status_error_qs;
  logic status_error_wd;
  logic [7:0] status_error_code_qs;
  logic [7:0] status_error_code_wd;
  logic clear_state_we;
  logic clear_state_qs;
  logic clear_state_wd;
  logic handshake_interrupt_enable_we;
  logic [31:0] handshake_interrupt_enable_qs;
  logic [31:0] handshake_interrupt_enable_wd;
  logic clear_int_src_we;
  logic [4:0] clear_int_src_qs;
  logic [4:0] clear_int_src_wd;
  logic int_source_addr_0_we;
  logic [31:0] int_source_addr_0_qs;
  logic [31:0] int_source_addr_0_wd;
  logic int_source_addr_1_we;
  logic [31:0] int_source_addr_1_qs;
  logic [31:0] int_source_addr_1_wd;
  logic int_source_addr_2_we;
  logic [31:0] int_source_addr_2_qs;
  logic [31:0] int_source_addr_2_wd;
  logic int_source_addr_3_we;
  logic [31:0] int_source_addr_3_qs;
  logic [31:0] int_source_addr_3_wd;
  logic int_source_addr_4_we;
  logic [31:0] int_source_addr_4_qs;
  logic [31:0] int_source_addr_4_wd;
  logic int_source_wr_val_0_we;
  logic [31:0] int_source_wr_val_0_qs;
  logic [31:0] int_source_wr_val_0_wd;
  logic int_source_wr_val_1_we;
  logic [31:0] int_source_wr_val_1_qs;
  logic [31:0] int_source_wr_val_1_wd;
  logic int_source_wr_val_2_we;
  logic [31:0] int_source_wr_val_2_qs;
  logic [31:0] int_source_wr_val_2_wd;
  logic int_source_wr_val_3_we;
  logic [31:0] int_source_wr_val_3_qs;
  logic [31:0] int_source_wr_val_3_wd;
  logic int_source_wr_val_4_we;
  logic [31:0] int_source_wr_val_4_qs;
  logic [31:0] int_source_wr_val_4_wd;
  logic [31:0] sha2_digest_0_qs;
  logic [31:0] sha2_digest_1_qs;
  logic [31:0] sha2_digest_2_qs;
  logic [31:0] sha2_digest_3_qs;
  logic [31:0] sha2_digest_4_qs;
  logic [31:0] sha2_digest_5_qs;
  logic [31:0] sha2_digest_6_qs;
  logic [31:0] sha2_digest_7_qs;
  logic [31:0] sha2_digest_8_qs;
  logic [31:0] sha2_digest_9_qs;
  logic [31:0] sha2_digest_10_qs;
  logic [31:0] sha2_digest_11_qs;
  logic [31:0] sha2_digest_12_qs;
  logic [31:0] sha2_digest_13_qs;
  logic [31:0] sha2_digest_14_qs;
  logic [31:0] sha2_digest_15_qs;

  // Register instances
  // R[intr_state]: V(False)
  //   F[dma_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_dma_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_dma_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.dma_done.de),
    .d      (hw2reg.intr_state.dma_done.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.dma_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_dma_done_qs)
  );

  //   F[dma_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_dma_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_dma_error_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.dma_error.de),
    .d      (hw2reg.intr_state.dma_error.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.dma_error.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_dma_error_qs)
  );

  //   F[dma_memory_buffer_limit]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_dma_memory_buffer_limit (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_dma_memory_buffer_limit_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.dma_memory_buffer_limit.de),
    .d      (hw2reg.intr_state.dma_memory_buffer_limit.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.dma_memory_buffer_limit.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_dma_memory_buffer_limit_qs)
  );


  // R[intr_enable]: V(False)
  //   F[dma_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_dma_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_dma_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.dma_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_dma_done_qs)
  );

  //   F[dma_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_dma_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_dma_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.dma_error.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_dma_error_qs)
  );

  //   F[dma_memory_buffer_limit]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_dma_memory_buffer_limit (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_dma_memory_buffer_limit_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.dma_memory_buffer_limit.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_dma_memory_buffer_limit_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [2:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  //   F[dma_done]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_dma_done (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_dma_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.dma_done.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.dma_done.qe = intr_test_qe;

  //   F[dma_error]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_dma_error (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_dma_error_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[1]),
    .q      (reg2hw.intr_test.dma_error.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.dma_error.qe = intr_test_qe;

  //   F[dma_memory_buffer_limit]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_dma_memory_buffer_limit (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_dma_memory_buffer_limit_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[2]),
    .q      (reg2hw.intr_test.dma_memory_buffer_limit.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.dma_memory_buffer_limit.qe = intr_test_qe;


  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [0:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.qe = alert_test_qe;


  // R[source_address_lo]: V(False)
  logic source_address_lo_qe;
  logic [0:0] source_address_lo_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_source_address_lo0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&source_address_lo_flds_we),
    .q_o(source_address_lo_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_source_address_lo (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (source_address_lo_we),
    .wd     (source_address_lo_wd),

    // from internal hardware
    .de     (hw2reg.source_address_lo.de),
    .d      (hw2reg.source_address_lo.d),

    // to internal hardware
    .qe     (source_address_lo_flds_we[0]),
    .q      (reg2hw.source_address_lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (source_address_lo_qs)
  );
  assign reg2hw.source_address_lo.qe = source_address_lo_qe;


  // R[source_address_hi]: V(False)
  logic source_address_hi_qe;
  logic [0:0] source_address_hi_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_source_address_hi0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&source_address_hi_flds_we),
    .q_o(source_address_hi_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_source_address_hi (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (source_address_hi_we),
    .wd     (source_address_hi_wd),

    // from internal hardware
    .de     (hw2reg.source_address_hi.de),
    .d      (hw2reg.source_address_hi.d),

    // to internal hardware
    .qe     (source_address_hi_flds_we[0]),
    .q      (reg2hw.source_address_hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (source_address_hi_qs)
  );
  assign reg2hw.source_address_hi.qe = source_address_hi_qe;


  // R[destination_address_lo]: V(False)
  logic destination_address_lo_qe;
  logic [0:0] destination_address_lo_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_destination_address_lo0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&destination_address_lo_flds_we),
    .q_o(destination_address_lo_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_destination_address_lo (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (destination_address_lo_we),
    .wd     (destination_address_lo_wd),

    // from internal hardware
    .de     (hw2reg.destination_address_lo.de),
    .d      (hw2reg.destination_address_lo.d),

    // to internal hardware
    .qe     (destination_address_lo_flds_we[0]),
    .q      (reg2hw.destination_address_lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (destination_address_lo_qs)
  );
  assign reg2hw.destination_address_lo.qe = destination_address_lo_qe;


  // R[destination_address_hi]: V(False)
  logic destination_address_hi_qe;
  logic [0:0] destination_address_hi_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_destination_address_hi0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&destination_address_hi_flds_we),
    .q_o(destination_address_hi_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_destination_address_hi (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (destination_address_hi_we),
    .wd     (destination_address_hi_wd),

    // from internal hardware
    .de     (hw2reg.destination_address_hi.de),
    .d      (hw2reg.destination_address_hi.d),

    // to internal hardware
    .qe     (destination_address_hi_flds_we[0]),
    .q      (reg2hw.destination_address_hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (destination_address_hi_qs)
  );
  assign reg2hw.destination_address_hi.qe = destination_address_hi_qe;


  // R[address_space_id]: V(False)
  logic address_space_id_qe;
  logic [1:0] address_space_id_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_address_space_id0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&address_space_id_flds_we),
    .q_o(address_space_id_qe)
  );
  //   F[source_asid]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h7),
    .Mubi    (1'b0)
  ) u_address_space_id_source_asid (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (address_space_id_we),
    .wd     (address_space_id_source_asid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (address_space_id_flds_we[0]),
    .q      (reg2hw.address_space_id.source_asid.q),
    .ds     (),

    // to register interface (read)
    .qs     (address_space_id_source_asid_qs)
  );
  assign reg2hw.address_space_id.source_asid.qe = address_space_id_qe;

  //   F[destination_asid]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h7),
    .Mubi    (1'b0)
  ) u_address_space_id_destination_asid (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (address_space_id_we),
    .wd     (address_space_id_destination_asid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (address_space_id_flds_we[1]),
    .q      (reg2hw.address_space_id.destination_asid.q),
    .ds     (),

    // to register interface (read)
    .qs     (address_space_id_destination_asid_qs)
  );
  assign reg2hw.address_space_id.destination_asid.qe = address_space_id_qe;


  // R[enabled_memory_range_base]: V(False)
  logic enabled_memory_range_base_qe;
  logic [0:0] enabled_memory_range_base_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_enabled_memory_range_base0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&enabled_memory_range_base_flds_we),
    .q_o(enabled_memory_range_base_qe)
  );
  // Create REGWEN-gated WE signal
  logic enabled_memory_range_base_gated_we;
  assign enabled_memory_range_base_gated_we =
    enabled_memory_range_base_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_unlock_regwen_qs));
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_enabled_memory_range_base (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (enabled_memory_range_base_gated_we),
    .wd     (enabled_memory_range_base_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (enabled_memory_range_base_flds_we[0]),
    .q      (reg2hw.enabled_memory_range_base.q),
    .ds     (),

    // to register interface (read)
    .qs     (enabled_memory_range_base_qs)
  );
  assign reg2hw.enabled_memory_range_base.qe = enabled_memory_range_base_qe;


  // R[enabled_memory_range_limit]: V(False)
  logic enabled_memory_range_limit_qe;
  logic [0:0] enabled_memory_range_limit_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_enabled_memory_range_limit0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&enabled_memory_range_limit_flds_we),
    .q_o(enabled_memory_range_limit_qe)
  );
  // Create REGWEN-gated WE signal
  logic enabled_memory_range_limit_gated_we;
  assign enabled_memory_range_limit_gated_we =
    enabled_memory_range_limit_we &
          prim_mubi_pkg::mubi4_test_true_strict(prim_mubi_pkg::mubi4_t'(range_unlock_regwen_qs));
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_enabled_memory_range_limit (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (enabled_memory_range_limit_gated_we),
    .wd     (enabled_memory_range_limit_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (enabled_memory_range_limit_flds_we[0]),
    .q      (reg2hw.enabled_memory_range_limit.q),
    .ds     (),

    // to register interface (read)
    .qs     (enabled_memory_range_limit_qs)
  );
  assign reg2hw.enabled_memory_range_limit.qe = enabled_memory_range_limit_qe;


  // R[range_unlock_regwen]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (4'h6),
    .Mubi    (1'b1)
  ) u_range_unlock_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (range_unlock_regwen_we),
    .wd     (range_unlock_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.range_unlock_regwen.q),
    .ds     (),

    // to register interface (read)
    .qs     (range_unlock_regwen_qs)
  );


  // R[total_data_size]: V(False)
  logic total_data_size_qe;
  logic [0:0] total_data_size_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_total_data_size0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&total_data_size_flds_we),
    .q_o(total_data_size_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_total_data_size (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (total_data_size_we),
    .wd     (total_data_size_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (total_data_size_flds_we[0]),
    .q      (reg2hw.total_data_size.q),
    .ds     (),

    // to register interface (read)
    .qs     (total_data_size_qs)
  );
  assign reg2hw.total_data_size.qe = total_data_size_qe;


  // R[transfer_width]: V(False)
  logic transfer_width_qe;
  logic [0:0] transfer_width_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_transfer_width0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&transfer_width_flds_we),
    .q_o(transfer_width_qe)
  );
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h3),
    .Mubi    (1'b0)
  ) u_transfer_width (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (transfer_width_we),
    .wd     (transfer_width_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (transfer_width_flds_we[0]),
    .q      (reg2hw.transfer_width.q),
    .ds     (),

    // to register interface (read)
    .qs     (transfer_width_qs)
  );
  assign reg2hw.transfer_width.qe = transfer_width_qe;


  // R[destination_address_limit_lo]: V(False)
  logic destination_address_limit_lo_qe;
  logic [0:0] destination_address_limit_lo_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_destination_address_limit_lo0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&destination_address_limit_lo_flds_we),
    .q_o(destination_address_limit_lo_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_destination_address_limit_lo (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (destination_address_limit_lo_we),
    .wd     (destination_address_limit_lo_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (destination_address_limit_lo_flds_we[0]),
    .q      (reg2hw.destination_address_limit_lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (destination_address_limit_lo_qs)
  );
  assign reg2hw.destination_address_limit_lo.qe = destination_address_limit_lo_qe;


  // R[destination_address_limit_hi]: V(False)
  logic destination_address_limit_hi_qe;
  logic [0:0] destination_address_limit_hi_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_destination_address_limit_hi0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&destination_address_limit_hi_flds_we),
    .q_o(destination_address_limit_hi_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_destination_address_limit_hi (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (destination_address_limit_hi_we),
    .wd     (destination_address_limit_hi_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (destination_address_limit_hi_flds_we[0]),
    .q      (reg2hw.destination_address_limit_hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (destination_address_limit_hi_qs)
  );
  assign reg2hw.destination_address_limit_hi.qe = destination_address_limit_hi_qe;


  // R[destination_address_almost_limit_lo]: V(False)
  logic destination_address_almost_limit_lo_qe;
  logic [0:0] destination_address_almost_limit_lo_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_destination_address_almost_limit_lo0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&destination_address_almost_limit_lo_flds_we),
    .q_o(destination_address_almost_limit_lo_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_destination_address_almost_limit_lo (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (destination_address_almost_limit_lo_we),
    .wd     (destination_address_almost_limit_lo_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (destination_address_almost_limit_lo_flds_we[0]),
    .q      (reg2hw.destination_address_almost_limit_lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (destination_address_almost_limit_lo_qs)
  );
  assign reg2hw.destination_address_almost_limit_lo.qe = destination_address_almost_limit_lo_qe;


  // R[destination_address_almost_limit_hi]: V(False)
  logic destination_address_almost_limit_hi_qe;
  logic [0:0] destination_address_almost_limit_hi_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_destination_address_almost_limit_hi0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&destination_address_almost_limit_hi_flds_we),
    .q_o(destination_address_almost_limit_hi_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_destination_address_almost_limit_hi (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (destination_address_almost_limit_hi_we),
    .wd     (destination_address_almost_limit_hi_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (destination_address_almost_limit_hi_flds_we[0]),
    .q      (reg2hw.destination_address_almost_limit_hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (destination_address_almost_limit_hi_qs)
  );
  assign reg2hw.destination_address_almost_limit_hi.qe = destination_address_almost_limit_hi_qe;


  // R[control]: V(False)
  logic control_qe;
  logic [6:0] control_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_control0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&control_flds_we),
    .q_o(control_qe)
  );
  //   F[opcode]: 5:2
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h0),
    .Mubi    (1'b0)
  ) u_control_opcode (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_opcode_wd),

    // from internal hardware
    .de     (hw2reg.control.opcode.de),
    .d      (hw2reg.control.opcode.d),

    // to internal hardware
    .qe     (control_flds_we[0]),
    .q      (reg2hw.control.opcode.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_opcode_qs)
  );
  assign reg2hw.control.opcode.qe = control_qe;

  //   F[hardware_handshake_enable]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_control_hardware_handshake_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_hardware_handshake_enable_wd),

    // from internal hardware
    .de     (hw2reg.control.hardware_handshake_enable.de),
    .d      (hw2reg.control.hardware_handshake_enable.d),

    // to internal hardware
    .qe     (control_flds_we[1]),
    .q      (reg2hw.control.hardware_handshake_enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_hardware_handshake_enable_qs)
  );
  assign reg2hw.control.hardware_handshake_enable.qe = control_qe;

  //   F[memory_buffer_auto_increment_enable]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_control_memory_buffer_auto_increment_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_memory_buffer_auto_increment_enable_wd),

    // from internal hardware
    .de     (hw2reg.control.memory_buffer_auto_increment_enable.de),
    .d      (hw2reg.control.memory_buffer_auto_increment_enable.d),

    // to internal hardware
    .qe     (control_flds_we[2]),
    .q      (reg2hw.control.memory_buffer_auto_increment_enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_memory_buffer_auto_increment_enable_qs)
  );
  assign reg2hw.control.memory_buffer_auto_increment_enable.qe = control_qe;

  //   F[fifo_auto_increment_enable]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_control_fifo_auto_increment_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_fifo_auto_increment_enable_wd),

    // from internal hardware
    .de     (hw2reg.control.fifo_auto_increment_enable.de),
    .d      (hw2reg.control.fifo_auto_increment_enable.d),

    // to internal hardware
    .qe     (control_flds_we[3]),
    .q      (reg2hw.control.fifo_auto_increment_enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_fifo_auto_increment_enable_qs)
  );
  assign reg2hw.control.fifo_auto_increment_enable.qe = control_qe;

  //   F[data_direction]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_control_data_direction (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_data_direction_wd),

    // from internal hardware
    .de     (hw2reg.control.data_direction.de),
    .d      (hw2reg.control.data_direction.d),

    // to internal hardware
    .qe     (control_flds_we[4]),
    .q      (reg2hw.control.data_direction.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_data_direction_qs)
  );
  assign reg2hw.control.data_direction.qe = control_qe;

  //   F[abort]: 27:27
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessWO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_control_abort (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_abort_wd),

    // from internal hardware
    .de     (hw2reg.control.abort.de),
    .d      (hw2reg.control.abort.d),

    // to internal hardware
    .qe     (control_flds_we[5]),
    .q      (reg2hw.control.abort.q),
    .ds     (),

    // to register interface (read)
    .qs     ()
  );
  assign reg2hw.control.abort.qe = control_qe;

  //   F[go]: 31:31
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_control_go (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_go_wd),

    // from internal hardware
    .de     (hw2reg.control.go.de),
    .d      (hw2reg.control.go.d),

    // to internal hardware
    .qe     (control_flds_we[6]),
    .q      (reg2hw.control.go.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_go_qs)
  );
  assign reg2hw.control.go.qe = control_qe;


  // R[status]: V(False)
  logic status_qe;
  logic [4:0] status_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_status0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&status_flds_we),
    .q_o(status_qe)
  );
  //   F[busy]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_busy (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (status_we),
    .wd     (status_busy_wd),

    // from internal hardware
    .de     (hw2reg.status.busy.de),
    .d      (hw2reg.status.busy.d),

    // to internal hardware
    .qe     (status_flds_we[0]),
    .q      (reg2hw.status.busy.q),
    .ds     (),

    // to register interface (read)
    .qs     (status_busy_qs)
  );
  assign reg2hw.status.busy.qe = status_qe;

  //   F[done]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (status_we),
    .wd     (status_done_wd),

    // from internal hardware
    .de     (hw2reg.status.done.de),
    .d      (hw2reg.status.done.d),

    // to internal hardware
    .qe     (status_flds_we[1]),
    .q      (reg2hw.status.done.q),
    .ds     (),

    // to register interface (read)
    .qs     (status_done_qs)
  );
  assign reg2hw.status.done.qe = status_qe;

  //   F[aborted]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_aborted (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (status_we),
    .wd     (status_aborted_wd),

    // from internal hardware
    .de     (hw2reg.status.aborted.de),
    .d      (hw2reg.status.aborted.d),

    // to internal hardware
    .qe     (status_flds_we[2]),
    .q      (reg2hw.status.aborted.q),
    .ds     (),

    // to register interface (read)
    .qs     (status_aborted_qs)
  );
  assign reg2hw.status.aborted.qe = status_qe;

  //   F[error]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (status_we),
    .wd     (status_error_wd),

    // from internal hardware
    .de     (hw2reg.status.error.de),
    .d      (hw2reg.status.error.d),

    // to internal hardware
    .qe     (status_flds_we[3]),
    .q      (reg2hw.status.error.q),
    .ds     (),

    // to register interface (read)
    .qs     (status_error_qs)
  );
  assign reg2hw.status.error.qe = status_qe;

  //   F[error_code]: 11:4
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_status_error_code (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (status_we),
    .wd     (status_error_code_wd),

    // from internal hardware
    .de     (hw2reg.status.error_code.de),
    .d      (hw2reg.status.error_code.d),

    // to internal hardware
    .qe     (status_flds_we[4]),
    .q      (reg2hw.status.error_code.q),
    .ds     (),

    // to register interface (read)
    .qs     (status_error_code_qs)
  );
  assign reg2hw.status.error_code.qe = status_qe;


  // R[clear_state]: V(False)
  logic clear_state_qe;
  logic [0:0] clear_state_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_clear_state0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&clear_state_flds_we),
    .q_o(clear_state_qe)
  );
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_clear_state (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (clear_state_we),
    .wd     (clear_state_wd),

    // from internal hardware
    .de     (hw2reg.clear_state.de),
    .d      (hw2reg.clear_state.d),

    // to internal hardware
    .qe     (clear_state_flds_we[0]),
    .q      (reg2hw.clear_state.q),
    .ds     (),

    // to register interface (read)
    .qs     (clear_state_qs)
  );
  assign reg2hw.clear_state.qe = clear_state_qe;


  // R[handshake_interrupt_enable]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'hffff),
    .Mubi    (1'b0)
  ) u_handshake_interrupt_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (handshake_interrupt_enable_we),
    .wd     (handshake_interrupt_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.handshake_interrupt_enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (handshake_interrupt_enable_qs)
  );


  // R[clear_int_src]: V(False)
  logic clear_int_src_qe;
  logic [0:0] clear_int_src_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_clear_int_src0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&clear_int_src_flds_we),
    .q_o(clear_int_src_qe)
  );
  prim_subreg #(
    .DW      (5),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (5'h0)
  ) u_clear_int_src (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (clear_int_src_we),
    .wd     (clear_int_src_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (clear_int_src_flds_we[0]),
    .q      (reg2hw.clear_int_src.q),
    .ds     (),

    // to register interface (read)
    .qs     (clear_int_src_qs)
  );
  assign reg2hw.clear_int_src.qe = clear_int_src_qe;


  // Subregister 0 of Multireg int_source_addr
  // R[int_source_addr_0]: V(False)
  logic int_source_addr_0_qe;
  logic [0:0] int_source_addr_0_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_int_source_addr0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&int_source_addr_0_flds_we),
    .q_o(int_source_addr_0_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_int_source_addr_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (int_source_addr_0_we),
    .wd     (int_source_addr_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (int_source_addr_0_flds_we[0]),
    .q      (reg2hw.int_source_addr[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (int_source_addr_0_qs)
  );
  assign reg2hw.int_source_addr[0].qe = int_source_addr_0_qe;


  // Subregister 1 of Multireg int_source_addr
  // R[int_source_addr_1]: V(False)
  logic int_source_addr_1_qe;
  logic [0:0] int_source_addr_1_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_int_source_addr1_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&int_source_addr_1_flds_we),
    .q_o(int_source_addr_1_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_int_source_addr_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (int_source_addr_1_we),
    .wd     (int_source_addr_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (int_source_addr_1_flds_we[0]),
    .q      (reg2hw.int_source_addr[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (int_source_addr_1_qs)
  );
  assign reg2hw.int_source_addr[1].qe = int_source_addr_1_qe;


  // Subregister 2 of Multireg int_source_addr
  // R[int_source_addr_2]: V(False)
  logic int_source_addr_2_qe;
  logic [0:0] int_source_addr_2_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_int_source_addr2_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&int_source_addr_2_flds_we),
    .q_o(int_source_addr_2_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_int_source_addr_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (int_source_addr_2_we),
    .wd     (int_source_addr_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (int_source_addr_2_flds_we[0]),
    .q      (reg2hw.int_source_addr[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (int_source_addr_2_qs)
  );
  assign reg2hw.int_source_addr[2].qe = int_source_addr_2_qe;


  // Subregister 3 of Multireg int_source_addr
  // R[int_source_addr_3]: V(False)
  logic int_source_addr_3_qe;
  logic [0:0] int_source_addr_3_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_int_source_addr3_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&int_source_addr_3_flds_we),
    .q_o(int_source_addr_3_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_int_source_addr_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (int_source_addr_3_we),
    .wd     (int_source_addr_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (int_source_addr_3_flds_we[0]),
    .q      (reg2hw.int_source_addr[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (int_source_addr_3_qs)
  );
  assign reg2hw.int_source_addr[3].qe = int_source_addr_3_qe;


  // Subregister 4 of Multireg int_source_addr
  // R[int_source_addr_4]: V(False)
  logic int_source_addr_4_qe;
  logic [0:0] int_source_addr_4_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_int_source_addr4_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&int_source_addr_4_flds_we),
    .q_o(int_source_addr_4_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_int_source_addr_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (int_source_addr_4_we),
    .wd     (int_source_addr_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (int_source_addr_4_flds_we[0]),
    .q      (reg2hw.int_source_addr[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (int_source_addr_4_qs)
  );
  assign reg2hw.int_source_addr[4].qe = int_source_addr_4_qe;


  // Subregister 0 of Multireg int_source_wr_val
  // R[int_source_wr_val_0]: V(False)
  logic int_source_wr_val_0_qe;
  logic [0:0] int_source_wr_val_0_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_int_source_wr_val0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&int_source_wr_val_0_flds_we),
    .q_o(int_source_wr_val_0_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_int_source_wr_val_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (int_source_wr_val_0_we),
    .wd     (int_source_wr_val_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (int_source_wr_val_0_flds_we[0]),
    .q      (reg2hw.int_source_wr_val[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (int_source_wr_val_0_qs)
  );
  assign reg2hw.int_source_wr_val[0].qe = int_source_wr_val_0_qe;


  // Subregister 1 of Multireg int_source_wr_val
  // R[int_source_wr_val_1]: V(False)
  logic int_source_wr_val_1_qe;
  logic [0:0] int_source_wr_val_1_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_int_source_wr_val1_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&int_source_wr_val_1_flds_we),
    .q_o(int_source_wr_val_1_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_int_source_wr_val_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (int_source_wr_val_1_we),
    .wd     (int_source_wr_val_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (int_source_wr_val_1_flds_we[0]),
    .q      (reg2hw.int_source_wr_val[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (int_source_wr_val_1_qs)
  );
  assign reg2hw.int_source_wr_val[1].qe = int_source_wr_val_1_qe;


  // Subregister 2 of Multireg int_source_wr_val
  // R[int_source_wr_val_2]: V(False)
  logic int_source_wr_val_2_qe;
  logic [0:0] int_source_wr_val_2_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_int_source_wr_val2_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&int_source_wr_val_2_flds_we),
    .q_o(int_source_wr_val_2_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_int_source_wr_val_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (int_source_wr_val_2_we),
    .wd     (int_source_wr_val_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (int_source_wr_val_2_flds_we[0]),
    .q      (reg2hw.int_source_wr_val[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (int_source_wr_val_2_qs)
  );
  assign reg2hw.int_source_wr_val[2].qe = int_source_wr_val_2_qe;


  // Subregister 3 of Multireg int_source_wr_val
  // R[int_source_wr_val_3]: V(False)
  logic int_source_wr_val_3_qe;
  logic [0:0] int_source_wr_val_3_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_int_source_wr_val3_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&int_source_wr_val_3_flds_we),
    .q_o(int_source_wr_val_3_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_int_source_wr_val_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (int_source_wr_val_3_we),
    .wd     (int_source_wr_val_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (int_source_wr_val_3_flds_we[0]),
    .q      (reg2hw.int_source_wr_val[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (int_source_wr_val_3_qs)
  );
  assign reg2hw.int_source_wr_val[3].qe = int_source_wr_val_3_qe;


  // Subregister 4 of Multireg int_source_wr_val
  // R[int_source_wr_val_4]: V(False)
  logic int_source_wr_val_4_qe;
  logic [0:0] int_source_wr_val_4_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_int_source_wr_val4_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&int_source_wr_val_4_flds_we),
    .q_o(int_source_wr_val_4_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0)
  ) u_int_source_wr_val_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (int_source_wr_val_4_we),
    .wd     (int_source_wr_val_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (int_source_wr_val_4_flds_we[0]),
    .q      (reg2hw.int_source_wr_val[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (int_source_wr_val_4_qs)
  );
  assign reg2hw.int_source_wr_val[4].qe = int_source_wr_val_4_qe;


  // Subregister 0 of Multireg sha2_digest
  // R[sha2_digest_0]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[0].de),
    .d      (hw2reg.sha2_digest[0].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[0].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_0_qs)
  );


  // Subregister 1 of Multireg sha2_digest
  // R[sha2_digest_1]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[1].de),
    .d      (hw2reg.sha2_digest[1].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[1].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_1_qs)
  );


  // Subregister 2 of Multireg sha2_digest
  // R[sha2_digest_2]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[2].de),
    .d      (hw2reg.sha2_digest[2].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[2].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_2_qs)
  );


  // Subregister 3 of Multireg sha2_digest
  // R[sha2_digest_3]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[3].de),
    .d      (hw2reg.sha2_digest[3].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[3].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_3_qs)
  );


  // Subregister 4 of Multireg sha2_digest
  // R[sha2_digest_4]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_4 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[4].de),
    .d      (hw2reg.sha2_digest[4].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[4].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_4_qs)
  );


  // Subregister 5 of Multireg sha2_digest
  // R[sha2_digest_5]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_5 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[5].de),
    .d      (hw2reg.sha2_digest[5].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[5].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_5_qs)
  );


  // Subregister 6 of Multireg sha2_digest
  // R[sha2_digest_6]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_6 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[6].de),
    .d      (hw2reg.sha2_digest[6].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[6].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_6_qs)
  );


  // Subregister 7 of Multireg sha2_digest
  // R[sha2_digest_7]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_7 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[7].de),
    .d      (hw2reg.sha2_digest[7].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[7].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_7_qs)
  );


  // Subregister 8 of Multireg sha2_digest
  // R[sha2_digest_8]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_8 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[8].de),
    .d      (hw2reg.sha2_digest[8].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[8].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_8_qs)
  );


  // Subregister 9 of Multireg sha2_digest
  // R[sha2_digest_9]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_9 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[9].de),
    .d      (hw2reg.sha2_digest[9].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[9].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_9_qs)
  );


  // Subregister 10 of Multireg sha2_digest
  // R[sha2_digest_10]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_10 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[10].de),
    .d      (hw2reg.sha2_digest[10].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[10].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_10_qs)
  );


  // Subregister 11 of Multireg sha2_digest
  // R[sha2_digest_11]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_11 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[11].de),
    .d      (hw2reg.sha2_digest[11].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[11].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_11_qs)
  );


  // Subregister 12 of Multireg sha2_digest
  // R[sha2_digest_12]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_12 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[12].de),
    .d      (hw2reg.sha2_digest[12].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[12].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_12_qs)
  );


  // Subregister 13 of Multireg sha2_digest
  // R[sha2_digest_13]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_13 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[13].de),
    .d      (hw2reg.sha2_digest[13].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[13].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_13_qs)
  );


  // Subregister 14 of Multireg sha2_digest
  // R[sha2_digest_14]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_14 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[14].de),
    .d      (hw2reg.sha2_digest[14].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[14].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_14_qs)
  );


  // Subregister 15 of Multireg sha2_digest
  // R[sha2_digest_15]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (32'h0)
  ) u_sha2_digest_15 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.sha2_digest[15].de),
    .d      (hw2reg.sha2_digest[15].d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.sha2_digest[15].q),
    .ds     (),

    // to register interface (read)
    .qs     (sha2_digest_15_qs)
  );



  logic [48:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == DMA_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == DMA_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == DMA_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == DMA_ALERT_TEST_OFFSET);
    addr_hit[ 4] = (reg_addr == DMA_SOURCE_ADDRESS_LO_OFFSET);
    addr_hit[ 5] = (reg_addr == DMA_SOURCE_ADDRESS_HI_OFFSET);
    addr_hit[ 6] = (reg_addr == DMA_DESTINATION_ADDRESS_LO_OFFSET);
    addr_hit[ 7] = (reg_addr == DMA_DESTINATION_ADDRESS_HI_OFFSET);
    addr_hit[ 8] = (reg_addr == DMA_ADDRESS_SPACE_ID_OFFSET);
    addr_hit[ 9] = (reg_addr == DMA_ENABLED_MEMORY_RANGE_BASE_OFFSET);
    addr_hit[10] = (reg_addr == DMA_ENABLED_MEMORY_RANGE_LIMIT_OFFSET);
    addr_hit[11] = (reg_addr == DMA_RANGE_UNLOCK_REGWEN_OFFSET);
    addr_hit[12] = (reg_addr == DMA_TOTAL_DATA_SIZE_OFFSET);
    addr_hit[13] = (reg_addr == DMA_TRANSFER_WIDTH_OFFSET);
    addr_hit[14] = (reg_addr == DMA_DESTINATION_ADDRESS_LIMIT_LO_OFFSET);
    addr_hit[15] = (reg_addr == DMA_DESTINATION_ADDRESS_LIMIT_HI_OFFSET);
    addr_hit[16] = (reg_addr == DMA_DESTINATION_ADDRESS_ALMOST_LIMIT_LO_OFFSET);
    addr_hit[17] = (reg_addr == DMA_DESTINATION_ADDRESS_ALMOST_LIMIT_HI_OFFSET);
    addr_hit[18] = (reg_addr == DMA_CONTROL_OFFSET);
    addr_hit[19] = (reg_addr == DMA_STATUS_OFFSET);
    addr_hit[20] = (reg_addr == DMA_CLEAR_STATE_OFFSET);
    addr_hit[21] = (reg_addr == DMA_HANDSHAKE_INTERRUPT_ENABLE_OFFSET);
    addr_hit[22] = (reg_addr == DMA_CLEAR_INT_SRC_OFFSET);
    addr_hit[23] = (reg_addr == DMA_INT_SOURCE_ADDR_0_OFFSET);
    addr_hit[24] = (reg_addr == DMA_INT_SOURCE_ADDR_1_OFFSET);
    addr_hit[25] = (reg_addr == DMA_INT_SOURCE_ADDR_2_OFFSET);
    addr_hit[26] = (reg_addr == DMA_INT_SOURCE_ADDR_3_OFFSET);
    addr_hit[27] = (reg_addr == DMA_INT_SOURCE_ADDR_4_OFFSET);
    addr_hit[28] = (reg_addr == DMA_INT_SOURCE_WR_VAL_0_OFFSET);
    addr_hit[29] = (reg_addr == DMA_INT_SOURCE_WR_VAL_1_OFFSET);
    addr_hit[30] = (reg_addr == DMA_INT_SOURCE_WR_VAL_2_OFFSET);
    addr_hit[31] = (reg_addr == DMA_INT_SOURCE_WR_VAL_3_OFFSET);
    addr_hit[32] = (reg_addr == DMA_INT_SOURCE_WR_VAL_4_OFFSET);
    addr_hit[33] = (reg_addr == DMA_SHA2_DIGEST_0_OFFSET);
    addr_hit[34] = (reg_addr == DMA_SHA2_DIGEST_1_OFFSET);
    addr_hit[35] = (reg_addr == DMA_SHA2_DIGEST_2_OFFSET);
    addr_hit[36] = (reg_addr == DMA_SHA2_DIGEST_3_OFFSET);
    addr_hit[37] = (reg_addr == DMA_SHA2_DIGEST_4_OFFSET);
    addr_hit[38] = (reg_addr == DMA_SHA2_DIGEST_5_OFFSET);
    addr_hit[39] = (reg_addr == DMA_SHA2_DIGEST_6_OFFSET);
    addr_hit[40] = (reg_addr == DMA_SHA2_DIGEST_7_OFFSET);
    addr_hit[41] = (reg_addr == DMA_SHA2_DIGEST_8_OFFSET);
    addr_hit[42] = (reg_addr == DMA_SHA2_DIGEST_9_OFFSET);
    addr_hit[43] = (reg_addr == DMA_SHA2_DIGEST_10_OFFSET);
    addr_hit[44] = (reg_addr == DMA_SHA2_DIGEST_11_OFFSET);
    addr_hit[45] = (reg_addr == DMA_SHA2_DIGEST_12_OFFSET);
    addr_hit[46] = (reg_addr == DMA_SHA2_DIGEST_13_OFFSET);
    addr_hit[47] = (reg_addr == DMA_SHA2_DIGEST_14_OFFSET);
    addr_hit[48] = (reg_addr == DMA_SHA2_DIGEST_15_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(DMA_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(DMA_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(DMA_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(DMA_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(DMA_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(DMA_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(DMA_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(DMA_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(DMA_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(DMA_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(DMA_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(DMA_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(DMA_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(DMA_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(DMA_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(DMA_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(DMA_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(DMA_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(DMA_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(DMA_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(DMA_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(DMA_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(DMA_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(DMA_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(DMA_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(DMA_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(DMA_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(DMA_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(DMA_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(DMA_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(DMA_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(DMA_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(DMA_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(DMA_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(DMA_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(DMA_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(DMA_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(DMA_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(DMA_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(DMA_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(DMA_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(DMA_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(DMA_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(DMA_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(DMA_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(DMA_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(DMA_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(DMA_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(DMA_PERMIT[48] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;

  assign intr_state_dma_done_wd = reg_wdata[0];

  assign intr_state_dma_error_wd = reg_wdata[1];

  assign intr_state_dma_memory_buffer_limit_wd = reg_wdata[2];
  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;

  assign intr_enable_dma_done_wd = reg_wdata[0];

  assign intr_enable_dma_error_wd = reg_wdata[1];

  assign intr_enable_dma_memory_buffer_limit_wd = reg_wdata[2];
  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;

  assign intr_test_dma_done_wd = reg_wdata[0];

  assign intr_test_dma_error_wd = reg_wdata[1];

  assign intr_test_dma_memory_buffer_limit_wd = reg_wdata[2];
  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;

  assign alert_test_wd = reg_wdata[0];
  assign source_address_lo_we = addr_hit[4] & reg_we & !reg_error;

  assign source_address_lo_wd = reg_wdata[31:0];
  assign source_address_hi_we = addr_hit[5] & reg_we & !reg_error;

  assign source_address_hi_wd = reg_wdata[31:0];
  assign destination_address_lo_we = addr_hit[6] & reg_we & !reg_error;

  assign destination_address_lo_wd = reg_wdata[31:0];
  assign destination_address_hi_we = addr_hit[7] & reg_we & !reg_error;

  assign destination_address_hi_wd = reg_wdata[31:0];
  assign address_space_id_we = addr_hit[8] & reg_we & !reg_error;

  assign address_space_id_source_asid_wd = reg_wdata[3:0];

  assign address_space_id_destination_asid_wd = reg_wdata[7:4];
  assign enabled_memory_range_base_we = addr_hit[9] & reg_we & !reg_error;

  assign enabled_memory_range_base_wd = reg_wdata[31:0];
  assign enabled_memory_range_limit_we = addr_hit[10] & reg_we & !reg_error;

  assign enabled_memory_range_limit_wd = reg_wdata[31:0];
  assign range_unlock_regwen_we = addr_hit[11] & reg_we & !reg_error;

  assign range_unlock_regwen_wd = reg_wdata[3:0];
  assign total_data_size_we = addr_hit[12] & reg_we & !reg_error;

  assign total_data_size_wd = reg_wdata[31:0];
  assign transfer_width_we = addr_hit[13] & reg_we & !reg_error;

  assign transfer_width_wd = reg_wdata[1:0];
  assign destination_address_limit_lo_we = addr_hit[14] & reg_we & !reg_error;

  assign destination_address_limit_lo_wd = reg_wdata[31:0];
  assign destination_address_limit_hi_we = addr_hit[15] & reg_we & !reg_error;

  assign destination_address_limit_hi_wd = reg_wdata[31:0];
  assign destination_address_almost_limit_lo_we = addr_hit[16] & reg_we & !reg_error;

  assign destination_address_almost_limit_lo_wd = reg_wdata[31:0];
  assign destination_address_almost_limit_hi_we = addr_hit[17] & reg_we & !reg_error;

  assign destination_address_almost_limit_hi_wd = reg_wdata[31:0];
  assign control_we = addr_hit[18] & reg_we & !reg_error;

  assign control_opcode_wd = reg_wdata[5:2];

  assign control_hardware_handshake_enable_wd = reg_wdata[6];

  assign control_memory_buffer_auto_increment_enable_wd = reg_wdata[7];

  assign control_fifo_auto_increment_enable_wd = reg_wdata[8];

  assign control_data_direction_wd = reg_wdata[9];

  assign control_abort_wd = reg_wdata[27];

  assign control_go_wd = reg_wdata[31];
  assign status_we = addr_hit[19] & reg_we & !reg_error;

  assign status_busy_wd = reg_wdata[0];

  assign status_done_wd = reg_wdata[1];

  assign status_aborted_wd = reg_wdata[2];

  assign status_error_wd = reg_wdata[3];

  assign status_error_code_wd = reg_wdata[11:4];
  assign clear_state_we = addr_hit[20] & reg_we & !reg_error;

  assign clear_state_wd = reg_wdata[0];
  assign handshake_interrupt_enable_we = addr_hit[21] & reg_we & !reg_error;

  assign handshake_interrupt_enable_wd = reg_wdata[31:0];
  assign clear_int_src_we = addr_hit[22] & reg_we & !reg_error;

  assign clear_int_src_wd = reg_wdata[4:0];
  assign int_source_addr_0_we = addr_hit[23] & reg_we & !reg_error;

  assign int_source_addr_0_wd = reg_wdata[31:0];
  assign int_source_addr_1_we = addr_hit[24] & reg_we & !reg_error;

  assign int_source_addr_1_wd = reg_wdata[31:0];
  assign int_source_addr_2_we = addr_hit[25] & reg_we & !reg_error;

  assign int_source_addr_2_wd = reg_wdata[31:0];
  assign int_source_addr_3_we = addr_hit[26] & reg_we & !reg_error;

  assign int_source_addr_3_wd = reg_wdata[31:0];
  assign int_source_addr_4_we = addr_hit[27] & reg_we & !reg_error;

  assign int_source_addr_4_wd = reg_wdata[31:0];
  assign int_source_wr_val_0_we = addr_hit[28] & reg_we & !reg_error;

  assign int_source_wr_val_0_wd = reg_wdata[31:0];
  assign int_source_wr_val_1_we = addr_hit[29] & reg_we & !reg_error;

  assign int_source_wr_val_1_wd = reg_wdata[31:0];
  assign int_source_wr_val_2_we = addr_hit[30] & reg_we & !reg_error;

  assign int_source_wr_val_2_wd = reg_wdata[31:0];
  assign int_source_wr_val_3_we = addr_hit[31] & reg_we & !reg_error;

  assign int_source_wr_val_3_wd = reg_wdata[31:0];
  assign int_source_wr_val_4_we = addr_hit[32] & reg_we & !reg_error;

  assign int_source_wr_val_4_wd = reg_wdata[31:0];

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = intr_state_we;
    reg_we_check[1] = intr_enable_we;
    reg_we_check[2] = intr_test_we;
    reg_we_check[3] = alert_test_we;
    reg_we_check[4] = source_address_lo_we;
    reg_we_check[5] = source_address_hi_we;
    reg_we_check[6] = destination_address_lo_we;
    reg_we_check[7] = destination_address_hi_we;
    reg_we_check[8] = address_space_id_we;
    reg_we_check[9] = enabled_memory_range_base_gated_we;
    reg_we_check[10] = enabled_memory_range_limit_gated_we;
    reg_we_check[11] = range_unlock_regwen_we;
    reg_we_check[12] = total_data_size_we;
    reg_we_check[13] = transfer_width_we;
    reg_we_check[14] = destination_address_limit_lo_we;
    reg_we_check[15] = destination_address_limit_hi_we;
    reg_we_check[16] = destination_address_almost_limit_lo_we;
    reg_we_check[17] = destination_address_almost_limit_hi_we;
    reg_we_check[18] = control_we;
    reg_we_check[19] = status_we;
    reg_we_check[20] = clear_state_we;
    reg_we_check[21] = handshake_interrupt_enable_we;
    reg_we_check[22] = clear_int_src_we;
    reg_we_check[23] = int_source_addr_0_we;
    reg_we_check[24] = int_source_addr_1_we;
    reg_we_check[25] = int_source_addr_2_we;
    reg_we_check[26] = int_source_addr_3_we;
    reg_we_check[27] = int_source_addr_4_we;
    reg_we_check[28] = int_source_wr_val_0_we;
    reg_we_check[29] = int_source_wr_val_1_we;
    reg_we_check[30] = int_source_wr_val_2_we;
    reg_we_check[31] = int_source_wr_val_3_we;
    reg_we_check[32] = int_source_wr_val_4_we;
    reg_we_check[33] = 1'b0;
    reg_we_check[34] = 1'b0;
    reg_we_check[35] = 1'b0;
    reg_we_check[36] = 1'b0;
    reg_we_check[37] = 1'b0;
    reg_we_check[38] = 1'b0;
    reg_we_check[39] = 1'b0;
    reg_we_check[40] = 1'b0;
    reg_we_check[41] = 1'b0;
    reg_we_check[42] = 1'b0;
    reg_we_check[43] = 1'b0;
    reg_we_check[44] = 1'b0;
    reg_we_check[45] = 1'b0;
    reg_we_check[46] = 1'b0;
    reg_we_check[47] = 1'b0;
    reg_we_check[48] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_dma_done_qs;
        reg_rdata_next[1] = intr_state_dma_error_qs;
        reg_rdata_next[2] = intr_state_dma_memory_buffer_limit_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_dma_done_qs;
        reg_rdata_next[1] = intr_enable_dma_error_qs;
        reg_rdata_next[2] = intr_enable_dma_memory_buffer_limit_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = source_address_lo_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = source_address_hi_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = destination_address_lo_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = destination_address_hi_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[3:0] = address_space_id_source_asid_qs;
        reg_rdata_next[7:4] = address_space_id_destination_asid_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = enabled_memory_range_base_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = enabled_memory_range_limit_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[3:0] = range_unlock_regwen_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = total_data_size_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[1:0] = transfer_width_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = destination_address_limit_lo_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = destination_address_limit_hi_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = destination_address_almost_limit_lo_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = destination_address_almost_limit_hi_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[5:2] = control_opcode_qs;
        reg_rdata_next[6] = control_hardware_handshake_enable_qs;
        reg_rdata_next[7] = control_memory_buffer_auto_increment_enable_qs;
        reg_rdata_next[8] = control_fifo_auto_increment_enable_qs;
        reg_rdata_next[9] = control_data_direction_qs;
        reg_rdata_next[27] = '0;
        reg_rdata_next[31] = control_go_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = status_busy_qs;
        reg_rdata_next[1] = status_done_qs;
        reg_rdata_next[2] = status_aborted_qs;
        reg_rdata_next[3] = status_error_qs;
        reg_rdata_next[11:4] = status_error_code_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = clear_state_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = handshake_interrupt_enable_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[4:0] = clear_int_src_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = int_source_addr_0_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = int_source_addr_1_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = int_source_addr_2_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = int_source_addr_3_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = int_source_addr_4_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = int_source_wr_val_0_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = int_source_wr_val_1_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = int_source_wr_val_2_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = int_source_wr_val_3_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = int_source_wr_val_4_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = sha2_digest_0_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = sha2_digest_1_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = sha2_digest_2_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = sha2_digest_3_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = sha2_digest_4_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = sha2_digest_5_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = sha2_digest_6_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = sha2_digest_7_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = sha2_digest_8_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = sha2_digest_9_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = sha2_digest_10_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = sha2_digest_11_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = sha2_digest_12_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = sha2_digest_13_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = sha2_digest_14_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = sha2_digest_15_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
