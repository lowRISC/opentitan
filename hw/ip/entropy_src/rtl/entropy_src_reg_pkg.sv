// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package entropy_src_reg_pkg;

  // Param list
  parameter int EsFifoDepth = 32;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    struct packed {
      logic        q;
    } es_entropy_valid;
    struct packed {
      logic        q;
    } es_entropy_fifo_err;
  } entropy_src_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } es_entropy_valid;
    struct packed {
      logic        q;
    } es_entropy_fifo_err;
  } entropy_src_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } es_entropy_valid;
    struct packed {
      logic        q;
      logic        qe;
    } es_entropy_fifo_err;
  } entropy_src_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic        q;
  } entropy_src_reg2hw_es_regen_reg_t;

  typedef struct packed {
    logic        q;
  } entropy_src_reg2hw_es_conf_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } abi_revision;
    struct packed {
      logic [7:0]  q;
    } hw_revision;
    struct packed {
      logic [7:0]  q;
    } chip_type;
  } entropy_src_reg2hw_es_rev_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        re;
  } entropy_src_reg2hw_es_entropy_reg_t;

  typedef struct packed {
    logic        q;
  } entropy_src_reg2hw_es_ctrl_reg_t;

  typedef struct packed {
    logic        q;
  } entropy_src_reg2hw_es_status_reg_t;

  typedef struct packed {
    logic [6:0]  q;
  } entropy_src_reg2hw_es_fdepthst_reg_t;

  typedef struct packed {
    logic [6:0]  q;
    logic        qe;
  } entropy_src_reg2hw_es_thresh_reg_t;

  typedef struct packed {
    logic [15:0] q;
    logic        qe;
  } entropy_src_reg2hw_es_rate_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } entropy_src_reg2hw_es_seed_reg_t;


  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } es_entropy_valid;
    struct packed {
      logic        d;
      logic        de;
    } es_entropy_fifo_err;
  } entropy_src_hw2reg_intr_state_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } entropy_src_hw2reg_es_entropy_reg_t;

  typedef struct packed {
    logic        d;
  } entropy_src_hw2reg_es_status_reg_t;

  typedef struct packed {
    logic [6:0]  d;
  } entropy_src_hw2reg_es_fdepthst_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    entropy_src_reg2hw_intr_state_reg_t intr_state; // [133:132]
    entropy_src_reg2hw_intr_enable_reg_t intr_enable; // [131:130]
    entropy_src_reg2hw_intr_test_reg_t intr_test; // [129:126]
    entropy_src_reg2hw_es_regen_reg_t es_regen; // [125:125]
    entropy_src_reg2hw_es_conf_reg_t es_conf; // [124:124]
    entropy_src_reg2hw_es_rev_reg_t es_rev; // [123:100]
    entropy_src_reg2hw_es_entropy_reg_t es_entropy; // [99:67]
    entropy_src_reg2hw_es_ctrl_reg_t es_ctrl; // [66:66]
    entropy_src_reg2hw_es_status_reg_t es_status; // [65:65]
    entropy_src_reg2hw_es_fdepthst_reg_t es_fdepthst; // [64:58]
    entropy_src_reg2hw_es_thresh_reg_t es_thresh; // [57:50]
    entropy_src_reg2hw_es_rate_reg_t es_rate; // [49:33]
    entropy_src_reg2hw_es_seed_reg_t es_seed; // [32:0]
  } entropy_src_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    entropy_src_hw2reg_intr_state_reg_t intr_state; // [43:42]
    entropy_src_hw2reg_es_entropy_reg_t es_entropy; // [41:9]
    entropy_src_hw2reg_es_status_reg_t es_status; // [8:8]
    entropy_src_hw2reg_es_fdepthst_reg_t es_fdepthst; // [7:1]
  } entropy_src_hw2reg_t;

  // Register Address
  parameter logic [5:0] ENTROPY_SRC_INTR_STATE_OFFSET = 6'h 0;
  parameter logic [5:0] ENTROPY_SRC_INTR_ENABLE_OFFSET = 6'h 4;
  parameter logic [5:0] ENTROPY_SRC_INTR_TEST_OFFSET = 6'h 8;
  parameter logic [5:0] ENTROPY_SRC_ES_REGEN_OFFSET = 6'h c;
  parameter logic [5:0] ENTROPY_SRC_ES_CONF_OFFSET = 6'h 10;
  parameter logic [5:0] ENTROPY_SRC_ES_REV_OFFSET = 6'h 14;
  parameter logic [5:0] ENTROPY_SRC_ES_ENTROPY_OFFSET = 6'h 18;
  parameter logic [5:0] ENTROPY_SRC_ES_CTRL_OFFSET = 6'h 1c;
  parameter logic [5:0] ENTROPY_SRC_ES_STATUS_OFFSET = 6'h 20;
  parameter logic [5:0] ENTROPY_SRC_ES_FDEPTHST_OFFSET = 6'h 24;
  parameter logic [5:0] ENTROPY_SRC_ES_THRESH_OFFSET = 6'h 28;
  parameter logic [5:0] ENTROPY_SRC_ES_RATE_OFFSET = 6'h 2c;
  parameter logic [5:0] ENTROPY_SRC_ES_SEED_OFFSET = 6'h 30;


  // Register Index
  typedef enum int {
    ENTROPY_SRC_INTR_STATE,
    ENTROPY_SRC_INTR_ENABLE,
    ENTROPY_SRC_INTR_TEST,
    ENTROPY_SRC_ES_REGEN,
    ENTROPY_SRC_ES_CONF,
    ENTROPY_SRC_ES_REV,
    ENTROPY_SRC_ES_ENTROPY,
    ENTROPY_SRC_ES_CTRL,
    ENTROPY_SRC_ES_STATUS,
    ENTROPY_SRC_ES_FDEPTHST,
    ENTROPY_SRC_ES_THRESH,
    ENTROPY_SRC_ES_RATE,
    ENTROPY_SRC_ES_SEED
  } entropy_src_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] ENTROPY_SRC_PERMIT [13] = '{
    4'b 0001, // index[ 0] ENTROPY_SRC_INTR_STATE
    4'b 0001, // index[ 1] ENTROPY_SRC_INTR_ENABLE
    4'b 0001, // index[ 2] ENTROPY_SRC_INTR_TEST
    4'b 0001, // index[ 3] ENTROPY_SRC_ES_REGEN
    4'b 0001, // index[ 4] ENTROPY_SRC_ES_CONF
    4'b 0111, // index[ 5] ENTROPY_SRC_ES_REV
    4'b 1111, // index[ 6] ENTROPY_SRC_ES_ENTROPY
    4'b 0001, // index[ 7] ENTROPY_SRC_ES_CTRL
    4'b 0001, // index[ 8] ENTROPY_SRC_ES_STATUS
    4'b 0001, // index[ 9] ENTROPY_SRC_ES_FDEPTHST
    4'b 0001, // index[10] ENTROPY_SRC_ES_THRESH
    4'b 0011, // index[11] ENTROPY_SRC_ES_RATE
    4'b 1111  // index[12] ENTROPY_SRC_ES_SEED
  };
endpackage

