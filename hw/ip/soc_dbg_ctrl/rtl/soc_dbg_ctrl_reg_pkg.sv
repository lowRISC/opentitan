// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package soc_dbg_ctrl_reg_pkg;

  // Param list
  parameter int NumAlerts = 2;

  // Address widths within the block
  parameter int CoreAw = 5;
  parameter int JtagAw = 5;

  ///////////////////////////////////////////////
  // Typedefs for registers for core interface //
  ///////////////////////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } recov_ctrl_update_err;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_fault;
  } soc_dbg_ctrl_reg2hw_alert_test_reg_t;

  typedef struct packed {
    logic [3:0]  q;
  } soc_dbg_ctrl_reg2hw_debug_policy_valid_shadowed_reg_t;

  typedef struct packed {
    logic [6:0]  q;
    logic        qe;
    logic        re;
  } soc_dbg_ctrl_reg2hw_debug_policy_category_shadowed_reg_t;

  typedef struct packed {
    logic [3:0]  q;
  } soc_dbg_ctrl_reg2hw_debug_policy_relocked_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } auth_unlock_failed;
    struct packed {
      logic        q;
    } auth_unlock_success;
    struct packed {
      logic        q;
    } auth_window_closed;
    struct packed {
      logic        q;
    } auth_window_open;
    struct packed {
      logic        q;
    } auth_debug_intent_set;
  } soc_dbg_ctrl_reg2hw_status_reg_t;

  typedef struct packed {
    logic [6:0]  d;
  } soc_dbg_ctrl_hw2reg_debug_policy_category_shadowed_reg_t;

  typedef struct packed {
    logic [6:0]  d;
    logic        de;
  } soc_dbg_ctrl_hw2reg_trace_debug_policy_category_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  d;
      logic        de;
    } valid;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } relocked;
  } soc_dbg_ctrl_hw2reg_trace_debug_policy_valid_relocked_reg_t;

  // Register -> HW type for core interface
  typedef struct packed {
    soc_dbg_ctrl_reg2hw_alert_test_reg_t alert_test; // [25:22]
    soc_dbg_ctrl_reg2hw_debug_policy_valid_shadowed_reg_t debug_policy_valid_shadowed; // [21:18]
    soc_dbg_ctrl_reg2hw_debug_policy_category_shadowed_reg_t
        debug_policy_category_shadowed; // [17:9]
    soc_dbg_ctrl_reg2hw_debug_policy_relocked_reg_t debug_policy_relocked; // [8:5]
    soc_dbg_ctrl_reg2hw_status_reg_t status; // [4:0]
  } soc_dbg_ctrl_core_reg2hw_t;

  // HW -> register type for core interface
  typedef struct packed {
    soc_dbg_ctrl_hw2reg_debug_policy_category_shadowed_reg_t
        debug_policy_category_shadowed; // [24:18]
    soc_dbg_ctrl_hw2reg_trace_debug_policy_category_reg_t trace_debug_policy_category; // [17:10]
    soc_dbg_ctrl_hw2reg_trace_debug_policy_valid_relocked_reg_t
        trace_debug_policy_valid_relocked; // [9:0]
  } soc_dbg_ctrl_core_hw2reg_t;

  // Register offsets for core interface
  parameter logic [CoreAw-1:0] SOC_DBG_CTRL_ALERT_TEST_OFFSET = 5'h 0;
  parameter logic [CoreAw-1:0] SOC_DBG_CTRL_DEBUG_POLICY_VALID_SHADOWED_OFFSET = 5'h 4;
  parameter logic [CoreAw-1:0] SOC_DBG_CTRL_DEBUG_POLICY_CATEGORY_SHADOWED_OFFSET = 5'h 8;
  parameter logic [CoreAw-1:0] SOC_DBG_CTRL_DEBUG_POLICY_RELOCKED_OFFSET = 5'h c;
  parameter logic [CoreAw-1:0] SOC_DBG_CTRL_TRACE_DEBUG_POLICY_CATEGORY_OFFSET = 5'h 10;
  parameter logic [CoreAw-1:0] SOC_DBG_CTRL_TRACE_DEBUG_POLICY_VALID_RELOCKED_OFFSET = 5'h 14;
  parameter logic [CoreAw-1:0] SOC_DBG_CTRL_STATUS_OFFSET = 5'h 18;

  // Reset values for hwext registers and their fields for core interface
  parameter logic [1:0] SOC_DBG_CTRL_ALERT_TEST_RESVAL = 2'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_ALERT_TEST_RECOV_CTRL_UPDATE_ERR_RESVAL = 1'h 0;
  parameter logic [6:0] SOC_DBG_CTRL_DEBUG_POLICY_CATEGORY_SHADOWED_RESVAL = 7'h 0;
  parameter logic [6:0]
      SOC_DBG_CTRL_DEBUG_POLICY_CATEGORY_SHADOWED_DEBUG_POLICY_CATEGORY_RESVAL =
      7'h 0;

  // Register index for core interface
  typedef enum int {
    SOC_DBG_CTRL_ALERT_TEST,
    SOC_DBG_CTRL_DEBUG_POLICY_VALID_SHADOWED,
    SOC_DBG_CTRL_DEBUG_POLICY_CATEGORY_SHADOWED,
    SOC_DBG_CTRL_DEBUG_POLICY_RELOCKED,
    SOC_DBG_CTRL_TRACE_DEBUG_POLICY_CATEGORY,
    SOC_DBG_CTRL_TRACE_DEBUG_POLICY_VALID_RELOCKED,
    SOC_DBG_CTRL_STATUS
  } soc_dbg_ctrl_core_id_e;

  // Register width information to check illegal writes for core interface
  parameter logic [3:0] SOC_DBG_CTRL_CORE_PERMIT [7] = '{
    4'b 0001, // index[0] SOC_DBG_CTRL_ALERT_TEST
    4'b 0001, // index[1] SOC_DBG_CTRL_DEBUG_POLICY_VALID_SHADOWED
    4'b 0001, // index[2] SOC_DBG_CTRL_DEBUG_POLICY_CATEGORY_SHADOWED
    4'b 0001, // index[3] SOC_DBG_CTRL_DEBUG_POLICY_RELOCKED
    4'b 0001, // index[4] SOC_DBG_CTRL_TRACE_DEBUG_POLICY_CATEGORY
    4'b 0001, // index[5] SOC_DBG_CTRL_TRACE_DEBUG_POLICY_VALID_RELOCKED
    4'b 0001  // index[6] SOC_DBG_CTRL_STATUS
  };

  ///////////////////////////////////////////////
  // Typedefs for registers for jtag interface //
  ///////////////////////////////////////////////

  typedef struct packed {
    logic        q;
  } soc_dbg_ctrl_reg2hw_jtag_control_reg_t;

  typedef struct packed {
    logic [6:0]  d;
    logic        de;
  } soc_dbg_ctrl_hw2reg_jtag_trace_debug_policy_category_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  d;
      logic        de;
    } valid;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } relocked;
  } soc_dbg_ctrl_hw2reg_jtag_trace_debug_policy_valid_relocked_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } auth_debug_intent_set;
    struct packed {
      logic        d;
    } auth_window_open;
    struct packed {
      logic        d;
    } auth_window_closed;
    struct packed {
      logic        d;
    } auth_unlock_success;
    struct packed {
      logic        d;
    } auth_unlock_failed;
  } soc_dbg_ctrl_hw2reg_jtag_status_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } main_clk_status;
    struct packed {
      logic        d;
    } io_clk_status;
    struct packed {
      logic        d;
    } otp_done;
    struct packed {
      logic        d;
    } lc_done;
    struct packed {
      logic        d;
    } cpu_fetch_en;
    struct packed {
      logic [5:0]  d;
    } halt_fsm_state;
    struct packed {
      logic [2:0]  d;
    } boot_greenlight_done;
    struct packed {
      logic [2:0]  d;
    } boot_greenlight_good;
  } soc_dbg_ctrl_hw2reg_jtag_boot_status_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } soc_dbg_ctrl_hw2reg_jtag_trace_soc_dbg_state_reg_t;

  // Register -> HW type for jtag interface
  typedef struct packed {
    soc_dbg_ctrl_reg2hw_jtag_control_reg_t jtag_control; // [0:0]
  } soc_dbg_ctrl_jtag_reg2hw_t;

  // HW -> register type for jtag interface
  typedef struct packed {
    soc_dbg_ctrl_hw2reg_jtag_trace_debug_policy_category_reg_t
        jtag_trace_debug_policy_category; // [71:64]
    soc_dbg_ctrl_hw2reg_jtag_trace_debug_policy_valid_relocked_reg_t
        jtag_trace_debug_policy_valid_relocked; // [63:54]
    soc_dbg_ctrl_hw2reg_jtag_status_reg_t jtag_status; // [53:49]
    soc_dbg_ctrl_hw2reg_jtag_boot_status_reg_t jtag_boot_status; // [48:32]
    soc_dbg_ctrl_hw2reg_jtag_trace_soc_dbg_state_reg_t jtag_trace_soc_dbg_state; // [31:0]
  } soc_dbg_ctrl_jtag_hw2reg_t;

  // Register offsets for jtag interface
  parameter logic [JtagAw-1:0] SOC_DBG_CTRL_JTAG_TRACE_DEBUG_POLICY_CATEGORY_OFFSET = 5'h 0;
  parameter logic [JtagAw-1:0] SOC_DBG_CTRL_JTAG_TRACE_DEBUG_POLICY_VALID_RELOCKED_OFFSET = 5'h 4;
  parameter logic [JtagAw-1:0] SOC_DBG_CTRL_JTAG_CONTROL_OFFSET = 5'h 8;
  parameter logic [JtagAw-1:0] SOC_DBG_CTRL_JTAG_STATUS_OFFSET = 5'h c;
  parameter logic [JtagAw-1:0] SOC_DBG_CTRL_JTAG_BOOT_STATUS_OFFSET = 5'h 10;
  parameter logic [JtagAw-1:0] SOC_DBG_CTRL_JTAG_TRACE_SOC_DBG_STATE_OFFSET = 5'h 14;

  // Reset values for hwext registers and their fields for jtag interface
  parameter logic [7:0] SOC_DBG_CTRL_JTAG_STATUS_RESVAL = 8'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_JTAG_STATUS_AUTH_DEBUG_INTENT_SET_RESVAL = 1'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_JTAG_STATUS_AUTH_WINDOW_OPEN_RESVAL = 1'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_JTAG_STATUS_AUTH_WINDOW_CLOSED_RESVAL = 1'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_JTAG_STATUS_AUTH_UNLOCK_SUCCESS_RESVAL = 1'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_JTAG_STATUS_AUTH_UNLOCK_FAILED_RESVAL = 1'h 0;
  parameter logic [16:0] SOC_DBG_CTRL_JTAG_BOOT_STATUS_RESVAL = 17'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_JTAG_BOOT_STATUS_MAIN_CLK_STATUS_RESVAL = 1'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_JTAG_BOOT_STATUS_IO_CLK_STATUS_RESVAL = 1'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_JTAG_BOOT_STATUS_OTP_DONE_RESVAL = 1'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_JTAG_BOOT_STATUS_LC_DONE_RESVAL = 1'h 0;
  parameter logic [0:0] SOC_DBG_CTRL_JTAG_BOOT_STATUS_CPU_FETCH_EN_RESVAL = 1'h 0;
  parameter logic [5:0] SOC_DBG_CTRL_JTAG_BOOT_STATUS_HALT_FSM_STATE_RESVAL = 6'h 0;
  parameter logic [2:0] SOC_DBG_CTRL_JTAG_BOOT_STATUS_BOOT_GREENLIGHT_DONE_RESVAL = 3'h 0;
  parameter logic [2:0] SOC_DBG_CTRL_JTAG_BOOT_STATUS_BOOT_GREENLIGHT_GOOD_RESVAL = 3'h 0;
  parameter logic [31:0] SOC_DBG_CTRL_JTAG_TRACE_SOC_DBG_STATE_RESVAL = 32'h 0;
  parameter logic [31:0] SOC_DBG_CTRL_JTAG_TRACE_SOC_DBG_STATE_SOC_DBG_STATE_RESVAL = 32'h 0;

  // Register index for jtag interface
  typedef enum int {
    SOC_DBG_CTRL_JTAG_TRACE_DEBUG_POLICY_CATEGORY,
    SOC_DBG_CTRL_JTAG_TRACE_DEBUG_POLICY_VALID_RELOCKED,
    SOC_DBG_CTRL_JTAG_CONTROL,
    SOC_DBG_CTRL_JTAG_STATUS,
    SOC_DBG_CTRL_JTAG_BOOT_STATUS,
    SOC_DBG_CTRL_JTAG_TRACE_SOC_DBG_STATE
  } soc_dbg_ctrl_jtag_id_e;

  // Register width information to check illegal writes for jtag interface
  parameter logic [3:0] SOC_DBG_CTRL_JTAG_PERMIT [6] = '{
    4'b 0001, // index[0] SOC_DBG_CTRL_JTAG_TRACE_DEBUG_POLICY_CATEGORY
    4'b 0001, // index[1] SOC_DBG_CTRL_JTAG_TRACE_DEBUG_POLICY_VALID_RELOCKED
    4'b 0001, // index[2] SOC_DBG_CTRL_JTAG_CONTROL
    4'b 0001, // index[3] SOC_DBG_CTRL_JTAG_STATUS
    4'b 0111, // index[4] SOC_DBG_CTRL_JTAG_BOOT_STATUS
    4'b 1111  // index[5] SOC_DBG_CTRL_JTAG_TRACE_SOC_DBG_STATE
  };

endpackage
