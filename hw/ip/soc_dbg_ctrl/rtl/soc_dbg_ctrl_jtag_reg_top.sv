// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module soc_dbg_ctrl_jtag_reg_top (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output soc_dbg_ctrl_reg_pkg::soc_dbg_ctrl_jtag_reg2hw_t reg2hw, // Write
  input  soc_dbg_ctrl_reg_pkg::soc_dbg_ctrl_jtag_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o
);

  import soc_dbg_ctrl_reg_pkg::* ;

  localparam int AW = 5;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [5:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(6)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [6:0] jtag_trace_debug_policy_category_qs;
  logic [3:0] jtag_trace_debug_policy_valid_relocked_valid_qs;
  logic [3:0] jtag_trace_debug_policy_valid_relocked_relocked_qs;
  logic jtag_control_we;
  logic jtag_control_qs;
  logic jtag_control_wd;
  logic jtag_status_re;
  logic jtag_status_auth_debug_intent_set_qs;
  logic jtag_status_auth_window_open_qs;
  logic jtag_status_auth_window_closed_qs;
  logic jtag_status_auth_unlock_success_qs;
  logic jtag_status_auth_unlock_failed_qs;
  logic jtag_boot_status_re;
  logic jtag_boot_status_main_clk_status_qs;
  logic jtag_boot_status_io_clk_status_qs;
  logic jtag_boot_status_otp_done_qs;
  logic jtag_boot_status_lc_done_qs;
  logic jtag_boot_status_cpu_fetch_en_qs;
  logic [5:0] jtag_boot_status_halt_fsm_state_qs;
  logic [2:0] jtag_boot_status_boot_greenlight_done_qs;
  logic [2:0] jtag_boot_status_boot_greenlight_good_qs;
  logic jtag_trace_soc_dbg_state_re;
  logic [31:0] jtag_trace_soc_dbg_state_qs;

  // Register instances
  // R[jtag_trace_debug_policy_category]: V(False)
  prim_subreg #(
    .DW      (7),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (7'h0),
    .Mubi    (1'b0)
  ) u_jtag_trace_debug_policy_category (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.jtag_trace_debug_policy_category.de),
    .d      (hw2reg.jtag_trace_debug_policy_category.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (jtag_trace_debug_policy_category_qs)
  );


  // R[jtag_trace_debug_policy_valid_relocked]: V(False)
  //   F[valid]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_jtag_trace_debug_policy_valid_relocked_valid (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.jtag_trace_debug_policy_valid_relocked.valid.de),
    .d      (hw2reg.jtag_trace_debug_policy_valid_relocked.valid.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (jtag_trace_debug_policy_valid_relocked_valid_qs)
  );

  //   F[relocked]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (4'h9),
    .Mubi    (1'b1)
  ) u_jtag_trace_debug_policy_valid_relocked_relocked (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.jtag_trace_debug_policy_valid_relocked.relocked.de),
    .d      (hw2reg.jtag_trace_debug_policy_valid_relocked.relocked.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (jtag_trace_debug_policy_valid_relocked_relocked_qs)
  );


  // R[jtag_control]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_jtag_control (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (jtag_control_we),
    .wd     (jtag_control_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtag_control.q),
    .ds     (),

    // to register interface (read)
    .qs     (jtag_control_qs)
  );


  // R[jtag_status]: V(True)
  //   F[auth_debug_intent_set]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_jtag_status_auth_debug_intent_set (
    .re     (jtag_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_status.auth_debug_intent_set.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_status_auth_debug_intent_set_qs)
  );

  //   F[auth_window_open]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_jtag_status_auth_window_open (
    .re     (jtag_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_status.auth_window_open.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_status_auth_window_open_qs)
  );

  //   F[auth_window_closed]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_jtag_status_auth_window_closed (
    .re     (jtag_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_status.auth_window_closed.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_status_auth_window_closed_qs)
  );

  //   F[auth_unlock_success]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_jtag_status_auth_unlock_success (
    .re     (jtag_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_status.auth_unlock_success.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_status_auth_unlock_success_qs)
  );

  //   F[auth_unlock_failed]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_jtag_status_auth_unlock_failed (
    .re     (jtag_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_status.auth_unlock_failed.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_status_auth_unlock_failed_qs)
  );


  // R[jtag_boot_status]: V(True)
  //   F[main_clk_status]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_jtag_boot_status_main_clk_status (
    .re     (jtag_boot_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_boot_status.main_clk_status.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_boot_status_main_clk_status_qs)
  );

  //   F[io_clk_status]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_jtag_boot_status_io_clk_status (
    .re     (jtag_boot_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_boot_status.io_clk_status.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_boot_status_io_clk_status_qs)
  );

  //   F[otp_done]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_jtag_boot_status_otp_done (
    .re     (jtag_boot_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_boot_status.otp_done.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_boot_status_otp_done_qs)
  );

  //   F[lc_done]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_jtag_boot_status_lc_done (
    .re     (jtag_boot_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_boot_status.lc_done.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_boot_status_lc_done_qs)
  );

  //   F[cpu_fetch_en]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_jtag_boot_status_cpu_fetch_en (
    .re     (jtag_boot_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_boot_status.cpu_fetch_en.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_boot_status_cpu_fetch_en_qs)
  );

  //   F[halt_fsm_state]: 10:5
  prim_subreg_ext #(
    .DW    (6)
  ) u_jtag_boot_status_halt_fsm_state (
    .re     (jtag_boot_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_boot_status.halt_fsm_state.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_boot_status_halt_fsm_state_qs)
  );

  //   F[boot_greenlight_done]: 13:11
  prim_subreg_ext #(
    .DW    (3)
  ) u_jtag_boot_status_boot_greenlight_done (
    .re     (jtag_boot_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_boot_status.boot_greenlight_done.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_boot_status_boot_greenlight_done_qs)
  );

  //   F[boot_greenlight_good]: 16:14
  prim_subreg_ext #(
    .DW    (3)
  ) u_jtag_boot_status_boot_greenlight_good (
    .re     (jtag_boot_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_boot_status.boot_greenlight_good.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_boot_status_boot_greenlight_good_qs)
  );


  // R[jtag_trace_soc_dbg_state]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_jtag_trace_soc_dbg_state (
    .re     (jtag_trace_soc_dbg_state_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.jtag_trace_soc_dbg_state.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (jtag_trace_soc_dbg_state_qs)
  );



  logic [5:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == SOC_DBG_CTRL_JTAG_TRACE_DEBUG_POLICY_CATEGORY_OFFSET);
    addr_hit[1] = (reg_addr == SOC_DBG_CTRL_JTAG_TRACE_DEBUG_POLICY_VALID_RELOCKED_OFFSET);
    addr_hit[2] = (reg_addr == SOC_DBG_CTRL_JTAG_CONTROL_OFFSET);
    addr_hit[3] = (reg_addr == SOC_DBG_CTRL_JTAG_STATUS_OFFSET);
    addr_hit[4] = (reg_addr == SOC_DBG_CTRL_JTAG_BOOT_STATUS_OFFSET);
    addr_hit[5] = (reg_addr == SOC_DBG_CTRL_JTAG_TRACE_SOC_DBG_STATE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(SOC_DBG_CTRL_JTAG_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(SOC_DBG_CTRL_JTAG_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(SOC_DBG_CTRL_JTAG_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(SOC_DBG_CTRL_JTAG_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(SOC_DBG_CTRL_JTAG_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(SOC_DBG_CTRL_JTAG_PERMIT[5] & ~reg_be)))));
  end

  // Generate write-enables
  assign jtag_control_we = addr_hit[2] & reg_we & !reg_error;

  assign jtag_control_wd = reg_wdata[0];
  assign jtag_status_re = addr_hit[3] & reg_re & !reg_error;
  assign jtag_boot_status_re = addr_hit[4] & reg_re & !reg_error;
  assign jtag_trace_soc_dbg_state_re = addr_hit[5] & reg_re & !reg_error;

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = 1'b0;
    reg_we_check[1] = 1'b0;
    reg_we_check[2] = jtag_control_we;
    reg_we_check[3] = 1'b0;
    reg_we_check[4] = 1'b0;
    reg_we_check[5] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[6:0] = jtag_trace_debug_policy_category_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[3:0] = jtag_trace_debug_policy_valid_relocked_valid_qs;
        reg_rdata_next[7:4] = jtag_trace_debug_policy_valid_relocked_relocked_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = jtag_control_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = jtag_status_auth_debug_intent_set_qs;
        reg_rdata_next[4] = jtag_status_auth_window_open_qs;
        reg_rdata_next[5] = jtag_status_auth_window_closed_qs;
        reg_rdata_next[6] = jtag_status_auth_unlock_success_qs;
        reg_rdata_next[7] = jtag_status_auth_unlock_failed_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = jtag_boot_status_main_clk_status_qs;
        reg_rdata_next[1] = jtag_boot_status_io_clk_status_qs;
        reg_rdata_next[2] = jtag_boot_status_otp_done_qs;
        reg_rdata_next[3] = jtag_boot_status_lc_done_qs;
        reg_rdata_next[4] = jtag_boot_status_cpu_fetch_en_qs;
        reg_rdata_next[10:5] = jtag_boot_status_halt_fsm_state_qs;
        reg_rdata_next[13:11] = jtag_boot_status_boot_greenlight_done_qs;
        reg_rdata_next[16:14] = jtag_boot_status_boot_greenlight_good_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = jtag_trace_soc_dbg_state_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
