// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// UVM Registers auto-generated by `reggen` containing data structure
// Do Not Edit directly

// Block: rv_plic
`ifndef RV_PLIC_REG_BLOCK__SV
`define RV_PLIC_REG_BLOCK__SV

// Forward declare all register/memory/block classes
typedef class rv_plic_reg_ip;
typedef class rv_plic_reg_le;
typedef class rv_plic_reg_prio0;
typedef class rv_plic_reg_prio1;
typedef class rv_plic_reg_prio2;
typedef class rv_plic_reg_prio3;
typedef class rv_plic_reg_prio4;
typedef class rv_plic_reg_prio5;
typedef class rv_plic_reg_prio6;
typedef class rv_plic_reg_prio7;
typedef class rv_plic_reg_prio8;
typedef class rv_plic_reg_prio9;
typedef class rv_plic_reg_prio10;
typedef class rv_plic_reg_prio11;
typedef class rv_plic_reg_prio12;
typedef class rv_plic_reg_prio13;
typedef class rv_plic_reg_prio14;
typedef class rv_plic_reg_prio15;
typedef class rv_plic_reg_prio16;
typedef class rv_plic_reg_prio17;
typedef class rv_plic_reg_prio18;
typedef class rv_plic_reg_prio19;
typedef class rv_plic_reg_prio20;
typedef class rv_plic_reg_prio21;
typedef class rv_plic_reg_prio22;
typedef class rv_plic_reg_prio23;
typedef class rv_plic_reg_prio24;
typedef class rv_plic_reg_prio25;
typedef class rv_plic_reg_prio26;
typedef class rv_plic_reg_prio27;
typedef class rv_plic_reg_prio28;
typedef class rv_plic_reg_prio29;
typedef class rv_plic_reg_prio30;
typedef class rv_plic_reg_prio31;
typedef class rv_plic_reg_ie0;
typedef class rv_plic_reg_threshold0;
typedef class rv_plic_reg_cc0;
typedef class rv_plic_reg_msip0;
typedef class rv_plic_reg_block;

// Class: rv_plic_reg_ip
class rv_plic_reg_ip extends dv_base_reg;
  // fields
  rand dv_base_reg_field p0;
  rand dv_base_reg_field p1;
  rand dv_base_reg_field p2;
  rand dv_base_reg_field p3;
  rand dv_base_reg_field p4;
  rand dv_base_reg_field p5;
  rand dv_base_reg_field p6;
  rand dv_base_reg_field p7;
  rand dv_base_reg_field p8;
  rand dv_base_reg_field p9;
  rand dv_base_reg_field p10;
  rand dv_base_reg_field p11;
  rand dv_base_reg_field p12;
  rand dv_base_reg_field p13;
  rand dv_base_reg_field p14;
  rand dv_base_reg_field p15;
  rand dv_base_reg_field p16;
  rand dv_base_reg_field p17;
  rand dv_base_reg_field p18;
  rand dv_base_reg_field p19;
  rand dv_base_reg_field p20;
  rand dv_base_reg_field p21;
  rand dv_base_reg_field p22;
  rand dv_base_reg_field p23;
  rand dv_base_reg_field p24;
  rand dv_base_reg_field p25;
  rand dv_base_reg_field p26;
  rand dv_base_reg_field p27;
  rand dv_base_reg_field p28;
  rand dv_base_reg_field p29;
  rand dv_base_reg_field p30;
  rand dv_base_reg_field p31;

  `uvm_object_utils(rv_plic_reg_ip)

  function new(string       name = "rv_plic_reg_ip",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    p0 = dv_base_reg_field::type_id::create("p0");
    p0.configure(
      .parent(this),
      .size(1),
      .lsb_pos(0),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p1 = dv_base_reg_field::type_id::create("p1");
    p1.configure(
      .parent(this),
      .size(1),
      .lsb_pos(1),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p2 = dv_base_reg_field::type_id::create("p2");
    p2.configure(
      .parent(this),
      .size(1),
      .lsb_pos(2),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p3 = dv_base_reg_field::type_id::create("p3");
    p3.configure(
      .parent(this),
      .size(1),
      .lsb_pos(3),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p4 = dv_base_reg_field::type_id::create("p4");
    p4.configure(
      .parent(this),
      .size(1),
      .lsb_pos(4),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p5 = dv_base_reg_field::type_id::create("p5");
    p5.configure(
      .parent(this),
      .size(1),
      .lsb_pos(5),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p6 = dv_base_reg_field::type_id::create("p6");
    p6.configure(
      .parent(this),
      .size(1),
      .lsb_pos(6),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p7 = dv_base_reg_field::type_id::create("p7");
    p7.configure(
      .parent(this),
      .size(1),
      .lsb_pos(7),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p8 = dv_base_reg_field::type_id::create("p8");
    p8.configure(
      .parent(this),
      .size(1),
      .lsb_pos(8),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p9 = dv_base_reg_field::type_id::create("p9");
    p9.configure(
      .parent(this),
      .size(1),
      .lsb_pos(9),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p10 = dv_base_reg_field::type_id::create("p10");
    p10.configure(
      .parent(this),
      .size(1),
      .lsb_pos(10),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p11 = dv_base_reg_field::type_id::create("p11");
    p11.configure(
      .parent(this),
      .size(1),
      .lsb_pos(11),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p12 = dv_base_reg_field::type_id::create("p12");
    p12.configure(
      .parent(this),
      .size(1),
      .lsb_pos(12),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p13 = dv_base_reg_field::type_id::create("p13");
    p13.configure(
      .parent(this),
      .size(1),
      .lsb_pos(13),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p14 = dv_base_reg_field::type_id::create("p14");
    p14.configure(
      .parent(this),
      .size(1),
      .lsb_pos(14),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p15 = dv_base_reg_field::type_id::create("p15");
    p15.configure(
      .parent(this),
      .size(1),
      .lsb_pos(15),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p16 = dv_base_reg_field::type_id::create("p16");
    p16.configure(
      .parent(this),
      .size(1),
      .lsb_pos(16),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p17 = dv_base_reg_field::type_id::create("p17");
    p17.configure(
      .parent(this),
      .size(1),
      .lsb_pos(17),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p18 = dv_base_reg_field::type_id::create("p18");
    p18.configure(
      .parent(this),
      .size(1),
      .lsb_pos(18),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p19 = dv_base_reg_field::type_id::create("p19");
    p19.configure(
      .parent(this),
      .size(1),
      .lsb_pos(19),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p20 = dv_base_reg_field::type_id::create("p20");
    p20.configure(
      .parent(this),
      .size(1),
      .lsb_pos(20),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p21 = dv_base_reg_field::type_id::create("p21");
    p21.configure(
      .parent(this),
      .size(1),
      .lsb_pos(21),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p22 = dv_base_reg_field::type_id::create("p22");
    p22.configure(
      .parent(this),
      .size(1),
      .lsb_pos(22),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p23 = dv_base_reg_field::type_id::create("p23");
    p23.configure(
      .parent(this),
      .size(1),
      .lsb_pos(23),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p24 = dv_base_reg_field::type_id::create("p24");
    p24.configure(
      .parent(this),
      .size(1),
      .lsb_pos(24),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p25 = dv_base_reg_field::type_id::create("p25");
    p25.configure(
      .parent(this),
      .size(1),
      .lsb_pos(25),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p26 = dv_base_reg_field::type_id::create("p26");
    p26.configure(
      .parent(this),
      .size(1),
      .lsb_pos(26),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p27 = dv_base_reg_field::type_id::create("p27");
    p27.configure(
      .parent(this),
      .size(1),
      .lsb_pos(27),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p28 = dv_base_reg_field::type_id::create("p28");
    p28.configure(
      .parent(this),
      .size(1),
      .lsb_pos(28),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p29 = dv_base_reg_field::type_id::create("p29");
    p29.configure(
      .parent(this),
      .size(1),
      .lsb_pos(29),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p30 = dv_base_reg_field::type_id::create("p30");
    p30.configure(
      .parent(this),
      .size(1),
      .lsb_pos(30),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    p31 = dv_base_reg_field::type_id::create("p31");
    p31.configure(
      .parent(this),
      .size(1),
      .lsb_pos(31),
      .access("RO"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_ip

// Class: rv_plic_reg_le
class rv_plic_reg_le extends dv_base_reg;
  // fields
  rand dv_base_reg_field le0;
  rand dv_base_reg_field le1;
  rand dv_base_reg_field le2;
  rand dv_base_reg_field le3;
  rand dv_base_reg_field le4;
  rand dv_base_reg_field le5;
  rand dv_base_reg_field le6;
  rand dv_base_reg_field le7;
  rand dv_base_reg_field le8;
  rand dv_base_reg_field le9;
  rand dv_base_reg_field le10;
  rand dv_base_reg_field le11;
  rand dv_base_reg_field le12;
  rand dv_base_reg_field le13;
  rand dv_base_reg_field le14;
  rand dv_base_reg_field le15;
  rand dv_base_reg_field le16;
  rand dv_base_reg_field le17;
  rand dv_base_reg_field le18;
  rand dv_base_reg_field le19;
  rand dv_base_reg_field le20;
  rand dv_base_reg_field le21;
  rand dv_base_reg_field le22;
  rand dv_base_reg_field le23;
  rand dv_base_reg_field le24;
  rand dv_base_reg_field le25;
  rand dv_base_reg_field le26;
  rand dv_base_reg_field le27;
  rand dv_base_reg_field le28;
  rand dv_base_reg_field le29;
  rand dv_base_reg_field le30;
  rand dv_base_reg_field le31;

  `uvm_object_utils(rv_plic_reg_le)

  function new(string       name = "rv_plic_reg_le",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    le0 = dv_base_reg_field::type_id::create("le0");
    le0.configure(
      .parent(this),
      .size(1),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le1 = dv_base_reg_field::type_id::create("le1");
    le1.configure(
      .parent(this),
      .size(1),
      .lsb_pos(1),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le2 = dv_base_reg_field::type_id::create("le2");
    le2.configure(
      .parent(this),
      .size(1),
      .lsb_pos(2),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le3 = dv_base_reg_field::type_id::create("le3");
    le3.configure(
      .parent(this),
      .size(1),
      .lsb_pos(3),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le4 = dv_base_reg_field::type_id::create("le4");
    le4.configure(
      .parent(this),
      .size(1),
      .lsb_pos(4),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le5 = dv_base_reg_field::type_id::create("le5");
    le5.configure(
      .parent(this),
      .size(1),
      .lsb_pos(5),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le6 = dv_base_reg_field::type_id::create("le6");
    le6.configure(
      .parent(this),
      .size(1),
      .lsb_pos(6),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le7 = dv_base_reg_field::type_id::create("le7");
    le7.configure(
      .parent(this),
      .size(1),
      .lsb_pos(7),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le8 = dv_base_reg_field::type_id::create("le8");
    le8.configure(
      .parent(this),
      .size(1),
      .lsb_pos(8),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le9 = dv_base_reg_field::type_id::create("le9");
    le9.configure(
      .parent(this),
      .size(1),
      .lsb_pos(9),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le10 = dv_base_reg_field::type_id::create("le10");
    le10.configure(
      .parent(this),
      .size(1),
      .lsb_pos(10),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le11 = dv_base_reg_field::type_id::create("le11");
    le11.configure(
      .parent(this),
      .size(1),
      .lsb_pos(11),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le12 = dv_base_reg_field::type_id::create("le12");
    le12.configure(
      .parent(this),
      .size(1),
      .lsb_pos(12),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le13 = dv_base_reg_field::type_id::create("le13");
    le13.configure(
      .parent(this),
      .size(1),
      .lsb_pos(13),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le14 = dv_base_reg_field::type_id::create("le14");
    le14.configure(
      .parent(this),
      .size(1),
      .lsb_pos(14),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le15 = dv_base_reg_field::type_id::create("le15");
    le15.configure(
      .parent(this),
      .size(1),
      .lsb_pos(15),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le16 = dv_base_reg_field::type_id::create("le16");
    le16.configure(
      .parent(this),
      .size(1),
      .lsb_pos(16),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le17 = dv_base_reg_field::type_id::create("le17");
    le17.configure(
      .parent(this),
      .size(1),
      .lsb_pos(17),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le18 = dv_base_reg_field::type_id::create("le18");
    le18.configure(
      .parent(this),
      .size(1),
      .lsb_pos(18),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le19 = dv_base_reg_field::type_id::create("le19");
    le19.configure(
      .parent(this),
      .size(1),
      .lsb_pos(19),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le20 = dv_base_reg_field::type_id::create("le20");
    le20.configure(
      .parent(this),
      .size(1),
      .lsb_pos(20),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le21 = dv_base_reg_field::type_id::create("le21");
    le21.configure(
      .parent(this),
      .size(1),
      .lsb_pos(21),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le22 = dv_base_reg_field::type_id::create("le22");
    le22.configure(
      .parent(this),
      .size(1),
      .lsb_pos(22),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le23 = dv_base_reg_field::type_id::create("le23");
    le23.configure(
      .parent(this),
      .size(1),
      .lsb_pos(23),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le24 = dv_base_reg_field::type_id::create("le24");
    le24.configure(
      .parent(this),
      .size(1),
      .lsb_pos(24),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le25 = dv_base_reg_field::type_id::create("le25");
    le25.configure(
      .parent(this),
      .size(1),
      .lsb_pos(25),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le26 = dv_base_reg_field::type_id::create("le26");
    le26.configure(
      .parent(this),
      .size(1),
      .lsb_pos(26),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le27 = dv_base_reg_field::type_id::create("le27");
    le27.configure(
      .parent(this),
      .size(1),
      .lsb_pos(27),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le28 = dv_base_reg_field::type_id::create("le28");
    le28.configure(
      .parent(this),
      .size(1),
      .lsb_pos(28),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le29 = dv_base_reg_field::type_id::create("le29");
    le29.configure(
      .parent(this),
      .size(1),
      .lsb_pos(29),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le30 = dv_base_reg_field::type_id::create("le30");
    le30.configure(
      .parent(this),
      .size(1),
      .lsb_pos(30),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    le31 = dv_base_reg_field::type_id::create("le31");
    le31.configure(
      .parent(this),
      .size(1),
      .lsb_pos(31),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_le

// Class: rv_plic_reg_prio0
class rv_plic_reg_prio0 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio0;

  `uvm_object_utils(rv_plic_reg_prio0)

  function new(string       name = "rv_plic_reg_prio0",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio0 = dv_base_reg_field::type_id::create("prio0");
    prio0.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio0

// Class: rv_plic_reg_prio1
class rv_plic_reg_prio1 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio1;

  `uvm_object_utils(rv_plic_reg_prio1)

  function new(string       name = "rv_plic_reg_prio1",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio1 = dv_base_reg_field::type_id::create("prio1");
    prio1.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio1

// Class: rv_plic_reg_prio2
class rv_plic_reg_prio2 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio2;

  `uvm_object_utils(rv_plic_reg_prio2)

  function new(string       name = "rv_plic_reg_prio2",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio2 = dv_base_reg_field::type_id::create("prio2");
    prio2.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio2

// Class: rv_plic_reg_prio3
class rv_plic_reg_prio3 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio3;

  `uvm_object_utils(rv_plic_reg_prio3)

  function new(string       name = "rv_plic_reg_prio3",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio3 = dv_base_reg_field::type_id::create("prio3");
    prio3.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio3

// Class: rv_plic_reg_prio4
class rv_plic_reg_prio4 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio4;

  `uvm_object_utils(rv_plic_reg_prio4)

  function new(string       name = "rv_plic_reg_prio4",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio4 = dv_base_reg_field::type_id::create("prio4");
    prio4.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio4

// Class: rv_plic_reg_prio5
class rv_plic_reg_prio5 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio5;

  `uvm_object_utils(rv_plic_reg_prio5)

  function new(string       name = "rv_plic_reg_prio5",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio5 = dv_base_reg_field::type_id::create("prio5");
    prio5.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio5

// Class: rv_plic_reg_prio6
class rv_plic_reg_prio6 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio6;

  `uvm_object_utils(rv_plic_reg_prio6)

  function new(string       name = "rv_plic_reg_prio6",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio6 = dv_base_reg_field::type_id::create("prio6");
    prio6.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio6

// Class: rv_plic_reg_prio7
class rv_plic_reg_prio7 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio7;

  `uvm_object_utils(rv_plic_reg_prio7)

  function new(string       name = "rv_plic_reg_prio7",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio7 = dv_base_reg_field::type_id::create("prio7");
    prio7.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio7

// Class: rv_plic_reg_prio8
class rv_plic_reg_prio8 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio8;

  `uvm_object_utils(rv_plic_reg_prio8)

  function new(string       name = "rv_plic_reg_prio8",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio8 = dv_base_reg_field::type_id::create("prio8");
    prio8.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio8

// Class: rv_plic_reg_prio9
class rv_plic_reg_prio9 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio9;

  `uvm_object_utils(rv_plic_reg_prio9)

  function new(string       name = "rv_plic_reg_prio9",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio9 = dv_base_reg_field::type_id::create("prio9");
    prio9.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio9

// Class: rv_plic_reg_prio10
class rv_plic_reg_prio10 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio10;

  `uvm_object_utils(rv_plic_reg_prio10)

  function new(string       name = "rv_plic_reg_prio10",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio10 = dv_base_reg_field::type_id::create("prio10");
    prio10.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio10

// Class: rv_plic_reg_prio11
class rv_plic_reg_prio11 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio11;

  `uvm_object_utils(rv_plic_reg_prio11)

  function new(string       name = "rv_plic_reg_prio11",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio11 = dv_base_reg_field::type_id::create("prio11");
    prio11.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio11

// Class: rv_plic_reg_prio12
class rv_plic_reg_prio12 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio12;

  `uvm_object_utils(rv_plic_reg_prio12)

  function new(string       name = "rv_plic_reg_prio12",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio12 = dv_base_reg_field::type_id::create("prio12");
    prio12.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio12

// Class: rv_plic_reg_prio13
class rv_plic_reg_prio13 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio13;

  `uvm_object_utils(rv_plic_reg_prio13)

  function new(string       name = "rv_plic_reg_prio13",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio13 = dv_base_reg_field::type_id::create("prio13");
    prio13.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio13

// Class: rv_plic_reg_prio14
class rv_plic_reg_prio14 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio14;

  `uvm_object_utils(rv_plic_reg_prio14)

  function new(string       name = "rv_plic_reg_prio14",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio14 = dv_base_reg_field::type_id::create("prio14");
    prio14.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio14

// Class: rv_plic_reg_prio15
class rv_plic_reg_prio15 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio15;

  `uvm_object_utils(rv_plic_reg_prio15)

  function new(string       name = "rv_plic_reg_prio15",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio15 = dv_base_reg_field::type_id::create("prio15");
    prio15.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio15

// Class: rv_plic_reg_prio16
class rv_plic_reg_prio16 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio16;

  `uvm_object_utils(rv_plic_reg_prio16)

  function new(string       name = "rv_plic_reg_prio16",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio16 = dv_base_reg_field::type_id::create("prio16");
    prio16.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio16

// Class: rv_plic_reg_prio17
class rv_plic_reg_prio17 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio17;

  `uvm_object_utils(rv_plic_reg_prio17)

  function new(string       name = "rv_plic_reg_prio17",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio17 = dv_base_reg_field::type_id::create("prio17");
    prio17.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio17

// Class: rv_plic_reg_prio18
class rv_plic_reg_prio18 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio18;

  `uvm_object_utils(rv_plic_reg_prio18)

  function new(string       name = "rv_plic_reg_prio18",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio18 = dv_base_reg_field::type_id::create("prio18");
    prio18.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio18

// Class: rv_plic_reg_prio19
class rv_plic_reg_prio19 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio19;

  `uvm_object_utils(rv_plic_reg_prio19)

  function new(string       name = "rv_plic_reg_prio19",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio19 = dv_base_reg_field::type_id::create("prio19");
    prio19.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio19

// Class: rv_plic_reg_prio20
class rv_plic_reg_prio20 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio20;

  `uvm_object_utils(rv_plic_reg_prio20)

  function new(string       name = "rv_plic_reg_prio20",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio20 = dv_base_reg_field::type_id::create("prio20");
    prio20.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio20

// Class: rv_plic_reg_prio21
class rv_plic_reg_prio21 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio21;

  `uvm_object_utils(rv_plic_reg_prio21)

  function new(string       name = "rv_plic_reg_prio21",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio21 = dv_base_reg_field::type_id::create("prio21");
    prio21.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio21

// Class: rv_plic_reg_prio22
class rv_plic_reg_prio22 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio22;

  `uvm_object_utils(rv_plic_reg_prio22)

  function new(string       name = "rv_plic_reg_prio22",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio22 = dv_base_reg_field::type_id::create("prio22");
    prio22.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio22

// Class: rv_plic_reg_prio23
class rv_plic_reg_prio23 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio23;

  `uvm_object_utils(rv_plic_reg_prio23)

  function new(string       name = "rv_plic_reg_prio23",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio23 = dv_base_reg_field::type_id::create("prio23");
    prio23.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio23

// Class: rv_plic_reg_prio24
class rv_plic_reg_prio24 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio24;

  `uvm_object_utils(rv_plic_reg_prio24)

  function new(string       name = "rv_plic_reg_prio24",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio24 = dv_base_reg_field::type_id::create("prio24");
    prio24.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio24

// Class: rv_plic_reg_prio25
class rv_plic_reg_prio25 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio25;

  `uvm_object_utils(rv_plic_reg_prio25)

  function new(string       name = "rv_plic_reg_prio25",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio25 = dv_base_reg_field::type_id::create("prio25");
    prio25.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio25

// Class: rv_plic_reg_prio26
class rv_plic_reg_prio26 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio26;

  `uvm_object_utils(rv_plic_reg_prio26)

  function new(string       name = "rv_plic_reg_prio26",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio26 = dv_base_reg_field::type_id::create("prio26");
    prio26.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio26

// Class: rv_plic_reg_prio27
class rv_plic_reg_prio27 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio27;

  `uvm_object_utils(rv_plic_reg_prio27)

  function new(string       name = "rv_plic_reg_prio27",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio27 = dv_base_reg_field::type_id::create("prio27");
    prio27.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio27

// Class: rv_plic_reg_prio28
class rv_plic_reg_prio28 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio28;

  `uvm_object_utils(rv_plic_reg_prio28)

  function new(string       name = "rv_plic_reg_prio28",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio28 = dv_base_reg_field::type_id::create("prio28");
    prio28.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio28

// Class: rv_plic_reg_prio29
class rv_plic_reg_prio29 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio29;

  `uvm_object_utils(rv_plic_reg_prio29)

  function new(string       name = "rv_plic_reg_prio29",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio29 = dv_base_reg_field::type_id::create("prio29");
    prio29.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio29

// Class: rv_plic_reg_prio30
class rv_plic_reg_prio30 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio30;

  `uvm_object_utils(rv_plic_reg_prio30)

  function new(string       name = "rv_plic_reg_prio30",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio30 = dv_base_reg_field::type_id::create("prio30");
    prio30.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio30

// Class: rv_plic_reg_prio31
class rv_plic_reg_prio31 extends dv_base_reg;
  // fields
  rand dv_base_reg_field prio31;

  `uvm_object_utils(rv_plic_reg_prio31)

  function new(string       name = "rv_plic_reg_prio31",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    prio31 = dv_base_reg_field::type_id::create("prio31");
    prio31.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_prio31

// Class: rv_plic_reg_ie0
class rv_plic_reg_ie0 extends dv_base_reg;
  // fields
  rand dv_base_reg_field e0;
  rand dv_base_reg_field e1;
  rand dv_base_reg_field e2;
  rand dv_base_reg_field e3;
  rand dv_base_reg_field e4;
  rand dv_base_reg_field e5;
  rand dv_base_reg_field e6;
  rand dv_base_reg_field e7;
  rand dv_base_reg_field e8;
  rand dv_base_reg_field e9;
  rand dv_base_reg_field e10;
  rand dv_base_reg_field e11;
  rand dv_base_reg_field e12;
  rand dv_base_reg_field e13;
  rand dv_base_reg_field e14;
  rand dv_base_reg_field e15;
  rand dv_base_reg_field e16;
  rand dv_base_reg_field e17;
  rand dv_base_reg_field e18;
  rand dv_base_reg_field e19;
  rand dv_base_reg_field e20;
  rand dv_base_reg_field e21;
  rand dv_base_reg_field e22;
  rand dv_base_reg_field e23;
  rand dv_base_reg_field e24;
  rand dv_base_reg_field e25;
  rand dv_base_reg_field e26;
  rand dv_base_reg_field e27;
  rand dv_base_reg_field e28;
  rand dv_base_reg_field e29;
  rand dv_base_reg_field e30;
  rand dv_base_reg_field e31;

  `uvm_object_utils(rv_plic_reg_ie0)

  function new(string       name = "rv_plic_reg_ie0",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    e0 = dv_base_reg_field::type_id::create("e0");
    e0.configure(
      .parent(this),
      .size(1),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e1 = dv_base_reg_field::type_id::create("e1");
    e1.configure(
      .parent(this),
      .size(1),
      .lsb_pos(1),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e2 = dv_base_reg_field::type_id::create("e2");
    e2.configure(
      .parent(this),
      .size(1),
      .lsb_pos(2),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e3 = dv_base_reg_field::type_id::create("e3");
    e3.configure(
      .parent(this),
      .size(1),
      .lsb_pos(3),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e4 = dv_base_reg_field::type_id::create("e4");
    e4.configure(
      .parent(this),
      .size(1),
      .lsb_pos(4),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e5 = dv_base_reg_field::type_id::create("e5");
    e5.configure(
      .parent(this),
      .size(1),
      .lsb_pos(5),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e6 = dv_base_reg_field::type_id::create("e6");
    e6.configure(
      .parent(this),
      .size(1),
      .lsb_pos(6),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e7 = dv_base_reg_field::type_id::create("e7");
    e7.configure(
      .parent(this),
      .size(1),
      .lsb_pos(7),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e8 = dv_base_reg_field::type_id::create("e8");
    e8.configure(
      .parent(this),
      .size(1),
      .lsb_pos(8),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e9 = dv_base_reg_field::type_id::create("e9");
    e9.configure(
      .parent(this),
      .size(1),
      .lsb_pos(9),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e10 = dv_base_reg_field::type_id::create("e10");
    e10.configure(
      .parent(this),
      .size(1),
      .lsb_pos(10),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e11 = dv_base_reg_field::type_id::create("e11");
    e11.configure(
      .parent(this),
      .size(1),
      .lsb_pos(11),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e12 = dv_base_reg_field::type_id::create("e12");
    e12.configure(
      .parent(this),
      .size(1),
      .lsb_pos(12),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e13 = dv_base_reg_field::type_id::create("e13");
    e13.configure(
      .parent(this),
      .size(1),
      .lsb_pos(13),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e14 = dv_base_reg_field::type_id::create("e14");
    e14.configure(
      .parent(this),
      .size(1),
      .lsb_pos(14),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e15 = dv_base_reg_field::type_id::create("e15");
    e15.configure(
      .parent(this),
      .size(1),
      .lsb_pos(15),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e16 = dv_base_reg_field::type_id::create("e16");
    e16.configure(
      .parent(this),
      .size(1),
      .lsb_pos(16),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e17 = dv_base_reg_field::type_id::create("e17");
    e17.configure(
      .parent(this),
      .size(1),
      .lsb_pos(17),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e18 = dv_base_reg_field::type_id::create("e18");
    e18.configure(
      .parent(this),
      .size(1),
      .lsb_pos(18),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e19 = dv_base_reg_field::type_id::create("e19");
    e19.configure(
      .parent(this),
      .size(1),
      .lsb_pos(19),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e20 = dv_base_reg_field::type_id::create("e20");
    e20.configure(
      .parent(this),
      .size(1),
      .lsb_pos(20),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e21 = dv_base_reg_field::type_id::create("e21");
    e21.configure(
      .parent(this),
      .size(1),
      .lsb_pos(21),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e22 = dv_base_reg_field::type_id::create("e22");
    e22.configure(
      .parent(this),
      .size(1),
      .lsb_pos(22),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e23 = dv_base_reg_field::type_id::create("e23");
    e23.configure(
      .parent(this),
      .size(1),
      .lsb_pos(23),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e24 = dv_base_reg_field::type_id::create("e24");
    e24.configure(
      .parent(this),
      .size(1),
      .lsb_pos(24),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e25 = dv_base_reg_field::type_id::create("e25");
    e25.configure(
      .parent(this),
      .size(1),
      .lsb_pos(25),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e26 = dv_base_reg_field::type_id::create("e26");
    e26.configure(
      .parent(this),
      .size(1),
      .lsb_pos(26),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e27 = dv_base_reg_field::type_id::create("e27");
    e27.configure(
      .parent(this),
      .size(1),
      .lsb_pos(27),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e28 = dv_base_reg_field::type_id::create("e28");
    e28.configure(
      .parent(this),
      .size(1),
      .lsb_pos(28),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e29 = dv_base_reg_field::type_id::create("e29");
    e29.configure(
      .parent(this),
      .size(1),
      .lsb_pos(29),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e30 = dv_base_reg_field::type_id::create("e30");
    e30.configure(
      .parent(this),
      .size(1),
      .lsb_pos(30),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
    e31 = dv_base_reg_field::type_id::create("e31");
    e31.configure(
      .parent(this),
      .size(1),
      .lsb_pos(31),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_ie0

// Class: rv_plic_reg_threshold0
class rv_plic_reg_threshold0 extends dv_base_reg;
  // fields
  rand dv_base_reg_field threshold0;

  `uvm_object_utils(rv_plic_reg_threshold0)

  function new(string       name = "rv_plic_reg_threshold0",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    threshold0 = dv_base_reg_field::type_id::create("threshold0");
    threshold0.configure(
      .parent(this),
      .size(3),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_threshold0

// Class: rv_plic_reg_cc0
class rv_plic_reg_cc0 extends dv_base_reg;
  // fields
  rand dv_base_reg_field cc0;

  `uvm_object_utils(rv_plic_reg_cc0)

  function new(string       name = "rv_plic_reg_cc0",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    cc0 = dv_base_reg_field::type_id::create("cc0");
    cc0.configure(
      .parent(this),
      .size(6),
      .lsb_pos(0),
      .access("RW"),
      .volatile(1),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_cc0

// Class: rv_plic_reg_msip0
class rv_plic_reg_msip0 extends dv_base_reg;
  // fields
  rand dv_base_reg_field msip0;

  `uvm_object_utils(rv_plic_reg_msip0)

  function new(string       name = "rv_plic_reg_msip0",
               int unsigned n_bits = 32,
               int          has_coverage = UVM_NO_COVERAGE);
    super.new(name, n_bits, has_coverage);
  endfunction : new

  virtual function void build();
    // create fields
    msip0 = dv_base_reg_field::type_id::create("msip0");
    msip0.configure(
      .parent(this),
      .size(1),
      .lsb_pos(0),
      .access("RW"),
      .volatile(0),
      .reset(32'h0),
      .has_reset(1),
      .is_rand(1),
      .individually_accessible(1));
  endfunction : build

endclass : rv_plic_reg_msip0

// Class: rv_plic_reg_block
class rv_plic_reg_block extends dv_base_reg_block;
  // registers
  rand rv_plic_reg_ip ip;
  rand rv_plic_reg_le le;
  rand rv_plic_reg_prio0 prio0;
  rand rv_plic_reg_prio1 prio1;
  rand rv_plic_reg_prio2 prio2;
  rand rv_plic_reg_prio3 prio3;
  rand rv_plic_reg_prio4 prio4;
  rand rv_plic_reg_prio5 prio5;
  rand rv_plic_reg_prio6 prio6;
  rand rv_plic_reg_prio7 prio7;
  rand rv_plic_reg_prio8 prio8;
  rand rv_plic_reg_prio9 prio9;
  rand rv_plic_reg_prio10 prio10;
  rand rv_plic_reg_prio11 prio11;
  rand rv_plic_reg_prio12 prio12;
  rand rv_plic_reg_prio13 prio13;
  rand rv_plic_reg_prio14 prio14;
  rand rv_plic_reg_prio15 prio15;
  rand rv_plic_reg_prio16 prio16;
  rand rv_plic_reg_prio17 prio17;
  rand rv_plic_reg_prio18 prio18;
  rand rv_plic_reg_prio19 prio19;
  rand rv_plic_reg_prio20 prio20;
  rand rv_plic_reg_prio21 prio21;
  rand rv_plic_reg_prio22 prio22;
  rand rv_plic_reg_prio23 prio23;
  rand rv_plic_reg_prio24 prio24;
  rand rv_plic_reg_prio25 prio25;
  rand rv_plic_reg_prio26 prio26;
  rand rv_plic_reg_prio27 prio27;
  rand rv_plic_reg_prio28 prio28;
  rand rv_plic_reg_prio29 prio29;
  rand rv_plic_reg_prio30 prio30;
  rand rv_plic_reg_prio31 prio31;
  rand rv_plic_reg_ie0 ie0;
  rand rv_plic_reg_threshold0 threshold0;
  rand rv_plic_reg_cc0 cc0;
  rand rv_plic_reg_msip0 msip0;

  `uvm_object_utils(rv_plic_reg_block)

  function new(string name = "rv_plic_reg_block",
               int    has_coverage = UVM_NO_COVERAGE);
    super.new(name, has_coverage);
  endfunction : new

  virtual function void build(uvm_reg_addr_t base_addr);
    // create default map
    this.default_map = create_map(.name("default_map"),
                                  .base_addr(base_addr),
                                  .n_bytes(4),
                                  .endian(UVM_LITTLE_ENDIAN));

    // create registers
    ip = rv_plic_reg_ip::type_id::create("ip");
    ip.configure(.blk_parent(this));
    ip.build();
    default_map.add_reg(.rg(ip),
                        .offset(32'h0),
                        .rights("RO"));
    le = rv_plic_reg_le::type_id::create("le");
    le.configure(.blk_parent(this));
    le.build();
    default_map.add_reg(.rg(le),
                        .offset(32'h4),
                        .rights("RW"));
    prio0 = rv_plic_reg_prio0::type_id::create("prio0");
    prio0.configure(.blk_parent(this));
    prio0.build();
    default_map.add_reg(.rg(prio0),
                        .offset(32'h8),
                        .rights("RW"));
    prio1 = rv_plic_reg_prio1::type_id::create("prio1");
    prio1.configure(.blk_parent(this));
    prio1.build();
    default_map.add_reg(.rg(prio1),
                        .offset(32'hc),
                        .rights("RW"));
    prio2 = rv_plic_reg_prio2::type_id::create("prio2");
    prio2.configure(.blk_parent(this));
    prio2.build();
    default_map.add_reg(.rg(prio2),
                        .offset(32'h10),
                        .rights("RW"));
    prio3 = rv_plic_reg_prio3::type_id::create("prio3");
    prio3.configure(.blk_parent(this));
    prio3.build();
    default_map.add_reg(.rg(prio3),
                        .offset(32'h14),
                        .rights("RW"));
    prio4 = rv_plic_reg_prio4::type_id::create("prio4");
    prio4.configure(.blk_parent(this));
    prio4.build();
    default_map.add_reg(.rg(prio4),
                        .offset(32'h18),
                        .rights("RW"));
    prio5 = rv_plic_reg_prio5::type_id::create("prio5");
    prio5.configure(.blk_parent(this));
    prio5.build();
    default_map.add_reg(.rg(prio5),
                        .offset(32'h1c),
                        .rights("RW"));
    prio6 = rv_plic_reg_prio6::type_id::create("prio6");
    prio6.configure(.blk_parent(this));
    prio6.build();
    default_map.add_reg(.rg(prio6),
                        .offset(32'h20),
                        .rights("RW"));
    prio7 = rv_plic_reg_prio7::type_id::create("prio7");
    prio7.configure(.blk_parent(this));
    prio7.build();
    default_map.add_reg(.rg(prio7),
                        .offset(32'h24),
                        .rights("RW"));
    prio8 = rv_plic_reg_prio8::type_id::create("prio8");
    prio8.configure(.blk_parent(this));
    prio8.build();
    default_map.add_reg(.rg(prio8),
                        .offset(32'h28),
                        .rights("RW"));
    prio9 = rv_plic_reg_prio9::type_id::create("prio9");
    prio9.configure(.blk_parent(this));
    prio9.build();
    default_map.add_reg(.rg(prio9),
                        .offset(32'h2c),
                        .rights("RW"));
    prio10 = rv_plic_reg_prio10::type_id::create("prio10");
    prio10.configure(.blk_parent(this));
    prio10.build();
    default_map.add_reg(.rg(prio10),
                        .offset(32'h30),
                        .rights("RW"));
    prio11 = rv_plic_reg_prio11::type_id::create("prio11");
    prio11.configure(.blk_parent(this));
    prio11.build();
    default_map.add_reg(.rg(prio11),
                        .offset(32'h34),
                        .rights("RW"));
    prio12 = rv_plic_reg_prio12::type_id::create("prio12");
    prio12.configure(.blk_parent(this));
    prio12.build();
    default_map.add_reg(.rg(prio12),
                        .offset(32'h38),
                        .rights("RW"));
    prio13 = rv_plic_reg_prio13::type_id::create("prio13");
    prio13.configure(.blk_parent(this));
    prio13.build();
    default_map.add_reg(.rg(prio13),
                        .offset(32'h3c),
                        .rights("RW"));
    prio14 = rv_plic_reg_prio14::type_id::create("prio14");
    prio14.configure(.blk_parent(this));
    prio14.build();
    default_map.add_reg(.rg(prio14),
                        .offset(32'h40),
                        .rights("RW"));
    prio15 = rv_plic_reg_prio15::type_id::create("prio15");
    prio15.configure(.blk_parent(this));
    prio15.build();
    default_map.add_reg(.rg(prio15),
                        .offset(32'h44),
                        .rights("RW"));
    prio16 = rv_plic_reg_prio16::type_id::create("prio16");
    prio16.configure(.blk_parent(this));
    prio16.build();
    default_map.add_reg(.rg(prio16),
                        .offset(32'h48),
                        .rights("RW"));
    prio17 = rv_plic_reg_prio17::type_id::create("prio17");
    prio17.configure(.blk_parent(this));
    prio17.build();
    default_map.add_reg(.rg(prio17),
                        .offset(32'h4c),
                        .rights("RW"));
    prio18 = rv_plic_reg_prio18::type_id::create("prio18");
    prio18.configure(.blk_parent(this));
    prio18.build();
    default_map.add_reg(.rg(prio18),
                        .offset(32'h50),
                        .rights("RW"));
    prio19 = rv_plic_reg_prio19::type_id::create("prio19");
    prio19.configure(.blk_parent(this));
    prio19.build();
    default_map.add_reg(.rg(prio19),
                        .offset(32'h54),
                        .rights("RW"));
    prio20 = rv_plic_reg_prio20::type_id::create("prio20");
    prio20.configure(.blk_parent(this));
    prio20.build();
    default_map.add_reg(.rg(prio20),
                        .offset(32'h58),
                        .rights("RW"));
    prio21 = rv_plic_reg_prio21::type_id::create("prio21");
    prio21.configure(.blk_parent(this));
    prio21.build();
    default_map.add_reg(.rg(prio21),
                        .offset(32'h5c),
                        .rights("RW"));
    prio22 = rv_plic_reg_prio22::type_id::create("prio22");
    prio22.configure(.blk_parent(this));
    prio22.build();
    default_map.add_reg(.rg(prio22),
                        .offset(32'h60),
                        .rights("RW"));
    prio23 = rv_plic_reg_prio23::type_id::create("prio23");
    prio23.configure(.blk_parent(this));
    prio23.build();
    default_map.add_reg(.rg(prio23),
                        .offset(32'h64),
                        .rights("RW"));
    prio24 = rv_plic_reg_prio24::type_id::create("prio24");
    prio24.configure(.blk_parent(this));
    prio24.build();
    default_map.add_reg(.rg(prio24),
                        .offset(32'h68),
                        .rights("RW"));
    prio25 = rv_plic_reg_prio25::type_id::create("prio25");
    prio25.configure(.blk_parent(this));
    prio25.build();
    default_map.add_reg(.rg(prio25),
                        .offset(32'h6c),
                        .rights("RW"));
    prio26 = rv_plic_reg_prio26::type_id::create("prio26");
    prio26.configure(.blk_parent(this));
    prio26.build();
    default_map.add_reg(.rg(prio26),
                        .offset(32'h70),
                        .rights("RW"));
    prio27 = rv_plic_reg_prio27::type_id::create("prio27");
    prio27.configure(.blk_parent(this));
    prio27.build();
    default_map.add_reg(.rg(prio27),
                        .offset(32'h74),
                        .rights("RW"));
    prio28 = rv_plic_reg_prio28::type_id::create("prio28");
    prio28.configure(.blk_parent(this));
    prio28.build();
    default_map.add_reg(.rg(prio28),
                        .offset(32'h78),
                        .rights("RW"));
    prio29 = rv_plic_reg_prio29::type_id::create("prio29");
    prio29.configure(.blk_parent(this));
    prio29.build();
    default_map.add_reg(.rg(prio29),
                        .offset(32'h7c),
                        .rights("RW"));
    prio30 = rv_plic_reg_prio30::type_id::create("prio30");
    prio30.configure(.blk_parent(this));
    prio30.build();
    default_map.add_reg(.rg(prio30),
                        .offset(32'h80),
                        .rights("RW"));
    prio31 = rv_plic_reg_prio31::type_id::create("prio31");
    prio31.configure(.blk_parent(this));
    prio31.build();
    default_map.add_reg(.rg(prio31),
                        .offset(32'h84),
                        .rights("RW"));
    ie0 = rv_plic_reg_ie0::type_id::create("ie0");
    ie0.configure(.blk_parent(this));
    ie0.build();
    default_map.add_reg(.rg(ie0),
                        .offset(32'h100),
                        .rights("RW"));
    threshold0 = rv_plic_reg_threshold0::type_id::create("threshold0");
    threshold0.configure(.blk_parent(this));
    threshold0.build();
    default_map.add_reg(.rg(threshold0),
                        .offset(32'h104),
                        .rights("RW"));
    cc0 = rv_plic_reg_cc0::type_id::create("cc0");
    cc0.configure(.blk_parent(this));
    cc0.build();
    default_map.add_reg(.rg(cc0),
                        .offset(32'h108),
                        .rights("RW"));
    msip0 = rv_plic_reg_msip0::type_id::create("msip0");
    msip0.configure(.blk_parent(this));
    msip0.build();
    default_map.add_reg(.rg(msip0),
                        .offset(32'h10c),
                        .rights("RW"));
  endfunction : build

endclass : rv_plic_reg_block

`endif
