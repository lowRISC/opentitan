// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package socdbg_ctrl_reg_pkg;

  // Param list
  parameter bit EnableHaltFunction = 1;
  parameter int NumAlerts = 1;

  // Address widths within the block
  parameter int CoreAw = 5;
  parameter int JtagAw = 2;

  ///////////////////////////////////////////////
  // Typedefs for registers for core interface //
  ///////////////////////////////////////////////

  typedef struct packed {
    logic        q;
  } socdbg_ctrl_reg2hw_intr_state_reg_t;

  typedef struct packed {
    logic        q;
  } socdbg_ctrl_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } socdbg_ctrl_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } socdbg_ctrl_reg2hw_alert_test_reg_t;

  typedef struct packed {
    logic [3:0]  q;
  } socdbg_ctrl_reg2hw_debug_policy_ctrl_reg_t;

  typedef struct packed {
    logic        q;
  } socdbg_ctrl_reg2hw_debug_policy_valid_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } auth_debug_intent_set;
    struct packed {
      logic        q;
    } auth_window_open;
    struct packed {
      logic        q;
    } auth_window_closed;
    struct packed {
      logic        q;
    } auth_unlock_success;
    struct packed {
      logic        q;
    } auth_unlock_failed;
    struct packed {
      logic [3:0]  q;
    } current_policy;
    struct packed {
      logic [3:0]  q;
    } requested_policy;
  } socdbg_ctrl_reg2hw_status_mbx_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } socdbg_ctrl_hw2reg_intr_state_reg_t;

  // Register -> HW type for core interface
  typedef struct packed {
    socdbg_ctrl_reg2hw_intr_state_reg_t intr_state; // [23:23]
    socdbg_ctrl_reg2hw_intr_enable_reg_t intr_enable; // [22:22]
    socdbg_ctrl_reg2hw_intr_test_reg_t intr_test; // [21:20]
    socdbg_ctrl_reg2hw_alert_test_reg_t alert_test; // [19:18]
    socdbg_ctrl_reg2hw_debug_policy_ctrl_reg_t debug_policy_ctrl; // [17:14]
    socdbg_ctrl_reg2hw_debug_policy_valid_reg_t debug_policy_valid; // [13:13]
    socdbg_ctrl_reg2hw_status_mbx_reg_t status_mbx; // [12:0]
  } socdbg_ctrl_core_reg2hw_t;

  // HW -> register type for core interface
  typedef struct packed {
    socdbg_ctrl_hw2reg_intr_state_reg_t intr_state; // [1:0]
  } socdbg_ctrl_core_hw2reg_t;

  // Register offsets for core interface
  parameter logic [CoreAw-1:0] SOCDBG_CTRL_INTR_STATE_OFFSET = 5'h 0;
  parameter logic [CoreAw-1:0] SOCDBG_CTRL_INTR_ENABLE_OFFSET = 5'h 4;
  parameter logic [CoreAw-1:0] SOCDBG_CTRL_INTR_TEST_OFFSET = 5'h 8;
  parameter logic [CoreAw-1:0] SOCDBG_CTRL_ALERT_TEST_OFFSET = 5'h c;
  parameter logic [CoreAw-1:0] SOCDBG_CTRL_DEBUG_POLICY_CTRL_OFFSET = 5'h 10;
  parameter logic [CoreAw-1:0] SOCDBG_CTRL_DEBUG_POLICY_VALID_OFFSET = 5'h 14;
  parameter logic [CoreAw-1:0] SOCDBG_CTRL_STATUS_MBX_OFFSET = 5'h 18;

  // Reset values for hwext registers and their fields for core interface
  parameter logic [0:0] SOCDBG_CTRL_INTR_TEST_RESVAL = 1'h 0;
  parameter logic [0:0] SOCDBG_CTRL_INTR_TEST_DEBUG_ATTENTION_RESVAL = 1'h 0;
  parameter logic [0:0] SOCDBG_CTRL_ALERT_TEST_RESVAL = 1'h 0;
  parameter logic [0:0] SOCDBG_CTRL_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;

  // Register index for core interface
  typedef enum int {
    SOCDBG_CTRL_INTR_STATE,
    SOCDBG_CTRL_INTR_ENABLE,
    SOCDBG_CTRL_INTR_TEST,
    SOCDBG_CTRL_ALERT_TEST,
    SOCDBG_CTRL_DEBUG_POLICY_CTRL,
    SOCDBG_CTRL_DEBUG_POLICY_VALID,
    SOCDBG_CTRL_STATUS_MBX
  } socdbg_ctrl_core_id_e;

  // Register width information to check illegal writes for core interface
  parameter logic [3:0] SOCDBG_CTRL_CORE_PERMIT [7] = '{
    4'b 0001, // index[0] SOCDBG_CTRL_INTR_STATE
    4'b 0001, // index[1] SOCDBG_CTRL_INTR_ENABLE
    4'b 0001, // index[2] SOCDBG_CTRL_INTR_TEST
    4'b 0001, // index[3] SOCDBG_CTRL_ALERT_TEST
    4'b 0001, // index[4] SOCDBG_CTRL_DEBUG_POLICY_CTRL
    4'b 0001, // index[5] SOCDBG_CTRL_DEBUG_POLICY_VALID
    4'b 0011  // index[6] SOCDBG_CTRL_STATUS_MBX
  };

  ///////////////////////////////////////////////
  // Typedefs for registers for jtag interface //
  ///////////////////////////////////////////////

  typedef struct packed {
    struct packed {
      logic        d;
    } auth_debug_intent_set;
    struct packed {
      logic        d;
    } auth_window_open;
    struct packed {
      logic        d;
    } auth_window_closed;
    struct packed {
      logic        d;
    } auth_unlock_success;
    struct packed {
      logic        d;
    } auth_unlock_failed;
    struct packed {
      logic [3:0]  d;
    } current_policy;
    struct packed {
      logic [3:0]  d;
    } requested_policy;
  } socdbg_ctrl_hw2reg_jtag_status_reg_t;

  // HW -> register type for jtag interface
  typedef struct packed {
    socdbg_ctrl_hw2reg_jtag_status_reg_t jtag_status; // [12:0]
  } socdbg_ctrl_jtag_hw2reg_t;

  // Register offsets for jtag interface
  parameter logic [JtagAw-1:0] SOCDBG_CTRL_JTAG_STATUS_OFFSET = 2'h 0;

  // Reset values for hwext registers and their fields for jtag interface
  parameter logic [15:0] SOCDBG_CTRL_JTAG_STATUS_RESVAL = 16'h 0;
  parameter logic [0:0] SOCDBG_CTRL_JTAG_STATUS_AUTH_DEBUG_INTENT_SET_RESVAL = 1'h 0;
  parameter logic [0:0] SOCDBG_CTRL_JTAG_STATUS_AUTH_WINDOW_OPEN_RESVAL = 1'h 0;
  parameter logic [0:0] SOCDBG_CTRL_JTAG_STATUS_AUTH_WINDOW_CLOSED_RESVAL = 1'h 0;
  parameter logic [0:0] SOCDBG_CTRL_JTAG_STATUS_AUTH_UNLOCK_SUCCESS_RESVAL = 1'h 0;
  parameter logic [0:0] SOCDBG_CTRL_JTAG_STATUS_AUTH_UNLOCK_FAILED_RESVAL = 1'h 0;
  parameter logic [3:0] SOCDBG_CTRL_JTAG_STATUS_CURRENT_POLICY_RESVAL = 4'h 0;
  parameter logic [3:0] SOCDBG_CTRL_JTAG_STATUS_REQUESTED_POLICY_RESVAL = 4'h 0;

  // Register index for jtag interface
  typedef enum int {
    SOCDBG_CTRL_JTAG_STATUS
  } socdbg_ctrl_jtag_id_e;

  // Register width information to check illegal writes for jtag interface
  parameter logic [3:0] SOCDBG_CTRL_JTAG_PERMIT [1] = '{
    4'b 0011  // index[0] SOCDBG_CTRL_JTAG_STATUS
  };

endpackage
