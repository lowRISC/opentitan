// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package otp_macro_reg_pkg;

  // Address widths within the block
  parameter int PrimAw = 5;

  // Number of registers for every interface
  parameter int NumRegsPrim = 8;

  ///////////////////////////////////////////////
  // Typedefs for registers for prim interface //
  ///////////////////////////////////////////////

  typedef struct packed {
    struct packed {
      logic [10:0] q;
    } field4;
    struct packed {
      logic [9:0] q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic        q;
    } field1;
    struct packed {
      logic        q;
    } field0;
  } otp_macro_reg2hw_csr0_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } field4;
    struct packed {
      logic        q;
    } field3;
    struct packed {
      logic [6:0]  q;
    } field2;
    struct packed {
      logic        q;
    } field1;
    struct packed {
      logic [6:0]  q;
    } field0;
  } otp_macro_reg2hw_csr1_reg_t;

  typedef struct packed {
    logic        q;
  } otp_macro_reg2hw_csr2_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } field8;
    struct packed {
      logic        q;
    } field7;
    struct packed {
      logic        q;
    } field6;
    struct packed {
      logic        q;
    } field5;
    struct packed {
      logic        q;
    } field4;
    struct packed {
      logic        q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic [9:0] q;
    } field1;
    struct packed {
      logic [2:0]  q;
    } field0;
  } otp_macro_reg2hw_csr3_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic        q;
    } field1;
    struct packed {
      logic [9:0] q;
    } field0;
  } otp_macro_reg2hw_csr4_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } field6;
    struct packed {
      logic        q;
    } field5;
    struct packed {
      logic        q;
    } field4;
    struct packed {
      logic [2:0]  q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic [1:0]  q;
    } field1;
    struct packed {
      logic [5:0]  q;
    } field0;
  } otp_macro_reg2hw_csr5_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic        q;
    } field1;
    struct packed {
      logic [9:0] q;
    } field0;
  } otp_macro_reg2hw_csr6_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } field3;
    struct packed {
      logic        q;
    } field2;
    struct packed {
      logic [2:0]  q;
    } field1;
    struct packed {
      logic [5:0]  q;
    } field0;
  } otp_macro_reg2hw_csr7_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } field8;
    struct packed {
      logic        d;
      logic        de;
    } field7;
    struct packed {
      logic        d;
      logic        de;
    } field6;
    struct packed {
      logic        d;
      logic        de;
    } field5;
    struct packed {
      logic        d;
      logic        de;
    } field4;
    struct packed {
      logic        d;
      logic        de;
    } field3;
    struct packed {
      logic        d;
      logic        de;
    } field2;
    struct packed {
      logic [9:0] d;
      logic        de;
    } field1;
    struct packed {
      logic [2:0]  d;
      logic        de;
    } field0;
  } otp_macro_hw2reg_csr3_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] d;
      logic        de;
    } field6;
    struct packed {
      logic        d;
      logic        de;
    } field5;
    struct packed {
      logic        d;
      logic        de;
    } field4;
    struct packed {
      logic [2:0]  d;
      logic        de;
    } field3;
    struct packed {
      logic        d;
      logic        de;
    } field2;
    struct packed {
      logic [1:0]  d;
      logic        de;
    } field1;
    struct packed {
      logic [5:0]  d;
      logic        de;
    } field0;
  } otp_macro_hw2reg_csr5_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } field3;
    struct packed {
      logic        d;
      logic        de;
    } field2;
    struct packed {
      logic [2:0]  d;
      logic        de;
    } field1;
    struct packed {
      logic [5:0]  d;
      logic        de;
    } field0;
  } otp_macro_hw2reg_csr7_reg_t;

  // Register -> HW type for prim interface
  typedef struct packed {
    otp_macro_reg2hw_csr0_reg_t csr0; // [158:135]
    otp_macro_reg2hw_csr1_reg_t csr1; // [134:103]
    otp_macro_reg2hw_csr2_reg_t csr2; // [102:102]
    otp_macro_reg2hw_csr3_reg_t csr3; // [101:82]
    otp_macro_reg2hw_csr4_reg_t csr4; // [81:69]
    otp_macro_reg2hw_csr5_reg_t csr5; // [68:39]
    otp_macro_reg2hw_csr6_reg_t csr6; // [38:11]
    otp_macro_reg2hw_csr7_reg_t csr7; // [10:0]
  } otp_macro_prim_reg2hw_t;

  // HW -> register type for prim interface
  typedef struct packed {
    otp_macro_hw2reg_csr3_reg_t csr3; // [80:52]
    otp_macro_hw2reg_csr5_reg_t csr5; // [51:15]
    otp_macro_hw2reg_csr7_reg_t csr7; // [14:0]
  } otp_macro_prim_hw2reg_t;

  // Register offsets for prim interface
  parameter logic [PrimAw-1:0] OTP_MACRO_CSR0_OFFSET = 5'h 0;
  parameter logic [PrimAw-1:0] OTP_MACRO_CSR1_OFFSET = 5'h 4;
  parameter logic [PrimAw-1:0] OTP_MACRO_CSR2_OFFSET = 5'h 8;
  parameter logic [PrimAw-1:0] OTP_MACRO_CSR3_OFFSET = 5'h c;
  parameter logic [PrimAw-1:0] OTP_MACRO_CSR4_OFFSET = 5'h 10;
  parameter logic [PrimAw-1:0] OTP_MACRO_CSR5_OFFSET = 5'h 14;
  parameter logic [PrimAw-1:0] OTP_MACRO_CSR6_OFFSET = 5'h 18;
  parameter logic [PrimAw-1:0] OTP_MACRO_CSR7_OFFSET = 5'h 1c;

  // Register index for prim interface
  typedef enum int {
    OTP_MACRO_CSR0,
    OTP_MACRO_CSR1,
    OTP_MACRO_CSR2,
    OTP_MACRO_CSR3,
    OTP_MACRO_CSR4,
    OTP_MACRO_CSR5,
    OTP_MACRO_CSR6,
    OTP_MACRO_CSR7
  } otp_macro_prim_id_e;

  // Register width information to check illegal writes for prim interface
  parameter logic [3:0] OTP_MACRO_PRIM_PERMIT [8] = '{
    4'b 1111, // index[0] OTP_MACRO_CSR0
    4'b 1111, // index[1] OTP_MACRO_CSR1
    4'b 0001, // index[2] OTP_MACRO_CSR2
    4'b 0111, // index[3] OTP_MACRO_CSR3
    4'b 0011, // index[4] OTP_MACRO_CSR4
    4'b 1111, // index[5] OTP_MACRO_CSR5
    4'b 1111, // index[6] OTP_MACRO_CSR6
    4'b 0011  // index[7] OTP_MACRO_CSR7
  };

endpackage
