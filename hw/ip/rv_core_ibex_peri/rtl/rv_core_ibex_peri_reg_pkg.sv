// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package rv_core_ibex_peri_reg_pkg;

  // Param list
  parameter int NumSwAlerts = 2;
  parameter int NumAlerts = 4;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } fatal_sw_err;
    struct packed {
      logic        q;
      logic        qe;
    } recov_sw_err;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_hw_err;
    struct packed {
      logic        q;
      logic        qe;
    } recov_hw_err;
  } rv_core_ibex_peri_reg2hw_alert_test_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_core_ibex_peri_reg2hw_sw_alert_mreg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } reg_intg_err;
    struct packed {
      logic        d;
      logic        de;
    } fatal_intg_err;
    struct packed {
      logic        d;
      logic        de;
    } fatal_core_err;
    struct packed {
      logic        d;
      logic        de;
    } recov_core_err;
  } rv_core_ibex_peri_hw2reg_err_status_reg_t;

  // Register -> HW type
  typedef struct packed {
    rv_core_ibex_peri_reg2hw_alert_test_reg_t alert_test; // [11:4]
    rv_core_ibex_peri_reg2hw_sw_alert_mreg_t [1:0] sw_alert; // [3:0]
  } rv_core_ibex_peri_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    rv_core_ibex_peri_hw2reg_err_status_reg_t err_status; // [7:0]
  } rv_core_ibex_peri_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] RV_CORE_IBEX_PERI_ALERT_TEST_OFFSET = 5'h 0;
  parameter logic [BlockAw-1:0] RV_CORE_IBEX_PERI_SW_ALERT_REGWEN_0_OFFSET = 5'h 4;
  parameter logic [BlockAw-1:0] RV_CORE_IBEX_PERI_SW_ALERT_REGWEN_1_OFFSET = 5'h 8;
  parameter logic [BlockAw-1:0] RV_CORE_IBEX_PERI_SW_ALERT_0_OFFSET = 5'h c;
  parameter logic [BlockAw-1:0] RV_CORE_IBEX_PERI_SW_ALERT_1_OFFSET = 5'h 10;
  parameter logic [BlockAw-1:0] RV_CORE_IBEX_PERI_ERR_STATUS_OFFSET = 5'h 14;

  // Reset values for hwext registers and their fields
  parameter logic [3:0] RV_CORE_IBEX_PERI_ALERT_TEST_RESVAL = 4'h 0;
  parameter logic [0:0] RV_CORE_IBEX_PERI_ALERT_TEST_FATAL_SW_ERR_RESVAL = 1'h 0;
  parameter logic [0:0] RV_CORE_IBEX_PERI_ALERT_TEST_RECOV_SW_ERR_RESVAL = 1'h 0;
  parameter logic [0:0] RV_CORE_IBEX_PERI_ALERT_TEST_FATAL_HW_ERR_RESVAL = 1'h 0;
  parameter logic [0:0] RV_CORE_IBEX_PERI_ALERT_TEST_RECOV_HW_ERR_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    RV_CORE_IBEX_PERI_ALERT_TEST,
    RV_CORE_IBEX_PERI_SW_ALERT_REGWEN_0,
    RV_CORE_IBEX_PERI_SW_ALERT_REGWEN_1,
    RV_CORE_IBEX_PERI_SW_ALERT_0,
    RV_CORE_IBEX_PERI_SW_ALERT_1,
    RV_CORE_IBEX_PERI_ERR_STATUS
  } rv_core_ibex_peri_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] RV_CORE_IBEX_PERI_PERMIT [6] = '{
    4'b 0001, // index[0] RV_CORE_IBEX_PERI_ALERT_TEST
    4'b 0001, // index[1] RV_CORE_IBEX_PERI_SW_ALERT_REGWEN_0
    4'b 0001, // index[2] RV_CORE_IBEX_PERI_SW_ALERT_REGWEN_1
    4'b 0001, // index[3] RV_CORE_IBEX_PERI_SW_ALERT_0
    4'b 0001, // index[4] RV_CORE_IBEX_PERI_SW_ALERT_1
    4'b 0011  // index[5] RV_CORE_IBEX_PERI_ERR_STATUS
  };

endpackage

