// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Life cycle state encoding definition.
//
// DO NOT EDIT THIS FILE DIRECTLY.
// It has been generated with
// $ cd hw/ip/lc_ctrl/util/ && .gen-lc-state-enc.py --seed ${config['seed']}
//
package lc_ctrl_state_pkg;
<%
data_width = config['secded']['data_width']
ecc_width  = config['secded']['ecc_width']
%>
  // These values have been generated such that they are incrementally writeable with respect
  // to the ECC polynomial specified. The values are used to define the life cycle manufacturing
  // state and transition counter encoding in lc_ctrl_pkg.sv.
  //
  // The values are unique and have the following statistics (considering all ${data_width}
  // data and ${ecc_width} ECC bits):
  //
  // - Minimum Hamming weight: ${config['stats']['min_hw']}
  // - Maximum Hamming weight: ${config['stats']['max_hw']}
  // - Minimum Hamming distance: ${config['stats']['min_hd']}
  // - Maximum Hamming distance: ${config['stats']['max_hd']}
  //
  // Hamming distance histogram:
  //
% for bar in config['stats']['bars']:
  // ${bar}
% endfor
  //
  //
  // Note that the ECC bits are not defined in this package as they will be calculated by
  // the OTP ECC logic at runtime.

  // The A/B values are used for the encoded LC state.
% for word in config['ab_words']:
  parameter logic [${data_width-1}:0] A${loop.index} = ${data_width}'b${word[0][ecc_width:]}; // ECC: ${ecc_width}'b${word[0][0:ecc_width]}
  parameter logic [${data_width-1}:0] B${loop.index} = ${data_width}'b${word[1][ecc_width:]}; // ECC: ${ecc_width}'b${word[1][0:ecc_width]}

% endfor

  // The C/D values are used for the encoded LC transition counter.
% for word in config['cd_words']:
  parameter logic [${data_width-1}:0] C${loop.index} = ${data_width}'b${word[0][ecc_width:]}; // ECC: ${ecc_width}'b${word[0][0:ecc_width]}
  parameter logic [${data_width-1}:0] D${loop.index} = ${data_width}'b${word[1][ecc_width:]}; // ECC: ${ecc_width}'b${word[1][0:ecc_width]}

% endfor

  // The E/F values are used for the encoded ID state.
% for word in config['ef_words']:
  parameter logic [${data_width-1}:0] E${loop.index} = ${data_width}'b${word[0][ecc_width:]}; // ECC: ${ecc_width}'b${word[0][0:ecc_width]}
  parameter logic [${data_width-1}:0] F${loop.index} = ${data_width}'b${word[1][ecc_width:]}; // ECC: ${ecc_width}'b${word[1][0:ecc_width]}

% endfor

endpackage : lc_ctrl_state_pkg
