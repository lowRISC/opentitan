// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module pattgen_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output pattgen_reg_pkg::pattgen_reg2hw_t reg2hw, // Write
  input  pattgen_reg_pkg::pattgen_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import pattgen_reg_pkg::* ;

  localparam int AW = 6;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_patt_done0_qs;
  logic intr_state_patt_done0_wd;
  logic intr_state_patt_done0_we;
  logic intr_state_patt_done1_qs;
  logic intr_state_patt_done1_wd;
  logic intr_state_patt_done1_we;
  logic intr_enable_patt_done0_qs;
  logic intr_enable_patt_done0_wd;
  logic intr_enable_patt_done0_we;
  logic intr_enable_patt_done1_qs;
  logic intr_enable_patt_done1_wd;
  logic intr_enable_patt_done1_we;
  logic intr_test_patt_done0_wd;
  logic intr_test_patt_done0_we;
  logic intr_test_patt_done1_wd;
  logic intr_test_patt_done1_we;
  logic ctrl_qs;
  logic ctrl_wd;
  logic ctrl_we;
  logic start_start0_wd;
  logic start_start0_we;
  logic start_start1_wd;
  logic start_start1_we;
  logic [31:0] prediv0_qs;
  logic [31:0] prediv0_wd;
  logic prediv0_we;
  logic [31:0] prediv1_qs;
  logic [31:0] prediv1_wd;
  logic prediv1_we;
  logic [5:0] patt_len_len0_qs;
  logic [5:0] patt_len_len0_wd;
  logic patt_len_len0_we;
  logic [5:0] patt_len_len1_qs;
  logic [5:0] patt_len_len1_wd;
  logic patt_len_len1_we;
  logic [9:0] patt_loop_loop0_qs;
  logic [9:0] patt_loop_loop0_wd;
  logic patt_loop_loop0_we;
  logic [9:0] patt_loop_loop1_qs;
  logic [9:0] patt_loop_loop1_wd;
  logic patt_loop_loop1_we;
  logic intr_mask_mask0_qs;
  logic intr_mask_mask0_wd;
  logic intr_mask_mask0_we;
  logic intr_mask_mask1_qs;
  logic intr_mask_mask1_wd;
  logic intr_mask_mask1_we;

  // Register instances
  // R[intr_state]: V(False)

  //   F[patt_done0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_patt_done0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_patt_done0_we),
    .wd     (intr_state_patt_done0_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.patt_done0.de),
    .d      (hw2reg.intr_state.patt_done0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.patt_done0.q ),

    // to register interface (read)
    .qs     (intr_state_patt_done0_qs)
  );


  //   F[patt_done1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_patt_done1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_patt_done1_we),
    .wd     (intr_state_patt_done1_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.patt_done1.de),
    .d      (hw2reg.intr_state.patt_done1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.patt_done1.q ),

    // to register interface (read)
    .qs     (intr_state_patt_done1_qs)
  );


  // R[intr_enable]: V(False)

  //   F[patt_done0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_patt_done0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_patt_done0_we),
    .wd     (intr_enable_patt_done0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.patt_done0.q ),

    // to register interface (read)
    .qs     (intr_enable_patt_done0_qs)
  );


  //   F[patt_done1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_patt_done1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_patt_done1_we),
    .wd     (intr_enable_patt_done1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.patt_done1.q ),

    // to register interface (read)
    .qs     (intr_enable_patt_done1_qs)
  );


  // R[intr_test]: V(True)

  //   F[patt_done0]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_patt_done0 (
    .re     (1'b0),
    .we     (intr_test_patt_done0_we),
    .wd     (intr_test_patt_done0_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.patt_done0.qe),
    .q      (reg2hw.intr_test.patt_done0.q ),
    .qs     ()
  );


  //   F[patt_done1]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_patt_done1 (
    .re     (1'b0),
    .we     (intr_test_patt_done1_we),
    .wd     (intr_test_patt_done1_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.patt_done1.qe),
    .q      (reg2hw.intr_test.patt_done1.q ),
    .qs     ()
  );


  // R[ctrl]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.q ),

    // to register interface (read)
    .qs     (ctrl_qs)
  );


  // R[start]: V(False)

  //   F[start0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_start_start0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_start0_we),
    .wd     (start_start0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.start.start0.qe),
    .q      (reg2hw.start.start0.q ),

    .qs     ()
  );


  //   F[start1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_start_start1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_start1_we),
    .wd     (start_start1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.start.start1.qe),
    .q      (reg2hw.start.start1.q ),

    .qs     ()
  );



  // Subregister 0 of Multireg prediv
  // R[prediv0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prediv0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prediv0_we),
    .wd     (prediv0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prediv[0].qe),
    .q      (reg2hw.prediv[0].q ),

    // to register interface (read)
    .qs     (prediv0_qs)
  );

  // Subregister 1 of Multireg prediv
  // R[prediv1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prediv1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prediv1_we),
    .wd     (prediv1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prediv[1].qe),
    .q      (reg2hw.prediv[1].q ),

    // to register interface (read)
    .qs     (prediv1_qs)
  );


  // R[patt_len]: V(False)

  //   F[len0]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_patt_len_len0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (patt_len_len0_we),
    .wd     (patt_len_len0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.patt_len.len0.qe),
    .q      (reg2hw.patt_len.len0.q ),

    // to register interface (read)
    .qs     (patt_len_len0_qs)
  );


  //   F[len1]: 12:7
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_patt_len_len1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (patt_len_len1_we),
    .wd     (patt_len_len1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.patt_len.len1.qe),
    .q      (reg2hw.patt_len.len1.q ),

    // to register interface (read)
    .qs     (patt_len_len1_qs)
  );


  // R[patt_loop]: V(False)

  //   F[loop0]: 9:0
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_patt_loop_loop0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (patt_loop_loop0_we),
    .wd     (patt_loop_loop0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.patt_loop.loop0.qe),
    .q      (reg2hw.patt_loop.loop0.q ),

    // to register interface (read)
    .qs     (patt_loop_loop0_qs)
  );


  //   F[loop1]: 19:10
  prim_subreg #(
    .DW      (10),
    .SWACCESS("RW"),
    .RESVAL  (10'h0)
  ) u_patt_loop_loop1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (patt_loop_loop1_we),
    .wd     (patt_loop_loop1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.patt_loop.loop1.qe),
    .q      (reg2hw.patt_loop.loop1.q ),

    // to register interface (read)
    .qs     (patt_loop_loop1_qs)
  );


  // R[intr_mask]: V(False)

  //   F[mask0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_mask_mask0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_mask_mask0_we),
    .wd     (intr_mask_mask0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.intr_mask.mask0.qe),
    .q      (reg2hw.intr_mask.mask0.q ),

    // to register interface (read)
    .qs     (intr_mask_mask0_qs)
  );


  //   F[mask1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_mask_mask1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_mask_mask1_we),
    .wd     (intr_mask_mask1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.intr_mask.mask1.qe),
    .q      (reg2hw.intr_mask.mask1.q ),

    // to register interface (read)
    .qs     (intr_mask_mask1_qs)
  );




  logic [9:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == PATTGEN_INTR_STATE_OFFSET);
    addr_hit[1] = (reg_addr == PATTGEN_INTR_ENABLE_OFFSET);
    addr_hit[2] = (reg_addr == PATTGEN_INTR_TEST_OFFSET);
    addr_hit[3] = (reg_addr == PATTGEN_CTRL_OFFSET);
    addr_hit[4] = (reg_addr == PATTGEN_START_OFFSET);
    addr_hit[5] = (reg_addr == PATTGEN_PREDIV0_OFFSET);
    addr_hit[6] = (reg_addr == PATTGEN_PREDIV1_OFFSET);
    addr_hit[7] = (reg_addr == PATTGEN_PATT_LEN_OFFSET);
    addr_hit[8] = (reg_addr == PATTGEN_PATT_LOOP_OFFSET);
    addr_hit[9] = (reg_addr == PATTGEN_INTR_MASK_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (PATTGEN_PERMIT[0] != (PATTGEN_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (PATTGEN_PERMIT[1] != (PATTGEN_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[2] && reg_we && (PATTGEN_PERMIT[2] != (PATTGEN_PERMIT[2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[3] && reg_we && (PATTGEN_PERMIT[3] != (PATTGEN_PERMIT[3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[4] && reg_we && (PATTGEN_PERMIT[4] != (PATTGEN_PERMIT[4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[5] && reg_we && (PATTGEN_PERMIT[5] != (PATTGEN_PERMIT[5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[6] && reg_we && (PATTGEN_PERMIT[6] != (PATTGEN_PERMIT[6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[7] && reg_we && (PATTGEN_PERMIT[7] != (PATTGEN_PERMIT[7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[8] && reg_we && (PATTGEN_PERMIT[8] != (PATTGEN_PERMIT[8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[9] && reg_we && (PATTGEN_PERMIT[9] != (PATTGEN_PERMIT[9] & reg_be))) wr_err = 1'b1 ;
  end

  assign intr_state_patt_done0_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_patt_done0_wd = reg_wdata[0];

  assign intr_state_patt_done1_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_patt_done1_wd = reg_wdata[1];

  assign intr_enable_patt_done0_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_patt_done0_wd = reg_wdata[0];

  assign intr_enable_patt_done1_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_patt_done1_wd = reg_wdata[1];

  assign intr_test_patt_done0_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_patt_done0_wd = reg_wdata[0];

  assign intr_test_patt_done1_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_patt_done1_wd = reg_wdata[1];

  assign ctrl_we = addr_hit[3] & reg_we & ~wr_err;
  assign ctrl_wd = reg_wdata[0];

  assign start_start0_we = addr_hit[4] & reg_we & ~wr_err;
  assign start_start0_wd = reg_wdata[0];

  assign start_start1_we = addr_hit[4] & reg_we & ~wr_err;
  assign start_start1_wd = reg_wdata[1];

  assign prediv0_we = addr_hit[5] & reg_we & ~wr_err;
  assign prediv0_wd = reg_wdata[31:0];

  assign prediv1_we = addr_hit[6] & reg_we & ~wr_err;
  assign prediv1_wd = reg_wdata[31:0];

  assign patt_len_len0_we = addr_hit[7] & reg_we & ~wr_err;
  assign patt_len_len0_wd = reg_wdata[5:0];

  assign patt_len_len1_we = addr_hit[7] & reg_we & ~wr_err;
  assign patt_len_len1_wd = reg_wdata[12:7];

  assign patt_loop_loop0_we = addr_hit[8] & reg_we & ~wr_err;
  assign patt_loop_loop0_wd = reg_wdata[9:0];

  assign patt_loop_loop1_we = addr_hit[8] & reg_we & ~wr_err;
  assign patt_loop_loop1_wd = reg_wdata[19:10];

  assign intr_mask_mask0_we = addr_hit[9] & reg_we & ~wr_err;
  assign intr_mask_mask0_wd = reg_wdata[0];

  assign intr_mask_mask1_we = addr_hit[9] & reg_we & ~wr_err;
  assign intr_mask_mask1_wd = reg_wdata[1];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_patt_done0_qs;
        reg_rdata_next[1] = intr_state_patt_done1_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_patt_done0_qs;
        reg_rdata_next[1] = intr_enable_patt_done1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = ctrl_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = prediv0_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = prediv1_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[5:0] = patt_len_len0_qs;
        reg_rdata_next[12:7] = patt_len_len1_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[9:0] = patt_loop_loop0_qs;
        reg_rdata_next[19:10] = patt_loop_loop1_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = intr_mask_mask0_qs;
        reg_rdata_next[1] = intr_mask_mask1_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)

endmodule
