// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package pattgen_reg_pkg;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic        q;
  } pattgen_reg2hw_intr_state_reg_t;

  typedef struct packed {
    logic        q;
  } pattgen_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } pattgen_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic        q;
  } pattgen_reg2hw_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } start0;
    struct packed {
      logic        q;
      logic        qe;
    } start1;
  } pattgen_reg2hw_start_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } pattgen_reg2hw_prediv1_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } pattgen_reg2hw_prediv2_reg_t;

  typedef struct packed {
    struct packed {
      logic [5:0]  q;
      logic        qe;
    } len1;
    struct packed {
      logic [5:0]  q;
      logic        qe;
    } len2;
  } pattgen_reg2hw_pttlen_reg_t;

  typedef struct packed {
    struct packed {
      logic [9:0] q;
      logic        qe;
    } loop1;
    struct packed {
      logic [9:0] q;
      logic        qe;
    } loop2;
  } pattgen_reg2hw_pttloop_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } mask1;
    struct packed {
      logic        q;
      logic        qe;
    } mask2;
  } pattgen_reg2hw_intr_mask_reg_t;


  typedef struct packed {
    logic        d;
    logic        de;
  } pattgen_hw2reg_intr_state_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    pattgen_reg2hw_intr_state_reg_t intr_state; // [114:114]
    pattgen_reg2hw_intr_enable_reg_t intr_enable; // [113:113]
    pattgen_reg2hw_intr_test_reg_t intr_test; // [112:111]
    pattgen_reg2hw_ctrl_reg_t ctrl; // [110:110]
    pattgen_reg2hw_start_reg_t start; // [109:106]
    pattgen_reg2hw_prediv1_reg_t prediv1; // [105:73]
    pattgen_reg2hw_prediv2_reg_t prediv2; // [72:40]
    pattgen_reg2hw_pttlen_reg_t pttlen; // [39:26]
    pattgen_reg2hw_pttloop_reg_t pttloop; // [25:4]
    pattgen_reg2hw_intr_mask_reg_t intr_mask; // [3:0]
  } pattgen_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    pattgen_hw2reg_intr_state_reg_t intr_state; // [1:1]
  } pattgen_hw2reg_t;

  // Register Address
  parameter logic [5:0] PATTGEN_INTR_STATE_OFFSET = 6'h 0;
  parameter logic [5:0] PATTGEN_INTR_ENABLE_OFFSET = 6'h 4;
  parameter logic [5:0] PATTGEN_INTR_TEST_OFFSET = 6'h 8;
  parameter logic [5:0] PATTGEN_CTRL_OFFSET = 6'h c;
  parameter logic [5:0] PATTGEN_START_OFFSET = 6'h 10;
  parameter logic [5:0] PATTGEN_PREDIV1_OFFSET = 6'h 14;
  parameter logic [5:0] PATTGEN_PREDIV2_OFFSET = 6'h 18;
  parameter logic [5:0] PATTGEN_PTTLEN_OFFSET = 6'h 1c;
  parameter logic [5:0] PATTGEN_PTTLOOP_OFFSET = 6'h 20;
  parameter logic [5:0] PATTGEN_INTR_MASK_OFFSET = 6'h 24;


  // Register Index
  typedef enum int {
    PATTGEN_INTR_STATE,
    PATTGEN_INTR_ENABLE,
    PATTGEN_INTR_TEST,
    PATTGEN_CTRL,
    PATTGEN_START,
    PATTGEN_PREDIV1,
    PATTGEN_PREDIV2,
    PATTGEN_PTTLEN,
    PATTGEN_PTTLOOP,
    PATTGEN_INTR_MASK
  } pattgen_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PATTGEN_PERMIT [10] = '{
    4'b 0001, // index[0] PATTGEN_INTR_STATE
    4'b 0001, // index[1] PATTGEN_INTR_ENABLE
    4'b 0001, // index[2] PATTGEN_INTR_TEST
    4'b 0001, // index[3] PATTGEN_CTRL
    4'b 0001, // index[4] PATTGEN_START
    4'b 1111, // index[5] PATTGEN_PREDIV1
    4'b 1111, // index[6] PATTGEN_PREDIV2
    4'b 0011, // index[7] PATTGEN_PTTLEN
    4'b 0111, // index[8] PATTGEN_PTTLOOP
    4'b 0001  // index[9] PATTGEN_INTR_MASK
  };
endpackage

