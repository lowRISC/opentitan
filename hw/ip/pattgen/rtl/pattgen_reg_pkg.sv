// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package pattgen_reg_pkg;

  // Param list
  parameter int NumRegsPrediv = 2;
  parameter int NumRegsData = 2;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    struct packed {
      logic        q;
    } intr_patt_done_ch0;
    struct packed {
      logic        q;
    } intr_patt_done_ch1;
  } pattgen_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } intr_patt_done_ch0;
    struct packed {
      logic        q;
    } intr_patt_done_ch1;
  } pattgen_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } intr_patt_done_ch0;
    struct packed {
      logic        q;
      logic        qe;
    } intr_patt_done_ch1;
  } pattgen_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic        q;
  } pattgen_reg2hw_patt_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } ch0_start;
    struct packed {
      logic        q;
      logic        qe;
    } ch1_start;
  } pattgen_reg2hw_patt_start_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } pattgen_reg2hw_patt_prediv_mreg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } pattgen_reg2hw_patt_data_ch0_mreg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } pattgen_reg2hw_patt_data_ch1_mreg_t;

  typedef struct packed {
    struct packed {
      logic [5:0]  q;
      logic        qe;
    } ch0_len;
    struct packed {
      logic [5:0]  q;
      logic        qe;
    } ch1_len;
  } pattgen_reg2hw_patt_len_reg_t;

  typedef struct packed {
    struct packed {
      logic [9:0] q;
      logic        qe;
    } ch0_loop;
    struct packed {
      logic [9:0] q;
      logic        qe;
    } ch1_loop;
  } pattgen_reg2hw_patt_loop_reg_t;


  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } intr_patt_done_ch0;
    struct packed {
      logic        d;
      logic        de;
    } intr_patt_done_ch1;
  } pattgen_hw2reg_intr_state_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    pattgen_reg2hw_intr_state_reg_t intr_state; // [246:245]
    pattgen_reg2hw_intr_enable_reg_t intr_enable; // [244:243]
    pattgen_reg2hw_intr_test_reg_t intr_test; // [242:239]
    pattgen_reg2hw_patt_ctrl_reg_t patt_ctrl; // [238:238]
    pattgen_reg2hw_patt_start_reg_t patt_start; // [237:234]
    pattgen_reg2hw_patt_prediv_mreg_t [1:0] patt_prediv; // [233:168]
    pattgen_reg2hw_patt_data_ch0_mreg_t [1:0] patt_data_ch0; // [167:102]
    pattgen_reg2hw_patt_data_ch1_mreg_t [1:0] patt_data_ch1; // [101:36]
    pattgen_reg2hw_patt_len_reg_t patt_len; // [35:22]
    pattgen_reg2hw_patt_loop_reg_t patt_loop; // [21:0]
  } pattgen_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    pattgen_hw2reg_intr_state_reg_t intr_state; // [3:2]
  } pattgen_hw2reg_t;

  // Register Address
  parameter logic [5:0] PATTGEN_INTR_STATE_OFFSET = 6'h 0;
  parameter logic [5:0] PATTGEN_INTR_ENABLE_OFFSET = 6'h 4;
  parameter logic [5:0] PATTGEN_INTR_TEST_OFFSET = 6'h 8;
  parameter logic [5:0] PATTGEN_PATT_CTRL_OFFSET = 6'h c;
  parameter logic [5:0] PATTGEN_PATT_START_OFFSET = 6'h 10;
  parameter logic [5:0] PATTGEN_PATT_PREDIV0_OFFSET = 6'h 14;
  parameter logic [5:0] PATTGEN_PATT_PREDIV1_OFFSET = 6'h 18;
  parameter logic [5:0] PATTGEN_PATT_DATA_CH00_OFFSET = 6'h 1c;
  parameter logic [5:0] PATTGEN_PATT_DATA_CH01_OFFSET = 6'h 20;
  parameter logic [5:0] PATTGEN_PATT_DATA_CH10_OFFSET = 6'h 24;
  parameter logic [5:0] PATTGEN_PATT_DATA_CH11_OFFSET = 6'h 28;
  parameter logic [5:0] PATTGEN_PATT_LEN_OFFSET = 6'h 2c;
  parameter logic [5:0] PATTGEN_PATT_LOOP_OFFSET = 6'h 30;


  // Register Index
  typedef enum int {
    PATTGEN_INTR_STATE,
    PATTGEN_INTR_ENABLE,
    PATTGEN_INTR_TEST,
    PATTGEN_PATT_CTRL,
    PATTGEN_PATT_START,
    PATTGEN_PATT_PREDIV0,
    PATTGEN_PATT_PREDIV1,
    PATTGEN_PATT_DATA_CH00,
    PATTGEN_PATT_DATA_CH01,
    PATTGEN_PATT_DATA_CH10,
    PATTGEN_PATT_DATA_CH11,
    PATTGEN_PATT_LEN,
    PATTGEN_PATT_LOOP
  } pattgen_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PATTGEN_PERMIT [13] = '{
    4'b 0001, // index[ 0] PATTGEN_INTR_STATE
    4'b 0001, // index[ 1] PATTGEN_INTR_ENABLE
    4'b 0001, // index[ 2] PATTGEN_INTR_TEST
    4'b 0001, // index[ 3] PATTGEN_PATT_CTRL
    4'b 0001, // index[ 4] PATTGEN_PATT_START
    4'b 1111, // index[ 5] PATTGEN_PATT_PREDIV0
    4'b 1111, // index[ 6] PATTGEN_PATT_PREDIV1
    4'b 1111, // index[ 7] PATTGEN_PATT_DATA_CH00
    4'b 1111, // index[ 8] PATTGEN_PATT_DATA_CH01
    4'b 1111, // index[ 9] PATTGEN_PATT_DATA_CH10
    4'b 1111, // index[10] PATTGEN_PATT_DATA_CH11
    4'b 0011, // index[11] PATTGEN_PATT_LEN
    4'b 0111  // index[12] PATTGEN_PATT_LOOP
  };
endpackage

