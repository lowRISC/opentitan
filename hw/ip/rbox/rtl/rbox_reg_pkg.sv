// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package rbox_reg_pkg;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic        q;
    logic        qe;
  } rbox_reg2hw_cfg_lock_ctl_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } rbox_reg2hw_ec_rst_ctl_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } rbox_reg2hw_flash_wp_ctl_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } rbox_reg2hw_key_com0_debounce_ctl_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } rbox_reg2hw_key_com1_debounce_ctl_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } rbox_reg2hw_key_com2_debounce_ctl_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } rbox_reg2hw_key_com3_debounce_ctl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } key0_in;
    struct packed {
      logic        q;
      logic        qe;
    } key0_out;
    struct packed {
      logic        q;
      logic        qe;
    } key1_in;
    struct packed {
      logic        q;
      logic        qe;
    } key1_out;
    struct packed {
      logic        q;
      logic        qe;
    } key2_in;
    struct packed {
      logic        q;
      logic        qe;
    } key2_out;
    struct packed {
      logic        q;
      logic        qe;
    } pwrb_in;
    struct packed {
      logic        q;
      logic        qe;
    } pwrb_out;
  } rbox_reg2hw_key_invert_ctl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } bat_en;
    struct packed {
      logic        q;
      logic        qe;
    } ec_in_rw;
    struct packed {
      logic        q;
      logic        qe;
    } flash_wp_l;
    struct packed {
      logic        q;
      logic        qe;
    } ec_rst_l;
    struct packed {
      logic        q;
      logic        qe;
    } pwrb_out;
    struct packed {
      logic        q;
      logic        qe;
    } key0_out;
    struct packed {
      logic        q;
      logic        qe;
    } key1_out;
    struct packed {
      logic        q;
      logic        qe;
    } key2_out;
  } rbox_reg2hw_pin_out_ctl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } bat_en;
    struct packed {
      logic        q;
      logic        qe;
    } ec_in_rw;
    struct packed {
      logic        q;
      logic        qe;
    } flash_wp_l;
    struct packed {
      logic        q;
      logic        qe;
    } ec_rst_l;
    struct packed {
      logic        q;
      logic        qe;
    } pwrb_out;
    struct packed {
      logic        q;
      logic        qe;
    } key0_out;
    struct packed {
      logic        q;
      logic        qe;
    } key1_out;
    struct packed {
      logic        q;
      logic        qe;
    } key2_out;
  } rbox_reg2hw_pin_out_value_reg_t;


  typedef struct packed {
    logic        d;
    logic        de;
  } rbox_hw2reg_cfg_lock_ctl_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } rbox_hw2reg_ec_rst_ctl_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } rbox_hw2reg_flash_wp_ctl_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } rbox_hw2reg_key_com0_debounce_ctl_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } rbox_hw2reg_key_com1_debounce_ctl_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } rbox_hw2reg_key_com2_debounce_ctl_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } rbox_hw2reg_key_com3_debounce_ctl_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } key0_in;
    struct packed {
      logic        d;
      logic        de;
    } key0_out;
    struct packed {
      logic        d;
      logic        de;
    } key1_in;
    struct packed {
      logic        d;
      logic        de;
    } key1_out;
    struct packed {
      logic        d;
      logic        de;
    } key2_in;
    struct packed {
      logic        d;
      logic        de;
    } key2_out;
    struct packed {
      logic        d;
      logic        de;
    } pwrb_in;
    struct packed {
      logic        d;
      logic        de;
    } pwrb_out;
  } rbox_hw2reg_key_invert_ctl_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } bat_en;
    struct packed {
      logic        d;
      logic        de;
    } ec_in_rw;
    struct packed {
      logic        d;
      logic        de;
    } flash_wp_l;
    struct packed {
      logic        d;
      logic        de;
    } ec_rst_l;
    struct packed {
      logic        d;
      logic        de;
    } pwrb_out;
    struct packed {
      logic        d;
      logic        de;
    } key0_out;
    struct packed {
      logic        d;
      logic        de;
    } key1_out;
    struct packed {
      logic        d;
      logic        de;
    } key2_out;
  } rbox_hw2reg_pin_out_ctl_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } bat_en;
    struct packed {
      logic        d;
      logic        de;
    } ec_in_rw;
    struct packed {
      logic        d;
      logic        de;
    } flash_wp_l;
    struct packed {
      logic        d;
      logic        de;
    } ec_rst_l;
    struct packed {
      logic        d;
      logic        de;
    } pwrb_out;
    struct packed {
      logic        d;
      logic        de;
    } key0_out;
    struct packed {
      logic        d;
      logic        de;
    } key1_out;
    struct packed {
      logic        d;
      logic        de;
    } key2_out;
  } rbox_hw2reg_pin_out_value_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    rbox_reg2hw_cfg_lock_ctl_reg_t cfg_lock_ctl; // [216:215]
    rbox_reg2hw_ec_rst_ctl_reg_t ec_rst_ctl; // [214:182]
    rbox_reg2hw_flash_wp_ctl_reg_t flash_wp_ctl; // [181:180]
    rbox_reg2hw_key_com0_debounce_ctl_reg_t key_com0_debounce_ctl; // [179:147]
    rbox_reg2hw_key_com1_debounce_ctl_reg_t key_com1_debounce_ctl; // [146:114]
    rbox_reg2hw_key_com2_debounce_ctl_reg_t key_com2_debounce_ctl; // [113:81]
    rbox_reg2hw_key_com3_debounce_ctl_reg_t key_com3_debounce_ctl; // [80:48]
    rbox_reg2hw_key_invert_ctl_reg_t key_invert_ctl; // [47:32]
    rbox_reg2hw_pin_out_ctl_reg_t pin_out_ctl; // [31:16]
    rbox_reg2hw_pin_out_value_reg_t pin_out_value; // [15:0]
  } rbox_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    rbox_hw2reg_cfg_lock_ctl_reg_t cfg_lock_ctl; // [216:215]
    rbox_hw2reg_ec_rst_ctl_reg_t ec_rst_ctl; // [214:182]
    rbox_hw2reg_flash_wp_ctl_reg_t flash_wp_ctl; // [181:180]
    rbox_hw2reg_key_com0_debounce_ctl_reg_t key_com0_debounce_ctl; // [179:147]
    rbox_hw2reg_key_com1_debounce_ctl_reg_t key_com1_debounce_ctl; // [146:114]
    rbox_hw2reg_key_com2_debounce_ctl_reg_t key_com2_debounce_ctl; // [113:81]
    rbox_hw2reg_key_com3_debounce_ctl_reg_t key_com3_debounce_ctl; // [80:48]
    rbox_hw2reg_key_invert_ctl_reg_t key_invert_ctl; // [47:32]
    rbox_hw2reg_pin_out_ctl_reg_t pin_out_ctl; // [31:16]
    rbox_hw2reg_pin_out_value_reg_t pin_out_value; // [15:0]
  } rbox_hw2reg_t;

  // Register Address
  parameter logic [5:0] RBOX_CFG_LOCK_CTL_OFFSET = 6'h 0;
  parameter logic [5:0] RBOX_EC_RST_CTL_OFFSET = 6'h 4;
  parameter logic [5:0] RBOX_FLASH_WP_CTL_OFFSET = 6'h 8;
  parameter logic [5:0] RBOX_KEY_COM0_DEBOUNCE_CTL_OFFSET = 6'h c;
  parameter logic [5:0] RBOX_KEY_COM1_DEBOUNCE_CTL_OFFSET = 6'h 10;
  parameter logic [5:0] RBOX_KEY_COM2_DEBOUNCE_CTL_OFFSET = 6'h 14;
  parameter logic [5:0] RBOX_KEY_COM3_DEBOUNCE_CTL_OFFSET = 6'h 18;
  parameter logic [5:0] RBOX_KEY_INVERT_CTL_OFFSET = 6'h 1c;
  parameter logic [5:0] RBOX_PIN_OUT_CTL_OFFSET = 6'h 20;
  parameter logic [5:0] RBOX_PIN_OUT_VALUE_OFFSET = 6'h 24;


  // Register Index
  typedef enum int {
    RBOX_CFG_LOCK_CTL,
    RBOX_EC_RST_CTL,
    RBOX_FLASH_WP_CTL,
    RBOX_KEY_COM0_DEBOUNCE_CTL,
    RBOX_KEY_COM1_DEBOUNCE_CTL,
    RBOX_KEY_COM2_DEBOUNCE_CTL,
    RBOX_KEY_COM3_DEBOUNCE_CTL,
    RBOX_KEY_INVERT_CTL,
    RBOX_PIN_OUT_CTL,
    RBOX_PIN_OUT_VALUE
  } rbox_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] RBOX_PERMIT [10] = '{
    4'b 0001, // index[0] RBOX_CFG_LOCK_CTL
    4'b 1111, // index[1] RBOX_EC_RST_CTL
    4'b 0001, // index[2] RBOX_FLASH_WP_CTL
    4'b 1111, // index[3] RBOX_KEY_COM0_DEBOUNCE_CTL
    4'b 1111, // index[4] RBOX_KEY_COM1_DEBOUNCE_CTL
    4'b 1111, // index[5] RBOX_KEY_COM2_DEBOUNCE_CTL
    4'b 1111, // index[6] RBOX_KEY_COM3_DEBOUNCE_CTL
    4'b 0001, // index[7] RBOX_KEY_INVERT_CTL
    4'b 0001, // index[8] RBOX_PIN_OUT_CTL
    4'b 0001  // index[9] RBOX_PIN_OUT_VALUE
  };
endpackage

