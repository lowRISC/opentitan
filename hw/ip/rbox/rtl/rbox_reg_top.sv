// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module rbox_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output rbox_reg_pkg::rbox_reg2hw_t reg2hw, // Write
  input  rbox_reg_pkg::rbox_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import rbox_reg_pkg::* ;

  localparam int AW = 6;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic cfg_lock_ctl_qs;
  logic cfg_lock_ctl_wd;
  logic cfg_lock_ctl_we;
  logic [31:0] ec_rst_ctl_qs;
  logic [31:0] ec_rst_ctl_wd;
  logic ec_rst_ctl_we;
  logic flash_wp_ctl_qs;
  logic flash_wp_ctl_wd;
  logic flash_wp_ctl_we;
  logic [31:0] key_com0_debounce_ctl_qs;
  logic [31:0] key_com0_debounce_ctl_wd;
  logic key_com0_debounce_ctl_we;
  logic [31:0] key_com1_debounce_ctl_qs;
  logic [31:0] key_com1_debounce_ctl_wd;
  logic key_com1_debounce_ctl_we;
  logic [31:0] key_com2_debounce_ctl_qs;
  logic [31:0] key_com2_debounce_ctl_wd;
  logic key_com2_debounce_ctl_we;
  logic [31:0] key_com3_debounce_ctl_qs;
  logic [31:0] key_com3_debounce_ctl_wd;
  logic key_com3_debounce_ctl_we;
  logic key_invert_ctl_key0_in_qs;
  logic key_invert_ctl_key0_in_wd;
  logic key_invert_ctl_key0_in_we;
  logic key_invert_ctl_key0_out_qs;
  logic key_invert_ctl_key0_out_wd;
  logic key_invert_ctl_key0_out_we;
  logic key_invert_ctl_key1_in_qs;
  logic key_invert_ctl_key1_in_wd;
  logic key_invert_ctl_key1_in_we;
  logic key_invert_ctl_key1_out_qs;
  logic key_invert_ctl_key1_out_wd;
  logic key_invert_ctl_key1_out_we;
  logic key_invert_ctl_key2_in_qs;
  logic key_invert_ctl_key2_in_wd;
  logic key_invert_ctl_key2_in_we;
  logic key_invert_ctl_key2_out_qs;
  logic key_invert_ctl_key2_out_wd;
  logic key_invert_ctl_key2_out_we;
  logic key_invert_ctl_pwrb_in_qs;
  logic key_invert_ctl_pwrb_in_wd;
  logic key_invert_ctl_pwrb_in_we;
  logic key_invert_ctl_pwrb_out_qs;
  logic key_invert_ctl_pwrb_out_wd;
  logic key_invert_ctl_pwrb_out_we;
  logic pin_out_ctl_bat_en_qs;
  logic pin_out_ctl_bat_en_wd;
  logic pin_out_ctl_bat_en_we;
  logic pin_out_ctl_ec_in_rw_qs;
  logic pin_out_ctl_ec_in_rw_wd;
  logic pin_out_ctl_ec_in_rw_we;
  logic pin_out_ctl_flash_wp_l_qs;
  logic pin_out_ctl_flash_wp_l_wd;
  logic pin_out_ctl_flash_wp_l_we;
  logic pin_out_ctl_ec_rst_l_qs;
  logic pin_out_ctl_ec_rst_l_wd;
  logic pin_out_ctl_ec_rst_l_we;
  logic pin_out_ctl_pwrb_out_qs;
  logic pin_out_ctl_pwrb_out_wd;
  logic pin_out_ctl_pwrb_out_we;
  logic pin_out_ctl_key0_out_qs;
  logic pin_out_ctl_key0_out_wd;
  logic pin_out_ctl_key0_out_we;
  logic pin_out_ctl_key1_out_qs;
  logic pin_out_ctl_key1_out_wd;
  logic pin_out_ctl_key1_out_we;
  logic pin_out_ctl_key2_out_qs;
  logic pin_out_ctl_key2_out_wd;
  logic pin_out_ctl_key2_out_we;
  logic pin_out_value_bat_en_qs;
  logic pin_out_value_bat_en_wd;
  logic pin_out_value_bat_en_we;
  logic pin_out_value_ec_in_rw_qs;
  logic pin_out_value_ec_in_rw_wd;
  logic pin_out_value_ec_in_rw_we;
  logic pin_out_value_flash_wp_l_qs;
  logic pin_out_value_flash_wp_l_wd;
  logic pin_out_value_flash_wp_l_we;
  logic pin_out_value_ec_rst_l_qs;
  logic pin_out_value_ec_rst_l_wd;
  logic pin_out_value_ec_rst_l_we;
  logic pin_out_value_pwrb_out_qs;
  logic pin_out_value_pwrb_out_wd;
  logic pin_out_value_pwrb_out_we;
  logic pin_out_value_key0_out_qs;
  logic pin_out_value_key0_out_wd;
  logic pin_out_value_key0_out_we;
  logic pin_out_value_key1_out_qs;
  logic pin_out_value_key1_out_wd;
  logic pin_out_value_key1_out_we;
  logic pin_out_value_key2_out_qs;
  logic pin_out_value_key2_out_wd;
  logic pin_out_value_key2_out_we;

  // Register instances
  // R[cfg_lock_ctl]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cfg_lock_ctl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_lock_ctl_we),
    .wd     (cfg_lock_ctl_wd),

    // from internal hardware
    .de     (hw2reg.cfg_lock_ctl.de),
    .d      (hw2reg.cfg_lock_ctl.d ),

    // to internal hardware
    .qe     (reg2hw.cfg_lock_ctl.qe),
    .q      (reg2hw.cfg_lock_ctl.q ),

    // to register interface (read)
    .qs     (cfg_lock_ctl_qs)
  );


  // R[ec_rst_ctl]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'ha04)
  ) u_ec_rst_ctl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ec_rst_ctl_we),
    .wd     (ec_rst_ctl_wd),

    // from internal hardware
    .de     (hw2reg.ec_rst_ctl.de),
    .d      (hw2reg.ec_rst_ctl.d ),

    // to internal hardware
    .qe     (reg2hw.ec_rst_ctl.qe),
    .q      (reg2hw.ec_rst_ctl.q ),

    // to register interface (read)
    .qs     (ec_rst_ctl_qs)
  );


  // R[flash_wp_ctl]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_flash_wp_ctl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (flash_wp_ctl_we),
    .wd     (flash_wp_ctl_wd),

    // from internal hardware
    .de     (hw2reg.flash_wp_ctl.de),
    .d      (hw2reg.flash_wp_ctl.d ),

    // to internal hardware
    .qe     (reg2hw.flash_wp_ctl.qe),
    .q      (reg2hw.flash_wp_ctl.q ),

    // to register interface (read)
    .qs     (flash_wp_ctl_qs)
  );


  // R[key_com0_debounce_ctl]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'ha04)
  ) u_key_com0_debounce_ctl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_com0_debounce_ctl_we),
    .wd     (key_com0_debounce_ctl_wd),

    // from internal hardware
    .de     (hw2reg.key_com0_debounce_ctl.de),
    .d      (hw2reg.key_com0_debounce_ctl.d ),

    // to internal hardware
    .qe     (reg2hw.key_com0_debounce_ctl.qe),
    .q      (reg2hw.key_com0_debounce_ctl.q ),

    // to register interface (read)
    .qs     (key_com0_debounce_ctl_qs)
  );


  // R[key_com1_debounce_ctl]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'ha04)
  ) u_key_com1_debounce_ctl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_com1_debounce_ctl_we),
    .wd     (key_com1_debounce_ctl_wd),

    // from internal hardware
    .de     (hw2reg.key_com1_debounce_ctl.de),
    .d      (hw2reg.key_com1_debounce_ctl.d ),

    // to internal hardware
    .qe     (reg2hw.key_com1_debounce_ctl.qe),
    .q      (reg2hw.key_com1_debounce_ctl.q ),

    // to register interface (read)
    .qs     (key_com1_debounce_ctl_qs)
  );


  // R[key_com2_debounce_ctl]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'ha04)
  ) u_key_com2_debounce_ctl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_com2_debounce_ctl_we),
    .wd     (key_com2_debounce_ctl_wd),

    // from internal hardware
    .de     (hw2reg.key_com2_debounce_ctl.de),
    .d      (hw2reg.key_com2_debounce_ctl.d ),

    // to internal hardware
    .qe     (reg2hw.key_com2_debounce_ctl.qe),
    .q      (reg2hw.key_com2_debounce_ctl.q ),

    // to register interface (read)
    .qs     (key_com2_debounce_ctl_qs)
  );


  // R[key_com3_debounce_ctl]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'ha04)
  ) u_key_com3_debounce_ctl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_com3_debounce_ctl_we),
    .wd     (key_com3_debounce_ctl_wd),

    // from internal hardware
    .de     (hw2reg.key_com3_debounce_ctl.de),
    .d      (hw2reg.key_com3_debounce_ctl.d ),

    // to internal hardware
    .qe     (reg2hw.key_com3_debounce_ctl.qe),
    .q      (reg2hw.key_com3_debounce_ctl.q ),

    // to register interface (read)
    .qs     (key_com3_debounce_ctl_qs)
  );


  // R[key_invert_ctl]: V(False)

  //   F[key0_in]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_key_invert_ctl_key0_in (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_invert_ctl_key0_in_we),
    .wd     (key_invert_ctl_key0_in_wd),

    // from internal hardware
    .de     (hw2reg.key_invert_ctl.key0_in.de),
    .d      (hw2reg.key_invert_ctl.key0_in.d ),

    // to internal hardware
    .qe     (reg2hw.key_invert_ctl.key0_in.qe),
    .q      (reg2hw.key_invert_ctl.key0_in.q ),

    // to register interface (read)
    .qs     (key_invert_ctl_key0_in_qs)
  );


  //   F[key0_out]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_key_invert_ctl_key0_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_invert_ctl_key0_out_we),
    .wd     (key_invert_ctl_key0_out_wd),

    // from internal hardware
    .de     (hw2reg.key_invert_ctl.key0_out.de),
    .d      (hw2reg.key_invert_ctl.key0_out.d ),

    // to internal hardware
    .qe     (reg2hw.key_invert_ctl.key0_out.qe),
    .q      (reg2hw.key_invert_ctl.key0_out.q ),

    // to register interface (read)
    .qs     (key_invert_ctl_key0_out_qs)
  );


  //   F[key1_in]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_key_invert_ctl_key1_in (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_invert_ctl_key1_in_we),
    .wd     (key_invert_ctl_key1_in_wd),

    // from internal hardware
    .de     (hw2reg.key_invert_ctl.key1_in.de),
    .d      (hw2reg.key_invert_ctl.key1_in.d ),

    // to internal hardware
    .qe     (reg2hw.key_invert_ctl.key1_in.qe),
    .q      (reg2hw.key_invert_ctl.key1_in.q ),

    // to register interface (read)
    .qs     (key_invert_ctl_key1_in_qs)
  );


  //   F[key1_out]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_key_invert_ctl_key1_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_invert_ctl_key1_out_we),
    .wd     (key_invert_ctl_key1_out_wd),

    // from internal hardware
    .de     (hw2reg.key_invert_ctl.key1_out.de),
    .d      (hw2reg.key_invert_ctl.key1_out.d ),

    // to internal hardware
    .qe     (reg2hw.key_invert_ctl.key1_out.qe),
    .q      (reg2hw.key_invert_ctl.key1_out.q ),

    // to register interface (read)
    .qs     (key_invert_ctl_key1_out_qs)
  );


  //   F[key2_in]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_key_invert_ctl_key2_in (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_invert_ctl_key2_in_we),
    .wd     (key_invert_ctl_key2_in_wd),

    // from internal hardware
    .de     (hw2reg.key_invert_ctl.key2_in.de),
    .d      (hw2reg.key_invert_ctl.key2_in.d ),

    // to internal hardware
    .qe     (reg2hw.key_invert_ctl.key2_in.qe),
    .q      (reg2hw.key_invert_ctl.key2_in.q ),

    // to register interface (read)
    .qs     (key_invert_ctl_key2_in_qs)
  );


  //   F[key2_out]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_key_invert_ctl_key2_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_invert_ctl_key2_out_we),
    .wd     (key_invert_ctl_key2_out_wd),

    // from internal hardware
    .de     (hw2reg.key_invert_ctl.key2_out.de),
    .d      (hw2reg.key_invert_ctl.key2_out.d ),

    // to internal hardware
    .qe     (reg2hw.key_invert_ctl.key2_out.qe),
    .q      (reg2hw.key_invert_ctl.key2_out.q ),

    // to register interface (read)
    .qs     (key_invert_ctl_key2_out_qs)
  );


  //   F[pwrb_in]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_key_invert_ctl_pwrb_in (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_invert_ctl_pwrb_in_we),
    .wd     (key_invert_ctl_pwrb_in_wd),

    // from internal hardware
    .de     (hw2reg.key_invert_ctl.pwrb_in.de),
    .d      (hw2reg.key_invert_ctl.pwrb_in.d ),

    // to internal hardware
    .qe     (reg2hw.key_invert_ctl.pwrb_in.qe),
    .q      (reg2hw.key_invert_ctl.pwrb_in.q ),

    // to register interface (read)
    .qs     (key_invert_ctl_pwrb_in_qs)
  );


  //   F[pwrb_out]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_key_invert_ctl_pwrb_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_invert_ctl_pwrb_out_we),
    .wd     (key_invert_ctl_pwrb_out_wd),

    // from internal hardware
    .de     (hw2reg.key_invert_ctl.pwrb_out.de),
    .d      (hw2reg.key_invert_ctl.pwrb_out.d ),

    // to internal hardware
    .qe     (reg2hw.key_invert_ctl.pwrb_out.qe),
    .q      (reg2hw.key_invert_ctl.pwrb_out.q ),

    // to register interface (read)
    .qs     (key_invert_ctl_pwrb_out_qs)
  );


  // R[pin_out_ctl]: V(False)

  //   F[bat_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_ctl_bat_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_ctl_bat_en_we),
    .wd     (pin_out_ctl_bat_en_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_ctl.bat_en.de),
    .d      (hw2reg.pin_out_ctl.bat_en.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_ctl.bat_en.qe),
    .q      (reg2hw.pin_out_ctl.bat_en.q ),

    // to register interface (read)
    .qs     (pin_out_ctl_bat_en_qs)
  );


  //   F[ec_in_rw]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_ctl_ec_in_rw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_ctl_ec_in_rw_we),
    .wd     (pin_out_ctl_ec_in_rw_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_ctl.ec_in_rw.de),
    .d      (hw2reg.pin_out_ctl.ec_in_rw.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_ctl.ec_in_rw.qe),
    .q      (reg2hw.pin_out_ctl.ec_in_rw.q ),

    // to register interface (read)
    .qs     (pin_out_ctl_ec_in_rw_qs)
  );


  //   F[flash_wp_l]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_ctl_flash_wp_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_ctl_flash_wp_l_we),
    .wd     (pin_out_ctl_flash_wp_l_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_ctl.flash_wp_l.de),
    .d      (hw2reg.pin_out_ctl.flash_wp_l.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_ctl.flash_wp_l.qe),
    .q      (reg2hw.pin_out_ctl.flash_wp_l.q ),

    // to register interface (read)
    .qs     (pin_out_ctl_flash_wp_l_qs)
  );


  //   F[ec_rst_l]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_ctl_ec_rst_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_ctl_ec_rst_l_we),
    .wd     (pin_out_ctl_ec_rst_l_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_ctl.ec_rst_l.de),
    .d      (hw2reg.pin_out_ctl.ec_rst_l.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_ctl.ec_rst_l.qe),
    .q      (reg2hw.pin_out_ctl.ec_rst_l.q ),

    // to register interface (read)
    .qs     (pin_out_ctl_ec_rst_l_qs)
  );


  //   F[pwrb_out]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_ctl_pwrb_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_ctl_pwrb_out_we),
    .wd     (pin_out_ctl_pwrb_out_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_ctl.pwrb_out.de),
    .d      (hw2reg.pin_out_ctl.pwrb_out.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_ctl.pwrb_out.qe),
    .q      (reg2hw.pin_out_ctl.pwrb_out.q ),

    // to register interface (read)
    .qs     (pin_out_ctl_pwrb_out_qs)
  );


  //   F[key0_out]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_ctl_key0_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_ctl_key0_out_we),
    .wd     (pin_out_ctl_key0_out_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_ctl.key0_out.de),
    .d      (hw2reg.pin_out_ctl.key0_out.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_ctl.key0_out.qe),
    .q      (reg2hw.pin_out_ctl.key0_out.q ),

    // to register interface (read)
    .qs     (pin_out_ctl_key0_out_qs)
  );


  //   F[key1_out]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_ctl_key1_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_ctl_key1_out_we),
    .wd     (pin_out_ctl_key1_out_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_ctl.key1_out.de),
    .d      (hw2reg.pin_out_ctl.key1_out.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_ctl.key1_out.qe),
    .q      (reg2hw.pin_out_ctl.key1_out.q ),

    // to register interface (read)
    .qs     (pin_out_ctl_key1_out_qs)
  );


  //   F[key2_out]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_ctl_key2_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_ctl_key2_out_we),
    .wd     (pin_out_ctl_key2_out_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_ctl.key2_out.de),
    .d      (hw2reg.pin_out_ctl.key2_out.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_ctl.key2_out.qe),
    .q      (reg2hw.pin_out_ctl.key2_out.q ),

    // to register interface (read)
    .qs     (pin_out_ctl_key2_out_qs)
  );


  // R[pin_out_value]: V(False)

  //   F[bat_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_value_bat_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_value_bat_en_we),
    .wd     (pin_out_value_bat_en_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_value.bat_en.de),
    .d      (hw2reg.pin_out_value.bat_en.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_value.bat_en.qe),
    .q      (reg2hw.pin_out_value.bat_en.q ),

    // to register interface (read)
    .qs     (pin_out_value_bat_en_qs)
  );


  //   F[ec_in_rw]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_value_ec_in_rw (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_value_ec_in_rw_we),
    .wd     (pin_out_value_ec_in_rw_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_value.ec_in_rw.de),
    .d      (hw2reg.pin_out_value.ec_in_rw.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_value.ec_in_rw.qe),
    .q      (reg2hw.pin_out_value.ec_in_rw.q ),

    // to register interface (read)
    .qs     (pin_out_value_ec_in_rw_qs)
  );


  //   F[flash_wp_l]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_value_flash_wp_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_value_flash_wp_l_we),
    .wd     (pin_out_value_flash_wp_l_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_value.flash_wp_l.de),
    .d      (hw2reg.pin_out_value.flash_wp_l.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_value.flash_wp_l.qe),
    .q      (reg2hw.pin_out_value.flash_wp_l.q ),

    // to register interface (read)
    .qs     (pin_out_value_flash_wp_l_qs)
  );


  //   F[ec_rst_l]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_value_ec_rst_l (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_value_ec_rst_l_we),
    .wd     (pin_out_value_ec_rst_l_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_value.ec_rst_l.de),
    .d      (hw2reg.pin_out_value.ec_rst_l.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_value.ec_rst_l.qe),
    .q      (reg2hw.pin_out_value.ec_rst_l.q ),

    // to register interface (read)
    .qs     (pin_out_value_ec_rst_l_qs)
  );


  //   F[pwrb_out]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_value_pwrb_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_value_pwrb_out_we),
    .wd     (pin_out_value_pwrb_out_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_value.pwrb_out.de),
    .d      (hw2reg.pin_out_value.pwrb_out.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_value.pwrb_out.qe),
    .q      (reg2hw.pin_out_value.pwrb_out.q ),

    // to register interface (read)
    .qs     (pin_out_value_pwrb_out_qs)
  );


  //   F[key0_out]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_value_key0_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_value_key0_out_we),
    .wd     (pin_out_value_key0_out_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_value.key0_out.de),
    .d      (hw2reg.pin_out_value.key0_out.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_value.key0_out.qe),
    .q      (reg2hw.pin_out_value.key0_out.q ),

    // to register interface (read)
    .qs     (pin_out_value_key0_out_qs)
  );


  //   F[key1_out]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_value_key1_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_value_key1_out_we),
    .wd     (pin_out_value_key1_out_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_value.key1_out.de),
    .d      (hw2reg.pin_out_value.key1_out.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_value.key1_out.qe),
    .q      (reg2hw.pin_out_value.key1_out.q ),

    // to register interface (read)
    .qs     (pin_out_value_key1_out_qs)
  );


  //   F[key2_out]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pin_out_value_key2_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pin_out_value_key2_out_we),
    .wd     (pin_out_value_key2_out_wd),

    // from internal hardware
    .de     (hw2reg.pin_out_value.key2_out.de),
    .d      (hw2reg.pin_out_value.key2_out.d ),

    // to internal hardware
    .qe     (reg2hw.pin_out_value.key2_out.qe),
    .q      (reg2hw.pin_out_value.key2_out.q ),

    // to register interface (read)
    .qs     (pin_out_value_key2_out_qs)
  );




  logic [9:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == RBOX_CFG_LOCK_CTL_OFFSET);
    addr_hit[1] = (reg_addr == RBOX_EC_RST_CTL_OFFSET);
    addr_hit[2] = (reg_addr == RBOX_FLASH_WP_CTL_OFFSET);
    addr_hit[3] = (reg_addr == RBOX_KEY_COM0_DEBOUNCE_CTL_OFFSET);
    addr_hit[4] = (reg_addr == RBOX_KEY_COM1_DEBOUNCE_CTL_OFFSET);
    addr_hit[5] = (reg_addr == RBOX_KEY_COM2_DEBOUNCE_CTL_OFFSET);
    addr_hit[6] = (reg_addr == RBOX_KEY_COM3_DEBOUNCE_CTL_OFFSET);
    addr_hit[7] = (reg_addr == RBOX_KEY_INVERT_CTL_OFFSET);
    addr_hit[8] = (reg_addr == RBOX_PIN_OUT_CTL_OFFSET);
    addr_hit[9] = (reg_addr == RBOX_PIN_OUT_VALUE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (RBOX_PERMIT[0] != (RBOX_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (RBOX_PERMIT[1] != (RBOX_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[2] && reg_we && (RBOX_PERMIT[2] != (RBOX_PERMIT[2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[3] && reg_we && (RBOX_PERMIT[3] != (RBOX_PERMIT[3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[4] && reg_we && (RBOX_PERMIT[4] != (RBOX_PERMIT[4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[5] && reg_we && (RBOX_PERMIT[5] != (RBOX_PERMIT[5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[6] && reg_we && (RBOX_PERMIT[6] != (RBOX_PERMIT[6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[7] && reg_we && (RBOX_PERMIT[7] != (RBOX_PERMIT[7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[8] && reg_we && (RBOX_PERMIT[8] != (RBOX_PERMIT[8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[9] && reg_we && (RBOX_PERMIT[9] != (RBOX_PERMIT[9] & reg_be))) wr_err = 1'b1 ;
  end

  assign cfg_lock_ctl_we = addr_hit[0] & reg_we & ~wr_err;
  assign cfg_lock_ctl_wd = reg_wdata[0];

  assign ec_rst_ctl_we = addr_hit[1] & reg_we & ~wr_err;
  assign ec_rst_ctl_wd = reg_wdata[31:0];

  assign flash_wp_ctl_we = addr_hit[2] & reg_we & ~wr_err;
  assign flash_wp_ctl_wd = reg_wdata[0];

  assign key_com0_debounce_ctl_we = addr_hit[3] & reg_we & ~wr_err;
  assign key_com0_debounce_ctl_wd = reg_wdata[31:0];

  assign key_com1_debounce_ctl_we = addr_hit[4] & reg_we & ~wr_err;
  assign key_com1_debounce_ctl_wd = reg_wdata[31:0];

  assign key_com2_debounce_ctl_we = addr_hit[5] & reg_we & ~wr_err;
  assign key_com2_debounce_ctl_wd = reg_wdata[31:0];

  assign key_com3_debounce_ctl_we = addr_hit[6] & reg_we & ~wr_err;
  assign key_com3_debounce_ctl_wd = reg_wdata[31:0];

  assign key_invert_ctl_key0_in_we = addr_hit[7] & reg_we & ~wr_err;
  assign key_invert_ctl_key0_in_wd = reg_wdata[0];

  assign key_invert_ctl_key0_out_we = addr_hit[7] & reg_we & ~wr_err;
  assign key_invert_ctl_key0_out_wd = reg_wdata[1];

  assign key_invert_ctl_key1_in_we = addr_hit[7] & reg_we & ~wr_err;
  assign key_invert_ctl_key1_in_wd = reg_wdata[2];

  assign key_invert_ctl_key1_out_we = addr_hit[7] & reg_we & ~wr_err;
  assign key_invert_ctl_key1_out_wd = reg_wdata[3];

  assign key_invert_ctl_key2_in_we = addr_hit[7] & reg_we & ~wr_err;
  assign key_invert_ctl_key2_in_wd = reg_wdata[4];

  assign key_invert_ctl_key2_out_we = addr_hit[7] & reg_we & ~wr_err;
  assign key_invert_ctl_key2_out_wd = reg_wdata[5];

  assign key_invert_ctl_pwrb_in_we = addr_hit[7] & reg_we & ~wr_err;
  assign key_invert_ctl_pwrb_in_wd = reg_wdata[6];

  assign key_invert_ctl_pwrb_out_we = addr_hit[7] & reg_we & ~wr_err;
  assign key_invert_ctl_pwrb_out_wd = reg_wdata[7];

  assign pin_out_ctl_bat_en_we = addr_hit[8] & reg_we & ~wr_err;
  assign pin_out_ctl_bat_en_wd = reg_wdata[0];

  assign pin_out_ctl_ec_in_rw_we = addr_hit[8] & reg_we & ~wr_err;
  assign pin_out_ctl_ec_in_rw_wd = reg_wdata[1];

  assign pin_out_ctl_flash_wp_l_we = addr_hit[8] & reg_we & ~wr_err;
  assign pin_out_ctl_flash_wp_l_wd = reg_wdata[2];

  assign pin_out_ctl_ec_rst_l_we = addr_hit[8] & reg_we & ~wr_err;
  assign pin_out_ctl_ec_rst_l_wd = reg_wdata[3];

  assign pin_out_ctl_pwrb_out_we = addr_hit[8] & reg_we & ~wr_err;
  assign pin_out_ctl_pwrb_out_wd = reg_wdata[4];

  assign pin_out_ctl_key0_out_we = addr_hit[8] & reg_we & ~wr_err;
  assign pin_out_ctl_key0_out_wd = reg_wdata[5];

  assign pin_out_ctl_key1_out_we = addr_hit[8] & reg_we & ~wr_err;
  assign pin_out_ctl_key1_out_wd = reg_wdata[6];

  assign pin_out_ctl_key2_out_we = addr_hit[8] & reg_we & ~wr_err;
  assign pin_out_ctl_key2_out_wd = reg_wdata[7];

  assign pin_out_value_bat_en_we = addr_hit[9] & reg_we & ~wr_err;
  assign pin_out_value_bat_en_wd = reg_wdata[0];

  assign pin_out_value_ec_in_rw_we = addr_hit[9] & reg_we & ~wr_err;
  assign pin_out_value_ec_in_rw_wd = reg_wdata[1];

  assign pin_out_value_flash_wp_l_we = addr_hit[9] & reg_we & ~wr_err;
  assign pin_out_value_flash_wp_l_wd = reg_wdata[2];

  assign pin_out_value_ec_rst_l_we = addr_hit[9] & reg_we & ~wr_err;
  assign pin_out_value_ec_rst_l_wd = reg_wdata[3];

  assign pin_out_value_pwrb_out_we = addr_hit[9] & reg_we & ~wr_err;
  assign pin_out_value_pwrb_out_wd = reg_wdata[4];

  assign pin_out_value_key0_out_we = addr_hit[9] & reg_we & ~wr_err;
  assign pin_out_value_key0_out_wd = reg_wdata[5];

  assign pin_out_value_key1_out_we = addr_hit[9] & reg_we & ~wr_err;
  assign pin_out_value_key1_out_wd = reg_wdata[6];

  assign pin_out_value_key2_out_we = addr_hit[9] & reg_we & ~wr_err;
  assign pin_out_value_key2_out_wd = reg_wdata[7];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = cfg_lock_ctl_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = ec_rst_ctl_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = flash_wp_ctl_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = key_com0_debounce_ctl_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = key_com1_debounce_ctl_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = key_com2_debounce_ctl_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = key_com3_debounce_ctl_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = key_invert_ctl_key0_in_qs;
        reg_rdata_next[1] = key_invert_ctl_key0_out_qs;
        reg_rdata_next[2] = key_invert_ctl_key1_in_qs;
        reg_rdata_next[3] = key_invert_ctl_key1_out_qs;
        reg_rdata_next[4] = key_invert_ctl_key2_in_qs;
        reg_rdata_next[5] = key_invert_ctl_key2_out_qs;
        reg_rdata_next[6] = key_invert_ctl_pwrb_in_qs;
        reg_rdata_next[7] = key_invert_ctl_pwrb_out_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = pin_out_ctl_bat_en_qs;
        reg_rdata_next[1] = pin_out_ctl_ec_in_rw_qs;
        reg_rdata_next[2] = pin_out_ctl_flash_wp_l_qs;
        reg_rdata_next[3] = pin_out_ctl_ec_rst_l_qs;
        reg_rdata_next[4] = pin_out_ctl_pwrb_out_qs;
        reg_rdata_next[5] = pin_out_ctl_key0_out_qs;
        reg_rdata_next[6] = pin_out_ctl_key1_out_qs;
        reg_rdata_next[7] = pin_out_ctl_key2_out_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = pin_out_value_bat_en_qs;
        reg_rdata_next[1] = pin_out_value_ec_in_rw_qs;
        reg_rdata_next[2] = pin_out_value_flash_wp_l_qs;
        reg_rdata_next[3] = pin_out_value_ec_rst_l_qs;
        reg_rdata_next[4] = pin_out_value_pwrb_out_qs;
        reg_rdata_next[5] = pin_out_value_key0_out_qs;
        reg_rdata_next[6] = pin_out_value_key1_out_qs;
        reg_rdata_next[7] = pin_out_value_key2_out_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)

endmodule
