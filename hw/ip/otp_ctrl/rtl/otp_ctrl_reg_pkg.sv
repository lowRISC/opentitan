// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package otp_ctrl_reg_pkg;

  // Param list
  parameter int OtpByteAddressWidth = 11;
  parameter int NumCreatorSwCfgPartitionWords = 192;
  parameter int NumOwnerSwCfgPartitionWords = 192;
  parameter int NumHwCfgWords = 16;
  parameter int NumLcPartitionWords = 56;
  parameter int NumSecretPartitionWords = 56;
  parameter int NumDebugWindowWords = 500;
  parameter int NumAlerts = 2;
  parameter int DIRECT_ACCESS_WDATA = 2;
  parameter int DIRECT_ACCESS_RDATA = 2;
  parameter int LC_STATE = 9;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    struct packed {
      logic        q;
    } otp_operation_done;
    struct packed {
      logic        q;
    } otp_error;
  } otp_ctrl_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } otp_operation_done;
    struct packed {
      logic        q;
    } otp_error;
  } otp_ctrl_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } otp_operation_done;
    struct packed {
      logic        q;
      logic        qe;
    } otp_error;
  } otp_ctrl_reg2hw_intr_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } read;
    struct packed {
      logic        q;
      logic        qe;
    } write;
  } otp_ctrl_reg2hw_direct_access_cmd_reg_t;

  typedef struct packed {
    logic [10:0] q;
  } otp_ctrl_reg2hw_direct_access_address_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } otp_ctrl_reg2hw_direct_access_wdata_mreg_t;

  typedef struct packed {
    logic        q;
  } otp_ctrl_reg2hw_check_period_regen_reg_t;

  typedef struct packed {
    logic [5:0]  q;
  } otp_ctrl_reg2hw_integrity_check_period_msb_reg_t;

  typedef struct packed {
    logic [5:0]  q;
  } otp_ctrl_reg2hw_consistency_check_period_msb_reg_t;

  typedef struct packed {
    logic        q;
  } otp_ctrl_reg2hw_creator_sw_cfg_read_lock_reg_t;

  typedef struct packed {
    logic        q;
  } otp_ctrl_reg2hw_owner_sw_cfg_read_lock_reg_t;

  typedef struct packed {
    logic        q;
  } otp_ctrl_reg2hw_hw_cfg_digest_calc_reg_t;

  typedef struct packed {
    logic        q;
  } otp_ctrl_reg2hw_secret_digest_calc_reg_t;


  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } otp_operation_done;
    struct packed {
      logic        d;
      logic        de;
    } otp_error;
  } otp_ctrl_hw2reg_intr_state_reg_t;

  typedef struct packed {
    logic [2:0]  d;
    logic        de;
  } otp_ctrl_hw2reg_status_reg_t;

  typedef struct packed {
    logic [2:0]  d;
    logic        de;
  } otp_ctrl_hw2reg_err_code_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } otp_ctrl_hw2reg_direct_access_rdata_mreg_t;

  typedef struct packed {
    logic [31:0] d;
  } otp_ctrl_hw2reg_creator_sw_cfg_digest_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } otp_ctrl_hw2reg_owner_sw_cfg_digest_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } otp_ctrl_hw2reg_hw_cfg_digest_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } otp_ctrl_hw2reg_secret_digest_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } otp_ctrl_hw2reg_test_tokens_lock_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } otp_ctrl_hw2reg_rma_token_lock_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } otp_ctrl_hw2reg_flash_keys_lock_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } otp_ctrl_hw2reg_sram_key_lock_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } otp_ctrl_hw2reg_creator_key_lock_reg_t;

  typedef struct packed {
    logic [7:0]  d;
    logic        de;
  } otp_ctrl_hw2reg_lc_state_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } otp_ctrl_hw2reg_transition_cnt_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    otp_ctrl_reg2hw_intr_state_reg_t intr_state; // [105:104]
    otp_ctrl_reg2hw_intr_enable_reg_t intr_enable; // [103:102]
    otp_ctrl_reg2hw_intr_test_reg_t intr_test; // [101:98]
    otp_ctrl_reg2hw_direct_access_cmd_reg_t direct_access_cmd; // [97:94]
    otp_ctrl_reg2hw_direct_access_address_reg_t direct_access_address; // [93:83]
    otp_ctrl_reg2hw_direct_access_wdata_mreg_t [1:0] direct_access_wdata; // [82:17]
    otp_ctrl_reg2hw_check_period_regen_reg_t check_period_regen; // [16:16]
    otp_ctrl_reg2hw_integrity_check_period_msb_reg_t integrity_check_period_msb; // [15:10]
    otp_ctrl_reg2hw_consistency_check_period_msb_reg_t consistency_check_period_msb; // [9:4]
    otp_ctrl_reg2hw_creator_sw_cfg_read_lock_reg_t creator_sw_cfg_read_lock; // [3:3]
    otp_ctrl_reg2hw_owner_sw_cfg_read_lock_reg_t owner_sw_cfg_read_lock; // [2:2]
    otp_ctrl_reg2hw_hw_cfg_digest_calc_reg_t hw_cfg_digest_calc; // [1:1]
    otp_ctrl_reg2hw_secret_digest_calc_reg_t secret_digest_calc; // [0:0]
  } otp_ctrl_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    otp_ctrl_hw2reg_intr_state_reg_t intr_state; // [479:478]
    otp_ctrl_hw2reg_status_reg_t status; // [477:478]
    otp_ctrl_hw2reg_err_code_reg_t err_code; // [477:478]
    otp_ctrl_hw2reg_direct_access_rdata_mreg_t [1:0] direct_access_rdata; // [477:412]
    otp_ctrl_hw2reg_creator_sw_cfg_digest_reg_t creator_sw_cfg_digest; // [411:412]
    otp_ctrl_hw2reg_owner_sw_cfg_digest_reg_t owner_sw_cfg_digest; // [411:412]
    otp_ctrl_hw2reg_hw_cfg_digest_reg_t hw_cfg_digest; // [411:412]
    otp_ctrl_hw2reg_secret_digest_reg_t secret_digest; // [411:412]
    otp_ctrl_hw2reg_test_tokens_lock_reg_t test_tokens_lock; // [411:412]
    otp_ctrl_hw2reg_rma_token_lock_reg_t rma_token_lock; // [411:412]
    otp_ctrl_hw2reg_flash_keys_lock_reg_t flash_keys_lock; // [411:412]
    otp_ctrl_hw2reg_sram_key_lock_reg_t sram_key_lock; // [411:412]
    otp_ctrl_hw2reg_creator_key_lock_reg_t creator_key_lock; // [411:412]
    otp_ctrl_hw2reg_lc_state_mreg_t [8:0] lc_state; // [411:331]
    otp_ctrl_hw2reg_transition_cnt_reg_t transition_cnt; // [330:331]
  } otp_ctrl_hw2reg_t;

  // Register Address
  parameter logic [12:0] OTP_CTRL_INTR_STATE_OFFSET = 13'h 0;
  parameter logic [12:0] OTP_CTRL_INTR_ENABLE_OFFSET = 13'h 4;
  parameter logic [12:0] OTP_CTRL_INTR_TEST_OFFSET = 13'h 8;
  parameter logic [12:0] OTP_CTRL_STATUS_OFFSET = 13'h c;
  parameter logic [12:0] OTP_CTRL_ERR_CODE_OFFSET = 13'h 10;
  parameter logic [12:0] OTP_CTRL_DIRECT_ACCESS_CMD_OFFSET = 13'h 14;
  parameter logic [12:0] OTP_CTRL_DIRECT_ACCESS_ADDRESS_OFFSET = 13'h 18;
  parameter logic [12:0] OTP_CTRL_DIRECT_ACCESS_WDATA_0_OFFSET = 13'h 1c;
  parameter logic [12:0] OTP_CTRL_DIRECT_ACCESS_WDATA_1_OFFSET = 13'h 20;
  parameter logic [12:0] OTP_CTRL_DIRECT_ACCESS_RDATA_0_OFFSET = 13'h 24;
  parameter logic [12:0] OTP_CTRL_DIRECT_ACCESS_RDATA_1_OFFSET = 13'h 28;
  parameter logic [12:0] OTP_CTRL_CHECK_PERIOD_REGEN_OFFSET = 13'h 2c;
  parameter logic [12:0] OTP_CTRL_INTEGRITY_CHECK_PERIOD_MSB_OFFSET = 13'h 30;
  parameter logic [12:0] OTP_CTRL_CONSISTENCY_CHECK_PERIOD_MSB_OFFSET = 13'h 34;
  parameter logic [12:0] OTP_CTRL_CREATOR_SW_CFG_READ_LOCK_OFFSET = 13'h 38;
  parameter logic [12:0] OTP_CTRL_OWNER_SW_CFG_READ_LOCK_OFFSET = 13'h 3c;
  parameter logic [12:0] OTP_CTRL_HW_CFG_DIGEST_CALC_OFFSET = 13'h 40;
  parameter logic [12:0] OTP_CTRL_SECRET_DIGEST_CALC_OFFSET = 13'h 44;
  parameter logic [12:0] OTP_CTRL_CREATOR_SW_CFG_DIGEST_OFFSET = 13'h 48;
  parameter logic [12:0] OTP_CTRL_OWNER_SW_CFG_DIGEST_OFFSET = 13'h 4c;
  parameter logic [12:0] OTP_CTRL_HW_CFG_DIGEST_OFFSET = 13'h 50;
  parameter logic [12:0] OTP_CTRL_SECRET_DIGEST_OFFSET = 13'h 54;
  parameter logic [12:0] OTP_CTRL_TEST_TOKENS_LOCK_OFFSET = 13'h 100;
  parameter logic [12:0] OTP_CTRL_RMA_TOKEN_LOCK_OFFSET = 13'h 104;
  parameter logic [12:0] OTP_CTRL_FLASH_KEYS_LOCK_OFFSET = 13'h 108;
  parameter logic [12:0] OTP_CTRL_SRAM_KEY_LOCK_OFFSET = 13'h 10c;
  parameter logic [12:0] OTP_CTRL_CREATOR_KEY_LOCK_OFFSET = 13'h 110;
  parameter logic [12:0] OTP_CTRL_LC_STATE_0_OFFSET = 13'h 200;
  parameter logic [12:0] OTP_CTRL_LC_STATE_1_OFFSET = 13'h 204;
  parameter logic [12:0] OTP_CTRL_LC_STATE_2_OFFSET = 13'h 208;
  parameter logic [12:0] OTP_CTRL_TRANSITION_CNT_OFFSET = 13'h 20c;

  // Window parameter
  parameter logic [12:0] OTP_CTRL_CREATOR_SW_CFG_OFFSET = 13'h 400;
  parameter logic [12:0] OTP_CTRL_CREATOR_SW_CFG_SIZE   = 13'h 300;
  parameter logic [12:0] OTP_CTRL_OWNER_SW_CFG_OFFSET = 13'h 800;
  parameter logic [12:0] OTP_CTRL_OWNER_SW_CFG_SIZE   = 13'h 300;
  parameter logic [12:0] OTP_CTRL_TEST_ACCESS_OFFSET = 13'h 1000;
  parameter logic [12:0] OTP_CTRL_TEST_ACCESS_SIZE   = 13'h 7d0;

  // Register Index
  typedef enum int {
    OTP_CTRL_INTR_STATE,
    OTP_CTRL_INTR_ENABLE,
    OTP_CTRL_INTR_TEST,
    OTP_CTRL_STATUS,
    OTP_CTRL_ERR_CODE,
    OTP_CTRL_DIRECT_ACCESS_CMD,
    OTP_CTRL_DIRECT_ACCESS_ADDRESS,
    OTP_CTRL_DIRECT_ACCESS_WDATA_0,
    OTP_CTRL_DIRECT_ACCESS_WDATA_1,
    OTP_CTRL_DIRECT_ACCESS_RDATA_0,
    OTP_CTRL_DIRECT_ACCESS_RDATA_1,
    OTP_CTRL_CHECK_PERIOD_REGEN,
    OTP_CTRL_INTEGRITY_CHECK_PERIOD_MSB,
    OTP_CTRL_CONSISTENCY_CHECK_PERIOD_MSB,
    OTP_CTRL_CREATOR_SW_CFG_READ_LOCK,
    OTP_CTRL_OWNER_SW_CFG_READ_LOCK,
    OTP_CTRL_HW_CFG_DIGEST_CALC,
    OTP_CTRL_SECRET_DIGEST_CALC,
    OTP_CTRL_CREATOR_SW_CFG_DIGEST,
    OTP_CTRL_OWNER_SW_CFG_DIGEST,
    OTP_CTRL_HW_CFG_DIGEST,
    OTP_CTRL_SECRET_DIGEST,
    OTP_CTRL_TEST_TOKENS_LOCK,
    OTP_CTRL_RMA_TOKEN_LOCK,
    OTP_CTRL_FLASH_KEYS_LOCK,
    OTP_CTRL_SRAM_KEY_LOCK,
    OTP_CTRL_CREATOR_KEY_LOCK,
    OTP_CTRL_LC_STATE_0,
    OTP_CTRL_LC_STATE_1,
    OTP_CTRL_LC_STATE_2,
    OTP_CTRL_TRANSITION_CNT
  } otp_ctrl_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] OTP_CTRL_PERMIT [31] = '{
    4'b 0001, // index[ 0] OTP_CTRL_INTR_STATE
    4'b 0001, // index[ 1] OTP_CTRL_INTR_ENABLE
    4'b 0001, // index[ 2] OTP_CTRL_INTR_TEST
    4'b 0001, // index[ 3] OTP_CTRL_STATUS
    4'b 0001, // index[ 4] OTP_CTRL_ERR_CODE
    4'b 0001, // index[ 5] OTP_CTRL_DIRECT_ACCESS_CMD
    4'b 0011, // index[ 6] OTP_CTRL_DIRECT_ACCESS_ADDRESS
    4'b 1111, // index[ 7] OTP_CTRL_DIRECT_ACCESS_WDATA_0
    4'b 1111, // index[ 8] OTP_CTRL_DIRECT_ACCESS_WDATA_1
    4'b 1111, // index[ 9] OTP_CTRL_DIRECT_ACCESS_RDATA_0
    4'b 1111, // index[10] OTP_CTRL_DIRECT_ACCESS_RDATA_1
    4'b 0001, // index[11] OTP_CTRL_CHECK_PERIOD_REGEN
    4'b 0001, // index[12] OTP_CTRL_INTEGRITY_CHECK_PERIOD_MSB
    4'b 0001, // index[13] OTP_CTRL_CONSISTENCY_CHECK_PERIOD_MSB
    4'b 0001, // index[14] OTP_CTRL_CREATOR_SW_CFG_READ_LOCK
    4'b 0001, // index[15] OTP_CTRL_OWNER_SW_CFG_READ_LOCK
    4'b 0001, // index[16] OTP_CTRL_HW_CFG_DIGEST_CALC
    4'b 0001, // index[17] OTP_CTRL_SECRET_DIGEST_CALC
    4'b 1111, // index[18] OTP_CTRL_CREATOR_SW_CFG_DIGEST
    4'b 1111, // index[19] OTP_CTRL_OWNER_SW_CFG_DIGEST
    4'b 1111, // index[20] OTP_CTRL_HW_CFG_DIGEST
    4'b 1111, // index[21] OTP_CTRL_SECRET_DIGEST
    4'b 1111, // index[22] OTP_CTRL_TEST_TOKENS_LOCK
    4'b 1111, // index[23] OTP_CTRL_RMA_TOKEN_LOCK
    4'b 1111, // index[24] OTP_CTRL_FLASH_KEYS_LOCK
    4'b 1111, // index[25] OTP_CTRL_SRAM_KEY_LOCK
    4'b 1111, // index[26] OTP_CTRL_CREATOR_KEY_LOCK
    4'b 1111, // index[27] OTP_CTRL_LC_STATE_0
    4'b 1111, // index[28] OTP_CTRL_LC_STATE_1
    4'b 0001, // index[29] OTP_CTRL_LC_STATE_2
    4'b 1111  // index[30] OTP_CTRL_TRANSITION_CNT
  };
endpackage

