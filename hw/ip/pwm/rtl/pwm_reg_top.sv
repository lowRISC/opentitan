// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module pwm_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output pwm_reg_pkg::pwm_reg2hw_t reg2hw, // Write

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import pwm_reg_pkg::* ;

  localparam int AW = 7;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [8:0] cfg_pwm_en_qs;
  logic [8:0] cfg_pwm_en_wd;
  logic cfg_pwm_en_we;
  logic cfg_cntr_en_qs;
  logic cfg_cntr_en_wd;
  logic cfg_cntr_en_we;
  logic [31:0] period_qs;
  logic [31:0] period_wd;
  logic period_we;
  logic [31:0] posedge_val_0_qs;
  logic [31:0] posedge_val_0_wd;
  logic posedge_val_0_we;
  logic [31:0] negedge_val_0_qs;
  logic [31:0] negedge_val_0_wd;
  logic negedge_val_0_we;
  logic [31:0] posedge_val_1_qs;
  logic [31:0] posedge_val_1_wd;
  logic posedge_val_1_we;
  logic [31:0] negedge_val_1_qs;
  logic [31:0] negedge_val_1_wd;
  logic negedge_val_1_we;
  logic [31:0] posedge_val_2_qs;
  logic [31:0] posedge_val_2_wd;
  logic posedge_val_2_we;
  logic [31:0] negedge_val_2_qs;
  logic [31:0] negedge_val_2_wd;
  logic negedge_val_2_we;
  logic [31:0] posedge_val_3_qs;
  logic [31:0] posedge_val_3_wd;
  logic posedge_val_3_we;
  logic [31:0] negedge_val_3_qs;
  logic [31:0] negedge_val_3_wd;
  logic negedge_val_3_we;
  logic [31:0] posedge_val_4_qs;
  logic [31:0] posedge_val_4_wd;
  logic posedge_val_4_we;
  logic [31:0] negedge_val_4_qs;
  logic [31:0] negedge_val_4_wd;
  logic negedge_val_4_we;
  logic [31:0] posedge_val_5_qs;
  logic [31:0] posedge_val_5_wd;
  logic posedge_val_5_we;
  logic [31:0] negedge_val_5_qs;
  logic [31:0] negedge_val_5_wd;
  logic negedge_val_5_we;
  logic [31:0] posedge_val_6_qs;
  logic [31:0] posedge_val_6_wd;
  logic posedge_val_6_we;
  logic [31:0] negedge_val_6_qs;
  logic [31:0] negedge_val_6_wd;
  logic negedge_val_6_we;
  logic [31:0] posedge_val_7_qs;
  logic [31:0] posedge_val_7_wd;
  logic posedge_val_7_we;
  logic [31:0] negedge_val_7_qs;
  logic [31:0] negedge_val_7_wd;
  logic negedge_val_7_we;
  logic [31:0] posedge_val_8_qs;
  logic [31:0] posedge_val_8_wd;
  logic posedge_val_8_we;
  logic [31:0] negedge_val_8_qs;
  logic [31:0] negedge_val_8_wd;
  logic negedge_val_8_we;
  logic [31:0] incr_qs;
  logic [31:0] incr_wd;
  logic incr_we;

  // Register instances
  // R[cfg]: V(False)

  //   F[pwm_en]: 8:0
  prim_subreg #(
    .DW      (9),
    .SWACCESS("RW"),
    .RESVAL  (9'h0)
  ) u_cfg_pwm_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_pwm_en_we),
    .wd     (cfg_pwm_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg.pwm_en.q ),

    // to register interface (read)
    .qs     (cfg_pwm_en_qs)
  );


  //   F[cntr_en]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cfg_cntr_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cfg_cntr_en_we),
    .wd     (cfg_cntr_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg.cntr_en.q ),

    // to register interface (read)
    .qs     (cfg_cntr_en_qs)
  );


  // R[period]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h90)
  ) u_period (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (period_we),
    .wd     (period_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.period.q ),

    // to register interface (read)
    .qs     (period_qs)
  );


  // R[posedge_val_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_posedge_val_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (posedge_val_0_we),
    .wd     (posedge_val_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.posedge_val_0.q ),

    // to register interface (read)
    .qs     (posedge_val_0_qs)
  );


  // R[negedge_val_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h10)
  ) u_negedge_val_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (negedge_val_0_we),
    .wd     (negedge_val_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.negedge_val_0.q ),

    // to register interface (read)
    .qs     (negedge_val_0_qs)
  );


  // R[posedge_val_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h10)
  ) u_posedge_val_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (posedge_val_1_we),
    .wd     (posedge_val_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.posedge_val_1.q ),

    // to register interface (read)
    .qs     (posedge_val_1_qs)
  );


  // R[negedge_val_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h20)
  ) u_negedge_val_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (negedge_val_1_we),
    .wd     (negedge_val_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.negedge_val_1.q ),

    // to register interface (read)
    .qs     (negedge_val_1_qs)
  );


  // R[posedge_val_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h20)
  ) u_posedge_val_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (posedge_val_2_we),
    .wd     (posedge_val_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.posedge_val_2.q ),

    // to register interface (read)
    .qs     (posedge_val_2_qs)
  );


  // R[negedge_val_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h30)
  ) u_negedge_val_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (negedge_val_2_we),
    .wd     (negedge_val_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.negedge_val_2.q ),

    // to register interface (read)
    .qs     (negedge_val_2_qs)
  );


  // R[posedge_val_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h30)
  ) u_posedge_val_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (posedge_val_3_we),
    .wd     (posedge_val_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.posedge_val_3.q ),

    // to register interface (read)
    .qs     (posedge_val_3_qs)
  );


  // R[negedge_val_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h40)
  ) u_negedge_val_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (negedge_val_3_we),
    .wd     (negedge_val_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.negedge_val_3.q ),

    // to register interface (read)
    .qs     (negedge_val_3_qs)
  );


  // R[posedge_val_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h40)
  ) u_posedge_val_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (posedge_val_4_we),
    .wd     (posedge_val_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.posedge_val_4.q ),

    // to register interface (read)
    .qs     (posedge_val_4_qs)
  );


  // R[negedge_val_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h50)
  ) u_negedge_val_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (negedge_val_4_we),
    .wd     (negedge_val_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.negedge_val_4.q ),

    // to register interface (read)
    .qs     (negedge_val_4_qs)
  );


  // R[posedge_val_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h50)
  ) u_posedge_val_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (posedge_val_5_we),
    .wd     (posedge_val_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.posedge_val_5.q ),

    // to register interface (read)
    .qs     (posedge_val_5_qs)
  );


  // R[negedge_val_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h60)
  ) u_negedge_val_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (negedge_val_5_we),
    .wd     (negedge_val_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.negedge_val_5.q ),

    // to register interface (read)
    .qs     (negedge_val_5_qs)
  );


  // R[posedge_val_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h60)
  ) u_posedge_val_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (posedge_val_6_we),
    .wd     (posedge_val_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.posedge_val_6.q ),

    // to register interface (read)
    .qs     (posedge_val_6_qs)
  );


  // R[negedge_val_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h70)
  ) u_negedge_val_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (negedge_val_6_we),
    .wd     (negedge_val_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.negedge_val_6.q ),

    // to register interface (read)
    .qs     (negedge_val_6_qs)
  );


  // R[posedge_val_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h70)
  ) u_posedge_val_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (posedge_val_7_we),
    .wd     (posedge_val_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.posedge_val_7.q ),

    // to register interface (read)
    .qs     (posedge_val_7_qs)
  );


  // R[negedge_val_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h80)
  ) u_negedge_val_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (negedge_val_7_we),
    .wd     (negedge_val_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.negedge_val_7.q ),

    // to register interface (read)
    .qs     (negedge_val_7_qs)
  );


  // R[posedge_val_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h80)
  ) u_posedge_val_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (posedge_val_8_we),
    .wd     (posedge_val_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.posedge_val_8.q ),

    // to register interface (read)
    .qs     (posedge_val_8_qs)
  );


  // R[negedge_val_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h90)
  ) u_negedge_val_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (negedge_val_8_we),
    .wd     (negedge_val_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.negedge_val_8.q ),

    // to register interface (read)
    .qs     (negedge_val_8_qs)
  );


  // R[incr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h1)
  ) u_incr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (incr_we),
    .wd     (incr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.incr.q ),

    // to register interface (read)
    .qs     (incr_qs)
  );




  logic [20:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == PWM_CFG_OFFSET);
    addr_hit[ 1] = (reg_addr == PWM_PERIOD_OFFSET);
    addr_hit[ 2] = (reg_addr == PWM_POSEDGE_VAL_0_OFFSET);
    addr_hit[ 3] = (reg_addr == PWM_NEGEDGE_VAL_0_OFFSET);
    addr_hit[ 4] = (reg_addr == PWM_POSEDGE_VAL_1_OFFSET);
    addr_hit[ 5] = (reg_addr == PWM_NEGEDGE_VAL_1_OFFSET);
    addr_hit[ 6] = (reg_addr == PWM_POSEDGE_VAL_2_OFFSET);
    addr_hit[ 7] = (reg_addr == PWM_NEGEDGE_VAL_2_OFFSET);
    addr_hit[ 8] = (reg_addr == PWM_POSEDGE_VAL_3_OFFSET);
    addr_hit[ 9] = (reg_addr == PWM_NEGEDGE_VAL_3_OFFSET);
    addr_hit[10] = (reg_addr == PWM_POSEDGE_VAL_4_OFFSET);
    addr_hit[11] = (reg_addr == PWM_NEGEDGE_VAL_4_OFFSET);
    addr_hit[12] = (reg_addr == PWM_POSEDGE_VAL_5_OFFSET);
    addr_hit[13] = (reg_addr == PWM_NEGEDGE_VAL_5_OFFSET);
    addr_hit[14] = (reg_addr == PWM_POSEDGE_VAL_6_OFFSET);
    addr_hit[15] = (reg_addr == PWM_NEGEDGE_VAL_6_OFFSET);
    addr_hit[16] = (reg_addr == PWM_POSEDGE_VAL_7_OFFSET);
    addr_hit[17] = (reg_addr == PWM_NEGEDGE_VAL_7_OFFSET);
    addr_hit[18] = (reg_addr == PWM_POSEDGE_VAL_8_OFFSET);
    addr_hit[19] = (reg_addr == PWM_NEGEDGE_VAL_8_OFFSET);
    addr_hit[20] = (reg_addr == PWM_INCR_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[ 0] && reg_we && (PWM_PERMIT[ 0] != (PWM_PERMIT[ 0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 1] && reg_we && (PWM_PERMIT[ 1] != (PWM_PERMIT[ 1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 2] && reg_we && (PWM_PERMIT[ 2] != (PWM_PERMIT[ 2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 3] && reg_we && (PWM_PERMIT[ 3] != (PWM_PERMIT[ 3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 4] && reg_we && (PWM_PERMIT[ 4] != (PWM_PERMIT[ 4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 5] && reg_we && (PWM_PERMIT[ 5] != (PWM_PERMIT[ 5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 6] && reg_we && (PWM_PERMIT[ 6] != (PWM_PERMIT[ 6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 7] && reg_we && (PWM_PERMIT[ 7] != (PWM_PERMIT[ 7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 8] && reg_we && (PWM_PERMIT[ 8] != (PWM_PERMIT[ 8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 9] && reg_we && (PWM_PERMIT[ 9] != (PWM_PERMIT[ 9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[10] && reg_we && (PWM_PERMIT[10] != (PWM_PERMIT[10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[11] && reg_we && (PWM_PERMIT[11] != (PWM_PERMIT[11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[12] && reg_we && (PWM_PERMIT[12] != (PWM_PERMIT[12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[13] && reg_we && (PWM_PERMIT[13] != (PWM_PERMIT[13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[14] && reg_we && (PWM_PERMIT[14] != (PWM_PERMIT[14] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[15] && reg_we && (PWM_PERMIT[15] != (PWM_PERMIT[15] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[16] && reg_we && (PWM_PERMIT[16] != (PWM_PERMIT[16] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[17] && reg_we && (PWM_PERMIT[17] != (PWM_PERMIT[17] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[18] && reg_we && (PWM_PERMIT[18] != (PWM_PERMIT[18] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[19] && reg_we && (PWM_PERMIT[19] != (PWM_PERMIT[19] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[20] && reg_we && (PWM_PERMIT[20] != (PWM_PERMIT[20] & reg_be))) wr_err = 1'b1 ;
  end

  assign cfg_pwm_en_we = addr_hit[0] & reg_we & ~wr_err;
  assign cfg_pwm_en_wd = reg_wdata[8:0];

  assign cfg_cntr_en_we = addr_hit[0] & reg_we & ~wr_err;
  assign cfg_cntr_en_wd = reg_wdata[31];

  assign period_we = addr_hit[1] & reg_we & ~wr_err;
  assign period_wd = reg_wdata[31:0];

  assign posedge_val_0_we = addr_hit[2] & reg_we & ~wr_err;
  assign posedge_val_0_wd = reg_wdata[31:0];

  assign negedge_val_0_we = addr_hit[3] & reg_we & ~wr_err;
  assign negedge_val_0_wd = reg_wdata[31:0];

  assign posedge_val_1_we = addr_hit[4] & reg_we & ~wr_err;
  assign posedge_val_1_wd = reg_wdata[31:0];

  assign negedge_val_1_we = addr_hit[5] & reg_we & ~wr_err;
  assign negedge_val_1_wd = reg_wdata[31:0];

  assign posedge_val_2_we = addr_hit[6] & reg_we & ~wr_err;
  assign posedge_val_2_wd = reg_wdata[31:0];

  assign negedge_val_2_we = addr_hit[7] & reg_we & ~wr_err;
  assign negedge_val_2_wd = reg_wdata[31:0];

  assign posedge_val_3_we = addr_hit[8] & reg_we & ~wr_err;
  assign posedge_val_3_wd = reg_wdata[31:0];

  assign negedge_val_3_we = addr_hit[9] & reg_we & ~wr_err;
  assign negedge_val_3_wd = reg_wdata[31:0];

  assign posedge_val_4_we = addr_hit[10] & reg_we & ~wr_err;
  assign posedge_val_4_wd = reg_wdata[31:0];

  assign negedge_val_4_we = addr_hit[11] & reg_we & ~wr_err;
  assign negedge_val_4_wd = reg_wdata[31:0];

  assign posedge_val_5_we = addr_hit[12] & reg_we & ~wr_err;
  assign posedge_val_5_wd = reg_wdata[31:0];

  assign negedge_val_5_we = addr_hit[13] & reg_we & ~wr_err;
  assign negedge_val_5_wd = reg_wdata[31:0];

  assign posedge_val_6_we = addr_hit[14] & reg_we & ~wr_err;
  assign posedge_val_6_wd = reg_wdata[31:0];

  assign negedge_val_6_we = addr_hit[15] & reg_we & ~wr_err;
  assign negedge_val_6_wd = reg_wdata[31:0];

  assign posedge_val_7_we = addr_hit[16] & reg_we & ~wr_err;
  assign posedge_val_7_wd = reg_wdata[31:0];

  assign negedge_val_7_we = addr_hit[17] & reg_we & ~wr_err;
  assign negedge_val_7_wd = reg_wdata[31:0];

  assign posedge_val_8_we = addr_hit[18] & reg_we & ~wr_err;
  assign posedge_val_8_wd = reg_wdata[31:0];

  assign negedge_val_8_we = addr_hit[19] & reg_we & ~wr_err;
  assign negedge_val_8_wd = reg_wdata[31:0];

  assign incr_we = addr_hit[20] & reg_we & ~wr_err;
  assign incr_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[8:0] = cfg_pwm_en_qs;
        reg_rdata_next[31] = cfg_cntr_en_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = period_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = posedge_val_0_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = negedge_val_0_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = posedge_val_1_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = negedge_val_1_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = posedge_val_2_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = negedge_val_2_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = posedge_val_3_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = negedge_val_3_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = posedge_val_4_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = negedge_val_4_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = posedge_val_5_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = negedge_val_5_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = posedge_val_6_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = negedge_val_6_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = posedge_val_7_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = negedge_val_7_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = posedge_val_8_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = negedge_val_8_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = incr_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)

endmodule
