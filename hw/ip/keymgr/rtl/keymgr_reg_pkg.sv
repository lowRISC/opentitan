// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package keymgr_reg_pkg;

  // Param list
  parameter int NumRomExtReg = 4;
  parameter int NumInReg = 4;
  parameter int NumOutReg = 8;
  parameter int NumKeyVersion = 1;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic        q;
  } keymgr_reg2hw_intr_state_reg_t;

  typedef struct packed {
    logic        q;
  } keymgr_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } keymgr_reg2hw_intr_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } init;
    struct packed {
      logic        q;
    } start;
    struct packed {
      logic [2:0]  q;
    } operation;
    struct packed {
      logic [1:0]  q;
    } dest_sel;
  } keymgr_reg2hw_control_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_rom_ext_desc_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_software_binding_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_salt_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_key_version_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_max_creator_key_ver_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_max_owner_int_key_ver_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_max_owner_key_ver_reg_t;


  typedef struct packed {
    logic        d;
    logic        de;
  } keymgr_hw2reg_intr_state_reg_t;

  typedef struct packed {
    logic        d;
  } keymgr_hw2reg_cfgen_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } init;
    struct packed {
      logic        d;
      logic        de;
    } start;
  } keymgr_hw2reg_control_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } keymgr_hw2reg_sw_share0_output_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } keymgr_hw2reg_sw_share1_output_mreg_t;

  typedef struct packed {
    logic [2:0]  d;
    logic        de;
  } keymgr_hw2reg_working_state_reg_t;

  typedef struct packed {
    struct packed {
      logic [1:0]  d;
      logic        de;
    } status;
    struct packed {
      logic [3:0]  d;
      logic        de;
    } error;
  } keymgr_hw2reg_op_status_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    keymgr_reg2hw_intr_state_reg_t intr_state; // [522:522]
    keymgr_reg2hw_intr_enable_reg_t intr_enable; // [521:521]
    keymgr_reg2hw_intr_test_reg_t intr_test; // [520:519]
    keymgr_reg2hw_control_reg_t control; // [518:512]
    keymgr_reg2hw_rom_ext_desc_mreg_t [3:0] rom_ext_desc; // [511:384]
    keymgr_reg2hw_software_binding_mreg_t [3:0] software_binding; // [383:256]
    keymgr_reg2hw_salt_mreg_t [3:0] salt; // [255:128]
    keymgr_reg2hw_key_version_mreg_t [0:0] key_version; // [127:96]
    keymgr_reg2hw_max_creator_key_ver_reg_t max_creator_key_ver; // [95:64]
    keymgr_reg2hw_max_owner_int_key_ver_reg_t max_owner_int_key_ver; // [63:32]
    keymgr_reg2hw_max_owner_key_ver_reg_t max_owner_key_ver; // [31:0]
  } keymgr_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    keymgr_hw2reg_intr_state_reg_t intr_state; // [546:546]
    keymgr_hw2reg_cfgen_reg_t cfgen; // [545:546]
    keymgr_hw2reg_control_reg_t control; // [545:539]
    keymgr_hw2reg_sw_share0_output_mreg_t [7:0] sw_share0_output; // [538:275]
    keymgr_hw2reg_sw_share1_output_mreg_t [7:0] sw_share1_output; // [274:11]
    keymgr_hw2reg_working_state_reg_t working_state; // [10:11]
    keymgr_hw2reg_op_status_reg_t op_status; // [10:11]
  } keymgr_hw2reg_t;

  // Register Address
  parameter logic [7:0] KEYMGR_INTR_STATE_OFFSET = 8'h 0;
  parameter logic [7:0] KEYMGR_INTR_ENABLE_OFFSET = 8'h 4;
  parameter logic [7:0] KEYMGR_INTR_TEST_OFFSET = 8'h 8;
  parameter logic [7:0] KEYMGR_CFGEN_OFFSET = 8'h c;
  parameter logic [7:0] KEYMGR_CONTROL_OFFSET = 8'h 10;
  parameter logic [7:0] KEYMGR_ROM_EXT_DESC_EN_OFFSET = 8'h 14;
  parameter logic [7:0] KEYMGR_ROM_EXT_DESC0_OFFSET = 8'h 18;
  parameter logic [7:0] KEYMGR_ROM_EXT_DESC1_OFFSET = 8'h 1c;
  parameter logic [7:0] KEYMGR_ROM_EXT_DESC2_OFFSET = 8'h 20;
  parameter logic [7:0] KEYMGR_ROM_EXT_DESC3_OFFSET = 8'h 24;
  parameter logic [7:0] KEYMGR_SOFTWARE_BINDING0_OFFSET = 8'h 28;
  parameter logic [7:0] KEYMGR_SOFTWARE_BINDING1_OFFSET = 8'h 2c;
  parameter logic [7:0] KEYMGR_SOFTWARE_BINDING2_OFFSET = 8'h 30;
  parameter logic [7:0] KEYMGR_SOFTWARE_BINDING3_OFFSET = 8'h 34;
  parameter logic [7:0] KEYMGR_SALT0_OFFSET = 8'h 38;
  parameter logic [7:0] KEYMGR_SALT1_OFFSET = 8'h 3c;
  parameter logic [7:0] KEYMGR_SALT2_OFFSET = 8'h 40;
  parameter logic [7:0] KEYMGR_SALT3_OFFSET = 8'h 44;
  parameter logic [7:0] KEYMGR_KEY_VERSION_OFFSET = 8'h 48;
  parameter logic [7:0] KEYMGR_MAX_CREATOR_KEY_VER_EN_OFFSET = 8'h 4c;
  parameter logic [7:0] KEYMGR_MAX_CREATOR_KEY_VER_OFFSET = 8'h 50;
  parameter logic [7:0] KEYMGR_MAX_OWNER_INT_KEY_VER_EN_OFFSET = 8'h 54;
  parameter logic [7:0] KEYMGR_MAX_OWNER_INT_KEY_VER_OFFSET = 8'h 58;
  parameter logic [7:0] KEYMGR_MAX_OWNER_KEY_VER_EN_OFFSET = 8'h 5c;
  parameter logic [7:0] KEYMGR_MAX_OWNER_KEY_VER_OFFSET = 8'h 60;
  parameter logic [7:0] KEYMGR_SW_SHARE0_OUTPUT0_OFFSET = 8'h 64;
  parameter logic [7:0] KEYMGR_SW_SHARE0_OUTPUT1_OFFSET = 8'h 68;
  parameter logic [7:0] KEYMGR_SW_SHARE0_OUTPUT2_OFFSET = 8'h 6c;
  parameter logic [7:0] KEYMGR_SW_SHARE0_OUTPUT3_OFFSET = 8'h 70;
  parameter logic [7:0] KEYMGR_SW_SHARE0_OUTPUT4_OFFSET = 8'h 74;
  parameter logic [7:0] KEYMGR_SW_SHARE0_OUTPUT5_OFFSET = 8'h 78;
  parameter logic [7:0] KEYMGR_SW_SHARE0_OUTPUT6_OFFSET = 8'h 7c;
  parameter logic [7:0] KEYMGR_SW_SHARE0_OUTPUT7_OFFSET = 8'h 80;
  parameter logic [7:0] KEYMGR_SW_SHARE1_OUTPUT0_OFFSET = 8'h 84;
  parameter logic [7:0] KEYMGR_SW_SHARE1_OUTPUT1_OFFSET = 8'h 88;
  parameter logic [7:0] KEYMGR_SW_SHARE1_OUTPUT2_OFFSET = 8'h 8c;
  parameter logic [7:0] KEYMGR_SW_SHARE1_OUTPUT3_OFFSET = 8'h 90;
  parameter logic [7:0] KEYMGR_SW_SHARE1_OUTPUT4_OFFSET = 8'h 94;
  parameter logic [7:0] KEYMGR_SW_SHARE1_OUTPUT5_OFFSET = 8'h 98;
  parameter logic [7:0] KEYMGR_SW_SHARE1_OUTPUT6_OFFSET = 8'h 9c;
  parameter logic [7:0] KEYMGR_SW_SHARE1_OUTPUT7_OFFSET = 8'h a0;
  parameter logic [7:0] KEYMGR_WORKING_STATE_OFFSET = 8'h a4;
  parameter logic [7:0] KEYMGR_OP_STATUS_OFFSET = 8'h a8;


  // Register Index
  typedef enum int {
    KEYMGR_INTR_STATE,
    KEYMGR_INTR_ENABLE,
    KEYMGR_INTR_TEST,
    KEYMGR_CFGEN,
    KEYMGR_CONTROL,
    KEYMGR_ROM_EXT_DESC_EN,
    KEYMGR_ROM_EXT_DESC0,
    KEYMGR_ROM_EXT_DESC1,
    KEYMGR_ROM_EXT_DESC2,
    KEYMGR_ROM_EXT_DESC3,
    KEYMGR_SOFTWARE_BINDING0,
    KEYMGR_SOFTWARE_BINDING1,
    KEYMGR_SOFTWARE_BINDING2,
    KEYMGR_SOFTWARE_BINDING3,
    KEYMGR_SALT0,
    KEYMGR_SALT1,
    KEYMGR_SALT2,
    KEYMGR_SALT3,
    KEYMGR_KEY_VERSION,
    KEYMGR_MAX_CREATOR_KEY_VER_EN,
    KEYMGR_MAX_CREATOR_KEY_VER,
    KEYMGR_MAX_OWNER_INT_KEY_VER_EN,
    KEYMGR_MAX_OWNER_INT_KEY_VER,
    KEYMGR_MAX_OWNER_KEY_VER_EN,
    KEYMGR_MAX_OWNER_KEY_VER,
    KEYMGR_SW_SHARE0_OUTPUT0,
    KEYMGR_SW_SHARE0_OUTPUT1,
    KEYMGR_SW_SHARE0_OUTPUT2,
    KEYMGR_SW_SHARE0_OUTPUT3,
    KEYMGR_SW_SHARE0_OUTPUT4,
    KEYMGR_SW_SHARE0_OUTPUT5,
    KEYMGR_SW_SHARE0_OUTPUT6,
    KEYMGR_SW_SHARE0_OUTPUT7,
    KEYMGR_SW_SHARE1_OUTPUT0,
    KEYMGR_SW_SHARE1_OUTPUT1,
    KEYMGR_SW_SHARE1_OUTPUT2,
    KEYMGR_SW_SHARE1_OUTPUT3,
    KEYMGR_SW_SHARE1_OUTPUT4,
    KEYMGR_SW_SHARE1_OUTPUT5,
    KEYMGR_SW_SHARE1_OUTPUT6,
    KEYMGR_SW_SHARE1_OUTPUT7,
    KEYMGR_WORKING_STATE,
    KEYMGR_OP_STATUS
  } keymgr_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] KEYMGR_PERMIT [43] = '{
    4'b 0001, // index[ 0] KEYMGR_INTR_STATE
    4'b 0001, // index[ 1] KEYMGR_INTR_ENABLE
    4'b 0001, // index[ 2] KEYMGR_INTR_TEST
    4'b 0001, // index[ 3] KEYMGR_CFGEN
    4'b 0011, // index[ 4] KEYMGR_CONTROL
    4'b 0001, // index[ 5] KEYMGR_ROM_EXT_DESC_EN
    4'b 1111, // index[ 6] KEYMGR_ROM_EXT_DESC0
    4'b 1111, // index[ 7] KEYMGR_ROM_EXT_DESC1
    4'b 1111, // index[ 8] KEYMGR_ROM_EXT_DESC2
    4'b 1111, // index[ 9] KEYMGR_ROM_EXT_DESC3
    4'b 1111, // index[10] KEYMGR_SOFTWARE_BINDING0
    4'b 1111, // index[11] KEYMGR_SOFTWARE_BINDING1
    4'b 1111, // index[12] KEYMGR_SOFTWARE_BINDING2
    4'b 1111, // index[13] KEYMGR_SOFTWARE_BINDING3
    4'b 1111, // index[14] KEYMGR_SALT0
    4'b 1111, // index[15] KEYMGR_SALT1
    4'b 1111, // index[16] KEYMGR_SALT2
    4'b 1111, // index[17] KEYMGR_SALT3
    4'b 1111, // index[18] KEYMGR_KEY_VERSION
    4'b 0001, // index[19] KEYMGR_MAX_CREATOR_KEY_VER_EN
    4'b 1111, // index[20] KEYMGR_MAX_CREATOR_KEY_VER
    4'b 0001, // index[21] KEYMGR_MAX_OWNER_INT_KEY_VER_EN
    4'b 1111, // index[22] KEYMGR_MAX_OWNER_INT_KEY_VER
    4'b 0001, // index[23] KEYMGR_MAX_OWNER_KEY_VER_EN
    4'b 1111, // index[24] KEYMGR_MAX_OWNER_KEY_VER
    4'b 1111, // index[25] KEYMGR_SW_SHARE0_OUTPUT0
    4'b 1111, // index[26] KEYMGR_SW_SHARE0_OUTPUT1
    4'b 1111, // index[27] KEYMGR_SW_SHARE0_OUTPUT2
    4'b 1111, // index[28] KEYMGR_SW_SHARE0_OUTPUT3
    4'b 1111, // index[29] KEYMGR_SW_SHARE0_OUTPUT4
    4'b 1111, // index[30] KEYMGR_SW_SHARE0_OUTPUT5
    4'b 1111, // index[31] KEYMGR_SW_SHARE0_OUTPUT6
    4'b 1111, // index[32] KEYMGR_SW_SHARE0_OUTPUT7
    4'b 1111, // index[33] KEYMGR_SW_SHARE1_OUTPUT0
    4'b 1111, // index[34] KEYMGR_SW_SHARE1_OUTPUT1
    4'b 1111, // index[35] KEYMGR_SW_SHARE1_OUTPUT2
    4'b 1111, // index[36] KEYMGR_SW_SHARE1_OUTPUT3
    4'b 1111, // index[37] KEYMGR_SW_SHARE1_OUTPUT4
    4'b 1111, // index[38] KEYMGR_SW_SHARE1_OUTPUT5
    4'b 1111, // index[39] KEYMGR_SW_SHARE1_OUTPUT6
    4'b 1111, // index[40] KEYMGR_SW_SHARE1_OUTPUT7
    4'b 0001, // index[41] KEYMGR_WORKING_STATE
    4'b 0001  // index[42] KEYMGR_OP_STATUS
  };
endpackage

