// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// FPV CSR read and write assertions auto-generated by `reggen` containing data structure
// Do Not Edit directly
// TODO: This automation does not support: shadow reg and regwen reg
// This automation assumes that W1C and W0C are registers with 1 bit per field

`include "prim_assert.sv"

// Block: padctrl
module padctrl_csr_assert_fpv import tlul_pkg::*; import padctrl_reg_pkg::*; (
  input clk_i,
  input rst_ni,

  // tile link ports
  input tl_h2d_t h2d,
  input tl_d2h_t d2h,

  // reg and hw ports
  input padctrl_reg2hw_t reg2hw,
  input padctrl_hw2reg_t hw2reg
);

  parameter int DWidth = 32;
  // mask register to convert byte to bit
  logic [DWidth-1:0] a_mask_bit;

  assign a_mask_bit[7:0]   = h2d.a_mask[0] ? '1 : '0;
  assign a_mask_bit[15:8]  = h2d.a_mask[1] ? '1 : '0;
  assign a_mask_bit[23:16] = h2d.a_mask[2] ? '1 : '0;
  assign a_mask_bit[31:24] = h2d.a_mask[3] ? '1 : '0;

  // declare common read and write sequences
  sequence device_wr_S(logic [5:0] addr);
    h2d.a_address == addr && h2d.a_opcode inside {PutFullData, PutPartialData} &&
        h2d.a_valid && h2d.d_ready && !d2h.d_valid;
  endsequence

  sequence device_rd_S(logic [5:0] addr);
    h2d.a_address == addr && h2d.a_opcode inside {Get} && h2d.a_valid && h2d.d_ready &&
        !d2h.d_valid;
  endsequence

  // declare common read and write properties
  // for homog registers, we check by a reg; for non-homog regs, we check by field.
  // `mask` is used for checking by field. It masks out any act_data that are not within the field
  // `lsb` is used to check non-homog multi_reg. Because we are using a local copy `_fpv` variable
  // to store all the multi-reg within one basefield, we need to shift the `_fpv` value to the
  // correct bits, then compare with read/write exp_data.

  property wr_P(bit [5:0] addr, bit [DWidth-1:0] act_data, bit regen,
                bit [DWidth-1:0] mask, int lsb);
    logic [DWidth-1:0] id, exp_data;
    (device_wr_S(addr), id = h2d.a_source, exp_data = h2d.a_data & a_mask_bit & mask) ##1
        first_match(##[0:$] d2h.d_valid && d2h.d_source == id) |->
        (d2h.d_error || (act_data << lsb) == exp_data || !regen);
  endproperty

  // external reg will use one clk cycle to update act_data from external
  property wr_ext_P(bit [5:0] addr, bit [DWidth-1:0] act_data, bit regen,
                    bit [DWidth-1:0] mask, int lsb);
    logic [DWidth-1:0] id, exp_data;
    (device_wr_S(addr), id = h2d.a_source, exp_data = h2d.a_data & a_mask_bit & mask) ##1
        first_match(##[0:$] (d2h.d_valid && d2h.d_source == id)) |->
        (d2h.d_error || ($past(act_data) << lsb) == exp_data || !regen);
  endproperty

  property w1c_P(bit [5:0] addr, bit [DWidth-1:0] act_data, bit regen,
                bit [DWidth-1:0] mask, int lsb);
    logic [DWidth-1:0] id, exp_data;
    (device_wr_S(addr), id = h2d.a_source, exp_data = h2d.a_data & a_mask_bit & mask & '0) ##1
        first_match(##[0:$] d2h.d_valid && d2h.d_source == id) |->
        (d2h.d_error || (act_data << lsb) == exp_data || !regen);
  endproperty

  property w1c_ext_P(bit [5:0] addr, bit [DWidth-1:0] act_data, bit regen,
                    bit [DWidth-1:0] mask, int lsb);
    logic [DWidth-1:0] id, exp_data;
    (device_wr_S(addr), id = h2d.a_source, exp_data = h2d.a_data & a_mask_bit & mask & '0) ##1
        first_match(##[0:$] (d2h.d_valid && d2h.d_source == id)) |->
        (d2h.d_error || ($past(act_data) << lsb) == exp_data || !regen);
  endproperty

  property rd_P(bit [5:0] addr, bit [DWidth-1:0] act_data, bit [DWidth-1:0] mask, int lsb);
    logic [DWidth-1:0] id, exp_data;
    (device_rd_S(addr), id = h2d.a_source, exp_data = $past(act_data)) ##1
        first_match(##[0:$] (d2h.d_valid && d2h.d_source == id)) |->
        (d2h.d_error || (d2h.d_data & mask) >> lsb == exp_data);
  endproperty

  property rd_ext_P(bit [5:0] addr, bit [DWidth-1:0] act_data, bit [DWidth-1:0] mask,
      int lsb);
    logic [DWidth-1:0] id, exp_data;
    (device_rd_S(addr), id = h2d.a_source, exp_data = act_data) ##1
        first_match(##[0:$] (d2h.d_valid && d2h.d_source == id)) |->
        (d2h.d_error || (d2h.d_data & mask) >> lsb == exp_data);
  endproperty

  // read a WO register, always return 0
  property r_wo_P(bit [5:0] addr);
    logic [DWidth-1:0] id;
    (device_rd_S(addr), id = h2d.a_source) ##1
        first_match(##[0:$] (d2h.d_valid && d2h.d_source == id)) |->
        (d2h.d_error || d2h.d_data == 0);
  endproperty

  // TODO: currently not used, will use once support regwen reg
  property wr_regen_stable_P(bit regen, bit [DWidth-1:0] exp_data);
    (!regen && $stable(regen)) |-> $stable(exp_data);
  endproperty


  // assertions for register: regen

  // define local fpv variable for multi-reg
  logic [39:0] dio_pads_q_fpv;
  logic [39:0] dio_pads_d_fpv;
  for (genvar s = 0; s < 4; s++) begin : gen_dio_pads_q
    assign dio_pads_q_fpv[((s+1)*10-1):s*10] = reg2hw.dio_pads[s].q;
    assign dio_pads_d_fpv[((s+1)*10-1):s*10] = hw2reg.dio_pads[s].d;
  end

  // assertions for register: dio_pads0
  `ASSERT(dio_pads0_wr_A, wr_ext_P(6'h4, dio_pads_q_fpv[29:0], dut.u_reg.regen_qs, 'h3fffffff, 0))
  `ASSERT(dio_pads0_rd_A, rd_ext_P(6'h4, dio_pads_d_fpv[29:0], 'h3fffffff, 0))
  // assertions for register: dio_pads1
  `ASSERT(dio_pads1_wr_A, wr_ext_P(6'h8, dio_pads_q_fpv[39:30], dut.u_reg.regen_qs, 'h3ff, 0))
  `ASSERT(dio_pads1_rd_A, rd_ext_P(6'h8, dio_pads_d_fpv[39:30], 'h3ff, 0))

  // define local fpv variable for multi-reg
  logic [159:0] mio_pads_q_fpv;
  logic [159:0] mio_pads_d_fpv;
  for (genvar s = 0; s < 16; s++) begin : gen_mio_pads_q
    assign mio_pads_q_fpv[((s+1)*10-1):s*10] = reg2hw.mio_pads[s].q;
    assign mio_pads_d_fpv[((s+1)*10-1):s*10] = hw2reg.mio_pads[s].d;
  end

  // assertions for register: mio_pads0
  `ASSERT(mio_pads0_wr_A, wr_ext_P(6'hc, mio_pads_q_fpv[29:0], dut.u_reg.regen_qs, 'h3fffffff, 0))
  `ASSERT(mio_pads0_rd_A, rd_ext_P(6'hc, mio_pads_d_fpv[29:0], 'h3fffffff, 0))
  // assertions for register: mio_pads1
  `ASSERT(mio_pads1_wr_A, wr_ext_P(6'h10, mio_pads_q_fpv[59:30], dut.u_reg.regen_qs, 'h3fffffff, 0))
  `ASSERT(mio_pads1_rd_A, rd_ext_P(6'h10, mio_pads_d_fpv[59:30], 'h3fffffff, 0))
  // assertions for register: mio_pads2
  `ASSERT(mio_pads2_wr_A, wr_ext_P(6'h14, mio_pads_q_fpv[89:60], dut.u_reg.regen_qs, 'h3fffffff, 0))
  `ASSERT(mio_pads2_rd_A, rd_ext_P(6'h14, mio_pads_d_fpv[89:60], 'h3fffffff, 0))
  // assertions for register: mio_pads3
  `ASSERT(mio_pads3_wr_A, wr_ext_P(6'h18, mio_pads_q_fpv[119:90], dut.u_reg.regen_qs, 'h3fffffff, 0))
  `ASSERT(mio_pads3_rd_A, rd_ext_P(6'h18, mio_pads_d_fpv[119:90], 'h3fffffff, 0))
  // assertions for register: mio_pads4
  `ASSERT(mio_pads4_wr_A, wr_ext_P(6'h1c, mio_pads_q_fpv[149:120], dut.u_reg.regen_qs, 'h3fffffff, 0))
  `ASSERT(mio_pads4_rd_A, rd_ext_P(6'h1c, mio_pads_d_fpv[149:120], 'h3fffffff, 0))
  // assertions for register: mio_pads5
  `ASSERT(mio_pads5_wr_A, wr_ext_P(6'h20, mio_pads_q_fpv[159:150], dut.u_reg.regen_qs, 'h3ff, 0))
  `ASSERT(mio_pads5_rd_A, rd_ext_P(6'h20, mio_pads_d_fpv[159:150], 'h3ff, 0))


endmodule
