// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

module padctrl_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output padctrl_reg_pkg::padctrl_reg2hw_t reg2hw, // Write

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import padctrl_reg_pkg::* ;

  localparam AW = 5;
  localparam DW = 32;
  localparam DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic regen_qs;
  logic regen_wd;
  logic regen_we;
  logic [5:0] dio_pads_attr0_qs;
  logic [5:0] dio_pads_attr0_wd;
  logic dio_pads_attr0_we;
  logic [5:0] dio_pads_attr1_qs;
  logic [5:0] dio_pads_attr1_wd;
  logic dio_pads_attr1_we;
  logic [5:0] dio_pads_attr2_qs;
  logic [5:0] dio_pads_attr2_wd;
  logic dio_pads_attr2_we;
  logic [5:0] dio_pads_attr3_qs;
  logic [5:0] dio_pads_attr3_wd;
  logic dio_pads_attr3_we;
  logic [5:0] mio_pads0_attr0_qs;
  logic [5:0] mio_pads0_attr0_wd;
  logic mio_pads0_attr0_we;
  logic [5:0] mio_pads0_attr1_qs;
  logic [5:0] mio_pads0_attr1_wd;
  logic mio_pads0_attr1_we;
  logic [5:0] mio_pads0_attr2_qs;
  logic [5:0] mio_pads0_attr2_wd;
  logic mio_pads0_attr2_we;
  logic [5:0] mio_pads0_attr3_qs;
  logic [5:0] mio_pads0_attr3_wd;
  logic mio_pads0_attr3_we;
  logic [5:0] mio_pads0_attr4_qs;
  logic [5:0] mio_pads0_attr4_wd;
  logic mio_pads0_attr4_we;
  logic [5:0] mio_pads1_attr5_qs;
  logic [5:0] mio_pads1_attr5_wd;
  logic mio_pads1_attr5_we;
  logic [5:0] mio_pads1_attr6_qs;
  logic [5:0] mio_pads1_attr6_wd;
  logic mio_pads1_attr6_we;
  logic [5:0] mio_pads1_attr7_qs;
  logic [5:0] mio_pads1_attr7_wd;
  logic mio_pads1_attr7_we;
  logic [5:0] mio_pads1_attr8_qs;
  logic [5:0] mio_pads1_attr8_wd;
  logic mio_pads1_attr8_we;
  logic [5:0] mio_pads1_attr9_qs;
  logic [5:0] mio_pads1_attr9_wd;
  logic mio_pads1_attr9_we;
  logic [5:0] mio_pads2_attr10_qs;
  logic [5:0] mio_pads2_attr10_wd;
  logic mio_pads2_attr10_we;
  logic [5:0] mio_pads2_attr11_qs;
  logic [5:0] mio_pads2_attr11_wd;
  logic mio_pads2_attr11_we;
  logic [5:0] mio_pads2_attr12_qs;
  logic [5:0] mio_pads2_attr12_wd;
  logic mio_pads2_attr12_we;
  logic [5:0] mio_pads2_attr13_qs;
  logic [5:0] mio_pads2_attr13_wd;
  logic mio_pads2_attr13_we;
  logic [5:0] mio_pads2_attr14_qs;
  logic [5:0] mio_pads2_attr14_wd;
  logic mio_pads2_attr14_we;
  logic [5:0] mio_pads3_attr15_qs;
  logic [5:0] mio_pads3_attr15_wd;
  logic mio_pads3_attr15_we;
  logic [5:0] mio_pads3_attr16_qs;
  logic [5:0] mio_pads3_attr16_wd;
  logic mio_pads3_attr16_we;
  logic [5:0] mio_pads3_attr17_qs;
  logic [5:0] mio_pads3_attr17_wd;
  logic mio_pads3_attr17_we;

  // Register instances
  // R[regen]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_regen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (regen_we),
    .wd     (regen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (regen_qs)
  );



  // Subregister 0 of Multireg dio_pads
  // R[dio_pads]: V(False)

  // F[attr0]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_dio_pads_attr0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (dio_pads_attr0_we & regen_qs),
    .wd     (dio_pads_attr0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pads[0].q ),

    // to register interface (read)
    .qs     (dio_pads_attr0_qs)
  );


  // F[attr1]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_dio_pads_attr1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (dio_pads_attr1_we & regen_qs),
    .wd     (dio_pads_attr1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pads[1].q ),

    // to register interface (read)
    .qs     (dio_pads_attr1_qs)
  );


  // F[attr2]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_dio_pads_attr2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (dio_pads_attr2_we & regen_qs),
    .wd     (dio_pads_attr2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pads[2].q ),

    // to register interface (read)
    .qs     (dio_pads_attr2_qs)
  );


  // F[attr3]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_dio_pads_attr3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (dio_pads_attr3_we & regen_qs),
    .wd     (dio_pads_attr3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dio_pads[3].q ),

    // to register interface (read)
    .qs     (dio_pads_attr3_qs)
  );




  // Subregister 0 of Multireg mio_pads
  // R[mio_pads0]: V(False)

  // F[attr0]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads0_attr0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads0_attr0_we & regen_qs),
    .wd     (mio_pads0_attr0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[0].q ),

    // to register interface (read)
    .qs     (mio_pads0_attr0_qs)
  );


  // F[attr1]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads0_attr1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads0_attr1_we & regen_qs),
    .wd     (mio_pads0_attr1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[1].q ),

    // to register interface (read)
    .qs     (mio_pads0_attr1_qs)
  );


  // F[attr2]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads0_attr2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads0_attr2_we & regen_qs),
    .wd     (mio_pads0_attr2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[2].q ),

    // to register interface (read)
    .qs     (mio_pads0_attr2_qs)
  );


  // F[attr3]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads0_attr3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads0_attr3_we & regen_qs),
    .wd     (mio_pads0_attr3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[3].q ),

    // to register interface (read)
    .qs     (mio_pads0_attr3_qs)
  );


  // F[attr4]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads0_attr4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads0_attr4_we & regen_qs),
    .wd     (mio_pads0_attr4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[4].q ),

    // to register interface (read)
    .qs     (mio_pads0_attr4_qs)
  );


  // Subregister 5 of Multireg mio_pads
  // R[mio_pads1]: V(False)

  // F[attr5]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads1_attr5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads1_attr5_we & regen_qs),
    .wd     (mio_pads1_attr5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[5].q ),

    // to register interface (read)
    .qs     (mio_pads1_attr5_qs)
  );


  // F[attr6]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads1_attr6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads1_attr6_we & regen_qs),
    .wd     (mio_pads1_attr6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[6].q ),

    // to register interface (read)
    .qs     (mio_pads1_attr6_qs)
  );


  // F[attr7]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads1_attr7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads1_attr7_we & regen_qs),
    .wd     (mio_pads1_attr7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[7].q ),

    // to register interface (read)
    .qs     (mio_pads1_attr7_qs)
  );


  // F[attr8]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads1_attr8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads1_attr8_we & regen_qs),
    .wd     (mio_pads1_attr8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[8].q ),

    // to register interface (read)
    .qs     (mio_pads1_attr8_qs)
  );


  // F[attr9]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads1_attr9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads1_attr9_we & regen_qs),
    .wd     (mio_pads1_attr9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[9].q ),

    // to register interface (read)
    .qs     (mio_pads1_attr9_qs)
  );


  // Subregister 10 of Multireg mio_pads
  // R[mio_pads2]: V(False)

  // F[attr10]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads2_attr10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads2_attr10_we & regen_qs),
    .wd     (mio_pads2_attr10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[10].q ),

    // to register interface (read)
    .qs     (mio_pads2_attr10_qs)
  );


  // F[attr11]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads2_attr11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads2_attr11_we & regen_qs),
    .wd     (mio_pads2_attr11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[11].q ),

    // to register interface (read)
    .qs     (mio_pads2_attr11_qs)
  );


  // F[attr12]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads2_attr12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads2_attr12_we & regen_qs),
    .wd     (mio_pads2_attr12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[12].q ),

    // to register interface (read)
    .qs     (mio_pads2_attr12_qs)
  );


  // F[attr13]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads2_attr13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads2_attr13_we & regen_qs),
    .wd     (mio_pads2_attr13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[13].q ),

    // to register interface (read)
    .qs     (mio_pads2_attr13_qs)
  );


  // F[attr14]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads2_attr14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads2_attr14_we & regen_qs),
    .wd     (mio_pads2_attr14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[14].q ),

    // to register interface (read)
    .qs     (mio_pads2_attr14_qs)
  );


  // Subregister 15 of Multireg mio_pads
  // R[mio_pads3]: V(False)

  // F[attr15]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads3_attr15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads3_attr15_we & regen_qs),
    .wd     (mio_pads3_attr15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[15].q ),

    // to register interface (read)
    .qs     (mio_pads3_attr15_qs)
  );


  // F[attr16]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads3_attr16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads3_attr16_we & regen_qs),
    .wd     (mio_pads3_attr16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[16].q ),

    // to register interface (read)
    .qs     (mio_pads3_attr16_qs)
  );


  // F[attr17]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_mio_pads3_attr17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_pads3_attr17_we & regen_qs),
    .wd     (mio_pads3_attr17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_pads[17].q ),

    // to register interface (read)
    .qs     (mio_pads3_attr17_qs)
  );





  logic [5:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == PADCTRL_REGEN_OFFSET);
    addr_hit[1] = (reg_addr == PADCTRL_DIO_PADS_OFFSET);
    addr_hit[2] = (reg_addr == PADCTRL_MIO_PADS0_OFFSET);
    addr_hit[3] = (reg_addr == PADCTRL_MIO_PADS1_OFFSET);
    addr_hit[4] = (reg_addr == PADCTRL_MIO_PADS2_OFFSET);
    addr_hit[5] = (reg_addr == PADCTRL_MIO_PADS3_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (PADCTRL_PERMIT[0] != (PADCTRL_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (PADCTRL_PERMIT[1] != (PADCTRL_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[2] && reg_we && (PADCTRL_PERMIT[2] != (PADCTRL_PERMIT[2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[3] && reg_we && (PADCTRL_PERMIT[3] != (PADCTRL_PERMIT[3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[4] && reg_we && (PADCTRL_PERMIT[4] != (PADCTRL_PERMIT[4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[5] && reg_we && (PADCTRL_PERMIT[5] != (PADCTRL_PERMIT[5] & reg_be))) wr_err = 1'b1 ;
  end

  assign regen_we = addr_hit[0] & reg_we & ~wr_err;
  assign regen_wd = reg_wdata[0];

  assign dio_pads_attr0_we = addr_hit[1] & reg_we & ~wr_err;
  assign dio_pads_attr0_wd = reg_wdata[5:0];

  assign dio_pads_attr1_we = addr_hit[1] & reg_we & ~wr_err;
  assign dio_pads_attr1_wd = reg_wdata[11:6];

  assign dio_pads_attr2_we = addr_hit[1] & reg_we & ~wr_err;
  assign dio_pads_attr2_wd = reg_wdata[17:12];

  assign dio_pads_attr3_we = addr_hit[1] & reg_we & ~wr_err;
  assign dio_pads_attr3_wd = reg_wdata[23:18];

  assign mio_pads0_attr0_we = addr_hit[2] & reg_we & ~wr_err;
  assign mio_pads0_attr0_wd = reg_wdata[5:0];

  assign mio_pads0_attr1_we = addr_hit[2] & reg_we & ~wr_err;
  assign mio_pads0_attr1_wd = reg_wdata[11:6];

  assign mio_pads0_attr2_we = addr_hit[2] & reg_we & ~wr_err;
  assign mio_pads0_attr2_wd = reg_wdata[17:12];

  assign mio_pads0_attr3_we = addr_hit[2] & reg_we & ~wr_err;
  assign mio_pads0_attr3_wd = reg_wdata[23:18];

  assign mio_pads0_attr4_we = addr_hit[2] & reg_we & ~wr_err;
  assign mio_pads0_attr4_wd = reg_wdata[29:24];

  assign mio_pads1_attr5_we = addr_hit[3] & reg_we & ~wr_err;
  assign mio_pads1_attr5_wd = reg_wdata[5:0];

  assign mio_pads1_attr6_we = addr_hit[3] & reg_we & ~wr_err;
  assign mio_pads1_attr6_wd = reg_wdata[11:6];

  assign mio_pads1_attr7_we = addr_hit[3] & reg_we & ~wr_err;
  assign mio_pads1_attr7_wd = reg_wdata[17:12];

  assign mio_pads1_attr8_we = addr_hit[3] & reg_we & ~wr_err;
  assign mio_pads1_attr8_wd = reg_wdata[23:18];

  assign mio_pads1_attr9_we = addr_hit[3] & reg_we & ~wr_err;
  assign mio_pads1_attr9_wd = reg_wdata[29:24];

  assign mio_pads2_attr10_we = addr_hit[4] & reg_we & ~wr_err;
  assign mio_pads2_attr10_wd = reg_wdata[5:0];

  assign mio_pads2_attr11_we = addr_hit[4] & reg_we & ~wr_err;
  assign mio_pads2_attr11_wd = reg_wdata[11:6];

  assign mio_pads2_attr12_we = addr_hit[4] & reg_we & ~wr_err;
  assign mio_pads2_attr12_wd = reg_wdata[17:12];

  assign mio_pads2_attr13_we = addr_hit[4] & reg_we & ~wr_err;
  assign mio_pads2_attr13_wd = reg_wdata[23:18];

  assign mio_pads2_attr14_we = addr_hit[4] & reg_we & ~wr_err;
  assign mio_pads2_attr14_wd = reg_wdata[29:24];

  assign mio_pads3_attr15_we = addr_hit[5] & reg_we & ~wr_err;
  assign mio_pads3_attr15_wd = reg_wdata[5:0];

  assign mio_pads3_attr16_we = addr_hit[5] & reg_we & ~wr_err;
  assign mio_pads3_attr16_wd = reg_wdata[11:6];

  assign mio_pads3_attr17_we = addr_hit[5] & reg_we & ~wr_err;
  assign mio_pads3_attr17_wd = reg_wdata[17:12];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = regen_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[5:0] = dio_pads_attr0_qs;
        reg_rdata_next[11:6] = dio_pads_attr1_qs;
        reg_rdata_next[17:12] = dio_pads_attr2_qs;
        reg_rdata_next[23:18] = dio_pads_attr3_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[5:0] = mio_pads0_attr0_qs;
        reg_rdata_next[11:6] = mio_pads0_attr1_qs;
        reg_rdata_next[17:12] = mio_pads0_attr2_qs;
        reg_rdata_next[23:18] = mio_pads0_attr3_qs;
        reg_rdata_next[29:24] = mio_pads0_attr4_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[5:0] = mio_pads1_attr5_qs;
        reg_rdata_next[11:6] = mio_pads1_attr6_qs;
        reg_rdata_next[17:12] = mio_pads1_attr7_qs;
        reg_rdata_next[23:18] = mio_pads1_attr8_qs;
        reg_rdata_next[29:24] = mio_pads1_attr9_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[5:0] = mio_pads2_attr10_qs;
        reg_rdata_next[11:6] = mio_pads2_attr11_qs;
        reg_rdata_next[17:12] = mio_pads2_attr12_qs;
        reg_rdata_next[23:18] = mio_pads2_attr13_qs;
        reg_rdata_next[29:24] = mio_pads2_attr14_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[5:0] = mio_pads3_attr15_qs;
        reg_rdata_next[11:6] = mio_pads3_attr16_qs;
        reg_rdata_next[17:12] = mio_pads3_attr17_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  `ASSERT(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0, clk_i, !rst_ni)

endmodule
