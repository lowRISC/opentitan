// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package csrng_reg_pkg;

  // Param list
  parameter int NHwApps = 3;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    struct packed {
      logic        q;
    } cs_cmd_req_done;
    struct packed {
      logic        q;
    } cs_fifo_err;
  } csrng_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } cs_cmd_req_done;
    struct packed {
      logic        q;
    } cs_fifo_err;
  } csrng_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } cs_cmd_req_done;
    struct packed {
      logic        q;
      logic        qe;
    } cs_fifo_err;
  } csrng_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic        q;
  } csrng_reg2hw_cs_regen_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } cs_enable;
    struct packed {
      logic        q;
    } aes_cipher_enable;
    struct packed {
      logic [3:0]  q;
    } fifo_depth_sts_sel;
  } csrng_reg2hw_cs_ctrl_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } csrng_reg2hw_cs_cmd_req_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        re;
  } csrng_reg2hw_cs_genbits_reg_t;


  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } cs_cmd_req_done;
    struct packed {
      logic        d;
      logic        de;
    } cs_fifo_err;
  } csrng_hw2reg_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic [23:0] d;
      logic        de;
    } fifo_depth_sts;
    struct packed {
      logic        d;
      logic        de;
    } diag;
  } csrng_hw2reg_cs_sum_sts_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } cmd_rdy;
    struct packed {
      logic        d;
      logic        de;
    } cmd_ack;
    struct packed {
      logic [1:0]  d;
      logic        de;
    } cmd_sts;
  } csrng_hw2reg_cs_cmd_sts_reg_t;

  typedef struct packed {
    logic        d;
  } csrng_hw2reg_cs_genbits_vld_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } csrng_hw2reg_cs_genbits_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    csrng_reg2hw_intr_state_reg_t intr_state; // [80:79]
    csrng_reg2hw_intr_enable_reg_t intr_enable; // [78:77]
    csrng_reg2hw_intr_test_reg_t intr_test; // [76:73]
    csrng_reg2hw_cs_regen_reg_t cs_regen; // [72:72]
    csrng_reg2hw_cs_ctrl_reg_t cs_ctrl; // [71:66]
    csrng_reg2hw_cs_cmd_req_reg_t cs_cmd_req; // [65:33]
    csrng_reg2hw_cs_genbits_reg_t cs_genbits; // [32:0]
  } csrng_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    csrng_hw2reg_intr_state_reg_t intr_state; // [70:69]
    csrng_hw2reg_cs_sum_sts_reg_t cs_sum_sts; // [68:69]
    csrng_hw2reg_cs_cmd_sts_reg_t cs_cmd_sts; // [68:69]
    csrng_hw2reg_cs_genbits_vld_reg_t cs_genbits_vld; // [68:69]
    csrng_hw2reg_cs_genbits_reg_t cs_genbits; // [68:36]
  } csrng_hw2reg_t;

  // Register Address
  parameter logic [5:0] CSRNG_INTR_STATE_OFFSET = 6'h 0;
  parameter logic [5:0] CSRNG_INTR_ENABLE_OFFSET = 6'h 4;
  parameter logic [5:0] CSRNG_INTR_TEST_OFFSET = 6'h 8;
  parameter logic [5:0] CSRNG_CS_REGEN_OFFSET = 6'h c;
  parameter logic [5:0] CSRNG_CS_CTRL_OFFSET = 6'h 10;
  parameter logic [5:0] CSRNG_CS_SUM_STS_OFFSET = 6'h 14;
  parameter logic [5:0] CSRNG_CS_CMD_REQ_OFFSET = 6'h 18;
  parameter logic [5:0] CSRNG_CS_CMD_STS_OFFSET = 6'h 1c;
  parameter logic [5:0] CSRNG_CS_GENBITS_VLD_OFFSET = 6'h 20;
  parameter logic [5:0] CSRNG_CS_GENBITS_OFFSET = 6'h 24;


  // Register Index
  typedef enum int {
    CSRNG_INTR_STATE,
    CSRNG_INTR_ENABLE,
    CSRNG_INTR_TEST,
    CSRNG_CS_REGEN,
    CSRNG_CS_CTRL,
    CSRNG_CS_SUM_STS,
    CSRNG_CS_CMD_REQ,
    CSRNG_CS_CMD_STS,
    CSRNG_CS_GENBITS_VLD,
    CSRNG_CS_GENBITS
  } csrng_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CSRNG_PERMIT [10] = '{
    4'b 0001, // index[0] CSRNG_INTR_STATE
    4'b 0001, // index[1] CSRNG_INTR_ENABLE
    4'b 0001, // index[2] CSRNG_INTR_TEST
    4'b 0001, // index[3] CSRNG_CS_REGEN
    4'b 0111, // index[4] CSRNG_CS_CTRL
    4'b 1111, // index[5] CSRNG_CS_SUM_STS
    4'b 1111, // index[6] CSRNG_CS_CMD_REQ
    4'b 0001, // index[7] CSRNG_CS_CMD_STS
    4'b 0001, // index[8] CSRNG_CS_GENBITS_VLD
    4'b 1111  // index[9] CSRNG_CS_GENBITS
  };
endpackage

