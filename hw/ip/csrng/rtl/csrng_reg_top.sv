// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module csrng_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output csrng_reg_pkg::csrng_reg2hw_t reg2hw, // Write
  input  csrng_reg_pkg::csrng_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import csrng_reg_pkg::* ;

  localparam int AW = 6;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_cs_cmd_req_done_qs;
  logic intr_state_cs_cmd_req_done_wd;
  logic intr_state_cs_cmd_req_done_we;
  logic intr_state_cs_fifo_err_qs;
  logic intr_state_cs_fifo_err_wd;
  logic intr_state_cs_fifo_err_we;
  logic intr_enable_cs_cmd_req_done_qs;
  logic intr_enable_cs_cmd_req_done_wd;
  logic intr_enable_cs_cmd_req_done_we;
  logic intr_enable_cs_fifo_err_qs;
  logic intr_enable_cs_fifo_err_wd;
  logic intr_enable_cs_fifo_err_we;
  logic intr_test_cs_cmd_req_done_wd;
  logic intr_test_cs_cmd_req_done_we;
  logic intr_test_cs_fifo_err_wd;
  logic intr_test_cs_fifo_err_we;
  logic cs_regen_qs;
  logic cs_regen_wd;
  logic cs_regen_we;
  logic cs_ctrl_cs_enable_qs;
  logic cs_ctrl_cs_enable_wd;
  logic cs_ctrl_cs_enable_we;
  logic cs_ctrl_aes_cipher_enable_qs;
  logic cs_ctrl_aes_cipher_enable_wd;
  logic cs_ctrl_aes_cipher_enable_we;
  logic [3:0] cs_ctrl_fifo_depth_sts_sel_qs;
  logic [3:0] cs_ctrl_fifo_depth_sts_sel_wd;
  logic cs_ctrl_fifo_depth_sts_sel_we;
  logic [23:0] cs_sum_sts_fifo_depth_sts_qs;
  logic [23:0] cs_sum_sts_fifo_depth_sts_wd;
  logic cs_sum_sts_fifo_depth_sts_we;
  logic cs_sum_sts_diag_qs;
  logic cs_sum_sts_diag_wd;
  logic cs_sum_sts_diag_we;
  logic [31:0] cs_cmd_req_wd;
  logic cs_cmd_req_we;
  logic cs_cmd_sts_cmd_rdy_qs;
  logic cs_cmd_sts_cmd_rdy_wd;
  logic cs_cmd_sts_cmd_rdy_we;
  logic cs_cmd_sts_cmd_ack_qs;
  logic cs_cmd_sts_cmd_ack_wd;
  logic cs_cmd_sts_cmd_ack_we;
  logic [1:0] cs_cmd_sts_cmd_sts_qs;
  logic [1:0] cs_cmd_sts_cmd_sts_wd;
  logic cs_cmd_sts_cmd_sts_we;
  logic cs_genbits_vld_qs;
  logic cs_genbits_vld_re;
  logic [31:0] cs_genbits_qs;
  logic cs_genbits_re;

  // Register instances
  // R[intr_state]: V(False)

  //   F[cs_cmd_req_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_cs_cmd_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_cs_cmd_req_done_we),
    .wd     (intr_state_cs_cmd_req_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.cs_cmd_req_done.de),
    .d      (hw2reg.intr_state.cs_cmd_req_done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.cs_cmd_req_done.q ),

    // to register interface (read)
    .qs     (intr_state_cs_cmd_req_done_qs)
  );


  //   F[cs_fifo_err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_cs_fifo_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_cs_fifo_err_we),
    .wd     (intr_state_cs_fifo_err_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.cs_fifo_err.de),
    .d      (hw2reg.intr_state.cs_fifo_err.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.cs_fifo_err.q ),

    // to register interface (read)
    .qs     (intr_state_cs_fifo_err_qs)
  );


  // R[intr_enable]: V(False)

  //   F[cs_cmd_req_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_cs_cmd_req_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_cs_cmd_req_done_we),
    .wd     (intr_enable_cs_cmd_req_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.cs_cmd_req_done.q ),

    // to register interface (read)
    .qs     (intr_enable_cs_cmd_req_done_qs)
  );


  //   F[cs_fifo_err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_cs_fifo_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_cs_fifo_err_we),
    .wd     (intr_enable_cs_fifo_err_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.cs_fifo_err.q ),

    // to register interface (read)
    .qs     (intr_enable_cs_fifo_err_qs)
  );


  // R[intr_test]: V(True)

  //   F[cs_cmd_req_done]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_cs_cmd_req_done (
    .re     (1'b0),
    .we     (intr_test_cs_cmd_req_done_we),
    .wd     (intr_test_cs_cmd_req_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.cs_cmd_req_done.qe),
    .q      (reg2hw.intr_test.cs_cmd_req_done.q ),
    .qs     ()
  );


  //   F[cs_fifo_err]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_cs_fifo_err (
    .re     (1'b0),
    .we     (intr_test_cs_fifo_err_we),
    .wd     (intr_test_cs_fifo_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.cs_fifo_err.qe),
    .q      (reg2hw.intr_test.cs_fifo_err.q ),
    .qs     ()
  );


  // R[cs_regen]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h1)
  ) u_cs_regen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_regen_we),
    .wd     (cs_regen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_regen.q ),

    // to register interface (read)
    .qs     (cs_regen_qs)
  );


  // R[cs_ctrl]: V(False)

  //   F[cs_enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_ctrl_cs_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_ctrl_cs_enable_we),
    .wd     (cs_ctrl_cs_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_ctrl.cs_enable.q ),

    // to register interface (read)
    .qs     (cs_ctrl_cs_enable_qs)
  );


  //   F[aes_cipher_enable]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_ctrl_aes_cipher_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_ctrl_aes_cipher_enable_we),
    .wd     (cs_ctrl_aes_cipher_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_ctrl.aes_cipher_enable.q ),

    // to register interface (read)
    .qs     (cs_ctrl_aes_cipher_enable_qs)
  );


  //   F[fifo_depth_sts_sel]: 19:16
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_cs_ctrl_fifo_depth_sts_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_ctrl_fifo_depth_sts_sel_we),
    .wd     (cs_ctrl_fifo_depth_sts_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cs_ctrl.fifo_depth_sts_sel.q ),

    // to register interface (read)
    .qs     (cs_ctrl_fifo_depth_sts_sel_qs)
  );


  // R[cs_sum_sts]: V(False)

  //   F[fifo_depth_sts]: 23:0
  prim_subreg #(
    .DW      (24),
    .SWACCESS("RW"),
    .RESVAL  (24'h0)
  ) u_cs_sum_sts_fifo_depth_sts (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_sum_sts_fifo_depth_sts_we),
    .wd     (cs_sum_sts_fifo_depth_sts_wd),

    // from internal hardware
    .de     (hw2reg.cs_sum_sts.fifo_depth_sts.de),
    .d      (hw2reg.cs_sum_sts.fifo_depth_sts.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_sum_sts_fifo_depth_sts_qs)
  );


  //   F[diag]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_sum_sts_diag (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_sum_sts_diag_we),
    .wd     (cs_sum_sts_diag_wd),

    // from internal hardware
    .de     (hw2reg.cs_sum_sts.diag.de),
    .d      (hw2reg.cs_sum_sts.diag.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_sum_sts_diag_qs)
  );


  // R[cs_cmd_req]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_cs_cmd_req (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cs_cmd_req_we & cs_regen_qs),
    .wd     (cs_cmd_req_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.cs_cmd_req.qe),
    .q      (reg2hw.cs_cmd_req.q ),

    .qs     ()
  );


  // R[cs_cmd_sts]: V(False)

  //   F[cmd_rdy]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_cmd_sts_cmd_rdy (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_cmd_sts_cmd_rdy_we),
    .wd     (cs_cmd_sts_cmd_rdy_wd),

    // from internal hardware
    .de     (hw2reg.cs_cmd_sts.cmd_rdy.de),
    .d      (hw2reg.cs_cmd_sts.cmd_rdy.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_cmd_sts_cmd_rdy_qs)
  );


  //   F[cmd_ack]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cs_cmd_sts_cmd_ack (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_cmd_sts_cmd_ack_we),
    .wd     (cs_cmd_sts_cmd_ack_wd),

    // from internal hardware
    .de     (hw2reg.cs_cmd_sts.cmd_ack.de),
    .d      (hw2reg.cs_cmd_sts.cmd_ack.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_cmd_sts_cmd_ack_qs)
  );


  //   F[cmd_sts]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cs_cmd_sts_cmd_sts (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cs_cmd_sts_cmd_sts_we),
    .wd     (cs_cmd_sts_cmd_sts_wd),

    // from internal hardware
    .de     (hw2reg.cs_cmd_sts.cmd_sts.de),
    .d      (hw2reg.cs_cmd_sts.cmd_sts.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (cs_cmd_sts_cmd_sts_qs)
  );


  // R[cs_genbits_vld]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_cs_genbits_vld (
    .re     (cs_genbits_vld_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_genbits_vld.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cs_genbits_vld_qs)
  );


  // R[cs_genbits]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_cs_genbits (
    .re     (cs_genbits_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cs_genbits.d),
    .qre    (reg2hw.cs_genbits.re),
    .qe     (),
    .q      (reg2hw.cs_genbits.q ),
    .qs     (cs_genbits_qs)
  );




  logic [9:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == CSRNG_INTR_STATE_OFFSET);
    addr_hit[1] = (reg_addr == CSRNG_INTR_ENABLE_OFFSET);
    addr_hit[2] = (reg_addr == CSRNG_INTR_TEST_OFFSET);
    addr_hit[3] = (reg_addr == CSRNG_CS_REGEN_OFFSET);
    addr_hit[4] = (reg_addr == CSRNG_CS_CTRL_OFFSET);
    addr_hit[5] = (reg_addr == CSRNG_CS_SUM_STS_OFFSET);
    addr_hit[6] = (reg_addr == CSRNG_CS_CMD_REQ_OFFSET);
    addr_hit[7] = (reg_addr == CSRNG_CS_CMD_STS_OFFSET);
    addr_hit[8] = (reg_addr == CSRNG_CS_GENBITS_VLD_OFFSET);
    addr_hit[9] = (reg_addr == CSRNG_CS_GENBITS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (CSRNG_PERMIT[0] != (CSRNG_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (CSRNG_PERMIT[1] != (CSRNG_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[2] && reg_we && (CSRNG_PERMIT[2] != (CSRNG_PERMIT[2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[3] && reg_we && (CSRNG_PERMIT[3] != (CSRNG_PERMIT[3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[4] && reg_we && (CSRNG_PERMIT[4] != (CSRNG_PERMIT[4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[5] && reg_we && (CSRNG_PERMIT[5] != (CSRNG_PERMIT[5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[6] && reg_we && (CSRNG_PERMIT[6] != (CSRNG_PERMIT[6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[7] && reg_we && (CSRNG_PERMIT[7] != (CSRNG_PERMIT[7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[8] && reg_we && (CSRNG_PERMIT[8] != (CSRNG_PERMIT[8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[9] && reg_we && (CSRNG_PERMIT[9] != (CSRNG_PERMIT[9] & reg_be))) wr_err = 1'b1 ;
  end

  assign intr_state_cs_cmd_req_done_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_cs_cmd_req_done_wd = reg_wdata[0];

  assign intr_state_cs_fifo_err_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_cs_fifo_err_wd = reg_wdata[1];

  assign intr_enable_cs_cmd_req_done_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_cs_cmd_req_done_wd = reg_wdata[0];

  assign intr_enable_cs_fifo_err_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_cs_fifo_err_wd = reg_wdata[1];

  assign intr_test_cs_cmd_req_done_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_cs_cmd_req_done_wd = reg_wdata[0];

  assign intr_test_cs_fifo_err_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_cs_fifo_err_wd = reg_wdata[1];

  assign cs_regen_we = addr_hit[3] & reg_we & ~wr_err;
  assign cs_regen_wd = reg_wdata[0];

  assign cs_ctrl_cs_enable_we = addr_hit[4] & reg_we & ~wr_err;
  assign cs_ctrl_cs_enable_wd = reg_wdata[0];

  assign cs_ctrl_aes_cipher_enable_we = addr_hit[4] & reg_we & ~wr_err;
  assign cs_ctrl_aes_cipher_enable_wd = reg_wdata[1];

  assign cs_ctrl_fifo_depth_sts_sel_we = addr_hit[4] & reg_we & ~wr_err;
  assign cs_ctrl_fifo_depth_sts_sel_wd = reg_wdata[19:16];

  assign cs_sum_sts_fifo_depth_sts_we = addr_hit[5] & reg_we & ~wr_err;
  assign cs_sum_sts_fifo_depth_sts_wd = reg_wdata[23:0];

  assign cs_sum_sts_diag_we = addr_hit[5] & reg_we & ~wr_err;
  assign cs_sum_sts_diag_wd = reg_wdata[31];

  assign cs_cmd_req_we = addr_hit[6] & reg_we & ~wr_err;
  assign cs_cmd_req_wd = reg_wdata[31:0];

  assign cs_cmd_sts_cmd_rdy_we = addr_hit[7] & reg_we & ~wr_err;
  assign cs_cmd_sts_cmd_rdy_wd = reg_wdata[0];

  assign cs_cmd_sts_cmd_ack_we = addr_hit[7] & reg_we & ~wr_err;
  assign cs_cmd_sts_cmd_ack_wd = reg_wdata[1];

  assign cs_cmd_sts_cmd_sts_we = addr_hit[7] & reg_we & ~wr_err;
  assign cs_cmd_sts_cmd_sts_wd = reg_wdata[5:4];

  assign cs_genbits_vld_re = addr_hit[8] && reg_re;

  assign cs_genbits_re = addr_hit[9] && reg_re;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_cs_cmd_req_done_qs;
        reg_rdata_next[1] = intr_state_cs_fifo_err_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_cs_cmd_req_done_qs;
        reg_rdata_next[1] = intr_enable_cs_fifo_err_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = cs_regen_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = cs_ctrl_cs_enable_qs;
        reg_rdata_next[1] = cs_ctrl_aes_cipher_enable_qs;
        reg_rdata_next[19:16] = cs_ctrl_fifo_depth_sts_sel_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[23:0] = cs_sum_sts_fifo_depth_sts_qs;
        reg_rdata_next[31] = cs_sum_sts_diag_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = cs_cmd_sts_cmd_rdy_qs;
        reg_rdata_next[1] = cs_cmd_sts_cmd_ack_qs;
        reg_rdata_next[5:4] = cs_cmd_sts_cmd_sts_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = cs_genbits_vld_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = cs_genbits_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)

endmodule
