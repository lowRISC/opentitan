// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Security countermeasures testplan extracted from the IP Hjson using reggen.
//
// This testplan is auto-generated only the first time it is created. This is
// because this testplan needs to be hand-editable. It is possible that these
// testpoints can go out of date if the spec is updated with new
// countermeasures. When `reggen` is invoked when this testplan already exists,
// It checks if the list of testpoints is up-to-date and enforces the user to
// make further manual updates.
//
// These countermeasures and their descriptions can be found here:
// .../otbn/data/otbn.hjson
//
// It is possible that the testing of some of these countermeasures may already
// be covered as a testpoint in a different testplan. This duplication is ok -
// the test would have likely already been developed. We simply map those tests
// to the testpoints below using the `tests` key.
//
// Please ensure that this testplan is imported in:
// .../otbn/data/otbn_testplan.hjson
{
  testpoints: [
    {
      name: sec_cm_mem_scramble
      desc: "Verify the countermeasure(s) MEM.SCRAMBLE."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_data_mem_integrity
      desc: "Verify the countermeasure(s) DATA.MEM.INTEGRITY."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_instruction_mem_integrity
      desc: "Verify the countermeasure(s) INSTRUCTION.MEM.INTEGRITY."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_bus_integrity
      desc: "Verify the countermeasure(s) BUS.INTEGRITY."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_controller_fsm_global_esc
      desc: "Verify the countermeasure(s) CONTROLLER.FSM.GLOBAL_ESC."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_controller_fsm_local_esc
      desc: "Verify the countermeasure(s) CONTROLLER.FSM.LOCAL_ESC."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_controller_fsm_sparse
      desc: "Verify the countermeasure(s) CONTROLLER.FSM.SPARSE."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_scramble_key_sideload
      desc: "Verify the countermeasure(s) SCRAMBLE.KEY.SIDELOAD."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_scramble_ctrl_fsm_local_esc
      desc: "Verify the countermeasure(s) SCRAMBLE_CTRL.FSM.LOCAL_ESC."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_scramble_ctrl_fsm_sparse
      desc: "Verify the countermeasure(s) SCRAMBLE_CTRL.FSM.SPARSE."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_start_stop_ctrl_fsm_global_esc
      desc: "Verify the countermeasure(s) START_STOP_CTRL.FSM.GLOBAL_ESC."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_start_stop_ctrl_fsm_local_esc
      desc: "Verify the countermeasure(s) START_STOP_CTRL.FSM.LOCAL_ESC."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_start_stop_ctrl_fsm_sparse
      desc: "Verify the countermeasure(s) START_STOP_CTRL.FSM.SPARSE."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_data_reg_sw_sca
      desc: "Verify the countermeasure(s) DATA_REG_SW.SCA."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_ctrl_redun
      desc: "Verify the countermeasure(s) CTRL.REDUN."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_pc_ctrl_flow_redun
      desc: "Verify the countermeasure(s) PC.CTRL_FLOW.REDUN."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_rnd_bus_consistency
      desc: "Verify the countermeasure(s) RND.BUS.CONSISTENCY."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_rnd_rng_digest
      desc: "Verify the countermeasure(s) RND.RNG.DIGEST."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_rf_base_data_reg_sw_integrity
      desc: "Verify the countermeasure(s) RF_BASE.DATA_REG_SW.INTEGRITY."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_rf_base_data_reg_sw_glitch_detect
      desc: "Verify the countermeasure(s) RF_BASE.DATA_REG_SW.GLITCH_DETECT."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_stack_wr_ptr_ctr_redun
      desc: "Verify the countermeasure(s) STACK_WR_PTR.CTR.REDUN."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_stack_wr_ptr_ctr_glitch_detect
      desc: "Verify the countermeasure(s) STACK_WR_PTR.CTR.GLITCH_DETECT."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_rf_bignum_data_reg_sw_integrity
      desc: "Verify the countermeasure(s) RF_BIGNUM.DATA_REG_SW.INTEGRITY."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_rf_bignum_data_reg_sw_glitch_detect
      desc: "Verify the countermeasure(s) RF_BIGNUM.DATA_REG_SW.GLITCH_DETECT."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_loop_stack_ctr_redun
      desc: "Verify the countermeasure(s) LOOP_STACK.CTR.REDUN."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_loop_stack_addr_integrity
      desc: "Verify the countermeasure(s) LOOP_STACK.ADDR.INTEGRITY."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_call_stack_addr_integrity
      desc: "Verify the countermeasure(s) CALL_STACK.ADDR.INTEGRITY."
      milestone: V2S
      tests: []
    }
    {
      name: sec_cm_start_stop_ctrl_state_consistency
      desc: "Verify the countermeasure(s) START_STOP_CTRL.STATE.CONSISTENCY."
      milestone: V2S
      tests: []
    }
  ]
}
