// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// This has some assertions that check the inputs from rstmgr react according to
// the pwrmgr outputs. The rstmgr inputs are generated by the base sequences, but
// these assertions will also be useful at full chip level.
interface pwrmgr_rstmgr_if (
  input logic clk_i,
  input logic rst_ni,
  // The outputs from pwrmgr.
  input logic [pwrmgr_pkg::PowerDomains-1:0] rst_lc_req,
  input logic [pwrmgr_pkg::PowerDomains-1:0] rst_sys_req,
  // The inputs from rstmgr.
  input logic [pwrmgr_pkg::PowerDomains-1:0] rst_lc_src_n,
  input logic [pwrmgr_pkg::PowerDomains-1:0] rst_sys_src_n
);

  localparam int MIN_WAIT_CYCLES = 1;
  localparam int MAX_WAIT_CYCLES = 24;

  bit disable_sva;
  bit reset_or_disable;

  always_comb reset_or_disable = !rst_ni || disable_sva;

  // Lc handshake.
  for (genvar i = 0; i < pwrmgr_pkg::PowerDomains; ++i) begin : gen_assertions_per_power_domains
    `ASSERT(LcHandshakeOn_A, rst_lc_req[i] |-> ##[MIN_WAIT_CYCLES:MAX_WAIT_CYCLES] !rst_lc_src_n[i],
            clk_i, reset_or_disable)
    `ASSERT(LcHandshakeOff_A,
            !rst_lc_req[i] |-> ##[MIN_WAIT_CYCLES:MAX_WAIT_CYCLES] rst_lc_src_n[i], clk_i,
            reset_or_disable)
    `ASSERT(SysHandshakeOn_A,
            rst_sys_req[i] |-> ##[MIN_WAIT_CYCLES:MAX_WAIT_CYCLES] !rst_sys_src_n[i], clk_i,
            reset_or_disable)
    `ASSERT(SysHandshakeOff_A,
            !rst_sys_req[i] |-> ##[MIN_WAIT_CYCLES:MAX_WAIT_CYCLES] rst_sys_src_n[i], clk_i,
            reset_or_disable)
  end
endinterface
