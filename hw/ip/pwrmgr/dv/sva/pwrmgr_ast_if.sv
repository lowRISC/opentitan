// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// This has some assertions that check the inputs from ast react according to
// the pwrmgr outputs. The ast inputs are generated by the base sequences, but
// these assertions will also be useful at full chip level.
interface pwrmgr_ast_if (
  input logic clk_i,
  input logic rst_ni,
  // The output enables.
  input logic core_clk_en,
  input logic io_clk_en,
  input logic usb_clk_en,
  // The input valids.
  input logic core_clk_val,
  input logic io_clk_val,
  input logic usb_clk_val,
  // The main power control.
  input logic main_pd_n,
  input logic main_pok
);

  localparam int MIN_CLK_WAIT_CYCLES = 0;
  localparam int MIN_PDN_WAIT_CYCLES = 1;
  localparam int MAX_WAIT_CYCLES = 30;

  bit disable_sva;
  bit reset_or_disable;

  always_comb reset_or_disable = !rst_ni || disable_sva;

  // Clock enable-valid.
  `ASSERT(CoreClkHandshakeOn_A,
          core_clk_en |-> ##[MIN_CLK_WAIT_CYCLES:MAX_WAIT_CYCLES] core_clk_val, clk_i,
          reset_or_disable)
  `ASSERT(CoreClkHandshakeOff_A,
          !core_clk_en |-> ##[MIN_CLK_WAIT_CYCLES:MAX_WAIT_CYCLES] !core_clk_val, clk_i,
          reset_or_disable)

  `ASSERT(IoClkHandshakeOn_A, io_clk_en |-> ##[MIN_CLK_WAIT_CYCLES:MAX_WAIT_CYCLES] io_clk_val,
          clk_i, reset_or_disable)
  `ASSERT(IoClkHandshakeOff_A, !io_clk_en |-> ##[MIN_CLK_WAIT_CYCLES:MAX_WAIT_CYCLES] !io_clk_val,
          clk_i, reset_or_disable)

  `ASSERT(UsbClkHandshakeOn_A, usb_clk_en |-> ##[MIN_CLK_WAIT_CYCLES:MAX_WAIT_CYCLES] usb_clk_val,
          clk_i, reset_or_disable)
  `ASSERT(UsbClkHandshakeOff_A,
          !usb_clk_en |-> ##[MIN_CLK_WAIT_CYCLES:MAX_WAIT_CYCLES] !usb_clk_val, clk_i,
          reset_or_disable)

  // Main pd-pok
  `ASSERT(MainPdHandshakeOn_A, main_pd_n |-> ##[MIN_PDN_WAIT_CYCLES:MAX_WAIT_CYCLES] main_pok,
          clk_i, reset_or_disable)
  `ASSERT(MainPdHandshakeOff_A, !main_pd_n |-> ##[MIN_PDN_WAIT_CYCLES:MAX_WAIT_CYCLES] !main_pok,
          clk_i, reset_or_disable)
endinterface
