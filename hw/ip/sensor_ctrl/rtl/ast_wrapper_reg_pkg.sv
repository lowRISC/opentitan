// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package ast_wrapper_reg_pkg;

  // Param list
  parameter int NumAlerts = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    logic        q;
  } ast_wrapper_reg2hw_intr_state_reg_t;

  typedef struct packed {
    logic        q;
  } ast_wrapper_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } ast_wrapper_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic        q;
  } ast_wrapper_reg2hw_ack_mode_mreg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } ast_wrapper_reg2hw_alert_state_mreg_t;


  typedef struct packed {
    logic        d;
    logic        de;
  } ast_wrapper_hw2reg_intr_state_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } ast_wrapper_hw2reg_alert_state_mreg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } ast_wrapper_hw2reg_status_reg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    ast_wrapper_reg2hw_intr_state_reg_t intr_state; // [24:24]
    ast_wrapper_reg2hw_intr_enable_reg_t intr_enable; // [23:23]
    ast_wrapper_reg2hw_intr_test_reg_t intr_test; // [22:21]
    ast_wrapper_reg2hw_ack_mode_mreg_t [6:0] ack_mode; // [20:14]
    ast_wrapper_reg2hw_alert_state_mreg_t [6:0] alert_state; // [13:0]
  } ast_wrapper_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    ast_wrapper_hw2reg_intr_state_reg_t intr_state; // [17:17]
    ast_wrapper_hw2reg_alert_state_mreg_t [6:0] alert_state; // [16:3]
    ast_wrapper_hw2reg_status_reg_t status; // [2:3]
  } ast_wrapper_hw2reg_t;

  // Register Address
  parameter logic [12:0] AST_WRAPPER_INTR_STATE_OFFSET = 13'h 0;
  parameter logic [12:0] AST_WRAPPER_INTR_ENABLE_OFFSET = 13'h 4;
  parameter logic [12:0] AST_WRAPPER_INTR_TEST_OFFSET = 13'h 8;
  parameter logic [12:0] AST_WRAPPER_CFG_REGWEN_OFFSET = 13'h c;
  parameter logic [12:0] AST_WRAPPER_ACK_MODE_OFFSET = 13'h 10;
  parameter logic [12:0] AST_WRAPPER_ALERT_STATE_OFFSET = 13'h 14;
  parameter logic [12:0] AST_WRAPPER_STATUS_OFFSET = 13'h 18;

  // Window parameter
  parameter logic [12:0] AST_WRAPPER_AST_INTF_OFFSET = 13'h 1000;
  parameter logic [12:0] AST_WRAPPER_AST_INTF_SIZE   = 13'h 400;

  // Register Index
  typedef enum int {
    AST_WRAPPER_INTR_STATE,
    AST_WRAPPER_INTR_ENABLE,
    AST_WRAPPER_INTR_TEST,
    AST_WRAPPER_CFG_REGWEN,
    AST_WRAPPER_ACK_MODE,
    AST_WRAPPER_ALERT_STATE,
    AST_WRAPPER_STATUS
  } ast_wrapper_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] AST_WRAPPER_PERMIT [7] = '{
    4'b 0001, // index[0] AST_WRAPPER_INTR_STATE
    4'b 0001, // index[1] AST_WRAPPER_INTR_ENABLE
    4'b 0001, // index[2] AST_WRAPPER_INTR_TEST
    4'b 0001, // index[3] AST_WRAPPER_CFG_REGWEN
    4'b 0001, // index[4] AST_WRAPPER_ACK_MODE
    4'b 0001, // index[5] AST_WRAPPER_ALERT_STATE
    4'b 0001  // index[6] AST_WRAPPER_STATUS
  };
endpackage

