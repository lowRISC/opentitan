// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module ascon_reg_top (
  input clk_i,
  input rst_ni,
  input rst_shadowed_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output ascon_reg_pkg::ascon_reg2hw_t reg2hw, // Write
  input  ascon_reg_pkg::ascon_hw2reg_t hw2reg, // Read

  output logic shadowed_storage_err_o,
  output logic shadowed_update_err_o,

  // Integrity check errors
  output logic intg_err_o
);

  import ascon_reg_pkg::* ;

  localparam int AW = 8;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [46:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(47)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic alert_test_we;
  logic alert_test_recov_ctrl_update_err_wd;
  logic alert_test_fatal_fault_wd;
  logic key_share0_0_we;
  logic [31:0] key_share0_0_wd;
  logic key_share0_1_we;
  logic [31:0] key_share0_1_wd;
  logic key_share0_2_we;
  logic [31:0] key_share0_2_wd;
  logic key_share0_3_we;
  logic [31:0] key_share0_3_wd;
  logic key_share1_0_we;
  logic [31:0] key_share1_0_wd;
  logic key_share1_1_we;
  logic [31:0] key_share1_1_wd;
  logic key_share1_2_we;
  logic [31:0] key_share1_2_wd;
  logic key_share1_3_we;
  logic [31:0] key_share1_3_wd;
  logic nonce_share0_0_we;
  logic [31:0] nonce_share0_0_wd;
  logic nonce_share0_1_we;
  logic [31:0] nonce_share0_1_wd;
  logic nonce_share0_2_we;
  logic [31:0] nonce_share0_2_wd;
  logic nonce_share0_3_we;
  logic [31:0] nonce_share0_3_wd;
  logic nonce_share1_0_we;
  logic [31:0] nonce_share1_0_wd;
  logic nonce_share1_1_we;
  logic [31:0] nonce_share1_1_wd;
  logic nonce_share1_2_we;
  logic [31:0] nonce_share1_2_wd;
  logic nonce_share1_3_we;
  logic [31:0] nonce_share1_3_wd;
  logic data_in_share0_0_we;
  logic [31:0] data_in_share0_0_wd;
  logic data_in_share0_1_we;
  logic [31:0] data_in_share0_1_wd;
  logic data_in_share0_2_we;
  logic [31:0] data_in_share0_2_wd;
  logic data_in_share0_3_we;
  logic [31:0] data_in_share0_3_wd;
  logic data_in_share1_0_we;
  logic [31:0] data_in_share1_0_wd;
  logic data_in_share1_1_we;
  logic [31:0] data_in_share1_1_wd;
  logic data_in_share1_2_we;
  logic [31:0] data_in_share1_2_wd;
  logic data_in_share1_3_we;
  logic [31:0] data_in_share1_3_wd;
  logic tag_in_0_we;
  logic [31:0] tag_in_0_wd;
  logic tag_in_1_we;
  logic [31:0] tag_in_1_wd;
  logic tag_in_2_we;
  logic [31:0] tag_in_2_wd;
  logic tag_in_3_we;
  logic [31:0] tag_in_3_wd;
  logic msg_out_0_re;
  logic [31:0] msg_out_0_qs;
  logic msg_out_1_re;
  logic [31:0] msg_out_1_qs;
  logic msg_out_2_re;
  logic [31:0] msg_out_2_qs;
  logic msg_out_3_re;
  logic [31:0] msg_out_3_qs;
  logic tag_out_0_re;
  logic [31:0] tag_out_0_qs;
  logic tag_out_1_re;
  logic [31:0] tag_out_1_qs;
  logic tag_out_2_re;
  logic [31:0] tag_out_2_qs;
  logic tag_out_3_re;
  logic [31:0] tag_out_3_qs;
  logic ctrl_shadowed_re;
  logic ctrl_shadowed_we;
  logic [2:0] ctrl_shadowed_operation_qs;
  logic [2:0] ctrl_shadowed_operation_wd;
  logic ctrl_shadowed_operation_storage_err;
  logic ctrl_shadowed_operation_update_err;
  logic ctrl_shadowed_sideload_key_qs;
  logic ctrl_shadowed_sideload_key_wd;
  logic ctrl_shadowed_sideload_key_storage_err;
  logic ctrl_shadowed_sideload_key_update_err;
  logic ctrl_shadowed_masked_ad_input_qs;
  logic ctrl_shadowed_masked_ad_input_wd;
  logic ctrl_shadowed_masked_ad_input_storage_err;
  logic ctrl_shadowed_masked_ad_input_update_err;
  logic ctrl_shadowed_masked_msg_input_qs;
  logic ctrl_shadowed_masked_msg_input_wd;
  logic ctrl_shadowed_masked_msg_input_storage_err;
  logic ctrl_shadowed_masked_msg_input_update_err;
  logic ctrl_shadowed_no_msg_qs;
  logic ctrl_shadowed_no_msg_wd;
  logic ctrl_shadowed_no_msg_storage_err;
  logic ctrl_shadowed_no_msg_update_err;
  logic ctrl_shadowed_no_ad_qs;
  logic ctrl_shadowed_no_ad_wd;
  logic ctrl_shadowed_no_ad_storage_err;
  logic ctrl_shadowed_no_ad_update_err;
  logic ctrl_aux_shadowed_re;
  logic ctrl_aux_shadowed_we;
  logic ctrl_aux_shadowed_manual_start_trigger_qs;
  logic ctrl_aux_shadowed_manual_start_trigger_wd;
  logic ctrl_aux_shadowed_manual_start_trigger_storage_err;
  logic ctrl_aux_shadowed_manual_start_trigger_update_err;
  logic ctrl_aux_shadowed_force_data_overwrite_qs;
  logic ctrl_aux_shadowed_force_data_overwrite_wd;
  logic ctrl_aux_shadowed_force_data_overwrite_storage_err;
  logic ctrl_aux_shadowed_force_data_overwrite_update_err;
  logic ctrl_aux_regwen_we;
  logic ctrl_aux_regwen_qs;
  logic ctrl_aux_regwen_wd;
  logic block_ctrl_shadowed_re;
  logic block_ctrl_shadowed_we;
  logic [11:0] block_ctrl_shadowed_data_type_start_qs;
  logic [11:0] block_ctrl_shadowed_data_type_start_wd;
  logic block_ctrl_shadowed_data_type_start_storage_err;
  logic block_ctrl_shadowed_data_type_start_update_err;
  logic [11:0] block_ctrl_shadowed_data_type_last_qs;
  logic [11:0] block_ctrl_shadowed_data_type_last_wd;
  logic block_ctrl_shadowed_data_type_last_storage_err;
  logic block_ctrl_shadowed_data_type_last_update_err;
  logic [4:0] block_ctrl_shadowed_valid_bytes_qs;
  logic [4:0] block_ctrl_shadowed_valid_bytes_wd;
  logic block_ctrl_shadowed_valid_bytes_storage_err;
  logic block_ctrl_shadowed_valid_bytes_update_err;
  logic trigger_we;
  logic trigger_start_qs;
  logic trigger_start_wd;
  logic trigger_wipe_qs;
  logic trigger_wipe_wd;
  logic status_idle_qs;
  logic status_stall_qs;
  logic status_wait_edn_qs;
  logic status_ascon_error_qs;
  logic status_alert_recov_ctrl_update_err_qs;
  logic status_alert_recov_ctrl_aux_update_err_qs;
  logic status_alert_recov_block_ctrl_update_err_qs;
  logic status_alert_fatal_fault_qs;
  logic [2:0] output_valid_data_type_qs;
  logic [1:0] output_valid_tag_comparison_valid_qs;
  logic fsm_state_re;
  logic [31:0] fsm_state_qs;
  logic fsm_state_regren_we;
  logic fsm_state_regren_qs;
  logic fsm_state_regren_wd;
  logic error_no_key_qs;
  logic error_no_nonce_qs;
  logic error_wrong_order_qs;
  logic error_flag_input_missmatch_qs;

  // Register instances
  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [1:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  //   F[recov_ctrl_update_err]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_recov_ctrl_update_err (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_recov_ctrl_update_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.recov_ctrl_update_err.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.recov_ctrl_update_err.qe = alert_test_qe;

  //   F[fatal_fault]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_fault (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_fault_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[1]),
    .q      (reg2hw.alert_test.fatal_fault.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_fault.qe = alert_test_qe;


  // Subregister 0 of Multireg key_share0
  // R[key_share0_0]: V(True)
  logic key_share0_0_qe;
  logic [0:0] key_share0_0_flds_we;
  assign key_share0_0_qe = &key_share0_0_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_key_share0_0 (
    .re     (1'b0),
    .we     (key_share0_0_we),
    .wd     (key_share0_0_wd),
    .d      (hw2reg.key_share0[0].d),
    .qre    (),
    .qe     (key_share0_0_flds_we[0]),
    .q      (reg2hw.key_share0[0].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.key_share0[0].qe = key_share0_0_qe;


  // Subregister 1 of Multireg key_share0
  // R[key_share0_1]: V(True)
  logic key_share0_1_qe;
  logic [0:0] key_share0_1_flds_we;
  assign key_share0_1_qe = &key_share0_1_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_key_share0_1 (
    .re     (1'b0),
    .we     (key_share0_1_we),
    .wd     (key_share0_1_wd),
    .d      (hw2reg.key_share0[1].d),
    .qre    (),
    .qe     (key_share0_1_flds_we[0]),
    .q      (reg2hw.key_share0[1].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.key_share0[1].qe = key_share0_1_qe;


  // Subregister 2 of Multireg key_share0
  // R[key_share0_2]: V(True)
  logic key_share0_2_qe;
  logic [0:0] key_share0_2_flds_we;
  assign key_share0_2_qe = &key_share0_2_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_key_share0_2 (
    .re     (1'b0),
    .we     (key_share0_2_we),
    .wd     (key_share0_2_wd),
    .d      (hw2reg.key_share0[2].d),
    .qre    (),
    .qe     (key_share0_2_flds_we[0]),
    .q      (reg2hw.key_share0[2].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.key_share0[2].qe = key_share0_2_qe;


  // Subregister 3 of Multireg key_share0
  // R[key_share0_3]: V(True)
  logic key_share0_3_qe;
  logic [0:0] key_share0_3_flds_we;
  assign key_share0_3_qe = &key_share0_3_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_key_share0_3 (
    .re     (1'b0),
    .we     (key_share0_3_we),
    .wd     (key_share0_3_wd),
    .d      (hw2reg.key_share0[3].d),
    .qre    (),
    .qe     (key_share0_3_flds_we[0]),
    .q      (reg2hw.key_share0[3].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.key_share0[3].qe = key_share0_3_qe;


  // Subregister 0 of Multireg key_share1
  // R[key_share1_0]: V(True)
  logic key_share1_0_qe;
  logic [0:0] key_share1_0_flds_we;
  assign key_share1_0_qe = &key_share1_0_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_key_share1_0 (
    .re     (1'b0),
    .we     (key_share1_0_we),
    .wd     (key_share1_0_wd),
    .d      (hw2reg.key_share1[0].d),
    .qre    (),
    .qe     (key_share1_0_flds_we[0]),
    .q      (reg2hw.key_share1[0].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.key_share1[0].qe = key_share1_0_qe;


  // Subregister 1 of Multireg key_share1
  // R[key_share1_1]: V(True)
  logic key_share1_1_qe;
  logic [0:0] key_share1_1_flds_we;
  assign key_share1_1_qe = &key_share1_1_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_key_share1_1 (
    .re     (1'b0),
    .we     (key_share1_1_we),
    .wd     (key_share1_1_wd),
    .d      (hw2reg.key_share1[1].d),
    .qre    (),
    .qe     (key_share1_1_flds_we[0]),
    .q      (reg2hw.key_share1[1].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.key_share1[1].qe = key_share1_1_qe;


  // Subregister 2 of Multireg key_share1
  // R[key_share1_2]: V(True)
  logic key_share1_2_qe;
  logic [0:0] key_share1_2_flds_we;
  assign key_share1_2_qe = &key_share1_2_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_key_share1_2 (
    .re     (1'b0),
    .we     (key_share1_2_we),
    .wd     (key_share1_2_wd),
    .d      (hw2reg.key_share1[2].d),
    .qre    (),
    .qe     (key_share1_2_flds_we[0]),
    .q      (reg2hw.key_share1[2].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.key_share1[2].qe = key_share1_2_qe;


  // Subregister 3 of Multireg key_share1
  // R[key_share1_3]: V(True)
  logic key_share1_3_qe;
  logic [0:0] key_share1_3_flds_we;
  assign key_share1_3_qe = &key_share1_3_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_key_share1_3 (
    .re     (1'b0),
    .we     (key_share1_3_we),
    .wd     (key_share1_3_wd),
    .d      (hw2reg.key_share1[3].d),
    .qre    (),
    .qe     (key_share1_3_flds_we[0]),
    .q      (reg2hw.key_share1[3].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.key_share1[3].qe = key_share1_3_qe;


  // Subregister 0 of Multireg nonce_share0
  // R[nonce_share0_0]: V(True)
  logic nonce_share0_0_qe;
  logic [0:0] nonce_share0_0_flds_we;
  assign nonce_share0_0_qe = &nonce_share0_0_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_nonce_share0_0 (
    .re     (1'b0),
    .we     (nonce_share0_0_we),
    .wd     (nonce_share0_0_wd),
    .d      (hw2reg.nonce_share0[0].d),
    .qre    (),
    .qe     (nonce_share0_0_flds_we[0]),
    .q      (reg2hw.nonce_share0[0].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.nonce_share0[0].qe = nonce_share0_0_qe;


  // Subregister 1 of Multireg nonce_share0
  // R[nonce_share0_1]: V(True)
  logic nonce_share0_1_qe;
  logic [0:0] nonce_share0_1_flds_we;
  assign nonce_share0_1_qe = &nonce_share0_1_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_nonce_share0_1 (
    .re     (1'b0),
    .we     (nonce_share0_1_we),
    .wd     (nonce_share0_1_wd),
    .d      (hw2reg.nonce_share0[1].d),
    .qre    (),
    .qe     (nonce_share0_1_flds_we[0]),
    .q      (reg2hw.nonce_share0[1].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.nonce_share0[1].qe = nonce_share0_1_qe;


  // Subregister 2 of Multireg nonce_share0
  // R[nonce_share0_2]: V(True)
  logic nonce_share0_2_qe;
  logic [0:0] nonce_share0_2_flds_we;
  assign nonce_share0_2_qe = &nonce_share0_2_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_nonce_share0_2 (
    .re     (1'b0),
    .we     (nonce_share0_2_we),
    .wd     (nonce_share0_2_wd),
    .d      (hw2reg.nonce_share0[2].d),
    .qre    (),
    .qe     (nonce_share0_2_flds_we[0]),
    .q      (reg2hw.nonce_share0[2].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.nonce_share0[2].qe = nonce_share0_2_qe;


  // Subregister 3 of Multireg nonce_share0
  // R[nonce_share0_3]: V(True)
  logic nonce_share0_3_qe;
  logic [0:0] nonce_share0_3_flds_we;
  assign nonce_share0_3_qe = &nonce_share0_3_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_nonce_share0_3 (
    .re     (1'b0),
    .we     (nonce_share0_3_we),
    .wd     (nonce_share0_3_wd),
    .d      (hw2reg.nonce_share0[3].d),
    .qre    (),
    .qe     (nonce_share0_3_flds_we[0]),
    .q      (reg2hw.nonce_share0[3].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.nonce_share0[3].qe = nonce_share0_3_qe;


  // Subregister 0 of Multireg nonce_share1
  // R[nonce_share1_0]: V(True)
  logic nonce_share1_0_qe;
  logic [0:0] nonce_share1_0_flds_we;
  assign nonce_share1_0_qe = &nonce_share1_0_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_nonce_share1_0 (
    .re     (1'b0),
    .we     (nonce_share1_0_we),
    .wd     (nonce_share1_0_wd),
    .d      (hw2reg.nonce_share1[0].d),
    .qre    (),
    .qe     (nonce_share1_0_flds_we[0]),
    .q      (reg2hw.nonce_share1[0].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.nonce_share1[0].qe = nonce_share1_0_qe;


  // Subregister 1 of Multireg nonce_share1
  // R[nonce_share1_1]: V(True)
  logic nonce_share1_1_qe;
  logic [0:0] nonce_share1_1_flds_we;
  assign nonce_share1_1_qe = &nonce_share1_1_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_nonce_share1_1 (
    .re     (1'b0),
    .we     (nonce_share1_1_we),
    .wd     (nonce_share1_1_wd),
    .d      (hw2reg.nonce_share1[1].d),
    .qre    (),
    .qe     (nonce_share1_1_flds_we[0]),
    .q      (reg2hw.nonce_share1[1].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.nonce_share1[1].qe = nonce_share1_1_qe;


  // Subregister 2 of Multireg nonce_share1
  // R[nonce_share1_2]: V(True)
  logic nonce_share1_2_qe;
  logic [0:0] nonce_share1_2_flds_we;
  assign nonce_share1_2_qe = &nonce_share1_2_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_nonce_share1_2 (
    .re     (1'b0),
    .we     (nonce_share1_2_we),
    .wd     (nonce_share1_2_wd),
    .d      (hw2reg.nonce_share1[2].d),
    .qre    (),
    .qe     (nonce_share1_2_flds_we[0]),
    .q      (reg2hw.nonce_share1[2].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.nonce_share1[2].qe = nonce_share1_2_qe;


  // Subregister 3 of Multireg nonce_share1
  // R[nonce_share1_3]: V(True)
  logic nonce_share1_3_qe;
  logic [0:0] nonce_share1_3_flds_we;
  assign nonce_share1_3_qe = &nonce_share1_3_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_nonce_share1_3 (
    .re     (1'b0),
    .we     (nonce_share1_3_we),
    .wd     (nonce_share1_3_wd),
    .d      (hw2reg.nonce_share1[3].d),
    .qre    (),
    .qe     (nonce_share1_3_flds_we[0]),
    .q      (reg2hw.nonce_share1[3].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.nonce_share1[3].qe = nonce_share1_3_qe;


  // Subregister 0 of Multireg data_in_share0
  // R[data_in_share0_0]: V(True)
  logic data_in_share0_0_qe;
  logic [0:0] data_in_share0_0_flds_we;
  assign data_in_share0_0_qe = &data_in_share0_0_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_data_in_share0_0 (
    .re     (1'b0),
    .we     (data_in_share0_0_we),
    .wd     (data_in_share0_0_wd),
    .d      (hw2reg.data_in_share0[0].d),
    .qre    (),
    .qe     (data_in_share0_0_flds_we[0]),
    .q      (reg2hw.data_in_share0[0].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.data_in_share0[0].qe = data_in_share0_0_qe;


  // Subregister 1 of Multireg data_in_share0
  // R[data_in_share0_1]: V(True)
  logic data_in_share0_1_qe;
  logic [0:0] data_in_share0_1_flds_we;
  assign data_in_share0_1_qe = &data_in_share0_1_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_data_in_share0_1 (
    .re     (1'b0),
    .we     (data_in_share0_1_we),
    .wd     (data_in_share0_1_wd),
    .d      (hw2reg.data_in_share0[1].d),
    .qre    (),
    .qe     (data_in_share0_1_flds_we[0]),
    .q      (reg2hw.data_in_share0[1].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.data_in_share0[1].qe = data_in_share0_1_qe;


  // Subregister 2 of Multireg data_in_share0
  // R[data_in_share0_2]: V(True)
  logic data_in_share0_2_qe;
  logic [0:0] data_in_share0_2_flds_we;
  assign data_in_share0_2_qe = &data_in_share0_2_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_data_in_share0_2 (
    .re     (1'b0),
    .we     (data_in_share0_2_we),
    .wd     (data_in_share0_2_wd),
    .d      (hw2reg.data_in_share0[2].d),
    .qre    (),
    .qe     (data_in_share0_2_flds_we[0]),
    .q      (reg2hw.data_in_share0[2].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.data_in_share0[2].qe = data_in_share0_2_qe;


  // Subregister 3 of Multireg data_in_share0
  // R[data_in_share0_3]: V(True)
  logic data_in_share0_3_qe;
  logic [0:0] data_in_share0_3_flds_we;
  assign data_in_share0_3_qe = &data_in_share0_3_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_data_in_share0_3 (
    .re     (1'b0),
    .we     (data_in_share0_3_we),
    .wd     (data_in_share0_3_wd),
    .d      (hw2reg.data_in_share0[3].d),
    .qre    (),
    .qe     (data_in_share0_3_flds_we[0]),
    .q      (reg2hw.data_in_share0[3].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.data_in_share0[3].qe = data_in_share0_3_qe;


  // Subregister 0 of Multireg data_in_share1
  // R[data_in_share1_0]: V(True)
  logic data_in_share1_0_qe;
  logic [0:0] data_in_share1_0_flds_we;
  assign data_in_share1_0_qe = &data_in_share1_0_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_data_in_share1_0 (
    .re     (1'b0),
    .we     (data_in_share1_0_we),
    .wd     (data_in_share1_0_wd),
    .d      (hw2reg.data_in_share1[0].d),
    .qre    (),
    .qe     (data_in_share1_0_flds_we[0]),
    .q      (reg2hw.data_in_share1[0].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.data_in_share1[0].qe = data_in_share1_0_qe;


  // Subregister 1 of Multireg data_in_share1
  // R[data_in_share1_1]: V(True)
  logic data_in_share1_1_qe;
  logic [0:0] data_in_share1_1_flds_we;
  assign data_in_share1_1_qe = &data_in_share1_1_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_data_in_share1_1 (
    .re     (1'b0),
    .we     (data_in_share1_1_we),
    .wd     (data_in_share1_1_wd),
    .d      (hw2reg.data_in_share1[1].d),
    .qre    (),
    .qe     (data_in_share1_1_flds_we[0]),
    .q      (reg2hw.data_in_share1[1].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.data_in_share1[1].qe = data_in_share1_1_qe;


  // Subregister 2 of Multireg data_in_share1
  // R[data_in_share1_2]: V(True)
  logic data_in_share1_2_qe;
  logic [0:0] data_in_share1_2_flds_we;
  assign data_in_share1_2_qe = &data_in_share1_2_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_data_in_share1_2 (
    .re     (1'b0),
    .we     (data_in_share1_2_we),
    .wd     (data_in_share1_2_wd),
    .d      (hw2reg.data_in_share1[2].d),
    .qre    (),
    .qe     (data_in_share1_2_flds_we[0]),
    .q      (reg2hw.data_in_share1[2].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.data_in_share1[2].qe = data_in_share1_2_qe;


  // Subregister 3 of Multireg data_in_share1
  // R[data_in_share1_3]: V(True)
  logic data_in_share1_3_qe;
  logic [0:0] data_in_share1_3_flds_we;
  assign data_in_share1_3_qe = &data_in_share1_3_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_data_in_share1_3 (
    .re     (1'b0),
    .we     (data_in_share1_3_we),
    .wd     (data_in_share1_3_wd),
    .d      (hw2reg.data_in_share1[3].d),
    .qre    (),
    .qe     (data_in_share1_3_flds_we[0]),
    .q      (reg2hw.data_in_share1[3].q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.data_in_share1[3].qe = data_in_share1_3_qe;


  // Subregister 0 of Multireg tag_in
  // R[tag_in_0]: V(False)
  logic tag_in_0_qe;
  logic [0:0] tag_in_0_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_tag_in0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&tag_in_0_flds_we),
    .q_o(tag_in_0_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessWO),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_tag_in_0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (tag_in_0_we),
    .wd     (tag_in_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (tag_in_0_flds_we[0]),
    .q      (reg2hw.tag_in[0].q),
    .ds     (),

    // to register interface (read)
    .qs     ()
  );
  assign reg2hw.tag_in[0].qe = tag_in_0_qe;


  // Subregister 1 of Multireg tag_in
  // R[tag_in_1]: V(False)
  logic tag_in_1_qe;
  logic [0:0] tag_in_1_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_tag_in1_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&tag_in_1_flds_we),
    .q_o(tag_in_1_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessWO),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_tag_in_1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (tag_in_1_we),
    .wd     (tag_in_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (tag_in_1_flds_we[0]),
    .q      (reg2hw.tag_in[1].q),
    .ds     (),

    // to register interface (read)
    .qs     ()
  );
  assign reg2hw.tag_in[1].qe = tag_in_1_qe;


  // Subregister 2 of Multireg tag_in
  // R[tag_in_2]: V(False)
  logic tag_in_2_qe;
  logic [0:0] tag_in_2_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_tag_in2_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&tag_in_2_flds_we),
    .q_o(tag_in_2_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessWO),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_tag_in_2 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (tag_in_2_we),
    .wd     (tag_in_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (tag_in_2_flds_we[0]),
    .q      (reg2hw.tag_in[2].q),
    .ds     (),

    // to register interface (read)
    .qs     ()
  );
  assign reg2hw.tag_in[2].qe = tag_in_2_qe;


  // Subregister 3 of Multireg tag_in
  // R[tag_in_3]: V(False)
  logic tag_in_3_qe;
  logic [0:0] tag_in_3_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_tag_in3_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&tag_in_3_flds_we),
    .q_o(tag_in_3_qe)
  );
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessWO),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_tag_in_3 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (tag_in_3_we),
    .wd     (tag_in_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (tag_in_3_flds_we[0]),
    .q      (reg2hw.tag_in[3].q),
    .ds     (),

    // to register interface (read)
    .qs     ()
  );
  assign reg2hw.tag_in[3].qe = tag_in_3_qe;


  // Subregister 0 of Multireg msg_out
  // R[msg_out_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_msg_out_0 (
    .re     (msg_out_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.msg_out[0].d),
    .qre    (reg2hw.msg_out[0].re),
    .qe     (),
    .q      (reg2hw.msg_out[0].q),
    .ds     (),
    .qs     (msg_out_0_qs)
  );


  // Subregister 1 of Multireg msg_out
  // R[msg_out_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_msg_out_1 (
    .re     (msg_out_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.msg_out[1].d),
    .qre    (reg2hw.msg_out[1].re),
    .qe     (),
    .q      (reg2hw.msg_out[1].q),
    .ds     (),
    .qs     (msg_out_1_qs)
  );


  // Subregister 2 of Multireg msg_out
  // R[msg_out_2]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_msg_out_2 (
    .re     (msg_out_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.msg_out[2].d),
    .qre    (reg2hw.msg_out[2].re),
    .qe     (),
    .q      (reg2hw.msg_out[2].q),
    .ds     (),
    .qs     (msg_out_2_qs)
  );


  // Subregister 3 of Multireg msg_out
  // R[msg_out_3]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_msg_out_3 (
    .re     (msg_out_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.msg_out[3].d),
    .qre    (reg2hw.msg_out[3].re),
    .qe     (),
    .q      (reg2hw.msg_out[3].q),
    .ds     (),
    .qs     (msg_out_3_qs)
  );


  // Subregister 0 of Multireg tag_out
  // R[tag_out_0]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_tag_out_0 (
    .re     (tag_out_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.tag_out[0].d),
    .qre    (reg2hw.tag_out[0].re),
    .qe     (),
    .q      (reg2hw.tag_out[0].q),
    .ds     (),
    .qs     (tag_out_0_qs)
  );


  // Subregister 1 of Multireg tag_out
  // R[tag_out_1]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_tag_out_1 (
    .re     (tag_out_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.tag_out[1].d),
    .qre    (reg2hw.tag_out[1].re),
    .qe     (),
    .q      (reg2hw.tag_out[1].q),
    .ds     (),
    .qs     (tag_out_1_qs)
  );


  // Subregister 2 of Multireg tag_out
  // R[tag_out_2]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_tag_out_2 (
    .re     (tag_out_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.tag_out[2].d),
    .qre    (reg2hw.tag_out[2].re),
    .qe     (),
    .q      (reg2hw.tag_out[2].q),
    .ds     (),
    .qs     (tag_out_2_qs)
  );


  // Subregister 3 of Multireg tag_out
  // R[tag_out_3]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_tag_out_3 (
    .re     (tag_out_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.tag_out[3].d),
    .qre    (reg2hw.tag_out[3].re),
    .qe     (),
    .q      (reg2hw.tag_out[3].q),
    .ds     (),
    .qs     (tag_out_3_qs)
  );


  // R[ctrl_shadowed]: V(False)
  logic ctrl_shadowed_qe;
  logic [5:0] ctrl_shadowed_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_ctrl_shadowed0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&ctrl_shadowed_flds_we),
    .q_o(ctrl_shadowed_qe)
  );
  //   F[operation]: 2:0
  prim_subreg_shadow #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0),
    .Mubi    (1'b0)
  ) u_ctrl_shadowed_operation (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ctrl_shadowed_re),
    .we     (ctrl_shadowed_we),
    .wd     (ctrl_shadowed_operation_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (ctrl_shadowed_flds_we[0]),
    .q      (reg2hw.ctrl_shadowed.operation.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_shadowed_operation_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ctrl_shadowed_operation_update_err),
    .err_storage (ctrl_shadowed_operation_storage_err)
  );
  assign reg2hw.ctrl_shadowed.operation.qe = ctrl_shadowed_qe;

  //   F[sideload_key]: 3:3
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_shadowed_sideload_key (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ctrl_shadowed_re),
    .we     (ctrl_shadowed_we),
    .wd     (ctrl_shadowed_sideload_key_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (ctrl_shadowed_flds_we[1]),
    .q      (reg2hw.ctrl_shadowed.sideload_key.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_shadowed_sideload_key_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ctrl_shadowed_sideload_key_update_err),
    .err_storage (ctrl_shadowed_sideload_key_storage_err)
  );
  assign reg2hw.ctrl_shadowed.sideload_key.qe = ctrl_shadowed_qe;

  //   F[masked_ad_input]: 4:4
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_shadowed_masked_ad_input (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ctrl_shadowed_re),
    .we     (ctrl_shadowed_we),
    .wd     (ctrl_shadowed_masked_ad_input_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (ctrl_shadowed_flds_we[2]),
    .q      (reg2hw.ctrl_shadowed.masked_ad_input.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_shadowed_masked_ad_input_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ctrl_shadowed_masked_ad_input_update_err),
    .err_storage (ctrl_shadowed_masked_ad_input_storage_err)
  );
  assign reg2hw.ctrl_shadowed.masked_ad_input.qe = ctrl_shadowed_qe;

  //   F[masked_msg_input]: 5:5
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_shadowed_masked_msg_input (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ctrl_shadowed_re),
    .we     (ctrl_shadowed_we),
    .wd     (ctrl_shadowed_masked_msg_input_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (ctrl_shadowed_flds_we[3]),
    .q      (reg2hw.ctrl_shadowed.masked_msg_input.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_shadowed_masked_msg_input_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ctrl_shadowed_masked_msg_input_update_err),
    .err_storage (ctrl_shadowed_masked_msg_input_storage_err)
  );
  assign reg2hw.ctrl_shadowed.masked_msg_input.qe = ctrl_shadowed_qe;

  //   F[no_msg]: 6:6
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_shadowed_no_msg (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ctrl_shadowed_re),
    .we     (ctrl_shadowed_we),
    .wd     (ctrl_shadowed_no_msg_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (ctrl_shadowed_flds_we[4]),
    .q      (reg2hw.ctrl_shadowed.no_msg.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_shadowed_no_msg_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ctrl_shadowed_no_msg_update_err),
    .err_storage (ctrl_shadowed_no_msg_storage_err)
  );
  assign reg2hw.ctrl_shadowed.no_msg.qe = ctrl_shadowed_qe;

  //   F[no_ad]: 7:7
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_shadowed_no_ad (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ctrl_shadowed_re),
    .we     (ctrl_shadowed_we),
    .wd     (ctrl_shadowed_no_ad_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (ctrl_shadowed_flds_we[5]),
    .q      (reg2hw.ctrl_shadowed.no_ad.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_shadowed_no_ad_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ctrl_shadowed_no_ad_update_err),
    .err_storage (ctrl_shadowed_no_ad_storage_err)
  );
  assign reg2hw.ctrl_shadowed.no_ad.qe = ctrl_shadowed_qe;


  // R[ctrl_aux_shadowed]: V(False)
  logic ctrl_aux_shadowed_qe;
  logic [1:0] ctrl_aux_shadowed_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_ctrl_aux_shadowed0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&ctrl_aux_shadowed_flds_we),
    .q_o(ctrl_aux_shadowed_qe)
  );
  //   F[manual_start_trigger]: 0:0
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_aux_shadowed_manual_start_trigger (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ctrl_aux_shadowed_re),
    .we     (ctrl_aux_shadowed_we),
    .wd     (ctrl_aux_shadowed_manual_start_trigger_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (ctrl_aux_shadowed_flds_we[0]),
    .q      (reg2hw.ctrl_aux_shadowed.manual_start_trigger.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_aux_shadowed_manual_start_trigger_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ctrl_aux_shadowed_manual_start_trigger_update_err),
    .err_storage (ctrl_aux_shadowed_manual_start_trigger_storage_err)
  );
  assign reg2hw.ctrl_aux_shadowed.manual_start_trigger.qe = ctrl_aux_shadowed_qe;

  //   F[force_data_overwrite]: 1:1
  prim_subreg_shadow #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_aux_shadowed_force_data_overwrite (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (ctrl_aux_shadowed_re),
    .we     (ctrl_aux_shadowed_we),
    .wd     (ctrl_aux_shadowed_force_data_overwrite_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (ctrl_aux_shadowed_flds_we[1]),
    .q      (reg2hw.ctrl_aux_shadowed.force_data_overwrite.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_aux_shadowed_force_data_overwrite_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (ctrl_aux_shadowed_force_data_overwrite_update_err),
    .err_storage (ctrl_aux_shadowed_force_data_overwrite_storage_err)
  );
  assign reg2hw.ctrl_aux_shadowed.force_data_overwrite.qe = ctrl_aux_shadowed_qe;


  // R[ctrl_aux_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_ctrl_aux_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_aux_regwen_we),
    .wd     (ctrl_aux_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_aux_regwen_qs)
  );


  // R[block_ctrl_shadowed]: V(False)
  logic block_ctrl_shadowed_qe;
  logic [2:0] block_ctrl_shadowed_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_block_ctrl_shadowed0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&block_ctrl_shadowed_flds_we),
    .q_o(block_ctrl_shadowed_qe)
  );
  //   F[data_type_start]: 11:0
  prim_subreg_shadow #(
    .DW      (12),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (12'h0),
    .Mubi    (1'b0)
  ) u_block_ctrl_shadowed_data_type_start (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (block_ctrl_shadowed_re),
    .we     (block_ctrl_shadowed_we),
    .wd     (block_ctrl_shadowed_data_type_start_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (block_ctrl_shadowed_flds_we[0]),
    .q      (reg2hw.block_ctrl_shadowed.data_type_start.q),
    .ds     (),

    // to register interface (read)
    .qs     (block_ctrl_shadowed_data_type_start_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (block_ctrl_shadowed_data_type_start_update_err),
    .err_storage (block_ctrl_shadowed_data_type_start_storage_err)
  );
  assign reg2hw.block_ctrl_shadowed.data_type_start.qe = block_ctrl_shadowed_qe;

  //   F[data_type_last]: 23:12
  prim_subreg_shadow #(
    .DW      (12),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (12'h0),
    .Mubi    (1'b0)
  ) u_block_ctrl_shadowed_data_type_last (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (block_ctrl_shadowed_re),
    .we     (block_ctrl_shadowed_we),
    .wd     (block_ctrl_shadowed_data_type_last_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (block_ctrl_shadowed_flds_we[1]),
    .q      (reg2hw.block_ctrl_shadowed.data_type_last.q),
    .ds     (),

    // to register interface (read)
    .qs     (block_ctrl_shadowed_data_type_last_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (block_ctrl_shadowed_data_type_last_update_err),
    .err_storage (block_ctrl_shadowed_data_type_last_storage_err)
  );
  assign reg2hw.block_ctrl_shadowed.data_type_last.qe = block_ctrl_shadowed_qe;

  //   F[valid_bytes]: 28:24
  prim_subreg_shadow #(
    .DW      (5),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (5'h1f),
    .Mubi    (1'b0)
  ) u_block_ctrl_shadowed_valid_bytes (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (block_ctrl_shadowed_re),
    .we     (block_ctrl_shadowed_we),
    .wd     (block_ctrl_shadowed_valid_bytes_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (block_ctrl_shadowed_flds_we[2]),
    .q      (reg2hw.block_ctrl_shadowed.valid_bytes.q),
    .ds     (),

    // to register interface (read)
    .qs     (block_ctrl_shadowed_valid_bytes_qs),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (block_ctrl_shadowed_valid_bytes_update_err),
    .err_storage (block_ctrl_shadowed_valid_bytes_storage_err)
  );
  assign reg2hw.block_ctrl_shadowed.valid_bytes.qe = block_ctrl_shadowed_qe;


  // R[trigger]: V(False)
  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_trigger_start (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (trigger_we),
    .wd     (trigger_start_wd),

    // from internal hardware
    .de     (hw2reg.trigger.start.de),
    .d      (hw2reg.trigger.start.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.trigger.start.q),
    .ds     (),

    // to register interface (read)
    .qs     (trigger_start_qs)
  );

  //   F[wipe]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_trigger_wipe (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (trigger_we),
    .wd     (trigger_wipe_wd),

    // from internal hardware
    .de     (hw2reg.trigger.wipe.de),
    .d      (hw2reg.trigger.wipe.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.trigger.wipe.q),
    .ds     (),

    // to register interface (read)
    .qs     (trigger_wipe_qs)
  );


  // R[status]: V(False)
  //   F[idle]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_idle (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.idle.de),
    .d      (hw2reg.status.idle.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_idle_qs)
  );

  //   F[stall]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_stall (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.stall.de),
    .d      (hw2reg.status.stall.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_stall_qs)
  );

  //   F[wait_edn]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_wait_edn (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.wait_edn.de),
    .d      (hw2reg.status.wait_edn.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_wait_edn_qs)
  );

  //   F[ascon_error]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_ascon_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.ascon_error.de),
    .d      (hw2reg.status.ascon_error.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_ascon_error_qs)
  );

  //   F[alert_recov_ctrl_update_err]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_alert_recov_ctrl_update_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.alert_recov_ctrl_update_err.de),
    .d      (hw2reg.status.alert_recov_ctrl_update_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_alert_recov_ctrl_update_err_qs)
  );

  //   F[alert_recov_ctrl_aux_update_err]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_alert_recov_ctrl_aux_update_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.alert_recov_ctrl_aux_update_err.de),
    .d      (hw2reg.status.alert_recov_ctrl_aux_update_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_alert_recov_ctrl_aux_update_err_qs)
  );

  //   F[alert_recov_block_ctrl_update_err]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_alert_recov_block_ctrl_update_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.alert_recov_block_ctrl_update_err.de),
    .d      (hw2reg.status.alert_recov_block_ctrl_update_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_alert_recov_block_ctrl_update_err_qs)
  );

  //   F[alert_fatal_fault]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_status_alert_fatal_fault (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.status.alert_fatal_fault.de),
    .d      (hw2reg.status.alert_fatal_fault.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (status_alert_fatal_fault_qs)
  );


  // R[output_valid]: V(False)
  //   F[data_type]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (3'h0),
    .Mubi    (1'b0)
  ) u_output_valid_data_type (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.output_valid.data_type.de),
    .d      (hw2reg.output_valid.data_type.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (output_valid_data_type_qs)
  );

  //   F[tag_comparison_valid]: 4:3
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (2'h0),
    .Mubi    (1'b0)
  ) u_output_valid_tag_comparison_valid (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.output_valid.tag_comparison_valid.de),
    .d      (hw2reg.output_valid.tag_comparison_valid.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (output_valid_tag_comparison_valid_qs)
  );


  // R[fsm_state]: V(True)
  logic fsm_state_qe;
  logic [0:0] fsm_state_flds_we;
  // In case all fields are read-only the aggregated register QE will be zero as well.
  assign fsm_state_qe = &fsm_state_flds_we;
  prim_subreg_ext #(
    .DW    (32)
  ) u_fsm_state (
    .re     (fsm_state_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fsm_state.d),
    .qre    (),
    .qe     (fsm_state_flds_we[0]),
    .q      (reg2hw.fsm_state.q),
    .ds     (),
    .qs     (fsm_state_qs)
  );
  assign reg2hw.fsm_state.qe = fsm_state_qe;


  // R[fsm_state_regren]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_fsm_state_regren (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (fsm_state_regren_we),
    .wd     (fsm_state_regren_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (fsm_state_regren_qs)
  );


  // R[error]: V(False)
  //   F[no_key]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_error_no_key (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.error.no_key.de),
    .d      (hw2reg.error.no_key.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (error_no_key_qs)
  );

  //   F[no_nonce]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_error_no_nonce (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.error.no_nonce.de),
    .d      (hw2reg.error.no_nonce.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (error_no_nonce_qs)
  );

  //   F[wrong_order]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_error_wrong_order (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.error.wrong_order.de),
    .d      (hw2reg.error.wrong_order.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (error_wrong_order_qs)
  );

  //   F[flag_input_missmatch]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_error_flag_input_missmatch (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.error.flag_input_missmatch.de),
    .d      (hw2reg.error.flag_input_missmatch.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (error_flag_input_missmatch_qs)
  );



  logic [46:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == ASCON_ALERT_TEST_OFFSET);
    addr_hit[ 1] = (reg_addr == ASCON_KEY_SHARE0_0_OFFSET);
    addr_hit[ 2] = (reg_addr == ASCON_KEY_SHARE0_1_OFFSET);
    addr_hit[ 3] = (reg_addr == ASCON_KEY_SHARE0_2_OFFSET);
    addr_hit[ 4] = (reg_addr == ASCON_KEY_SHARE0_3_OFFSET);
    addr_hit[ 5] = (reg_addr == ASCON_KEY_SHARE1_0_OFFSET);
    addr_hit[ 6] = (reg_addr == ASCON_KEY_SHARE1_1_OFFSET);
    addr_hit[ 7] = (reg_addr == ASCON_KEY_SHARE1_2_OFFSET);
    addr_hit[ 8] = (reg_addr == ASCON_KEY_SHARE1_3_OFFSET);
    addr_hit[ 9] = (reg_addr == ASCON_NONCE_SHARE0_0_OFFSET);
    addr_hit[10] = (reg_addr == ASCON_NONCE_SHARE0_1_OFFSET);
    addr_hit[11] = (reg_addr == ASCON_NONCE_SHARE0_2_OFFSET);
    addr_hit[12] = (reg_addr == ASCON_NONCE_SHARE0_3_OFFSET);
    addr_hit[13] = (reg_addr == ASCON_NONCE_SHARE1_0_OFFSET);
    addr_hit[14] = (reg_addr == ASCON_NONCE_SHARE1_1_OFFSET);
    addr_hit[15] = (reg_addr == ASCON_NONCE_SHARE1_2_OFFSET);
    addr_hit[16] = (reg_addr == ASCON_NONCE_SHARE1_3_OFFSET);
    addr_hit[17] = (reg_addr == ASCON_DATA_IN_SHARE0_0_OFFSET);
    addr_hit[18] = (reg_addr == ASCON_DATA_IN_SHARE0_1_OFFSET);
    addr_hit[19] = (reg_addr == ASCON_DATA_IN_SHARE0_2_OFFSET);
    addr_hit[20] = (reg_addr == ASCON_DATA_IN_SHARE0_3_OFFSET);
    addr_hit[21] = (reg_addr == ASCON_DATA_IN_SHARE1_0_OFFSET);
    addr_hit[22] = (reg_addr == ASCON_DATA_IN_SHARE1_1_OFFSET);
    addr_hit[23] = (reg_addr == ASCON_DATA_IN_SHARE1_2_OFFSET);
    addr_hit[24] = (reg_addr == ASCON_DATA_IN_SHARE1_3_OFFSET);
    addr_hit[25] = (reg_addr == ASCON_TAG_IN_0_OFFSET);
    addr_hit[26] = (reg_addr == ASCON_TAG_IN_1_OFFSET);
    addr_hit[27] = (reg_addr == ASCON_TAG_IN_2_OFFSET);
    addr_hit[28] = (reg_addr == ASCON_TAG_IN_3_OFFSET);
    addr_hit[29] = (reg_addr == ASCON_MSG_OUT_0_OFFSET);
    addr_hit[30] = (reg_addr == ASCON_MSG_OUT_1_OFFSET);
    addr_hit[31] = (reg_addr == ASCON_MSG_OUT_2_OFFSET);
    addr_hit[32] = (reg_addr == ASCON_MSG_OUT_3_OFFSET);
    addr_hit[33] = (reg_addr == ASCON_TAG_OUT_0_OFFSET);
    addr_hit[34] = (reg_addr == ASCON_TAG_OUT_1_OFFSET);
    addr_hit[35] = (reg_addr == ASCON_TAG_OUT_2_OFFSET);
    addr_hit[36] = (reg_addr == ASCON_TAG_OUT_3_OFFSET);
    addr_hit[37] = (reg_addr == ASCON_CTRL_SHADOWED_OFFSET);
    addr_hit[38] = (reg_addr == ASCON_CTRL_AUX_SHADOWED_OFFSET);
    addr_hit[39] = (reg_addr == ASCON_CTRL_AUX_REGWEN_OFFSET);
    addr_hit[40] = (reg_addr == ASCON_BLOCK_CTRL_SHADOWED_OFFSET);
    addr_hit[41] = (reg_addr == ASCON_TRIGGER_OFFSET);
    addr_hit[42] = (reg_addr == ASCON_STATUS_OFFSET);
    addr_hit[43] = (reg_addr == ASCON_OUTPUT_VALID_OFFSET);
    addr_hit[44] = (reg_addr == ASCON_FSM_STATE_OFFSET);
    addr_hit[45] = (reg_addr == ASCON_FSM_STATE_REGREN_OFFSET);
    addr_hit[46] = (reg_addr == ASCON_ERROR_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(ASCON_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(ASCON_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(ASCON_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(ASCON_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(ASCON_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(ASCON_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(ASCON_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(ASCON_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(ASCON_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(ASCON_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(ASCON_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(ASCON_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(ASCON_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(ASCON_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(ASCON_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(ASCON_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(ASCON_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(ASCON_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(ASCON_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(ASCON_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(ASCON_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(ASCON_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(ASCON_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(ASCON_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(ASCON_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(ASCON_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(ASCON_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(ASCON_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(ASCON_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(ASCON_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(ASCON_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(ASCON_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(ASCON_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(ASCON_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(ASCON_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(ASCON_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(ASCON_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(ASCON_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(ASCON_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(ASCON_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(ASCON_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(ASCON_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(ASCON_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(ASCON_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(ASCON_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(ASCON_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(ASCON_PERMIT[46] & ~reg_be)))));
  end

  // Generate write-enables
  assign alert_test_we = addr_hit[0] & reg_we & !reg_error;

  assign alert_test_recov_ctrl_update_err_wd = reg_wdata[0];

  assign alert_test_fatal_fault_wd = reg_wdata[1];
  assign key_share0_0_we = addr_hit[1] & reg_we & !reg_error;

  assign key_share0_0_wd = reg_wdata[31:0];
  assign key_share0_1_we = addr_hit[2] & reg_we & !reg_error;

  assign key_share0_1_wd = reg_wdata[31:0];
  assign key_share0_2_we = addr_hit[3] & reg_we & !reg_error;

  assign key_share0_2_wd = reg_wdata[31:0];
  assign key_share0_3_we = addr_hit[4] & reg_we & !reg_error;

  assign key_share0_3_wd = reg_wdata[31:0];
  assign key_share1_0_we = addr_hit[5] & reg_we & !reg_error;

  assign key_share1_0_wd = reg_wdata[31:0];
  assign key_share1_1_we = addr_hit[6] & reg_we & !reg_error;

  assign key_share1_1_wd = reg_wdata[31:0];
  assign key_share1_2_we = addr_hit[7] & reg_we & !reg_error;

  assign key_share1_2_wd = reg_wdata[31:0];
  assign key_share1_3_we = addr_hit[8] & reg_we & !reg_error;

  assign key_share1_3_wd = reg_wdata[31:0];
  assign nonce_share0_0_we = addr_hit[9] & reg_we & !reg_error;

  assign nonce_share0_0_wd = reg_wdata[31:0];
  assign nonce_share0_1_we = addr_hit[10] & reg_we & !reg_error;

  assign nonce_share0_1_wd = reg_wdata[31:0];
  assign nonce_share0_2_we = addr_hit[11] & reg_we & !reg_error;

  assign nonce_share0_2_wd = reg_wdata[31:0];
  assign nonce_share0_3_we = addr_hit[12] & reg_we & !reg_error;

  assign nonce_share0_3_wd = reg_wdata[31:0];
  assign nonce_share1_0_we = addr_hit[13] & reg_we & !reg_error;

  assign nonce_share1_0_wd = reg_wdata[31:0];
  assign nonce_share1_1_we = addr_hit[14] & reg_we & !reg_error;

  assign nonce_share1_1_wd = reg_wdata[31:0];
  assign nonce_share1_2_we = addr_hit[15] & reg_we & !reg_error;

  assign nonce_share1_2_wd = reg_wdata[31:0];
  assign nonce_share1_3_we = addr_hit[16] & reg_we & !reg_error;

  assign nonce_share1_3_wd = reg_wdata[31:0];
  assign data_in_share0_0_we = addr_hit[17] & reg_we & !reg_error;

  assign data_in_share0_0_wd = reg_wdata[31:0];
  assign data_in_share0_1_we = addr_hit[18] & reg_we & !reg_error;

  assign data_in_share0_1_wd = reg_wdata[31:0];
  assign data_in_share0_2_we = addr_hit[19] & reg_we & !reg_error;

  assign data_in_share0_2_wd = reg_wdata[31:0];
  assign data_in_share0_3_we = addr_hit[20] & reg_we & !reg_error;

  assign data_in_share0_3_wd = reg_wdata[31:0];
  assign data_in_share1_0_we = addr_hit[21] & reg_we & !reg_error;

  assign data_in_share1_0_wd = reg_wdata[31:0];
  assign data_in_share1_1_we = addr_hit[22] & reg_we & !reg_error;

  assign data_in_share1_1_wd = reg_wdata[31:0];
  assign data_in_share1_2_we = addr_hit[23] & reg_we & !reg_error;

  assign data_in_share1_2_wd = reg_wdata[31:0];
  assign data_in_share1_3_we = addr_hit[24] & reg_we & !reg_error;

  assign data_in_share1_3_wd = reg_wdata[31:0];
  assign tag_in_0_we = addr_hit[25] & reg_we & !reg_error;

  assign tag_in_0_wd = reg_wdata[31:0];
  assign tag_in_1_we = addr_hit[26] & reg_we & !reg_error;

  assign tag_in_1_wd = reg_wdata[31:0];
  assign tag_in_2_we = addr_hit[27] & reg_we & !reg_error;

  assign tag_in_2_wd = reg_wdata[31:0];
  assign tag_in_3_we = addr_hit[28] & reg_we & !reg_error;

  assign tag_in_3_wd = reg_wdata[31:0];
  assign msg_out_0_re = addr_hit[29] & reg_re & !reg_error;
  assign msg_out_1_re = addr_hit[30] & reg_re & !reg_error;
  assign msg_out_2_re = addr_hit[31] & reg_re & !reg_error;
  assign msg_out_3_re = addr_hit[32] & reg_re & !reg_error;
  assign tag_out_0_re = addr_hit[33] & reg_re & !reg_error;
  assign tag_out_1_re = addr_hit[34] & reg_re & !reg_error;
  assign tag_out_2_re = addr_hit[35] & reg_re & !reg_error;
  assign tag_out_3_re = addr_hit[36] & reg_re & !reg_error;
  assign ctrl_shadowed_re = addr_hit[37] & reg_re & !reg_error;
  assign ctrl_shadowed_we = addr_hit[37] & reg_we & !reg_error;

  assign ctrl_shadowed_operation_wd = reg_wdata[2:0];

  assign ctrl_shadowed_sideload_key_wd = reg_wdata[3];

  assign ctrl_shadowed_masked_ad_input_wd = reg_wdata[4];

  assign ctrl_shadowed_masked_msg_input_wd = reg_wdata[5];

  assign ctrl_shadowed_no_msg_wd = reg_wdata[6];

  assign ctrl_shadowed_no_ad_wd = reg_wdata[7];
  assign ctrl_aux_shadowed_re = addr_hit[38] & reg_re & !reg_error;
  assign ctrl_aux_shadowed_we = addr_hit[38] & reg_we & !reg_error;

  assign ctrl_aux_shadowed_manual_start_trigger_wd = reg_wdata[0];

  assign ctrl_aux_shadowed_force_data_overwrite_wd = reg_wdata[1];
  assign ctrl_aux_regwen_we = addr_hit[39] & reg_we & !reg_error;

  assign ctrl_aux_regwen_wd = reg_wdata[0];
  assign block_ctrl_shadowed_re = addr_hit[40] & reg_re & !reg_error;
  assign block_ctrl_shadowed_we = addr_hit[40] & reg_we & !reg_error;

  assign block_ctrl_shadowed_data_type_start_wd = reg_wdata[11:0];

  assign block_ctrl_shadowed_data_type_last_wd = reg_wdata[23:12];

  assign block_ctrl_shadowed_valid_bytes_wd = reg_wdata[28:24];
  assign trigger_we = addr_hit[41] & reg_we & !reg_error;

  assign trigger_start_wd = reg_wdata[0];

  assign trigger_wipe_wd = reg_wdata[1];
  assign fsm_state_re = addr_hit[44] & reg_re & !reg_error;
  assign fsm_state_regren_we = addr_hit[45] & reg_we & !reg_error;

  assign fsm_state_regren_wd = reg_wdata[0];

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = alert_test_we;
    reg_we_check[1] = key_share0_0_we;
    reg_we_check[2] = key_share0_1_we;
    reg_we_check[3] = key_share0_2_we;
    reg_we_check[4] = key_share0_3_we;
    reg_we_check[5] = key_share1_0_we;
    reg_we_check[6] = key_share1_1_we;
    reg_we_check[7] = key_share1_2_we;
    reg_we_check[8] = key_share1_3_we;
    reg_we_check[9] = nonce_share0_0_we;
    reg_we_check[10] = nonce_share0_1_we;
    reg_we_check[11] = nonce_share0_2_we;
    reg_we_check[12] = nonce_share0_3_we;
    reg_we_check[13] = nonce_share1_0_we;
    reg_we_check[14] = nonce_share1_1_we;
    reg_we_check[15] = nonce_share1_2_we;
    reg_we_check[16] = nonce_share1_3_we;
    reg_we_check[17] = data_in_share0_0_we;
    reg_we_check[18] = data_in_share0_1_we;
    reg_we_check[19] = data_in_share0_2_we;
    reg_we_check[20] = data_in_share0_3_we;
    reg_we_check[21] = data_in_share1_0_we;
    reg_we_check[22] = data_in_share1_1_we;
    reg_we_check[23] = data_in_share1_2_we;
    reg_we_check[24] = data_in_share1_3_we;
    reg_we_check[25] = tag_in_0_we;
    reg_we_check[26] = tag_in_1_we;
    reg_we_check[27] = tag_in_2_we;
    reg_we_check[28] = tag_in_3_we;
    reg_we_check[29] = 1'b0;
    reg_we_check[30] = 1'b0;
    reg_we_check[31] = 1'b0;
    reg_we_check[32] = 1'b0;
    reg_we_check[33] = 1'b0;
    reg_we_check[34] = 1'b0;
    reg_we_check[35] = 1'b0;
    reg_we_check[36] = 1'b0;
    reg_we_check[37] = ctrl_shadowed_we;
    reg_we_check[38] = ctrl_aux_shadowed_we;
    reg_we_check[39] = ctrl_aux_regwen_we;
    reg_we_check[40] = block_ctrl_shadowed_we;
    reg_we_check[41] = trigger_we;
    reg_we_check[42] = 1'b0;
    reg_we_check[43] = 1'b0;
    reg_we_check[44] = 1'b0;
    reg_we_check[45] = fsm_state_regren_we;
    reg_we_check[46] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = msg_out_0_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = msg_out_1_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = msg_out_2_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = msg_out_3_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = tag_out_0_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = tag_out_1_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = tag_out_2_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = tag_out_3_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[2:0] = ctrl_shadowed_operation_qs;
        reg_rdata_next[3] = ctrl_shadowed_sideload_key_qs;
        reg_rdata_next[4] = ctrl_shadowed_masked_ad_input_qs;
        reg_rdata_next[5] = ctrl_shadowed_masked_msg_input_qs;
        reg_rdata_next[6] = ctrl_shadowed_no_msg_qs;
        reg_rdata_next[7] = ctrl_shadowed_no_ad_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[0] = ctrl_aux_shadowed_manual_start_trigger_qs;
        reg_rdata_next[1] = ctrl_aux_shadowed_force_data_overwrite_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[0] = ctrl_aux_regwen_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[11:0] = block_ctrl_shadowed_data_type_start_qs;
        reg_rdata_next[23:12] = block_ctrl_shadowed_data_type_last_qs;
        reg_rdata_next[28:24] = block_ctrl_shadowed_valid_bytes_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[0] = trigger_start_qs;
        reg_rdata_next[1] = trigger_wipe_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[0] = status_idle_qs;
        reg_rdata_next[1] = status_stall_qs;
        reg_rdata_next[2] = status_wait_edn_qs;
        reg_rdata_next[3] = status_ascon_error_qs;
        reg_rdata_next[4] = status_alert_recov_ctrl_update_err_qs;
        reg_rdata_next[5] = status_alert_recov_ctrl_aux_update_err_qs;
        reg_rdata_next[6] = status_alert_recov_block_ctrl_update_err_qs;
        reg_rdata_next[7] = status_alert_fatal_fault_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[2:0] = output_valid_data_type_qs;
        reg_rdata_next[4:3] = output_valid_tag_comparison_valid_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = fsm_state_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[0] = fsm_state_regren_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = error_no_key_qs;
        reg_rdata_next[1] = error_no_nonce_qs;
        reg_rdata_next[2] = error_wrong_order_qs;
        reg_rdata_next[3] = error_flag_input_missmatch_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  logic rst_done;
  logic shadow_rst_done;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      rst_done <= '0;
    end else begin
      rst_done <= 1'b1;
    end
  end

  always_ff @(posedge clk_i or negedge rst_shadowed_ni) begin
    if (!rst_shadowed_ni) begin
      shadow_rst_done <= '0;
    end else begin
      shadow_rst_done <= 1'b1;
    end
  end

  // both shadow and normal resets have been released
  assign shadow_busy = ~(rst_done & shadow_rst_done);

  // Collect up storage and update errors
  assign shadowed_storage_err_o = |{
    ctrl_shadowed_operation_storage_err,
    ctrl_shadowed_sideload_key_storage_err,
    ctrl_shadowed_masked_ad_input_storage_err,
    ctrl_shadowed_masked_msg_input_storage_err,
    ctrl_shadowed_no_msg_storage_err,
    ctrl_shadowed_no_ad_storage_err,
    ctrl_aux_shadowed_manual_start_trigger_storage_err,
    ctrl_aux_shadowed_force_data_overwrite_storage_err,
    block_ctrl_shadowed_data_type_start_storage_err,
    block_ctrl_shadowed_data_type_last_storage_err,
    block_ctrl_shadowed_valid_bytes_storage_err
  };
  assign shadowed_update_err_o = |{
    ctrl_shadowed_operation_update_err,
    ctrl_shadowed_sideload_key_update_err,
    ctrl_shadowed_masked_ad_input_update_err,
    ctrl_shadowed_masked_msg_input_update_err,
    ctrl_shadowed_no_msg_update_err,
    ctrl_shadowed_no_ad_update_err,
    ctrl_aux_shadowed_manual_start_trigger_update_err,
    ctrl_aux_shadowed_force_data_overwrite_update_err,
    block_ctrl_shadowed_data_type_start_update_err,
    block_ctrl_shadowed_data_type_last_update_err,
    block_ctrl_shadowed_valid_bytes_update_err
  };

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
