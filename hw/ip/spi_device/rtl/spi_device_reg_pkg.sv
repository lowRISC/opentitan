// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package spi_device_reg_pkg;

/////////////////////////////////////////////////////////////////////
// Register to internal design logic
/////////////////////////////////////////////////////////////////////

typedef struct packed {
  struct packed {
    struct packed {
      logic q; // [168]
    } rxf;
    struct packed {
      logic q; // [167]
    } rxlvl;
    struct packed {
      logic q; // [166]
    } txlvl;
    struct packed {
      logic q; // [165]
    } rxerr;
    struct packed {
      logic q; // [164]
    } rxoverflow;
    struct packed {
      logic q; // [163]
    } txunderflow;
  } intr_state;
  struct packed {
    struct packed {
      logic q; // [162]
    } rxf;
    struct packed {
      logic q; // [161]
    } rxlvl;
    struct packed {
      logic q; // [160]
    } txlvl;
    struct packed {
      logic q; // [159]
    } rxerr;
    struct packed {
      logic q; // [158]
    } rxoverflow;
    struct packed {
      logic q; // [157]
    } txunderflow;
  } intr_enable;
  struct packed {
    struct packed {
      logic q; // [156]
      logic qe; // [155]
    } rxf;
    struct packed {
      logic q; // [154]
      logic qe; // [153]
    } rxlvl;
    struct packed {
      logic q; // [152]
      logic qe; // [151]
    } txlvl;
    struct packed {
      logic q; // [150]
      logic qe; // [149]
    } rxerr;
    struct packed {
      logic q; // [148]
      logic qe; // [147]
    } rxoverflow;
    struct packed {
      logic q; // [146]
      logic qe; // [145]
    } txunderflow;
  } intr_test;
  struct packed {
    struct packed {
      logic q; // [144]
    } abort;
    struct packed {
      logic [1:0] q; // [143:142]
    } mode;
    struct packed {
      logic q; // [141]
    } rst_txfifo;
    struct packed {
      logic q; // [140]
    } rst_rxfifo;
  } control;
  struct packed {
    struct packed {
      logic q; // [139]
    } cpol;
    struct packed {
      logic q; // [138]
    } cpha;
    struct packed {
      logic q; // [137]
    } tx_order;
    struct packed {
      logic q; // [136]
    } rx_order;
    struct packed {
      logic [7:0] q; // [135:128]
    } timer_v;
  } cfg;
  struct packed {
    struct packed {
      logic [15:0] q; // [127:112]
    } rxlvl;
    struct packed {
      logic [15:0] q; // [111:96]
    } txlvl;
  } fifo_level;
  struct packed {
    struct packed {
      logic [15:0] q; // [95:80]
    } rptr;
  } rxf_ptr;
  struct packed {
    struct packed {
      logic [15:0] q; // [79:64]
    } wptr;
  } txf_ptr;
  struct packed {
    struct packed {
      logic [15:0] q; // [63:48]
    } base;
    struct packed {
      logic [15:0] q; // [47:32]
    } limit;
  } rxf_addr;
  struct packed {
    struct packed {
      logic [15:0] q; // [31:16]
    } base;
    struct packed {
      logic [15:0] q; // [15:0]
    } limit;
  } txf_addr;
} spi_device_reg2hw_t;

/////////////////////////////////////////////////////////////////////
// Internal design logic to register
/////////////////////////////////////////////////////////////////////

typedef struct packed {
  struct packed {
    struct packed {
      logic d; // [67]
      logic de; // [66]
    } rxf;
    struct packed {
      logic d; // [65]
      logic de; // [64]
    } rxlvl;
    struct packed {
      logic d; // [63]
      logic de; // [62]
    } txlvl;
    struct packed {
      logic d; // [61]
      logic de; // [60]
    } rxerr;
    struct packed {
      logic d; // [59]
      logic de; // [58]
    } rxoverflow;
    struct packed {
      logic d; // [57]
      logic de; // [56]
    } txunderflow;
  } intr_state;
  struct packed {
    struct packed {
      logic [7:0] d; // [55:48]
    } rxlvl;
    struct packed {
      logic [7:0] d; // [47:40]
    } txlvl;
  } async_fifo_level;
  struct packed {
    struct packed {
      logic d; // [39]
    } rxf_full;
    struct packed {
      logic d; // [38]
    } rxf_empty;
    struct packed {
      logic d; // [37]
    } txf_full;
    struct packed {
      logic d; // [36]
    } txf_empty;
    struct packed {
      logic d; // [35]
    } abort_done;
    struct packed {
      logic d; // [34]
    } csb;
  } status;
  struct packed {
    struct packed {
      logic [15:0] d; // [33:18]
      logic de; // [17]
    } wptr;
  } rxf_ptr;
  struct packed {
    struct packed {
      logic [15:0] d; // [16:1]
      logic de; // [0]
    } rptr;
  } txf_ptr;
} spi_device_hw2reg_t;

  // Register Address
  parameter SPI_DEVICE_INTR_STATE_OFFSET = 12'h 0;
  parameter SPI_DEVICE_INTR_ENABLE_OFFSET = 12'h 4;
  parameter SPI_DEVICE_INTR_TEST_OFFSET = 12'h 8;
  parameter SPI_DEVICE_CONTROL_OFFSET = 12'h c;
  parameter SPI_DEVICE_CFG_OFFSET = 12'h 10;
  parameter SPI_DEVICE_FIFO_LEVEL_OFFSET = 12'h 14;
  parameter SPI_DEVICE_ASYNC_FIFO_LEVEL_OFFSET = 12'h 18;
  parameter SPI_DEVICE_STATUS_OFFSET = 12'h 1c;
  parameter SPI_DEVICE_RXF_PTR_OFFSET = 12'h 20;
  parameter SPI_DEVICE_TXF_PTR_OFFSET = 12'h 24;
  parameter SPI_DEVICE_RXF_ADDR_OFFSET = 12'h 28;
  parameter SPI_DEVICE_TXF_ADDR_OFFSET = 12'h 2c;

  // Window parameter
  parameter SPI_DEVICE_BUFFER_OFFSET = 12'h 800;
  parameter SPI_DEVICE_BUFFER_SIZE   = 12'h 800;

  // Register Index
  typedef enum int {
    SPI_DEVICE_INTR_STATE,
    SPI_DEVICE_INTR_ENABLE,
    SPI_DEVICE_INTR_TEST,
    SPI_DEVICE_CONTROL,
    SPI_DEVICE_CFG,
    SPI_DEVICE_FIFO_LEVEL,
    SPI_DEVICE_ASYNC_FIFO_LEVEL,
    SPI_DEVICE_STATUS,
    SPI_DEVICE_RXF_PTR,
    SPI_DEVICE_TXF_PTR,
    SPI_DEVICE_RXF_ADDR,
    SPI_DEVICE_TXF_ADDR
  } spi_device_id_e;

  // Register width information to check illegal writes
  localparam logic [3:0] SPI_DEVICE_PERMIT [12] = '{
    4'b 0001, // index[ 0] SPI_DEVICE_INTR_STATE
    4'b 0001, // index[ 1] SPI_DEVICE_INTR_ENABLE
    4'b 0001, // index[ 2] SPI_DEVICE_INTR_TEST
    4'b 1111, // index[ 3] SPI_DEVICE_CONTROL
    4'b 0011, // index[ 4] SPI_DEVICE_CFG
    4'b 1111, // index[ 5] SPI_DEVICE_FIFO_LEVEL
    4'b 1111, // index[ 6] SPI_DEVICE_ASYNC_FIFO_LEVEL
    4'b 0001, // index[ 7] SPI_DEVICE_STATUS
    4'b 1111, // index[ 8] SPI_DEVICE_RXF_PTR
    4'b 1111, // index[ 9] SPI_DEVICE_TXF_PTR
    4'b 1111, // index[10] SPI_DEVICE_RXF_ADDR
    4'b 1111  // index[11] SPI_DEVICE_TXF_ADDR
  };
endpackage

