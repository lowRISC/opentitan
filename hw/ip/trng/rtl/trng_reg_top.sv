// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


module trng_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output trng_reg_pkg::trng_reg2hw_t reg2hw, // Write
  input  trng_reg_pkg::trng_hw2reg_t hw2reg  // Read
);

  import trng_reg_pkg::* ;

  localparam AW = 5;
  localparam DW = 32;
  localparam DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          malformed, addrmiss;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = malformed | addrmiss ;

  // Malformed request check only affects to the write access
  always_comb begin : malformed_check
    if (reg_we && (reg_be != '1)) begin
      malformed = 1'b1;
    end else begin
      malformed = 1'b0;
    end
  end

  // TODO(eunchan): Revise Register Interface logic after REG INTF finalized
  // TODO(eunchan): Make concrete scenario
  //    1. Write: No response, so that it can guarantee a request completes a clock after we
  //              It means, bus_reg_ready doesn't have to be lowered.
  //    2. Read: response. So bus_reg_ready should assert after reg_bus_valid & reg_bus_ready
  //               _____         _____
  // a_valid _____/     \_______/     \______
  //         ___________         _____
  // a_ready            \_______/     \______ <- ERR though no logic malfunction
  //                     _____________
  // d_valid ___________/             \______
  //                             _____
  // d_ready ___________________/     \______
  //
  // Above example is fine but if r.b.r doesn't assert within two cycle, then it can be wrong.

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_no_random_num_qs;
  logic intr_state_no_random_num_wd;
  logic intr_state_no_random_num_we;
  logic intr_state_stub_err_qs;
  logic intr_state_stub_err_wd;
  logic intr_state_stub_err_we;
  logic intr_enable_no_random_num_qs;
  logic intr_enable_no_random_num_wd;
  logic intr_enable_no_random_num_we;
  logic intr_enable_stub_err_qs;
  logic intr_enable_stub_err_wd;
  logic intr_enable_stub_err_we;
  logic intr_test_no_random_num_wd;
  logic intr_test_no_random_num_we;
  logic intr_test_stub_err_wd;
  logic intr_test_stub_err_we;
  logic ctrl_prng_qs;
  logic ctrl_prng_wd;
  logic ctrl_prng_we;
  logic ctrl_trng_qs;
  logic ctrl_trng_wd;
  logic ctrl_trng_we;
  logic status_prng_qs;
  logic status_prng_re;
  logic status_trng_qs;
  logic status_trng_re;
  logic [31:0] rnum_qs;
  logic rnum_re;
  logic [31:0] seed_qs;
  logic [31:0] seed_wd;
  logic seed_we;

  // Register instances
  // R[intr_state]: V(False)

  //   F[no_random_num]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_no_random_num (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_no_random_num_we),
    .wd     (intr_state_no_random_num_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.no_random_num.de),
    .d      (hw2reg.intr_state.no_random_num.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.no_random_num.q ),

    // to register interface (read)
    .qs     (intr_state_no_random_num_qs)
  );


  //   F[stub_err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_stub_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_stub_err_we),
    .wd     (intr_state_stub_err_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.stub_err.de),
    .d      (hw2reg.intr_state.stub_err.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.stub_err.q ),

    // to register interface (read)
    .qs     (intr_state_stub_err_qs)
  );


  // R[intr_enable]: V(False)

  //   F[no_random_num]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_no_random_num (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_no_random_num_we),
    .wd     (intr_enable_no_random_num_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.no_random_num.q ),

    // to register interface (read)
    .qs     (intr_enable_no_random_num_qs)
  );


  //   F[stub_err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_stub_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_stub_err_we),
    .wd     (intr_enable_stub_err_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.stub_err.q ),

    // to register interface (read)
    .qs     (intr_enable_stub_err_qs)
  );


  // R[intr_test]: V(True)

  //   F[no_random_num]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_no_random_num (
    .re     (1'b0),
    .we     (intr_test_no_random_num_we),
    .wd     (intr_test_no_random_num_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.no_random_num.qe),
    .q      (reg2hw.intr_test.no_random_num.q ),
    .qs     ()
  );


  //   F[stub_err]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_stub_err (
    .re     (1'b0),
    .we     (intr_test_stub_err_we),
    .wd     (intr_test_stub_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.stub_err.qe),
    .q      (reg2hw.intr_test.stub_err.q ),
    .qs     ()
  );


  // R[ctrl]: V(False)

  //   F[prng]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_prng (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_prng_we),
    .wd     (ctrl_prng_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.prng.q ),

    // to register interface (read)
    .qs     (ctrl_prng_qs)
  );


  //   F[trng]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl_trng (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl_trng_we),
    .wd     (ctrl_trng_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.trng.q ),

    // to register interface (read)
    .qs     (ctrl_trng_qs)
  );


  // R[status]: V(True)

  //   F[prng]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_prng (
    .re     (status_prng_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.prng.d),
    .qre    (reg2hw.status.prng.re),
    .qe     (),
    .q      (reg2hw.status.prng.q ),
    .qs     (status_prng_qs)
  );


  //   F[trng]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_trng (
    .re     (status_trng_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.trng.d),
    .qre    (reg2hw.status.trng.re),
    .qe     (),
    .q      (reg2hw.status.trng.q ),
    .qs     (status_trng_qs)
  );


  // R[rnum]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_rnum (
    .re     (rnum_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.rnum.d),
    .qre    (reg2hw.rnum.re),
    .qe     (),
    .q      (reg2hw.rnum.q ),
    .qs     (rnum_qs)
  );


  // R[seed]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_seed (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (seed_we),
    .wd     (seed_wd),

    // from internal hardware
    .de     (hw2reg.seed.de),
    .d      (hw2reg.seed.d ),

    // to internal hardware
    .qe     (reg2hw.seed.qe),
    .q      (reg2hw.seed.q ),

    // to register interface (read)
    .qs     (seed_qs)
  );



  logic [6:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == TRNG_INTR_STATE_OFFSET);
    addr_hit[1] = (reg_addr == TRNG_INTR_ENABLE_OFFSET);
    addr_hit[2] = (reg_addr == TRNG_INTR_TEST_OFFSET);
    addr_hit[3] = (reg_addr == TRNG_CTRL_OFFSET);
    addr_hit[4] = (reg_addr == TRNG_STATUS_OFFSET);
    addr_hit[5] = (reg_addr == TRNG_RNUM_OFFSET);
    addr_hit[6] = (reg_addr == TRNG_SEED_OFFSET);
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      addrmiss <= 1'b0;
    end else if (reg_re || reg_we) begin
      addrmiss <= ~|addr_hit;
    end
  end

  // Write Enable signal

  assign intr_state_no_random_num_we = addr_hit[0] && reg_we;
  assign intr_state_no_random_num_wd = reg_wdata[0];

  assign intr_state_stub_err_we = addr_hit[0] && reg_we;
  assign intr_state_stub_err_wd = reg_wdata[1];

  assign intr_enable_no_random_num_we = addr_hit[1] && reg_we;
  assign intr_enable_no_random_num_wd = reg_wdata[0];

  assign intr_enable_stub_err_we = addr_hit[1] && reg_we;
  assign intr_enable_stub_err_wd = reg_wdata[1];

  assign intr_test_no_random_num_we = addr_hit[2] && reg_we;
  assign intr_test_no_random_num_wd = reg_wdata[0];

  assign intr_test_stub_err_we = addr_hit[2] && reg_we;
  assign intr_test_stub_err_wd = reg_wdata[1];

  assign ctrl_prng_we = addr_hit[3] && reg_we;
  assign ctrl_prng_wd = reg_wdata[0];

  assign ctrl_trng_we = addr_hit[3] && reg_we;
  assign ctrl_trng_wd = reg_wdata[1];

  assign status_prng_re = addr_hit[4] && reg_re;

  assign status_trng_re = addr_hit[4] && reg_re;

  assign rnum_re = addr_hit[5] && reg_re;

  assign seed_we = addr_hit[6] && reg_we;
  assign seed_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_no_random_num_qs;
        reg_rdata_next[1] = intr_state_stub_err_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_no_random_num_qs;
        reg_rdata_next[1] = intr_enable_stub_err_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = ctrl_prng_qs;
        reg_rdata_next[1] = ctrl_trng_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = status_prng_qs;
        reg_rdata_next[1] = status_trng_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = rnum_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = seed_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  `ASSERT(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0, clk_i, !rst_ni)

endmodule
