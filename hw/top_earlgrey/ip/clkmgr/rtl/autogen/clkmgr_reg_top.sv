// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module clkmgr_reg_top (
  input clk_i,
  input rst_ni,
  input rst_shadowed_ni,
  input clk_io_i,
  input rst_io_ni,
  input clk_io_div2_i,
  input rst_io_div2_ni,
  input clk_io_div4_i,
  input rst_io_div4_ni,
  input clk_main_i,
  input rst_main_ni,
  input clk_usb_i,
  input rst_usb_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output clkmgr_reg_pkg::clkmgr_reg2hw_t reg2hw, // Write
  input  clkmgr_reg_pkg::clkmgr_hw2reg_t hw2reg, // Read

  output logic shadowed_storage_err_o,
  output logic shadowed_update_err_o,

  // Integrity check errors
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import clkmgr_reg_pkg::* ;

  localparam int AW = 7;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [21:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(22)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic alert_test_we;
  logic alert_test_recov_fault_wd;
  logic alert_test_fatal_fault_wd;
  logic extclk_ctrl_regwen_we;
  logic extclk_ctrl_regwen_qs;
  logic extclk_ctrl_regwen_wd;
  logic extclk_ctrl_we;
  logic [3:0] extclk_ctrl_sel_qs;
  logic [3:0] extclk_ctrl_sel_wd;
  logic [3:0] extclk_ctrl_hi_speed_sel_qs;
  logic [3:0] extclk_ctrl_hi_speed_sel_wd;
  logic extclk_status_re;
  logic [3:0] extclk_status_qs;
  logic jitter_regwen_we;
  logic jitter_regwen_qs;
  logic jitter_regwen_wd;
  logic jitter_enable_we;
  logic [3:0] jitter_enable_qs;
  logic [3:0] jitter_enable_wd;
  logic clk_enables_we;
  logic clk_enables_clk_io_div4_peri_en_qs;
  logic clk_enables_clk_io_div4_peri_en_wd;
  logic clk_enables_clk_io_div2_peri_en_qs;
  logic clk_enables_clk_io_div2_peri_en_wd;
  logic clk_enables_clk_io_peri_en_qs;
  logic clk_enables_clk_io_peri_en_wd;
  logic clk_enables_clk_usb_peri_en_qs;
  logic clk_enables_clk_usb_peri_en_wd;
  logic clk_hints_we;
  logic clk_hints_clk_main_aes_hint_qs;
  logic clk_hints_clk_main_aes_hint_wd;
  logic clk_hints_clk_main_hmac_hint_qs;
  logic clk_hints_clk_main_hmac_hint_wd;
  logic clk_hints_clk_main_kmac_hint_qs;
  logic clk_hints_clk_main_kmac_hint_wd;
  logic clk_hints_clk_main_otbn_hint_qs;
  logic clk_hints_clk_main_otbn_hint_wd;
  logic clk_hints_status_clk_main_aes_val_qs;
  logic clk_hints_status_clk_main_hmac_val_qs;
  logic clk_hints_status_clk_main_kmac_val_qs;
  logic clk_hints_status_clk_main_otbn_val_qs;
  logic measure_ctrl_regwen_we;
  logic measure_ctrl_regwen_qs;
  logic measure_ctrl_regwen_wd;
  logic io_meas_ctrl_en_we;
  logic [3:0] io_meas_ctrl_en_qs;
  logic io_meas_ctrl_en_busy;
  logic io_meas_ctrl_shadowed_re;
  logic io_meas_ctrl_shadowed_we;
  logic [19:0] io_meas_ctrl_shadowed_qs;
  logic io_meas_ctrl_shadowed_busy;
  logic io_meas_ctrl_shadowed_hi_storage_err;
  logic io_meas_ctrl_shadowed_hi_update_err;
  logic io_meas_ctrl_shadowed_lo_storage_err;
  logic io_meas_ctrl_shadowed_lo_update_err;
  logic io_div2_meas_ctrl_en_we;
  logic [3:0] io_div2_meas_ctrl_en_qs;
  logic io_div2_meas_ctrl_en_busy;
  logic io_div2_meas_ctrl_shadowed_re;
  logic io_div2_meas_ctrl_shadowed_we;
  logic [17:0] io_div2_meas_ctrl_shadowed_qs;
  logic io_div2_meas_ctrl_shadowed_busy;
  logic io_div2_meas_ctrl_shadowed_hi_storage_err;
  logic io_div2_meas_ctrl_shadowed_hi_update_err;
  logic io_div2_meas_ctrl_shadowed_lo_storage_err;
  logic io_div2_meas_ctrl_shadowed_lo_update_err;
  logic io_div4_meas_ctrl_en_we;
  logic [3:0] io_div4_meas_ctrl_en_qs;
  logic io_div4_meas_ctrl_en_busy;
  logic io_div4_meas_ctrl_shadowed_re;
  logic io_div4_meas_ctrl_shadowed_we;
  logic [15:0] io_div4_meas_ctrl_shadowed_qs;
  logic io_div4_meas_ctrl_shadowed_busy;
  logic io_div4_meas_ctrl_shadowed_hi_storage_err;
  logic io_div4_meas_ctrl_shadowed_hi_update_err;
  logic io_div4_meas_ctrl_shadowed_lo_storage_err;
  logic io_div4_meas_ctrl_shadowed_lo_update_err;
  logic main_meas_ctrl_en_we;
  logic [3:0] main_meas_ctrl_en_qs;
  logic main_meas_ctrl_en_busy;
  logic main_meas_ctrl_shadowed_re;
  logic main_meas_ctrl_shadowed_we;
  logic [19:0] main_meas_ctrl_shadowed_qs;
  logic main_meas_ctrl_shadowed_busy;
  logic main_meas_ctrl_shadowed_hi_storage_err;
  logic main_meas_ctrl_shadowed_hi_update_err;
  logic main_meas_ctrl_shadowed_lo_storage_err;
  logic main_meas_ctrl_shadowed_lo_update_err;
  logic usb_meas_ctrl_en_we;
  logic [3:0] usb_meas_ctrl_en_qs;
  logic usb_meas_ctrl_en_busy;
  logic usb_meas_ctrl_shadowed_re;
  logic usb_meas_ctrl_shadowed_we;
  logic [17:0] usb_meas_ctrl_shadowed_qs;
  logic usb_meas_ctrl_shadowed_busy;
  logic usb_meas_ctrl_shadowed_hi_storage_err;
  logic usb_meas_ctrl_shadowed_hi_update_err;
  logic usb_meas_ctrl_shadowed_lo_storage_err;
  logic usb_meas_ctrl_shadowed_lo_update_err;
  logic recov_err_code_we;
  logic recov_err_code_shadow_update_err_qs;
  logic recov_err_code_shadow_update_err_wd;
  logic recov_err_code_io_measure_err_qs;
  logic recov_err_code_io_measure_err_wd;
  logic recov_err_code_io_div2_measure_err_qs;
  logic recov_err_code_io_div2_measure_err_wd;
  logic recov_err_code_io_div4_measure_err_qs;
  logic recov_err_code_io_div4_measure_err_wd;
  logic recov_err_code_main_measure_err_qs;
  logic recov_err_code_main_measure_err_wd;
  logic recov_err_code_usb_measure_err_qs;
  logic recov_err_code_usb_measure_err_wd;
  logic recov_err_code_io_timeout_err_qs;
  logic recov_err_code_io_timeout_err_wd;
  logic recov_err_code_io_div2_timeout_err_qs;
  logic recov_err_code_io_div2_timeout_err_wd;
  logic recov_err_code_io_div4_timeout_err_qs;
  logic recov_err_code_io_div4_timeout_err_wd;
  logic recov_err_code_main_timeout_err_qs;
  logic recov_err_code_main_timeout_err_wd;
  logic recov_err_code_usb_timeout_err_qs;
  logic recov_err_code_usb_timeout_err_wd;
  logic fatal_err_code_reg_intg_qs;
  logic fatal_err_code_idle_cnt_qs;
  logic fatal_err_code_shadow_storage_err_qs;
  // Define register CDC handling.
  // CDC handling is done on a per-reg instead of per-field boundary.

  logic [3:0]  io_io_meas_ctrl_en_ds_int;
  logic [3:0]  io_io_meas_ctrl_en_qs_int;
  logic [3:0] io_io_meas_ctrl_en_ds;
  logic io_io_meas_ctrl_en_qe;
  logic [3:0] io_io_meas_ctrl_en_qs;
  logic [3:0] io_io_meas_ctrl_en_wdata;
  logic io_io_meas_ctrl_en_we;
  logic unused_io_io_meas_ctrl_en_wdata;
  logic io_io_meas_ctrl_en_regwen;

  always_comb begin
    io_io_meas_ctrl_en_qs = 4'h9;
    io_io_meas_ctrl_en_ds = 4'h9;
    io_io_meas_ctrl_en_ds = io_io_meas_ctrl_en_ds_int;
    io_io_meas_ctrl_en_qs = io_io_meas_ctrl_en_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(4),
    .ResetVal(4'h9),
    .BitMask(4'hf),
    .DstWrReq(1)
  ) u_io_meas_ctrl_en_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_i),
    .rst_dst_ni   (rst_io_ni),
    .src_regwen_i (measure_ctrl_regwen_qs),
    .src_we_i     (io_meas_ctrl_en_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[3:0]),
    .src_busy_o   (io_meas_ctrl_en_busy),
    .src_qs_o     (io_meas_ctrl_en_qs), // for software read back
    .dst_update_i (io_io_meas_ctrl_en_qe),
    .dst_ds_i     (io_io_meas_ctrl_en_ds),
    .dst_qs_i     (io_io_meas_ctrl_en_qs),
    .dst_we_o     (io_io_meas_ctrl_en_we),
    .dst_re_o     (),
    .dst_regwen_o (io_io_meas_ctrl_en_regwen),
    .dst_wd_o     (io_io_meas_ctrl_en_wdata)
  );
  assign unused_io_io_meas_ctrl_en_wdata =
      ^io_io_meas_ctrl_en_wdata;

  logic [9:0]  io_io_meas_ctrl_shadowed_hi_qs_int;
  logic [9:0]  io_io_meas_ctrl_shadowed_lo_qs_int;
  logic [19:0] io_io_meas_ctrl_shadowed_qs;
  logic [19:0] io_io_meas_ctrl_shadowed_wdata;
  logic io_io_meas_ctrl_shadowed_we;
  logic unused_io_io_meas_ctrl_shadowed_wdata;
  logic io_io_meas_ctrl_shadowed_re;
  logic io_io_meas_ctrl_shadowed_regwen;

  always_comb begin
    io_io_meas_ctrl_shadowed_qs = 20'h759ea;
    io_io_meas_ctrl_shadowed_qs[9:0] = io_io_meas_ctrl_shadowed_hi_qs_int;
    io_io_meas_ctrl_shadowed_qs[19:10] = io_io_meas_ctrl_shadowed_lo_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(20),
    .ResetVal(20'h759ea),
    .BitMask(20'hfffff),
    .DstWrReq(0)
  ) u_io_meas_ctrl_shadowed_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_i),
    .rst_dst_ni   (rst_io_ni),
    .src_regwen_i (measure_ctrl_regwen_qs),
    .src_we_i     (io_meas_ctrl_shadowed_we),
    .src_re_i     (io_meas_ctrl_shadowed_re),
    .src_wd_i     (reg_wdata[19:0]),
    .src_busy_o   (io_meas_ctrl_shadowed_busy),
    .src_qs_o     (io_meas_ctrl_shadowed_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (io_io_meas_ctrl_shadowed_qs),
    .dst_we_o     (io_io_meas_ctrl_shadowed_we),
    .dst_re_o     (io_io_meas_ctrl_shadowed_re),
    .dst_regwen_o (io_io_meas_ctrl_shadowed_regwen),
    .dst_wd_o     (io_io_meas_ctrl_shadowed_wdata)
  );
  assign unused_io_io_meas_ctrl_shadowed_wdata =
      ^io_io_meas_ctrl_shadowed_wdata;

  logic [3:0]  io_div2_io_div2_meas_ctrl_en_ds_int;
  logic [3:0]  io_div2_io_div2_meas_ctrl_en_qs_int;
  logic [3:0] io_div2_io_div2_meas_ctrl_en_ds;
  logic io_div2_io_div2_meas_ctrl_en_qe;
  logic [3:0] io_div2_io_div2_meas_ctrl_en_qs;
  logic [3:0] io_div2_io_div2_meas_ctrl_en_wdata;
  logic io_div2_io_div2_meas_ctrl_en_we;
  logic unused_io_div2_io_div2_meas_ctrl_en_wdata;
  logic io_div2_io_div2_meas_ctrl_en_regwen;

  always_comb begin
    io_div2_io_div2_meas_ctrl_en_qs = 4'h9;
    io_div2_io_div2_meas_ctrl_en_ds = 4'h9;
    io_div2_io_div2_meas_ctrl_en_ds = io_div2_io_div2_meas_ctrl_en_ds_int;
    io_div2_io_div2_meas_ctrl_en_qs = io_div2_io_div2_meas_ctrl_en_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(4),
    .ResetVal(4'h9),
    .BitMask(4'hf),
    .DstWrReq(1)
  ) u_io_div2_meas_ctrl_en_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_div2_i),
    .rst_dst_ni   (rst_io_div2_ni),
    .src_regwen_i (measure_ctrl_regwen_qs),
    .src_we_i     (io_div2_meas_ctrl_en_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[3:0]),
    .src_busy_o   (io_div2_meas_ctrl_en_busy),
    .src_qs_o     (io_div2_meas_ctrl_en_qs), // for software read back
    .dst_update_i (io_div2_io_div2_meas_ctrl_en_qe),
    .dst_ds_i     (io_div2_io_div2_meas_ctrl_en_ds),
    .dst_qs_i     (io_div2_io_div2_meas_ctrl_en_qs),
    .dst_we_o     (io_div2_io_div2_meas_ctrl_en_we),
    .dst_re_o     (),
    .dst_regwen_o (io_div2_io_div2_meas_ctrl_en_regwen),
    .dst_wd_o     (io_div2_io_div2_meas_ctrl_en_wdata)
  );
  assign unused_io_div2_io_div2_meas_ctrl_en_wdata =
      ^io_div2_io_div2_meas_ctrl_en_wdata;

  logic [8:0]  io_div2_io_div2_meas_ctrl_shadowed_hi_qs_int;
  logic [8:0]  io_div2_io_div2_meas_ctrl_shadowed_lo_qs_int;
  logic [17:0] io_div2_io_div2_meas_ctrl_shadowed_qs;
  logic [17:0] io_div2_io_div2_meas_ctrl_shadowed_wdata;
  logic io_div2_io_div2_meas_ctrl_shadowed_we;
  logic unused_io_div2_io_div2_meas_ctrl_shadowed_wdata;
  logic io_div2_io_div2_meas_ctrl_shadowed_re;
  logic io_div2_io_div2_meas_ctrl_shadowed_regwen;

  always_comb begin
    io_div2_io_div2_meas_ctrl_shadowed_qs = 18'h1ccfa;
    io_div2_io_div2_meas_ctrl_shadowed_qs[8:0] = io_div2_io_div2_meas_ctrl_shadowed_hi_qs_int;
    io_div2_io_div2_meas_ctrl_shadowed_qs[17:9] = io_div2_io_div2_meas_ctrl_shadowed_lo_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(18),
    .ResetVal(18'h1ccfa),
    .BitMask(18'h3ffff),
    .DstWrReq(0)
  ) u_io_div2_meas_ctrl_shadowed_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_div2_i),
    .rst_dst_ni   (rst_io_div2_ni),
    .src_regwen_i (measure_ctrl_regwen_qs),
    .src_we_i     (io_div2_meas_ctrl_shadowed_we),
    .src_re_i     (io_div2_meas_ctrl_shadowed_re),
    .src_wd_i     (reg_wdata[17:0]),
    .src_busy_o   (io_div2_meas_ctrl_shadowed_busy),
    .src_qs_o     (io_div2_meas_ctrl_shadowed_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (io_div2_io_div2_meas_ctrl_shadowed_qs),
    .dst_we_o     (io_div2_io_div2_meas_ctrl_shadowed_we),
    .dst_re_o     (io_div2_io_div2_meas_ctrl_shadowed_re),
    .dst_regwen_o (io_div2_io_div2_meas_ctrl_shadowed_regwen),
    .dst_wd_o     (io_div2_io_div2_meas_ctrl_shadowed_wdata)
  );
  assign unused_io_div2_io_div2_meas_ctrl_shadowed_wdata =
      ^io_div2_io_div2_meas_ctrl_shadowed_wdata;

  logic [3:0]  io_div4_io_div4_meas_ctrl_en_ds_int;
  logic [3:0]  io_div4_io_div4_meas_ctrl_en_qs_int;
  logic [3:0] io_div4_io_div4_meas_ctrl_en_ds;
  logic io_div4_io_div4_meas_ctrl_en_qe;
  logic [3:0] io_div4_io_div4_meas_ctrl_en_qs;
  logic [3:0] io_div4_io_div4_meas_ctrl_en_wdata;
  logic io_div4_io_div4_meas_ctrl_en_we;
  logic unused_io_div4_io_div4_meas_ctrl_en_wdata;
  logic io_div4_io_div4_meas_ctrl_en_regwen;

  always_comb begin
    io_div4_io_div4_meas_ctrl_en_qs = 4'h9;
    io_div4_io_div4_meas_ctrl_en_ds = 4'h9;
    io_div4_io_div4_meas_ctrl_en_ds = io_div4_io_div4_meas_ctrl_en_ds_int;
    io_div4_io_div4_meas_ctrl_en_qs = io_div4_io_div4_meas_ctrl_en_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(4),
    .ResetVal(4'h9),
    .BitMask(4'hf),
    .DstWrReq(1)
  ) u_io_div4_meas_ctrl_en_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_div4_i),
    .rst_dst_ni   (rst_io_div4_ni),
    .src_regwen_i (measure_ctrl_regwen_qs),
    .src_we_i     (io_div4_meas_ctrl_en_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[3:0]),
    .src_busy_o   (io_div4_meas_ctrl_en_busy),
    .src_qs_o     (io_div4_meas_ctrl_en_qs), // for software read back
    .dst_update_i (io_div4_io_div4_meas_ctrl_en_qe),
    .dst_ds_i     (io_div4_io_div4_meas_ctrl_en_ds),
    .dst_qs_i     (io_div4_io_div4_meas_ctrl_en_qs),
    .dst_we_o     (io_div4_io_div4_meas_ctrl_en_we),
    .dst_re_o     (),
    .dst_regwen_o (io_div4_io_div4_meas_ctrl_en_regwen),
    .dst_wd_o     (io_div4_io_div4_meas_ctrl_en_wdata)
  );
  assign unused_io_div4_io_div4_meas_ctrl_en_wdata =
      ^io_div4_io_div4_meas_ctrl_en_wdata;

  logic [7:0]  io_div4_io_div4_meas_ctrl_shadowed_hi_qs_int;
  logic [7:0]  io_div4_io_div4_meas_ctrl_shadowed_lo_qs_int;
  logic [15:0] io_div4_io_div4_meas_ctrl_shadowed_qs;
  logic [15:0] io_div4_io_div4_meas_ctrl_shadowed_wdata;
  logic io_div4_io_div4_meas_ctrl_shadowed_we;
  logic unused_io_div4_io_div4_meas_ctrl_shadowed_wdata;
  logic io_div4_io_div4_meas_ctrl_shadowed_re;
  logic io_div4_io_div4_meas_ctrl_shadowed_regwen;

  always_comb begin
    io_div4_io_div4_meas_ctrl_shadowed_qs = 16'h6e82;
    io_div4_io_div4_meas_ctrl_shadowed_qs[7:0] = io_div4_io_div4_meas_ctrl_shadowed_hi_qs_int;
    io_div4_io_div4_meas_ctrl_shadowed_qs[15:8] = io_div4_io_div4_meas_ctrl_shadowed_lo_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(16),
    .ResetVal(16'h6e82),
    .BitMask(16'hffff),
    .DstWrReq(0)
  ) u_io_div4_meas_ctrl_shadowed_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_io_div4_i),
    .rst_dst_ni   (rst_io_div4_ni),
    .src_regwen_i (measure_ctrl_regwen_qs),
    .src_we_i     (io_div4_meas_ctrl_shadowed_we),
    .src_re_i     (io_div4_meas_ctrl_shadowed_re),
    .src_wd_i     (reg_wdata[15:0]),
    .src_busy_o   (io_div4_meas_ctrl_shadowed_busy),
    .src_qs_o     (io_div4_meas_ctrl_shadowed_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (io_div4_io_div4_meas_ctrl_shadowed_qs),
    .dst_we_o     (io_div4_io_div4_meas_ctrl_shadowed_we),
    .dst_re_o     (io_div4_io_div4_meas_ctrl_shadowed_re),
    .dst_regwen_o (io_div4_io_div4_meas_ctrl_shadowed_regwen),
    .dst_wd_o     (io_div4_io_div4_meas_ctrl_shadowed_wdata)
  );
  assign unused_io_div4_io_div4_meas_ctrl_shadowed_wdata =
      ^io_div4_io_div4_meas_ctrl_shadowed_wdata;

  logic [3:0]  main_main_meas_ctrl_en_ds_int;
  logic [3:0]  main_main_meas_ctrl_en_qs_int;
  logic [3:0] main_main_meas_ctrl_en_ds;
  logic main_main_meas_ctrl_en_qe;
  logic [3:0] main_main_meas_ctrl_en_qs;
  logic [3:0] main_main_meas_ctrl_en_wdata;
  logic main_main_meas_ctrl_en_we;
  logic unused_main_main_meas_ctrl_en_wdata;
  logic main_main_meas_ctrl_en_regwen;

  always_comb begin
    main_main_meas_ctrl_en_qs = 4'h9;
    main_main_meas_ctrl_en_ds = 4'h9;
    main_main_meas_ctrl_en_ds = main_main_meas_ctrl_en_ds_int;
    main_main_meas_ctrl_en_qs = main_main_meas_ctrl_en_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(4),
    .ResetVal(4'h9),
    .BitMask(4'hf),
    .DstWrReq(1)
  ) u_main_meas_ctrl_en_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_main_i),
    .rst_dst_ni   (rst_main_ni),
    .src_regwen_i (measure_ctrl_regwen_qs),
    .src_we_i     (main_meas_ctrl_en_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[3:0]),
    .src_busy_o   (main_meas_ctrl_en_busy),
    .src_qs_o     (main_meas_ctrl_en_qs), // for software read back
    .dst_update_i (main_main_meas_ctrl_en_qe),
    .dst_ds_i     (main_main_meas_ctrl_en_ds),
    .dst_qs_i     (main_main_meas_ctrl_en_qs),
    .dst_we_o     (main_main_meas_ctrl_en_we),
    .dst_re_o     (),
    .dst_regwen_o (main_main_meas_ctrl_en_regwen),
    .dst_wd_o     (main_main_meas_ctrl_en_wdata)
  );
  assign unused_main_main_meas_ctrl_en_wdata =
      ^main_main_meas_ctrl_en_wdata;

  logic [9:0]  main_main_meas_ctrl_shadowed_hi_qs_int;
  logic [9:0]  main_main_meas_ctrl_shadowed_lo_qs_int;
  logic [19:0] main_main_meas_ctrl_shadowed_qs;
  logic [19:0] main_main_meas_ctrl_shadowed_wdata;
  logic main_main_meas_ctrl_shadowed_we;
  logic unused_main_main_meas_ctrl_shadowed_wdata;
  logic main_main_meas_ctrl_shadowed_re;
  logic main_main_meas_ctrl_shadowed_regwen;

  always_comb begin
    main_main_meas_ctrl_shadowed_qs = 20'h7a9fe;
    main_main_meas_ctrl_shadowed_qs[9:0] = main_main_meas_ctrl_shadowed_hi_qs_int;
    main_main_meas_ctrl_shadowed_qs[19:10] = main_main_meas_ctrl_shadowed_lo_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(20),
    .ResetVal(20'h7a9fe),
    .BitMask(20'hfffff),
    .DstWrReq(0)
  ) u_main_meas_ctrl_shadowed_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_main_i),
    .rst_dst_ni   (rst_main_ni),
    .src_regwen_i (measure_ctrl_regwen_qs),
    .src_we_i     (main_meas_ctrl_shadowed_we),
    .src_re_i     (main_meas_ctrl_shadowed_re),
    .src_wd_i     (reg_wdata[19:0]),
    .src_busy_o   (main_meas_ctrl_shadowed_busy),
    .src_qs_o     (main_meas_ctrl_shadowed_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (main_main_meas_ctrl_shadowed_qs),
    .dst_we_o     (main_main_meas_ctrl_shadowed_we),
    .dst_re_o     (main_main_meas_ctrl_shadowed_re),
    .dst_regwen_o (main_main_meas_ctrl_shadowed_regwen),
    .dst_wd_o     (main_main_meas_ctrl_shadowed_wdata)
  );
  assign unused_main_main_meas_ctrl_shadowed_wdata =
      ^main_main_meas_ctrl_shadowed_wdata;

  logic [3:0]  usb_usb_meas_ctrl_en_ds_int;
  logic [3:0]  usb_usb_meas_ctrl_en_qs_int;
  logic [3:0] usb_usb_meas_ctrl_en_ds;
  logic usb_usb_meas_ctrl_en_qe;
  logic [3:0] usb_usb_meas_ctrl_en_qs;
  logic [3:0] usb_usb_meas_ctrl_en_wdata;
  logic usb_usb_meas_ctrl_en_we;
  logic unused_usb_usb_meas_ctrl_en_wdata;
  logic usb_usb_meas_ctrl_en_regwen;

  always_comb begin
    usb_usb_meas_ctrl_en_qs = 4'h9;
    usb_usb_meas_ctrl_en_ds = 4'h9;
    usb_usb_meas_ctrl_en_ds = usb_usb_meas_ctrl_en_ds_int;
    usb_usb_meas_ctrl_en_qs = usb_usb_meas_ctrl_en_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(4),
    .ResetVal(4'h9),
    .BitMask(4'hf),
    .DstWrReq(1)
  ) u_usb_meas_ctrl_en_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_usb_i),
    .rst_dst_ni   (rst_usb_ni),
    .src_regwen_i (measure_ctrl_regwen_qs),
    .src_we_i     (usb_meas_ctrl_en_we),
    .src_re_i     ('0),
    .src_wd_i     (reg_wdata[3:0]),
    .src_busy_o   (usb_meas_ctrl_en_busy),
    .src_qs_o     (usb_meas_ctrl_en_qs), // for software read back
    .dst_update_i (usb_usb_meas_ctrl_en_qe),
    .dst_ds_i     (usb_usb_meas_ctrl_en_ds),
    .dst_qs_i     (usb_usb_meas_ctrl_en_qs),
    .dst_we_o     (usb_usb_meas_ctrl_en_we),
    .dst_re_o     (),
    .dst_regwen_o (usb_usb_meas_ctrl_en_regwen),
    .dst_wd_o     (usb_usb_meas_ctrl_en_wdata)
  );
  assign unused_usb_usb_meas_ctrl_en_wdata =
      ^usb_usb_meas_ctrl_en_wdata;

  logic [8:0]  usb_usb_meas_ctrl_shadowed_hi_qs_int;
  logic [8:0]  usb_usb_meas_ctrl_shadowed_lo_qs_int;
  logic [17:0] usb_usb_meas_ctrl_shadowed_qs;
  logic [17:0] usb_usb_meas_ctrl_shadowed_wdata;
  logic usb_usb_meas_ctrl_shadowed_we;
  logic unused_usb_usb_meas_ctrl_shadowed_wdata;
  logic usb_usb_meas_ctrl_shadowed_re;
  logic usb_usb_meas_ctrl_shadowed_regwen;

  always_comb begin
    usb_usb_meas_ctrl_shadowed_qs = 18'h1ccfa;
    usb_usb_meas_ctrl_shadowed_qs[8:0] = usb_usb_meas_ctrl_shadowed_hi_qs_int;
    usb_usb_meas_ctrl_shadowed_qs[17:9] = usb_usb_meas_ctrl_shadowed_lo_qs_int;
  end

  prim_reg_cdc #(
    .DataWidth(18),
    .ResetVal(18'h1ccfa),
    .BitMask(18'h3ffff),
    .DstWrReq(0)
  ) u_usb_meas_ctrl_shadowed_cdc (
    .clk_src_i    (clk_i),
    .rst_src_ni   (rst_ni),
    .clk_dst_i    (clk_usb_i),
    .rst_dst_ni   (rst_usb_ni),
    .src_regwen_i (measure_ctrl_regwen_qs),
    .src_we_i     (usb_meas_ctrl_shadowed_we),
    .src_re_i     (usb_meas_ctrl_shadowed_re),
    .src_wd_i     (reg_wdata[17:0]),
    .src_busy_o   (usb_meas_ctrl_shadowed_busy),
    .src_qs_o     (usb_meas_ctrl_shadowed_qs), // for software read back
    .dst_update_i ('0),
    .dst_ds_i     ('0),
    .dst_qs_i     (usb_usb_meas_ctrl_shadowed_qs),
    .dst_we_o     (usb_usb_meas_ctrl_shadowed_we),
    .dst_re_o     (usb_usb_meas_ctrl_shadowed_re),
    .dst_regwen_o (usb_usb_meas_ctrl_shadowed_regwen),
    .dst_wd_o     (usb_usb_meas_ctrl_shadowed_wdata)
  );
  assign unused_usb_usb_meas_ctrl_shadowed_wdata =
      ^usb_usb_meas_ctrl_shadowed_wdata;

  // Register instances
  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [1:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  //   F[recov_fault]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_recov_fault (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_recov_fault_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.recov_fault.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.recov_fault.qe = alert_test_qe;

  //   F[fatal_fault]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_fault (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_fault_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[1]),
    .q      (reg2hw.alert_test.fatal_fault.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_fault.qe = alert_test_qe;


  // R[extclk_ctrl_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_extclk_ctrl_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (extclk_ctrl_regwen_we),
    .wd     (extclk_ctrl_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (extclk_ctrl_regwen_qs)
  );


  // R[extclk_ctrl]: V(False)
  // Create REGWEN-gated WE signal
  logic extclk_ctrl_gated_we;
  assign extclk_ctrl_gated_we = extclk_ctrl_we & extclk_ctrl_regwen_qs;
  //   F[sel]: 3:0
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_extclk_ctrl_sel (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (extclk_ctrl_gated_we),
    .wd     (extclk_ctrl_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.extclk_ctrl.sel.q),
    .ds     (),

    // to register interface (read)
    .qs     (extclk_ctrl_sel_qs)
  );

  //   F[hi_speed_sel]: 7:4
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_extclk_ctrl_hi_speed_sel (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (extclk_ctrl_gated_we),
    .wd     (extclk_ctrl_hi_speed_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.extclk_ctrl.hi_speed_sel.q),
    .ds     (),

    // to register interface (read)
    .qs     (extclk_ctrl_hi_speed_sel_qs)
  );


  // R[extclk_status]: V(True)
  prim_subreg_ext #(
    .DW    (4)
  ) u_extclk_status (
    .re     (extclk_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.extclk_status.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (extclk_status_qs)
  );


  // R[jitter_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_jitter_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (jitter_regwen_we),
    .wd     (jitter_regwen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (jitter_regwen_qs)
  );


  // R[jitter_enable]: V(False)
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_jitter_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (jitter_enable_we),
    .wd     (jitter_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jitter_enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (jitter_enable_qs)
  );


  // R[clk_enables]: V(False)
  //   F[clk_io_div4_peri_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_clk_enables_clk_io_div4_peri_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (clk_enables_we),
    .wd     (clk_enables_clk_io_div4_peri_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clk_enables.clk_io_div4_peri_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (clk_enables_clk_io_div4_peri_en_qs)
  );

  //   F[clk_io_div2_peri_en]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_clk_enables_clk_io_div2_peri_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (clk_enables_we),
    .wd     (clk_enables_clk_io_div2_peri_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clk_enables.clk_io_div2_peri_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (clk_enables_clk_io_div2_peri_en_qs)
  );

  //   F[clk_io_peri_en]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_clk_enables_clk_io_peri_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (clk_enables_we),
    .wd     (clk_enables_clk_io_peri_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clk_enables.clk_io_peri_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (clk_enables_clk_io_peri_en_qs)
  );

  //   F[clk_usb_peri_en]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_clk_enables_clk_usb_peri_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (clk_enables_we),
    .wd     (clk_enables_clk_usb_peri_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clk_enables.clk_usb_peri_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (clk_enables_clk_usb_peri_en_qs)
  );


  // R[clk_hints]: V(False)
  //   F[clk_main_aes_hint]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_clk_hints_clk_main_aes_hint (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (clk_hints_we),
    .wd     (clk_hints_clk_main_aes_hint_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clk_hints.clk_main_aes_hint.q),
    .ds     (),

    // to register interface (read)
    .qs     (clk_hints_clk_main_aes_hint_qs)
  );

  //   F[clk_main_hmac_hint]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_clk_hints_clk_main_hmac_hint (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (clk_hints_we),
    .wd     (clk_hints_clk_main_hmac_hint_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clk_hints.clk_main_hmac_hint.q),
    .ds     (),

    // to register interface (read)
    .qs     (clk_hints_clk_main_hmac_hint_qs)
  );

  //   F[clk_main_kmac_hint]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_clk_hints_clk_main_kmac_hint (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (clk_hints_we),
    .wd     (clk_hints_clk_main_kmac_hint_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clk_hints.clk_main_kmac_hint.q),
    .ds     (),

    // to register interface (read)
    .qs     (clk_hints_clk_main_kmac_hint_qs)
  );

  //   F[clk_main_otbn_hint]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_clk_hints_clk_main_otbn_hint (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (clk_hints_we),
    .wd     (clk_hints_clk_main_otbn_hint_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clk_hints.clk_main_otbn_hint.q),
    .ds     (),

    // to register interface (read)
    .qs     (clk_hints_clk_main_otbn_hint_qs)
  );


  // R[clk_hints_status]: V(False)
  //   F[clk_main_aes_val]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_clk_hints_status_clk_main_aes_val (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.clk_hints_status.clk_main_aes_val.de),
    .d      (hw2reg.clk_hints_status.clk_main_aes_val.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (clk_hints_status_clk_main_aes_val_qs)
  );

  //   F[clk_main_hmac_val]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_clk_hints_status_clk_main_hmac_val (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.clk_hints_status.clk_main_hmac_val.de),
    .d      (hw2reg.clk_hints_status.clk_main_hmac_val.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (clk_hints_status_clk_main_hmac_val_qs)
  );

  //   F[clk_main_kmac_val]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_clk_hints_status_clk_main_kmac_val (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.clk_hints_status.clk_main_kmac_val.de),
    .d      (hw2reg.clk_hints_status.clk_main_kmac_val.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (clk_hints_status_clk_main_kmac_val_qs)
  );

  //   F[clk_main_otbn_val]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h1)
  ) u_clk_hints_status_clk_main_otbn_val (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.clk_hints_status.clk_main_otbn_val.de),
    .d      (hw2reg.clk_hints_status.clk_main_otbn_val.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (clk_hints_status_clk_main_otbn_val_qs)
  );


  // R[measure_ctrl_regwen]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW0C),
    .RESVAL  (1'h1)
  ) u_measure_ctrl_regwen (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (measure_ctrl_regwen_we),
    .wd     (measure_ctrl_regwen_wd),

    // from internal hardware
    .de     (hw2reg.measure_ctrl_regwen.de),
    .d      (hw2reg.measure_ctrl_regwen.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.measure_ctrl_regwen.q),
    .ds     (),

    // to register interface (read)
    .qs     (measure_ctrl_regwen_qs)
  );


  // R[io_meas_ctrl_en]: V(False)
  logic [0:0] io_meas_ctrl_en_flds_we;
  assign io_io_meas_ctrl_en_qe = |io_meas_ctrl_en_flds_we;
  // Create REGWEN-gated WE signal
  logic io_io_meas_ctrl_en_gated_we;
  assign io_io_meas_ctrl_en_gated_we = io_io_meas_ctrl_en_we & io_io_meas_ctrl_en_regwen;
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_io_meas_ctrl_en (
    .clk_i   (clk_io_i),
    .rst_ni  (rst_io_ni),

    // from register interface
    .we     (io_io_meas_ctrl_en_gated_we),
    .wd     (io_io_meas_ctrl_en_wdata[3:0]),

    // from internal hardware
    .de     (hw2reg.io_meas_ctrl_en.de),
    .d      (hw2reg.io_meas_ctrl_en.d),

    // to internal hardware
    .qe     (io_meas_ctrl_en_flds_we[0]),
    .q      (reg2hw.io_meas_ctrl_en.q),
    .ds     (io_io_meas_ctrl_en_ds_int),

    // to register interface (read)
    .qs     (io_io_meas_ctrl_en_qs_int)
  );


  // R[io_meas_ctrl_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic io_io_meas_ctrl_shadowed_gated_we;
  assign io_io_meas_ctrl_shadowed_gated_we =
    io_io_meas_ctrl_shadowed_we & io_io_meas_ctrl_shadowed_regwen;
  //   F[hi]: 9:0
  logic async_io_meas_ctrl_shadowed_hi_err_update;
  logic async_io_meas_ctrl_shadowed_hi_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_io_meas_ctrl_shadowed_hi_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_io_meas_ctrl_shadowed_hi_err_storage),
    .q_o(io_meas_ctrl_shadowed_hi_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_io_meas_ctrl_shadowed_hi_err_update_sync (
    .clk_src_i(clk_io_i),
    .rst_src_ni(rst_io_ni),
    .src_pulse_i(async_io_meas_ctrl_shadowed_hi_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(io_meas_ctrl_shadowed_hi_update_err)
  );
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h1ea)
  ) u_io_meas_ctrl_shadowed_hi (
    .clk_i   (clk_io_i),
    .rst_ni  (rst_io_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_io_meas_ctrl_shadowed_re),
    .we     (io_io_meas_ctrl_shadowed_gated_we),
    .wd     (io_io_meas_ctrl_shadowed_wdata[9:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.io_meas_ctrl_shadowed.hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_io_meas_ctrl_shadowed_hi_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_io_meas_ctrl_shadowed_hi_err_update),
    .err_storage (async_io_meas_ctrl_shadowed_hi_err_storage)
  );

  //   F[lo]: 19:10
  logic async_io_meas_ctrl_shadowed_lo_err_update;
  logic async_io_meas_ctrl_shadowed_lo_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_io_meas_ctrl_shadowed_lo_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_io_meas_ctrl_shadowed_lo_err_storage),
    .q_o(io_meas_ctrl_shadowed_lo_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_io_meas_ctrl_shadowed_lo_err_update_sync (
    .clk_src_i(clk_io_i),
    .rst_src_ni(rst_io_ni),
    .src_pulse_i(async_io_meas_ctrl_shadowed_lo_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(io_meas_ctrl_shadowed_lo_update_err)
  );
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h1d6)
  ) u_io_meas_ctrl_shadowed_lo (
    .clk_i   (clk_io_i),
    .rst_ni  (rst_io_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_io_meas_ctrl_shadowed_re),
    .we     (io_io_meas_ctrl_shadowed_gated_we),
    .wd     (io_io_meas_ctrl_shadowed_wdata[19:10]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.io_meas_ctrl_shadowed.lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_io_meas_ctrl_shadowed_lo_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_io_meas_ctrl_shadowed_lo_err_update),
    .err_storage (async_io_meas_ctrl_shadowed_lo_err_storage)
  );


  // R[io_div2_meas_ctrl_en]: V(False)
  logic [0:0] io_div2_meas_ctrl_en_flds_we;
  assign io_div2_io_div2_meas_ctrl_en_qe = |io_div2_meas_ctrl_en_flds_we;
  // Create REGWEN-gated WE signal
  logic io_div2_io_div2_meas_ctrl_en_gated_we;
  assign io_div2_io_div2_meas_ctrl_en_gated_we =
    io_div2_io_div2_meas_ctrl_en_we & io_div2_io_div2_meas_ctrl_en_regwen;
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_io_div2_meas_ctrl_en (
    .clk_i   (clk_io_div2_i),
    .rst_ni  (rst_io_div2_ni),

    // from register interface
    .we     (io_div2_io_div2_meas_ctrl_en_gated_we),
    .wd     (io_div2_io_div2_meas_ctrl_en_wdata[3:0]),

    // from internal hardware
    .de     (hw2reg.io_div2_meas_ctrl_en.de),
    .d      (hw2reg.io_div2_meas_ctrl_en.d),

    // to internal hardware
    .qe     (io_div2_meas_ctrl_en_flds_we[0]),
    .q      (reg2hw.io_div2_meas_ctrl_en.q),
    .ds     (io_div2_io_div2_meas_ctrl_en_ds_int),

    // to register interface (read)
    .qs     (io_div2_io_div2_meas_ctrl_en_qs_int)
  );


  // R[io_div2_meas_ctrl_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic io_div2_io_div2_meas_ctrl_shadowed_gated_we;
  assign io_div2_io_div2_meas_ctrl_shadowed_gated_we =
    io_div2_io_div2_meas_ctrl_shadowed_we & io_div2_io_div2_meas_ctrl_shadowed_regwen;
  //   F[hi]: 8:0
  logic async_io_div2_meas_ctrl_shadowed_hi_err_update;
  logic async_io_div2_meas_ctrl_shadowed_hi_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_io_div2_meas_ctrl_shadowed_hi_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_io_div2_meas_ctrl_shadowed_hi_err_storage),
    .q_o(io_div2_meas_ctrl_shadowed_hi_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_io_div2_meas_ctrl_shadowed_hi_err_update_sync (
    .clk_src_i(clk_io_div2_i),
    .rst_src_ni(rst_io_div2_ni),
    .src_pulse_i(async_io_div2_meas_ctrl_shadowed_hi_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(io_div2_meas_ctrl_shadowed_hi_update_err)
  );
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'hfa)
  ) u_io_div2_meas_ctrl_shadowed_hi (
    .clk_i   (clk_io_div2_i),
    .rst_ni  (rst_io_div2_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_div2_io_div2_meas_ctrl_shadowed_re),
    .we     (io_div2_io_div2_meas_ctrl_shadowed_gated_we),
    .wd     (io_div2_io_div2_meas_ctrl_shadowed_wdata[8:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.io_div2_meas_ctrl_shadowed.hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_div2_io_div2_meas_ctrl_shadowed_hi_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_io_div2_meas_ctrl_shadowed_hi_err_update),
    .err_storage (async_io_div2_meas_ctrl_shadowed_hi_err_storage)
  );

  //   F[lo]: 17:9
  logic async_io_div2_meas_ctrl_shadowed_lo_err_update;
  logic async_io_div2_meas_ctrl_shadowed_lo_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_io_div2_meas_ctrl_shadowed_lo_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_io_div2_meas_ctrl_shadowed_lo_err_storage),
    .q_o(io_div2_meas_ctrl_shadowed_lo_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_io_div2_meas_ctrl_shadowed_lo_err_update_sync (
    .clk_src_i(clk_io_div2_i),
    .rst_src_ni(rst_io_div2_ni),
    .src_pulse_i(async_io_div2_meas_ctrl_shadowed_lo_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(io_div2_meas_ctrl_shadowed_lo_update_err)
  );
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'he6)
  ) u_io_div2_meas_ctrl_shadowed_lo (
    .clk_i   (clk_io_div2_i),
    .rst_ni  (rst_io_div2_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_div2_io_div2_meas_ctrl_shadowed_re),
    .we     (io_div2_io_div2_meas_ctrl_shadowed_gated_we),
    .wd     (io_div2_io_div2_meas_ctrl_shadowed_wdata[17:9]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.io_div2_meas_ctrl_shadowed.lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_div2_io_div2_meas_ctrl_shadowed_lo_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_io_div2_meas_ctrl_shadowed_lo_err_update),
    .err_storage (async_io_div2_meas_ctrl_shadowed_lo_err_storage)
  );


  // R[io_div4_meas_ctrl_en]: V(False)
  logic [0:0] io_div4_meas_ctrl_en_flds_we;
  assign io_div4_io_div4_meas_ctrl_en_qe = |io_div4_meas_ctrl_en_flds_we;
  // Create REGWEN-gated WE signal
  logic io_div4_io_div4_meas_ctrl_en_gated_we;
  assign io_div4_io_div4_meas_ctrl_en_gated_we =
    io_div4_io_div4_meas_ctrl_en_we & io_div4_io_div4_meas_ctrl_en_regwen;
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_io_div4_meas_ctrl_en (
    .clk_i   (clk_io_div4_i),
    .rst_ni  (rst_io_div4_ni),

    // from register interface
    .we     (io_div4_io_div4_meas_ctrl_en_gated_we),
    .wd     (io_div4_io_div4_meas_ctrl_en_wdata[3:0]),

    // from internal hardware
    .de     (hw2reg.io_div4_meas_ctrl_en.de),
    .d      (hw2reg.io_div4_meas_ctrl_en.d),

    // to internal hardware
    .qe     (io_div4_meas_ctrl_en_flds_we[0]),
    .q      (reg2hw.io_div4_meas_ctrl_en.q),
    .ds     (io_div4_io_div4_meas_ctrl_en_ds_int),

    // to register interface (read)
    .qs     (io_div4_io_div4_meas_ctrl_en_qs_int)
  );


  // R[io_div4_meas_ctrl_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic io_div4_io_div4_meas_ctrl_shadowed_gated_we;
  assign io_div4_io_div4_meas_ctrl_shadowed_gated_we =
    io_div4_io_div4_meas_ctrl_shadowed_we & io_div4_io_div4_meas_ctrl_shadowed_regwen;
  //   F[hi]: 7:0
  logic async_io_div4_meas_ctrl_shadowed_hi_err_update;
  logic async_io_div4_meas_ctrl_shadowed_hi_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_io_div4_meas_ctrl_shadowed_hi_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_io_div4_meas_ctrl_shadowed_hi_err_storage),
    .q_o(io_div4_meas_ctrl_shadowed_hi_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_io_div4_meas_ctrl_shadowed_hi_err_update_sync (
    .clk_src_i(clk_io_div4_i),
    .rst_src_ni(rst_io_div4_ni),
    .src_pulse_i(async_io_div4_meas_ctrl_shadowed_hi_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(io_div4_meas_ctrl_shadowed_hi_update_err)
  );
  prim_subreg_shadow #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h82)
  ) u_io_div4_meas_ctrl_shadowed_hi (
    .clk_i   (clk_io_div4_i),
    .rst_ni  (rst_io_div4_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_div4_io_div4_meas_ctrl_shadowed_re),
    .we     (io_div4_io_div4_meas_ctrl_shadowed_gated_we),
    .wd     (io_div4_io_div4_meas_ctrl_shadowed_wdata[7:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.io_div4_meas_ctrl_shadowed.hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_div4_io_div4_meas_ctrl_shadowed_hi_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_io_div4_meas_ctrl_shadowed_hi_err_update),
    .err_storage (async_io_div4_meas_ctrl_shadowed_hi_err_storage)
  );

  //   F[lo]: 15:8
  logic async_io_div4_meas_ctrl_shadowed_lo_err_update;
  logic async_io_div4_meas_ctrl_shadowed_lo_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_io_div4_meas_ctrl_shadowed_lo_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_io_div4_meas_ctrl_shadowed_lo_err_storage),
    .q_o(io_div4_meas_ctrl_shadowed_lo_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_io_div4_meas_ctrl_shadowed_lo_err_update_sync (
    .clk_src_i(clk_io_div4_i),
    .rst_src_ni(rst_io_div4_ni),
    .src_pulse_i(async_io_div4_meas_ctrl_shadowed_lo_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(io_div4_meas_ctrl_shadowed_lo_update_err)
  );
  prim_subreg_shadow #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h6e)
  ) u_io_div4_meas_ctrl_shadowed_lo (
    .clk_i   (clk_io_div4_i),
    .rst_ni  (rst_io_div4_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (io_div4_io_div4_meas_ctrl_shadowed_re),
    .we     (io_div4_io_div4_meas_ctrl_shadowed_gated_we),
    .wd     (io_div4_io_div4_meas_ctrl_shadowed_wdata[15:8]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.io_div4_meas_ctrl_shadowed.lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (io_div4_io_div4_meas_ctrl_shadowed_lo_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_io_div4_meas_ctrl_shadowed_lo_err_update),
    .err_storage (async_io_div4_meas_ctrl_shadowed_lo_err_storage)
  );


  // R[main_meas_ctrl_en]: V(False)
  logic [0:0] main_meas_ctrl_en_flds_we;
  assign main_main_meas_ctrl_en_qe = |main_meas_ctrl_en_flds_we;
  // Create REGWEN-gated WE signal
  logic main_main_meas_ctrl_en_gated_we;
  assign main_main_meas_ctrl_en_gated_we =
    main_main_meas_ctrl_en_we & main_main_meas_ctrl_en_regwen;
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_main_meas_ctrl_en (
    .clk_i   (clk_main_i),
    .rst_ni  (rst_main_ni),

    // from register interface
    .we     (main_main_meas_ctrl_en_gated_we),
    .wd     (main_main_meas_ctrl_en_wdata[3:0]),

    // from internal hardware
    .de     (hw2reg.main_meas_ctrl_en.de),
    .d      (hw2reg.main_meas_ctrl_en.d),

    // to internal hardware
    .qe     (main_meas_ctrl_en_flds_we[0]),
    .q      (reg2hw.main_meas_ctrl_en.q),
    .ds     (main_main_meas_ctrl_en_ds_int),

    // to register interface (read)
    .qs     (main_main_meas_ctrl_en_qs_int)
  );


  // R[main_meas_ctrl_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic main_main_meas_ctrl_shadowed_gated_we;
  assign main_main_meas_ctrl_shadowed_gated_we =
    main_main_meas_ctrl_shadowed_we & main_main_meas_ctrl_shadowed_regwen;
  //   F[hi]: 9:0
  logic async_main_meas_ctrl_shadowed_hi_err_update;
  logic async_main_meas_ctrl_shadowed_hi_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_main_meas_ctrl_shadowed_hi_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_main_meas_ctrl_shadowed_hi_err_storage),
    .q_o(main_meas_ctrl_shadowed_hi_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_main_meas_ctrl_shadowed_hi_err_update_sync (
    .clk_src_i(clk_main_i),
    .rst_src_ni(rst_main_ni),
    .src_pulse_i(async_main_meas_ctrl_shadowed_hi_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(main_meas_ctrl_shadowed_hi_update_err)
  );
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h1fe)
  ) u_main_meas_ctrl_shadowed_hi (
    .clk_i   (clk_main_i),
    .rst_ni  (rst_main_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (main_main_meas_ctrl_shadowed_re),
    .we     (main_main_meas_ctrl_shadowed_gated_we),
    .wd     (main_main_meas_ctrl_shadowed_wdata[9:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.main_meas_ctrl_shadowed.hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (main_main_meas_ctrl_shadowed_hi_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_main_meas_ctrl_shadowed_hi_err_update),
    .err_storage (async_main_meas_ctrl_shadowed_hi_err_storage)
  );

  //   F[lo]: 19:10
  logic async_main_meas_ctrl_shadowed_lo_err_update;
  logic async_main_meas_ctrl_shadowed_lo_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_main_meas_ctrl_shadowed_lo_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_main_meas_ctrl_shadowed_lo_err_storage),
    .q_o(main_meas_ctrl_shadowed_lo_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_main_meas_ctrl_shadowed_lo_err_update_sync (
    .clk_src_i(clk_main_i),
    .rst_src_ni(rst_main_ni),
    .src_pulse_i(async_main_meas_ctrl_shadowed_lo_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(main_meas_ctrl_shadowed_lo_update_err)
  );
  prim_subreg_shadow #(
    .DW      (10),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (10'h1ea)
  ) u_main_meas_ctrl_shadowed_lo (
    .clk_i   (clk_main_i),
    .rst_ni  (rst_main_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (main_main_meas_ctrl_shadowed_re),
    .we     (main_main_meas_ctrl_shadowed_gated_we),
    .wd     (main_main_meas_ctrl_shadowed_wdata[19:10]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.main_meas_ctrl_shadowed.lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (main_main_meas_ctrl_shadowed_lo_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_main_meas_ctrl_shadowed_lo_err_update),
    .err_storage (async_main_meas_ctrl_shadowed_lo_err_storage)
  );


  // R[usb_meas_ctrl_en]: V(False)
  logic [0:0] usb_meas_ctrl_en_flds_we;
  assign usb_usb_meas_ctrl_en_qe = |usb_meas_ctrl_en_flds_we;
  // Create REGWEN-gated WE signal
  logic usb_usb_meas_ctrl_en_gated_we;
  assign usb_usb_meas_ctrl_en_gated_we = usb_usb_meas_ctrl_en_we & usb_usb_meas_ctrl_en_regwen;
  prim_subreg #(
    .DW      (4),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (4'h9)
  ) u_usb_meas_ctrl_en (
    .clk_i   (clk_usb_i),
    .rst_ni  (rst_usb_ni),

    // from register interface
    .we     (usb_usb_meas_ctrl_en_gated_we),
    .wd     (usb_usb_meas_ctrl_en_wdata[3:0]),

    // from internal hardware
    .de     (hw2reg.usb_meas_ctrl_en.de),
    .d      (hw2reg.usb_meas_ctrl_en.d),

    // to internal hardware
    .qe     (usb_meas_ctrl_en_flds_we[0]),
    .q      (reg2hw.usb_meas_ctrl_en.q),
    .ds     (usb_usb_meas_ctrl_en_ds_int),

    // to register interface (read)
    .qs     (usb_usb_meas_ctrl_en_qs_int)
  );


  // R[usb_meas_ctrl_shadowed]: V(False)
  // Create REGWEN-gated WE signal
  logic usb_usb_meas_ctrl_shadowed_gated_we;
  assign usb_usb_meas_ctrl_shadowed_gated_we =
    usb_usb_meas_ctrl_shadowed_we & usb_usb_meas_ctrl_shadowed_regwen;
  //   F[hi]: 8:0
  logic async_usb_meas_ctrl_shadowed_hi_err_update;
  logic async_usb_meas_ctrl_shadowed_hi_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_usb_meas_ctrl_shadowed_hi_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_usb_meas_ctrl_shadowed_hi_err_storage),
    .q_o(usb_meas_ctrl_shadowed_hi_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_usb_meas_ctrl_shadowed_hi_err_update_sync (
    .clk_src_i(clk_usb_i),
    .rst_src_ni(rst_usb_ni),
    .src_pulse_i(async_usb_meas_ctrl_shadowed_hi_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(usb_meas_ctrl_shadowed_hi_update_err)
  );
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'hfa)
  ) u_usb_meas_ctrl_shadowed_hi (
    .clk_i   (clk_usb_i),
    .rst_ni  (rst_usb_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (usb_usb_meas_ctrl_shadowed_re),
    .we     (usb_usb_meas_ctrl_shadowed_gated_we),
    .wd     (usb_usb_meas_ctrl_shadowed_wdata[8:0]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.usb_meas_ctrl_shadowed.hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (usb_usb_meas_ctrl_shadowed_hi_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_usb_meas_ctrl_shadowed_hi_err_update),
    .err_storage (async_usb_meas_ctrl_shadowed_hi_err_storage)
  );

  //   F[lo]: 17:9
  logic async_usb_meas_ctrl_shadowed_lo_err_update;
  logic async_usb_meas_ctrl_shadowed_lo_err_storage;

  // storage error is persistent and can be sampled at any time
  prim_flop_2sync #(
    .Width(1),
    .ResetValue('0)
  ) u_usb_meas_ctrl_shadowed_lo_err_storage_sync (
    .clk_i,
    .rst_ni,
    .d_i(async_usb_meas_ctrl_shadowed_lo_err_storage),
    .q_o(usb_meas_ctrl_shadowed_lo_storage_err)
  );

  // update error is transient and must be immediately captured
  prim_pulse_sync u_usb_meas_ctrl_shadowed_lo_err_update_sync (
    .clk_src_i(clk_usb_i),
    .rst_src_ni(rst_usb_ni),
    .src_pulse_i(async_usb_meas_ctrl_shadowed_lo_err_update),
    .clk_dst_i(clk_i),
    .rst_dst_ni(rst_ni),
    .dst_pulse_o(usb_meas_ctrl_shadowed_lo_update_err)
  );
  prim_subreg_shadow #(
    .DW      (9),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (9'he6)
  ) u_usb_meas_ctrl_shadowed_lo (
    .clk_i   (clk_usb_i),
    .rst_ni  (rst_usb_ni),
    .rst_shadowed_ni (rst_shadowed_ni),

    // from register interface
    .re     (usb_usb_meas_ctrl_shadowed_re),
    .we     (usb_usb_meas_ctrl_shadowed_gated_we),
    .wd     (usb_usb_meas_ctrl_shadowed_wdata[17:9]),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.usb_meas_ctrl_shadowed.lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (usb_usb_meas_ctrl_shadowed_lo_qs_int),

    // Shadow register phase. Relevant for hwext only.
    .phase  (),

    // Shadow register error conditions
    .err_update  (async_usb_meas_ctrl_shadowed_lo_err_update),
    .err_storage (async_usb_meas_ctrl_shadowed_lo_err_storage)
  );


  // R[recov_err_code]: V(False)
  //   F[shadow_update_err]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_shadow_update_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_shadow_update_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.shadow_update_err.de),
    .d      (hw2reg.recov_err_code.shadow_update_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_shadow_update_err_qs)
  );

  //   F[io_measure_err]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_io_measure_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_io_measure_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.io_measure_err.de),
    .d      (hw2reg.recov_err_code.io_measure_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_io_measure_err_qs)
  );

  //   F[io_div2_measure_err]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_io_div2_measure_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_io_div2_measure_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.io_div2_measure_err.de),
    .d      (hw2reg.recov_err_code.io_div2_measure_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_io_div2_measure_err_qs)
  );

  //   F[io_div4_measure_err]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_io_div4_measure_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_io_div4_measure_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.io_div4_measure_err.de),
    .d      (hw2reg.recov_err_code.io_div4_measure_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_io_div4_measure_err_qs)
  );

  //   F[main_measure_err]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_main_measure_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_main_measure_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.main_measure_err.de),
    .d      (hw2reg.recov_err_code.main_measure_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_main_measure_err_qs)
  );

  //   F[usb_measure_err]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_usb_measure_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_usb_measure_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.usb_measure_err.de),
    .d      (hw2reg.recov_err_code.usb_measure_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_usb_measure_err_qs)
  );

  //   F[io_timeout_err]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_io_timeout_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_io_timeout_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.io_timeout_err.de),
    .d      (hw2reg.recov_err_code.io_timeout_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_io_timeout_err_qs)
  );

  //   F[io_div2_timeout_err]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_io_div2_timeout_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_io_div2_timeout_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.io_div2_timeout_err.de),
    .d      (hw2reg.recov_err_code.io_div2_timeout_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_io_div2_timeout_err_qs)
  );

  //   F[io_div4_timeout_err]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_io_div4_timeout_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_io_div4_timeout_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.io_div4_timeout_err.de),
    .d      (hw2reg.recov_err_code.io_div4_timeout_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_io_div4_timeout_err_qs)
  );

  //   F[main_timeout_err]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_main_timeout_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_main_timeout_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.main_timeout_err.de),
    .d      (hw2reg.recov_err_code.main_timeout_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_main_timeout_err_qs)
  );

  //   F[usb_timeout_err]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_recov_err_code_usb_timeout_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (recov_err_code_we),
    .wd     (recov_err_code_usb_timeout_err_wd),

    // from internal hardware
    .de     (hw2reg.recov_err_code.usb_timeout_err.de),
    .d      (hw2reg.recov_err_code.usb_timeout_err.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (recov_err_code_usb_timeout_err_qs)
  );


  // R[fatal_err_code]: V(False)
  //   F[reg_intg]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fatal_err_code_reg_intg (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fatal_err_code.reg_intg.de),
    .d      (hw2reg.fatal_err_code.reg_intg.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fatal_err_code.reg_intg.q),
    .ds     (),

    // to register interface (read)
    .qs     (fatal_err_code_reg_intg_qs)
  );

  //   F[idle_cnt]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fatal_err_code_idle_cnt (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fatal_err_code.idle_cnt.de),
    .d      (hw2reg.fatal_err_code.idle_cnt.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fatal_err_code.idle_cnt.q),
    .ds     (),

    // to register interface (read)
    .qs     (fatal_err_code_idle_cnt_qs)
  );

  //   F[shadow_storage_err]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0)
  ) u_fatal_err_code_shadow_storage_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.fatal_err_code.shadow_storage_err.de),
    .d      (hw2reg.fatal_err_code.shadow_storage_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fatal_err_code.shadow_storage_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (fatal_err_code_shadow_storage_err_qs)
  );



  logic [21:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == CLKMGR_ALERT_TEST_OFFSET);
    addr_hit[ 1] = (reg_addr == CLKMGR_EXTCLK_CTRL_REGWEN_OFFSET);
    addr_hit[ 2] = (reg_addr == CLKMGR_EXTCLK_CTRL_OFFSET);
    addr_hit[ 3] = (reg_addr == CLKMGR_EXTCLK_STATUS_OFFSET);
    addr_hit[ 4] = (reg_addr == CLKMGR_JITTER_REGWEN_OFFSET);
    addr_hit[ 5] = (reg_addr == CLKMGR_JITTER_ENABLE_OFFSET);
    addr_hit[ 6] = (reg_addr == CLKMGR_CLK_ENABLES_OFFSET);
    addr_hit[ 7] = (reg_addr == CLKMGR_CLK_HINTS_OFFSET);
    addr_hit[ 8] = (reg_addr == CLKMGR_CLK_HINTS_STATUS_OFFSET);
    addr_hit[ 9] = (reg_addr == CLKMGR_MEASURE_CTRL_REGWEN_OFFSET);
    addr_hit[10] = (reg_addr == CLKMGR_IO_MEAS_CTRL_EN_OFFSET);
    addr_hit[11] = (reg_addr == CLKMGR_IO_MEAS_CTRL_SHADOWED_OFFSET);
    addr_hit[12] = (reg_addr == CLKMGR_IO_DIV2_MEAS_CTRL_EN_OFFSET);
    addr_hit[13] = (reg_addr == CLKMGR_IO_DIV2_MEAS_CTRL_SHADOWED_OFFSET);
    addr_hit[14] = (reg_addr == CLKMGR_IO_DIV4_MEAS_CTRL_EN_OFFSET);
    addr_hit[15] = (reg_addr == CLKMGR_IO_DIV4_MEAS_CTRL_SHADOWED_OFFSET);
    addr_hit[16] = (reg_addr == CLKMGR_MAIN_MEAS_CTRL_EN_OFFSET);
    addr_hit[17] = (reg_addr == CLKMGR_MAIN_MEAS_CTRL_SHADOWED_OFFSET);
    addr_hit[18] = (reg_addr == CLKMGR_USB_MEAS_CTRL_EN_OFFSET);
    addr_hit[19] = (reg_addr == CLKMGR_USB_MEAS_CTRL_SHADOWED_OFFSET);
    addr_hit[20] = (reg_addr == CLKMGR_RECOV_ERR_CODE_OFFSET);
    addr_hit[21] = (reg_addr == CLKMGR_FATAL_ERR_CODE_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(CLKMGR_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(CLKMGR_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(CLKMGR_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(CLKMGR_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(CLKMGR_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(CLKMGR_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(CLKMGR_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(CLKMGR_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(CLKMGR_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(CLKMGR_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(CLKMGR_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(CLKMGR_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(CLKMGR_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(CLKMGR_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(CLKMGR_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(CLKMGR_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(CLKMGR_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(CLKMGR_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(CLKMGR_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(CLKMGR_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(CLKMGR_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(CLKMGR_PERMIT[21] & ~reg_be)))));
  end

  // Generate write-enables
  assign alert_test_we = addr_hit[0] & reg_we & !reg_error;

  assign alert_test_recov_fault_wd = reg_wdata[0];

  assign alert_test_fatal_fault_wd = reg_wdata[1];
  assign extclk_ctrl_regwen_we = addr_hit[1] & reg_we & !reg_error;

  assign extclk_ctrl_regwen_wd = reg_wdata[0];
  assign extclk_ctrl_we = addr_hit[2] & reg_we & !reg_error;

  assign extclk_ctrl_sel_wd = reg_wdata[3:0];

  assign extclk_ctrl_hi_speed_sel_wd = reg_wdata[7:4];
  assign extclk_status_re = addr_hit[3] & reg_re & !reg_error;
  assign jitter_regwen_we = addr_hit[4] & reg_we & !reg_error;

  assign jitter_regwen_wd = reg_wdata[0];
  assign jitter_enable_we = addr_hit[5] & reg_we & !reg_error;

  assign jitter_enable_wd = reg_wdata[3:0];
  assign clk_enables_we = addr_hit[6] & reg_we & !reg_error;

  assign clk_enables_clk_io_div4_peri_en_wd = reg_wdata[0];

  assign clk_enables_clk_io_div2_peri_en_wd = reg_wdata[1];

  assign clk_enables_clk_io_peri_en_wd = reg_wdata[2];

  assign clk_enables_clk_usb_peri_en_wd = reg_wdata[3];
  assign clk_hints_we = addr_hit[7] & reg_we & !reg_error;

  assign clk_hints_clk_main_aes_hint_wd = reg_wdata[0];

  assign clk_hints_clk_main_hmac_hint_wd = reg_wdata[1];

  assign clk_hints_clk_main_kmac_hint_wd = reg_wdata[2];

  assign clk_hints_clk_main_otbn_hint_wd = reg_wdata[3];
  assign measure_ctrl_regwen_we = addr_hit[9] & reg_we & !reg_error;

  assign measure_ctrl_regwen_wd = reg_wdata[0];
  assign io_meas_ctrl_en_we = addr_hit[10] & reg_we & !reg_error;

  assign io_meas_ctrl_shadowed_re = addr_hit[11] & reg_re & !reg_error;
  assign io_meas_ctrl_shadowed_we = addr_hit[11] & reg_we & !reg_error;


  assign io_div2_meas_ctrl_en_we = addr_hit[12] & reg_we & !reg_error;

  assign io_div2_meas_ctrl_shadowed_re = addr_hit[13] & reg_re & !reg_error;
  assign io_div2_meas_ctrl_shadowed_we = addr_hit[13] & reg_we & !reg_error;


  assign io_div4_meas_ctrl_en_we = addr_hit[14] & reg_we & !reg_error;

  assign io_div4_meas_ctrl_shadowed_re = addr_hit[15] & reg_re & !reg_error;
  assign io_div4_meas_ctrl_shadowed_we = addr_hit[15] & reg_we & !reg_error;


  assign main_meas_ctrl_en_we = addr_hit[16] & reg_we & !reg_error;

  assign main_meas_ctrl_shadowed_re = addr_hit[17] & reg_re & !reg_error;
  assign main_meas_ctrl_shadowed_we = addr_hit[17] & reg_we & !reg_error;


  assign usb_meas_ctrl_en_we = addr_hit[18] & reg_we & !reg_error;

  assign usb_meas_ctrl_shadowed_re = addr_hit[19] & reg_re & !reg_error;
  assign usb_meas_ctrl_shadowed_we = addr_hit[19] & reg_we & !reg_error;


  assign recov_err_code_we = addr_hit[20] & reg_we & !reg_error;

  assign recov_err_code_shadow_update_err_wd = reg_wdata[0];

  assign recov_err_code_io_measure_err_wd = reg_wdata[1];

  assign recov_err_code_io_div2_measure_err_wd = reg_wdata[2];

  assign recov_err_code_io_div4_measure_err_wd = reg_wdata[3];

  assign recov_err_code_main_measure_err_wd = reg_wdata[4];

  assign recov_err_code_usb_measure_err_wd = reg_wdata[5];

  assign recov_err_code_io_timeout_err_wd = reg_wdata[6];

  assign recov_err_code_io_div2_timeout_err_wd = reg_wdata[7];

  assign recov_err_code_io_div4_timeout_err_wd = reg_wdata[8];

  assign recov_err_code_main_timeout_err_wd = reg_wdata[9];

  assign recov_err_code_usb_timeout_err_wd = reg_wdata[10];

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = alert_test_we;
    reg_we_check[1] = extclk_ctrl_regwen_we;
    reg_we_check[2] = extclk_ctrl_gated_we;
    reg_we_check[3] = 1'b0;
    reg_we_check[4] = jitter_regwen_we;
    reg_we_check[5] = jitter_enable_we;
    reg_we_check[6] = clk_enables_we;
    reg_we_check[7] = clk_hints_we;
    reg_we_check[8] = 1'b0;
    reg_we_check[9] = measure_ctrl_regwen_we;
    reg_we_check[10] = io_meas_ctrl_en_we;
    reg_we_check[11] = io_meas_ctrl_shadowed_we;
    reg_we_check[12] = io_div2_meas_ctrl_en_we;
    reg_we_check[13] = io_div2_meas_ctrl_shadowed_we;
    reg_we_check[14] = io_div4_meas_ctrl_en_we;
    reg_we_check[15] = io_div4_meas_ctrl_shadowed_we;
    reg_we_check[16] = main_meas_ctrl_en_we;
    reg_we_check[17] = main_meas_ctrl_shadowed_we;
    reg_we_check[18] = usb_meas_ctrl_en_we;
    reg_we_check[19] = usb_meas_ctrl_shadowed_we;
    reg_we_check[20] = recov_err_code_we;
    reg_we_check[21] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = extclk_ctrl_regwen_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[3:0] = extclk_ctrl_sel_qs;
        reg_rdata_next[7:4] = extclk_ctrl_hi_speed_sel_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[3:0] = extclk_status_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = jitter_regwen_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[3:0] = jitter_enable_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = clk_enables_clk_io_div4_peri_en_qs;
        reg_rdata_next[1] = clk_enables_clk_io_div2_peri_en_qs;
        reg_rdata_next[2] = clk_enables_clk_io_peri_en_qs;
        reg_rdata_next[3] = clk_enables_clk_usb_peri_en_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = clk_hints_clk_main_aes_hint_qs;
        reg_rdata_next[1] = clk_hints_clk_main_hmac_hint_qs;
        reg_rdata_next[2] = clk_hints_clk_main_kmac_hint_qs;
        reg_rdata_next[3] = clk_hints_clk_main_otbn_hint_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = clk_hints_status_clk_main_aes_val_qs;
        reg_rdata_next[1] = clk_hints_status_clk_main_hmac_val_qs;
        reg_rdata_next[2] = clk_hints_status_clk_main_kmac_val_qs;
        reg_rdata_next[3] = clk_hints_status_clk_main_otbn_val_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = measure_ctrl_regwen_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next = DW'(io_meas_ctrl_en_qs);
      end
      addr_hit[11]: begin
        reg_rdata_next = DW'(io_meas_ctrl_shadowed_qs);
      end
      addr_hit[12]: begin
        reg_rdata_next = DW'(io_div2_meas_ctrl_en_qs);
      end
      addr_hit[13]: begin
        reg_rdata_next = DW'(io_div2_meas_ctrl_shadowed_qs);
      end
      addr_hit[14]: begin
        reg_rdata_next = DW'(io_div4_meas_ctrl_en_qs);
      end
      addr_hit[15]: begin
        reg_rdata_next = DW'(io_div4_meas_ctrl_shadowed_qs);
      end
      addr_hit[16]: begin
        reg_rdata_next = DW'(main_meas_ctrl_en_qs);
      end
      addr_hit[17]: begin
        reg_rdata_next = DW'(main_meas_ctrl_shadowed_qs);
      end
      addr_hit[18]: begin
        reg_rdata_next = DW'(usb_meas_ctrl_en_qs);
      end
      addr_hit[19]: begin
        reg_rdata_next = DW'(usb_meas_ctrl_shadowed_qs);
      end
      addr_hit[20]: begin
        reg_rdata_next[0] = recov_err_code_shadow_update_err_qs;
        reg_rdata_next[1] = recov_err_code_io_measure_err_qs;
        reg_rdata_next[2] = recov_err_code_io_div2_measure_err_qs;
        reg_rdata_next[3] = recov_err_code_io_div4_measure_err_qs;
        reg_rdata_next[4] = recov_err_code_main_measure_err_qs;
        reg_rdata_next[5] = recov_err_code_usb_measure_err_qs;
        reg_rdata_next[6] = recov_err_code_io_timeout_err_qs;
        reg_rdata_next[7] = recov_err_code_io_div2_timeout_err_qs;
        reg_rdata_next[8] = recov_err_code_io_div4_timeout_err_qs;
        reg_rdata_next[9] = recov_err_code_main_timeout_err_qs;
        reg_rdata_next[10] = recov_err_code_usb_timeout_err_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = fatal_err_code_reg_intg_qs;
        reg_rdata_next[1] = fatal_err_code_idle_cnt_qs;
        reg_rdata_next[2] = fatal_err_code_shadow_storage_err_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  logic rst_done;
  logic shadow_rst_done;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      rst_done <= '0;
    end else begin
      rst_done <= 1'b1;
    end
  end

  always_ff @(posedge clk_i or negedge rst_shadowed_ni) begin
    if (!rst_shadowed_ni) begin
      shadow_rst_done <= '0;
    end else begin
      shadow_rst_done <= 1'b1;
    end
  end

  // both shadow and normal resets have been released
  assign shadow_busy = ~(rst_done & shadow_rst_done);

  // Collect up storage and update errors
  assign shadowed_storage_err_o = |{
    io_meas_ctrl_shadowed_hi_storage_err,
    io_meas_ctrl_shadowed_lo_storage_err,
    io_div2_meas_ctrl_shadowed_hi_storage_err,
    io_div2_meas_ctrl_shadowed_lo_storage_err,
    io_div4_meas_ctrl_shadowed_hi_storage_err,
    io_div4_meas_ctrl_shadowed_lo_storage_err,
    main_meas_ctrl_shadowed_hi_storage_err,
    main_meas_ctrl_shadowed_lo_storage_err,
    usb_meas_ctrl_shadowed_hi_storage_err,
    usb_meas_ctrl_shadowed_lo_storage_err
  };
  assign shadowed_update_err_o = |{
    io_meas_ctrl_shadowed_hi_update_err,
    io_meas_ctrl_shadowed_lo_update_err,
    io_div2_meas_ctrl_shadowed_hi_update_err,
    io_div2_meas_ctrl_shadowed_lo_update_err,
    io_div4_meas_ctrl_shadowed_hi_update_err,
    io_div4_meas_ctrl_shadowed_lo_update_err,
    main_meas_ctrl_shadowed_hi_update_err,
    main_meas_ctrl_shadowed_lo_update_err,
    usb_meas_ctrl_shadowed_hi_update_err,
    usb_meas_ctrl_shadowed_lo_update_err
  };

  // register busy
  logic reg_busy_sel;
  assign reg_busy = reg_busy_sel | shadow_busy;
  always_comb begin
    reg_busy_sel = '0;
    unique case (1'b1)
      addr_hit[10]: begin
        reg_busy_sel = io_meas_ctrl_en_busy;
      end
      addr_hit[11]: begin
        reg_busy_sel = io_meas_ctrl_shadowed_busy;
      end
      addr_hit[12]: begin
        reg_busy_sel = io_div2_meas_ctrl_en_busy;
      end
      addr_hit[13]: begin
        reg_busy_sel = io_div2_meas_ctrl_shadowed_busy;
      end
      addr_hit[14]: begin
        reg_busy_sel = io_div4_meas_ctrl_en_busy;
      end
      addr_hit[15]: begin
        reg_busy_sel = io_div4_meas_ctrl_shadowed_busy;
      end
      addr_hit[16]: begin
        reg_busy_sel = main_meas_ctrl_en_busy;
      end
      addr_hit[17]: begin
        reg_busy_sel = main_meas_ctrl_shadowed_busy;
      end
      addr_hit[18]: begin
        reg_busy_sel = usb_meas_ctrl_en_busy;
      end
      addr_hit[19]: begin
        reg_busy_sel = usb_meas_ctrl_shadowed_busy;
      end
      default: begin
        reg_busy_sel  = '0;
      end
    endcase
  end


  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
