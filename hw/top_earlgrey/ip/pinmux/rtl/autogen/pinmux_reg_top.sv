// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

module pinmux_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output pinmux_reg_pkg::pinmux_reg2hw_t reg2hw, // Write

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import pinmux_reg_pkg::* ;

  localparam int AW = 6;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic regen_qs;
  logic regen_wd;
  logic regen_we;
  logic [5:0] periph_insel0_in0_qs;
  logic [5:0] periph_insel0_in0_wd;
  logic periph_insel0_in0_we;
  logic [5:0] periph_insel0_in1_qs;
  logic [5:0] periph_insel0_in1_wd;
  logic periph_insel0_in1_we;
  logic [5:0] periph_insel0_in2_qs;
  logic [5:0] periph_insel0_in2_wd;
  logic periph_insel0_in2_we;
  logic [5:0] periph_insel0_in3_qs;
  logic [5:0] periph_insel0_in3_wd;
  logic periph_insel0_in3_we;
  logic [5:0] periph_insel0_in4_qs;
  logic [5:0] periph_insel0_in4_wd;
  logic periph_insel0_in4_we;
  logic [5:0] periph_insel1_in5_qs;
  logic [5:0] periph_insel1_in5_wd;
  logic periph_insel1_in5_we;
  logic [5:0] periph_insel1_in6_qs;
  logic [5:0] periph_insel1_in6_wd;
  logic periph_insel1_in6_we;
  logic [5:0] periph_insel1_in7_qs;
  logic [5:0] periph_insel1_in7_wd;
  logic periph_insel1_in7_we;
  logic [5:0] periph_insel1_in8_qs;
  logic [5:0] periph_insel1_in8_wd;
  logic periph_insel1_in8_we;
  logic [5:0] periph_insel1_in9_qs;
  logic [5:0] periph_insel1_in9_wd;
  logic periph_insel1_in9_we;
  logic [5:0] periph_insel2_in10_qs;
  logic [5:0] periph_insel2_in10_wd;
  logic periph_insel2_in10_we;
  logic [5:0] periph_insel2_in11_qs;
  logic [5:0] periph_insel2_in11_wd;
  logic periph_insel2_in11_we;
  logic [5:0] periph_insel2_in12_qs;
  logic [5:0] periph_insel2_in12_wd;
  logic periph_insel2_in12_we;
  logic [5:0] periph_insel2_in13_qs;
  logic [5:0] periph_insel2_in13_wd;
  logic periph_insel2_in13_we;
  logic [5:0] periph_insel2_in14_qs;
  logic [5:0] periph_insel2_in14_wd;
  logic periph_insel2_in14_we;
  logic [5:0] periph_insel3_in15_qs;
  logic [5:0] periph_insel3_in15_wd;
  logic periph_insel3_in15_we;
  logic [5:0] periph_insel3_in16_qs;
  logic [5:0] periph_insel3_in16_wd;
  logic periph_insel3_in16_we;
  logic [5:0] periph_insel3_in17_qs;
  logic [5:0] periph_insel3_in17_wd;
  logic periph_insel3_in17_we;
  logic [5:0] periph_insel3_in18_qs;
  logic [5:0] periph_insel3_in18_wd;
  logic periph_insel3_in18_we;
  logic [5:0] periph_insel3_in19_qs;
  logic [5:0] periph_insel3_in19_wd;
  logic periph_insel3_in19_we;
  logic [5:0] periph_insel4_in20_qs;
  logic [5:0] periph_insel4_in20_wd;
  logic periph_insel4_in20_we;
  logic [5:0] periph_insel4_in21_qs;
  logic [5:0] periph_insel4_in21_wd;
  logic periph_insel4_in21_we;
  logic [5:0] periph_insel4_in22_qs;
  logic [5:0] periph_insel4_in22_wd;
  logic periph_insel4_in22_we;
  logic [5:0] periph_insel4_in23_qs;
  logic [5:0] periph_insel4_in23_wd;
  logic periph_insel4_in23_we;
  logic [5:0] periph_insel4_in24_qs;
  logic [5:0] periph_insel4_in24_wd;
  logic periph_insel4_in24_we;
  logic [5:0] periph_insel5_in25_qs;
  logic [5:0] periph_insel5_in25_wd;
  logic periph_insel5_in25_we;
  logic [5:0] periph_insel5_in26_qs;
  logic [5:0] periph_insel5_in26_wd;
  logic periph_insel5_in26_we;
  logic [5:0] periph_insel5_in27_qs;
  logic [5:0] periph_insel5_in27_wd;
  logic periph_insel5_in27_we;
  logic [5:0] periph_insel5_in28_qs;
  logic [5:0] periph_insel5_in28_wd;
  logic periph_insel5_in28_we;
  logic [5:0] periph_insel5_in29_qs;
  logic [5:0] periph_insel5_in29_wd;
  logic periph_insel5_in29_we;
  logic [5:0] periph_insel6_in30_qs;
  logic [5:0] periph_insel6_in30_wd;
  logic periph_insel6_in30_we;
  logic [5:0] periph_insel6_in31_qs;
  logic [5:0] periph_insel6_in31_wd;
  logic periph_insel6_in31_we;
  logic [5:0] mio_outsel0_out0_qs;
  logic [5:0] mio_outsel0_out0_wd;
  logic mio_outsel0_out0_we;
  logic [5:0] mio_outsel0_out1_qs;
  logic [5:0] mio_outsel0_out1_wd;
  logic mio_outsel0_out1_we;
  logic [5:0] mio_outsel0_out2_qs;
  logic [5:0] mio_outsel0_out2_wd;
  logic mio_outsel0_out2_we;
  logic [5:0] mio_outsel0_out3_qs;
  logic [5:0] mio_outsel0_out3_wd;
  logic mio_outsel0_out3_we;
  logic [5:0] mio_outsel0_out4_qs;
  logic [5:0] mio_outsel0_out4_wd;
  logic mio_outsel0_out4_we;
  logic [5:0] mio_outsel1_out5_qs;
  logic [5:0] mio_outsel1_out5_wd;
  logic mio_outsel1_out5_we;
  logic [5:0] mio_outsel1_out6_qs;
  logic [5:0] mio_outsel1_out6_wd;
  logic mio_outsel1_out6_we;
  logic [5:0] mio_outsel1_out7_qs;
  logic [5:0] mio_outsel1_out7_wd;
  logic mio_outsel1_out7_we;
  logic [5:0] mio_outsel1_out8_qs;
  logic [5:0] mio_outsel1_out8_wd;
  logic mio_outsel1_out8_we;
  logic [5:0] mio_outsel1_out9_qs;
  logic [5:0] mio_outsel1_out9_wd;
  logic mio_outsel1_out9_we;
  logic [5:0] mio_outsel2_out10_qs;
  logic [5:0] mio_outsel2_out10_wd;
  logic mio_outsel2_out10_we;
  logic [5:0] mio_outsel2_out11_qs;
  logic [5:0] mio_outsel2_out11_wd;
  logic mio_outsel2_out11_we;
  logic [5:0] mio_outsel2_out12_qs;
  logic [5:0] mio_outsel2_out12_wd;
  logic mio_outsel2_out12_we;
  logic [5:0] mio_outsel2_out13_qs;
  logic [5:0] mio_outsel2_out13_wd;
  logic mio_outsel2_out13_we;
  logic [5:0] mio_outsel2_out14_qs;
  logic [5:0] mio_outsel2_out14_wd;
  logic mio_outsel2_out14_we;
  logic [5:0] mio_outsel3_out15_qs;
  logic [5:0] mio_outsel3_out15_wd;
  logic mio_outsel3_out15_we;
  logic [5:0] mio_outsel3_out16_qs;
  logic [5:0] mio_outsel3_out16_wd;
  logic mio_outsel3_out16_we;
  logic [5:0] mio_outsel3_out17_qs;
  logic [5:0] mio_outsel3_out17_wd;
  logic mio_outsel3_out17_we;
  logic [5:0] mio_outsel3_out18_qs;
  logic [5:0] mio_outsel3_out18_wd;
  logic mio_outsel3_out18_we;
  logic [5:0] mio_outsel3_out19_qs;
  logic [5:0] mio_outsel3_out19_wd;
  logic mio_outsel3_out19_we;
  logic [5:0] mio_outsel4_out20_qs;
  logic [5:0] mio_outsel4_out20_wd;
  logic mio_outsel4_out20_we;
  logic [5:0] mio_outsel4_out21_qs;
  logic [5:0] mio_outsel4_out21_wd;
  logic mio_outsel4_out21_we;
  logic [5:0] mio_outsel4_out22_qs;
  logic [5:0] mio_outsel4_out22_wd;
  logic mio_outsel4_out22_we;
  logic [5:0] mio_outsel4_out23_qs;
  logic [5:0] mio_outsel4_out23_wd;
  logic mio_outsel4_out23_we;
  logic [5:0] mio_outsel4_out24_qs;
  logic [5:0] mio_outsel4_out24_wd;
  logic mio_outsel4_out24_we;
  logic [5:0] mio_outsel5_out25_qs;
  logic [5:0] mio_outsel5_out25_wd;
  logic mio_outsel5_out25_we;
  logic [5:0] mio_outsel5_out26_qs;
  logic [5:0] mio_outsel5_out26_wd;
  logic mio_outsel5_out26_we;
  logic [5:0] mio_outsel5_out27_qs;
  logic [5:0] mio_outsel5_out27_wd;
  logic mio_outsel5_out27_we;
  logic [5:0] mio_outsel5_out28_qs;
  logic [5:0] mio_outsel5_out28_wd;
  logic mio_outsel5_out28_we;
  logic [5:0] mio_outsel5_out29_qs;
  logic [5:0] mio_outsel5_out29_wd;
  logic mio_outsel5_out29_we;
  logic [5:0] mio_outsel6_out30_qs;
  logic [5:0] mio_outsel6_out30_wd;
  logic mio_outsel6_out30_we;
  logic [5:0] mio_outsel6_out31_qs;
  logic [5:0] mio_outsel6_out31_wd;
  logic mio_outsel6_out31_we;

  // Register instances
  // R[regen]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W0C"),
    .RESVAL  (1'h1)
  ) u_regen (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (regen_we),
    .wd     (regen_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (regen_qs)
  );



  // Subregister 0 of Multireg periph_insel
  // R[periph_insel0]: V(False)

  // F[in0]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel0_in0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel0_in0_we & regen_qs),
    .wd     (periph_insel0_in0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[0].q ),

    // to register interface (read)
    .qs     (periph_insel0_in0_qs)
  );


  // F[in1]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel0_in1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel0_in1_we & regen_qs),
    .wd     (periph_insel0_in1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[1].q ),

    // to register interface (read)
    .qs     (periph_insel0_in1_qs)
  );


  // F[in2]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel0_in2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel0_in2_we & regen_qs),
    .wd     (periph_insel0_in2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[2].q ),

    // to register interface (read)
    .qs     (periph_insel0_in2_qs)
  );


  // F[in3]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel0_in3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel0_in3_we & regen_qs),
    .wd     (periph_insel0_in3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[3].q ),

    // to register interface (read)
    .qs     (periph_insel0_in3_qs)
  );


  // F[in4]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel0_in4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel0_in4_we & regen_qs),
    .wd     (periph_insel0_in4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[4].q ),

    // to register interface (read)
    .qs     (periph_insel0_in4_qs)
  );


  // Subregister 5 of Multireg periph_insel
  // R[periph_insel1]: V(False)

  // F[in5]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel1_in5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel1_in5_we & regen_qs),
    .wd     (periph_insel1_in5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[5].q ),

    // to register interface (read)
    .qs     (periph_insel1_in5_qs)
  );


  // F[in6]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel1_in6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel1_in6_we & regen_qs),
    .wd     (periph_insel1_in6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[6].q ),

    // to register interface (read)
    .qs     (periph_insel1_in6_qs)
  );


  // F[in7]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel1_in7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel1_in7_we & regen_qs),
    .wd     (periph_insel1_in7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[7].q ),

    // to register interface (read)
    .qs     (periph_insel1_in7_qs)
  );


  // F[in8]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel1_in8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel1_in8_we & regen_qs),
    .wd     (periph_insel1_in8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[8].q ),

    // to register interface (read)
    .qs     (periph_insel1_in8_qs)
  );


  // F[in9]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel1_in9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel1_in9_we & regen_qs),
    .wd     (periph_insel1_in9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[9].q ),

    // to register interface (read)
    .qs     (periph_insel1_in9_qs)
  );


  // Subregister 10 of Multireg periph_insel
  // R[periph_insel2]: V(False)

  // F[in10]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel2_in10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel2_in10_we & regen_qs),
    .wd     (periph_insel2_in10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[10].q ),

    // to register interface (read)
    .qs     (periph_insel2_in10_qs)
  );


  // F[in11]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel2_in11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel2_in11_we & regen_qs),
    .wd     (periph_insel2_in11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[11].q ),

    // to register interface (read)
    .qs     (periph_insel2_in11_qs)
  );


  // F[in12]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel2_in12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel2_in12_we & regen_qs),
    .wd     (periph_insel2_in12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[12].q ),

    // to register interface (read)
    .qs     (periph_insel2_in12_qs)
  );


  // F[in13]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel2_in13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel2_in13_we & regen_qs),
    .wd     (periph_insel2_in13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[13].q ),

    // to register interface (read)
    .qs     (periph_insel2_in13_qs)
  );


  // F[in14]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel2_in14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel2_in14_we & regen_qs),
    .wd     (periph_insel2_in14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[14].q ),

    // to register interface (read)
    .qs     (periph_insel2_in14_qs)
  );


  // Subregister 15 of Multireg periph_insel
  // R[periph_insel3]: V(False)

  // F[in15]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel3_in15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel3_in15_we & regen_qs),
    .wd     (periph_insel3_in15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[15].q ),

    // to register interface (read)
    .qs     (periph_insel3_in15_qs)
  );


  // F[in16]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel3_in16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel3_in16_we & regen_qs),
    .wd     (periph_insel3_in16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[16].q ),

    // to register interface (read)
    .qs     (periph_insel3_in16_qs)
  );


  // F[in17]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel3_in17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel3_in17_we & regen_qs),
    .wd     (periph_insel3_in17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[17].q ),

    // to register interface (read)
    .qs     (periph_insel3_in17_qs)
  );


  // F[in18]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel3_in18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel3_in18_we & regen_qs),
    .wd     (periph_insel3_in18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[18].q ),

    // to register interface (read)
    .qs     (periph_insel3_in18_qs)
  );


  // F[in19]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel3_in19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel3_in19_we & regen_qs),
    .wd     (periph_insel3_in19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[19].q ),

    // to register interface (read)
    .qs     (periph_insel3_in19_qs)
  );


  // Subregister 20 of Multireg periph_insel
  // R[periph_insel4]: V(False)

  // F[in20]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel4_in20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel4_in20_we & regen_qs),
    .wd     (periph_insel4_in20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[20].q ),

    // to register interface (read)
    .qs     (periph_insel4_in20_qs)
  );


  // F[in21]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel4_in21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel4_in21_we & regen_qs),
    .wd     (periph_insel4_in21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[21].q ),

    // to register interface (read)
    .qs     (periph_insel4_in21_qs)
  );


  // F[in22]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel4_in22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel4_in22_we & regen_qs),
    .wd     (periph_insel4_in22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[22].q ),

    // to register interface (read)
    .qs     (periph_insel4_in22_qs)
  );


  // F[in23]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel4_in23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel4_in23_we & regen_qs),
    .wd     (periph_insel4_in23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[23].q ),

    // to register interface (read)
    .qs     (periph_insel4_in23_qs)
  );


  // F[in24]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel4_in24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel4_in24_we & regen_qs),
    .wd     (periph_insel4_in24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[24].q ),

    // to register interface (read)
    .qs     (periph_insel4_in24_qs)
  );


  // Subregister 25 of Multireg periph_insel
  // R[periph_insel5]: V(False)

  // F[in25]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel5_in25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel5_in25_we & regen_qs),
    .wd     (periph_insel5_in25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[25].q ),

    // to register interface (read)
    .qs     (periph_insel5_in25_qs)
  );


  // F[in26]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel5_in26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel5_in26_we & regen_qs),
    .wd     (periph_insel5_in26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[26].q ),

    // to register interface (read)
    .qs     (periph_insel5_in26_qs)
  );


  // F[in27]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel5_in27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel5_in27_we & regen_qs),
    .wd     (periph_insel5_in27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[27].q ),

    // to register interface (read)
    .qs     (periph_insel5_in27_qs)
  );


  // F[in28]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel5_in28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel5_in28_we & regen_qs),
    .wd     (periph_insel5_in28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[28].q ),

    // to register interface (read)
    .qs     (periph_insel5_in28_qs)
  );


  // F[in29]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel5_in29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel5_in29_we & regen_qs),
    .wd     (periph_insel5_in29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[29].q ),

    // to register interface (read)
    .qs     (periph_insel5_in29_qs)
  );


  // Subregister 30 of Multireg periph_insel
  // R[periph_insel6]: V(False)

  // F[in30]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel6_in30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel6_in30_we & regen_qs),
    .wd     (periph_insel6_in30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[30].q ),

    // to register interface (read)
    .qs     (periph_insel6_in30_qs)
  );


  // F[in31]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h0)
  ) u_periph_insel6_in31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (periph_insel6_in31_we & regen_qs),
    .wd     (periph_insel6_in31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_insel[31].q ),

    // to register interface (read)
    .qs     (periph_insel6_in31_qs)
  );




  // Subregister 0 of Multireg mio_outsel
  // R[mio_outsel0]: V(False)

  // F[out0]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel0_out0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel0_out0_we & regen_qs),
    .wd     (mio_outsel0_out0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[0].q ),

    // to register interface (read)
    .qs     (mio_outsel0_out0_qs)
  );


  // F[out1]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel0_out1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel0_out1_we & regen_qs),
    .wd     (mio_outsel0_out1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[1].q ),

    // to register interface (read)
    .qs     (mio_outsel0_out1_qs)
  );


  // F[out2]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel0_out2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel0_out2_we & regen_qs),
    .wd     (mio_outsel0_out2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[2].q ),

    // to register interface (read)
    .qs     (mio_outsel0_out2_qs)
  );


  // F[out3]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel0_out3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel0_out3_we & regen_qs),
    .wd     (mio_outsel0_out3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[3].q ),

    // to register interface (read)
    .qs     (mio_outsel0_out3_qs)
  );


  // F[out4]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel0_out4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel0_out4_we & regen_qs),
    .wd     (mio_outsel0_out4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[4].q ),

    // to register interface (read)
    .qs     (mio_outsel0_out4_qs)
  );


  // Subregister 5 of Multireg mio_outsel
  // R[mio_outsel1]: V(False)

  // F[out5]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel1_out5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel1_out5_we & regen_qs),
    .wd     (mio_outsel1_out5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[5].q ),

    // to register interface (read)
    .qs     (mio_outsel1_out5_qs)
  );


  // F[out6]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel1_out6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel1_out6_we & regen_qs),
    .wd     (mio_outsel1_out6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[6].q ),

    // to register interface (read)
    .qs     (mio_outsel1_out6_qs)
  );


  // F[out7]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel1_out7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel1_out7_we & regen_qs),
    .wd     (mio_outsel1_out7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[7].q ),

    // to register interface (read)
    .qs     (mio_outsel1_out7_qs)
  );


  // F[out8]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel1_out8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel1_out8_we & regen_qs),
    .wd     (mio_outsel1_out8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[8].q ),

    // to register interface (read)
    .qs     (mio_outsel1_out8_qs)
  );


  // F[out9]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel1_out9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel1_out9_we & regen_qs),
    .wd     (mio_outsel1_out9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[9].q ),

    // to register interface (read)
    .qs     (mio_outsel1_out9_qs)
  );


  // Subregister 10 of Multireg mio_outsel
  // R[mio_outsel2]: V(False)

  // F[out10]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel2_out10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel2_out10_we & regen_qs),
    .wd     (mio_outsel2_out10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[10].q ),

    // to register interface (read)
    .qs     (mio_outsel2_out10_qs)
  );


  // F[out11]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel2_out11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel2_out11_we & regen_qs),
    .wd     (mio_outsel2_out11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[11].q ),

    // to register interface (read)
    .qs     (mio_outsel2_out11_qs)
  );


  // F[out12]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel2_out12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel2_out12_we & regen_qs),
    .wd     (mio_outsel2_out12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[12].q ),

    // to register interface (read)
    .qs     (mio_outsel2_out12_qs)
  );


  // F[out13]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel2_out13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel2_out13_we & regen_qs),
    .wd     (mio_outsel2_out13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[13].q ),

    // to register interface (read)
    .qs     (mio_outsel2_out13_qs)
  );


  // F[out14]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel2_out14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel2_out14_we & regen_qs),
    .wd     (mio_outsel2_out14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[14].q ),

    // to register interface (read)
    .qs     (mio_outsel2_out14_qs)
  );


  // Subregister 15 of Multireg mio_outsel
  // R[mio_outsel3]: V(False)

  // F[out15]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel3_out15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel3_out15_we & regen_qs),
    .wd     (mio_outsel3_out15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[15].q ),

    // to register interface (read)
    .qs     (mio_outsel3_out15_qs)
  );


  // F[out16]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel3_out16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel3_out16_we & regen_qs),
    .wd     (mio_outsel3_out16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[16].q ),

    // to register interface (read)
    .qs     (mio_outsel3_out16_qs)
  );


  // F[out17]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel3_out17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel3_out17_we & regen_qs),
    .wd     (mio_outsel3_out17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[17].q ),

    // to register interface (read)
    .qs     (mio_outsel3_out17_qs)
  );


  // F[out18]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel3_out18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel3_out18_we & regen_qs),
    .wd     (mio_outsel3_out18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[18].q ),

    // to register interface (read)
    .qs     (mio_outsel3_out18_qs)
  );


  // F[out19]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel3_out19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel3_out19_we & regen_qs),
    .wd     (mio_outsel3_out19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[19].q ),

    // to register interface (read)
    .qs     (mio_outsel3_out19_qs)
  );


  // Subregister 20 of Multireg mio_outsel
  // R[mio_outsel4]: V(False)

  // F[out20]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel4_out20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel4_out20_we & regen_qs),
    .wd     (mio_outsel4_out20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[20].q ),

    // to register interface (read)
    .qs     (mio_outsel4_out20_qs)
  );


  // F[out21]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel4_out21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel4_out21_we & regen_qs),
    .wd     (mio_outsel4_out21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[21].q ),

    // to register interface (read)
    .qs     (mio_outsel4_out21_qs)
  );


  // F[out22]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel4_out22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel4_out22_we & regen_qs),
    .wd     (mio_outsel4_out22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[22].q ),

    // to register interface (read)
    .qs     (mio_outsel4_out22_qs)
  );


  // F[out23]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel4_out23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel4_out23_we & regen_qs),
    .wd     (mio_outsel4_out23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[23].q ),

    // to register interface (read)
    .qs     (mio_outsel4_out23_qs)
  );


  // F[out24]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel4_out24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel4_out24_we & regen_qs),
    .wd     (mio_outsel4_out24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[24].q ),

    // to register interface (read)
    .qs     (mio_outsel4_out24_qs)
  );


  // Subregister 25 of Multireg mio_outsel
  // R[mio_outsel5]: V(False)

  // F[out25]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel5_out25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel5_out25_we & regen_qs),
    .wd     (mio_outsel5_out25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[25].q ),

    // to register interface (read)
    .qs     (mio_outsel5_out25_qs)
  );


  // F[out26]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel5_out26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel5_out26_we & regen_qs),
    .wd     (mio_outsel5_out26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[26].q ),

    // to register interface (read)
    .qs     (mio_outsel5_out26_qs)
  );


  // F[out27]: 17:12
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel5_out27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel5_out27_we & regen_qs),
    .wd     (mio_outsel5_out27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[27].q ),

    // to register interface (read)
    .qs     (mio_outsel5_out27_qs)
  );


  // F[out28]: 23:18
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel5_out28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel5_out28_we & regen_qs),
    .wd     (mio_outsel5_out28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[28].q ),

    // to register interface (read)
    .qs     (mio_outsel5_out28_qs)
  );


  // F[out29]: 29:24
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel5_out29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel5_out29_we & regen_qs),
    .wd     (mio_outsel5_out29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[29].q ),

    // to register interface (read)
    .qs     (mio_outsel5_out29_qs)
  );


  // Subregister 30 of Multireg mio_outsel
  // R[mio_outsel6]: V(False)

  // F[out30]: 5:0
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel6_out30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel6_out30_we & regen_qs),
    .wd     (mio_outsel6_out30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[30].q ),

    // to register interface (read)
    .qs     (mio_outsel6_out30_qs)
  );


  // F[out31]: 11:6
  prim_subreg #(
    .DW      (6),
    .SWACCESS("RW"),
    .RESVAL  (6'h2)
  ) u_mio_outsel6_out31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (mio_outsel6_out31_we & regen_qs),
    .wd     (mio_outsel6_out31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mio_outsel[31].q ),

    // to register interface (read)
    .qs     (mio_outsel6_out31_qs)
  );





  logic [14:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == PINMUX_REGEN_OFFSET);
    addr_hit[ 1] = (reg_addr == PINMUX_PERIPH_INSEL0_OFFSET);
    addr_hit[ 2] = (reg_addr == PINMUX_PERIPH_INSEL1_OFFSET);
    addr_hit[ 3] = (reg_addr == PINMUX_PERIPH_INSEL2_OFFSET);
    addr_hit[ 4] = (reg_addr == PINMUX_PERIPH_INSEL3_OFFSET);
    addr_hit[ 5] = (reg_addr == PINMUX_PERIPH_INSEL4_OFFSET);
    addr_hit[ 6] = (reg_addr == PINMUX_PERIPH_INSEL5_OFFSET);
    addr_hit[ 7] = (reg_addr == PINMUX_PERIPH_INSEL6_OFFSET);
    addr_hit[ 8] = (reg_addr == PINMUX_MIO_OUTSEL0_OFFSET);
    addr_hit[ 9] = (reg_addr == PINMUX_MIO_OUTSEL1_OFFSET);
    addr_hit[10] = (reg_addr == PINMUX_MIO_OUTSEL2_OFFSET);
    addr_hit[11] = (reg_addr == PINMUX_MIO_OUTSEL3_OFFSET);
    addr_hit[12] = (reg_addr == PINMUX_MIO_OUTSEL4_OFFSET);
    addr_hit[13] = (reg_addr == PINMUX_MIO_OUTSEL5_OFFSET);
    addr_hit[14] = (reg_addr == PINMUX_MIO_OUTSEL6_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[ 0] && reg_we && (PINMUX_PERMIT[ 0] != (PINMUX_PERMIT[ 0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 1] && reg_we && (PINMUX_PERMIT[ 1] != (PINMUX_PERMIT[ 1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 2] && reg_we && (PINMUX_PERMIT[ 2] != (PINMUX_PERMIT[ 2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 3] && reg_we && (PINMUX_PERMIT[ 3] != (PINMUX_PERMIT[ 3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 4] && reg_we && (PINMUX_PERMIT[ 4] != (PINMUX_PERMIT[ 4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 5] && reg_we && (PINMUX_PERMIT[ 5] != (PINMUX_PERMIT[ 5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 6] && reg_we && (PINMUX_PERMIT[ 6] != (PINMUX_PERMIT[ 6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 7] && reg_we && (PINMUX_PERMIT[ 7] != (PINMUX_PERMIT[ 7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 8] && reg_we && (PINMUX_PERMIT[ 8] != (PINMUX_PERMIT[ 8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 9] && reg_we && (PINMUX_PERMIT[ 9] != (PINMUX_PERMIT[ 9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[10] && reg_we && (PINMUX_PERMIT[10] != (PINMUX_PERMIT[10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[11] && reg_we && (PINMUX_PERMIT[11] != (PINMUX_PERMIT[11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[12] && reg_we && (PINMUX_PERMIT[12] != (PINMUX_PERMIT[12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[13] && reg_we && (PINMUX_PERMIT[13] != (PINMUX_PERMIT[13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[14] && reg_we && (PINMUX_PERMIT[14] != (PINMUX_PERMIT[14] & reg_be))) wr_err = 1'b1 ;
  end

  assign regen_we = addr_hit[0] & reg_we & ~wr_err;
  assign regen_wd = reg_wdata[0];

  assign periph_insel0_in0_we = addr_hit[1] & reg_we & ~wr_err;
  assign periph_insel0_in0_wd = reg_wdata[5:0];

  assign periph_insel0_in1_we = addr_hit[1] & reg_we & ~wr_err;
  assign periph_insel0_in1_wd = reg_wdata[11:6];

  assign periph_insel0_in2_we = addr_hit[1] & reg_we & ~wr_err;
  assign periph_insel0_in2_wd = reg_wdata[17:12];

  assign periph_insel0_in3_we = addr_hit[1] & reg_we & ~wr_err;
  assign periph_insel0_in3_wd = reg_wdata[23:18];

  assign periph_insel0_in4_we = addr_hit[1] & reg_we & ~wr_err;
  assign periph_insel0_in4_wd = reg_wdata[29:24];

  assign periph_insel1_in5_we = addr_hit[2] & reg_we & ~wr_err;
  assign periph_insel1_in5_wd = reg_wdata[5:0];

  assign periph_insel1_in6_we = addr_hit[2] & reg_we & ~wr_err;
  assign periph_insel1_in6_wd = reg_wdata[11:6];

  assign periph_insel1_in7_we = addr_hit[2] & reg_we & ~wr_err;
  assign periph_insel1_in7_wd = reg_wdata[17:12];

  assign periph_insel1_in8_we = addr_hit[2] & reg_we & ~wr_err;
  assign periph_insel1_in8_wd = reg_wdata[23:18];

  assign periph_insel1_in9_we = addr_hit[2] & reg_we & ~wr_err;
  assign periph_insel1_in9_wd = reg_wdata[29:24];

  assign periph_insel2_in10_we = addr_hit[3] & reg_we & ~wr_err;
  assign periph_insel2_in10_wd = reg_wdata[5:0];

  assign periph_insel2_in11_we = addr_hit[3] & reg_we & ~wr_err;
  assign periph_insel2_in11_wd = reg_wdata[11:6];

  assign periph_insel2_in12_we = addr_hit[3] & reg_we & ~wr_err;
  assign periph_insel2_in12_wd = reg_wdata[17:12];

  assign periph_insel2_in13_we = addr_hit[3] & reg_we & ~wr_err;
  assign periph_insel2_in13_wd = reg_wdata[23:18];

  assign periph_insel2_in14_we = addr_hit[3] & reg_we & ~wr_err;
  assign periph_insel2_in14_wd = reg_wdata[29:24];

  assign periph_insel3_in15_we = addr_hit[4] & reg_we & ~wr_err;
  assign periph_insel3_in15_wd = reg_wdata[5:0];

  assign periph_insel3_in16_we = addr_hit[4] & reg_we & ~wr_err;
  assign periph_insel3_in16_wd = reg_wdata[11:6];

  assign periph_insel3_in17_we = addr_hit[4] & reg_we & ~wr_err;
  assign periph_insel3_in17_wd = reg_wdata[17:12];

  assign periph_insel3_in18_we = addr_hit[4] & reg_we & ~wr_err;
  assign periph_insel3_in18_wd = reg_wdata[23:18];

  assign periph_insel3_in19_we = addr_hit[4] & reg_we & ~wr_err;
  assign periph_insel3_in19_wd = reg_wdata[29:24];

  assign periph_insel4_in20_we = addr_hit[5] & reg_we & ~wr_err;
  assign periph_insel4_in20_wd = reg_wdata[5:0];

  assign periph_insel4_in21_we = addr_hit[5] & reg_we & ~wr_err;
  assign periph_insel4_in21_wd = reg_wdata[11:6];

  assign periph_insel4_in22_we = addr_hit[5] & reg_we & ~wr_err;
  assign periph_insel4_in22_wd = reg_wdata[17:12];

  assign periph_insel4_in23_we = addr_hit[5] & reg_we & ~wr_err;
  assign periph_insel4_in23_wd = reg_wdata[23:18];

  assign periph_insel4_in24_we = addr_hit[5] & reg_we & ~wr_err;
  assign periph_insel4_in24_wd = reg_wdata[29:24];

  assign periph_insel5_in25_we = addr_hit[6] & reg_we & ~wr_err;
  assign periph_insel5_in25_wd = reg_wdata[5:0];

  assign periph_insel5_in26_we = addr_hit[6] & reg_we & ~wr_err;
  assign periph_insel5_in26_wd = reg_wdata[11:6];

  assign periph_insel5_in27_we = addr_hit[6] & reg_we & ~wr_err;
  assign periph_insel5_in27_wd = reg_wdata[17:12];

  assign periph_insel5_in28_we = addr_hit[6] & reg_we & ~wr_err;
  assign periph_insel5_in28_wd = reg_wdata[23:18];

  assign periph_insel5_in29_we = addr_hit[6] & reg_we & ~wr_err;
  assign periph_insel5_in29_wd = reg_wdata[29:24];

  assign periph_insel6_in30_we = addr_hit[7] & reg_we & ~wr_err;
  assign periph_insel6_in30_wd = reg_wdata[5:0];

  assign periph_insel6_in31_we = addr_hit[7] & reg_we & ~wr_err;
  assign periph_insel6_in31_wd = reg_wdata[11:6];

  assign mio_outsel0_out0_we = addr_hit[8] & reg_we & ~wr_err;
  assign mio_outsel0_out0_wd = reg_wdata[5:0];

  assign mio_outsel0_out1_we = addr_hit[8] & reg_we & ~wr_err;
  assign mio_outsel0_out1_wd = reg_wdata[11:6];

  assign mio_outsel0_out2_we = addr_hit[8] & reg_we & ~wr_err;
  assign mio_outsel0_out2_wd = reg_wdata[17:12];

  assign mio_outsel0_out3_we = addr_hit[8] & reg_we & ~wr_err;
  assign mio_outsel0_out3_wd = reg_wdata[23:18];

  assign mio_outsel0_out4_we = addr_hit[8] & reg_we & ~wr_err;
  assign mio_outsel0_out4_wd = reg_wdata[29:24];

  assign mio_outsel1_out5_we = addr_hit[9] & reg_we & ~wr_err;
  assign mio_outsel1_out5_wd = reg_wdata[5:0];

  assign mio_outsel1_out6_we = addr_hit[9] & reg_we & ~wr_err;
  assign mio_outsel1_out6_wd = reg_wdata[11:6];

  assign mio_outsel1_out7_we = addr_hit[9] & reg_we & ~wr_err;
  assign mio_outsel1_out7_wd = reg_wdata[17:12];

  assign mio_outsel1_out8_we = addr_hit[9] & reg_we & ~wr_err;
  assign mio_outsel1_out8_wd = reg_wdata[23:18];

  assign mio_outsel1_out9_we = addr_hit[9] & reg_we & ~wr_err;
  assign mio_outsel1_out9_wd = reg_wdata[29:24];

  assign mio_outsel2_out10_we = addr_hit[10] & reg_we & ~wr_err;
  assign mio_outsel2_out10_wd = reg_wdata[5:0];

  assign mio_outsel2_out11_we = addr_hit[10] & reg_we & ~wr_err;
  assign mio_outsel2_out11_wd = reg_wdata[11:6];

  assign mio_outsel2_out12_we = addr_hit[10] & reg_we & ~wr_err;
  assign mio_outsel2_out12_wd = reg_wdata[17:12];

  assign mio_outsel2_out13_we = addr_hit[10] & reg_we & ~wr_err;
  assign mio_outsel2_out13_wd = reg_wdata[23:18];

  assign mio_outsel2_out14_we = addr_hit[10] & reg_we & ~wr_err;
  assign mio_outsel2_out14_wd = reg_wdata[29:24];

  assign mio_outsel3_out15_we = addr_hit[11] & reg_we & ~wr_err;
  assign mio_outsel3_out15_wd = reg_wdata[5:0];

  assign mio_outsel3_out16_we = addr_hit[11] & reg_we & ~wr_err;
  assign mio_outsel3_out16_wd = reg_wdata[11:6];

  assign mio_outsel3_out17_we = addr_hit[11] & reg_we & ~wr_err;
  assign mio_outsel3_out17_wd = reg_wdata[17:12];

  assign mio_outsel3_out18_we = addr_hit[11] & reg_we & ~wr_err;
  assign mio_outsel3_out18_wd = reg_wdata[23:18];

  assign mio_outsel3_out19_we = addr_hit[11] & reg_we & ~wr_err;
  assign mio_outsel3_out19_wd = reg_wdata[29:24];

  assign mio_outsel4_out20_we = addr_hit[12] & reg_we & ~wr_err;
  assign mio_outsel4_out20_wd = reg_wdata[5:0];

  assign mio_outsel4_out21_we = addr_hit[12] & reg_we & ~wr_err;
  assign mio_outsel4_out21_wd = reg_wdata[11:6];

  assign mio_outsel4_out22_we = addr_hit[12] & reg_we & ~wr_err;
  assign mio_outsel4_out22_wd = reg_wdata[17:12];

  assign mio_outsel4_out23_we = addr_hit[12] & reg_we & ~wr_err;
  assign mio_outsel4_out23_wd = reg_wdata[23:18];

  assign mio_outsel4_out24_we = addr_hit[12] & reg_we & ~wr_err;
  assign mio_outsel4_out24_wd = reg_wdata[29:24];

  assign mio_outsel5_out25_we = addr_hit[13] & reg_we & ~wr_err;
  assign mio_outsel5_out25_wd = reg_wdata[5:0];

  assign mio_outsel5_out26_we = addr_hit[13] & reg_we & ~wr_err;
  assign mio_outsel5_out26_wd = reg_wdata[11:6];

  assign mio_outsel5_out27_we = addr_hit[13] & reg_we & ~wr_err;
  assign mio_outsel5_out27_wd = reg_wdata[17:12];

  assign mio_outsel5_out28_we = addr_hit[13] & reg_we & ~wr_err;
  assign mio_outsel5_out28_wd = reg_wdata[23:18];

  assign mio_outsel5_out29_we = addr_hit[13] & reg_we & ~wr_err;
  assign mio_outsel5_out29_wd = reg_wdata[29:24];

  assign mio_outsel6_out30_we = addr_hit[14] & reg_we & ~wr_err;
  assign mio_outsel6_out30_wd = reg_wdata[5:0];

  assign mio_outsel6_out31_we = addr_hit[14] & reg_we & ~wr_err;
  assign mio_outsel6_out31_wd = reg_wdata[11:6];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = regen_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[5:0] = periph_insel0_in0_qs;
        reg_rdata_next[11:6] = periph_insel0_in1_qs;
        reg_rdata_next[17:12] = periph_insel0_in2_qs;
        reg_rdata_next[23:18] = periph_insel0_in3_qs;
        reg_rdata_next[29:24] = periph_insel0_in4_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[5:0] = periph_insel1_in5_qs;
        reg_rdata_next[11:6] = periph_insel1_in6_qs;
        reg_rdata_next[17:12] = periph_insel1_in7_qs;
        reg_rdata_next[23:18] = periph_insel1_in8_qs;
        reg_rdata_next[29:24] = periph_insel1_in9_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[5:0] = periph_insel2_in10_qs;
        reg_rdata_next[11:6] = periph_insel2_in11_qs;
        reg_rdata_next[17:12] = periph_insel2_in12_qs;
        reg_rdata_next[23:18] = periph_insel2_in13_qs;
        reg_rdata_next[29:24] = periph_insel2_in14_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[5:0] = periph_insel3_in15_qs;
        reg_rdata_next[11:6] = periph_insel3_in16_qs;
        reg_rdata_next[17:12] = periph_insel3_in17_qs;
        reg_rdata_next[23:18] = periph_insel3_in18_qs;
        reg_rdata_next[29:24] = periph_insel3_in19_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[5:0] = periph_insel4_in20_qs;
        reg_rdata_next[11:6] = periph_insel4_in21_qs;
        reg_rdata_next[17:12] = periph_insel4_in22_qs;
        reg_rdata_next[23:18] = periph_insel4_in23_qs;
        reg_rdata_next[29:24] = periph_insel4_in24_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[5:0] = periph_insel5_in25_qs;
        reg_rdata_next[11:6] = periph_insel5_in26_qs;
        reg_rdata_next[17:12] = periph_insel5_in27_qs;
        reg_rdata_next[23:18] = periph_insel5_in28_qs;
        reg_rdata_next[29:24] = periph_insel5_in29_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[5:0] = periph_insel6_in30_qs;
        reg_rdata_next[11:6] = periph_insel6_in31_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[5:0] = mio_outsel0_out0_qs;
        reg_rdata_next[11:6] = mio_outsel0_out1_qs;
        reg_rdata_next[17:12] = mio_outsel0_out2_qs;
        reg_rdata_next[23:18] = mio_outsel0_out3_qs;
        reg_rdata_next[29:24] = mio_outsel0_out4_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[5:0] = mio_outsel1_out5_qs;
        reg_rdata_next[11:6] = mio_outsel1_out6_qs;
        reg_rdata_next[17:12] = mio_outsel1_out7_qs;
        reg_rdata_next[23:18] = mio_outsel1_out8_qs;
        reg_rdata_next[29:24] = mio_outsel1_out9_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[5:0] = mio_outsel2_out10_qs;
        reg_rdata_next[11:6] = mio_outsel2_out11_qs;
        reg_rdata_next[17:12] = mio_outsel2_out12_qs;
        reg_rdata_next[23:18] = mio_outsel2_out13_qs;
        reg_rdata_next[29:24] = mio_outsel2_out14_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[5:0] = mio_outsel3_out15_qs;
        reg_rdata_next[11:6] = mio_outsel3_out16_qs;
        reg_rdata_next[17:12] = mio_outsel3_out17_qs;
        reg_rdata_next[23:18] = mio_outsel3_out18_qs;
        reg_rdata_next[29:24] = mio_outsel3_out19_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[5:0] = mio_outsel4_out20_qs;
        reg_rdata_next[11:6] = mio_outsel4_out21_qs;
        reg_rdata_next[17:12] = mio_outsel4_out22_qs;
        reg_rdata_next[23:18] = mio_outsel4_out23_qs;
        reg_rdata_next[29:24] = mio_outsel4_out24_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[5:0] = mio_outsel5_out25_qs;
        reg_rdata_next[11:6] = mio_outsel5_out26_qs;
        reg_rdata_next[17:12] = mio_outsel5_out27_qs;
        reg_rdata_next[23:18] = mio_outsel5_out28_qs;
        reg_rdata_next[29:24] = mio_outsel5_out29_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[5:0] = mio_outsel6_out30_qs;
        reg_rdata_next[11:6] = mio_outsel6_out31_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0, clk_i, !rst_ni)

endmodule
