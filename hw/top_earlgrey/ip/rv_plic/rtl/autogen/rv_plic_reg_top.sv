// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module rv_plic_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output rv_plic_reg_pkg::rv_plic_reg2hw_t reg2hw, // Write
  input  rv_plic_reg_pkg::rv_plic_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import rv_plic_reg_pkg::* ;

  localparam int AW = 10;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  assign tl_reg_h2d = tl_i;
  assign tl_o       = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic ip0_p0_qs;
  logic ip0_p1_qs;
  logic ip0_p2_qs;
  logic ip0_p3_qs;
  logic ip0_p4_qs;
  logic ip0_p5_qs;
  logic ip0_p6_qs;
  logic ip0_p7_qs;
  logic ip0_p8_qs;
  logic ip0_p9_qs;
  logic ip0_p10_qs;
  logic ip0_p11_qs;
  logic ip0_p12_qs;
  logic ip0_p13_qs;
  logic ip0_p14_qs;
  logic ip0_p15_qs;
  logic ip0_p16_qs;
  logic ip0_p17_qs;
  logic ip0_p18_qs;
  logic ip0_p19_qs;
  logic ip0_p20_qs;
  logic ip0_p21_qs;
  logic ip0_p22_qs;
  logic ip0_p23_qs;
  logic ip0_p24_qs;
  logic ip0_p25_qs;
  logic ip0_p26_qs;
  logic ip0_p27_qs;
  logic ip0_p28_qs;
  logic ip0_p29_qs;
  logic ip0_p30_qs;
  logic ip0_p31_qs;
  logic ip1_p32_qs;
  logic ip1_p33_qs;
  logic ip1_p34_qs;
  logic ip1_p35_qs;
  logic ip1_p36_qs;
  logic ip1_p37_qs;
  logic ip1_p38_qs;
  logic ip1_p39_qs;
  logic ip1_p40_qs;
  logic ip1_p41_qs;
  logic ip1_p42_qs;
  logic ip1_p43_qs;
  logic ip1_p44_qs;
  logic ip1_p45_qs;
  logic ip1_p46_qs;
  logic ip1_p47_qs;
  logic ip1_p48_qs;
  logic ip1_p49_qs;
  logic ip1_p50_qs;
  logic ip1_p51_qs;
  logic ip1_p52_qs;
  logic ip1_p53_qs;
  logic ip1_p54_qs;
  logic ip1_p55_qs;
  logic ip1_p56_qs;
  logic ip1_p57_qs;
  logic ip1_p58_qs;
  logic ip1_p59_qs;
  logic ip1_p60_qs;
  logic ip1_p61_qs;
  logic ip1_p62_qs;
  logic ip1_p63_qs;
  logic ip2_p64_qs;
  logic ip2_p65_qs;
  logic ip2_p66_qs;
  logic ip2_p67_qs;
  logic ip2_p68_qs;
  logic ip2_p69_qs;
  logic ip2_p70_qs;
  logic ip2_p71_qs;
  logic ip2_p72_qs;
  logic ip2_p73_qs;
  logic ip2_p74_qs;
  logic ip2_p75_qs;
  logic ip2_p76_qs;
  logic ip2_p77_qs;
  logic ip2_p78_qs;
  logic ip2_p79_qs;
  logic ip2_p80_qs;
  logic ip2_p81_qs;
  logic ip2_p82_qs;
  logic le0_le0_qs;
  logic le0_le0_wd;
  logic le0_le0_we;
  logic le0_le1_qs;
  logic le0_le1_wd;
  logic le0_le1_we;
  logic le0_le2_qs;
  logic le0_le2_wd;
  logic le0_le2_we;
  logic le0_le3_qs;
  logic le0_le3_wd;
  logic le0_le3_we;
  logic le0_le4_qs;
  logic le0_le4_wd;
  logic le0_le4_we;
  logic le0_le5_qs;
  logic le0_le5_wd;
  logic le0_le5_we;
  logic le0_le6_qs;
  logic le0_le6_wd;
  logic le0_le6_we;
  logic le0_le7_qs;
  logic le0_le7_wd;
  logic le0_le7_we;
  logic le0_le8_qs;
  logic le0_le8_wd;
  logic le0_le8_we;
  logic le0_le9_qs;
  logic le0_le9_wd;
  logic le0_le9_we;
  logic le0_le10_qs;
  logic le0_le10_wd;
  logic le0_le10_we;
  logic le0_le11_qs;
  logic le0_le11_wd;
  logic le0_le11_we;
  logic le0_le12_qs;
  logic le0_le12_wd;
  logic le0_le12_we;
  logic le0_le13_qs;
  logic le0_le13_wd;
  logic le0_le13_we;
  logic le0_le14_qs;
  logic le0_le14_wd;
  logic le0_le14_we;
  logic le0_le15_qs;
  logic le0_le15_wd;
  logic le0_le15_we;
  logic le0_le16_qs;
  logic le0_le16_wd;
  logic le0_le16_we;
  logic le0_le17_qs;
  logic le0_le17_wd;
  logic le0_le17_we;
  logic le0_le18_qs;
  logic le0_le18_wd;
  logic le0_le18_we;
  logic le0_le19_qs;
  logic le0_le19_wd;
  logic le0_le19_we;
  logic le0_le20_qs;
  logic le0_le20_wd;
  logic le0_le20_we;
  logic le0_le21_qs;
  logic le0_le21_wd;
  logic le0_le21_we;
  logic le0_le22_qs;
  logic le0_le22_wd;
  logic le0_le22_we;
  logic le0_le23_qs;
  logic le0_le23_wd;
  logic le0_le23_we;
  logic le0_le24_qs;
  logic le0_le24_wd;
  logic le0_le24_we;
  logic le0_le25_qs;
  logic le0_le25_wd;
  logic le0_le25_we;
  logic le0_le26_qs;
  logic le0_le26_wd;
  logic le0_le26_we;
  logic le0_le27_qs;
  logic le0_le27_wd;
  logic le0_le27_we;
  logic le0_le28_qs;
  logic le0_le28_wd;
  logic le0_le28_we;
  logic le0_le29_qs;
  logic le0_le29_wd;
  logic le0_le29_we;
  logic le0_le30_qs;
  logic le0_le30_wd;
  logic le0_le30_we;
  logic le0_le31_qs;
  logic le0_le31_wd;
  logic le0_le31_we;
  logic le1_le32_qs;
  logic le1_le32_wd;
  logic le1_le32_we;
  logic le1_le33_qs;
  logic le1_le33_wd;
  logic le1_le33_we;
  logic le1_le34_qs;
  logic le1_le34_wd;
  logic le1_le34_we;
  logic le1_le35_qs;
  logic le1_le35_wd;
  logic le1_le35_we;
  logic le1_le36_qs;
  logic le1_le36_wd;
  logic le1_le36_we;
  logic le1_le37_qs;
  logic le1_le37_wd;
  logic le1_le37_we;
  logic le1_le38_qs;
  logic le1_le38_wd;
  logic le1_le38_we;
  logic le1_le39_qs;
  logic le1_le39_wd;
  logic le1_le39_we;
  logic le1_le40_qs;
  logic le1_le40_wd;
  logic le1_le40_we;
  logic le1_le41_qs;
  logic le1_le41_wd;
  logic le1_le41_we;
  logic le1_le42_qs;
  logic le1_le42_wd;
  logic le1_le42_we;
  logic le1_le43_qs;
  logic le1_le43_wd;
  logic le1_le43_we;
  logic le1_le44_qs;
  logic le1_le44_wd;
  logic le1_le44_we;
  logic le1_le45_qs;
  logic le1_le45_wd;
  logic le1_le45_we;
  logic le1_le46_qs;
  logic le1_le46_wd;
  logic le1_le46_we;
  logic le1_le47_qs;
  logic le1_le47_wd;
  logic le1_le47_we;
  logic le1_le48_qs;
  logic le1_le48_wd;
  logic le1_le48_we;
  logic le1_le49_qs;
  logic le1_le49_wd;
  logic le1_le49_we;
  logic le1_le50_qs;
  logic le1_le50_wd;
  logic le1_le50_we;
  logic le1_le51_qs;
  logic le1_le51_wd;
  logic le1_le51_we;
  logic le1_le52_qs;
  logic le1_le52_wd;
  logic le1_le52_we;
  logic le1_le53_qs;
  logic le1_le53_wd;
  logic le1_le53_we;
  logic le1_le54_qs;
  logic le1_le54_wd;
  logic le1_le54_we;
  logic le1_le55_qs;
  logic le1_le55_wd;
  logic le1_le55_we;
  logic le1_le56_qs;
  logic le1_le56_wd;
  logic le1_le56_we;
  logic le1_le57_qs;
  logic le1_le57_wd;
  logic le1_le57_we;
  logic le1_le58_qs;
  logic le1_le58_wd;
  logic le1_le58_we;
  logic le1_le59_qs;
  logic le1_le59_wd;
  logic le1_le59_we;
  logic le1_le60_qs;
  logic le1_le60_wd;
  logic le1_le60_we;
  logic le1_le61_qs;
  logic le1_le61_wd;
  logic le1_le61_we;
  logic le1_le62_qs;
  logic le1_le62_wd;
  logic le1_le62_we;
  logic le1_le63_qs;
  logic le1_le63_wd;
  logic le1_le63_we;
  logic le2_le64_qs;
  logic le2_le64_wd;
  logic le2_le64_we;
  logic le2_le65_qs;
  logic le2_le65_wd;
  logic le2_le65_we;
  logic le2_le66_qs;
  logic le2_le66_wd;
  logic le2_le66_we;
  logic le2_le67_qs;
  logic le2_le67_wd;
  logic le2_le67_we;
  logic le2_le68_qs;
  logic le2_le68_wd;
  logic le2_le68_we;
  logic le2_le69_qs;
  logic le2_le69_wd;
  logic le2_le69_we;
  logic le2_le70_qs;
  logic le2_le70_wd;
  logic le2_le70_we;
  logic le2_le71_qs;
  logic le2_le71_wd;
  logic le2_le71_we;
  logic le2_le72_qs;
  logic le2_le72_wd;
  logic le2_le72_we;
  logic le2_le73_qs;
  logic le2_le73_wd;
  logic le2_le73_we;
  logic le2_le74_qs;
  logic le2_le74_wd;
  logic le2_le74_we;
  logic le2_le75_qs;
  logic le2_le75_wd;
  logic le2_le75_we;
  logic le2_le76_qs;
  logic le2_le76_wd;
  logic le2_le76_we;
  logic le2_le77_qs;
  logic le2_le77_wd;
  logic le2_le77_we;
  logic le2_le78_qs;
  logic le2_le78_wd;
  logic le2_le78_we;
  logic le2_le79_qs;
  logic le2_le79_wd;
  logic le2_le79_we;
  logic le2_le80_qs;
  logic le2_le80_wd;
  logic le2_le80_we;
  logic le2_le81_qs;
  logic le2_le81_wd;
  logic le2_le81_we;
  logic le2_le82_qs;
  logic le2_le82_wd;
  logic le2_le82_we;
  logic [1:0] prio0_qs;
  logic [1:0] prio0_wd;
  logic prio0_we;
  logic [1:0] prio1_qs;
  logic [1:0] prio1_wd;
  logic prio1_we;
  logic [1:0] prio2_qs;
  logic [1:0] prio2_wd;
  logic prio2_we;
  logic [1:0] prio3_qs;
  logic [1:0] prio3_wd;
  logic prio3_we;
  logic [1:0] prio4_qs;
  logic [1:0] prio4_wd;
  logic prio4_we;
  logic [1:0] prio5_qs;
  logic [1:0] prio5_wd;
  logic prio5_we;
  logic [1:0] prio6_qs;
  logic [1:0] prio6_wd;
  logic prio6_we;
  logic [1:0] prio7_qs;
  logic [1:0] prio7_wd;
  logic prio7_we;
  logic [1:0] prio8_qs;
  logic [1:0] prio8_wd;
  logic prio8_we;
  logic [1:0] prio9_qs;
  logic [1:0] prio9_wd;
  logic prio9_we;
  logic [1:0] prio10_qs;
  logic [1:0] prio10_wd;
  logic prio10_we;
  logic [1:0] prio11_qs;
  logic [1:0] prio11_wd;
  logic prio11_we;
  logic [1:0] prio12_qs;
  logic [1:0] prio12_wd;
  logic prio12_we;
  logic [1:0] prio13_qs;
  logic [1:0] prio13_wd;
  logic prio13_we;
  logic [1:0] prio14_qs;
  logic [1:0] prio14_wd;
  logic prio14_we;
  logic [1:0] prio15_qs;
  logic [1:0] prio15_wd;
  logic prio15_we;
  logic [1:0] prio16_qs;
  logic [1:0] prio16_wd;
  logic prio16_we;
  logic [1:0] prio17_qs;
  logic [1:0] prio17_wd;
  logic prio17_we;
  logic [1:0] prio18_qs;
  logic [1:0] prio18_wd;
  logic prio18_we;
  logic [1:0] prio19_qs;
  logic [1:0] prio19_wd;
  logic prio19_we;
  logic [1:0] prio20_qs;
  logic [1:0] prio20_wd;
  logic prio20_we;
  logic [1:0] prio21_qs;
  logic [1:0] prio21_wd;
  logic prio21_we;
  logic [1:0] prio22_qs;
  logic [1:0] prio22_wd;
  logic prio22_we;
  logic [1:0] prio23_qs;
  logic [1:0] prio23_wd;
  logic prio23_we;
  logic [1:0] prio24_qs;
  logic [1:0] prio24_wd;
  logic prio24_we;
  logic [1:0] prio25_qs;
  logic [1:0] prio25_wd;
  logic prio25_we;
  logic [1:0] prio26_qs;
  logic [1:0] prio26_wd;
  logic prio26_we;
  logic [1:0] prio27_qs;
  logic [1:0] prio27_wd;
  logic prio27_we;
  logic [1:0] prio28_qs;
  logic [1:0] prio28_wd;
  logic prio28_we;
  logic [1:0] prio29_qs;
  logic [1:0] prio29_wd;
  logic prio29_we;
  logic [1:0] prio30_qs;
  logic [1:0] prio30_wd;
  logic prio30_we;
  logic [1:0] prio31_qs;
  logic [1:0] prio31_wd;
  logic prio31_we;
  logic [1:0] prio32_qs;
  logic [1:0] prio32_wd;
  logic prio32_we;
  logic [1:0] prio33_qs;
  logic [1:0] prio33_wd;
  logic prio33_we;
  logic [1:0] prio34_qs;
  logic [1:0] prio34_wd;
  logic prio34_we;
  logic [1:0] prio35_qs;
  logic [1:0] prio35_wd;
  logic prio35_we;
  logic [1:0] prio36_qs;
  logic [1:0] prio36_wd;
  logic prio36_we;
  logic [1:0] prio37_qs;
  logic [1:0] prio37_wd;
  logic prio37_we;
  logic [1:0] prio38_qs;
  logic [1:0] prio38_wd;
  logic prio38_we;
  logic [1:0] prio39_qs;
  logic [1:0] prio39_wd;
  logic prio39_we;
  logic [1:0] prio40_qs;
  logic [1:0] prio40_wd;
  logic prio40_we;
  logic [1:0] prio41_qs;
  logic [1:0] prio41_wd;
  logic prio41_we;
  logic [1:0] prio42_qs;
  logic [1:0] prio42_wd;
  logic prio42_we;
  logic [1:0] prio43_qs;
  logic [1:0] prio43_wd;
  logic prio43_we;
  logic [1:0] prio44_qs;
  logic [1:0] prio44_wd;
  logic prio44_we;
  logic [1:0] prio45_qs;
  logic [1:0] prio45_wd;
  logic prio45_we;
  logic [1:0] prio46_qs;
  logic [1:0] prio46_wd;
  logic prio46_we;
  logic [1:0] prio47_qs;
  logic [1:0] prio47_wd;
  logic prio47_we;
  logic [1:0] prio48_qs;
  logic [1:0] prio48_wd;
  logic prio48_we;
  logic [1:0] prio49_qs;
  logic [1:0] prio49_wd;
  logic prio49_we;
  logic [1:0] prio50_qs;
  logic [1:0] prio50_wd;
  logic prio50_we;
  logic [1:0] prio51_qs;
  logic [1:0] prio51_wd;
  logic prio51_we;
  logic [1:0] prio52_qs;
  logic [1:0] prio52_wd;
  logic prio52_we;
  logic [1:0] prio53_qs;
  logic [1:0] prio53_wd;
  logic prio53_we;
  logic [1:0] prio54_qs;
  logic [1:0] prio54_wd;
  logic prio54_we;
  logic [1:0] prio55_qs;
  logic [1:0] prio55_wd;
  logic prio55_we;
  logic [1:0] prio56_qs;
  logic [1:0] prio56_wd;
  logic prio56_we;
  logic [1:0] prio57_qs;
  logic [1:0] prio57_wd;
  logic prio57_we;
  logic [1:0] prio58_qs;
  logic [1:0] prio58_wd;
  logic prio58_we;
  logic [1:0] prio59_qs;
  logic [1:0] prio59_wd;
  logic prio59_we;
  logic [1:0] prio60_qs;
  logic [1:0] prio60_wd;
  logic prio60_we;
  logic [1:0] prio61_qs;
  logic [1:0] prio61_wd;
  logic prio61_we;
  logic [1:0] prio62_qs;
  logic [1:0] prio62_wd;
  logic prio62_we;
  logic [1:0] prio63_qs;
  logic [1:0] prio63_wd;
  logic prio63_we;
  logic [1:0] prio64_qs;
  logic [1:0] prio64_wd;
  logic prio64_we;
  logic [1:0] prio65_qs;
  logic [1:0] prio65_wd;
  logic prio65_we;
  logic [1:0] prio66_qs;
  logic [1:0] prio66_wd;
  logic prio66_we;
  logic [1:0] prio67_qs;
  logic [1:0] prio67_wd;
  logic prio67_we;
  logic [1:0] prio68_qs;
  logic [1:0] prio68_wd;
  logic prio68_we;
  logic [1:0] prio69_qs;
  logic [1:0] prio69_wd;
  logic prio69_we;
  logic [1:0] prio70_qs;
  logic [1:0] prio70_wd;
  logic prio70_we;
  logic [1:0] prio71_qs;
  logic [1:0] prio71_wd;
  logic prio71_we;
  logic [1:0] prio72_qs;
  logic [1:0] prio72_wd;
  logic prio72_we;
  logic [1:0] prio73_qs;
  logic [1:0] prio73_wd;
  logic prio73_we;
  logic [1:0] prio74_qs;
  logic [1:0] prio74_wd;
  logic prio74_we;
  logic [1:0] prio75_qs;
  logic [1:0] prio75_wd;
  logic prio75_we;
  logic [1:0] prio76_qs;
  logic [1:0] prio76_wd;
  logic prio76_we;
  logic [1:0] prio77_qs;
  logic [1:0] prio77_wd;
  logic prio77_we;
  logic [1:0] prio78_qs;
  logic [1:0] prio78_wd;
  logic prio78_we;
  logic [1:0] prio79_qs;
  logic [1:0] prio79_wd;
  logic prio79_we;
  logic [1:0] prio80_qs;
  logic [1:0] prio80_wd;
  logic prio80_we;
  logic [1:0] prio81_qs;
  logic [1:0] prio81_wd;
  logic prio81_we;
  logic [1:0] prio82_qs;
  logic [1:0] prio82_wd;
  logic prio82_we;
  logic ie00_e0_qs;
  logic ie00_e0_wd;
  logic ie00_e0_we;
  logic ie00_e1_qs;
  logic ie00_e1_wd;
  logic ie00_e1_we;
  logic ie00_e2_qs;
  logic ie00_e2_wd;
  logic ie00_e2_we;
  logic ie00_e3_qs;
  logic ie00_e3_wd;
  logic ie00_e3_we;
  logic ie00_e4_qs;
  logic ie00_e4_wd;
  logic ie00_e4_we;
  logic ie00_e5_qs;
  logic ie00_e5_wd;
  logic ie00_e5_we;
  logic ie00_e6_qs;
  logic ie00_e6_wd;
  logic ie00_e6_we;
  logic ie00_e7_qs;
  logic ie00_e7_wd;
  logic ie00_e7_we;
  logic ie00_e8_qs;
  logic ie00_e8_wd;
  logic ie00_e8_we;
  logic ie00_e9_qs;
  logic ie00_e9_wd;
  logic ie00_e9_we;
  logic ie00_e10_qs;
  logic ie00_e10_wd;
  logic ie00_e10_we;
  logic ie00_e11_qs;
  logic ie00_e11_wd;
  logic ie00_e11_we;
  logic ie00_e12_qs;
  logic ie00_e12_wd;
  logic ie00_e12_we;
  logic ie00_e13_qs;
  logic ie00_e13_wd;
  logic ie00_e13_we;
  logic ie00_e14_qs;
  logic ie00_e14_wd;
  logic ie00_e14_we;
  logic ie00_e15_qs;
  logic ie00_e15_wd;
  logic ie00_e15_we;
  logic ie00_e16_qs;
  logic ie00_e16_wd;
  logic ie00_e16_we;
  logic ie00_e17_qs;
  logic ie00_e17_wd;
  logic ie00_e17_we;
  logic ie00_e18_qs;
  logic ie00_e18_wd;
  logic ie00_e18_we;
  logic ie00_e19_qs;
  logic ie00_e19_wd;
  logic ie00_e19_we;
  logic ie00_e20_qs;
  logic ie00_e20_wd;
  logic ie00_e20_we;
  logic ie00_e21_qs;
  logic ie00_e21_wd;
  logic ie00_e21_we;
  logic ie00_e22_qs;
  logic ie00_e22_wd;
  logic ie00_e22_we;
  logic ie00_e23_qs;
  logic ie00_e23_wd;
  logic ie00_e23_we;
  logic ie00_e24_qs;
  logic ie00_e24_wd;
  logic ie00_e24_we;
  logic ie00_e25_qs;
  logic ie00_e25_wd;
  logic ie00_e25_we;
  logic ie00_e26_qs;
  logic ie00_e26_wd;
  logic ie00_e26_we;
  logic ie00_e27_qs;
  logic ie00_e27_wd;
  logic ie00_e27_we;
  logic ie00_e28_qs;
  logic ie00_e28_wd;
  logic ie00_e28_we;
  logic ie00_e29_qs;
  logic ie00_e29_wd;
  logic ie00_e29_we;
  logic ie00_e30_qs;
  logic ie00_e30_wd;
  logic ie00_e30_we;
  logic ie00_e31_qs;
  logic ie00_e31_wd;
  logic ie00_e31_we;
  logic ie01_e32_qs;
  logic ie01_e32_wd;
  logic ie01_e32_we;
  logic ie01_e33_qs;
  logic ie01_e33_wd;
  logic ie01_e33_we;
  logic ie01_e34_qs;
  logic ie01_e34_wd;
  logic ie01_e34_we;
  logic ie01_e35_qs;
  logic ie01_e35_wd;
  logic ie01_e35_we;
  logic ie01_e36_qs;
  logic ie01_e36_wd;
  logic ie01_e36_we;
  logic ie01_e37_qs;
  logic ie01_e37_wd;
  logic ie01_e37_we;
  logic ie01_e38_qs;
  logic ie01_e38_wd;
  logic ie01_e38_we;
  logic ie01_e39_qs;
  logic ie01_e39_wd;
  logic ie01_e39_we;
  logic ie01_e40_qs;
  logic ie01_e40_wd;
  logic ie01_e40_we;
  logic ie01_e41_qs;
  logic ie01_e41_wd;
  logic ie01_e41_we;
  logic ie01_e42_qs;
  logic ie01_e42_wd;
  logic ie01_e42_we;
  logic ie01_e43_qs;
  logic ie01_e43_wd;
  logic ie01_e43_we;
  logic ie01_e44_qs;
  logic ie01_e44_wd;
  logic ie01_e44_we;
  logic ie01_e45_qs;
  logic ie01_e45_wd;
  logic ie01_e45_we;
  logic ie01_e46_qs;
  logic ie01_e46_wd;
  logic ie01_e46_we;
  logic ie01_e47_qs;
  logic ie01_e47_wd;
  logic ie01_e47_we;
  logic ie01_e48_qs;
  logic ie01_e48_wd;
  logic ie01_e48_we;
  logic ie01_e49_qs;
  logic ie01_e49_wd;
  logic ie01_e49_we;
  logic ie01_e50_qs;
  logic ie01_e50_wd;
  logic ie01_e50_we;
  logic ie01_e51_qs;
  logic ie01_e51_wd;
  logic ie01_e51_we;
  logic ie01_e52_qs;
  logic ie01_e52_wd;
  logic ie01_e52_we;
  logic ie01_e53_qs;
  logic ie01_e53_wd;
  logic ie01_e53_we;
  logic ie01_e54_qs;
  logic ie01_e54_wd;
  logic ie01_e54_we;
  logic ie01_e55_qs;
  logic ie01_e55_wd;
  logic ie01_e55_we;
  logic ie01_e56_qs;
  logic ie01_e56_wd;
  logic ie01_e56_we;
  logic ie01_e57_qs;
  logic ie01_e57_wd;
  logic ie01_e57_we;
  logic ie01_e58_qs;
  logic ie01_e58_wd;
  logic ie01_e58_we;
  logic ie01_e59_qs;
  logic ie01_e59_wd;
  logic ie01_e59_we;
  logic ie01_e60_qs;
  logic ie01_e60_wd;
  logic ie01_e60_we;
  logic ie01_e61_qs;
  logic ie01_e61_wd;
  logic ie01_e61_we;
  logic ie01_e62_qs;
  logic ie01_e62_wd;
  logic ie01_e62_we;
  logic ie01_e63_qs;
  logic ie01_e63_wd;
  logic ie01_e63_we;
  logic ie02_e64_qs;
  logic ie02_e64_wd;
  logic ie02_e64_we;
  logic ie02_e65_qs;
  logic ie02_e65_wd;
  logic ie02_e65_we;
  logic ie02_e66_qs;
  logic ie02_e66_wd;
  logic ie02_e66_we;
  logic ie02_e67_qs;
  logic ie02_e67_wd;
  logic ie02_e67_we;
  logic ie02_e68_qs;
  logic ie02_e68_wd;
  logic ie02_e68_we;
  logic ie02_e69_qs;
  logic ie02_e69_wd;
  logic ie02_e69_we;
  logic ie02_e70_qs;
  logic ie02_e70_wd;
  logic ie02_e70_we;
  logic ie02_e71_qs;
  logic ie02_e71_wd;
  logic ie02_e71_we;
  logic ie02_e72_qs;
  logic ie02_e72_wd;
  logic ie02_e72_we;
  logic ie02_e73_qs;
  logic ie02_e73_wd;
  logic ie02_e73_we;
  logic ie02_e74_qs;
  logic ie02_e74_wd;
  logic ie02_e74_we;
  logic ie02_e75_qs;
  logic ie02_e75_wd;
  logic ie02_e75_we;
  logic ie02_e76_qs;
  logic ie02_e76_wd;
  logic ie02_e76_we;
  logic ie02_e77_qs;
  logic ie02_e77_wd;
  logic ie02_e77_we;
  logic ie02_e78_qs;
  logic ie02_e78_wd;
  logic ie02_e78_we;
  logic ie02_e79_qs;
  logic ie02_e79_wd;
  logic ie02_e79_we;
  logic ie02_e80_qs;
  logic ie02_e80_wd;
  logic ie02_e80_we;
  logic ie02_e81_qs;
  logic ie02_e81_wd;
  logic ie02_e81_we;
  logic ie02_e82_qs;
  logic ie02_e82_wd;
  logic ie02_e82_we;
  logic [1:0] threshold0_qs;
  logic [1:0] threshold0_wd;
  logic threshold0_we;
  logic [6:0] cc0_qs;
  logic [6:0] cc0_wd;
  logic cc0_we;
  logic cc0_re;
  logic msip0_qs;
  logic msip0_wd;
  logic msip0_we;

  // Register instances

  // Subregister 0 of Multireg ip
  // R[ip0]: V(False)

  // F[p0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[0].de),
    .d      (hw2reg.ip[0].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p0_qs)
  );


  // F[p1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[1].de),
    .d      (hw2reg.ip[1].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p1_qs)
  );


  // F[p2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[2].de),
    .d      (hw2reg.ip[2].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p2_qs)
  );


  // F[p3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[3].de),
    .d      (hw2reg.ip[3].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p3_qs)
  );


  // F[p4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[4].de),
    .d      (hw2reg.ip[4].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p4_qs)
  );


  // F[p5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[5].de),
    .d      (hw2reg.ip[5].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p5_qs)
  );


  // F[p6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[6].de),
    .d      (hw2reg.ip[6].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p6_qs)
  );


  // F[p7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[7].de),
    .d      (hw2reg.ip[7].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p7_qs)
  );


  // F[p8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[8].de),
    .d      (hw2reg.ip[8].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p8_qs)
  );


  // F[p9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[9].de),
    .d      (hw2reg.ip[9].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p9_qs)
  );


  // F[p10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[10].de),
    .d      (hw2reg.ip[10].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p10_qs)
  );


  // F[p11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[11].de),
    .d      (hw2reg.ip[11].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p11_qs)
  );


  // F[p12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[12].de),
    .d      (hw2reg.ip[12].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p12_qs)
  );


  // F[p13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[13].de),
    .d      (hw2reg.ip[13].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p13_qs)
  );


  // F[p14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[14].de),
    .d      (hw2reg.ip[14].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p14_qs)
  );


  // F[p15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[15].de),
    .d      (hw2reg.ip[15].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p15_qs)
  );


  // F[p16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[16].de),
    .d      (hw2reg.ip[16].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p16_qs)
  );


  // F[p17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[17].de),
    .d      (hw2reg.ip[17].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p17_qs)
  );


  // F[p18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[18].de),
    .d      (hw2reg.ip[18].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p18_qs)
  );


  // F[p19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[19].de),
    .d      (hw2reg.ip[19].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p19_qs)
  );


  // F[p20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[20].de),
    .d      (hw2reg.ip[20].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p20_qs)
  );


  // F[p21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[21].de),
    .d      (hw2reg.ip[21].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p21_qs)
  );


  // F[p22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[22].de),
    .d      (hw2reg.ip[22].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p22_qs)
  );


  // F[p23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[23].de),
    .d      (hw2reg.ip[23].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p23_qs)
  );


  // F[p24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[24].de),
    .d      (hw2reg.ip[24].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p24_qs)
  );


  // F[p25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[25].de),
    .d      (hw2reg.ip[25].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p25_qs)
  );


  // F[p26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[26].de),
    .d      (hw2reg.ip[26].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p26_qs)
  );


  // F[p27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[27].de),
    .d      (hw2reg.ip[27].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p27_qs)
  );


  // F[p28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[28].de),
    .d      (hw2reg.ip[28].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p28_qs)
  );


  // F[p29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[29].de),
    .d      (hw2reg.ip[29].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p29_qs)
  );


  // F[p30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[30].de),
    .d      (hw2reg.ip[30].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p30_qs)
  );


  // F[p31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip0_p31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[31].de),
    .d      (hw2reg.ip[31].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip0_p31_qs)
  );


  // Subregister 32 of Multireg ip
  // R[ip1]: V(False)

  // F[p32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[32].de),
    .d      (hw2reg.ip[32].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p32_qs)
  );


  // F[p33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[33].de),
    .d      (hw2reg.ip[33].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p33_qs)
  );


  // F[p34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[34].de),
    .d      (hw2reg.ip[34].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p34_qs)
  );


  // F[p35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[35].de),
    .d      (hw2reg.ip[35].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p35_qs)
  );


  // F[p36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[36].de),
    .d      (hw2reg.ip[36].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p36_qs)
  );


  // F[p37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[37].de),
    .d      (hw2reg.ip[37].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p37_qs)
  );


  // F[p38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[38].de),
    .d      (hw2reg.ip[38].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p38_qs)
  );


  // F[p39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[39].de),
    .d      (hw2reg.ip[39].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p39_qs)
  );


  // F[p40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[40].de),
    .d      (hw2reg.ip[40].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p40_qs)
  );


  // F[p41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[41].de),
    .d      (hw2reg.ip[41].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p41_qs)
  );


  // F[p42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[42].de),
    .d      (hw2reg.ip[42].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p42_qs)
  );


  // F[p43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[43].de),
    .d      (hw2reg.ip[43].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p43_qs)
  );


  // F[p44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[44].de),
    .d      (hw2reg.ip[44].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p44_qs)
  );


  // F[p45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[45].de),
    .d      (hw2reg.ip[45].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p45_qs)
  );


  // F[p46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[46].de),
    .d      (hw2reg.ip[46].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p46_qs)
  );


  // F[p47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[47].de),
    .d      (hw2reg.ip[47].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p47_qs)
  );


  // F[p48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[48].de),
    .d      (hw2reg.ip[48].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p48_qs)
  );


  // F[p49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[49].de),
    .d      (hw2reg.ip[49].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p49_qs)
  );


  // F[p50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[50].de),
    .d      (hw2reg.ip[50].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p50_qs)
  );


  // F[p51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[51].de),
    .d      (hw2reg.ip[51].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p51_qs)
  );


  // F[p52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[52].de),
    .d      (hw2reg.ip[52].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p52_qs)
  );


  // F[p53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[53].de),
    .d      (hw2reg.ip[53].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p53_qs)
  );


  // F[p54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[54].de),
    .d      (hw2reg.ip[54].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p54_qs)
  );


  // F[p55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[55].de),
    .d      (hw2reg.ip[55].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p55_qs)
  );


  // F[p56]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[56].de),
    .d      (hw2reg.ip[56].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p56_qs)
  );


  // F[p57]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[57].de),
    .d      (hw2reg.ip[57].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p57_qs)
  );


  // F[p58]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[58].de),
    .d      (hw2reg.ip[58].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p58_qs)
  );


  // F[p59]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[59].de),
    .d      (hw2reg.ip[59].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p59_qs)
  );


  // F[p60]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[60].de),
    .d      (hw2reg.ip[60].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p60_qs)
  );


  // F[p61]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[61].de),
    .d      (hw2reg.ip[61].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p61_qs)
  );


  // F[p62]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[62].de),
    .d      (hw2reg.ip[62].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p62_qs)
  );


  // F[p63]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip1_p63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[63].de),
    .d      (hw2reg.ip[63].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip1_p63_qs)
  );


  // Subregister 64 of Multireg ip
  // R[ip2]: V(False)

  // F[p64]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[64].de),
    .d      (hw2reg.ip[64].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p64_qs)
  );


  // F[p65]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[65].de),
    .d      (hw2reg.ip[65].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p65_qs)
  );


  // F[p66]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[66].de),
    .d      (hw2reg.ip[66].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p66_qs)
  );


  // F[p67]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[67].de),
    .d      (hw2reg.ip[67].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p67_qs)
  );


  // F[p68]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[68].de),
    .d      (hw2reg.ip[68].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p68_qs)
  );


  // F[p69]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[69].de),
    .d      (hw2reg.ip[69].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p69_qs)
  );


  // F[p70]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[70].de),
    .d      (hw2reg.ip[70].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p70_qs)
  );


  // F[p71]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[71].de),
    .d      (hw2reg.ip[71].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p71_qs)
  );


  // F[p72]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[72].de),
    .d      (hw2reg.ip[72].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p72_qs)
  );


  // F[p73]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[73].de),
    .d      (hw2reg.ip[73].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p73_qs)
  );


  // F[p74]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[74].de),
    .d      (hw2reg.ip[74].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p74_qs)
  );


  // F[p75]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[75].de),
    .d      (hw2reg.ip[75].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p75_qs)
  );


  // F[p76]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[76].de),
    .d      (hw2reg.ip[76].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p76_qs)
  );


  // F[p77]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[77].de),
    .d      (hw2reg.ip[77].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p77_qs)
  );


  // F[p78]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[78].de),
    .d      (hw2reg.ip[78].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p78_qs)
  );


  // F[p79]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[79].de),
    .d      (hw2reg.ip[79].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p79_qs)
  );


  // F[p80]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[80].de),
    .d      (hw2reg.ip[80].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p80_qs)
  );


  // F[p81]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[81].de),
    .d      (hw2reg.ip[81].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p81_qs)
  );


  // F[p82]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_ip2_p82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.ip[82].de),
    .d      (hw2reg.ip[82].d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ip2_p82_qs)
  );




  // Subregister 0 of Multireg le
  // R[le0]: V(False)

  // F[le0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le0_we),
    .wd     (le0_le0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[0].q ),

    // to register interface (read)
    .qs     (le0_le0_qs)
  );


  // F[le1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le1_we),
    .wd     (le0_le1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[1].q ),

    // to register interface (read)
    .qs     (le0_le1_qs)
  );


  // F[le2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le2_we),
    .wd     (le0_le2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[2].q ),

    // to register interface (read)
    .qs     (le0_le2_qs)
  );


  // F[le3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le3_we),
    .wd     (le0_le3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[3].q ),

    // to register interface (read)
    .qs     (le0_le3_qs)
  );


  // F[le4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le4_we),
    .wd     (le0_le4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[4].q ),

    // to register interface (read)
    .qs     (le0_le4_qs)
  );


  // F[le5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le5_we),
    .wd     (le0_le5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[5].q ),

    // to register interface (read)
    .qs     (le0_le5_qs)
  );


  // F[le6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le6_we),
    .wd     (le0_le6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[6].q ),

    // to register interface (read)
    .qs     (le0_le6_qs)
  );


  // F[le7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le7_we),
    .wd     (le0_le7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[7].q ),

    // to register interface (read)
    .qs     (le0_le7_qs)
  );


  // F[le8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le8_we),
    .wd     (le0_le8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[8].q ),

    // to register interface (read)
    .qs     (le0_le8_qs)
  );


  // F[le9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le9_we),
    .wd     (le0_le9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[9].q ),

    // to register interface (read)
    .qs     (le0_le9_qs)
  );


  // F[le10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le10_we),
    .wd     (le0_le10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[10].q ),

    // to register interface (read)
    .qs     (le0_le10_qs)
  );


  // F[le11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le11_we),
    .wd     (le0_le11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[11].q ),

    // to register interface (read)
    .qs     (le0_le11_qs)
  );


  // F[le12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le12_we),
    .wd     (le0_le12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[12].q ),

    // to register interface (read)
    .qs     (le0_le12_qs)
  );


  // F[le13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le13_we),
    .wd     (le0_le13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[13].q ),

    // to register interface (read)
    .qs     (le0_le13_qs)
  );


  // F[le14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le14_we),
    .wd     (le0_le14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[14].q ),

    // to register interface (read)
    .qs     (le0_le14_qs)
  );


  // F[le15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le15_we),
    .wd     (le0_le15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[15].q ),

    // to register interface (read)
    .qs     (le0_le15_qs)
  );


  // F[le16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le16_we),
    .wd     (le0_le16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[16].q ),

    // to register interface (read)
    .qs     (le0_le16_qs)
  );


  // F[le17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le17_we),
    .wd     (le0_le17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[17].q ),

    // to register interface (read)
    .qs     (le0_le17_qs)
  );


  // F[le18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le18_we),
    .wd     (le0_le18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[18].q ),

    // to register interface (read)
    .qs     (le0_le18_qs)
  );


  // F[le19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le19_we),
    .wd     (le0_le19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[19].q ),

    // to register interface (read)
    .qs     (le0_le19_qs)
  );


  // F[le20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le20_we),
    .wd     (le0_le20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[20].q ),

    // to register interface (read)
    .qs     (le0_le20_qs)
  );


  // F[le21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le21_we),
    .wd     (le0_le21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[21].q ),

    // to register interface (read)
    .qs     (le0_le21_qs)
  );


  // F[le22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le22_we),
    .wd     (le0_le22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[22].q ),

    // to register interface (read)
    .qs     (le0_le22_qs)
  );


  // F[le23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le23_we),
    .wd     (le0_le23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[23].q ),

    // to register interface (read)
    .qs     (le0_le23_qs)
  );


  // F[le24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le24_we),
    .wd     (le0_le24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[24].q ),

    // to register interface (read)
    .qs     (le0_le24_qs)
  );


  // F[le25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le25_we),
    .wd     (le0_le25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[25].q ),

    // to register interface (read)
    .qs     (le0_le25_qs)
  );


  // F[le26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le26_we),
    .wd     (le0_le26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[26].q ),

    // to register interface (read)
    .qs     (le0_le26_qs)
  );


  // F[le27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le27_we),
    .wd     (le0_le27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[27].q ),

    // to register interface (read)
    .qs     (le0_le27_qs)
  );


  // F[le28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le28_we),
    .wd     (le0_le28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[28].q ),

    // to register interface (read)
    .qs     (le0_le28_qs)
  );


  // F[le29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le29_we),
    .wd     (le0_le29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[29].q ),

    // to register interface (read)
    .qs     (le0_le29_qs)
  );


  // F[le30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le30_we),
    .wd     (le0_le30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[30].q ),

    // to register interface (read)
    .qs     (le0_le30_qs)
  );


  // F[le31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le0_le31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le0_le31_we),
    .wd     (le0_le31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[31].q ),

    // to register interface (read)
    .qs     (le0_le31_qs)
  );


  // Subregister 32 of Multireg le
  // R[le1]: V(False)

  // F[le32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le32_we),
    .wd     (le1_le32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[32].q ),

    // to register interface (read)
    .qs     (le1_le32_qs)
  );


  // F[le33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le33_we),
    .wd     (le1_le33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[33].q ),

    // to register interface (read)
    .qs     (le1_le33_qs)
  );


  // F[le34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le34_we),
    .wd     (le1_le34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[34].q ),

    // to register interface (read)
    .qs     (le1_le34_qs)
  );


  // F[le35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le35_we),
    .wd     (le1_le35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[35].q ),

    // to register interface (read)
    .qs     (le1_le35_qs)
  );


  // F[le36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le36_we),
    .wd     (le1_le36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[36].q ),

    // to register interface (read)
    .qs     (le1_le36_qs)
  );


  // F[le37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le37_we),
    .wd     (le1_le37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[37].q ),

    // to register interface (read)
    .qs     (le1_le37_qs)
  );


  // F[le38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le38_we),
    .wd     (le1_le38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[38].q ),

    // to register interface (read)
    .qs     (le1_le38_qs)
  );


  // F[le39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le39_we),
    .wd     (le1_le39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[39].q ),

    // to register interface (read)
    .qs     (le1_le39_qs)
  );


  // F[le40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le40_we),
    .wd     (le1_le40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[40].q ),

    // to register interface (read)
    .qs     (le1_le40_qs)
  );


  // F[le41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le41_we),
    .wd     (le1_le41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[41].q ),

    // to register interface (read)
    .qs     (le1_le41_qs)
  );


  // F[le42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le42_we),
    .wd     (le1_le42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[42].q ),

    // to register interface (read)
    .qs     (le1_le42_qs)
  );


  // F[le43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le43_we),
    .wd     (le1_le43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[43].q ),

    // to register interface (read)
    .qs     (le1_le43_qs)
  );


  // F[le44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le44_we),
    .wd     (le1_le44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[44].q ),

    // to register interface (read)
    .qs     (le1_le44_qs)
  );


  // F[le45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le45_we),
    .wd     (le1_le45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[45].q ),

    // to register interface (read)
    .qs     (le1_le45_qs)
  );


  // F[le46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le46_we),
    .wd     (le1_le46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[46].q ),

    // to register interface (read)
    .qs     (le1_le46_qs)
  );


  // F[le47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le47_we),
    .wd     (le1_le47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[47].q ),

    // to register interface (read)
    .qs     (le1_le47_qs)
  );


  // F[le48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le48_we),
    .wd     (le1_le48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[48].q ),

    // to register interface (read)
    .qs     (le1_le48_qs)
  );


  // F[le49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le49_we),
    .wd     (le1_le49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[49].q ),

    // to register interface (read)
    .qs     (le1_le49_qs)
  );


  // F[le50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le50_we),
    .wd     (le1_le50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[50].q ),

    // to register interface (read)
    .qs     (le1_le50_qs)
  );


  // F[le51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le51_we),
    .wd     (le1_le51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[51].q ),

    // to register interface (read)
    .qs     (le1_le51_qs)
  );


  // F[le52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le52_we),
    .wd     (le1_le52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[52].q ),

    // to register interface (read)
    .qs     (le1_le52_qs)
  );


  // F[le53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le53_we),
    .wd     (le1_le53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[53].q ),

    // to register interface (read)
    .qs     (le1_le53_qs)
  );


  // F[le54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le54_we),
    .wd     (le1_le54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[54].q ),

    // to register interface (read)
    .qs     (le1_le54_qs)
  );


  // F[le55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le55_we),
    .wd     (le1_le55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[55].q ),

    // to register interface (read)
    .qs     (le1_le55_qs)
  );


  // F[le56]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le56_we),
    .wd     (le1_le56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[56].q ),

    // to register interface (read)
    .qs     (le1_le56_qs)
  );


  // F[le57]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le57_we),
    .wd     (le1_le57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[57].q ),

    // to register interface (read)
    .qs     (le1_le57_qs)
  );


  // F[le58]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le58_we),
    .wd     (le1_le58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[58].q ),

    // to register interface (read)
    .qs     (le1_le58_qs)
  );


  // F[le59]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le59_we),
    .wd     (le1_le59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[59].q ),

    // to register interface (read)
    .qs     (le1_le59_qs)
  );


  // F[le60]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le60_we),
    .wd     (le1_le60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[60].q ),

    // to register interface (read)
    .qs     (le1_le60_qs)
  );


  // F[le61]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le61_we),
    .wd     (le1_le61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[61].q ),

    // to register interface (read)
    .qs     (le1_le61_qs)
  );


  // F[le62]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le62_we),
    .wd     (le1_le62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[62].q ),

    // to register interface (read)
    .qs     (le1_le62_qs)
  );


  // F[le63]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le1_le63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le1_le63_we),
    .wd     (le1_le63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[63].q ),

    // to register interface (read)
    .qs     (le1_le63_qs)
  );


  // Subregister 64 of Multireg le
  // R[le2]: V(False)

  // F[le64]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le64_we),
    .wd     (le2_le64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[64].q ),

    // to register interface (read)
    .qs     (le2_le64_qs)
  );


  // F[le65]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le65_we),
    .wd     (le2_le65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[65].q ),

    // to register interface (read)
    .qs     (le2_le65_qs)
  );


  // F[le66]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le66_we),
    .wd     (le2_le66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[66].q ),

    // to register interface (read)
    .qs     (le2_le66_qs)
  );


  // F[le67]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le67_we),
    .wd     (le2_le67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[67].q ),

    // to register interface (read)
    .qs     (le2_le67_qs)
  );


  // F[le68]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le68_we),
    .wd     (le2_le68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[68].q ),

    // to register interface (read)
    .qs     (le2_le68_qs)
  );


  // F[le69]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le69_we),
    .wd     (le2_le69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[69].q ),

    // to register interface (read)
    .qs     (le2_le69_qs)
  );


  // F[le70]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le70_we),
    .wd     (le2_le70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[70].q ),

    // to register interface (read)
    .qs     (le2_le70_qs)
  );


  // F[le71]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le71_we),
    .wd     (le2_le71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[71].q ),

    // to register interface (read)
    .qs     (le2_le71_qs)
  );


  // F[le72]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le72_we),
    .wd     (le2_le72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[72].q ),

    // to register interface (read)
    .qs     (le2_le72_qs)
  );


  // F[le73]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le73_we),
    .wd     (le2_le73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[73].q ),

    // to register interface (read)
    .qs     (le2_le73_qs)
  );


  // F[le74]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le74_we),
    .wd     (le2_le74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[74].q ),

    // to register interface (read)
    .qs     (le2_le74_qs)
  );


  // F[le75]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le75_we),
    .wd     (le2_le75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[75].q ),

    // to register interface (read)
    .qs     (le2_le75_qs)
  );


  // F[le76]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le76_we),
    .wd     (le2_le76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[76].q ),

    // to register interface (read)
    .qs     (le2_le76_qs)
  );


  // F[le77]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le77_we),
    .wd     (le2_le77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[77].q ),

    // to register interface (read)
    .qs     (le2_le77_qs)
  );


  // F[le78]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le78_we),
    .wd     (le2_le78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[78].q ),

    // to register interface (read)
    .qs     (le2_le78_qs)
  );


  // F[le79]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le79_we),
    .wd     (le2_le79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[79].q ),

    // to register interface (read)
    .qs     (le2_le79_qs)
  );


  // F[le80]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le80_we),
    .wd     (le2_le80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[80].q ),

    // to register interface (read)
    .qs     (le2_le80_qs)
  );


  // F[le81]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le81_we),
    .wd     (le2_le81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[81].q ),

    // to register interface (read)
    .qs     (le2_le81_qs)
  );


  // F[le82]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_le2_le82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (le2_le82_we),
    .wd     (le2_le82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.le[82].q ),

    // to register interface (read)
    .qs     (le2_le82_qs)
  );



  // R[prio0]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio0_we),
    .wd     (prio0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio0.q ),

    // to register interface (read)
    .qs     (prio0_qs)
  );


  // R[prio1]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio1_we),
    .wd     (prio1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio1.q ),

    // to register interface (read)
    .qs     (prio1_qs)
  );


  // R[prio2]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio2_we),
    .wd     (prio2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio2.q ),

    // to register interface (read)
    .qs     (prio2_qs)
  );


  // R[prio3]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio3_we),
    .wd     (prio3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio3.q ),

    // to register interface (read)
    .qs     (prio3_qs)
  );


  // R[prio4]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio4_we),
    .wd     (prio4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio4.q ),

    // to register interface (read)
    .qs     (prio4_qs)
  );


  // R[prio5]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio5_we),
    .wd     (prio5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio5.q ),

    // to register interface (read)
    .qs     (prio5_qs)
  );


  // R[prio6]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio6_we),
    .wd     (prio6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio6.q ),

    // to register interface (read)
    .qs     (prio6_qs)
  );


  // R[prio7]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio7_we),
    .wd     (prio7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio7.q ),

    // to register interface (read)
    .qs     (prio7_qs)
  );


  // R[prio8]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio8_we),
    .wd     (prio8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio8.q ),

    // to register interface (read)
    .qs     (prio8_qs)
  );


  // R[prio9]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio9_we),
    .wd     (prio9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio9.q ),

    // to register interface (read)
    .qs     (prio9_qs)
  );


  // R[prio10]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio10_we),
    .wd     (prio10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio10.q ),

    // to register interface (read)
    .qs     (prio10_qs)
  );


  // R[prio11]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio11_we),
    .wd     (prio11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio11.q ),

    // to register interface (read)
    .qs     (prio11_qs)
  );


  // R[prio12]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio12_we),
    .wd     (prio12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio12.q ),

    // to register interface (read)
    .qs     (prio12_qs)
  );


  // R[prio13]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio13_we),
    .wd     (prio13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio13.q ),

    // to register interface (read)
    .qs     (prio13_qs)
  );


  // R[prio14]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio14_we),
    .wd     (prio14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio14.q ),

    // to register interface (read)
    .qs     (prio14_qs)
  );


  // R[prio15]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio15_we),
    .wd     (prio15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio15.q ),

    // to register interface (read)
    .qs     (prio15_qs)
  );


  // R[prio16]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio16_we),
    .wd     (prio16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio16.q ),

    // to register interface (read)
    .qs     (prio16_qs)
  );


  // R[prio17]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio17_we),
    .wd     (prio17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio17.q ),

    // to register interface (read)
    .qs     (prio17_qs)
  );


  // R[prio18]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio18_we),
    .wd     (prio18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio18.q ),

    // to register interface (read)
    .qs     (prio18_qs)
  );


  // R[prio19]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio19_we),
    .wd     (prio19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio19.q ),

    // to register interface (read)
    .qs     (prio19_qs)
  );


  // R[prio20]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio20_we),
    .wd     (prio20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio20.q ),

    // to register interface (read)
    .qs     (prio20_qs)
  );


  // R[prio21]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio21_we),
    .wd     (prio21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio21.q ),

    // to register interface (read)
    .qs     (prio21_qs)
  );


  // R[prio22]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio22_we),
    .wd     (prio22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio22.q ),

    // to register interface (read)
    .qs     (prio22_qs)
  );


  // R[prio23]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio23_we),
    .wd     (prio23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio23.q ),

    // to register interface (read)
    .qs     (prio23_qs)
  );


  // R[prio24]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio24_we),
    .wd     (prio24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio24.q ),

    // to register interface (read)
    .qs     (prio24_qs)
  );


  // R[prio25]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio25_we),
    .wd     (prio25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio25.q ),

    // to register interface (read)
    .qs     (prio25_qs)
  );


  // R[prio26]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio26_we),
    .wd     (prio26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio26.q ),

    // to register interface (read)
    .qs     (prio26_qs)
  );


  // R[prio27]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio27_we),
    .wd     (prio27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio27.q ),

    // to register interface (read)
    .qs     (prio27_qs)
  );


  // R[prio28]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio28_we),
    .wd     (prio28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio28.q ),

    // to register interface (read)
    .qs     (prio28_qs)
  );


  // R[prio29]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio29_we),
    .wd     (prio29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio29.q ),

    // to register interface (read)
    .qs     (prio29_qs)
  );


  // R[prio30]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio30_we),
    .wd     (prio30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio30.q ),

    // to register interface (read)
    .qs     (prio30_qs)
  );


  // R[prio31]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio31_we),
    .wd     (prio31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio31.q ),

    // to register interface (read)
    .qs     (prio31_qs)
  );


  // R[prio32]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio32_we),
    .wd     (prio32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio32.q ),

    // to register interface (read)
    .qs     (prio32_qs)
  );


  // R[prio33]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio33_we),
    .wd     (prio33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio33.q ),

    // to register interface (read)
    .qs     (prio33_qs)
  );


  // R[prio34]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio34_we),
    .wd     (prio34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio34.q ),

    // to register interface (read)
    .qs     (prio34_qs)
  );


  // R[prio35]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio35_we),
    .wd     (prio35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio35.q ),

    // to register interface (read)
    .qs     (prio35_qs)
  );


  // R[prio36]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio36_we),
    .wd     (prio36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio36.q ),

    // to register interface (read)
    .qs     (prio36_qs)
  );


  // R[prio37]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio37_we),
    .wd     (prio37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio37.q ),

    // to register interface (read)
    .qs     (prio37_qs)
  );


  // R[prio38]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio38_we),
    .wd     (prio38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio38.q ),

    // to register interface (read)
    .qs     (prio38_qs)
  );


  // R[prio39]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio39_we),
    .wd     (prio39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio39.q ),

    // to register interface (read)
    .qs     (prio39_qs)
  );


  // R[prio40]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio40_we),
    .wd     (prio40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio40.q ),

    // to register interface (read)
    .qs     (prio40_qs)
  );


  // R[prio41]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio41_we),
    .wd     (prio41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio41.q ),

    // to register interface (read)
    .qs     (prio41_qs)
  );


  // R[prio42]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio42_we),
    .wd     (prio42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio42.q ),

    // to register interface (read)
    .qs     (prio42_qs)
  );


  // R[prio43]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio43_we),
    .wd     (prio43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio43.q ),

    // to register interface (read)
    .qs     (prio43_qs)
  );


  // R[prio44]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio44_we),
    .wd     (prio44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio44.q ),

    // to register interface (read)
    .qs     (prio44_qs)
  );


  // R[prio45]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio45_we),
    .wd     (prio45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio45.q ),

    // to register interface (read)
    .qs     (prio45_qs)
  );


  // R[prio46]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio46_we),
    .wd     (prio46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio46.q ),

    // to register interface (read)
    .qs     (prio46_qs)
  );


  // R[prio47]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio47_we),
    .wd     (prio47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio47.q ),

    // to register interface (read)
    .qs     (prio47_qs)
  );


  // R[prio48]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio48_we),
    .wd     (prio48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio48.q ),

    // to register interface (read)
    .qs     (prio48_qs)
  );


  // R[prio49]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio49_we),
    .wd     (prio49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio49.q ),

    // to register interface (read)
    .qs     (prio49_qs)
  );


  // R[prio50]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio50_we),
    .wd     (prio50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio50.q ),

    // to register interface (read)
    .qs     (prio50_qs)
  );


  // R[prio51]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio51_we),
    .wd     (prio51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio51.q ),

    // to register interface (read)
    .qs     (prio51_qs)
  );


  // R[prio52]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio52_we),
    .wd     (prio52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio52.q ),

    // to register interface (read)
    .qs     (prio52_qs)
  );


  // R[prio53]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio53_we),
    .wd     (prio53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio53.q ),

    // to register interface (read)
    .qs     (prio53_qs)
  );


  // R[prio54]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio54_we),
    .wd     (prio54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio54.q ),

    // to register interface (read)
    .qs     (prio54_qs)
  );


  // R[prio55]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio55_we),
    .wd     (prio55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio55.q ),

    // to register interface (read)
    .qs     (prio55_qs)
  );


  // R[prio56]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio56_we),
    .wd     (prio56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio56.q ),

    // to register interface (read)
    .qs     (prio56_qs)
  );


  // R[prio57]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio57_we),
    .wd     (prio57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio57.q ),

    // to register interface (read)
    .qs     (prio57_qs)
  );


  // R[prio58]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio58_we),
    .wd     (prio58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio58.q ),

    // to register interface (read)
    .qs     (prio58_qs)
  );


  // R[prio59]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio59_we),
    .wd     (prio59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio59.q ),

    // to register interface (read)
    .qs     (prio59_qs)
  );


  // R[prio60]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio60_we),
    .wd     (prio60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio60.q ),

    // to register interface (read)
    .qs     (prio60_qs)
  );


  // R[prio61]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio61_we),
    .wd     (prio61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio61.q ),

    // to register interface (read)
    .qs     (prio61_qs)
  );


  // R[prio62]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio62_we),
    .wd     (prio62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio62.q ),

    // to register interface (read)
    .qs     (prio62_qs)
  );


  // R[prio63]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio63_we),
    .wd     (prio63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio63.q ),

    // to register interface (read)
    .qs     (prio63_qs)
  );


  // R[prio64]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio64_we),
    .wd     (prio64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio64.q ),

    // to register interface (read)
    .qs     (prio64_qs)
  );


  // R[prio65]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio65_we),
    .wd     (prio65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio65.q ),

    // to register interface (read)
    .qs     (prio65_qs)
  );


  // R[prio66]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio66_we),
    .wd     (prio66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio66.q ),

    // to register interface (read)
    .qs     (prio66_qs)
  );


  // R[prio67]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio67_we),
    .wd     (prio67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio67.q ),

    // to register interface (read)
    .qs     (prio67_qs)
  );


  // R[prio68]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio68_we),
    .wd     (prio68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio68.q ),

    // to register interface (read)
    .qs     (prio68_qs)
  );


  // R[prio69]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio69_we),
    .wd     (prio69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio69.q ),

    // to register interface (read)
    .qs     (prio69_qs)
  );


  // R[prio70]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio70_we),
    .wd     (prio70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio70.q ),

    // to register interface (read)
    .qs     (prio70_qs)
  );


  // R[prio71]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio71_we),
    .wd     (prio71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio71.q ),

    // to register interface (read)
    .qs     (prio71_qs)
  );


  // R[prio72]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio72_we),
    .wd     (prio72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio72.q ),

    // to register interface (read)
    .qs     (prio72_qs)
  );


  // R[prio73]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio73_we),
    .wd     (prio73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio73.q ),

    // to register interface (read)
    .qs     (prio73_qs)
  );


  // R[prio74]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio74_we),
    .wd     (prio74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio74.q ),

    // to register interface (read)
    .qs     (prio74_qs)
  );


  // R[prio75]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio75_we),
    .wd     (prio75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio75.q ),

    // to register interface (read)
    .qs     (prio75_qs)
  );


  // R[prio76]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio76_we),
    .wd     (prio76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio76.q ),

    // to register interface (read)
    .qs     (prio76_qs)
  );


  // R[prio77]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio77_we),
    .wd     (prio77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio77.q ),

    // to register interface (read)
    .qs     (prio77_qs)
  );


  // R[prio78]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio78_we),
    .wd     (prio78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio78.q ),

    // to register interface (read)
    .qs     (prio78_qs)
  );


  // R[prio79]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio79_we),
    .wd     (prio79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio79.q ),

    // to register interface (read)
    .qs     (prio79_qs)
  );


  // R[prio80]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio80_we),
    .wd     (prio80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio80.q ),

    // to register interface (read)
    .qs     (prio80_qs)
  );


  // R[prio81]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio81_we),
    .wd     (prio81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio81.q ),

    // to register interface (read)
    .qs     (prio81_qs)
  );


  // R[prio82]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_prio82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prio82_we),
    .wd     (prio82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.prio82.q ),

    // to register interface (read)
    .qs     (prio82_qs)
  );



  // Subregister 0 of Multireg ie0
  // R[ie00]: V(False)

  // F[e0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e0_we),
    .wd     (ie00_e0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[0].q ),

    // to register interface (read)
    .qs     (ie00_e0_qs)
  );


  // F[e1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e1_we),
    .wd     (ie00_e1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[1].q ),

    // to register interface (read)
    .qs     (ie00_e1_qs)
  );


  // F[e2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e2_we),
    .wd     (ie00_e2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[2].q ),

    // to register interface (read)
    .qs     (ie00_e2_qs)
  );


  // F[e3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e3_we),
    .wd     (ie00_e3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[3].q ),

    // to register interface (read)
    .qs     (ie00_e3_qs)
  );


  // F[e4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e4_we),
    .wd     (ie00_e4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[4].q ),

    // to register interface (read)
    .qs     (ie00_e4_qs)
  );


  // F[e5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e5_we),
    .wd     (ie00_e5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[5].q ),

    // to register interface (read)
    .qs     (ie00_e5_qs)
  );


  // F[e6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e6_we),
    .wd     (ie00_e6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[6].q ),

    // to register interface (read)
    .qs     (ie00_e6_qs)
  );


  // F[e7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e7_we),
    .wd     (ie00_e7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[7].q ),

    // to register interface (read)
    .qs     (ie00_e7_qs)
  );


  // F[e8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e8_we),
    .wd     (ie00_e8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[8].q ),

    // to register interface (read)
    .qs     (ie00_e8_qs)
  );


  // F[e9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e9_we),
    .wd     (ie00_e9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[9].q ),

    // to register interface (read)
    .qs     (ie00_e9_qs)
  );


  // F[e10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e10_we),
    .wd     (ie00_e10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[10].q ),

    // to register interface (read)
    .qs     (ie00_e10_qs)
  );


  // F[e11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e11_we),
    .wd     (ie00_e11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[11].q ),

    // to register interface (read)
    .qs     (ie00_e11_qs)
  );


  // F[e12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e12_we),
    .wd     (ie00_e12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[12].q ),

    // to register interface (read)
    .qs     (ie00_e12_qs)
  );


  // F[e13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e13_we),
    .wd     (ie00_e13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[13].q ),

    // to register interface (read)
    .qs     (ie00_e13_qs)
  );


  // F[e14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e14_we),
    .wd     (ie00_e14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[14].q ),

    // to register interface (read)
    .qs     (ie00_e14_qs)
  );


  // F[e15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e15_we),
    .wd     (ie00_e15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[15].q ),

    // to register interface (read)
    .qs     (ie00_e15_qs)
  );


  // F[e16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e16_we),
    .wd     (ie00_e16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[16].q ),

    // to register interface (read)
    .qs     (ie00_e16_qs)
  );


  // F[e17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e17_we),
    .wd     (ie00_e17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[17].q ),

    // to register interface (read)
    .qs     (ie00_e17_qs)
  );


  // F[e18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e18_we),
    .wd     (ie00_e18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[18].q ),

    // to register interface (read)
    .qs     (ie00_e18_qs)
  );


  // F[e19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e19_we),
    .wd     (ie00_e19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[19].q ),

    // to register interface (read)
    .qs     (ie00_e19_qs)
  );


  // F[e20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e20_we),
    .wd     (ie00_e20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[20].q ),

    // to register interface (read)
    .qs     (ie00_e20_qs)
  );


  // F[e21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e21_we),
    .wd     (ie00_e21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[21].q ),

    // to register interface (read)
    .qs     (ie00_e21_qs)
  );


  // F[e22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e22_we),
    .wd     (ie00_e22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[22].q ),

    // to register interface (read)
    .qs     (ie00_e22_qs)
  );


  // F[e23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e23_we),
    .wd     (ie00_e23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[23].q ),

    // to register interface (read)
    .qs     (ie00_e23_qs)
  );


  // F[e24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e24_we),
    .wd     (ie00_e24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[24].q ),

    // to register interface (read)
    .qs     (ie00_e24_qs)
  );


  // F[e25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e25_we),
    .wd     (ie00_e25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[25].q ),

    // to register interface (read)
    .qs     (ie00_e25_qs)
  );


  // F[e26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e26_we),
    .wd     (ie00_e26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[26].q ),

    // to register interface (read)
    .qs     (ie00_e26_qs)
  );


  // F[e27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e27_we),
    .wd     (ie00_e27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[27].q ),

    // to register interface (read)
    .qs     (ie00_e27_qs)
  );


  // F[e28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e28_we),
    .wd     (ie00_e28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[28].q ),

    // to register interface (read)
    .qs     (ie00_e28_qs)
  );


  // F[e29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e29_we),
    .wd     (ie00_e29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[29].q ),

    // to register interface (read)
    .qs     (ie00_e29_qs)
  );


  // F[e30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e30_we),
    .wd     (ie00_e30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[30].q ),

    // to register interface (read)
    .qs     (ie00_e30_qs)
  );


  // F[e31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie00_e31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie00_e31_we),
    .wd     (ie00_e31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[31].q ),

    // to register interface (read)
    .qs     (ie00_e31_qs)
  );


  // Subregister 32 of Multireg ie0
  // R[ie01]: V(False)

  // F[e32]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e32_we),
    .wd     (ie01_e32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[32].q ),

    // to register interface (read)
    .qs     (ie01_e32_qs)
  );


  // F[e33]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e33_we),
    .wd     (ie01_e33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[33].q ),

    // to register interface (read)
    .qs     (ie01_e33_qs)
  );


  // F[e34]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e34_we),
    .wd     (ie01_e34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[34].q ),

    // to register interface (read)
    .qs     (ie01_e34_qs)
  );


  // F[e35]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e35_we),
    .wd     (ie01_e35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[35].q ),

    // to register interface (read)
    .qs     (ie01_e35_qs)
  );


  // F[e36]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e36_we),
    .wd     (ie01_e36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[36].q ),

    // to register interface (read)
    .qs     (ie01_e36_qs)
  );


  // F[e37]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e37_we),
    .wd     (ie01_e37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[37].q ),

    // to register interface (read)
    .qs     (ie01_e37_qs)
  );


  // F[e38]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e38_we),
    .wd     (ie01_e38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[38].q ),

    // to register interface (read)
    .qs     (ie01_e38_qs)
  );


  // F[e39]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e39_we),
    .wd     (ie01_e39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[39].q ),

    // to register interface (read)
    .qs     (ie01_e39_qs)
  );


  // F[e40]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e40_we),
    .wd     (ie01_e40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[40].q ),

    // to register interface (read)
    .qs     (ie01_e40_qs)
  );


  // F[e41]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e41_we),
    .wd     (ie01_e41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[41].q ),

    // to register interface (read)
    .qs     (ie01_e41_qs)
  );


  // F[e42]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e42_we),
    .wd     (ie01_e42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[42].q ),

    // to register interface (read)
    .qs     (ie01_e42_qs)
  );


  // F[e43]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e43_we),
    .wd     (ie01_e43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[43].q ),

    // to register interface (read)
    .qs     (ie01_e43_qs)
  );


  // F[e44]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e44_we),
    .wd     (ie01_e44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[44].q ),

    // to register interface (read)
    .qs     (ie01_e44_qs)
  );


  // F[e45]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e45_we),
    .wd     (ie01_e45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[45].q ),

    // to register interface (read)
    .qs     (ie01_e45_qs)
  );


  // F[e46]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e46_we),
    .wd     (ie01_e46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[46].q ),

    // to register interface (read)
    .qs     (ie01_e46_qs)
  );


  // F[e47]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e47_we),
    .wd     (ie01_e47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[47].q ),

    // to register interface (read)
    .qs     (ie01_e47_qs)
  );


  // F[e48]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e48_we),
    .wd     (ie01_e48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[48].q ),

    // to register interface (read)
    .qs     (ie01_e48_qs)
  );


  // F[e49]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e49_we),
    .wd     (ie01_e49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[49].q ),

    // to register interface (read)
    .qs     (ie01_e49_qs)
  );


  // F[e50]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e50 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e50_we),
    .wd     (ie01_e50_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[50].q ),

    // to register interface (read)
    .qs     (ie01_e50_qs)
  );


  // F[e51]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e51 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e51_we),
    .wd     (ie01_e51_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[51].q ),

    // to register interface (read)
    .qs     (ie01_e51_qs)
  );


  // F[e52]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e52 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e52_we),
    .wd     (ie01_e52_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[52].q ),

    // to register interface (read)
    .qs     (ie01_e52_qs)
  );


  // F[e53]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e53 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e53_we),
    .wd     (ie01_e53_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[53].q ),

    // to register interface (read)
    .qs     (ie01_e53_qs)
  );


  // F[e54]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e54 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e54_we),
    .wd     (ie01_e54_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[54].q ),

    // to register interface (read)
    .qs     (ie01_e54_qs)
  );


  // F[e55]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e55 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e55_we),
    .wd     (ie01_e55_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[55].q ),

    // to register interface (read)
    .qs     (ie01_e55_qs)
  );


  // F[e56]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e56 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e56_we),
    .wd     (ie01_e56_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[56].q ),

    // to register interface (read)
    .qs     (ie01_e56_qs)
  );


  // F[e57]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e57 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e57_we),
    .wd     (ie01_e57_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[57].q ),

    // to register interface (read)
    .qs     (ie01_e57_qs)
  );


  // F[e58]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e58 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e58_we),
    .wd     (ie01_e58_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[58].q ),

    // to register interface (read)
    .qs     (ie01_e58_qs)
  );


  // F[e59]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e59 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e59_we),
    .wd     (ie01_e59_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[59].q ),

    // to register interface (read)
    .qs     (ie01_e59_qs)
  );


  // F[e60]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e60 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e60_we),
    .wd     (ie01_e60_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[60].q ),

    // to register interface (read)
    .qs     (ie01_e60_qs)
  );


  // F[e61]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e61 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e61_we),
    .wd     (ie01_e61_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[61].q ),

    // to register interface (read)
    .qs     (ie01_e61_qs)
  );


  // F[e62]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e62 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e62_we),
    .wd     (ie01_e62_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[62].q ),

    // to register interface (read)
    .qs     (ie01_e62_qs)
  );


  // F[e63]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie01_e63 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie01_e63_we),
    .wd     (ie01_e63_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[63].q ),

    // to register interface (read)
    .qs     (ie01_e63_qs)
  );


  // Subregister 64 of Multireg ie0
  // R[ie02]: V(False)

  // F[e64]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e64 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e64_we),
    .wd     (ie02_e64_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[64].q ),

    // to register interface (read)
    .qs     (ie02_e64_qs)
  );


  // F[e65]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e65 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e65_we),
    .wd     (ie02_e65_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[65].q ),

    // to register interface (read)
    .qs     (ie02_e65_qs)
  );


  // F[e66]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e66 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e66_we),
    .wd     (ie02_e66_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[66].q ),

    // to register interface (read)
    .qs     (ie02_e66_qs)
  );


  // F[e67]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e67 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e67_we),
    .wd     (ie02_e67_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[67].q ),

    // to register interface (read)
    .qs     (ie02_e67_qs)
  );


  // F[e68]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e68 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e68_we),
    .wd     (ie02_e68_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[68].q ),

    // to register interface (read)
    .qs     (ie02_e68_qs)
  );


  // F[e69]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e69 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e69_we),
    .wd     (ie02_e69_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[69].q ),

    // to register interface (read)
    .qs     (ie02_e69_qs)
  );


  // F[e70]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e70 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e70_we),
    .wd     (ie02_e70_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[70].q ),

    // to register interface (read)
    .qs     (ie02_e70_qs)
  );


  // F[e71]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e71 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e71_we),
    .wd     (ie02_e71_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[71].q ),

    // to register interface (read)
    .qs     (ie02_e71_qs)
  );


  // F[e72]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e72 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e72_we),
    .wd     (ie02_e72_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[72].q ),

    // to register interface (read)
    .qs     (ie02_e72_qs)
  );


  // F[e73]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e73 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e73_we),
    .wd     (ie02_e73_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[73].q ),

    // to register interface (read)
    .qs     (ie02_e73_qs)
  );


  // F[e74]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e74 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e74_we),
    .wd     (ie02_e74_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[74].q ),

    // to register interface (read)
    .qs     (ie02_e74_qs)
  );


  // F[e75]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e75 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e75_we),
    .wd     (ie02_e75_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[75].q ),

    // to register interface (read)
    .qs     (ie02_e75_qs)
  );


  // F[e76]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e76 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e76_we),
    .wd     (ie02_e76_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[76].q ),

    // to register interface (read)
    .qs     (ie02_e76_qs)
  );


  // F[e77]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e77 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e77_we),
    .wd     (ie02_e77_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[77].q ),

    // to register interface (read)
    .qs     (ie02_e77_qs)
  );


  // F[e78]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e78 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e78_we),
    .wd     (ie02_e78_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[78].q ),

    // to register interface (read)
    .qs     (ie02_e78_qs)
  );


  // F[e79]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e79 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e79_we),
    .wd     (ie02_e79_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[79].q ),

    // to register interface (read)
    .qs     (ie02_e79_qs)
  );


  // F[e80]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e80 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e80_we),
    .wd     (ie02_e80_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[80].q ),

    // to register interface (read)
    .qs     (ie02_e80_qs)
  );


  // F[e81]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e81 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e81_we),
    .wd     (ie02_e81_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[81].q ),

    // to register interface (read)
    .qs     (ie02_e81_qs)
  );


  // F[e82]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ie02_e82 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ie02_e82_we),
    .wd     (ie02_e82_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ie0[82].q ),

    // to register interface (read)
    .qs     (ie02_e82_qs)
  );



  // R[threshold0]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_threshold0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (threshold0_we),
    .wd     (threshold0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.threshold0.q ),

    // to register interface (read)
    .qs     (threshold0_qs)
  );


  // R[cc0]: V(True)

  prim_subreg_ext #(
    .DW    (7)
  ) u_cc0 (
    .re     (cc0_re),
    .we     (cc0_we),
    .wd     (cc0_wd),
    .d      (hw2reg.cc0.d),
    .qre    (reg2hw.cc0.re),
    .qe     (reg2hw.cc0.qe),
    .q      (reg2hw.cc0.q ),
    .qs     (cc0_qs)
  );


  // R[msip0]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_msip0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (msip0_we),
    .wd     (msip0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.msip0.q ),

    // to register interface (read)
    .qs     (msip0_qs)
  );




  logic [94:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == RV_PLIC_IP0_OFFSET);
    addr_hit[ 1] = (reg_addr == RV_PLIC_IP1_OFFSET);
    addr_hit[ 2] = (reg_addr == RV_PLIC_IP2_OFFSET);
    addr_hit[ 3] = (reg_addr == RV_PLIC_LE0_OFFSET);
    addr_hit[ 4] = (reg_addr == RV_PLIC_LE1_OFFSET);
    addr_hit[ 5] = (reg_addr == RV_PLIC_LE2_OFFSET);
    addr_hit[ 6] = (reg_addr == RV_PLIC_PRIO0_OFFSET);
    addr_hit[ 7] = (reg_addr == RV_PLIC_PRIO1_OFFSET);
    addr_hit[ 8] = (reg_addr == RV_PLIC_PRIO2_OFFSET);
    addr_hit[ 9] = (reg_addr == RV_PLIC_PRIO3_OFFSET);
    addr_hit[10] = (reg_addr == RV_PLIC_PRIO4_OFFSET);
    addr_hit[11] = (reg_addr == RV_PLIC_PRIO5_OFFSET);
    addr_hit[12] = (reg_addr == RV_PLIC_PRIO6_OFFSET);
    addr_hit[13] = (reg_addr == RV_PLIC_PRIO7_OFFSET);
    addr_hit[14] = (reg_addr == RV_PLIC_PRIO8_OFFSET);
    addr_hit[15] = (reg_addr == RV_PLIC_PRIO9_OFFSET);
    addr_hit[16] = (reg_addr == RV_PLIC_PRIO10_OFFSET);
    addr_hit[17] = (reg_addr == RV_PLIC_PRIO11_OFFSET);
    addr_hit[18] = (reg_addr == RV_PLIC_PRIO12_OFFSET);
    addr_hit[19] = (reg_addr == RV_PLIC_PRIO13_OFFSET);
    addr_hit[20] = (reg_addr == RV_PLIC_PRIO14_OFFSET);
    addr_hit[21] = (reg_addr == RV_PLIC_PRIO15_OFFSET);
    addr_hit[22] = (reg_addr == RV_PLIC_PRIO16_OFFSET);
    addr_hit[23] = (reg_addr == RV_PLIC_PRIO17_OFFSET);
    addr_hit[24] = (reg_addr == RV_PLIC_PRIO18_OFFSET);
    addr_hit[25] = (reg_addr == RV_PLIC_PRIO19_OFFSET);
    addr_hit[26] = (reg_addr == RV_PLIC_PRIO20_OFFSET);
    addr_hit[27] = (reg_addr == RV_PLIC_PRIO21_OFFSET);
    addr_hit[28] = (reg_addr == RV_PLIC_PRIO22_OFFSET);
    addr_hit[29] = (reg_addr == RV_PLIC_PRIO23_OFFSET);
    addr_hit[30] = (reg_addr == RV_PLIC_PRIO24_OFFSET);
    addr_hit[31] = (reg_addr == RV_PLIC_PRIO25_OFFSET);
    addr_hit[32] = (reg_addr == RV_PLIC_PRIO26_OFFSET);
    addr_hit[33] = (reg_addr == RV_PLIC_PRIO27_OFFSET);
    addr_hit[34] = (reg_addr == RV_PLIC_PRIO28_OFFSET);
    addr_hit[35] = (reg_addr == RV_PLIC_PRIO29_OFFSET);
    addr_hit[36] = (reg_addr == RV_PLIC_PRIO30_OFFSET);
    addr_hit[37] = (reg_addr == RV_PLIC_PRIO31_OFFSET);
    addr_hit[38] = (reg_addr == RV_PLIC_PRIO32_OFFSET);
    addr_hit[39] = (reg_addr == RV_PLIC_PRIO33_OFFSET);
    addr_hit[40] = (reg_addr == RV_PLIC_PRIO34_OFFSET);
    addr_hit[41] = (reg_addr == RV_PLIC_PRIO35_OFFSET);
    addr_hit[42] = (reg_addr == RV_PLIC_PRIO36_OFFSET);
    addr_hit[43] = (reg_addr == RV_PLIC_PRIO37_OFFSET);
    addr_hit[44] = (reg_addr == RV_PLIC_PRIO38_OFFSET);
    addr_hit[45] = (reg_addr == RV_PLIC_PRIO39_OFFSET);
    addr_hit[46] = (reg_addr == RV_PLIC_PRIO40_OFFSET);
    addr_hit[47] = (reg_addr == RV_PLIC_PRIO41_OFFSET);
    addr_hit[48] = (reg_addr == RV_PLIC_PRIO42_OFFSET);
    addr_hit[49] = (reg_addr == RV_PLIC_PRIO43_OFFSET);
    addr_hit[50] = (reg_addr == RV_PLIC_PRIO44_OFFSET);
    addr_hit[51] = (reg_addr == RV_PLIC_PRIO45_OFFSET);
    addr_hit[52] = (reg_addr == RV_PLIC_PRIO46_OFFSET);
    addr_hit[53] = (reg_addr == RV_PLIC_PRIO47_OFFSET);
    addr_hit[54] = (reg_addr == RV_PLIC_PRIO48_OFFSET);
    addr_hit[55] = (reg_addr == RV_PLIC_PRIO49_OFFSET);
    addr_hit[56] = (reg_addr == RV_PLIC_PRIO50_OFFSET);
    addr_hit[57] = (reg_addr == RV_PLIC_PRIO51_OFFSET);
    addr_hit[58] = (reg_addr == RV_PLIC_PRIO52_OFFSET);
    addr_hit[59] = (reg_addr == RV_PLIC_PRIO53_OFFSET);
    addr_hit[60] = (reg_addr == RV_PLIC_PRIO54_OFFSET);
    addr_hit[61] = (reg_addr == RV_PLIC_PRIO55_OFFSET);
    addr_hit[62] = (reg_addr == RV_PLIC_PRIO56_OFFSET);
    addr_hit[63] = (reg_addr == RV_PLIC_PRIO57_OFFSET);
    addr_hit[64] = (reg_addr == RV_PLIC_PRIO58_OFFSET);
    addr_hit[65] = (reg_addr == RV_PLIC_PRIO59_OFFSET);
    addr_hit[66] = (reg_addr == RV_PLIC_PRIO60_OFFSET);
    addr_hit[67] = (reg_addr == RV_PLIC_PRIO61_OFFSET);
    addr_hit[68] = (reg_addr == RV_PLIC_PRIO62_OFFSET);
    addr_hit[69] = (reg_addr == RV_PLIC_PRIO63_OFFSET);
    addr_hit[70] = (reg_addr == RV_PLIC_PRIO64_OFFSET);
    addr_hit[71] = (reg_addr == RV_PLIC_PRIO65_OFFSET);
    addr_hit[72] = (reg_addr == RV_PLIC_PRIO66_OFFSET);
    addr_hit[73] = (reg_addr == RV_PLIC_PRIO67_OFFSET);
    addr_hit[74] = (reg_addr == RV_PLIC_PRIO68_OFFSET);
    addr_hit[75] = (reg_addr == RV_PLIC_PRIO69_OFFSET);
    addr_hit[76] = (reg_addr == RV_PLIC_PRIO70_OFFSET);
    addr_hit[77] = (reg_addr == RV_PLIC_PRIO71_OFFSET);
    addr_hit[78] = (reg_addr == RV_PLIC_PRIO72_OFFSET);
    addr_hit[79] = (reg_addr == RV_PLIC_PRIO73_OFFSET);
    addr_hit[80] = (reg_addr == RV_PLIC_PRIO74_OFFSET);
    addr_hit[81] = (reg_addr == RV_PLIC_PRIO75_OFFSET);
    addr_hit[82] = (reg_addr == RV_PLIC_PRIO76_OFFSET);
    addr_hit[83] = (reg_addr == RV_PLIC_PRIO77_OFFSET);
    addr_hit[84] = (reg_addr == RV_PLIC_PRIO78_OFFSET);
    addr_hit[85] = (reg_addr == RV_PLIC_PRIO79_OFFSET);
    addr_hit[86] = (reg_addr == RV_PLIC_PRIO80_OFFSET);
    addr_hit[87] = (reg_addr == RV_PLIC_PRIO81_OFFSET);
    addr_hit[88] = (reg_addr == RV_PLIC_PRIO82_OFFSET);
    addr_hit[89] = (reg_addr == RV_PLIC_IE00_OFFSET);
    addr_hit[90] = (reg_addr == RV_PLIC_IE01_OFFSET);
    addr_hit[91] = (reg_addr == RV_PLIC_IE02_OFFSET);
    addr_hit[92] = (reg_addr == RV_PLIC_THRESHOLD0_OFFSET);
    addr_hit[93] = (reg_addr == RV_PLIC_CC0_OFFSET);
    addr_hit[94] = (reg_addr == RV_PLIC_MSIP0_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[ 0] && reg_we && (RV_PLIC_PERMIT[ 0] != (RV_PLIC_PERMIT[ 0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 1] && reg_we && (RV_PLIC_PERMIT[ 1] != (RV_PLIC_PERMIT[ 1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 2] && reg_we && (RV_PLIC_PERMIT[ 2] != (RV_PLIC_PERMIT[ 2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 3] && reg_we && (RV_PLIC_PERMIT[ 3] != (RV_PLIC_PERMIT[ 3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 4] && reg_we && (RV_PLIC_PERMIT[ 4] != (RV_PLIC_PERMIT[ 4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 5] && reg_we && (RV_PLIC_PERMIT[ 5] != (RV_PLIC_PERMIT[ 5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 6] && reg_we && (RV_PLIC_PERMIT[ 6] != (RV_PLIC_PERMIT[ 6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 7] && reg_we && (RV_PLIC_PERMIT[ 7] != (RV_PLIC_PERMIT[ 7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 8] && reg_we && (RV_PLIC_PERMIT[ 8] != (RV_PLIC_PERMIT[ 8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 9] && reg_we && (RV_PLIC_PERMIT[ 9] != (RV_PLIC_PERMIT[ 9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[10] && reg_we && (RV_PLIC_PERMIT[10] != (RV_PLIC_PERMIT[10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[11] && reg_we && (RV_PLIC_PERMIT[11] != (RV_PLIC_PERMIT[11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[12] && reg_we && (RV_PLIC_PERMIT[12] != (RV_PLIC_PERMIT[12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[13] && reg_we && (RV_PLIC_PERMIT[13] != (RV_PLIC_PERMIT[13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[14] && reg_we && (RV_PLIC_PERMIT[14] != (RV_PLIC_PERMIT[14] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[15] && reg_we && (RV_PLIC_PERMIT[15] != (RV_PLIC_PERMIT[15] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[16] && reg_we && (RV_PLIC_PERMIT[16] != (RV_PLIC_PERMIT[16] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[17] && reg_we && (RV_PLIC_PERMIT[17] != (RV_PLIC_PERMIT[17] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[18] && reg_we && (RV_PLIC_PERMIT[18] != (RV_PLIC_PERMIT[18] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[19] && reg_we && (RV_PLIC_PERMIT[19] != (RV_PLIC_PERMIT[19] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[20] && reg_we && (RV_PLIC_PERMIT[20] != (RV_PLIC_PERMIT[20] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[21] && reg_we && (RV_PLIC_PERMIT[21] != (RV_PLIC_PERMIT[21] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[22] && reg_we && (RV_PLIC_PERMIT[22] != (RV_PLIC_PERMIT[22] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[23] && reg_we && (RV_PLIC_PERMIT[23] != (RV_PLIC_PERMIT[23] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[24] && reg_we && (RV_PLIC_PERMIT[24] != (RV_PLIC_PERMIT[24] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[25] && reg_we && (RV_PLIC_PERMIT[25] != (RV_PLIC_PERMIT[25] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[26] && reg_we && (RV_PLIC_PERMIT[26] != (RV_PLIC_PERMIT[26] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[27] && reg_we && (RV_PLIC_PERMIT[27] != (RV_PLIC_PERMIT[27] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[28] && reg_we && (RV_PLIC_PERMIT[28] != (RV_PLIC_PERMIT[28] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[29] && reg_we && (RV_PLIC_PERMIT[29] != (RV_PLIC_PERMIT[29] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[30] && reg_we && (RV_PLIC_PERMIT[30] != (RV_PLIC_PERMIT[30] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[31] && reg_we && (RV_PLIC_PERMIT[31] != (RV_PLIC_PERMIT[31] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[32] && reg_we && (RV_PLIC_PERMIT[32] != (RV_PLIC_PERMIT[32] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[33] && reg_we && (RV_PLIC_PERMIT[33] != (RV_PLIC_PERMIT[33] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[34] && reg_we && (RV_PLIC_PERMIT[34] != (RV_PLIC_PERMIT[34] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[35] && reg_we && (RV_PLIC_PERMIT[35] != (RV_PLIC_PERMIT[35] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[36] && reg_we && (RV_PLIC_PERMIT[36] != (RV_PLIC_PERMIT[36] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[37] && reg_we && (RV_PLIC_PERMIT[37] != (RV_PLIC_PERMIT[37] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[38] && reg_we && (RV_PLIC_PERMIT[38] != (RV_PLIC_PERMIT[38] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[39] && reg_we && (RV_PLIC_PERMIT[39] != (RV_PLIC_PERMIT[39] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[40] && reg_we && (RV_PLIC_PERMIT[40] != (RV_PLIC_PERMIT[40] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[41] && reg_we && (RV_PLIC_PERMIT[41] != (RV_PLIC_PERMIT[41] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[42] && reg_we && (RV_PLIC_PERMIT[42] != (RV_PLIC_PERMIT[42] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[43] && reg_we && (RV_PLIC_PERMIT[43] != (RV_PLIC_PERMIT[43] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[44] && reg_we && (RV_PLIC_PERMIT[44] != (RV_PLIC_PERMIT[44] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[45] && reg_we && (RV_PLIC_PERMIT[45] != (RV_PLIC_PERMIT[45] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[46] && reg_we && (RV_PLIC_PERMIT[46] != (RV_PLIC_PERMIT[46] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[47] && reg_we && (RV_PLIC_PERMIT[47] != (RV_PLIC_PERMIT[47] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[48] && reg_we && (RV_PLIC_PERMIT[48] != (RV_PLIC_PERMIT[48] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[49] && reg_we && (RV_PLIC_PERMIT[49] != (RV_PLIC_PERMIT[49] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[50] && reg_we && (RV_PLIC_PERMIT[50] != (RV_PLIC_PERMIT[50] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[51] && reg_we && (RV_PLIC_PERMIT[51] != (RV_PLIC_PERMIT[51] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[52] && reg_we && (RV_PLIC_PERMIT[52] != (RV_PLIC_PERMIT[52] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[53] && reg_we && (RV_PLIC_PERMIT[53] != (RV_PLIC_PERMIT[53] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[54] && reg_we && (RV_PLIC_PERMIT[54] != (RV_PLIC_PERMIT[54] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[55] && reg_we && (RV_PLIC_PERMIT[55] != (RV_PLIC_PERMIT[55] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[56] && reg_we && (RV_PLIC_PERMIT[56] != (RV_PLIC_PERMIT[56] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[57] && reg_we && (RV_PLIC_PERMIT[57] != (RV_PLIC_PERMIT[57] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[58] && reg_we && (RV_PLIC_PERMIT[58] != (RV_PLIC_PERMIT[58] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[59] && reg_we && (RV_PLIC_PERMIT[59] != (RV_PLIC_PERMIT[59] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[60] && reg_we && (RV_PLIC_PERMIT[60] != (RV_PLIC_PERMIT[60] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[61] && reg_we && (RV_PLIC_PERMIT[61] != (RV_PLIC_PERMIT[61] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[62] && reg_we && (RV_PLIC_PERMIT[62] != (RV_PLIC_PERMIT[62] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[63] && reg_we && (RV_PLIC_PERMIT[63] != (RV_PLIC_PERMIT[63] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[64] && reg_we && (RV_PLIC_PERMIT[64] != (RV_PLIC_PERMIT[64] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[65] && reg_we && (RV_PLIC_PERMIT[65] != (RV_PLIC_PERMIT[65] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[66] && reg_we && (RV_PLIC_PERMIT[66] != (RV_PLIC_PERMIT[66] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[67] && reg_we && (RV_PLIC_PERMIT[67] != (RV_PLIC_PERMIT[67] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[68] && reg_we && (RV_PLIC_PERMIT[68] != (RV_PLIC_PERMIT[68] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[69] && reg_we && (RV_PLIC_PERMIT[69] != (RV_PLIC_PERMIT[69] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[70] && reg_we && (RV_PLIC_PERMIT[70] != (RV_PLIC_PERMIT[70] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[71] && reg_we && (RV_PLIC_PERMIT[71] != (RV_PLIC_PERMIT[71] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[72] && reg_we && (RV_PLIC_PERMIT[72] != (RV_PLIC_PERMIT[72] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[73] && reg_we && (RV_PLIC_PERMIT[73] != (RV_PLIC_PERMIT[73] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[74] && reg_we && (RV_PLIC_PERMIT[74] != (RV_PLIC_PERMIT[74] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[75] && reg_we && (RV_PLIC_PERMIT[75] != (RV_PLIC_PERMIT[75] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[76] && reg_we && (RV_PLIC_PERMIT[76] != (RV_PLIC_PERMIT[76] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[77] && reg_we && (RV_PLIC_PERMIT[77] != (RV_PLIC_PERMIT[77] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[78] && reg_we && (RV_PLIC_PERMIT[78] != (RV_PLIC_PERMIT[78] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[79] && reg_we && (RV_PLIC_PERMIT[79] != (RV_PLIC_PERMIT[79] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[80] && reg_we && (RV_PLIC_PERMIT[80] != (RV_PLIC_PERMIT[80] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[81] && reg_we && (RV_PLIC_PERMIT[81] != (RV_PLIC_PERMIT[81] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[82] && reg_we && (RV_PLIC_PERMIT[82] != (RV_PLIC_PERMIT[82] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[83] && reg_we && (RV_PLIC_PERMIT[83] != (RV_PLIC_PERMIT[83] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[84] && reg_we && (RV_PLIC_PERMIT[84] != (RV_PLIC_PERMIT[84] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[85] && reg_we && (RV_PLIC_PERMIT[85] != (RV_PLIC_PERMIT[85] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[86] && reg_we && (RV_PLIC_PERMIT[86] != (RV_PLIC_PERMIT[86] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[87] && reg_we && (RV_PLIC_PERMIT[87] != (RV_PLIC_PERMIT[87] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[88] && reg_we && (RV_PLIC_PERMIT[88] != (RV_PLIC_PERMIT[88] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[89] && reg_we && (RV_PLIC_PERMIT[89] != (RV_PLIC_PERMIT[89] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[90] && reg_we && (RV_PLIC_PERMIT[90] != (RV_PLIC_PERMIT[90] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[91] && reg_we && (RV_PLIC_PERMIT[91] != (RV_PLIC_PERMIT[91] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[92] && reg_we && (RV_PLIC_PERMIT[92] != (RV_PLIC_PERMIT[92] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[93] && reg_we && (RV_PLIC_PERMIT[93] != (RV_PLIC_PERMIT[93] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[94] && reg_we && (RV_PLIC_PERMIT[94] != (RV_PLIC_PERMIT[94] & reg_be))) wr_err = 1'b1 ;
  end




















































































  assign le0_le0_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le0_wd = reg_wdata[0];

  assign le0_le1_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le1_wd = reg_wdata[1];

  assign le0_le2_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le2_wd = reg_wdata[2];

  assign le0_le3_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le3_wd = reg_wdata[3];

  assign le0_le4_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le4_wd = reg_wdata[4];

  assign le0_le5_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le5_wd = reg_wdata[5];

  assign le0_le6_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le6_wd = reg_wdata[6];

  assign le0_le7_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le7_wd = reg_wdata[7];

  assign le0_le8_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le8_wd = reg_wdata[8];

  assign le0_le9_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le9_wd = reg_wdata[9];

  assign le0_le10_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le10_wd = reg_wdata[10];

  assign le0_le11_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le11_wd = reg_wdata[11];

  assign le0_le12_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le12_wd = reg_wdata[12];

  assign le0_le13_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le13_wd = reg_wdata[13];

  assign le0_le14_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le14_wd = reg_wdata[14];

  assign le0_le15_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le15_wd = reg_wdata[15];

  assign le0_le16_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le16_wd = reg_wdata[16];

  assign le0_le17_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le17_wd = reg_wdata[17];

  assign le0_le18_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le18_wd = reg_wdata[18];

  assign le0_le19_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le19_wd = reg_wdata[19];

  assign le0_le20_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le20_wd = reg_wdata[20];

  assign le0_le21_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le21_wd = reg_wdata[21];

  assign le0_le22_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le22_wd = reg_wdata[22];

  assign le0_le23_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le23_wd = reg_wdata[23];

  assign le0_le24_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le24_wd = reg_wdata[24];

  assign le0_le25_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le25_wd = reg_wdata[25];

  assign le0_le26_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le26_wd = reg_wdata[26];

  assign le0_le27_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le27_wd = reg_wdata[27];

  assign le0_le28_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le28_wd = reg_wdata[28];

  assign le0_le29_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le29_wd = reg_wdata[29];

  assign le0_le30_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le30_wd = reg_wdata[30];

  assign le0_le31_we = addr_hit[3] & reg_we & ~wr_err;
  assign le0_le31_wd = reg_wdata[31];

  assign le1_le32_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le32_wd = reg_wdata[0];

  assign le1_le33_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le33_wd = reg_wdata[1];

  assign le1_le34_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le34_wd = reg_wdata[2];

  assign le1_le35_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le35_wd = reg_wdata[3];

  assign le1_le36_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le36_wd = reg_wdata[4];

  assign le1_le37_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le37_wd = reg_wdata[5];

  assign le1_le38_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le38_wd = reg_wdata[6];

  assign le1_le39_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le39_wd = reg_wdata[7];

  assign le1_le40_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le40_wd = reg_wdata[8];

  assign le1_le41_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le41_wd = reg_wdata[9];

  assign le1_le42_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le42_wd = reg_wdata[10];

  assign le1_le43_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le43_wd = reg_wdata[11];

  assign le1_le44_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le44_wd = reg_wdata[12];

  assign le1_le45_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le45_wd = reg_wdata[13];

  assign le1_le46_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le46_wd = reg_wdata[14];

  assign le1_le47_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le47_wd = reg_wdata[15];

  assign le1_le48_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le48_wd = reg_wdata[16];

  assign le1_le49_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le49_wd = reg_wdata[17];

  assign le1_le50_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le50_wd = reg_wdata[18];

  assign le1_le51_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le51_wd = reg_wdata[19];

  assign le1_le52_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le52_wd = reg_wdata[20];

  assign le1_le53_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le53_wd = reg_wdata[21];

  assign le1_le54_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le54_wd = reg_wdata[22];

  assign le1_le55_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le55_wd = reg_wdata[23];

  assign le1_le56_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le56_wd = reg_wdata[24];

  assign le1_le57_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le57_wd = reg_wdata[25];

  assign le1_le58_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le58_wd = reg_wdata[26];

  assign le1_le59_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le59_wd = reg_wdata[27];

  assign le1_le60_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le60_wd = reg_wdata[28];

  assign le1_le61_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le61_wd = reg_wdata[29];

  assign le1_le62_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le62_wd = reg_wdata[30];

  assign le1_le63_we = addr_hit[4] & reg_we & ~wr_err;
  assign le1_le63_wd = reg_wdata[31];

  assign le2_le64_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le64_wd = reg_wdata[0];

  assign le2_le65_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le65_wd = reg_wdata[1];

  assign le2_le66_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le66_wd = reg_wdata[2];

  assign le2_le67_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le67_wd = reg_wdata[3];

  assign le2_le68_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le68_wd = reg_wdata[4];

  assign le2_le69_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le69_wd = reg_wdata[5];

  assign le2_le70_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le70_wd = reg_wdata[6];

  assign le2_le71_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le71_wd = reg_wdata[7];

  assign le2_le72_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le72_wd = reg_wdata[8];

  assign le2_le73_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le73_wd = reg_wdata[9];

  assign le2_le74_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le74_wd = reg_wdata[10];

  assign le2_le75_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le75_wd = reg_wdata[11];

  assign le2_le76_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le76_wd = reg_wdata[12];

  assign le2_le77_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le77_wd = reg_wdata[13];

  assign le2_le78_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le78_wd = reg_wdata[14];

  assign le2_le79_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le79_wd = reg_wdata[15];

  assign le2_le80_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le80_wd = reg_wdata[16];

  assign le2_le81_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le81_wd = reg_wdata[17];

  assign le2_le82_we = addr_hit[5] & reg_we & ~wr_err;
  assign le2_le82_wd = reg_wdata[18];

  assign prio0_we = addr_hit[6] & reg_we & ~wr_err;
  assign prio0_wd = reg_wdata[1:0];

  assign prio1_we = addr_hit[7] & reg_we & ~wr_err;
  assign prio1_wd = reg_wdata[1:0];

  assign prio2_we = addr_hit[8] & reg_we & ~wr_err;
  assign prio2_wd = reg_wdata[1:0];

  assign prio3_we = addr_hit[9] & reg_we & ~wr_err;
  assign prio3_wd = reg_wdata[1:0];

  assign prio4_we = addr_hit[10] & reg_we & ~wr_err;
  assign prio4_wd = reg_wdata[1:0];

  assign prio5_we = addr_hit[11] & reg_we & ~wr_err;
  assign prio5_wd = reg_wdata[1:0];

  assign prio6_we = addr_hit[12] & reg_we & ~wr_err;
  assign prio6_wd = reg_wdata[1:0];

  assign prio7_we = addr_hit[13] & reg_we & ~wr_err;
  assign prio7_wd = reg_wdata[1:0];

  assign prio8_we = addr_hit[14] & reg_we & ~wr_err;
  assign prio8_wd = reg_wdata[1:0];

  assign prio9_we = addr_hit[15] & reg_we & ~wr_err;
  assign prio9_wd = reg_wdata[1:0];

  assign prio10_we = addr_hit[16] & reg_we & ~wr_err;
  assign prio10_wd = reg_wdata[1:0];

  assign prio11_we = addr_hit[17] & reg_we & ~wr_err;
  assign prio11_wd = reg_wdata[1:0];

  assign prio12_we = addr_hit[18] & reg_we & ~wr_err;
  assign prio12_wd = reg_wdata[1:0];

  assign prio13_we = addr_hit[19] & reg_we & ~wr_err;
  assign prio13_wd = reg_wdata[1:0];

  assign prio14_we = addr_hit[20] & reg_we & ~wr_err;
  assign prio14_wd = reg_wdata[1:0];

  assign prio15_we = addr_hit[21] & reg_we & ~wr_err;
  assign prio15_wd = reg_wdata[1:0];

  assign prio16_we = addr_hit[22] & reg_we & ~wr_err;
  assign prio16_wd = reg_wdata[1:0];

  assign prio17_we = addr_hit[23] & reg_we & ~wr_err;
  assign prio17_wd = reg_wdata[1:0];

  assign prio18_we = addr_hit[24] & reg_we & ~wr_err;
  assign prio18_wd = reg_wdata[1:0];

  assign prio19_we = addr_hit[25] & reg_we & ~wr_err;
  assign prio19_wd = reg_wdata[1:0];

  assign prio20_we = addr_hit[26] & reg_we & ~wr_err;
  assign prio20_wd = reg_wdata[1:0];

  assign prio21_we = addr_hit[27] & reg_we & ~wr_err;
  assign prio21_wd = reg_wdata[1:0];

  assign prio22_we = addr_hit[28] & reg_we & ~wr_err;
  assign prio22_wd = reg_wdata[1:0];

  assign prio23_we = addr_hit[29] & reg_we & ~wr_err;
  assign prio23_wd = reg_wdata[1:0];

  assign prio24_we = addr_hit[30] & reg_we & ~wr_err;
  assign prio24_wd = reg_wdata[1:0];

  assign prio25_we = addr_hit[31] & reg_we & ~wr_err;
  assign prio25_wd = reg_wdata[1:0];

  assign prio26_we = addr_hit[32] & reg_we & ~wr_err;
  assign prio26_wd = reg_wdata[1:0];

  assign prio27_we = addr_hit[33] & reg_we & ~wr_err;
  assign prio27_wd = reg_wdata[1:0];

  assign prio28_we = addr_hit[34] & reg_we & ~wr_err;
  assign prio28_wd = reg_wdata[1:0];

  assign prio29_we = addr_hit[35] & reg_we & ~wr_err;
  assign prio29_wd = reg_wdata[1:0];

  assign prio30_we = addr_hit[36] & reg_we & ~wr_err;
  assign prio30_wd = reg_wdata[1:0];

  assign prio31_we = addr_hit[37] & reg_we & ~wr_err;
  assign prio31_wd = reg_wdata[1:0];

  assign prio32_we = addr_hit[38] & reg_we & ~wr_err;
  assign prio32_wd = reg_wdata[1:0];

  assign prio33_we = addr_hit[39] & reg_we & ~wr_err;
  assign prio33_wd = reg_wdata[1:0];

  assign prio34_we = addr_hit[40] & reg_we & ~wr_err;
  assign prio34_wd = reg_wdata[1:0];

  assign prio35_we = addr_hit[41] & reg_we & ~wr_err;
  assign prio35_wd = reg_wdata[1:0];

  assign prio36_we = addr_hit[42] & reg_we & ~wr_err;
  assign prio36_wd = reg_wdata[1:0];

  assign prio37_we = addr_hit[43] & reg_we & ~wr_err;
  assign prio37_wd = reg_wdata[1:0];

  assign prio38_we = addr_hit[44] & reg_we & ~wr_err;
  assign prio38_wd = reg_wdata[1:0];

  assign prio39_we = addr_hit[45] & reg_we & ~wr_err;
  assign prio39_wd = reg_wdata[1:0];

  assign prio40_we = addr_hit[46] & reg_we & ~wr_err;
  assign prio40_wd = reg_wdata[1:0];

  assign prio41_we = addr_hit[47] & reg_we & ~wr_err;
  assign prio41_wd = reg_wdata[1:0];

  assign prio42_we = addr_hit[48] & reg_we & ~wr_err;
  assign prio42_wd = reg_wdata[1:0];

  assign prio43_we = addr_hit[49] & reg_we & ~wr_err;
  assign prio43_wd = reg_wdata[1:0];

  assign prio44_we = addr_hit[50] & reg_we & ~wr_err;
  assign prio44_wd = reg_wdata[1:0];

  assign prio45_we = addr_hit[51] & reg_we & ~wr_err;
  assign prio45_wd = reg_wdata[1:0];

  assign prio46_we = addr_hit[52] & reg_we & ~wr_err;
  assign prio46_wd = reg_wdata[1:0];

  assign prio47_we = addr_hit[53] & reg_we & ~wr_err;
  assign prio47_wd = reg_wdata[1:0];

  assign prio48_we = addr_hit[54] & reg_we & ~wr_err;
  assign prio48_wd = reg_wdata[1:0];

  assign prio49_we = addr_hit[55] & reg_we & ~wr_err;
  assign prio49_wd = reg_wdata[1:0];

  assign prio50_we = addr_hit[56] & reg_we & ~wr_err;
  assign prio50_wd = reg_wdata[1:0];

  assign prio51_we = addr_hit[57] & reg_we & ~wr_err;
  assign prio51_wd = reg_wdata[1:0];

  assign prio52_we = addr_hit[58] & reg_we & ~wr_err;
  assign prio52_wd = reg_wdata[1:0];

  assign prio53_we = addr_hit[59] & reg_we & ~wr_err;
  assign prio53_wd = reg_wdata[1:0];

  assign prio54_we = addr_hit[60] & reg_we & ~wr_err;
  assign prio54_wd = reg_wdata[1:0];

  assign prio55_we = addr_hit[61] & reg_we & ~wr_err;
  assign prio55_wd = reg_wdata[1:0];

  assign prio56_we = addr_hit[62] & reg_we & ~wr_err;
  assign prio56_wd = reg_wdata[1:0];

  assign prio57_we = addr_hit[63] & reg_we & ~wr_err;
  assign prio57_wd = reg_wdata[1:0];

  assign prio58_we = addr_hit[64] & reg_we & ~wr_err;
  assign prio58_wd = reg_wdata[1:0];

  assign prio59_we = addr_hit[65] & reg_we & ~wr_err;
  assign prio59_wd = reg_wdata[1:0];

  assign prio60_we = addr_hit[66] & reg_we & ~wr_err;
  assign prio60_wd = reg_wdata[1:0];

  assign prio61_we = addr_hit[67] & reg_we & ~wr_err;
  assign prio61_wd = reg_wdata[1:0];

  assign prio62_we = addr_hit[68] & reg_we & ~wr_err;
  assign prio62_wd = reg_wdata[1:0];

  assign prio63_we = addr_hit[69] & reg_we & ~wr_err;
  assign prio63_wd = reg_wdata[1:0];

  assign prio64_we = addr_hit[70] & reg_we & ~wr_err;
  assign prio64_wd = reg_wdata[1:0];

  assign prio65_we = addr_hit[71] & reg_we & ~wr_err;
  assign prio65_wd = reg_wdata[1:0];

  assign prio66_we = addr_hit[72] & reg_we & ~wr_err;
  assign prio66_wd = reg_wdata[1:0];

  assign prio67_we = addr_hit[73] & reg_we & ~wr_err;
  assign prio67_wd = reg_wdata[1:0];

  assign prio68_we = addr_hit[74] & reg_we & ~wr_err;
  assign prio68_wd = reg_wdata[1:0];

  assign prio69_we = addr_hit[75] & reg_we & ~wr_err;
  assign prio69_wd = reg_wdata[1:0];

  assign prio70_we = addr_hit[76] & reg_we & ~wr_err;
  assign prio70_wd = reg_wdata[1:0];

  assign prio71_we = addr_hit[77] & reg_we & ~wr_err;
  assign prio71_wd = reg_wdata[1:0];

  assign prio72_we = addr_hit[78] & reg_we & ~wr_err;
  assign prio72_wd = reg_wdata[1:0];

  assign prio73_we = addr_hit[79] & reg_we & ~wr_err;
  assign prio73_wd = reg_wdata[1:0];

  assign prio74_we = addr_hit[80] & reg_we & ~wr_err;
  assign prio74_wd = reg_wdata[1:0];

  assign prio75_we = addr_hit[81] & reg_we & ~wr_err;
  assign prio75_wd = reg_wdata[1:0];

  assign prio76_we = addr_hit[82] & reg_we & ~wr_err;
  assign prio76_wd = reg_wdata[1:0];

  assign prio77_we = addr_hit[83] & reg_we & ~wr_err;
  assign prio77_wd = reg_wdata[1:0];

  assign prio78_we = addr_hit[84] & reg_we & ~wr_err;
  assign prio78_wd = reg_wdata[1:0];

  assign prio79_we = addr_hit[85] & reg_we & ~wr_err;
  assign prio79_wd = reg_wdata[1:0];

  assign prio80_we = addr_hit[86] & reg_we & ~wr_err;
  assign prio80_wd = reg_wdata[1:0];

  assign prio81_we = addr_hit[87] & reg_we & ~wr_err;
  assign prio81_wd = reg_wdata[1:0];

  assign prio82_we = addr_hit[88] & reg_we & ~wr_err;
  assign prio82_wd = reg_wdata[1:0];

  assign ie00_e0_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e0_wd = reg_wdata[0];

  assign ie00_e1_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e1_wd = reg_wdata[1];

  assign ie00_e2_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e2_wd = reg_wdata[2];

  assign ie00_e3_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e3_wd = reg_wdata[3];

  assign ie00_e4_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e4_wd = reg_wdata[4];

  assign ie00_e5_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e5_wd = reg_wdata[5];

  assign ie00_e6_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e6_wd = reg_wdata[6];

  assign ie00_e7_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e7_wd = reg_wdata[7];

  assign ie00_e8_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e8_wd = reg_wdata[8];

  assign ie00_e9_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e9_wd = reg_wdata[9];

  assign ie00_e10_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e10_wd = reg_wdata[10];

  assign ie00_e11_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e11_wd = reg_wdata[11];

  assign ie00_e12_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e12_wd = reg_wdata[12];

  assign ie00_e13_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e13_wd = reg_wdata[13];

  assign ie00_e14_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e14_wd = reg_wdata[14];

  assign ie00_e15_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e15_wd = reg_wdata[15];

  assign ie00_e16_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e16_wd = reg_wdata[16];

  assign ie00_e17_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e17_wd = reg_wdata[17];

  assign ie00_e18_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e18_wd = reg_wdata[18];

  assign ie00_e19_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e19_wd = reg_wdata[19];

  assign ie00_e20_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e20_wd = reg_wdata[20];

  assign ie00_e21_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e21_wd = reg_wdata[21];

  assign ie00_e22_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e22_wd = reg_wdata[22];

  assign ie00_e23_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e23_wd = reg_wdata[23];

  assign ie00_e24_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e24_wd = reg_wdata[24];

  assign ie00_e25_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e25_wd = reg_wdata[25];

  assign ie00_e26_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e26_wd = reg_wdata[26];

  assign ie00_e27_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e27_wd = reg_wdata[27];

  assign ie00_e28_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e28_wd = reg_wdata[28];

  assign ie00_e29_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e29_wd = reg_wdata[29];

  assign ie00_e30_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e30_wd = reg_wdata[30];

  assign ie00_e31_we = addr_hit[89] & reg_we & ~wr_err;
  assign ie00_e31_wd = reg_wdata[31];

  assign ie01_e32_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e32_wd = reg_wdata[0];

  assign ie01_e33_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e33_wd = reg_wdata[1];

  assign ie01_e34_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e34_wd = reg_wdata[2];

  assign ie01_e35_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e35_wd = reg_wdata[3];

  assign ie01_e36_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e36_wd = reg_wdata[4];

  assign ie01_e37_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e37_wd = reg_wdata[5];

  assign ie01_e38_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e38_wd = reg_wdata[6];

  assign ie01_e39_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e39_wd = reg_wdata[7];

  assign ie01_e40_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e40_wd = reg_wdata[8];

  assign ie01_e41_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e41_wd = reg_wdata[9];

  assign ie01_e42_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e42_wd = reg_wdata[10];

  assign ie01_e43_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e43_wd = reg_wdata[11];

  assign ie01_e44_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e44_wd = reg_wdata[12];

  assign ie01_e45_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e45_wd = reg_wdata[13];

  assign ie01_e46_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e46_wd = reg_wdata[14];

  assign ie01_e47_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e47_wd = reg_wdata[15];

  assign ie01_e48_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e48_wd = reg_wdata[16];

  assign ie01_e49_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e49_wd = reg_wdata[17];

  assign ie01_e50_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e50_wd = reg_wdata[18];

  assign ie01_e51_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e51_wd = reg_wdata[19];

  assign ie01_e52_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e52_wd = reg_wdata[20];

  assign ie01_e53_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e53_wd = reg_wdata[21];

  assign ie01_e54_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e54_wd = reg_wdata[22];

  assign ie01_e55_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e55_wd = reg_wdata[23];

  assign ie01_e56_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e56_wd = reg_wdata[24];

  assign ie01_e57_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e57_wd = reg_wdata[25];

  assign ie01_e58_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e58_wd = reg_wdata[26];

  assign ie01_e59_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e59_wd = reg_wdata[27];

  assign ie01_e60_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e60_wd = reg_wdata[28];

  assign ie01_e61_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e61_wd = reg_wdata[29];

  assign ie01_e62_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e62_wd = reg_wdata[30];

  assign ie01_e63_we = addr_hit[90] & reg_we & ~wr_err;
  assign ie01_e63_wd = reg_wdata[31];

  assign ie02_e64_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e64_wd = reg_wdata[0];

  assign ie02_e65_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e65_wd = reg_wdata[1];

  assign ie02_e66_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e66_wd = reg_wdata[2];

  assign ie02_e67_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e67_wd = reg_wdata[3];

  assign ie02_e68_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e68_wd = reg_wdata[4];

  assign ie02_e69_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e69_wd = reg_wdata[5];

  assign ie02_e70_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e70_wd = reg_wdata[6];

  assign ie02_e71_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e71_wd = reg_wdata[7];

  assign ie02_e72_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e72_wd = reg_wdata[8];

  assign ie02_e73_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e73_wd = reg_wdata[9];

  assign ie02_e74_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e74_wd = reg_wdata[10];

  assign ie02_e75_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e75_wd = reg_wdata[11];

  assign ie02_e76_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e76_wd = reg_wdata[12];

  assign ie02_e77_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e77_wd = reg_wdata[13];

  assign ie02_e78_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e78_wd = reg_wdata[14];

  assign ie02_e79_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e79_wd = reg_wdata[15];

  assign ie02_e80_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e80_wd = reg_wdata[16];

  assign ie02_e81_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e81_wd = reg_wdata[17];

  assign ie02_e82_we = addr_hit[91] & reg_we & ~wr_err;
  assign ie02_e82_wd = reg_wdata[18];

  assign threshold0_we = addr_hit[92] & reg_we & ~wr_err;
  assign threshold0_wd = reg_wdata[1:0];

  assign cc0_we = addr_hit[93] & reg_we & ~wr_err;
  assign cc0_wd = reg_wdata[6:0];
  assign cc0_re = addr_hit[93] && reg_re;

  assign msip0_we = addr_hit[94] & reg_we & ~wr_err;
  assign msip0_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = ip0_p0_qs;
        reg_rdata_next[1] = ip0_p1_qs;
        reg_rdata_next[2] = ip0_p2_qs;
        reg_rdata_next[3] = ip0_p3_qs;
        reg_rdata_next[4] = ip0_p4_qs;
        reg_rdata_next[5] = ip0_p5_qs;
        reg_rdata_next[6] = ip0_p6_qs;
        reg_rdata_next[7] = ip0_p7_qs;
        reg_rdata_next[8] = ip0_p8_qs;
        reg_rdata_next[9] = ip0_p9_qs;
        reg_rdata_next[10] = ip0_p10_qs;
        reg_rdata_next[11] = ip0_p11_qs;
        reg_rdata_next[12] = ip0_p12_qs;
        reg_rdata_next[13] = ip0_p13_qs;
        reg_rdata_next[14] = ip0_p14_qs;
        reg_rdata_next[15] = ip0_p15_qs;
        reg_rdata_next[16] = ip0_p16_qs;
        reg_rdata_next[17] = ip0_p17_qs;
        reg_rdata_next[18] = ip0_p18_qs;
        reg_rdata_next[19] = ip0_p19_qs;
        reg_rdata_next[20] = ip0_p20_qs;
        reg_rdata_next[21] = ip0_p21_qs;
        reg_rdata_next[22] = ip0_p22_qs;
        reg_rdata_next[23] = ip0_p23_qs;
        reg_rdata_next[24] = ip0_p24_qs;
        reg_rdata_next[25] = ip0_p25_qs;
        reg_rdata_next[26] = ip0_p26_qs;
        reg_rdata_next[27] = ip0_p27_qs;
        reg_rdata_next[28] = ip0_p28_qs;
        reg_rdata_next[29] = ip0_p29_qs;
        reg_rdata_next[30] = ip0_p30_qs;
        reg_rdata_next[31] = ip0_p31_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = ip1_p32_qs;
        reg_rdata_next[1] = ip1_p33_qs;
        reg_rdata_next[2] = ip1_p34_qs;
        reg_rdata_next[3] = ip1_p35_qs;
        reg_rdata_next[4] = ip1_p36_qs;
        reg_rdata_next[5] = ip1_p37_qs;
        reg_rdata_next[6] = ip1_p38_qs;
        reg_rdata_next[7] = ip1_p39_qs;
        reg_rdata_next[8] = ip1_p40_qs;
        reg_rdata_next[9] = ip1_p41_qs;
        reg_rdata_next[10] = ip1_p42_qs;
        reg_rdata_next[11] = ip1_p43_qs;
        reg_rdata_next[12] = ip1_p44_qs;
        reg_rdata_next[13] = ip1_p45_qs;
        reg_rdata_next[14] = ip1_p46_qs;
        reg_rdata_next[15] = ip1_p47_qs;
        reg_rdata_next[16] = ip1_p48_qs;
        reg_rdata_next[17] = ip1_p49_qs;
        reg_rdata_next[18] = ip1_p50_qs;
        reg_rdata_next[19] = ip1_p51_qs;
        reg_rdata_next[20] = ip1_p52_qs;
        reg_rdata_next[21] = ip1_p53_qs;
        reg_rdata_next[22] = ip1_p54_qs;
        reg_rdata_next[23] = ip1_p55_qs;
        reg_rdata_next[24] = ip1_p56_qs;
        reg_rdata_next[25] = ip1_p57_qs;
        reg_rdata_next[26] = ip1_p58_qs;
        reg_rdata_next[27] = ip1_p59_qs;
        reg_rdata_next[28] = ip1_p60_qs;
        reg_rdata_next[29] = ip1_p61_qs;
        reg_rdata_next[30] = ip1_p62_qs;
        reg_rdata_next[31] = ip1_p63_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = ip2_p64_qs;
        reg_rdata_next[1] = ip2_p65_qs;
        reg_rdata_next[2] = ip2_p66_qs;
        reg_rdata_next[3] = ip2_p67_qs;
        reg_rdata_next[4] = ip2_p68_qs;
        reg_rdata_next[5] = ip2_p69_qs;
        reg_rdata_next[6] = ip2_p70_qs;
        reg_rdata_next[7] = ip2_p71_qs;
        reg_rdata_next[8] = ip2_p72_qs;
        reg_rdata_next[9] = ip2_p73_qs;
        reg_rdata_next[10] = ip2_p74_qs;
        reg_rdata_next[11] = ip2_p75_qs;
        reg_rdata_next[12] = ip2_p76_qs;
        reg_rdata_next[13] = ip2_p77_qs;
        reg_rdata_next[14] = ip2_p78_qs;
        reg_rdata_next[15] = ip2_p79_qs;
        reg_rdata_next[16] = ip2_p80_qs;
        reg_rdata_next[17] = ip2_p81_qs;
        reg_rdata_next[18] = ip2_p82_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = le0_le0_qs;
        reg_rdata_next[1] = le0_le1_qs;
        reg_rdata_next[2] = le0_le2_qs;
        reg_rdata_next[3] = le0_le3_qs;
        reg_rdata_next[4] = le0_le4_qs;
        reg_rdata_next[5] = le0_le5_qs;
        reg_rdata_next[6] = le0_le6_qs;
        reg_rdata_next[7] = le0_le7_qs;
        reg_rdata_next[8] = le0_le8_qs;
        reg_rdata_next[9] = le0_le9_qs;
        reg_rdata_next[10] = le0_le10_qs;
        reg_rdata_next[11] = le0_le11_qs;
        reg_rdata_next[12] = le0_le12_qs;
        reg_rdata_next[13] = le0_le13_qs;
        reg_rdata_next[14] = le0_le14_qs;
        reg_rdata_next[15] = le0_le15_qs;
        reg_rdata_next[16] = le0_le16_qs;
        reg_rdata_next[17] = le0_le17_qs;
        reg_rdata_next[18] = le0_le18_qs;
        reg_rdata_next[19] = le0_le19_qs;
        reg_rdata_next[20] = le0_le20_qs;
        reg_rdata_next[21] = le0_le21_qs;
        reg_rdata_next[22] = le0_le22_qs;
        reg_rdata_next[23] = le0_le23_qs;
        reg_rdata_next[24] = le0_le24_qs;
        reg_rdata_next[25] = le0_le25_qs;
        reg_rdata_next[26] = le0_le26_qs;
        reg_rdata_next[27] = le0_le27_qs;
        reg_rdata_next[28] = le0_le28_qs;
        reg_rdata_next[29] = le0_le29_qs;
        reg_rdata_next[30] = le0_le30_qs;
        reg_rdata_next[31] = le0_le31_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = le1_le32_qs;
        reg_rdata_next[1] = le1_le33_qs;
        reg_rdata_next[2] = le1_le34_qs;
        reg_rdata_next[3] = le1_le35_qs;
        reg_rdata_next[4] = le1_le36_qs;
        reg_rdata_next[5] = le1_le37_qs;
        reg_rdata_next[6] = le1_le38_qs;
        reg_rdata_next[7] = le1_le39_qs;
        reg_rdata_next[8] = le1_le40_qs;
        reg_rdata_next[9] = le1_le41_qs;
        reg_rdata_next[10] = le1_le42_qs;
        reg_rdata_next[11] = le1_le43_qs;
        reg_rdata_next[12] = le1_le44_qs;
        reg_rdata_next[13] = le1_le45_qs;
        reg_rdata_next[14] = le1_le46_qs;
        reg_rdata_next[15] = le1_le47_qs;
        reg_rdata_next[16] = le1_le48_qs;
        reg_rdata_next[17] = le1_le49_qs;
        reg_rdata_next[18] = le1_le50_qs;
        reg_rdata_next[19] = le1_le51_qs;
        reg_rdata_next[20] = le1_le52_qs;
        reg_rdata_next[21] = le1_le53_qs;
        reg_rdata_next[22] = le1_le54_qs;
        reg_rdata_next[23] = le1_le55_qs;
        reg_rdata_next[24] = le1_le56_qs;
        reg_rdata_next[25] = le1_le57_qs;
        reg_rdata_next[26] = le1_le58_qs;
        reg_rdata_next[27] = le1_le59_qs;
        reg_rdata_next[28] = le1_le60_qs;
        reg_rdata_next[29] = le1_le61_qs;
        reg_rdata_next[30] = le1_le62_qs;
        reg_rdata_next[31] = le1_le63_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = le2_le64_qs;
        reg_rdata_next[1] = le2_le65_qs;
        reg_rdata_next[2] = le2_le66_qs;
        reg_rdata_next[3] = le2_le67_qs;
        reg_rdata_next[4] = le2_le68_qs;
        reg_rdata_next[5] = le2_le69_qs;
        reg_rdata_next[6] = le2_le70_qs;
        reg_rdata_next[7] = le2_le71_qs;
        reg_rdata_next[8] = le2_le72_qs;
        reg_rdata_next[9] = le2_le73_qs;
        reg_rdata_next[10] = le2_le74_qs;
        reg_rdata_next[11] = le2_le75_qs;
        reg_rdata_next[12] = le2_le76_qs;
        reg_rdata_next[13] = le2_le77_qs;
        reg_rdata_next[14] = le2_le78_qs;
        reg_rdata_next[15] = le2_le79_qs;
        reg_rdata_next[16] = le2_le80_qs;
        reg_rdata_next[17] = le2_le81_qs;
        reg_rdata_next[18] = le2_le82_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[1:0] = prio0_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[1:0] = prio1_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[1:0] = prio2_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[1:0] = prio3_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[1:0] = prio4_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[1:0] = prio5_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[1:0] = prio6_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[1:0] = prio7_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[1:0] = prio8_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[1:0] = prio9_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[1:0] = prio10_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[1:0] = prio11_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[1:0] = prio12_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[1:0] = prio13_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[1:0] = prio14_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[1:0] = prio15_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[1:0] = prio16_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[1:0] = prio17_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[1:0] = prio18_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[1:0] = prio19_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[1:0] = prio20_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[1:0] = prio21_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[1:0] = prio22_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[1:0] = prio23_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[1:0] = prio24_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[1:0] = prio25_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[1:0] = prio26_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[1:0] = prio27_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[1:0] = prio28_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[1:0] = prio29_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[1:0] = prio30_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[1:0] = prio31_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[1:0] = prio32_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[1:0] = prio33_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[1:0] = prio34_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[1:0] = prio35_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[1:0] = prio36_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[1:0] = prio37_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[1:0] = prio38_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[1:0] = prio39_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[1:0] = prio40_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[1:0] = prio41_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[1:0] = prio42_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[1:0] = prio43_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[1:0] = prio44_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[1:0] = prio45_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[1:0] = prio46_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[1:0] = prio47_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[1:0] = prio48_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[1:0] = prio49_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[1:0] = prio50_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[1:0] = prio51_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[1:0] = prio52_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[1:0] = prio53_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[1:0] = prio54_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[1:0] = prio55_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[1:0] = prio56_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[1:0] = prio57_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[1:0] = prio58_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[1:0] = prio59_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[1:0] = prio60_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[1:0] = prio61_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[1:0] = prio62_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[1:0] = prio63_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[1:0] = prio64_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[1:0] = prio65_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[1:0] = prio66_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[1:0] = prio67_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[1:0] = prio68_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[1:0] = prio69_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[1:0] = prio70_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[1:0] = prio71_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[1:0] = prio72_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[1:0] = prio73_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[1:0] = prio74_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[1:0] = prio75_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[1:0] = prio76_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[1:0] = prio77_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[1:0] = prio78_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[1:0] = prio79_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[1:0] = prio80_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[1:0] = prio81_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[1:0] = prio82_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[0] = ie00_e0_qs;
        reg_rdata_next[1] = ie00_e1_qs;
        reg_rdata_next[2] = ie00_e2_qs;
        reg_rdata_next[3] = ie00_e3_qs;
        reg_rdata_next[4] = ie00_e4_qs;
        reg_rdata_next[5] = ie00_e5_qs;
        reg_rdata_next[6] = ie00_e6_qs;
        reg_rdata_next[7] = ie00_e7_qs;
        reg_rdata_next[8] = ie00_e8_qs;
        reg_rdata_next[9] = ie00_e9_qs;
        reg_rdata_next[10] = ie00_e10_qs;
        reg_rdata_next[11] = ie00_e11_qs;
        reg_rdata_next[12] = ie00_e12_qs;
        reg_rdata_next[13] = ie00_e13_qs;
        reg_rdata_next[14] = ie00_e14_qs;
        reg_rdata_next[15] = ie00_e15_qs;
        reg_rdata_next[16] = ie00_e16_qs;
        reg_rdata_next[17] = ie00_e17_qs;
        reg_rdata_next[18] = ie00_e18_qs;
        reg_rdata_next[19] = ie00_e19_qs;
        reg_rdata_next[20] = ie00_e20_qs;
        reg_rdata_next[21] = ie00_e21_qs;
        reg_rdata_next[22] = ie00_e22_qs;
        reg_rdata_next[23] = ie00_e23_qs;
        reg_rdata_next[24] = ie00_e24_qs;
        reg_rdata_next[25] = ie00_e25_qs;
        reg_rdata_next[26] = ie00_e26_qs;
        reg_rdata_next[27] = ie00_e27_qs;
        reg_rdata_next[28] = ie00_e28_qs;
        reg_rdata_next[29] = ie00_e29_qs;
        reg_rdata_next[30] = ie00_e30_qs;
        reg_rdata_next[31] = ie00_e31_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[0] = ie01_e32_qs;
        reg_rdata_next[1] = ie01_e33_qs;
        reg_rdata_next[2] = ie01_e34_qs;
        reg_rdata_next[3] = ie01_e35_qs;
        reg_rdata_next[4] = ie01_e36_qs;
        reg_rdata_next[5] = ie01_e37_qs;
        reg_rdata_next[6] = ie01_e38_qs;
        reg_rdata_next[7] = ie01_e39_qs;
        reg_rdata_next[8] = ie01_e40_qs;
        reg_rdata_next[9] = ie01_e41_qs;
        reg_rdata_next[10] = ie01_e42_qs;
        reg_rdata_next[11] = ie01_e43_qs;
        reg_rdata_next[12] = ie01_e44_qs;
        reg_rdata_next[13] = ie01_e45_qs;
        reg_rdata_next[14] = ie01_e46_qs;
        reg_rdata_next[15] = ie01_e47_qs;
        reg_rdata_next[16] = ie01_e48_qs;
        reg_rdata_next[17] = ie01_e49_qs;
        reg_rdata_next[18] = ie01_e50_qs;
        reg_rdata_next[19] = ie01_e51_qs;
        reg_rdata_next[20] = ie01_e52_qs;
        reg_rdata_next[21] = ie01_e53_qs;
        reg_rdata_next[22] = ie01_e54_qs;
        reg_rdata_next[23] = ie01_e55_qs;
        reg_rdata_next[24] = ie01_e56_qs;
        reg_rdata_next[25] = ie01_e57_qs;
        reg_rdata_next[26] = ie01_e58_qs;
        reg_rdata_next[27] = ie01_e59_qs;
        reg_rdata_next[28] = ie01_e60_qs;
        reg_rdata_next[29] = ie01_e61_qs;
        reg_rdata_next[30] = ie01_e62_qs;
        reg_rdata_next[31] = ie01_e63_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[0] = ie02_e64_qs;
        reg_rdata_next[1] = ie02_e65_qs;
        reg_rdata_next[2] = ie02_e66_qs;
        reg_rdata_next[3] = ie02_e67_qs;
        reg_rdata_next[4] = ie02_e68_qs;
        reg_rdata_next[5] = ie02_e69_qs;
        reg_rdata_next[6] = ie02_e70_qs;
        reg_rdata_next[7] = ie02_e71_qs;
        reg_rdata_next[8] = ie02_e72_qs;
        reg_rdata_next[9] = ie02_e73_qs;
        reg_rdata_next[10] = ie02_e74_qs;
        reg_rdata_next[11] = ie02_e75_qs;
        reg_rdata_next[12] = ie02_e76_qs;
        reg_rdata_next[13] = ie02_e77_qs;
        reg_rdata_next[14] = ie02_e78_qs;
        reg_rdata_next[15] = ie02_e79_qs;
        reg_rdata_next[16] = ie02_e80_qs;
        reg_rdata_next[17] = ie02_e81_qs;
        reg_rdata_next[18] = ie02_e82_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[1:0] = threshold0_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[6:0] = cc0_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[0] = msip0_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)

endmodule
