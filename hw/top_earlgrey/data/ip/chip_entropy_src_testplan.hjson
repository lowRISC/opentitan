// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
{
  name: chip_entropy_src
  testpoints: [
    // ENTROPY_SRC (pre-verified IP) integration tests:
    {
      name: chip_sw_entropy_src_ast_rng_req
      desc: '''Verify the RNG req to AST.

            - Enable ENTROPY_SRC in FIPS mode.
            - Enable Firmware Override - Extract & Insert to route entropy received from AST to the observe FIFO.
            - Verify that the observe FIFO depth is non-zero via SW - indicating the reception of data over the AST RNG interface.
            - Verify the correctness of the received data with assertion based connectivity checks.

            Notes for silicon targets:
            - This test requires access to the ENTROPY_SRC.FW_OV.EXTRACT_AND_INSERT feature, which is gated by OTP.
              This test might thus need to be done in a secure facility.
            - In silicon, it's not possible to check whether the values match.
              However, checking that the observe FIFO actually fills up is a very fundamental test prior to the validation testing.
            '''
      features: ["ENTROPY_SRC.FW_OV.EXTRACT_AND_INSERT"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_entropy_src_ast_rng_req"]
      bazel: ["//sw/device/tests:entropy_src_ast_rng_req_test"]
    },
    {
      name: chip_sw_entropy_src_csrng
      desc: '''Verify the transfer of entropy bits to CSRNG.

            Verify the entropy valid interrupt.
            At the CSRNG, validate the reception of entropy req interrupt.

            - Disable edn0, edn1, csrng and entropy_src, as these are enabled by the test ROM.
            - Enable entropy_src in fips mode routing data to csrng.
            - Enable csrng and enable the entropy request interrupt.
            - Issue csrng instantiate and reseed commands. Check that for each csrng command,
              there is a corresponding entropy request interrupt.
            - Generate output and ensure the data output is valid, and that csrng is not reporting
              any errors.
            - Issue instantiate and reseed commands from edn0 and edn1. Check that for each
              command, there is a corresponding entropy request interrupt.
            '''
      features: ["ENTROPY_SRC.MODE.FIPS"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_entropy_src_csrng"]
      bazel: ["//sw/device/tests:entropy_src_csrng_test"]
    },
    {
      name: chip_sw_entropy_src_fuse_en_fw_read
      desc: '''Verify the fuse input entropy_src.

            - Initialize the OTP with the fuse that controls whether the SW can read the entropy src
              enabled.
            - Read the OTP and verify that the fuse is enabled.
            - Read the entropy_data_fifo via SW and verify that it reads valid values.
            - Reset the chip, but this time, initialize the OTP with the fuse disabled.
            - Read the OTP and verify that fuse is disabled.
            - Read the internal state via SW and verify that the entropy valid bit is zero.

            Notes for silicon targets:
            - The current understanding is that the en_entropy_src_fw_read OTP switch controlling the ENTROPY_SRC.ROUTE_TO_FIRMWARE feature will need to be enabled also in the PROD life-cycle state for validation and known-answer testing.
              Thus, burning the en_entropy_src_fw_read OTP fuses is not advisable for silicon validation.
              This particular test may be skipped in favor of chip_sw_entropy_src_known_answer_tests which also tests the ENTROPY_SRC.ROUTE_TO_FIRMWARE feature.
            '''
      features: [
        "ENTROPY_SRC.ROUTE_TO_FIRMWARE",
      ]
      stage: V2
      si_stage: None
      lc_states: ["TEST_UNLOCKED", "PROD"]
      tests: ["chip_sw_entropy_src_fuse_en_fw_read_test"]
      bazel: []
    },
    {
      name: chip_sw_entropy_src_known_answer_tests
      desc: '''Verify our ability to run known-answer tests in SW.

            - Enable ENTROPY_SRC in FIPS mode.
            - Enable Firmware Override - Extract & Insert.
            - Feed NIST test-defined entropy sequences into ENTROPY_SRC via the FW_OV_WR_DATA register.
            - Trigger the hardware conditioner.
            - Read the conditioned entropy from ENTROPY_SRC via the ENTROPY_DATA register; verify that it reads the expected values.

            Notes for silicon targets:
            - This test requires access to the ENTROPY_SRC.ROUTE_TO_FIRMWARE and ENTROPY_SRC.FW_OV.EXTRACT_AND_INSERT features, which are gated by OTP.
              This test might thus need to be done in a secure facility.
            '''
      features: [
        "ENTROPY_SRC.ROUTE_TO_FIRMWARE",
        "ENTROPY_SRC.FW_OV.EXTRACT_AND_INSERT"
      ]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_entropy_src_kat_test"]
      bazel: ["//sw/device/tests:entropy_src_kat_test"]
    },
    {
      name: chip_sw_entropy_src_bypass_mode_health_tests
      desc: '''
            Verify that ENTROPY_SRC:
            - provides one initial seed in boot-time / bypass mode only,
            - signals a recoverable alert if the total failure counter hits the threshold in boot-time / bypass mode.

            Procedure:
            - Disable the entropy complex.
            - Configure loose health test threshold values for boot-time / bypass mode.
            - Enable ENTROPY_SRC in boot-time / bypass mode.
            - Enable CSRNG.
            - Enable both EDNs in boot-time request mode.
            - Trigger the execution of a cryptographic hardware block consuming entropy (e.g. AES) to test EDN0.
            - Verify the entropy consuming endpoint finishes its operation.
            - Trigger the execution of an OTBN program requiring entropy from both EDN1 and EDN0.
            - Verify the OTBN program hangs.
            - Disable the entropy complex.
            - Configure unrealistically stringent health test threshold values for boot-time / bypass mode.
            - Configure an alert threshold value of 1 in the ALERT_THRESHOLD register.
            - Enable ENTROPY_SRC in boot-time / bypass mode.
            - Enable CSRNG.
            - Enable both EDNs in boot-time request mode.
            - Verify that ENTROPY_SRC triggers a recoverable alert and sets the RECOV_ALERT_STS.ES_MAIN_SM_ALERT bit.
            '''
      features: [
        "ENTROPY_SRC.MODE.BYPASS",
        "ENTROPY_SRC.HEALTH_TESTS",
      ]
      stage: V3
      si_stage: SV3
      lc_states: ["PROD"]
      tests: []
      bazel: []
    },
    {
      name: chip_sw_entropy_src_fips_mode_health_tests
      desc: '''
            Verify that ENTROPY_SRC:
            - provides continuous entropy in FIPS/CC compliant mode,
            - works with different health test window sizes in FIPS mode,
            - signals a recoverable alert and stops serving entropy if the total failure counter hits the threshold in FIPS mode.

            Procedure:
            - Disable the entropy complex.
            - Configure realistic health test threshold values for FIPS/CC compliant mode.
            - Enable ENTROPY_SRC in FIPS mode.
            - Enable CSRNG.
            - Enable both EDNs in auto request mode.
            - Trigger the execution of various cryptographic hardware blocks consuming entropy to stress test the entropy complex.
            - Verify that all entropy consuming endpoints can finish their operations and do not hang.
            - Repeat the procedure with different health test window sizes for FIPS mode.
            - Disable the entropy complex.
            - Configure unrealistically stringent health test threshold values for FIPS mode.
            - Configure a low alert threshold value in the ALERT_THRESHOLD register.
            - Enable ENTROPY_SRC in FIPS mode.
            - Enable CSRNG.
            - Enable both EDNs in auto request mode and with low values for the generate length parameter to request fresh entropy more often.
            - Trigger the execution of various cryptographic hardware blocks consuming entropy to stress test the entropy complex.
            - Verify that ENTROPY_SRC triggers a recoverable alert and sets the RECOV_ALERT_STS.ES_MAIN_SM_ALERT bit.
            - Verify that various entropy consuming endpoints hang as ENTROPY_SRC stops generating entropy after triggering the recoverable alert.
            '''
      features: [
        "ENTROPY_SRC.MODE.FIPS",
        "ENTROPY_SRC.HEALTH_TESTS",
      ]
      stage: V3
      si_stage: SV3
      lc_states: ["PROD"]
      tests: []
      bazel: []
    },
    {
      name: chip_sw_entropy_src_validation
      desc: '''
            Enable validation of the four channels of the digital noise source / physical true random number generator (PTRNG) at the ENTROPY_SRC input, and verify that ENTROPY_SRC allows observing raw entropy through the observe FIFO while serving entropy to consumers.

            Procedure:
            - Disable the entropy complex.
            - Configure realistic health test threshold values for FIPS/CC compliant mode.
            - Enable ENTROPY_SRC in FIPS mode.
            - Enable Firmware Override - Observe.
            - Enable CSRNG.
            - Enable both EDNs in auto request mode.
            - Trigger the execution of various cryptographic hardware blocks consuming entropy to stress test the entropy complex.
            - Verify that all entropy consuming endpoints can finish their operations and do not hang.
            - Verify that the observe FIFO depth is non-zero and read out post-health test entropy for validation testing.
            - Repeat the procedure four times with the ENTROPY_SRC.RNG_BIT_ENABLE feature being enabled (once for every channel).

            Notes for silicon targets:
            - This test requires access to the ENTROPY_SRC.FW_OV.OBSERVE feature, which is gated by OTP.
              This test might thus need to be done in a secure facility.
            '''
      features: [
        "ENTROPY_SRC.MODE.FIPS",
        "ENTROPY_SRC.FW_OV.OBSERVE",
        "ENTROPY_SRC.RNG_BIT_ENABLE",
      ]
      stage: V3
      si_stage: SV3
      lc_states: ["PROD"]
      tests: []
      bazel: []
    },
    {
      name: chip_sw_entropy_src_fw_observe_many_contiguous
      desc: '''Verify that the software can observe samples fast enough to extract many contiguous samples.

            Procedure:
            - Disable the entropy complex.
            - Disable health checks.
            - Enable ENTROPY_SRC in FIPS mode
            - Enable Firmware Override - Observe.
            - Repeat several times:
              - Collect 1000 contiguous samples from the observe FIFO:
                - Verify after reading each sample that the observe FIFO overflow status has not been set.
              - Let the observe FIFO overflow.
              - Drain the observe FIFO.

            Tests:
            - The procedure must be run once with ENTROPY_SRC.RNG_BIT_ENABLE disabled (4-bit / sample) and
              four times with the ENTROPY_SRC.RNG_BIT_ENABLE feature being enabled (once for every channel).

            Notes for silicon targets:
            - This test requires access to the ENTROPY_SRC.FW_OV.OBSERVE feature, which is gated by OTP.
              This test might thus need to be done in a secure facility.
            '''
      features: [
        "ENTROPY_SRC.MODE.FIPS",
        "ENTROPY_SRC.FW_OV.OBSERVE"
        "ENTROPY_SRC.RNG_BIT_ENABLE",
      ]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: []
      bazel: ["//sw/device/tests:entropy_src_fw_observe_many_contiguous_test"]
    },
    {
      name: chip_sw_entropy_src_fw_extract_and_insert
      desc: '''Verify that the software can observe samples fast enough to extract many contiguous samples.

            Procedure:
            - Disable the entropy complex.
            - Disable health checks.
            - Enable ENTROPY_SRC in FIPS mode.
            - Configure OBSERVE_FIFO_THRESH to a sensible value.
            - Enable Firmware Override - Extract & Insert.
            - Enable CSRNG.
            - Enable both EDNs in auto request mode.
            - Trigger the execution of various cryptographic hardware blocks consuming entropy to stress test the entropy complex.
            - Repeat until all entropy consuming endpoints have finished their operations:
              - Read 1000 samples from the observe FIFO.
              - Verify that the observe FIFO overflow status has not been set.
              - Insert the samples back into the entropy flow.
              - Let the observe FIFO overflow.
              - Empty the observe FIFO and discard any values read.

            Tests:
            - The procedure must be run once with ENTROPY_SRC.RNG_BIT_ENABLE disabled (4-bit / sample) and
              four times with the ENTROPY_SRC.RNG_BIT_ENABLE feature being enabled (once for every channel).
            - The procedure must be tested with and without the conditioner (bypass mode).

            Notes for silicon targets:
            - This test requires access to the ENTROPY_SRC.ROUTE_TO_FIRMWARE and ENTROPY_SRC.FW_OV.EXTRACT_AND_INSERT features, which are gated by OTP.
              This test might thus need to be done in a secure facility.
            '''
      features: [
        "ENTROPY_SRC.MODE.FIPS",
        "ENTROPY_SRC.FW_OV.EXTRACT_AND_INSERT",
        "ENTROPY_SRC.RNG_BIT_ENABLE"
      ]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: []
      bazel: []
    },
  ]
}
