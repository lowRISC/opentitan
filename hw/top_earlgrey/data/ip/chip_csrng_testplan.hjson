// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
{
  name: chip_csrng
  testpoints: [
    // CSRNG (pre-verified IP) integration tests:
    {
      name: chip_sw_csrng_edn_cmd
      desc: '''Verify incoming command interface from EDN.

            - Have each EDN instance issue an instantiate, reseed and generate command to CSRNG.
            - On each command done, verify the reception of edn_cmd_req_done interrupt.
            - Run OTBN randomness test to test the output from EDN0 and EDN1.
            - Check the data returned to EDN via connectivity assertion checks.

            Notes for silicon targets:
            - In silicon, the connectivity cannot be checked using assertions.
              However, checking that the OTBN randomness test finishes allows to quickly assess if both EDNs deliver any entropy which is very fundamental.
            '''
      features: [
        "CSRNG.INTERFACE.HARDWARE0",
        "CSRNG.INTERFACE.HARDWARE1",
        "CSRNG.MODE.NONDETERMINISTIC",
      ]
      stage: V2
      si_stage: SV2
      lc_states: ["TEST_UNLOCKED", "PROD"]
      tests: ["chip_sw_entropy_src_csrng"]
      bazel: ["//sw/device/tests:entropy_src_csrng_test"]
    }
    {
      name: chip_sw_csrng_fuse_en_sw_app_read
      desc: '''Verify the fuse input to CSRNG.

            - Initialize the OTP with the fuse that control whether the SW can read the CSRNG state
              enabled.
            - Issue an instantiate command to request entropy.
            - Verify that SW can read the internal state values.
            - Reset the chip and repeat the steps above, but this time, initialized the OTP with
              fuse disabled.
            - Verify that the SW reads back all zeros when reading the internal state values.

            Notes for silicon targets:
            - The current understanding is that the en_csrng_sw_app_read OTP switch controlling the CSRNG.READ_INT_STATE feature will need to be enabled also in the PROD life-cycle state for validation and known-answer testing.
              Thus, burning the en_csrng_sw_app_read OTP fuses is not advisable for silicon validation.
            '''
      features: [
        "CSRNG.INTERFACE.SOFTWARE",
        "CSRNG.READ_INT_STATE",
      ]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_csrng_fuse_en_sw_app_read_test"]
    }
    {
      name: chip_sw_csrng_lc_hw_debug_en
      desc: '''Verify the effect of LC HW debug enable on CSRNG.

            lc_hw_debug_en is used to diversify the csrng seed.
            - Configure ENTROPY_SRC into bypassing the conditioner and directly inject known
              entropy.
            - Instantiate CSRNG in non-deterministic mode and have it load the known entropy from ENTROPY_SRC while in the TEST_UNLOCKED or DEV life-cycle state (HW_DEBUG_EN = 1).
            - Retrieve entropy from CSRNG and save it in flash and reset the system.
            - Run the process again and ensure the exact same result can be reproduced (similar to
              KAT).
            - Advance the device to PROD or PROD_END life-cycle state (HW_DEBUG_EN = 0).
            - Again configure ENTROPY_SRC to bypass the conditioner and use direct injection.
            - Again instantiate CSRNG in non-deterministic mode and have it load the known entropy from ENTROPY_SRCw while in the new state.
            - The newly fetched entropy and the old entropy stored in flash should not match.

            Notes for silicon targets:
            - This test goes through life-cycle stages that will permanently change the characteristic of the chip.
            - These tests will need to be done in secure environments where there is access to chips in the TEST_UNLOCKED or DEV life-cycle states.
            '''
      features: [
        "CSRNG.INTERFACE.SOFTWARE",
        "CSRNG.MODE.NONDETERMINISTIC",
        "CSRNG.LIFECYCLE.DEBUGENABLE",
      ]
      stage: V2
      si_stage: SV3
      lc_states: ["TEST_UNLOCKED", "DEV", "PROD", "PROD_END"]
      tests: ["chip_sw_csrng_lc_hw_debug_en_test"]
    }
    {
      name: chip_sw_csrng_known_answer_tests
      desc: '''Verify our ability to run known-answer tests in SW.

            - Configure the software instance in deterministic mode with the expected seed (as per
              the NIST-specified test for CTR_DRBG operation).
              Read the DRBG internal K and V state using INT_STATE_VAL register and compare the obtained values against the test vector expected values.
            - Perform generate operations as required by the test vector.
            - Compare the results to test expectations.

            Notes for silicon targets:
            - For the INT_STATE_VAL register to provide read access to the internal K and V state, the en_csrng_sw_app_read OTP switch needs to be in the `kMultiBitBool8True` position.
              The current understanding is that this will need to be enabled also in the PROD life-cycle state for validation and known-answer testing.
              Thus, the test doesn't need to be run in a secure environment.
            '''
      features: [
        "CSRNG.INTERFACE.SOFTWARE",
        "CSRNG.MODE.DETERMINISTIC",
        "CSRNG.READ_INT_STATE",
      ]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_csrng_kat_test"]
      bazel: ["//sw/device/tests:csrng_kat_test"]
    }
  ]
}
