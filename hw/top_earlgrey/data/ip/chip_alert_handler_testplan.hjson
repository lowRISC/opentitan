// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
{
  name: chip_alert_handler
  testpoints: [
    // ALERT_HANDLER (pre-verified IP) integration tests:
    {
      name: chip_sw_alert_handler_alerts
      desc: '''Verify all alerts coming into the alert_handler.

            An automated SW test, which does the following (applies to all alerts in all IPs):
            - Program the alert_test CSR in each block to trigger each alert one by one.
            - Ensure that all alerts are properly connected to the alert handler and cause the
              escalation paths to trigger.

            Note for silicon validation:
            - Ensure this test makes no alterations to OTP (use NMI escalation path).
            '''
      features: ["ALERT_HANDLER.ALERT.OBSERVE",
                 "ALERT_HANDLER.ALERT.ESCALATE"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_alert_test"]
      bazel: ["//sw/device/tests/autogen:alert_test"]
    }
    {
      name: chip_sw_alert_handler_escalations
      desc: '''Verify all alert escalation paths.

            Verify all escalation paths triggered by an alert.
            - Verify the first escalation results in NMI interrupt serviced by the CPU.
            - Verify the second results in device being put in scrap state, via the LC JTAG TAP.
            - Verify the third results in chip reset.
            - Ensure that all escalation handshakes complete without errors.
              - This cannot be checked in sival as the handshake signals cannot
                be directly observed.
            '''
      features: ["ALERT_HANDLER.ALERT.ESCALATE",
                 "ALERT_HANDLER.ESCALATION.PHASES"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_alert_handler_escalation"]
      otp_mutate: true
      host_support: true
    }
    {
      name: chip_sw_alert_handler_escalation_nmi_reset
      desc: '''Verify NMI and reset alert escalation paths.

            - Program the alert classes to only use escalation signals 0 and 3 (NMI interrupt and
              chip reset)
            - Verify the first escalation of an alert results in NMI interrupt serviced by the CPU.
            - Verify the second escalation of an alert results in a chip reset.
            - It is critical this test does not trigger escalation signals 1 and 2 as these result
              in an OTP mutate that puts the chips in an unrecoverable SCRAP state.
            - Verify any timer interrupts are disabled by escalation.
            - Verify after the escalation reset all faults are cleared, and that the alert
              info captured the correct alert.
            - Check that no additional resets occur.
            '''
      features: ["ALERT_HANDLER.ALERT.ESCALATE",
                 "ALERT_HANDLER.ESCALATION.PHASES"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: []
      otp_mutate: false
    }
    {
      name: chip_sw_alert_handler_escalation_methods
      desc: '''Verify the different escalation trigger methods

            For each escalation class, verify the escalation occurs (just the first stage, NMI
            escalation) with all of the possible trigger methods.
            - Escalation triggered when the number of alerts seen in the class is greater than the
              threshold
            - Escalation triggered when initial interrupt isn't acknowledged within the timeout
            '''
      features: ["ALERT_HANDLER.ESCALATION.COUNT",
                 "ALERT_HANDLER.ESCALATION.TIMEOUT"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: []
    }
    {
      name: chip_sw_all_escalation_resets
      desc: '''Verify escalation from all unit integrity errors.

            Inject integrity errors in any unit that has a one-hot checker for CSR register
            writes, and verify escalation is triggered. Allow escalation to go through reset.
            Use the rstmgr alert info and the unit's fault CSRs to check the alert cause is right.
            Each run of the test randomly chooses some one-hot checker for the error to be injected.
            Keep state across resets in flash to check the expected interrupts and the right number
            of resets occur.
            - Verify the integrity error results in a regular interrupt.
            - Verify the first escalation results in NMI serviced by the CPU.
            - Verify the alert id in both these interrupts.
            - Verify the unit's fault CSR correctly captured the fault kind.
            - Verify any timer interrupts are disabled by escalation.
            - Verify after the escalation reset all faults are cleared, and that the alert
              info captured the correct alert.
            - Check that no additional resets occur.
            '''
      stage: V2
      si_stage: NA
      tests: ["chip_sw_all_escalation_resets"]
    }
    {
      name: chip_sw_alert_handler_irqs
      desc: '''Verify all classes of alert handler interrupts to the CPU.

            X-ref'ed with the automated PLIC test.
            '''
      features: ["ALERT_HANDLER.ALERT.INTERRUPT"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_plic_all_irqs"]
    }
    {
      name: chip_sw_alert_handler_entropy
      desc: '''Verify the alert handler entropy input to ensure pseudo-random ping timer.

            - Force `alert_handler_ping_timer` input signal `wait_cyc_mask_i` to `8'h07` to
              shorten the simulation time.
            - Verify that the alert_handler can request EDN to provide entropy.
            - Ensure that the alert ping handshake to all alert sources and escalation receivers
              complete without errors.
            '''
      stage: V2
      si_stage: NA
      tests: ["chip_sw_alert_handler_entropy"]
    }
    {
      name: chip_sw_alert_handler_crashdump
      desc: '''Verify the alert handler crashdump signal.

            When the chip resets due to alert escalating to cause the chip to reset, verify the
            reset cause to verify the alert crashdump.

            Xref'ed with chip_sw_rstmgr_alert_info.
            '''
      features: ["ALERT_HANDLER.CRASH_DUMP"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_rstmgr_alert_info"]
      bazel: ["//sw/device/tests:rstmgr_alert_info_test"]
    }
    {
      name: chip_sw_alert_handler_ping_timeout
      desc: '''Verify the alert senders' ping timeout.

            Set alert_handler's ping timeout cycle to 2 and enable alert_senders. Verify that
            alert_handler detects the ping timeout and reflects it on the `loc_alert_cause`
            register.
            '''
      features: ["ALERT_HANDLER.PING_TIMER"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_alert_handler_ping_timeout"]
      bazel: ["//sw/device/tests:alert_handler_ping_timeout_test"]
    }
    {
      name: chip_sw_alert_handler_lpg_sleep_mode_alerts
      desc: '''Verify alert_handler can preserve alerts during low_power mode.

            - Trigger fatal alerts for all IPs but configure alert_handler so it won't trigger
              reset.
            - Randomly enter normal or deep sleep mode.
            - Wait random cycles then wake up from the sleep mode.
            - After wake up from normal sleep mode, clear all alert cause registers and check that
              all alerts are still firing after waking up.
            - Repeat the previous steps for random number of iterations.
            - Fatal alerts from flash_ctrl, otp_ctrl, sram_ctrl, and lc_ctrl are omitted because
              they disable the CPU and require a reset for the system to continue to function.
            '''
      features: ["ALERT_HANDLER.PING_TIMER"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_alert_handler_lpg_sleep_mode_alerts"]
    }
    {
      name: chip_sw_alert_handler_lpg_sleep_mode_pings
      desc: '''Verify alert_handler's ping mechanism works correctly during sleep and wake up.

            There are two scenarios to check:
            - Configure alert_handler's ping timeout register to a reasonble value that won't cause
              ping timeout in normal cases.
              Then randomly enter and exit normal or deep sleep modes.
              Check that no local alerts triggered in alert_handler.
              This scenario ensures that ping mechanism won't send out spurious failure.
            - Configure alert_handler's ping timeout register to a small value that will always
              causes ping timeout.
              Then randomly enter and exit normal or deep sleep modes.
              Clear local alert cause register and check that alert ping timeout continue to fire
              after wake up.
              This scenario ensures the ping mechanism will continue to send out pings after waking
              up from sleep modes.
            '''
      features: ["ALERT_HANDLER.PING_TIMER"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_alert_handler_lpg_sleep_mode_pings"]
      bazel: ["//sw/device/tests:alert_handler_lpg_sleep_mode_pings_test"]
    }
    {
      name: chip_sw_alert_handler_lpg_clock_off
      desc: '''Verify alert_handler's works correctly when sender clock is turned off.

            - Configure clkmgr to randomly turn off one of the IP's clock and check alert_handler
              won't trigger a ping timeout error on that block.
            '''
      features: ["ALERT_HANDLER.PING_TIMER"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_alert_handler_lpg_clkoff"]
      bazel: ["//sw/device/tests:alert_handler_lpg_clkoff_test"]
    }
    {
      name: chip_sw_alert_handler_lpg_reset_toggle
      desc: '''Verify alert_handler's works correctly when sender reset is toggled.

            - Configure rstmgr to randomly toggle one IP block's SW reset and check alert_handler
              won't trigger a ping timeout error on that block.
           '''
      features: ["ALERT_HANDLER.PING_TIMER"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_alert_handler_lpg_reset_toggle"]
      bazel: ["//sw/device/tests:alert_handler_lpg_reset_toggle_test"]
   }
   {
      name: chip_sw_alert_handler_reverse_ping_in_deep_sleep
      desc: '''Verify escalation reverse ping timer disabled in sleep mode.

            Check that escalation receivers located inside always-on blocks do not auto-escalate
            due to the reverse ping feature while the system is in deep sleep.

            **Reverse ping timeout calculation**

            The reverse ping timeout calculation is done using the following formula available in
            `prim_esc_receiver`:

            ```
            4  * N_ESC_SEV * (2 * 2 * 2^PING_CNT_DW)
            ```

            `pwrmgr` is the only block consuming the `N_ESC_SEV` and `PING_CNT_DW` compile time
            parameters:

            ```
            alert_handler_reg_pkg::N_ESC_SEV = 4
            alert_handler_reg_pkg::PING_CNT_DW = 16
            ```

            The alert escalation responder inside `pwrmgr` is connected to the `io_div4` clock,
            yielding a target 24MHz frequency. The result expected timeout based on the above
            parameters is thus:

            ```
            reverse_ping_timeout = 0.175s = (4 * 4 ( 2 * 2 * 2^16)) / 24e6
            ```

            **Procedure**

            - On POR reset:
              - Enable all alerts assigning them to ClassA.
              - Enable all local alerts and assign to ClassB.
              - Set escalation configuration to trigger before test wake up time.
              - Set ping timeout to a time less than wake up time.
              - Lock alert configuration and enable ping mechanism.
              - Wait for polling counters to cycle through by busy polling on Ibex for
                `reverse_ping_timeout >> 2` usec.
              - Configure AON to wake up device at a later time, making sure it is greater than the
                `reverse_ping_timeout` calculated in the previous section.
              - Enter deep sleep.
            - On wake up from sleep:
              - Ensure reset status is low power exit. A `kDifRstmgrResetInfoEscalation` signals
                that there was a local escalation and should result in test failure.
              - Disable AON timer.
              - Check there are no flagged local alerts.
            '''
      features: ["ALERT_HANDLER.PING_TIMER"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_alert_handler_reverse_ping_in_deep_sleep"]
      bazel: ["//sw/device/tests:alert_handler_reverse_ping_in_deep_sleep_test"]
    }
  ]
}
