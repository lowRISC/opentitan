// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
{
  name: flash_ctrl
  testpoints: [
    // FLASH integration tests
    {
      name: chip_sw_flash_init
      desc: '''Verify that flash initialization routine works correctly.

            - Initialize the flash ctrl by writing 1 to the INIT register.
            - Poll the status register for the initialization to complete.
            - Verify that during the init process, the flash ctrl requested keys from OTP. Verify
              with different sets of key values programmed in OTP.
            - Verify the flash ctrl can read seeds when lc_seed_hw_rd_en is set, otherwise all 1s.
            - Verify that the flash ctrl sent the creator and owner seeds to keymgr. Verify with
              different seed values.

            - This test needs to execute as a boot rom image.
            - In sival, this will be covered by manuf_ft_provision_rma_token_and_personalization.
            '''
      features: ["FLASH_CTRL.INIT.SCRAMBLING_KEYS", "FLASH_CTRL.INIT.ROOT_SEEDS",
                 "FLASH_CTRL.INFO.CREATOR_PARTITION", "FLASH_CTRL.INFO.OWNER_PARTITION"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_flash_init"]
      bazel: ["//sw/device/tests:flash_ctrl_test"]
    }
    {
      name: chip_sw_flash_host_access
      desc: '''Verify that the flash memory contents can be read by the CPU.

            Nothing extra to do here - most SW based tests fetch code from flash.
            '''
      features: ["FLASH_CTRL.OP.HOST_READ"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_flash_ctrl_access",
              "chip_sw_flash_ctrl_access_jitter_en"]
      bazel: ["//sw/device/tests:flash_ctrl_ops_test", "//sw/device/tests:flash_ctrl_test"]
    }
    {
      name: chip_sw_flash_ctrl_ops
      desc: '''Verify the SW can initiate flash operations via the controller.

            Verify that the CPU can read / program and erase the flash mem. Pick an operation on
            all data and info partitions. Erase both, bank and page. SW validates the reception of
            prog empty, prog level, rd full, rd level and op done interrupts.
            '''
      features: ["FLASH_CTRL.OP.PROTOCOL_CTRL"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_flash_ctrl_ops", "chip_sw_flash_ctrl_ops_jitter_en"]
      bazel: ["//sw/device/tests:flash_ctrl_ops_test"]
    }
    {
      name: chip_sw_flash_memory_protection
      desc: '''Extend chip_sw_flash_ctrl_access test to over following features.
            Perform READ/ PROGRAM/ ERASE operations over protected regions and pages of data and
            info partitions.
            Use set and reset values of corresponding read, program and erase enable bits.
            Test boundary values of regions. Test overlap of regions in which lower
            region wins arbitration.
            '''
      features: ["FLASH_CTRL.MEM_PROTECTION"]
      stage: V3
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_flash_ctrl_mem_protection"]
      bazel: ["//sw/device/tests:flash_ctrl_mem_protection_test"]
    }
    {
      name: chip_sw_flash_rma_unlocked
      desc: '''Verify the flash memory contents can be accessed after in RMA unlock.

            - Provision an RMA_UNLOCK token in OTP.
            - Repeat the following a few times:
              - Randomize the otp contents for device id, manufacturing state and RMA_UNLOCK token.
              - Reset the chip.
              - Ensure chip revision, device id and manufacturing state can be read through the LC JTAG.
            - Enable RMA mode, and verify that the SW can access the flash after RMA completion.

            - RMA entry should be done through the  JTAG interface.

            - X-ref'ed with manuf_ft_provision_rma_token_and_personalization from the manufacturing
              testplan.
            '''
      features: ["FLASH_CTRL.RMA"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_flash_rma_unlocked"]
    }
    {
      name: chip_sw_flash_scramble
      desc: '''Verify flash scrambling via the controller.

            - Extends the chip_flash_init test.
            - Verify flash scrambling with different key values programmed in OTP.
            - Verify read of scrambled contents via both, controller and direct host read.

            - Program a new scramble key in OTP and reboot - this time we need to backdoor load the
              flash with new test image that is re-scrambled with the new key.
            - Need to understand the bootstrapping requirements.
            '''
      features: ["FLASH_CTRL.INIT.SCRAMBLING_KEYS", "FLASH_CTRL.OP.PROTOCOL_CTRL"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_flash_init"]
      bazel: ["//sw/device/tests:flash_ctrl_test"]
    }
    {
      name: chip_sw_flash_idle_low_power
      desc: '''Verify flash_idle signaling to pwrmgr.

            - Initiate flash program or erase over the controller.
            - Program the pwrmgr to go into deep sleep.
            - Issue a WFI.
            - Ensure that the low power entry does not happen due to the ongoing flash operation.
            '''
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_flash_ctrl_idle_low_power"]
      bazel: ["//sw/device/tests:flash_ctrl_idle_low_power_test"]
    }
    {
      name: chip_sw_flash_keymgr_seeds
      desc: '''Verify the creator and owner seeds are read on flash init provided lc_hw_seed_rd_en
            is set.

            X-ref'ed with keymgr test.
            '''
      features: ["FLASH_CTRL.INIT.ROOT_SEEDS", "FLASH_CTRL.INFO.CREATOR_PARTITION", "FLASH_CTRL.INFO.OWNER_PARTITION"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_keymgr_key_derivation"]
    }
    {
      name: chip_sw_flash_lc_creator_seed_sw_rw_en
      desc: '''Verify the lc_creator_seed_sw_rw_en signal from LC ctrl.

            - Transition from TEST_LOCKED to DEV/PROD to ESCALATION/SCRAP state via OTP and verify
              that this LC signal transitions from 0 to 1 and back to 0. Verify that the SW
              accessibility of the corresponding partition depending on the signal value.
            '''
      features: ["FLASH_CTRL.INFO.CREATOR_PARTITION"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_flash_ctrl_lc_rw_en"]
      bazel: ["//sw/device/tests:flash_ctrl_info_access_lc_states",
              "//sw/device/tests:flash_ctrl_info_access_lc_states_personalized"]

    }
    {
      name: chip_sw_flash_creator_seed_wipe_on_rma
      desc: '''Verify that the creator seed is wiped by the flash ctrl on RMA entry.
            '''
      features: ["FLASH_CTRL.RMA"]
      stage: V2
      si_stage: SV3
      lc_states: ["RMA"]
      tests: ["chip_sw_flash_rma_unlocked"]
      bazel: ["//sw/device/tests:flash_ctrl_rma_test"]
    }
    {
      name: chip_sw_flash_lc_owner_seed_sw_rw_en
      desc: '''Verify the lc_owner_seed_sw_rw_en signal from LC ctrl.

            - Transition from TEST_LOCKED to DEV/PROD to ESCALATION/SCRAP state via OTP and verify
              that this LC signal transitions from 0 to 1 and back to 0. Verify that the SW
              accessibility of the corresponding partition depending on the signal value.
            '''
      features: ["FLASH_CTRL.INFO.OWNER_PARTITION"]
      stage: V2
      si_stage: SV3
      lc_states: ["DEV", "PROD", "PROD_END", "RMA"]
      tests: ["chip_sw_flash_ctrl_lc_rw_en"]
      bazel: ["//sw/device/tests:flash_ctrl_info_access_lc_states"]
    }
    {
      name: chip_sw_flash_lc_iso_part_sw_rd_en
      desc: '''Verify the lc_iso_part_sw_rd_en signal from LC ctrl.

            - Transition from DEV or PROD to ESCALATION/SCRAP state via OTP and verify
              that this LC signal transitions from 0 to 1 and back to 0. Verify that the SW
              accessibility of the corresponding partition depending on the signal value.
            '''
      features: ["FLASH_CTRL.INFO.ISOLATED_PARTITION"]
      stage: V2
      si_stage: SV3
      lc_states: ["PROD", "PROD_END", "RMA"]
      tests: ["chip_sw_flash_ctrl_lc_rw_en"]
      bazel: ["//sw/device/tests:flash_ctrl_info_access_lc_states"]
    }
    {
      name: chip_sw_flash_lc_iso_part_sw_wr_en
      desc: '''Verify the lc_creator_seed_sw_wr_en signal from LC ctrl.

            - Transition from TEST_LOCKED to DEV/PROD to ESCALATION/SCRAP state via OTP and verify
              that this LC signal transitions from 0 to 1 and back to 0. Verify that the SW
              accessibility of the corresponding partition depending on the signal value.
            '''
      features: ["FLASH_CTRL.INFO.ISOLATED_PARTITION"]
      stage: V2
      si_stage: SV3
      lc_states: ["TEST_UNLOCKED", "DEV", "PROD", "PROD_END", "RMA"]
      tests: ["chip_sw_flash_ctrl_lc_rw_en"]
      bazel: ["//sw/device/tests:flash_ctrl_info_access_lc_states"]
    }
    {
      name: chip_sw_flash_lc_seed_hw_rd_en
      desc: '''Verify the lc_seed_hw_rd_en signal from LC ctrl.

            - Transition from TEST_LOCKED to DEV/PROD to ESCALATION/SCRAP state via OTP and verify
              that this LC signal transitions from 0 to 1 and back to 0. Verify that the flash ctrl
              does (or does not) read the creator and owner partitions to fetch the seeds for the
              keymgr.
            - In sival, this will be covered by manuf_ft_provision_rma_token_and_personalization.
            '''
      features: ["FLASH_CTRL.INIT.ROOT_SEEDS"]
      stage: V2
      si_stage: SV3
      lc_states: ["DEV", "PROD", "PROD_END", "RMA"]
      tests: ["chip_sw_flash_ctrl_lc_rw_en"]
    }
    {
      name: chip_sw_flash_lc_escalate_en
      desc: '''Verify the lc_escalate_en signal from LC ctrl.

            - Trigger an LC escalation signal by generating an alert.
            - Verify that all flash accesses are disabled when the escalation kicks in.
            - Confirm flash accesses are disabled by erroing if the device executes the ISR.
            - Use assertion based connectivity check to prove that this signal is connected to the
              flash ctrl.

            X-ref with chip_sw_all_escalation_resets.
            '''
      features: ["FLASH_CTRL.ESCALATION"]
      stage: V2
      si_stage: NA
      tests: ["chip_sw_all_escalation_resets"]
    }
    {
      name: chip_sw_flash_prim_tl_access
      desc: '''Verify that the SW can read / write the prim tlul interface in flash phy.

            - The prim tlul interface is a open source placeholder for the closed source CSRs that
              will be implemented in a translation 'shim'.
            - Verify that this region can be read / written to by the SW in any LC state.
            '''
      stage: V2
      si_stage: NA
      tests: ["chip_prim_tl_access"]
    }
    {
      name: chip_sw_flash_ctrl_clock_freqs
      desc: '''Verify flash program and erase operations over the ctrl over a range of clock freqs.

            - Enable jitter on the clock while performing erase, write and read operations
              to the flash.
            - This sets the test for closed source where the flash access timing matters.
            '''
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_flash_ctrl_clock_freqs"]
      bazel: ["//sw/device/tests:flash_ctrl_clock_freqs_test"]
    }
    {
      name: chip_sw_flash_ctrl_escalation_reset
      desc: '''Verify the flash ctrl fatal error does not disturb escalation process
            and operation of ibex core.

            Trigger an internal fatal fault (host_gnt_err) from flash_ctrl
            and let it escalate to reset. Upon alert escalation reset,
            the internal status should be clean and should not send out more alerts.
            '''
      stage: V2
      si_stage: NA
      tests: ["chip_sw_flash_crash_alert"]
    }
    {
      name: chip_sw_flash_ctrl_write_clear
      desc: '''Verify the flash is able to process a second write to clear all bits
            when ECC is enabled.

            Configure memory protected entries to override the default flash configuration as follows:
            1. ECC enabled, scrambling and high endurance disabled.
            2. ECC and high endurance enabled, scrambling disabled.

            Test the following sequence:
            - Set one of the configuration options above.
            - Erase target page.
            - Write and verify intermediate value, different than all 1s or 0s.
            - Write and verify all 0s.

            The flash should not throw any errors on the second write.

            Note: The hardware does not support this behavior when scrambling is enabled.
            '''
      stage: V2
      si_stage: SV3
      lc_states: ["PROD"]
      tests: ["chip_sw_flash_crash_alert"]
      bazel: ["//sw/device/tests:flash_ctrl_write_clear_test"]
    }
  ]
}
