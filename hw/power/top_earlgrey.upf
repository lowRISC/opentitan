# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0
#
# Simple top_earlgrey upf for bronze
# This should be moved to top_earlgrey/data later

upf_version 2.1

###############################################
# Uses old power state semantics
# The new semantics, while useful, require its own set of
# work-arounds
###############################################
set_design_attributes -elements {.} -attribute {enable_state_propagation_in_add_power_state TRUE}


################################################
# Set top design
################################################
set_design_top top_earlgrey

################################################
# Define supply ports and nets
################################################

create_supply_port VCAON
create_supply_net  VCAON
connect_supply_net VCAON -ports VCAON

create_supply_port VCMAIN
create_supply_net  VCMAIN
connect_supply_net VCMAIN -ports VCMAIN

create_supply_port VCSS
create_supply_net  VCSS
connect_supply_net VCSS -ports VCSS

################################################
# Define supply sets
################################################

create_supply_set ss_aon -function {power VCAON} -function {ground VCSS}
create_supply_set ss_main -function {power VCMAIN} -function {ground VCSS}

################################################
# Create Power Domains
################################################

create_power_domain pd_main -supply {primary ss_main} -elements {.}

# u_sensor_ctrl being in the always on domain may be temporary.
create_power_domain pd_aon -supply {primary ss_aon} -elements { \
     u_sensor_ctrl \
     u_xbar_aon \
     u_pwrmgr_aon \
     u_rstmgr_aon \
     u_clkmgr_aon \
     u_rbox_aon \
     u_pwm_aon \
     u_pinmux_aon \
     u_padctrl_aon \
     u_timer_aon \
     u_usbdev_aon \
     u_dcd_aon \
     u_tl_adapter_ram_ret_aon \
     u_ram1p_ram_ret_aon
}

################################################
# Set port attributes
################################################

set aon_ports {
  rst_ni \
  jtag_tck_i \
  jtag_tms_i \
  jtag_trst_ni \
  jtag_tdi_i \
  mio_in_i \
  mio_out_o \
  mio_oe_o \
  dio_in_i \
  dio_out_o \
  dio_oe_o \
  mio_attr_o \
  dio_attr_o \
  sensor_ctrl_ast_host \
  sensor_ctrl_ast_dev \
  sensor_ctrl_ast_status \
  sensor_ctrl_ast_alert_req \
  sensor_ctrl_ast_alert_rsp \
  sensor_ctrl_ast_aux \
  pwrmgr_aon_pwr_ast_req \
  pwrmgr_aon_pwr_ast_rsp \
  rstmgr_aon_ast \
  usbdev_aon_usb_ref_pulse \
  usbdev_aon_usb_ref_val \
  clkmgr_aon_clk_main \
  clkmgr_aon_clk_io \
  clkmgr_aon_clk_usb \
  clkmgr_aon_clk_aon \
  dcd_aon_adc_req \
  dcd_aon_adc_rsp \
  pinmux_aon_io_pok \
  scan_rst_ni \
  scanmode_i
}

# There is no reason for jtag port to be always on since the driver is not always on.
# If this port is set to always on, it actually creates an issue of where the isolation
# cell must be inserted.
# Thus it is left up to the top level to insert isolation if consuming logic needs it to
# be always on.
set main_ports {
  jtag_tdo_o
}

set_port_attributes -ports $aon_ports -driver_supply ss_aon -receiver_supply ss_aon
set_port_attributes -ports $main_ports -driver_supply ss_main -receiver_supply ss_main

################################################
# Connect memory power
################################################
set all_mems [find_objects . -transitive True -leaf_only -pattern "*u_mem_macro*" ]
set aon_blocks [list "u_usbdev_aon*" "u_ram1p_ram_ret_aon*"]
set main_mems {}

# Filter through all memories and find main power domain supplied memories
foreach mem ${all_mems} {
    # puts "Looking at ${mem}"
    set found 0
    foreach aon ${aon_blocks} {
        if {[string match $aon $mem] == 1 && $found == 0} {
            set found 1
        }
    }

    if {$found == 0} {
        # puts "Found main ${mem}"
        lappend main_mems $mem
    } else {
        # puts "Found aon ${mem}"
        lappend aon_mems $mem
    }
}

# Connect main memories
foreach mem ${main_mems} {
   puts "\[MAIN\] Connecting $mem"
   connect_supply_net VCMAIN -ports ${mem}/VDD
   connect_supply_net VCSS   -ports ${mem}/VSS
}

# Connect aon memories
foreach mem ${aon_mems} {
   puts "\[AON\] Connecting $mem"
   connect_supply_net VCAON  -ports ${mem}/VDD
   connect_supply_net VCSS   -ports ${mem}/VSS
}

################################################
# Connect flash power
################################################
# Nothing yet


################################################
# Isolation strategies
################################################

# The tl adapater ram grant wiring is odd, should look to see if there's an option
# to ensure a constant high there can be pushed by a tie to VCAON instead of isolation cell
set iso_high_ports { \
   u_clkmgr_aon/status_i.idle[*] \
   u_pwrmgr_aon/pwr_otp_i.otp_idle \
   u_pwrmgr_aon/pwr_otp_i.otp_done \
   u_pwrmgr_aon/pwr_flash_i \
   u_tl_adapter_ram_ret_aon/gnt_i
}

set_isolation iso_aon -domain pd_aon \
   -source ss_main \
   -sink ss_aon \
   -isolation_supply_set ss_aon \
   -clamp_value 0 \
   -isolation_signal {u_pwrmgr_aon/i_slow_fsm/ast_o.pwr_clamp} \
   -isolation_sense high     \
   -exclude_elements $iso_high_ports \
   -name_prefix iso_main_to_aon

set_isolation iso_aon_high -domain pd_aon \
   -source ss_main \
   -sink ss_aon \
   -isolation_supply_set ss_aon \
   -clamp_value 1 \
   -isolation_signal {u_pwrmgr_aon/i_slow_fsm/ast_o.pwr_clamp} \
   -isolation_sense high     \
   -elements $iso_high_ports \
   -name_prefix iso_main_to_aon_high

################################################
# Power state table
# It does not appear vclp supports the latest syntax,
# so even though create_pst/add_pst are legacy commands, they are still used here.
# Specifically, it seems in logic_expr, vclp does not support checking the on state
# of a domain even when new semantics are used.
################################################

add_power_state -supply ss_aon  -state {AON_ON  -supply_expr {power == {FULL_ON 1.1}}}
add_power_state -supply ss_aon  -state {AON_OFF -supply_expr {power == OFF} -simstate CORRUPT }
add_power_state -supply ss_aon  -state {GND -supply_expr {ground == {FULL_ON 0.0}}}

add_power_state -supply ss_main -state {MAIN_ON  -supply_expr {power == {FULL_ON 1.1}}}
add_power_state -supply ss_main -state {MAIN_OFF -supply_expr {power == OFF} -simstate CORRUPT }

create_pst power_table -supplies              { ss_aon.power ss_main.power ss_aon.ground }
add_pst_state ALL_OFF -pst power_table -state { AON_OFF      MAIN_OFF      GND           }
add_pst_state ACTIVE  -pst power_table -state { AON_ON       MAIN_ON       GND           }
add_pst_state LP      -pst power_table -state { AON_ON       MAIN_OFF      GND           }
