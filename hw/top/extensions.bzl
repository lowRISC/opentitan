# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

def _top_desc_repo_impl(ctx):
    # Map from top's name to the definition file.
    top_map = {}

    for top_cfg in ctx.attr.top_cfgs:
        # Assume that the top cfg is in <top dir>/data/autogen/
        top_dir = ctx.path(top_cfg).dirname.dirname.dirname

        # The search paths for IPs are as followed, in order:
        # - <top dir>/ip
        # - <top dir>/ip_autogen
        # - <repo>/hw/ip
        ip_dirs = [
            "{}/ip".format(top_dir),
            "{}/ip_autogen".format(top_dir),
            ctx.path(ctx.attr._default_ip_dir).dirname,
        ]

        bzl_map = {}  # Use a dict to avoid duplicate, what we really want is a set.
        for target in [top_cfg, ctx.attr._default_ip_dir]:
            # The script only expects maps at the repository roots
            new_target = Label("@@{}//:BUILD.bazel".format(target.repo_name))
            bzl_map[new_target] = ctx.path(new_target)

        top_name = top_cfg.name.split(".")[0].removeprefix("top_")
        top_map[top_name] = "top_{}.bzl".format(top_name)

        ctx.execute(
            [
                ctx.path(ctx.attr.python_interpreter),
                ctx.path(ctx.attr._generate_top_desc),
                "-o",
                top_map[top_name],
            ] + [
                x
                for (label, path) in bzl_map.items()
                for x in (
                    "--map-bazel",
                    str(label),
                    path,
                )
            ] + [
                x
                for ip_dir in ip_dirs
                for x in (
                    "--ip-dir",
                    ip_dir,
                )
            ] + ["-v", ctx.path(top_cfg)],
            quiet = False,
        )

    # Create the defs.bzl file that pulls everything together.
    defs_content = ""
    for (top_name, def_file) in top_map.items():
        defs_content += 'load("//:{}", {} = "TOP")\n'.format(def_file, top_name.upper())

    defs_content += "\n"
    defs_content += "ALL_TOPS = [\n"
    for top_name in top_map:
        defs_content += "    {},\n".format(top_name.upper())
    defs_content += "]\n"

    ctx.file("defs.bzl", defs_content)
    ctx.file("BUILD", """exports_files(glob(["*"]))""")

top_desc_repo = repository_rule(
    implementation = _top_desc_repo_impl,
    doc = """
        Create a repository containing a `defs.bzl` file containing
        the description of all the tops, in the form of a single `ALL_TOPS`
        array whose elements are created by `opentitan_top`.
    """,
    attrs = {
        "top_cfgs": attr.label_list(
            default = [],
            doc = "Path to the description of every top",
        ),
        "python_interpreter": attr.label(
            allow_single_file = True,
            default = "@ot_py_for_repo//:python",
        ),
        "_generate_top_desc": attr.label(
            allow_single_file = True,
            default = "//hw/top:generate_top_desc.py",
        ),
        "_default_ip_dir": attr.label(
            default = "//hw/ip:BUILD.bazel",
        ),
    },
)

_register = tag_class(
    attrs = {
        "top_cfg": attr.label(
            mandatory = True,
            allow_single_file = True,
            doc = "Top configuration file generated by topgen (top_<name>.gen.hjson)",
        ),
    },
)

_expose = tag_class(
    attrs = {
        "repo_name": attr.string(
            mandatory = True,
            doc = """Name of the repository in which to expose the top configurations.
Note that it will contain tops registered in *all modules*.
""",
        ),
    },
)

def _top_impl(ctx):
    reg_list = []
    expose_list = []
    for mod in ctx.modules:
        for reg in mod.tags.register:
            reg_list.append(reg)

    top_desc_repo(
        name = "tops_desc",
        top_cfgs = [reg.top_cfg for reg in reg_list],
    )

    return ctx.extension_metadata(reproducible = True)

top = module_extension(
    implementation = _top_impl,
    tag_classes = {
        "register": _register,
    },
    doc = """Extension to register tops with the build system.
The tops will be exposed in a repository called `tops_desc`. See `top_desc_repo`.""",
)
