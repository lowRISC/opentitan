#!/usr/bin/env python3
# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

from pathlib import Path
from typing import Dict, List

from topgen.c_test import TopGenCTest
from reggen.ip_block import IpBlock
from autogen_banner import get_autogen_banner
from mako.template import Template

# This file is $REPO_TOP/util/autogen_testutils.py, so it takes two parent()
# calls to get back to the top.
REPO_TOP = Path(__file__).resolve().parent.parent.parent


def gen_tests(outdir: Path, completecfg: Dict[str, object], name_to_block: List[IpBlock]) -> None:
    """Generate testutils libraries that are rendered from Mako templates.

    Args:
        completecfg: Top-level description generated by topgen.
        name_to_block: Mapping from IP names to IP block description.

    Returns:
        None
    """

    # Define input/output directories.
    tests_templates_dir = REPO_TOP / "util/autogen_tests/templates"

    # Create output directories if needed.
    outdir.mkdir(exist_ok=True)

    tests = []
    c_helper = TopGenCTest(completecfg, name_to_block)

    # Render templates.
    gencmd = get_autogen_banner("util/autogen_tests.py", comment='//')
    for tests_template_path in tests_templates_dir.iterdir():
        if tests_template_path.suffix == ".tpl":
            # Read in template, render it, and write it to the output file.
            testutils_template = Template(tests_template_path.read_text())
            testutils = outdir / tests_template_path.stem
            testutils.write_text(
                testutils_template.render(
                    top=completecfg,
                    name_to_block=name_to_block,
                    helper=c_helper,
                    gencmd=gencmd
                )
            )
            tests += [testutils]

    print(f"tests successfully written to {str(tests)}.")
