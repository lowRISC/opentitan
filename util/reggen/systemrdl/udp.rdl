/* Copyright lowRISC contributors (OpenTitan project).
* Licensed under the Apache License, Version 2.0; see LICENSE for details.
* SPDX-License-Identifier: Apache-2.0
*/

/**
 * 4-bits boolean values
 */
enum MultiBitBool4 {
  True = 0x6;
  False = 0x9;
};

/**
 * 8-bits boolean values
 */
enum MultiBitBool8 {
  True = 0x96;
  False = 0x69;
};

/**
 * 12-bits boolean values
 */
enum MultiBitBool12 {
  True = 0x696;
  False = 0x969;
};

/**
 * 16-bits boolean values
 */
enum MultiBitBool16 {
  True = 0x9696;
  False = 0x6969;
};

/**
 * 20-bits boolean values
 */
enum MultiBitBool20 {
  True = 0x69696;
  False = 0x96969;
};

/**
 * 24-bits boolean values
 */
enum MultiBitBool24 {
  True = 0x969696;
  False = 0x696969;
};

/**
 * 28-bits boolean values
 */
enum MultiBitBool28 {
  True = 0x6969696;
  False = 0x9696969;
};

/**
 * 32-bits boolean values
 */
enum MultiBitBool32 {
  True = 0x96969696;
  False = 0x69696969;
};

/**
 * true if hardware uses `re` signal, which is latched signal of software read pulse.
 * The standard SystemRDL property `swacc` cannot be used here because `swacc = hwre | swmod`.
 */
property hwre {
  type = boolean;
  component = reg;
  default = false;
};

/* If it is true, the register will be implemented using the prim_subreg_shadow module.
 * Shadow registers are a mechanism to guard sensitive registers against this specific
 * type of attack. They come at a cost of increased area, and a modified SW interaction.
 */
property shadowed {
  type = boolean;
  component = reg;
  default = false;
};
