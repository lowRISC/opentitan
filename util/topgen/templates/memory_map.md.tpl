<!--
DO NOT EDIT THIS FILE DIRECTLY.
It has been generated with the following command:
${gencmd}
-->

# ${top["name"].capitalize()} Memory Map
% for addr_space in top["addr_spaces"]:

${"##"} ${addr_space["name"].capitalize()} Address Space

  % if "desc" in addr_space:
${addr_space["desc"]}

  % endif
${"###"} IP Memory Regions
<%
    from tabulate import tabulate
    headers = [
        "Module",
        "Interface",
        "Base Address",
        "Size (bytes)",
        "Size (words)",
        "Description",
    ]
    rows = []
    for (inst_name, if_name), region in helper.devices(addr_space["name"]):
        if_desc = inst_name if if_name is None else "{} device on {}".format(if_name, inst_name)
        hex_base_addr = "`0x{:X}`".format(region.base_addr)
        hex_size_bytes = "`0x{:X}`".format(region.size_bytes)
        hex_size_words = "`0x{:X}`".format(region.size_words)
        rows.append([
            inst_name,
            (if_name if if_name else "default"),
            hex_base_addr,
            hex_size_bytes,
            hex_size_words,
            if_desc,
        ])
    table_str = tabulate(rows, headers=headers, tablefmt="github")
%>
${table_str}
  % if len(helper.memories(addr_space["name"])):

${"###"} Memory Blocks
<%
    mem_rows = []
    for mem_name, region in helper.memories(addr_space["name"]):
        hex_base_addr = "`0x{:X}`".format(region.base_addr)
        hex_size_bytes = "`0x{:X}`".format(region.size_bytes)
        hex_size_words = "`0x{:X}`".format(region.size_words)
        mem_rows.append([
            mem_name[0],
            mem_name[1],
            hex_base_addr,
            hex_size_bytes,
            hex_size_words,
        ])

    mem_headers = [
        "Memory",
        "Interface",
        "Base Address",
        "Size (bytes)",
        "Size (words)",
    ]
    mem_table_str = tabulate(mem_rows, headers=mem_headers, tablefmt="github")
%>
${mem_table_str}
  % endif
% endfor
