#!/usr/bin/env python3
# Copyright lowRISC contributors (OpenTitan project).
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0
"""make_new_dif.py is a script for instantiating templates needed to begin
development on a new DIF.

To instantiate the files for a new IP named ip_ctrl, run the command:

$ util/make_new_dif.py --ip-name-snake "ip_ctrl" --ip-name-long "IP Controller"

where "IP Controller" is a documentation-friendly name for the IP.
For example, compare "pwrmgr" and "Power Manager".

It will instantiate:
- `util/make_new_dif/templates/dif_template.h.tpl` as the DIF Header boilerplate
  into `dif_<ip>.h`, which should be manually edited/enhanced.
- `util/make_new_dif/templates/dif_autogen.h.tpl` as the autogenerated DIF
  Header into `dif_<ip>_autogen.h`.
- `util/make_new_dif/templates/dif_autogen.c.tpl` as the autogenerated DIF
  implementation into `dif_<ip>_autogen.c`.
- `util/make_new_dif/templates/dif_autogen_unittest.cc.tpl` as the
  autogenerated DIF unit tests into `dif_<ip>_autogen_unittest.cc`.
- `doc/project_governance/checklist/sw_checklist.md.tpl` as the DIF Checklist
  into dif_<ip>.md,  which should be manually edited.

Each one of these templates has comments with more specific information.

You can also use the `--only=header`, `--only=autogen`, `--only=checklist` to
instantiate a subset of the templates. This can be passed multiple times, and
including `--only=all` will instantiate every template.

Note: the non-autogenerated files will still need some cleaning up before they
can be used.
"""

import argparse
from pathlib import Path

from autogen_banner import get_autogen_banner
from make_new_dif.ip import Ip
from mako.template import Template

# This file is $REPO_TOP/util/make_new_dif.py, so it takes two parent()
# calls to get back to the top.
REPO_TOP = Path(__file__).resolve().parent.parent


def main():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        "--ipcfg",
        "-i",
        type=Path,
        required=True,
        help="`<ip>.hjson` file."
    )
    parser.add_argument(
        "--outdir",
        "-o",
        type=Path,
        required=True,
        help="Output directory"
    )

    args = parser.parse_args()

    # Load IP.
    ip_name_snake = args.ipcfg.stem
    ip = Ip(ip_name_snake, "AUTOGEN", args.ipcfg)

    # Render DIF templates.
    template_path = REPO_TOP / "util/make_new_dif/templates"
    # Render all templates
    for filetype in [".h", ".c", "_unittest.cc"]:
        # Build input/output file names.
        template_file = template_path / f"dif_autogen{filetype}.tpl"
        out_file = (args.outdir /
                    f"dif_{ip.name_snake}_autogen{filetype}")

        # Read in template.
        template = Template(template_file.read_text(),
                            strict_undefined=True)

        # Generate output file.
        out_file.write_text(
            template.render(
                ip=ip,
                autogen_banner=get_autogen_banner(
                    "util/autogen_dif.py -i {} -o {}".format(args.ipcfg, args.outdir),
                    "//"
                )
            )
        )


if __name__ == "__main__":
    main()
